"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.help = help;
exports.processor = processor;
exports.name = void 0;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = 'File upload';
exports.name = name;

function help() {
  return {
    upload: 'Upload a file'
  };
}

async function fetchJSON(url) {
  const res = await (0, _nodeFetch.default)(url);

  if (res.ok) {
    const text = await res.text();
    return JSON.parse(text);
  } else {
    throw new Error(`Server returned ${res.status}`);
  }
}

function isTrustedAttachmentURL(url) {
  return /^https:\/\/directline.botframework.com\//i.test(url) || /^https:\/\/webchat.botframework.com\//i.test(url) || /^https?:\/\/localhost(:\d+)?\//i.test(url);
}

async function echoAttachment({
  contentType,
  contentUrl,
  name
}) {
  if (isTrustedAttachmentURL(contentUrl)) {
    // We only fetch content from trusted source, so we don't DDoS anyone.
    if (contentType === 'application/json') {
      return {
        content: await fetchJSON(contentUrl),
        contentType: 'application/vnd.microsoft.card.adaptive',
        name
      };
    } else if (/.attachmentjson$/iu.test(name)) {
      return await fetchJSON(contentUrl);
    }
  }

  return {
    contentType: 'application/octet-stream',
    contentUrl,
    name
  };
}

async function processor(context, attachments = []) {
  if (attachments.length) {
    await context.sendActivity({
      text: 'You have uploaded:',
      type: 'message',
      attachments: await Promise.all(attachments.map(echoAttachment))
    });
  } else {
    await context.sendActivity({
      text: 'You have uploaded no files.',
      type: 'message'
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9VcGxvYWQudHMiXSwibmFtZXMiOlsibmFtZSIsImhlbHAiLCJ1cGxvYWQiLCJmZXRjaEpTT04iLCJ1cmwiLCJyZXMiLCJvayIsInRleHQiLCJKU09OIiwicGFyc2UiLCJFcnJvciIsInN0YXR1cyIsImlzVHJ1c3RlZEF0dGFjaG1lbnRVUkwiLCJ0ZXN0IiwiZWNob0F0dGFjaG1lbnQiLCJjb250ZW50VHlwZSIsImNvbnRlbnRVcmwiLCJjb250ZW50IiwicHJvY2Vzc29yIiwiY29udGV4dCIsImF0dGFjaG1lbnRzIiwibGVuZ3RoIiwic2VuZEFjdGl2aXR5IiwidHlwZSIsIlByb21pc2UiLCJhbGwiLCJtYXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHLGFBQWI7OztBQUVBLFNBQVNDLElBQVQsR0FBZ0I7QUFDZCxTQUFPO0FBQ0xDLElBQUFBLE1BQU0sRUFBRTtBQURILEdBQVA7QUFHRDs7QUFFRCxlQUFlQyxTQUFmLENBQXlCQyxHQUF6QixFQUE4QjtBQUM1QixRQUFNQyxHQUFHLEdBQUcsTUFBTSx3QkFBTUQsR0FBTixDQUFsQjs7QUFFQSxNQUFJQyxHQUFHLENBQUNDLEVBQVIsRUFBWTtBQUNWLFVBQU1DLElBQUksR0FBRyxNQUFNRixHQUFHLENBQUNFLElBQUosRUFBbkI7QUFFQSxXQUFPQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0YsSUFBWCxDQUFQO0FBQ0QsR0FKRCxNQUlPO0FBQ0wsVUFBTSxJQUFJRyxLQUFKLENBQVcsbUJBQWtCTCxHQUFHLENBQUNNLE1BQU8sRUFBeEMsQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0Msc0JBQVQsQ0FBZ0NSLEdBQWhDLEVBQXFDO0FBQ25DLFNBQ0UsNENBQTRDUyxJQUE1QyxDQUFpRFQsR0FBakQsS0FDQSx5Q0FBeUNTLElBQXpDLENBQThDVCxHQUE5QyxDQURBLElBRUEsa0NBQWtDUyxJQUFsQyxDQUF1Q1QsR0FBdkMsQ0FIRjtBQUtEOztBQUVELGVBQWVVLGNBQWYsQ0FBOEI7QUFBRUMsRUFBQUEsV0FBRjtBQUFlQyxFQUFBQSxVQUFmO0FBQTJCaEIsRUFBQUE7QUFBM0IsQ0FBOUIsRUFBaUU7QUFDL0QsTUFBSVksc0JBQXNCLENBQUNJLFVBQUQsQ0FBMUIsRUFBd0M7QUFDdEM7QUFFQSxRQUFJRCxXQUFXLEtBQUssa0JBQXBCLEVBQXdDO0FBQ3RDLGFBQU87QUFDTEUsUUFBQUEsT0FBTyxFQUFFLE1BQU1kLFNBQVMsQ0FBQ2EsVUFBRCxDQURuQjtBQUVMRCxRQUFBQSxXQUFXLEVBQUUseUNBRlI7QUFHTGYsUUFBQUE7QUFISyxPQUFQO0FBS0QsS0FORCxNQU1PLElBQUkscUJBQXFCYSxJQUFyQixDQUEwQmIsSUFBMUIsQ0FBSixFQUFxQztBQUMxQyxhQUFPLE1BQU1HLFNBQVMsQ0FBQ2EsVUFBRCxDQUF0QjtBQUNEO0FBQ0Y7O0FBRUQsU0FBTztBQUNMRCxJQUFBQSxXQUFXLEVBQUUsMEJBRFI7QUFFTEMsSUFBQUEsVUFGSztBQUdMaEIsSUFBQUE7QUFISyxHQUFQO0FBS0Q7O0FBRUQsZUFBZWtCLFNBQWYsQ0FBeUJDLE9BQXpCLEVBQStDQyxXQUF5QixHQUFHLEVBQTNFLEVBQStFO0FBQzdFLE1BQUlBLFdBQVcsQ0FBQ0MsTUFBaEIsRUFBd0I7QUFDdEIsVUFBTUYsT0FBTyxDQUFDRyxZQUFSLENBQXFCO0FBQ3pCZixNQUFBQSxJQUFJLEVBQUUsb0JBRG1CO0FBRXpCZ0IsTUFBQUEsSUFBSSxFQUFFLFNBRm1CO0FBR3pCSCxNQUFBQSxXQUFXLEVBQUUsTUFBTUksT0FBTyxDQUFDQyxHQUFSLENBQVlMLFdBQVcsQ0FBQ00sR0FBWixDQUFnQlosY0FBaEIsQ0FBWjtBQUhNLEtBQXJCLENBQU47QUFLRCxHQU5ELE1BTU87QUFDTCxVQUFNSyxPQUFPLENBQUNHLFlBQVIsQ0FBcUI7QUFDekJmLE1BQUFBLElBQUksRUFBRSw2QkFEbUI7QUFFekJnQixNQUFBQSxJQUFJLEVBQUU7QUFGbUIsS0FBckIsQ0FBTjtBQUlEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdHRhY2htZW50LCBUdXJuQ29udGV4dCB9IGZyb20gJ2JvdGJ1aWxkZXInO1xuaW1wb3J0IGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnO1xuXG5jb25zdCBuYW1lID0gJ0ZpbGUgdXBsb2FkJztcblxuZnVuY3Rpb24gaGVscCgpIHtcbiAgcmV0dXJuIHtcbiAgICB1cGxvYWQ6ICdVcGxvYWQgYSBmaWxlJ1xuICB9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaEpTT04odXJsKSB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCk7XG5cbiAgaWYgKHJlcy5vaykge1xuICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuXG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBTZXJ2ZXIgcmV0dXJuZWQgJHtyZXMuc3RhdHVzfWApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVHJ1c3RlZEF0dGFjaG1lbnRVUkwodXJsKSB7XG4gIHJldHVybiAoXG4gICAgL15odHRwczpcXC9cXC9kaXJlY3RsaW5lLmJvdGZyYW1ld29yay5jb21cXC8vaS50ZXN0KHVybCkgfHxcbiAgICAvXmh0dHBzOlxcL1xcL3dlYmNoYXQuYm90ZnJhbWV3b3JrLmNvbVxcLy9pLnRlc3QodXJsKSB8fFxuICAgIC9eaHR0cHM/OlxcL1xcL2xvY2FsaG9zdCg6XFxkKyk/XFwvL2kudGVzdCh1cmwpXG4gICk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGVjaG9BdHRhY2htZW50KHsgY29udGVudFR5cGUsIGNvbnRlbnRVcmwsIG5hbWUgfSkge1xuICBpZiAoaXNUcnVzdGVkQXR0YWNobWVudFVSTChjb250ZW50VXJsKSkge1xuICAgIC8vIFdlIG9ubHkgZmV0Y2ggY29udGVudCBmcm9tIHRydXN0ZWQgc291cmNlLCBzbyB3ZSBkb24ndCBERG9TIGFueW9uZS5cblxuICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiBhd2FpdCBmZXRjaEpTT04oY29udGVudFVybCksXG4gICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vdm5kLm1pY3Jvc29mdC5jYXJkLmFkYXB0aXZlJyxcbiAgICAgICAgbmFtZVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKC8uYXR0YWNobWVudGpzb24kL2l1LnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBhd2FpdCBmZXRjaEpTT04oY29udGVudFVybCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXG4gICAgY29udGVudFVybCxcbiAgICBuYW1lXG4gIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3Nvcihjb250ZXh0OiBUdXJuQ29udGV4dCwgYXR0YWNobWVudHM6IEF0dGFjaG1lbnRbXSA9IFtdKSB7XG4gIGlmIChhdHRhY2htZW50cy5sZW5ndGgpIHtcbiAgICBhd2FpdCBjb250ZXh0LnNlbmRBY3Rpdml0eSh7XG4gICAgICB0ZXh0OiAnWW91IGhhdmUgdXBsb2FkZWQ6JyxcbiAgICAgIHR5cGU6ICdtZXNzYWdlJyxcbiAgICAgIGF0dGFjaG1lbnRzOiBhd2FpdCBQcm9taXNlLmFsbChhdHRhY2htZW50cy5tYXAoZWNob0F0dGFjaG1lbnQpKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGNvbnRleHQuc2VuZEFjdGl2aXR5KHtcbiAgICAgIHRleHQ6ICdZb3UgaGF2ZSB1cGxvYWRlZCBubyBmaWxlcy4nLFxuICAgICAgdHlwZTogJ21lc3NhZ2UnXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgaGVscCwgbmFtZSwgcHJvY2Vzc29yIH07XG4iXX0=