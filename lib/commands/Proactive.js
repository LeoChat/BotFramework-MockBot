"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.help = help;
exports.processor = processor;
exports.name = void 0;

var _botbuilder = require("botbuilder");

const name = 'Proactive message';
exports.name = name;
const WAIT_INTERVAL = 5000;

function help() {
  return {
    proactive: 'Proactively send a message later'
  };
}

async function processor(context, args = '') {
  const reference = _botbuilder.TurnContext.getConversationReference(context.activity);

  await context.sendActivity({
    speak: 'Will send a proactive message soon.',
    type: 'message',
    text: `Will send a proactive message after ${WAIT_INTERVAL / 1000} seconds. Attached is the JSON of the conversation \`reference\` that will be used to reinstantiate the \`TurnContext\`.`,
    attachments: [{
      content: `\`\`\`\n${JSON.stringify(reference, null, 2)}\n\`\`\``,
      contentType: 'text/markdown'
    }]
  });

  (async function (reference) {
    // We specifically write this block of code to show how proactive message should work.
    // This block of code should run under another process and it will only have knowledge of adapter setup and conversation reference.
    await sleep(WAIT_INTERVAL);
    const adapter = new _botbuilder.BotFrameworkAdapter({
      appId: process.env.MICROSOFT_APP_ID,
      appPassword: process.env.MICROSOFT_APP_PASSWORD
    });
    await adapter.continueConversation(reference, async continuedContext => {
      const command = args.trim().toLowerCase();

      if (command === 'card') {
        await continuedContext.sendActivity({
          type: 'message',
          text: 'Where are you from?',
          attachments: [{
            contentType: 'application/vnd.microsoft.card.hero',
            content: {
              buttons: [{
                title: 'United States',
                type: 'imBack',
                value: 'herocard qna 2 I am from United States.'
              }, {
                title: 'Hong Kong',
                type: 'imBack',
                value: 'I am from Hong Kong.'
              }]
            }
          }]
        });
      } else {
        await continuedContext.sendActivity({
          speak: 'This is a proactive message.',
          text: 'This is a proactive message.',
          type: 'message'
        });
      }
    });
  })(reference);
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9Qcm9hY3RpdmUudHMiXSwibmFtZXMiOlsibmFtZSIsIldBSVRfSU5URVJWQUwiLCJoZWxwIiwicHJvYWN0aXZlIiwicHJvY2Vzc29yIiwiY29udGV4dCIsImFyZ3MiLCJyZWZlcmVuY2UiLCJUdXJuQ29udGV4dCIsImdldENvbnZlcnNhdGlvblJlZmVyZW5jZSIsImFjdGl2aXR5Iiwic2VuZEFjdGl2aXR5Iiwic3BlYWsiLCJ0eXBlIiwidGV4dCIsImF0dGFjaG1lbnRzIiwiY29udGVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb250ZW50VHlwZSIsInNsZWVwIiwiYWRhcHRlciIsIkJvdEZyYW1ld29ya0FkYXB0ZXIiLCJhcHBJZCIsInByb2Nlc3MiLCJlbnYiLCJNSUNST1NPRlRfQVBQX0lEIiwiYXBwUGFzc3dvcmQiLCJNSUNST1NPRlRfQVBQX1BBU1NXT1JEIiwiY29udGludWVDb252ZXJzYXRpb24iLCJjb250aW51ZWRDb250ZXh0IiwiY29tbWFuZCIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsImJ1dHRvbnMiLCJ0aXRsZSIsInZhbHVlIiwibXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUdBLE1BQU1BLElBQUksR0FBRyxtQkFBYjs7QUFDQSxNQUFNQyxhQUFhLEdBQUcsSUFBdEI7O0FBRUEsU0FBU0MsSUFBVCxHQUFnQjtBQUNkLFNBQU87QUFDTEMsSUFBQUEsU0FBUyxFQUFFO0FBRE4sR0FBUDtBQUdEOztBQUVELGVBQWVDLFNBQWYsQ0FBeUJDLE9BQXpCLEVBQStDQyxJQUFZLEdBQUcsRUFBOUQsRUFBa0U7QUFDaEUsUUFBTUMsU0FBUyxHQUFHQyx3QkFBWUMsd0JBQVosQ0FBcUNKLE9BQU8sQ0FBQ0ssUUFBN0MsQ0FBbEI7O0FBRUEsUUFBTUwsT0FBTyxDQUFDTSxZQUFSLENBQXFCO0FBQ3pCQyxJQUFBQSxLQUFLLEVBQUUscUNBRGtCO0FBRXpCQyxJQUFBQSxJQUFJLEVBQUUsU0FGbUI7QUFHekJDLElBQUFBLElBQUksRUFBRyx1Q0FDTGIsYUFBYSxHQUFHLElBQ2pCLDBIQUx3QjtBQU16QmMsSUFBQUEsV0FBVyxFQUFFLENBQ1g7QUFDRUMsTUFBQUEsT0FBTyxFQUFHLFdBQVVDLElBQUksQ0FBQ0MsU0FBTCxDQUFlWCxTQUFmLEVBQTBCLElBQTFCLEVBQWdDLENBQWhDLENBQW1DLFVBRHpEO0FBRUVZLE1BQUFBLFdBQVcsRUFBRTtBQUZmLEtBRFc7QUFOWSxHQUFyQixDQUFOOztBQWNBLEdBQUMsZ0JBQWdCWixTQUFoQixFQUEyQjtBQUMxQjtBQUNBO0FBQ0EsVUFBTWEsS0FBSyxDQUFDbkIsYUFBRCxDQUFYO0FBRUEsVUFBTW9CLE9BQU8sR0FBRyxJQUFJQywrQkFBSixDQUF3QjtBQUN0Q0MsTUFBQUEsS0FBSyxFQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsZ0JBRG1CO0FBRXRDQyxNQUFBQSxXQUFXLEVBQUVILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRztBQUZhLEtBQXhCLENBQWhCO0FBS0EsVUFBTVAsT0FBTyxDQUFDUSxvQkFBUixDQUE2QnRCLFNBQTdCLEVBQXdDLE1BQU11QixnQkFBTixJQUEwQjtBQUN0RSxZQUFNQyxPQUFPLEdBQUd6QixJQUFJLENBQUMwQixJQUFMLEdBQVlDLFdBQVosRUFBaEI7O0FBRUEsVUFBSUYsT0FBTyxLQUFLLE1BQWhCLEVBQXdCO0FBQ3RCLGNBQU1ELGdCQUFnQixDQUFDbkIsWUFBakIsQ0FBOEI7QUFDbENFLFVBQUFBLElBQUksRUFBRSxTQUQ0QjtBQUVsQ0MsVUFBQUEsSUFBSSxFQUFFLHFCQUY0QjtBQUdsQ0MsVUFBQUEsV0FBVyxFQUFFLENBQ1g7QUFDRUksWUFBQUEsV0FBVyxFQUFFLHFDQURmO0FBRUVILFlBQUFBLE9BQU8sRUFBRTtBQUNQa0IsY0FBQUEsT0FBTyxFQUFFLENBQ1A7QUFDRUMsZ0JBQUFBLEtBQUssRUFBRSxlQURUO0FBRUV0QixnQkFBQUEsSUFBSSxFQUFFLFFBRlI7QUFHRXVCLGdCQUFBQSxLQUFLLEVBQUU7QUFIVCxlQURPLEVBTVA7QUFDRUQsZ0JBQUFBLEtBQUssRUFBRSxXQURUO0FBRUV0QixnQkFBQUEsSUFBSSxFQUFFLFFBRlI7QUFHRXVCLGdCQUFBQSxLQUFLLEVBQUU7QUFIVCxlQU5PO0FBREY7QUFGWCxXQURXO0FBSHFCLFNBQTlCLENBQU47QUF1QkQsT0F4QkQsTUF3Qk87QUFDTCxjQUFNTixnQkFBZ0IsQ0FBQ25CLFlBQWpCLENBQThCO0FBQ2xDQyxVQUFBQSxLQUFLLEVBQUUsOEJBRDJCO0FBRWxDRSxVQUFBQSxJQUFJLEVBQUUsOEJBRjRCO0FBR2xDRCxVQUFBQSxJQUFJLEVBQUU7QUFINEIsU0FBOUIsQ0FBTjtBQUtEO0FBQ0YsS0FsQ0ssQ0FBTjtBQW1DRCxHQTdDRCxFQTZDR04sU0E3Q0g7QUE4Q0Q7O0FBRUQsU0FBU2EsS0FBVCxDQUFlaUIsRUFBZixFQUFtQjtBQUNqQixTQUFPLElBQUlDLE9BQUosQ0FBWUMsT0FBTyxJQUFJQyxVQUFVLENBQUNELE9BQUQsRUFBVUYsRUFBVixDQUFqQyxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3RGcmFtZXdvcmtBZGFwdGVyIH0gZnJvbSAnYm90YnVpbGRlcic7XG5pbXBvcnQgeyBUdXJuQ29udGV4dCB9IGZyb20gJ2JvdGJ1aWxkZXInO1xuXG5jb25zdCBuYW1lID0gJ1Byb2FjdGl2ZSBtZXNzYWdlJztcbmNvbnN0IFdBSVRfSU5URVJWQUwgPSA1MDAwO1xuXG5mdW5jdGlvbiBoZWxwKCkge1xuICByZXR1cm4ge1xuICAgIHByb2FjdGl2ZTogJ1Byb2FjdGl2ZWx5IHNlbmQgYSBtZXNzYWdlIGxhdGVyJ1xuICB9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBwcm9jZXNzb3IoY29udGV4dDogVHVybkNvbnRleHQsIGFyZ3M6IHN0cmluZyA9ICcnKSB7XG4gIGNvbnN0IHJlZmVyZW5jZSA9IFR1cm5Db250ZXh0LmdldENvbnZlcnNhdGlvblJlZmVyZW5jZShjb250ZXh0LmFjdGl2aXR5KTtcblxuICBhd2FpdCBjb250ZXh0LnNlbmRBY3Rpdml0eSh7XG4gICAgc3BlYWs6ICdXaWxsIHNlbmQgYSBwcm9hY3RpdmUgbWVzc2FnZSBzb29uLicsXG4gICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgIHRleHQ6IGBXaWxsIHNlbmQgYSBwcm9hY3RpdmUgbWVzc2FnZSBhZnRlciAke1xuICAgICAgV0FJVF9JTlRFUlZBTCAvIDEwMDBcbiAgICB9IHNlY29uZHMuIEF0dGFjaGVkIGlzIHRoZSBKU09OIG9mIHRoZSBjb252ZXJzYXRpb24gXFxgcmVmZXJlbmNlXFxgIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJlaW5zdGFudGlhdGUgdGhlIFxcYFR1cm5Db250ZXh0XFxgLmAsXG4gICAgYXR0YWNobWVudHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29udGVudDogYFxcYFxcYFxcYFxcbiR7SlNPTi5zdHJpbmdpZnkocmVmZXJlbmNlLCBudWxsLCAyKX1cXG5cXGBcXGBcXGBgLFxuICAgICAgICBjb250ZW50VHlwZTogJ3RleHQvbWFya2Rvd24nXG4gICAgICB9XG4gICAgXVxuICB9KTtcblxuICAoYXN5bmMgZnVuY3Rpb24gKHJlZmVyZW5jZSkge1xuICAgIC8vIFdlIHNwZWNpZmljYWxseSB3cml0ZSB0aGlzIGJsb2NrIG9mIGNvZGUgdG8gc2hvdyBob3cgcHJvYWN0aXZlIG1lc3NhZ2Ugc2hvdWxkIHdvcmsuXG4gICAgLy8gVGhpcyBibG9jayBvZiBjb2RlIHNob3VsZCBydW4gdW5kZXIgYW5vdGhlciBwcm9jZXNzIGFuZCBpdCB3aWxsIG9ubHkgaGF2ZSBrbm93bGVkZ2Ugb2YgYWRhcHRlciBzZXR1cCBhbmQgY29udmVyc2F0aW9uIHJlZmVyZW5jZS5cbiAgICBhd2FpdCBzbGVlcChXQUlUX0lOVEVSVkFMKTtcblxuICAgIGNvbnN0IGFkYXB0ZXIgPSBuZXcgQm90RnJhbWV3b3JrQWRhcHRlcih7XG4gICAgICBhcHBJZDogcHJvY2Vzcy5lbnYuTUlDUk9TT0ZUX0FQUF9JRCxcbiAgICAgIGFwcFBhc3N3b3JkOiBwcm9jZXNzLmVudi5NSUNST1NPRlRfQVBQX1BBU1NXT1JEXG4gICAgfSk7XG5cbiAgICBhd2FpdCBhZGFwdGVyLmNvbnRpbnVlQ29udmVyc2F0aW9uKHJlZmVyZW5jZSwgYXN5bmMgY29udGludWVkQ29udGV4dCA9PiB7XG4gICAgICBjb25zdCBjb21tYW5kID0gYXJncy50cmltKCkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgaWYgKGNvbW1hbmQgPT09ICdjYXJkJykge1xuICAgICAgICBhd2FpdCBjb250aW51ZWRDb250ZXh0LnNlbmRBY3Rpdml0eSh7XG4gICAgICAgICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgICAgICAgIHRleHQ6ICdXaGVyZSBhcmUgeW91IGZyb20/JyxcbiAgICAgICAgICBhdHRhY2htZW50czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5taWNyb3NvZnQuY2FyZC5oZXJvJyxcbiAgICAgICAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgICAgIGJ1dHRvbnM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdVbml0ZWQgU3RhdGVzJyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ltQmFjaycsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnaGVyb2NhcmQgcW5hIDIgSSBhbSBmcm9tIFVuaXRlZCBTdGF0ZXMuJ1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdIb25nIEtvbmcnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW1CYWNrJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdJIGFtIGZyb20gSG9uZyBLb25nLidcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgY29udGludWVkQ29udGV4dC5zZW5kQWN0aXZpdHkoe1xuICAgICAgICAgIHNwZWFrOiAnVGhpcyBpcyBhIHByb2FjdGl2ZSBtZXNzYWdlLicsXG4gICAgICAgICAgdGV4dDogJ1RoaXMgaXMgYSBwcm9hY3RpdmUgbWVzc2FnZS4nLFxuICAgICAgICAgIHR5cGU6ICdtZXNzYWdlJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSkocmVmZXJlbmNlKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG5leHBvcnQgeyBoZWxwLCBuYW1lLCBwcm9jZXNzb3IgfTtcbiJdfQ==