"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.help = help;
exports.processor = processor;
exports.name = void 0;

var _botbuilderDialogs = require("botbuilder-dialogs");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _singletonConversationState = _interopRequireDefault(require("../singletonConversationState"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const dialogState = _singletonConversationState.default['createProperty']('dialogState');

const dialogs = new _botbuilderDialogs.DialogSet(dialogState);
dialogs.add(new _botbuilderDialogs.ChoicePrompt('CONFIRM_PROMPT'));
dialogs.add(new _botbuilderDialogs.OAuthPrompt('OAUTH_PROMPT', {
  connectionName: process.env.OAUTH_CONNECTION_NAME,
  text: 'Sign into GitHub',
  title: 'Sign in'
}));
dialogs.add(new _botbuilderDialogs.WaterfallDialog('AUTH_DIALOG', [async step => await step.prompt('OAUTH_PROMPT', {}), async step => {
  if (step.result) {
    await step.context.sendActivity('You have now logged in.');
    return await step.next(step.result);
  } else {
    await step.context.sendActivity('Failed to login, please try again.');
    return await step.endDialog();
  }
}, async step => {
  await step.context.sendActivity('Please wait while I am bringing up your GitHub profile.');
  step.context.sendActivity({
    type: 'typing'
  });
  const {
    result: {
      token
    }
  } = step;
  const res = await (0, _nodeFetch.default)(`https://api.github.com/user?access_token=${encodeURIComponent(token)}`);

  if (res.ok) {
    const json = await res.json();
    await step.context.sendActivity(`![${json.login}](${json.avatar_url})\r\n# \`${json.login}\``);
  } else {
    await step.context.sendActivity(`Failed to bring up your profile, GitHub server returned \`${res.status}\`.`);
  }

  return await step.endDialog();
}]));

function help() {
  return {
    'oauth': 'Start OAuth flow',
    'oauth signout': 'Sign out'
  };
}

const name = 'OAuth card';
exports.name = name;

async function processor(context, arg) {
  if ((arg || '').trim() === 'oauth signout') {
    await context.sendActivity('Please wait while I am signing you out.');
    await context.sendActivity({
      type: 'typing'
    });
    await context.adapter['signOutUser'](context, process.env.OAUTH_CONNECTION_NAME);
    await context.sendActivity('You have been signed out now.');
  } else {
    const dialogContext = await dialogs.createContext(context);
    await dialogContext.continueDialog();

    if (!context.responded) {
      await dialogContext.beginDialog('AUTH_DIALOG');
    }

    await _singletonConversationState.default['saveChanges'](context);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9PQXV0aENhcmQyLnRzIl0sIm5hbWVzIjpbImRpYWxvZ1N0YXRlIiwiY29udmVyc2F0aW9uU3RhdGUiLCJkaWFsb2dzIiwiRGlhbG9nU2V0IiwiYWRkIiwiQ2hvaWNlUHJvbXB0IiwiT0F1dGhQcm9tcHQiLCJjb25uZWN0aW9uTmFtZSIsInByb2Nlc3MiLCJlbnYiLCJPQVVUSF9DT05ORUNUSU9OX05BTUUiLCJ0ZXh0IiwidGl0bGUiLCJXYXRlcmZhbGxEaWFsb2ciLCJzdGVwIiwicHJvbXB0IiwicmVzdWx0IiwiY29udGV4dCIsInNlbmRBY3Rpdml0eSIsIm5leHQiLCJlbmREaWFsb2ciLCJ0eXBlIiwidG9rZW4iLCJyZXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJvayIsImpzb24iLCJsb2dpbiIsImF2YXRhcl91cmwiLCJzdGF0dXMiLCJoZWxwIiwibmFtZSIsInByb2Nlc3NvciIsImFyZyIsInRyaW0iLCJhZGFwdGVyIiwiZGlhbG9nQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJjb250aW51ZURpYWxvZyIsInJlc3BvbmRlZCIsImJlZ2luRGlhbG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFFQTs7OztBQUVBLE1BQU1BLFdBQVcsR0FBR0Msb0NBQWtCLGdCQUFsQixFQUFvQyxhQUFwQyxDQUFwQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBSUMsNEJBQUosQ0FBY0gsV0FBZCxDQUFoQjtBQUVBRSxPQUFPLENBQUNFLEdBQVIsQ0FBWSxJQUFJQywrQkFBSixDQUFpQixnQkFBakIsQ0FBWjtBQUVBSCxPQUFPLENBQUNFLEdBQVIsQ0FBWSxJQUFJRSw4QkFBSixDQUFnQixjQUFoQixFQUFnQztBQUMxQ0MsRUFBQUEsY0FBYyxFQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMscUJBRGM7QUFFMUNDLEVBQUFBLElBQUksRUFBRSxrQkFGb0M7QUFHMUNDLEVBQUFBLEtBQUssRUFBRTtBQUhtQyxD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QUFpQ2dCLE9BQWpDLENBQU47QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHVybkNvbnRleHQsIEFjdGl2aXR5VHlwZXMgfSBmcm9tICdib3RidWlsZGVyJztcbmltcG9ydCB7IE9BdXRoUHJvbXB0LCBEaWFsb2dTZXQsIENob2ljZVByb21wdCwgRGlhbG9nUmVhc29uLCBXYXRlcmZhbGxEaWFsb2cgfSBmcm9tICdib3RidWlsZGVyLWRpYWxvZ3MnO1xuaW1wb3J0IGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnO1xuXG5pbXBvcnQgY29udmVyc2F0aW9uU3RhdGUgZnJvbSAnLi4vc2luZ2xldG9uQ29udmVyc2F0aW9uU3RhdGUnO1xuXG5jb25zdCBkaWFsb2dTdGF0ZSA9IGNvbnZlcnNhdGlvblN0YXRlWydjcmVhdGVQcm9wZXJ0eSddKCdkaWFsb2dTdGF0ZScpO1xuY29uc3QgZGlhbG9ncyA9IG5ldyBEaWFsb2dTZXQoZGlhbG9nU3RhdGUpO1xuXG5kaWFsb2dzLmFkZChuZXcgQ2hvaWNlUHJvbXB0KCdDT05GSVJNX1BST01QVCcpKTtcblxuZGlhbG9ncy5hZGQobmV3IE9BdXRoUHJvbXB0KCdPQVVUSF9QUk9NUFQnLCB7XG4gIGNvbm5lY3Rpb25OYW1lOiBwcm9jZXNzLmVudi5PQVVUSF9DT05ORUNUSU9OX05BTUUsXG4gIHRleHQ6ICdTaWduIGludG8gR2l0SHViJyxcbiAgdGl0bGU6ICdTaWduIGluJ1xufSkpO1xuXG5kaWFsb2dzLmFkZChuZXcgV2F0ZXJmYWxsRGlhbG9nKCdBVVRIX0RJQUxPRycsIFtcbiAgYXN5bmMgc3RlcCA9PiBhd2FpdCBzdGVwLnByb21wdCgnT0FVVEhfUFJPTVBUJywge30pLFxuICBhc3luYyBzdGVwID0+IHtcbiAgICBpZiAoc3RlcC5yZXN1bHQpIHtcbiAgICAgIGF3YWl0IHN0ZXAuY29udGV4dC5zZW5kQWN0aXZpdHkoJ1lvdSBoYXZlIG5vdyBsb2dnZWQgaW4uJyk7XG5cbiAgICAgIHJldHVybiBhd2FpdCBzdGVwLm5leHQoc3RlcC5yZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCBzdGVwLmNvbnRleHQuc2VuZEFjdGl2aXR5KCdGYWlsZWQgdG8gbG9naW4sIHBsZWFzZSB0cnkgYWdhaW4uJyk7XG5cbiAgICAgIHJldHVybiBhd2FpdCBzdGVwLmVuZERpYWxvZygpO1xuICAgIH1cbiAgfSxcbiAgYXN5bmMgc3RlcCA9PiB7XG4gICAgYXdhaXQgc3RlcC5jb250ZXh0LnNlbmRBY3Rpdml0eSgnUGxlYXNlIHdhaXQgd2hpbGUgSSBhbSBicmluZ2luZyB1cCB5b3VyIEdpdEh1YiBwcm9maWxlLicpO1xuXG4gICAgc3RlcC5jb250ZXh0LnNlbmRBY3Rpdml0eSh7IHR5cGU6ICd0eXBpbmcnIH0pO1xuXG4gICAgY29uc3QgeyByZXN1bHQ6IHsgdG9rZW4gfSB9ID0gc3RlcDtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS91c2VyP2FjY2Vzc190b2tlbj0keyBlbmNvZGVVUklDb21wb25lbnQodG9rZW4pIH1gKTtcblxuICAgIGlmIChyZXMub2spIHtcbiAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICBhd2FpdCBzdGVwLmNvbnRleHQuc2VuZEFjdGl2aXR5KGAhWyR7IGpzb24ubG9naW4gfV0oJHsganNvbi5hdmF0YXJfdXJsIH0pXFxyXFxuIyBcXGAkeyBqc29uLmxvZ2luIH1cXGBgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgc3RlcC5jb250ZXh0LnNlbmRBY3Rpdml0eShgRmFpbGVkIHRvIGJyaW5nIHVwIHlvdXIgcHJvZmlsZSwgR2l0SHViIHNlcnZlciByZXR1cm5lZCBcXGAkeyByZXMuc3RhdHVzIH1cXGAuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHN0ZXAuZW5kRGlhbG9nKCk7XG4gIH1cbl0pKTtcblxuZnVuY3Rpb24gaGVscCgpIHtcbiAgcmV0dXJuIHtcbiAgICAnb2F1dGgnOiAnU3RhcnQgT0F1dGggZmxvdycsXG4gICAgJ29hdXRoIHNpZ25vdXQnOiAnU2lnbiBvdXQnXG4gIH07XG59XG5cbmNvbnN0IG5hbWUgPSAnT0F1dGggY2FyZCc7XG5cbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3Nvcihjb250ZXh0OiBUdXJuQ29udGV4dCwgYXJnPzogc3RyaW5nKSB7XG4gIGlmICgoYXJnIHx8ICcnKS50cmltKCkgPT09ICdvYXV0aCBzaWdub3V0Jykge1xuICAgIGF3YWl0IGNvbnRleHQuc2VuZEFjdGl2aXR5KCdQbGVhc2Ugd2FpdCB3aGlsZSBJIGFtIHNpZ25pbmcgeW91IG91dC4nKTtcbiAgICBhd2FpdCBjb250ZXh0LnNlbmRBY3Rpdml0eSh7IHR5cGU6ICd0eXBpbmcnIH0pO1xuICAgIGF3YWl0IGNvbnRleHQuYWRhcHRlclsnc2lnbk91dFVzZXInXShjb250ZXh0LCBwcm9jZXNzLmVudi5PQVVUSF9DT05ORUNUSU9OX05BTUUpO1xuICAgIGF3YWl0IGNvbnRleHQuc2VuZEFjdGl2aXR5KCdZb3UgaGF2ZSBiZWVuIHNpZ25lZCBvdXQgbm93LicpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGRpYWxvZ0NvbnRleHQgPSBhd2FpdCBkaWFsb2dzLmNyZWF0ZUNvbnRleHQoY29udGV4dCk7XG5cbiAgICBhd2FpdCBkaWFsb2dDb250ZXh0LmNvbnRpbnVlRGlhbG9nKCk7XG5cbiAgICBpZiAoIWNvbnRleHQucmVzcG9uZGVkKSB7XG4gICAgICBhd2FpdCBkaWFsb2dDb250ZXh0LmJlZ2luRGlhbG9nKCdBVVRIX0RJQUxPRycpO1xuICAgIH1cblxuICAgIGF3YWl0IGNvbnZlcnNhdGlvblN0YXRlWydzYXZlQ2hhbmdlcyddKGNvbnRleHQpO1xuICB9XG59XG5cbmV4cG9ydCB7IGhlbHAsIG5hbWUsIHByb2Nlc3NvciB9XG4iXX0=