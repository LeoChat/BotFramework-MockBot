"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.help = help;
exports.processor = processor;
exports.name = exports.mode = void 0;
const name = 'Hero card actions'; // Read argument as a single line

exports.name = name;
const mode = 'line';
exports.mode = mode;

function help() {
  return {
    herocardactions: 'Show a hero card with multiple actions'
  };
}

async function processor(context) {
  await context.sendActivity({
    type: 'message',
    text: '',
    attachmentLayout: 'carousel',
    attachments: [{
      contentType: 'application/vnd.microsoft.card.hero',
      content: {
        buttons: [{
          title: 'imBack',
          type: 'imBack',
          value: 'string'
        }, {
          title: 'postBack (string)',
          type: 'postBack',
          value: 'string'
        }, {
          title: 'postBack (JSON)',
          type: 'postBack',
          value: {
            value: 'value'
          }
        }, {
          displayText: 'displayText',
          text: '"text"',
          title: 'messageBack (displayText + text + value)',
          type: 'messageBack',
          value: {
            value: 'value'
          }
        }, {
          displayText: 'displayText',
          text: '"text"',
          title: 'messageBack (displayText + text)',
          type: 'messageBack',
          // There is a bug in DLJS that prevented it to send the activity without "value" field set
          value: null
        }, {
          title: 'messageBack (value)',
          type: 'messageBack',
          value: {
            value: 'value'
          }
        }, {
          title: 'postBack (empty)',
          type: 'postBack'
        }, {
          title: 'messageBack (empty)',
          type: 'messageBack'
        }],
        title: 'Hero Card Actions'
      }
    }]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9IZXJvQ2FyZEFjdGlvbnMudHMiXSwibmFtZXMiOlsibmFtZSIsIm1vZGUiLCJoZWxwIiwiaGVyb2NhcmRhY3Rpb25zIiwicHJvY2Vzc29yIiwiY29udGV4dCIsInNlbmRBY3Rpdml0eSIsInR5cGUiLCJ0ZXh0IiwiYXR0YWNobWVudExheW91dCIsImF0dGFjaG1lbnRzIiwiY29udGVudFR5cGUiLCJjb250ZW50IiwiYnV0dG9ucyIsInRpdGxlIiwidmFsdWUiLCJkaXNwbGF5VGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUcsbUJBQWIsQyxDQUNBOzs7QUFDQSxNQUFNQyxJQUFJLEdBQUcsTUFBYjs7O0FBRUEsU0FBU0MsSUFBVCxHQUFnQjtBQUNkLFNBQU87QUFDTEMsSUFBQUEsZUFBZSxFQUFFO0FBRFosR0FBUDtBQUdEOztBQUVELGVBQWVDLFNBQWYsQ0FBeUJDLE9BQXpCLEVBQStDO0FBQzdDLFFBQU1BLE9BQU8sQ0FBQ0MsWUFBUixDQUFxQjtBQUN6QkMsSUFBQUEsSUFBSSxFQUFFLFNBRG1CO0FBRXpCQyxJQUFBQSxJQUFJLEVBQUUsRUFGbUI7QUFHekJDLElBQUFBLGdCQUFnQixFQUFFLFVBSE87QUFJekJDLElBQUFBLFdBQVcsRUFBRSxDQUNYO0FBQ0VDLE1BQUFBLFdBQVcsRUFBRSxxQ0FEZjtBQUVFQyxNQUFBQSxPQUFPLEVBQUU7QUFDUEMsUUFBQUEsT0FBTyxFQUFFLENBQ1A7QUFDRUMsVUFBQUEsS0FBSyxFQUFFLFFBRFQ7QUFFRVAsVUFBQUEsSUFBSSxFQUFFLFFBRlI7QUFHRVEsVUFBQUEsS0FBSyxFQUFFO0FBSFQsU0FETyxFQU1QO0FBQ0VELFVBQUFBLEtBQUssRUFBRSxtQkFEVDtBQUVFUCxVQUFBQSxJQUFJLEVBQUUsVUFGUjtBQUdFUSxVQUFBQSxLQUFLLEVBQUU7QUFIVCxTQU5PLEVBV1A7QUFDRUQsVUFBQUEsS0FBSyxFQUFFLGlCQURUO0FBRUVQLFVBQUFBLElBQUksRUFBRSxVQUZSO0FBR0VRLFVBQUFBLEtBQUssRUFBRTtBQUFFQSxZQUFBQSxLQUFLLEVBQUU7QUFBVDtBQUhULFNBWE8sRUFnQlA7QUFDRUMsVUFBQUEsV0FBVyxFQUFFLGFBRGY7QUFFRVIsVUFBQUEsSUFBSSxFQUFFLFFBRlI7QUFHRU0sVUFBQUEsS0FBSyxFQUFFLDBDQUhUO0FBSUVQLFVBQUFBLElBQUksRUFBRSxhQUpSO0FBS0VRLFVBQUFBLEtBQUssRUFBRTtBQUFFQSxZQUFBQSxLQUFLLEVBQUU7QUFBVDtBQUxULFNBaEJPLEVBdUJQO0FBQ0VDLFVBQUFBLFdBQVcsRUFBRSxhQURmO0FBRUVSLFVBQUFBLElBQUksRUFBRSxRQUZSO0FBR0VNLFVBQUFBLEtBQUssRUFBRSxrQ0FIVDtBQUlFUCxVQUFBQSxJQUFJLEVBQUUsYUFKUjtBQU1FO0FBQ0FRLFVBQUFBLEtBQUssRUFBRTtBQVBULFNBdkJPLEVBZ0NQO0FBQ0VELFVBQUFBLEtBQUssRUFBRSxxQkFEVDtBQUVFUCxVQUFBQSxJQUFJLEVBQUUsYUFGUjtBQUdFUSxVQUFBQSxLQUFLLEVBQUU7QUFBRUEsWUFBQUEsS0FBSyxFQUFFO0FBQVQ7QUFIVCxTQWhDTyxFQXFDUDtBQUNFRCxVQUFBQSxLQUFLLEVBQUUsa0JBRFQ7QUFFRVAsVUFBQUEsSUFBSSxFQUFFO0FBRlIsU0FyQ08sRUF5Q1A7QUFDRU8sVUFBQUEsS0FBSyxFQUFFLHFCQURUO0FBRUVQLFVBQUFBLElBQUksRUFBRTtBQUZSLFNBekNPLENBREY7QUErQ1BPLFFBQUFBLEtBQUssRUFBRTtBQS9DQTtBQUZYLEtBRFc7QUFKWSxHQUFyQixDQUFOO0FBMkREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHVybkNvbnRleHQgfSBmcm9tICdib3RidWlsZGVyJztcblxuY29uc3QgbmFtZSA9ICdIZXJvIGNhcmQgYWN0aW9ucyc7XG4vLyBSZWFkIGFyZ3VtZW50IGFzIGEgc2luZ2xlIGxpbmVcbmNvbnN0IG1vZGUgPSAnbGluZSc7XG5cbmZ1bmN0aW9uIGhlbHAoKSB7XG4gIHJldHVybiB7XG4gICAgaGVyb2NhcmRhY3Rpb25zOiAnU2hvdyBhIGhlcm8gY2FyZCB3aXRoIG11bHRpcGxlIGFjdGlvbnMnXG4gIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3Nvcihjb250ZXh0OiBUdXJuQ29udGV4dCkge1xuICBhd2FpdCBjb250ZXh0LnNlbmRBY3Rpdml0eSh7XG4gICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgIHRleHQ6ICcnLFxuICAgIGF0dGFjaG1lbnRMYXlvdXQ6ICdjYXJvdXNlbCcsXG4gICAgYXR0YWNobWVudHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi92bmQubWljcm9zb2Z0LmNhcmQuaGVybycsXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBidXR0b25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRpdGxlOiAnaW1CYWNrJyxcbiAgICAgICAgICAgICAgdHlwZTogJ2ltQmFjaycsXG4gICAgICAgICAgICAgIHZhbHVlOiAnc3RyaW5nJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdwb3N0QmFjayAoc3RyaW5nKScsXG4gICAgICAgICAgICAgIHR5cGU6ICdwb3N0QmFjaycsXG4gICAgICAgICAgICAgIHZhbHVlOiAnc3RyaW5nJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGl0bGU6ICdwb3N0QmFjayAoSlNPTiknLFxuICAgICAgICAgICAgICB0eXBlOiAncG9zdEJhY2snLFxuICAgICAgICAgICAgICB2YWx1ZTogeyB2YWx1ZTogJ3ZhbHVlJyB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBkaXNwbGF5VGV4dDogJ2Rpc3BsYXlUZXh0JyxcbiAgICAgICAgICAgICAgdGV4dDogJ1widGV4dFwiJyxcbiAgICAgICAgICAgICAgdGl0bGU6ICdtZXNzYWdlQmFjayAoZGlzcGxheVRleHQgKyB0ZXh0ICsgdmFsdWUpJyxcbiAgICAgICAgICAgICAgdHlwZTogJ21lc3NhZ2VCYWNrJyxcbiAgICAgICAgICAgICAgdmFsdWU6IHsgdmFsdWU6ICd2YWx1ZScgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZGlzcGxheVRleHQ6ICdkaXNwbGF5VGV4dCcsXG4gICAgICAgICAgICAgIHRleHQ6ICdcInRleHRcIicsXG4gICAgICAgICAgICAgIHRpdGxlOiAnbWVzc2FnZUJhY2sgKGRpc3BsYXlUZXh0ICsgdGV4dCknLFxuICAgICAgICAgICAgICB0eXBlOiAnbWVzc2FnZUJhY2snLFxuXG4gICAgICAgICAgICAgIC8vIFRoZXJlIGlzIGEgYnVnIGluIERMSlMgdGhhdCBwcmV2ZW50ZWQgaXQgdG8gc2VuZCB0aGUgYWN0aXZpdHkgd2l0aG91dCBcInZhbHVlXCIgZmllbGQgc2V0XG4gICAgICAgICAgICAgIHZhbHVlOiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aXRsZTogJ21lc3NhZ2VCYWNrICh2YWx1ZSknLFxuICAgICAgICAgICAgICB0eXBlOiAnbWVzc2FnZUJhY2snLFxuICAgICAgICAgICAgICB2YWx1ZTogeyB2YWx1ZTogJ3ZhbHVlJyB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aXRsZTogJ3Bvc3RCYWNrIChlbXB0eSknLFxuICAgICAgICAgICAgICB0eXBlOiAncG9zdEJhY2snXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aXRsZTogJ21lc3NhZ2VCYWNrIChlbXB0eSknLFxuICAgICAgICAgICAgICB0eXBlOiAnbWVzc2FnZUJhY2snXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICB0aXRsZTogJ0hlcm8gQ2FyZCBBY3Rpb25zJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9KTtcbn1cblxuZXhwb3J0IHsgaGVscCwgbW9kZSwgbmFtZSwgcHJvY2Vzc29yIH07XG4iXX0=