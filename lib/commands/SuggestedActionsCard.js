"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.help = help;
exports.processor = processor;
exports.name = void 0;
const name = 'Suggested actions';
exports.name = name;

function help() {
  return {
    'suggested-actions': 'Show a suggested actions demo'
  };
}

async function processor(context, arg) {
  const {
    PUBLIC_URL
  } = process.env;

  if ((arg || '').toLowerCase().trim() === 'others') {
    // Related to #1057
    await context.sendActivity({
      type: 'message',
      textFormat: 'plain',
      text: 'This activity should not display any suggested actions.',
      suggestedActions: {
        actions: [{
          title: 'This button should not appear',
          type: 'imBack',
          value: 'suggested-actions this-button-should-not-appear'
        }],
        to: ['some-other-id']
      }
    });
  } else if (arg) {
    await context.sendActivity({
      type: 'message',
      text: `You submitted "${arg.trim()}"`
    });
  } else {
    await context.sendActivity({
      type: 'message',
      textFormat: 'plain',
      text: 'Please select one of the actions below',
      suggestedActions: {
        actions: [{
          image: `${PUBLIC_URL}assets/square-icon.png`,
          title: 'IM back as string',
          type: 'imBack',
          value: 'postback imback-string'
        }, {
          image: `${PUBLIC_URL}assets/square-icon-red.png`,
          title: 'Post back as string',
          type: 'postBack',
          value: 'postback postback-string'
        }, {
          image: `${PUBLIC_URL}assets/square-icon-green.png`,
          title: 'Post back as JSON',
          text: 'Some text',
          type: 'postBack',
          value: {
            hello: 'World!'
          }
        }, {
          image: `${PUBLIC_URL}assets/square-icon-purple.png`,
          displayText: 'say Hello World!',
          title: 'Message back as JSON with display text',
          text: 'Some text',
          type: 'messageBack',
          value: {
            hello: 'World!'
          }
        }, {
          image: `${PUBLIC_URL}assets/square-icon-purple.png`,
          title: 'Message back as JSON without display text',
          type: 'messageBack',
          value: {
            hello: 'World!'
          }
        }, {
          displayText: 'Aloha',
          image: `${PUBLIC_URL}assets/square-icon-purple.png`,
          text: 'echo Hello',
          title: 'Message back as string with display text',
          type: 'messageBack',
          // TODO: Remove value after bumping DLJS
          value: null
        }],
        // TODO: Should we fill in the "to"?
        to: []
      }
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9TdWdnZXN0ZWRBY3Rpb25zQ2FyZC50cyJdLCJuYW1lcyI6WyJuYW1lIiwiaGVscCIsInByb2Nlc3NvciIsImNvbnRleHQiLCJhcmciLCJQVUJMSUNfVVJMIiwicHJvY2VzcyIsImVudiIsInRvTG93ZXJDYXNlIiwidHJpbSIsInNlbmRBY3Rpdml0eSIsInR5cGUiLCJ0ZXh0Rm9ybWF0IiwidGV4dCIsInN1Z2dlc3RlZEFjdGlvbnMiLCJhY3Rpb25zIiwidGl0bGUiLCJ2YWx1ZSIsInRvIiwiaW1hZ2UiLCJoZWxsbyIsImRpc3BsYXlUZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVBLE1BQU1BLElBQUksR0FBRyxtQkFBYjs7O0FBRUEsU0FBU0MsSUFBVCxHQUFnQjtBQUNkLFNBQU87QUFDTCx5QkFBcUI7QUFEaEIsR0FBUDtBQUdEOztBQUVELGVBQWVDLFNBQWYsQ0FBeUJDLE9BQXpCLEVBQStDQyxHQUEvQyxFQUE0RDtBQUMxRCxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBaUJDLE9BQU8sQ0FBQ0MsR0FBL0I7O0FBRUEsTUFBSSxDQUFDSCxHQUFHLElBQUksRUFBUixFQUFZSSxXQUFaLEdBQTBCQyxJQUExQixPQUFxQyxRQUF6QyxFQUFtRDtBQUNqRDtBQUVBLFVBQU1OLE9BQU8sQ0FBQ08sWUFBUixDQUFxQjtBQUN6QkMsTUFBQUEsSUFBSSxFQUFFLFNBRG1CO0FBRXpCQyxNQUFBQSxVQUFVLEVBQUUsT0FGYTtBQUd6QkMsTUFBQUEsSUFBSSxFQUFFLHlEQUhtQjtBQUl6QkMsTUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJDLFFBQUFBLE9BQU8sRUFBRSxDQUFDO0FBQ1JDLFVBQUFBLEtBQUssRUFBRSwrQkFEQztBQUVSTCxVQUFBQSxJQUFJLEVBQUUsUUFGRTtBQUdSTSxVQUFBQSxLQUFLLEVBQUU7QUFIQyxTQUFELENBRE87QUFNaEJDLFFBQUFBLEVBQUUsRUFBRSxDQUFDLGVBQUQ7QUFOWTtBQUpPLEtBQXJCLENBQU47QUFhRCxHQWhCRCxNQWdCTyxJQUFJZCxHQUFKLEVBQVM7QUFDZCxVQUFNRCxPQUFPLENBQUNPLFlBQVIsQ0FBcUI7QUFDekJDLE1BQUFBLElBQUksRUFBRSxTQURtQjtBQUV6QkUsTUFBQUEsSUFBSSxFQUFHLGtCQUFrQlQsR0FBRyxDQUFDSyxJQUFKLEVBQVk7QUFGWixLQUFyQixDQUFOO0FBSUQsR0FMTSxNQUtBO0FBQ0wsVUFBTU4sT0FBTyxDQUFDTyxZQUFSLENBQXFCO0FBQ3pCQyxNQUFBQSxJQUFJLEVBQUUsU0FEbUI7QUFFekJDLE1BQUFBLFVBQVUsRUFBRSxPQUZhO0FBR3pCQyxNQUFBQSxJQUFJLEVBQUUsd0NBSG1CO0FBSXpCQyxNQUFBQSxnQkFBZ0IsRUFBRTtBQUNoQkMsUUFBQUEsT0FBTyxFQUFFLENBQ1A7QUFDRUksVUFBQUEsS0FBSyxFQUFHLEdBQUdkLFVBQVksd0JBRHpCO0FBRUVXLFVBQUFBLEtBQUssRUFBRSxtQkFGVDtBQUdFTCxVQUFBQSxJQUFJLEVBQUUsUUFIUjtBQUlFTSxVQUFBQSxLQUFLLEVBQUU7QUFKVCxTQURPLEVBT1A7QUFDRUUsVUFBQUEsS0FBSyxFQUFHLEdBQUdkLFVBQVksNEJBRHpCO0FBRUVXLFVBQUFBLEtBQUssRUFBRSxxQkFGVDtBQUdFTCxVQUFBQSxJQUFJLEVBQUUsVUFIUjtBQUlFTSxVQUFBQSxLQUFLLEVBQUU7QUFKVCxTQVBPLEVBYVA7QUFDRUUsVUFBQUEsS0FBSyxFQUFHLEdBQUdkLFVBQVksOEJBRHpCO0FBRUVXLFVBQUFBLEtBQUssRUFBRSxtQkFGVDtBQUdFSCxVQUFBQSxJQUFJLEVBQUUsV0FIUjtBQUlFRixVQUFBQSxJQUFJLEVBQUUsVUFKUjtBQUtFTSxVQUFBQSxLQUFLLEVBQUU7QUFDTEcsWUFBQUEsS0FBSyxFQUFFO0FBREY7QUFMVCxTQWJPLEVBc0JQO0FBQ0VELFVBQUFBLEtBQUssRUFBRyxHQUFHZCxVQUFZLCtCQUR6QjtBQUVFZ0IsVUFBQUEsV0FBVyxFQUFFLGtCQUZmO0FBR0VMLFVBQUFBLEtBQUssRUFBRSx3Q0FIVDtBQUlFSCxVQUFBQSxJQUFJLEVBQUUsV0FKUjtBQUtFRixVQUFBQSxJQUFJLEVBQUUsYUFMUjtBQU1FTSxVQUFBQSxLQUFLLEVBQUU7QUFDTEcsWUFBQUEsS0FBSyxFQUFFO0FBREY7QUFOVCxTQXRCTyxFQWdDUDtBQUNFRCxVQUFBQSxLQUFLLEVBQUcsR0FBR2QsVUFBWSwrQkFEekI7QUFFRVcsVUFBQUEsS0FBSyxFQUFFLDJDQUZUO0FBR0VMLFVBQUFBLElBQUksRUFBRSxhQUhSO0FBSUVNLFVBQUFBLEtBQUssRUFBRTtBQUNMRyxZQUFBQSxLQUFLLEVBQUU7QUFERjtBQUpULFNBaENPLEVBd0NQO0FBQ0VDLFVBQUFBLFdBQVcsRUFBRSxPQURmO0FBRUVGLFVBQUFBLEtBQUssRUFBRyxHQUFHZCxVQUFZLCtCQUZ6QjtBQUdFUSxVQUFBQSxJQUFJLEVBQUUsWUFIUjtBQUlFRyxVQUFBQSxLQUFLLEVBQUUsMENBSlQ7QUFLRUwsVUFBQUEsSUFBSSxFQUFFLGFBTFI7QUFPRTtBQUNBTSxVQUFBQSxLQUFLLEVBQUU7QUFSVCxTQXhDTyxDQURPO0FBb0RoQjtBQUNBQyxRQUFBQSxFQUFFLEVBQUU7QUFyRFk7QUFKTyxLQUFyQixDQUFOO0FBNEREO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUdXJuQ29udGV4dCB9IGZyb20gJ2JvdGJ1aWxkZXInO1xuXG5jb25zdCBuYW1lID0gJ1N1Z2dlc3RlZCBhY3Rpb25zJztcblxuZnVuY3Rpb24gaGVscCgpIHtcbiAgcmV0dXJuIHtcbiAgICAnc3VnZ2VzdGVkLWFjdGlvbnMnOiAnU2hvdyBhIHN1Z2dlc3RlZCBhY3Rpb25zIGRlbW8nXG4gIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3Nvcihjb250ZXh0OiBUdXJuQ29udGV4dCwgYXJnOiBzdHJpbmcpIHtcbiAgY29uc3QgeyBQVUJMSUNfVVJMIH0gPSBwcm9jZXNzLmVudjtcblxuICBpZiAoKGFyZyB8fCAnJykudG9Mb3dlckNhc2UoKS50cmltKCkgPT09ICdvdGhlcnMnKSB7XG4gICAgLy8gUmVsYXRlZCB0byAjMTA1N1xuXG4gICAgYXdhaXQgY29udGV4dC5zZW5kQWN0aXZpdHkoe1xuICAgICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgICAgdGV4dEZvcm1hdDogJ3BsYWluJyxcbiAgICAgIHRleHQ6ICdUaGlzIGFjdGl2aXR5IHNob3VsZCBub3QgZGlzcGxheSBhbnkgc3VnZ2VzdGVkIGFjdGlvbnMuJyxcbiAgICAgIHN1Z2dlc3RlZEFjdGlvbnM6IHtcbiAgICAgICAgYWN0aW9uczogW3tcbiAgICAgICAgICB0aXRsZTogJ1RoaXMgYnV0dG9uIHNob3VsZCBub3QgYXBwZWFyJyxcbiAgICAgICAgICB0eXBlOiAnaW1CYWNrJyxcbiAgICAgICAgICB2YWx1ZTogJ3N1Z2dlc3RlZC1hY3Rpb25zIHRoaXMtYnV0dG9uLXNob3VsZC1ub3QtYXBwZWFyJyxcbiAgICAgICAgfV0sXG4gICAgICAgIHRvOiBbJ3NvbWUtb3RoZXItaWQnXVxuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKGFyZykge1xuICAgIGF3YWl0IGNvbnRleHQuc2VuZEFjdGl2aXR5KHtcbiAgICAgIHR5cGU6ICdtZXNzYWdlJyxcbiAgICAgIHRleHQ6IGBZb3Ugc3VibWl0dGVkIFwiJHsgYXJnLnRyaW0oKSB9XCJgXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgY29udGV4dC5zZW5kQWN0aXZpdHkoe1xuICAgICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgICAgdGV4dEZvcm1hdDogJ3BsYWluJyxcbiAgICAgIHRleHQ6ICdQbGVhc2Ugc2VsZWN0IG9uZSBvZiB0aGUgYWN0aW9ucyBiZWxvdycsXG4gICAgICBzdWdnZXN0ZWRBY3Rpb25zOiB7XG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZTogYCR7IFBVQkxJQ19VUkwgfWFzc2V0cy9zcXVhcmUtaWNvbi5wbmdgLFxuICAgICAgICAgICAgdGl0bGU6ICdJTSBiYWNrIGFzIHN0cmluZycsXG4gICAgICAgICAgICB0eXBlOiAnaW1CYWNrJyxcbiAgICAgICAgICAgIHZhbHVlOiAncG9zdGJhY2sgaW1iYWNrLXN0cmluZycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZTogYCR7IFBVQkxJQ19VUkwgfWFzc2V0cy9zcXVhcmUtaWNvbi1yZWQucG5nYCxcbiAgICAgICAgICAgIHRpdGxlOiAnUG9zdCBiYWNrIGFzIHN0cmluZycsXG4gICAgICAgICAgICB0eXBlOiAncG9zdEJhY2snLFxuICAgICAgICAgICAgdmFsdWU6ICdwb3N0YmFjayBwb3N0YmFjay1zdHJpbmcnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IGAkeyBQVUJMSUNfVVJMIH1hc3NldHMvc3F1YXJlLWljb24tZ3JlZW4ucG5nYCxcbiAgICAgICAgICAgIHRpdGxlOiAnUG9zdCBiYWNrIGFzIEpTT04nLFxuICAgICAgICAgICAgdGV4dDogJ1NvbWUgdGV4dCcsXG4gICAgICAgICAgICB0eXBlOiAncG9zdEJhY2snLFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgaGVsbG86ICdXb3JsZCEnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IGAkeyBQVUJMSUNfVVJMIH1hc3NldHMvc3F1YXJlLWljb24tcHVycGxlLnBuZ2AsXG4gICAgICAgICAgICBkaXNwbGF5VGV4dDogJ3NheSBIZWxsbyBXb3JsZCEnLFxuICAgICAgICAgICAgdGl0bGU6ICdNZXNzYWdlIGJhY2sgYXMgSlNPTiB3aXRoIGRpc3BsYXkgdGV4dCcsXG4gICAgICAgICAgICB0ZXh0OiAnU29tZSB0ZXh0JyxcbiAgICAgICAgICAgIHR5cGU6ICdtZXNzYWdlQmFjaycsXG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICBoZWxsbzogJ1dvcmxkISdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZTogYCR7IFBVQkxJQ19VUkwgfWFzc2V0cy9zcXVhcmUtaWNvbi1wdXJwbGUucG5nYCxcbiAgICAgICAgICAgIHRpdGxlOiAnTWVzc2FnZSBiYWNrIGFzIEpTT04gd2l0aG91dCBkaXNwbGF5IHRleHQnLFxuICAgICAgICAgICAgdHlwZTogJ21lc3NhZ2VCYWNrJyxcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgIGhlbGxvOiAnV29ybGQhJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRpc3BsYXlUZXh0OiAnQWxvaGEnLFxuICAgICAgICAgICAgaW1hZ2U6IGAkeyBQVUJMSUNfVVJMIH1hc3NldHMvc3F1YXJlLWljb24tcHVycGxlLnBuZ2AsXG4gICAgICAgICAgICB0ZXh0OiAnZWNobyBIZWxsbycsXG4gICAgICAgICAgICB0aXRsZTogJ01lc3NhZ2UgYmFjayBhcyBzdHJpbmcgd2l0aCBkaXNwbGF5IHRleHQnLFxuICAgICAgICAgICAgdHlwZTogJ21lc3NhZ2VCYWNrJyxcblxuICAgICAgICAgICAgLy8gVE9ETzogUmVtb3ZlIHZhbHVlIGFmdGVyIGJ1bXBpbmcgRExKU1xuICAgICAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIC8vIFRPRE86IFNob3VsZCB3ZSBmaWxsIGluIHRoZSBcInRvXCI/XG4gICAgICAgIHRvOiBbXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IGhlbHAsIG5hbWUsIHByb2Nlc3NvciB9XG4iXX0=