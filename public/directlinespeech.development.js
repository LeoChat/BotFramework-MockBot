window["DirectLineSpeech"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./lib/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./lib/DirectLineSpeech.js":
/*!*********************************!*\
  !*** ./lib/DirectLineSpeech.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _observable = _interopRequireDefault(__webpack_require__(/*! core-js/features/observable */ "./node_modules/core-js/features/observable/index.js"));

var _shareObservable = _interopRequireDefault(__webpack_require__(/*! ./shareObservable */ "./lib/shareObservable.js"));

var _SpeechSynthesisAudioStreamUtterance = __webpack_require__(/*! ./SpeechSynthesisAudioStreamUtterance */ "./lib/SpeechSynthesisAudioStreamUtterance.js");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function randomActivityId() {
  return Math.random().toString(36).substr(2);
}

var DirectLineSpeech =
/*#__PURE__*/
function () {
  function DirectLineSpeech(_ref) {
    var _this = this;

    var dialogServiceConnector = _ref.dialogServiceConnector;
    (0, _classCallCheck2.default)(this, DirectLineSpeech);
    var connectionStatusObserver;
    this.dialogServiceConnector = dialogServiceConnector;
    this.activity$ = (0, _shareObservable.default)(new _observable.default(function (observer) {
      _this._activityObserver = observer;
      connectionStatusObserver.next(0);
      connectionStatusObserver.next(1);
      connectionStatusObserver.next(2); // return () => {};
    }));
    this.connectionStatus$ = (0, _shareObservable.default)(new _observable.default(function (observer) {
      connectionStatusObserver = observer; // return () => {};
    }));

    dialogServiceConnector.activityReceived = function (_, _ref2) {
      var activity = _ref2.activity,
          audioStream = _ref2.audioStream;

      // console.groupCollapsed('dialogServiceConnector.activityReceived');
      // console.log('activity', activity);
      // console.log('audioStream', audioStream);
      // console.groupEnd();
      try {
        _this._activityObserver && _this._activityObserver.next(_objectSpread({}, activity, {
          channelData: _objectSpread({}, activity.channelData, {}, audioStream ? {
            speechSynthesisUtterance: (0, _SpeechSynthesisAudioStreamUtterance.fromAudioStream)(audioStream)
          } : {}),
          from: _objectSpread({}, activity.from, {
            // Since DLSpeech service never ACK our outgoing activity, this activity must be from bot.
            role: 'bot'
          }),
          // Direct Line Speech server currently do not timestamp outgoing activities.
          // Thus, it will be easier to just re-timestamp every incoming/outgoing activities using local time.
          timestamp: new Date().toISOString()
        }));
      } catch (error) {
        console.error(error);
      }
    };
  }

  (0, _createClass2.default)(DirectLineSpeech, [{
    key: "end",
    value: function end() {
      this.dialogServiceConnector.close();
    }
  }, {
    key: "postActivity",
    value: function postActivity(activity) {
      // console.groupCollapsed('postActivity');
      // console.log(activity);
      // console.groupEnd();
      try {
        // TODO: [P1] Direct Line Speech server currently do not ack the outgoing activities with any activity ID or timestamp.
        var pseudoActivityId = randomActivityId();
        var isSpeech = !!(activity.channelData && activity.channelData.speech); // Do not send the activity if it was from speech

        if (!isSpeech) {
          this.dialogServiceConnector.sendActivityAsync(activity);
        }

        this._activityObserver && this._activityObserver.next(_objectSpread({}, activity, {
          id: pseudoActivityId,
          timestamp: new Date().toISOString()
        }));
        this._lastRecognizedEventTimestamp = null;
        return _observable.default.of(pseudoActivityId);
      } catch (err) {
        return new _observable.default(function (observer) {
          return observer.error(err);
        });
      }
    }
  }]);
  return DirectLineSpeech;
}(); // Interfaces that we did not implemented.
// referenceGrammarId?: string,
// getSessionId? : () => Observable<string>


exports.default = DirectLineSpeech;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./lib/SpeechSynthesisAudioStreamUtterance.js":
/*!****************************************************!*\
  !*** ./lib/SpeechSynthesisAudioStreamUtterance.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromAudioStream = fromAudioStream;
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _eventTargetShim = _interopRequireWildcard(__webpack_require__(/*! ./external/event-target-shim */ "./lib/external/event-target-shim.js"));

var SpeechSynthesisAudioStreamUtterance =
/*#__PURE__*/
function (_EventTarget) {
  (0, _inherits2.default)(SpeechSynthesisAudioStreamUtterance, _EventTarget);

  function SpeechSynthesisAudioStreamUtterance() {
    (0, _classCallCheck2.default)(this, SpeechSynthesisAudioStreamUtterance);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SpeechSynthesisAudioStreamUtterance).apply(this, arguments));
  }

  return SpeechSynthesisAudioStreamUtterance;
}(_eventTargetShim.default);

(0, _eventTargetShim.defineEventAttribute)(SpeechSynthesisAudioStreamUtterance, 'boundary');
(0, _eventTargetShim.defineEventAttribute)(SpeechSynthesisAudioStreamUtterance, 'end');
(0, _eventTargetShim.defineEventAttribute)(SpeechSynthesisAudioStreamUtterance, 'error');
(0, _eventTargetShim.defineEventAttribute)(SpeechSynthesisAudioStreamUtterance, 'start');

function fromAudioStream(audioStream) {
  var utterance = new SpeechSynthesisAudioStreamUtterance();
  utterance.audioStream = audioStream;
  return utterance;
}

var _default = SpeechSynthesisAudioStreamUtterance;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZS5qcyJdLCJuYW1lcyI6WyJTcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZSIsIkV2ZW50VGFyZ2V0IiwiZnJvbUF1ZGlvU3RyZWFtIiwiYXVkaW9TdHJlYW0iLCJ1dHRlcmFuY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0lBRU1BLG1DOzs7Ozs7Ozs7OztFQUE0Q0Msd0I7O0FBRWxELDJDQUFxQkQsbUNBQXJCLEVBQTBELFVBQTFEO0FBQ0EsMkNBQXFCQSxtQ0FBckIsRUFBMEQsS0FBMUQ7QUFDQSwyQ0FBcUJBLG1DQUFyQixFQUEwRCxPQUExRDtBQUNBLDJDQUFxQkEsbUNBQXJCLEVBQTBELE9BQTFEOztBQUVBLFNBQVNFLGVBQVQsQ0FBeUJDLFdBQXpCLEVBQXNDO0FBQ3BDLE1BQU1DLFNBQVMsR0FBRyxJQUFJSixtQ0FBSixFQUFsQjtBQUVBSSxFQUFBQSxTQUFTLENBQUNELFdBQVYsR0FBd0JBLFdBQXhCO0FBRUEsU0FBT0MsU0FBUDtBQUNEOztlQUVjSixtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudFRhcmdldCwgeyBkZWZpbmVFdmVudEF0dHJpYnV0ZSB9IGZyb20gJy4vZXh0ZXJuYWwvZXZlbnQtdGFyZ2V0LXNoaW0nO1xyXG5cclxuY2xhc3MgU3BlZWNoU3ludGhlc2lzQXVkaW9TdHJlYW1VdHRlcmFuY2UgZXh0ZW5kcyBFdmVudFRhcmdldCB7fVxyXG5cclxuZGVmaW5lRXZlbnRBdHRyaWJ1dGUoU3BlZWNoU3ludGhlc2lzQXVkaW9TdHJlYW1VdHRlcmFuY2UsICdib3VuZGFyeScpO1xyXG5kZWZpbmVFdmVudEF0dHJpYnV0ZShTcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZSwgJ2VuZCcpO1xyXG5kZWZpbmVFdmVudEF0dHJpYnV0ZShTcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZSwgJ2Vycm9yJyk7XHJcbmRlZmluZUV2ZW50QXR0cmlidXRlKFNwZWVjaFN5bnRoZXNpc0F1ZGlvU3RyZWFtVXR0ZXJhbmNlLCAnc3RhcnQnKTtcclxuXHJcbmZ1bmN0aW9uIGZyb21BdWRpb1N0cmVhbShhdWRpb1N0cmVhbSkge1xyXG4gIGNvbnN0IHV0dGVyYW5jZSA9IG5ldyBTcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZSgpO1xyXG5cclxuICB1dHRlcmFuY2UuYXVkaW9TdHJlYW0gPSBhdWRpb1N0cmVhbTtcclxuXHJcbiAgcmV0dXJuIHV0dGVyYW5jZTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3BlZWNoU3ludGhlc2lzQXVkaW9TdHJlYW1VdHRlcmFuY2U7XHJcblxyXG5leHBvcnQgeyBmcm9tQXVkaW9TdHJlYW0gfTtcclxuIl19

/***/ }),

/***/ "./lib/cognitiveServicesPromiseToESPromise.js":
/*!****************************************************!*\
  !*** ./lib/cognitiveServicesPromiseToESPromise.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cognitiveServicesPromiseToESPromise;

function cognitiveServicesPromiseToESPromise(promise) {
  return new Promise(function (resolve, reject) {
    return promise.on(resolve, reject);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb2duaXRpdmVTZXJ2aWNlc1Byb21pc2VUb0VTUHJvbWlzZS5qcyJdLCJuYW1lcyI6WyJjb2duaXRpdmVTZXJ2aWNlc1Byb21pc2VUb0VTUHJvbWlzZSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWUsU0FBU0EsbUNBQVQsQ0FBNkNDLE9BQTdDLEVBQXNEO0FBQ25FLFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVjtBQUFBLFdBQXFCSCxPQUFPLENBQUNJLEVBQVIsQ0FBV0YsT0FBWCxFQUFvQkMsTUFBcEIsQ0FBckI7QUFBQSxHQUFaLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvZ25pdGl2ZVNlcnZpY2VzUHJvbWlzZVRvRVNQcm9taXNlKHByb21pc2UpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gcHJvbWlzZS5vbihyZXNvbHZlLCByZWplY3QpKTtcclxufVxyXG4iXX0=

/***/ }),

/***/ "./lib/createAdapters.js":
/*!*******************************!*\
  !*** ./lib/createAdapters.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = create;

var _microsoftCognitiveservicesSpeechSdk = __webpack_require__(/*! microsoft-cognitiveservices-speech-sdk */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/microsoft.cognitiveservices.speech.sdk.js");

var _createWebSpeechPonyfillFactory = _interopRequireDefault(__webpack_require__(/*! ./createWebSpeechPonyfillFactory */ "./lib/createWebSpeechPonyfillFactory.js"));

var _DirectLineSpeech = _interopRequireDefault(__webpack_require__(/*! ./DirectLineSpeech */ "./lib/DirectLineSpeech.js"));

var _patchDialogServiceConnectorInline = _interopRequireDefault(__webpack_require__(/*! ./patchDialogServiceConnectorInline */ "./lib/patchDialogServiceConnectorInline.js"));

function create(_ref) {
  var audioConfig = _ref.audioConfig,
      audioContext = _ref.audioContext,
      enableTelemetry = _ref.enableTelemetry,
      speechRecognitionEndpointId = _ref.speechRecognitionEndpointId,
      _ref$speechRecognitio = _ref.speechRecognitionLanguage,
      speechRecognitionLanguage = _ref$speechRecognitio === void 0 ? typeof window !== 'undefined' && typeof window.navigator !== 'undefined' && window.navigator.language || 'en-US' : _ref$speechRecognitio,
      speechServicesAuthorizationToken = _ref.speechServicesAuthorizationToken,
      speechServicesRegion = _ref.speechServicesRegion,
      speechServicesSubscriptionKey = _ref.speechServicesSubscriptionKey,
      speechSynthesisDeploymentId = _ref.speechSynthesisDeploymentId,
      speechSynthesisOutputFormat = _ref.speechSynthesisOutputFormat,
      textNormalization = _ref.textNormalization,
      userID = _ref.userID,
      username = _ref.username;

  if (!speechServicesAuthorizationToken && !speechServicesSubscriptionKey || speechServicesAuthorizationToken && speechServicesSubscriptionKey) {
    throw new Error('You must specify either "speechServicesAuthorizationToken" or "speechServicesSubscriptionKey" only.');
  }

  if (textNormalization) {
    console.warn('botframework-directlinespeech: Text normalization is currently not supported, ignoreing "textNormalization".');
  }

  if (userID || username) {
    console.warn('botframework-directlinespeech: Custom "userId" and "username" are currently not supported, ignoring.');
  }

  var config;

  if (speechServicesAuthorizationToken) {
    config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromAuthorizationToken(speechServicesAuthorizationToken, speechServicesRegion);
  } else {
    config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromSubscription(speechServicesSubscriptionKey, speechServicesRegion);
  } // Supported options can be found in DialogConnectorFactory.js.


  config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.SpeechServiceConnection_RecoLanguage, speechRecognitionLanguage); // None of the following works for setting output format.
  // config.setProperty(PropertyId.SpeechServiceResponse_OutputFormatOption, OutputFormat[OutputFormat.Detailed]);
  // config.setProperty(PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse, true);
  // config.setProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Detailed]);
  // config.setServiceProperty(PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse, "true", ServicePropertyChannel.UriQueryParameter);

  var dialogServiceConnector = (0, _patchDialogServiceConnectorInline.default)(new _microsoftCognitiveservicesSpeechSdk.DialogServiceConnector(config, audioConfig));
  dialogServiceConnector.connect();
  var directLine = new _DirectLineSpeech.default({
    dialogServiceConnector: dialogServiceConnector
  });
  var webSpeechPonyfillFactory = (0, _createWebSpeechPonyfillFactory.default)({
    audioConfig: audioConfig,
    audioContext: audioContext,
    enableTelemetry: enableTelemetry,
    recognizer: dialogServiceConnector,
    speechRecognitionEndpointId: speechRecognitionEndpointId,
    speechSynthesisDeploymentId: speechSynthesisDeploymentId,
    speechSynthesisOutputFormat: speechSynthesisOutputFormat,
    textNormalization: textNormalization
  });
  return {
    directLine: directLine,
    webSpeechPonyfillFactory: webSpeechPonyfillFactory
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVBZGFwdGVycy5qcyJdLCJuYW1lcyI6WyJjcmVhdGUiLCJhdWRpb0NvbmZpZyIsImF1ZGlvQ29udGV4dCIsImVuYWJsZVRlbGVtZXRyeSIsInNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCIsInNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZSIsInNwZWVjaFNlcnZpY2VzQXV0aG9yaXphdGlvblRva2VuIiwic3BlZWNoU2VydmljZXNSZWdpb24iLCJzcGVlY2hTZXJ2aWNlc1N1YnNjcmlwdGlvbktleSIsInNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZCIsInNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdCIsInRleHROb3JtYWxpemF0aW9uIiwidXNlcklEIiwidXNlcm5hbWUiLCJFcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwiY29uZmlnIiwiQm90RnJhbWV3b3JrQ29uZmlnIiwiZnJvbUF1dGhvcml6YXRpb25Ub2tlbiIsImZyb21TdWJzY3JpcHRpb24iLCJzZXRQcm9wZXJ0eSIsIlByb3BlcnR5SWQiLCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2UiLCJkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yIiwiRGlhbG9nU2VydmljZUNvbm5lY3RvciIsImNvbm5lY3QiLCJkaXJlY3RMaW5lIiwiRGlyZWN0TGluZVNwZWVjaCIsIndlYlNwZWVjaFBvbnlmaWxsRmFjdG9yeSIsInJlY29nbml6ZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUVlLFNBQVNBLE1BQVQsT0FpQlo7QUFBQSxNQWhCREMsV0FnQkMsUUFoQkRBLFdBZ0JDO0FBQUEsTUFmREMsWUFlQyxRQWZEQSxZQWVDO0FBQUEsTUFkREMsZUFjQyxRQWREQSxlQWNDO0FBQUEsTUFiREMsMkJBYUMsUUFiREEsMkJBYUM7QUFBQSxtQ0FaREMseUJBWUM7QUFBQSxNQVpEQSx5QkFZQyxzQ0FaNEIsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUMzQixPQUFPQSxNQUFNLENBQUNDLFNBQWQsS0FBNEIsV0FERCxJQUUzQkQsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUZTLElBRzFCLE9BU0Q7QUFBQSxNQVJEQyxnQ0FRQyxRQVJEQSxnQ0FRQztBQUFBLE1BUERDLG9CQU9DLFFBUERBLG9CQU9DO0FBQUEsTUFOREMsNkJBTUMsUUFOREEsNkJBTUM7QUFBQSxNQUxEQywyQkFLQyxRQUxEQSwyQkFLQztBQUFBLE1BSkRDLDJCQUlDLFFBSkRBLDJCQUlDO0FBQUEsTUFIREMsaUJBR0MsUUFIREEsaUJBR0M7QUFBQSxNQUZEQyxNQUVDLFFBRkRBLE1BRUM7QUFBQSxNQUREQyxRQUNDLFFBRERBLFFBQ0M7O0FBQ0QsTUFDRyxDQUFDUCxnQ0FBRCxJQUFxQyxDQUFDRSw2QkFBdkMsSUFDQ0YsZ0NBQWdDLElBQUlFLDZCQUZ2QyxFQUdFO0FBQ0EsVUFBTSxJQUFJTSxLQUFKLENBQ0oscUdBREksQ0FBTjtBQUdEOztBQUVELE1BQUlILGlCQUFKLEVBQXVCO0FBQ3JCSSxJQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FDRSw4R0FERjtBQUdEOztBQUVELE1BQUlKLE1BQU0sSUFBSUMsUUFBZCxFQUF3QjtBQUN0QkUsSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQ0Usc0dBREY7QUFHRDs7QUFFRCxNQUFJQyxNQUFKOztBQUVBLE1BQUlYLGdDQUFKLEVBQXNDO0FBQ3BDVyxJQUFBQSxNQUFNLEdBQUdDLHdEQUFtQkMsc0JBQW5CLENBQTBDYixnQ0FBMUMsRUFBNEVDLG9CQUE1RSxDQUFUO0FBQ0QsR0FGRCxNQUVPO0FBQ0xVLElBQUFBLE1BQU0sR0FBR0Msd0RBQW1CRSxnQkFBbkIsQ0FBb0NaLDZCQUFwQyxFQUFtRUQsb0JBQW5FLENBQVQ7QUFDRCxHQTVCQSxDQThCRDs7O0FBRUFVLEVBQUFBLE1BQU0sQ0FBQ0ksV0FBUCxDQUFtQkMsZ0RBQVdDLG9DQUE5QixFQUFvRXJCLHlCQUFwRSxFQWhDQyxDQWtDRDtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1zQixzQkFBc0IsR0FBRyxnREFBa0MsSUFBSUMsMkRBQUosQ0FBMkJSLE1BQTNCLEVBQW1DbkIsV0FBbkMsQ0FBbEMsQ0FBL0I7QUFFQTBCLEVBQUFBLHNCQUFzQixDQUFDRSxPQUF2QjtBQUVBLE1BQU1DLFVBQVUsR0FBRyxJQUFJQyx5QkFBSixDQUFxQjtBQUFFSixJQUFBQSxzQkFBc0IsRUFBdEJBO0FBQUYsR0FBckIsQ0FBbkI7QUFFQSxNQUFNSyx3QkFBd0IsR0FBRyw2Q0FBK0I7QUFDOUQvQixJQUFBQSxXQUFXLEVBQVhBLFdBRDhEO0FBRTlEQyxJQUFBQSxZQUFZLEVBQVpBLFlBRjhEO0FBRzlEQyxJQUFBQSxlQUFlLEVBQWZBLGVBSDhEO0FBSTlEOEIsSUFBQUEsVUFBVSxFQUFFTixzQkFKa0Q7QUFLOUR2QixJQUFBQSwyQkFBMkIsRUFBM0JBLDJCQUw4RDtBQU05RFEsSUFBQUEsMkJBQTJCLEVBQTNCQSwyQkFOOEQ7QUFPOURDLElBQUFBLDJCQUEyQixFQUEzQkEsMkJBUDhEO0FBUTlEQyxJQUFBQSxpQkFBaUIsRUFBakJBO0FBUjhELEdBQS9CLENBQWpDO0FBV0EsU0FBTztBQUNMZ0IsSUFBQUEsVUFBVSxFQUFWQSxVQURLO0FBRUxFLElBQUFBLHdCQUF3QixFQUF4QkE7QUFGSyxHQUFQO0FBSUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3RGcmFtZXdvcmtDb25maWcsIERpYWxvZ1NlcnZpY2VDb25uZWN0b3IsIFByb3BlcnR5SWQgfSBmcm9tICdtaWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkayc7XHJcblxyXG5pbXBvcnQgY3JlYXRlV2ViU3BlZWNoUG9ueWZpbGxGYWN0b3J5IGZyb20gJy4vY3JlYXRlV2ViU3BlZWNoUG9ueWZpbGxGYWN0b3J5JztcclxuaW1wb3J0IERpcmVjdExpbmVTcGVlY2ggZnJvbSAnLi9EaXJlY3RMaW5lU3BlZWNoJztcclxuaW1wb3J0IHBhdGNoRGlhbG9nU2VydmljZUNvbm5lY3RvcklubGluZSBmcm9tICcuL3BhdGNoRGlhbG9nU2VydmljZUNvbm5lY3RvcklubGluZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGUoe1xyXG4gIGF1ZGlvQ29uZmlnLFxyXG4gIGF1ZGlvQ29udGV4dCxcclxuICBlbmFibGVUZWxlbWV0cnksXHJcbiAgc3BlZWNoUmVjb2duaXRpb25FbmRwb2ludElkLFxyXG4gIHNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgIHR5cGVvZiB3aW5kb3cubmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZSkgfHxcclxuICAgICdlbi1VUycsXHJcbiAgc3BlZWNoU2VydmljZXNBdXRob3JpemF0aW9uVG9rZW4sXHJcbiAgc3BlZWNoU2VydmljZXNSZWdpb24sXHJcbiAgc3BlZWNoU2VydmljZXNTdWJzY3JpcHRpb25LZXksXHJcbiAgc3BlZWNoU3ludGhlc2lzRGVwbG95bWVudElkLFxyXG4gIHNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdCxcclxuICB0ZXh0Tm9ybWFsaXphdGlvbixcclxuICB1c2VySUQsXHJcbiAgdXNlcm5hbWVcclxufSkge1xyXG4gIGlmIChcclxuICAgICghc3BlZWNoU2VydmljZXNBdXRob3JpemF0aW9uVG9rZW4gJiYgIXNwZWVjaFNlcnZpY2VzU3Vic2NyaXB0aW9uS2V5KSB8fFxyXG4gICAgKHNwZWVjaFNlcnZpY2VzQXV0aG9yaXphdGlvblRva2VuICYmIHNwZWVjaFNlcnZpY2VzU3Vic2NyaXB0aW9uS2V5KVxyXG4gICkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAnWW91IG11c3Qgc3BlY2lmeSBlaXRoZXIgXCJzcGVlY2hTZXJ2aWNlc0F1dGhvcml6YXRpb25Ub2tlblwiIG9yIFwic3BlZWNoU2VydmljZXNTdWJzY3JpcHRpb25LZXlcIiBvbmx5LidcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBpZiAodGV4dE5vcm1hbGl6YXRpb24pIHtcclxuICAgIGNvbnNvbGUud2FybihcclxuICAgICAgJ2JvdGZyYW1ld29yay1kaXJlY3RsaW5lc3BlZWNoOiBUZXh0IG5vcm1hbGl6YXRpb24gaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQsIGlnbm9yZWluZyBcInRleHROb3JtYWxpemF0aW9uXCIuJ1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGlmICh1c2VySUQgfHwgdXNlcm5hbWUpIHtcclxuICAgIGNvbnNvbGUud2FybihcclxuICAgICAgJ2JvdGZyYW1ld29yay1kaXJlY3RsaW5lc3BlZWNoOiBDdXN0b20gXCJ1c2VySWRcIiBhbmQgXCJ1c2VybmFtZVwiIGFyZSBjdXJyZW50bHkgbm90IHN1cHBvcnRlZCwgaWdub3JpbmcuJ1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGxldCBjb25maWc7XHJcblxyXG4gIGlmIChzcGVlY2hTZXJ2aWNlc0F1dGhvcml6YXRpb25Ub2tlbikge1xyXG4gICAgY29uZmlnID0gQm90RnJhbWV3b3JrQ29uZmlnLmZyb21BdXRob3JpemF0aW9uVG9rZW4oc3BlZWNoU2VydmljZXNBdXRob3JpemF0aW9uVG9rZW4sIHNwZWVjaFNlcnZpY2VzUmVnaW9uKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uZmlnID0gQm90RnJhbWV3b3JrQ29uZmlnLmZyb21TdWJzY3JpcHRpb24oc3BlZWNoU2VydmljZXNTdWJzY3JpcHRpb25LZXksIHNwZWVjaFNlcnZpY2VzUmVnaW9uKTtcclxuICB9XHJcblxyXG4gIC8vIFN1cHBvcnRlZCBvcHRpb25zIGNhbiBiZSBmb3VuZCBpbiBEaWFsb2dDb25uZWN0b3JGYWN0b3J5LmpzLlxyXG5cclxuICBjb25maWcuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2UsIHNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UpO1xyXG5cclxuICAvLyBOb25lIG9mIHRoZSBmb2xsb3dpbmcgd29ya3MgZm9yIHNldHRpbmcgb3V0cHV0IGZvcm1hdC5cclxuXHJcbiAgLy8gY29uZmlnLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX091dHB1dEZvcm1hdE9wdGlvbiwgT3V0cHV0Rm9ybWF0W091dHB1dEZvcm1hdC5EZXRhaWxlZF0pO1xyXG4gIC8vIGNvbmZpZy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VSZXNwb25zZV9SZXF1ZXN0RGV0YWlsZWRSZXN1bHRUcnVlRmFsc2UsIHRydWUpO1xyXG4gIC8vIGNvbmZpZy5zZXRQcm9wZXJ0eShPdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUsIE91dHB1dEZvcm1hdFtPdXRwdXRGb3JtYXQuRGV0YWlsZWRdKTtcclxuICAvLyBjb25maWcuc2V0U2VydmljZVByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX1JlcXVlc3REZXRhaWxlZFJlc3VsdFRydWVGYWxzZSwgXCJ0cnVlXCIsIFNlcnZpY2VQcm9wZXJ0eUNoYW5uZWwuVXJpUXVlcnlQYXJhbWV0ZXIpO1xyXG5cclxuICBjb25zdCBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yID0gcGF0Y2hEaWFsb2dTZXJ2aWNlQ29ubmVjdG9ySW5saW5lKG5ldyBEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yKGNvbmZpZywgYXVkaW9Db25maWcpKTtcclxuXHJcbiAgZGlhbG9nU2VydmljZUNvbm5lY3Rvci5jb25uZWN0KCk7XHJcblxyXG4gIGNvbnN0IGRpcmVjdExpbmUgPSBuZXcgRGlyZWN0TGluZVNwZWVjaCh7IGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IgfSk7XHJcblxyXG4gIGNvbnN0IHdlYlNwZWVjaFBvbnlmaWxsRmFjdG9yeSA9IGNyZWF0ZVdlYlNwZWVjaFBvbnlmaWxsRmFjdG9yeSh7XHJcbiAgICBhdWRpb0NvbmZpZyxcclxuICAgIGF1ZGlvQ29udGV4dCxcclxuICAgIGVuYWJsZVRlbGVtZXRyeSxcclxuICAgIHJlY29nbml6ZXI6IGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IsXHJcbiAgICBzcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQsXHJcbiAgICBzcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQsXHJcbiAgICBzcGVlY2hTeW50aGVzaXNPdXRwdXRGb3JtYXQsXHJcbiAgICB0ZXh0Tm9ybWFsaXphdGlvblxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZGlyZWN0TGluZSxcclxuICAgIHdlYlNwZWVjaFBvbnlmaWxsRmFjdG9yeVxyXG4gIH07XHJcbn1cclxuIl19

/***/ }),

/***/ "./lib/createErrorEvent.js":
/*!*********************************!*\
  !*** ./lib/createErrorEvent.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createErrorEvent;

function createErrorEvent(error) {
  var errorEvent = new Event('error');
  errorEvent.error = error;
  return errorEvent;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVFcnJvckV2ZW50LmpzIl0sIm5hbWVzIjpbImNyZWF0ZUVycm9yRXZlbnQiLCJlcnJvciIsImVycm9yRXZlbnQiLCJFdmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFlLFNBQVNBLGdCQUFULENBQTBCQyxLQUExQixFQUFpQztBQUM5QyxNQUFNQyxVQUFVLEdBQUcsSUFBSUMsS0FBSixDQUFVLE9BQVYsQ0FBbkI7QUFFQUQsRUFBQUEsVUFBVSxDQUFDRCxLQUFYLEdBQW1CQSxLQUFuQjtBQUVBLFNBQU9DLFVBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yRXZlbnQoZXJyb3IpIHtcclxuICBjb25zdCBlcnJvckV2ZW50ID0gbmV3IEV2ZW50KCdlcnJvcicpO1xyXG5cclxuICBlcnJvckV2ZW50LmVycm9yID0gZXJyb3I7XHJcblxyXG4gIHJldHVybiBlcnJvckV2ZW50O1xyXG59XHJcbiJdfQ==

/***/ }),

/***/ "./lib/createTaskQueue.js":
/*!********************************!*\
  !*** ./lib/createTaskQueue.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createTaskQueue;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _pDefer = _interopRequireDefault(__webpack_require__(/*! p-defer */ "./node_modules/p-defer/index.js"));

function createTaskQueue() {
  var queueWithCurrent = [];
  var queue = {
    cancelAll: function cancelAll() {
      queueWithCurrent.forEach(function (_ref) {
        var cancel = _ref.cancel;
        return cancel();
      });
    },
    push: function push(fn) {
      var cancelDeferred = (0, _pDefer.default)();
      var resultDeferred = (0, _pDefer.default)();
      var entry = {
        promise: resultDeferred.promise
      };
      var abort;

      var cancel = entry.cancel = function () {
        // Override the "fn" so we don't call the actual "fn" later.
        // In this approach, we can reuse the logic inside "start" to handle post-cancellation.
        fn = function fn() {
          return {
            result: Promise.reject(new Error('cancelled before start'))
          };
        }; // Abort the task if it is currently running.


        abort && abort();
        cancelDeferred.reject(new Error('cancelled in the midway'));
      };

      var start =
      /*#__PURE__*/
      function () {
        var _ref2 = (0, _asyncToGenerator2.default)(
        /*#__PURE__*/
        _regenerator.default.mark(function _callee() {
          var _fn, abortFn, result;

          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _fn = fn(), abortFn = _fn.abort, result = _fn.result;
                  abort = abortFn;
                  _context.prev = 2;
                  _context.t0 = resultDeferred;
                  _context.next = 6;
                  return Promise.race([result, cancelDeferred.promise]);

                case 6:
                  _context.t1 = _context.sent;

                  _context.t0.resolve.call(_context.t0, _context.t1);

                  _context.next = 13;
                  break;

                case 10:
                  _context.prev = 10;
                  _context.t2 = _context["catch"](2);
                  resultDeferred.reject(_context.t2);

                case 13:
                  queueWithCurrent = queueWithCurrent.filter(function (e) {
                    return e !== entry;
                  });

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[2, 10]]);
        }));

        return function start() {
          return _ref2.apply(this, arguments);
        };
      }();

      var lastEntry = queueWithCurrent[queueWithCurrent.length - 1];
      var lastPromise = lastEntry && lastEntry.promise || Promise.resolve();
      queueWithCurrent.push(entry); // After the last promise resolved/rejected, we will start this task.
      // We will start even if the last promise rejected.

      lastPromise.then(start, start);
      return {
        cancel: cancel,
        result: resultDeferred.promise
      };
    }
  };
  Object.defineProperty(queue, 'length', {
    get: function get() {
      return queueWithCurrent.length;
    }
  });
  return queue;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVUYXNrUXVldWUuanMiXSwibmFtZXMiOlsiY3JlYXRlVGFza1F1ZXVlIiwicXVldWVXaXRoQ3VycmVudCIsInF1ZXVlIiwiY2FuY2VsQWxsIiwiZm9yRWFjaCIsImNhbmNlbCIsInB1c2giLCJmbiIsImNhbmNlbERlZmVycmVkIiwicmVzdWx0RGVmZXJyZWQiLCJlbnRyeSIsInByb21pc2UiLCJhYm9ydCIsInJlc3VsdCIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsInN0YXJ0IiwiYWJvcnRGbiIsInJhY2UiLCJyZXNvbHZlIiwiZmlsdGVyIiwiZSIsImxhc3RFbnRyeSIsImxlbmd0aCIsImxhc3RQcm9taXNlIiwidGhlbiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRWUsU0FBU0EsZUFBVCxHQUEyQjtBQUN4QyxNQUFJQyxnQkFBZ0IsR0FBRyxFQUF2QjtBQUVBLE1BQU1DLEtBQUssR0FBRztBQUNaQyxJQUFBQSxTQUFTLEVBQUUscUJBQU07QUFDZkYsTUFBQUEsZ0JBQWdCLENBQUNHLE9BQWpCLENBQXlCO0FBQUEsWUFBR0MsTUFBSCxRQUFHQSxNQUFIO0FBQUEsZUFBZ0JBLE1BQU0sRUFBdEI7QUFBQSxPQUF6QjtBQUNELEtBSFc7QUFJWkMsSUFBQUEsSUFBSSxFQUFFLGNBQUFDLEVBQUUsRUFBSTtBQUNWLFVBQU1DLGNBQWMsR0FBRyxzQkFBdkI7QUFDQSxVQUFNQyxjQUFjLEdBQUcsc0JBQXZCO0FBQ0EsVUFBTUMsS0FBSyxHQUFHO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUYsY0FBYyxDQUFDRTtBQUExQixPQUFkO0FBQ0EsVUFBSUMsS0FBSjs7QUFFQSxVQUFNUCxNQUFNLEdBQUlLLEtBQUssQ0FBQ0wsTUFBTixHQUFlLFlBQU07QUFDbkM7QUFDQTtBQUNBRSxRQUFBQSxFQUFFLEdBQUc7QUFBQSxpQkFBTztBQUFFTSxZQUFBQSxNQUFNLEVBQUVDLE9BQU8sQ0FBQ0MsTUFBUixDQUFlLElBQUlDLEtBQUosQ0FBVSx3QkFBVixDQUFmO0FBQVYsV0FBUDtBQUFBLFNBQUwsQ0FIbUMsQ0FLbkM7OztBQUNBSixRQUFBQSxLQUFLLElBQUlBLEtBQUssRUFBZDtBQUNBSixRQUFBQSxjQUFjLENBQUNPLE1BQWYsQ0FBc0IsSUFBSUMsS0FBSixDQUFVLHlCQUFWLENBQXRCO0FBQ0QsT0FSRDs7QUFVQSxVQUFNQyxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxrQ0FBRztBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsd0JBQ3VCVixFQUFFLEVBRHpCLEVBQ0dXLE9BREgsT0FDSk4sS0FESSxFQUNZQyxNQURaLE9BQ1lBLE1BRFo7QUFHWkQsa0JBQUFBLEtBQUssR0FBR00sT0FBUjtBQUhZO0FBQUEsZ0NBT1ZULGNBUFU7QUFBQTtBQUFBLHlCQU9tQkssT0FBTyxDQUFDSyxJQUFSLENBQWEsQ0FBQ04sTUFBRCxFQUFTTCxjQUFjLENBQUNHLE9BQXhCLENBQWIsQ0FQbkI7O0FBQUE7QUFBQTs7QUFBQSw4QkFPS1MsT0FQTDs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQVNWWCxrQkFBQUEsY0FBYyxDQUFDTSxNQUFmOztBQVRVO0FBWVpkLGtCQUFBQSxnQkFBZ0IsR0FBR0EsZ0JBQWdCLENBQUNvQixNQUFqQixDQUF3QixVQUFBQyxDQUFDO0FBQUEsMkJBQUlBLENBQUMsS0FBS1osS0FBVjtBQUFBLG1CQUF6QixDQUFuQjs7QUFaWTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxTQUFIOztBQUFBLHdCQUFMTyxLQUFLO0FBQUE7QUFBQTtBQUFBLFNBQVg7O0FBZUEsVUFBTU0sU0FBUyxHQUFHdEIsZ0JBQWdCLENBQUNBLGdCQUFnQixDQUFDdUIsTUFBakIsR0FBMEIsQ0FBM0IsQ0FBbEM7QUFDQSxVQUFNQyxXQUFXLEdBQUlGLFNBQVMsSUFBSUEsU0FBUyxDQUFDWixPQUF4QixJQUFvQ0csT0FBTyxDQUFDTSxPQUFSLEVBQXhEO0FBRUFuQixNQUFBQSxnQkFBZ0IsQ0FBQ0ssSUFBakIsQ0FBc0JJLEtBQXRCLEVBbENVLENBb0NWO0FBQ0E7O0FBQ0FlLE1BQUFBLFdBQVcsQ0FBQ0MsSUFBWixDQUFpQlQsS0FBakIsRUFBd0JBLEtBQXhCO0FBRUEsYUFBTztBQUNMWixRQUFBQSxNQUFNLEVBQU5BLE1BREs7QUFFTFEsUUFBQUEsTUFBTSxFQUFFSixjQUFjLENBQUNFO0FBRmxCLE9BQVA7QUFJRDtBQWhEVyxHQUFkO0FBbURBZ0IsRUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCMUIsS0FBdEIsRUFBNkIsUUFBN0IsRUFBdUM7QUFBRTJCLElBQUFBLEdBQUcsRUFBRTtBQUFBLGFBQU01QixnQkFBZ0IsQ0FBQ3VCLE1BQXZCO0FBQUE7QUFBUCxHQUF2QztBQUVBLFNBQU90QixLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlRGVmZXJyZWQgZnJvbSAncC1kZWZlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUYXNrUXVldWUoKSB7XHJcbiAgbGV0IHF1ZXVlV2l0aEN1cnJlbnQgPSBbXTtcclxuXHJcbiAgY29uc3QgcXVldWUgPSB7XHJcbiAgICBjYW5jZWxBbGw6ICgpID0+IHtcclxuICAgICAgcXVldWVXaXRoQ3VycmVudC5mb3JFYWNoKCh7IGNhbmNlbCB9KSA9PiBjYW5jZWwoKSk7XHJcbiAgICB9LFxyXG4gICAgcHVzaDogZm4gPT4ge1xyXG4gICAgICBjb25zdCBjYW5jZWxEZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdERlZmVycmVkID0gY3JlYXRlRGVmZXJyZWQoKTtcclxuICAgICAgY29uc3QgZW50cnkgPSB7IHByb21pc2U6IHJlc3VsdERlZmVycmVkLnByb21pc2UgfTtcclxuICAgICAgbGV0IGFib3J0O1xyXG5cclxuICAgICAgY29uc3QgY2FuY2VsID0gKGVudHJ5LmNhbmNlbCA9ICgpID0+IHtcclxuICAgICAgICAvLyBPdmVycmlkZSB0aGUgXCJmblwiIHNvIHdlIGRvbid0IGNhbGwgdGhlIGFjdHVhbCBcImZuXCIgbGF0ZXIuXHJcbiAgICAgICAgLy8gSW4gdGhpcyBhcHByb2FjaCwgd2UgY2FuIHJldXNlIHRoZSBsb2dpYyBpbnNpZGUgXCJzdGFydFwiIHRvIGhhbmRsZSBwb3N0LWNhbmNlbGxhdGlvbi5cclxuICAgICAgICBmbiA9ICgpID0+ICh7IHJlc3VsdDogUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdjYW5jZWxsZWQgYmVmb3JlIHN0YXJ0JykpIH0pO1xyXG5cclxuICAgICAgICAvLyBBYm9ydCB0aGUgdGFzayBpZiBpdCBpcyBjdXJyZW50bHkgcnVubmluZy5cclxuICAgICAgICBhYm9ydCAmJiBhYm9ydCgpO1xyXG4gICAgICAgIGNhbmNlbERlZmVycmVkLnJlamVjdChuZXcgRXJyb3IoJ2NhbmNlbGxlZCBpbiB0aGUgbWlkd2F5JykpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHN0YXJ0ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgYWJvcnQ6IGFib3J0Rm4sIHJlc3VsdCB9ID0gZm4oKTtcclxuXHJcbiAgICAgICAgYWJvcnQgPSBhYm9ydEZuO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgLy8gRWl0aGVyIHdhaXQgZm9yIHRoZSBhY3R1YWwgcmVzdWx0LCBvciB0aGUgdGFzayBpcyBiZWluZyBjYW5jZWxsZWQuXHJcbiAgICAgICAgICByZXN1bHREZWZlcnJlZC5yZXNvbHZlKGF3YWl0IFByb21pc2UucmFjZShbcmVzdWx0LCBjYW5jZWxEZWZlcnJlZC5wcm9taXNlXSkpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICByZXN1bHREZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcXVldWVXaXRoQ3VycmVudCA9IHF1ZXVlV2l0aEN1cnJlbnQuZmlsdGVyKGUgPT4gZSAhPT0gZW50cnkpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgbGFzdEVudHJ5ID0gcXVldWVXaXRoQ3VycmVudFtxdWV1ZVdpdGhDdXJyZW50Lmxlbmd0aCAtIDFdO1xyXG4gICAgICBjb25zdCBsYXN0UHJvbWlzZSA9IChsYXN0RW50cnkgJiYgbGFzdEVudHJ5LnByb21pc2UpIHx8IFByb21pc2UucmVzb2x2ZSgpO1xyXG5cclxuICAgICAgcXVldWVXaXRoQ3VycmVudC5wdXNoKGVudHJ5KTtcclxuXHJcbiAgICAgIC8vIEFmdGVyIHRoZSBsYXN0IHByb21pc2UgcmVzb2x2ZWQvcmVqZWN0ZWQsIHdlIHdpbGwgc3RhcnQgdGhpcyB0YXNrLlxyXG4gICAgICAvLyBXZSB3aWxsIHN0YXJ0IGV2ZW4gaWYgdGhlIGxhc3QgcHJvbWlzZSByZWplY3RlZC5cclxuICAgICAgbGFzdFByb21pc2UudGhlbihzdGFydCwgc3RhcnQpO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBjYW5jZWwsXHJcbiAgICAgICAgcmVzdWx0OiByZXN1bHREZWZlcnJlZC5wcm9taXNlXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHF1ZXVlLCAnbGVuZ3RoJywgeyBnZXQ6ICgpID0+IHF1ZXVlV2l0aEN1cnJlbnQubGVuZ3RoIH0pO1xyXG5cclxuICByZXR1cm4gcXVldWU7XHJcbn1cclxuIl19

/***/ }),

/***/ "./lib/createWebSpeechPonyfillFactory.js":
/*!***********************************************!*\
  !*** ./lib/createWebSpeechPonyfillFactory.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _microsoftCognitiveservicesSpeechSdk = __webpack_require__(/*! microsoft-cognitiveservices-speech-sdk */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/microsoft.cognitiveservices.speech.sdk.js");

var _SpeechToText = __webpack_require__(/*! web-speech-cognitive-services/lib/SpeechServices/SpeechToText */ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText.js");

var _abortController = _interopRequireDefault(__webpack_require__(/*! abort-controller */ "./node_modules/abort-controller/browser.js"));

var _createErrorEvent = _interopRequireDefault(__webpack_require__(/*! ./createErrorEvent */ "./lib/createErrorEvent.js"));

var _createTaskQueue2 = _interopRequireDefault(__webpack_require__(/*! ./createTaskQueue */ "./lib/createTaskQueue.js"));

var _eventTargetShim = _interopRequireWildcard(__webpack_require__(/*! ./external/event-target-shim */ "./lib/external/event-target-shim.js"));

var _playCognitiveServicesStream = _interopRequireDefault(__webpack_require__(/*! ./playCognitiveServicesStream */ "./lib/playCognitiveServicesStream.js"));

var _playWhiteNoise = _interopRequireDefault(__webpack_require__(/*! ./playWhiteNoise */ "./lib/playWhiteNoise.js"));

var _SpeechSynthesisAudioStreamUtterance = _interopRequireDefault(__webpack_require__(/*! ./SpeechSynthesisAudioStreamUtterance */ "./lib/SpeechSynthesisAudioStreamUtterance.js"));

/* eslint class-methods-use-this: ["error", { "exceptMethods": ["cancel", "getVoices", "speak"] }] */
function _default(_ref) {
  var _ref$audioConfig = _ref.audioConfig,
      audioConfig = _ref$audioConfig === void 0 ? _microsoftCognitiveservicesSpeechSdk.AudioConfig.fromDefaultMicrophoneInput() : _ref$audioConfig,
      enableTelemetry = _ref.enableTelemetry,
      recognizer = _ref.recognizer,
      speechRecognitionEndpointId = _ref.speechRecognitionEndpointId,
      speechSynthesisDeploymentId = _ref.speechSynthesisDeploymentId,
      speechSynthesisOutputFormat = _ref.speechSynthesisOutputFormat,
      textNormalization = _ref.textNormalization;

  if (speechRecognitionEndpointId) {
    console.warn('botframework-directlinespeech: Custom Speech is currently not supported, ignoring speechRecognitionEndpointId.');
  }

  if (speechSynthesisDeploymentId) {
    console.warn('botframework-directlinespeech: Custom Voice is currently not supported, ignoring speechSynthesisDeploymentId.');
  }

  if (speechSynthesisOutputFormat) {
    console.warn('botframework-directlinespeech: Custom Voice is currently not supported, ignoring speechSynthesisOutputFormat.');
  }

  return function () {
    var _createSpeechRecognit = (0, _SpeechToText.createSpeechRecognitionPonyfillFromRecognizer)({
      audioConfig: audioConfig,
      createRecognizer: function createRecognizer() {
        return recognizer;
      },
      enableTelemetry: enableTelemetry,
      looseEvents: true,
      textNormalization: textNormalization
    }),
        SpeechGrammarList = _createSpeechRecognit.SpeechGrammarList,
        SpeechRecognition = _createSpeechRecognit.SpeechRecognition;

    var audioContext = new AudioContext();

    var _createTaskQueue = (0, _createTaskQueue2.default)(),
        cancelAll = _createTaskQueue.cancelAll,
        push = _createTaskQueue.push;

    var SpeechSynthesis =
    /*#__PURE__*/
    function (_EventTargetShim) {
      (0, _inherits2.default)(SpeechSynthesis, _EventTargetShim);

      function SpeechSynthesis() {
        (0, _classCallCheck2.default)(this, SpeechSynthesis);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SpeechSynthesis).apply(this, arguments));
      }

      (0, _createClass2.default)(SpeechSynthesis, [{
        key: "cancel",
        value: function cancel() {
          cancelAll();
        }
      }, {
        key: "getVoices",
        value: function getVoices() {
          return [];
        }
      }, {
        key: "speak",
        value: function speak(utterance) {
          var _push = push(function () {
            var controller = new _abortController.default();
            var signal = controller.signal;
            return {
              abort: controller.abort.bind(controller),
              result: (0, _asyncToGenerator2.default)(
              /*#__PURE__*/
              _regenerator.default.mark(function _callee() {
                var _utterance$audioStrea, format, streamReader;

                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        utterance.dispatchEvent(new Event('start'));
                        _context.prev = 1;

                        if (!utterance.audioStream) {
                          _context.next = 8;
                          break;
                        }

                        _utterance$audioStrea = utterance.audioStream, format = _utterance$audioStrea.format, streamReader = _utterance$audioStrea.streamReader;
                        _context.next = 6;
                        return (0, _playCognitiveServicesStream.default)(audioContext, format, streamReader, {
                          signal: signal
                        });

                      case 6:
                        _context.next = 10;
                        break;

                      case 8:
                        _context.next = 10;
                        return (0, _playWhiteNoise.default)(audioContext);

                      case 10:
                        _context.next = 16;
                        break;

                      case 12:
                        _context.prev = 12;
                        _context.t0 = _context["catch"](1);

                        if (!(_context.t0.message !== 'aborted')) {
                          _context.next = 16;
                          break;
                        }

                        return _context.abrupt("return", utterance.dispatchEvent((0, _createErrorEvent.default)(_context.t0)));

                      case 16:
                        utterance.dispatchEvent(new Event('end'));

                      case 17:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[1, 12]]);
              }))()
            };
          }),
              result = _push.result; // Catching the error to prevent uncaught promise error due to cancellation.


          result.catch(function (error) {
            if (!/^cancelled/i.test(error.message)) {
              throw error;
            }
          });
        }
      }]);
      return SpeechSynthesis;
    }(_eventTargetShim.default);

    (0, _eventTargetShim.defineEventAttribute)(SpeechSynthesis, 'voiceschanged');
    return {
      SpeechGrammarList: SpeechGrammarList,
      SpeechRecognition: SpeechRecognition,
      speechSynthesis: new SpeechSynthesis(),
      SpeechSynthesisUtterance: _SpeechSynthesisAudioStreamUtterance.default
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./lib/external/event-target-shim.js":
/*!*******************************************!*\
  !*** ./lib/external/event-target-shim.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// This is adopted from event-target-shim@5.0.1 under MIT License.
// The source code is copied here because the original package do not support ES5 browsers.

/* eslint-disable */

/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * @typedef {object} PrivateData
 * @property {EventTarget} eventTarget The event target.
 * @property {{type:string}} event The original event object.
 * @property {number} eventPhase The current event phase.
 * @property {EventTarget|null} currentTarget The current event target.
 * @property {boolean} canceled The flag to prevent default.
 * @property {boolean} stopped The flag to stop propagation.
 * @property {boolean} immediateStopped The flag to stop propagation immediately.
 * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
 * @property {number} timeStamp The unix time.
 * @private
 */

/**
 * Private data for event wrappers.
 * @type {WeakMap<Event, PrivateData>}
 * @private
 */

var privateData = new WeakMap();
/**
 * Cache for wrapper classes.
 * @type {WeakMap<Object, Function>}
 * @private
 */

var wrappers = new WeakMap();
/**
 * Get private data.
 * @param {Event} event The event object to get private data.
 * @returns {PrivateData} The private data of the event.
 * @private
 */

function pd(event) {
  var retv = privateData.get(event);
  console.assert(retv != null, "'this' is expected an Event object, but got", event);
  return retv;
}
/**
 * https://dom.spec.whatwg.org/#set-the-canceled-flag
 * @param data {PrivateData} private data.
 */


function setCancelFlag(data) {
  if (data.passiveListener != null) {
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
      console.error('Unable to preventDefault inside passive event listener invocation.', data.passiveListener);
    }

    return;
  }

  if (!data.event.cancelable) {
    return;
  }

  data.canceled = true;

  if (typeof data.event.preventDefault === 'function') {
    data.event.preventDefault();
  }
}
/**
 * @see https://dom.spec.whatwg.org/#interface-event
 * @private
 */

/**
 * The event wrapper.
 * @constructor
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Event|{type:string}} event The original event to wrap.
 */


function Event(eventTarget, event) {
  privateData.set(this, {
    eventTarget: eventTarget,
    event: event,
    eventPhase: 2,
    currentTarget: eventTarget,
    canceled: false,
    stopped: false,
    immediateStopped: false,
    passiveListener: null,
    timeStamp: event.timeStamp || Date.now()
  }); // https://heycam.github.io/webidl/#Unforgeable

  Object.defineProperty(this, 'isTrusted', {
    value: false,
    enumerable: true
  }); // Define accessors

  var keys = Object.keys(event);

  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];

    if (!(key in this)) {
      Object.defineProperty(this, key, defineRedirectDescriptor(key));
    }
  }
} // Should be enumerable, but class methods are not enumerable.


Event.prototype = {
  /**
   * The type of this event.
   * @type {string}
   */
  get type() {
    return pd(this).event.type;
  },

  /**
   * The target of this event.
   * @type {EventTarget}
   */
  get target() {
    return pd(this).eventTarget;
  },

  /**
   * The target of this event.
   * @type {EventTarget}
   */
  get currentTarget() {
    return pd(this).currentTarget;
  },

  /**
   * @returns {EventTarget[]} The composed path of this event.
   */
  composedPath: function composedPath() {
    var currentTarget = pd(this).currentTarget;

    if (currentTarget == null) {
      return [];
    }

    return [currentTarget];
  },

  /**
   * Constant of NONE.
   * @type {number}
   */
  get NONE() {
    return 0;
  },

  /**
   * Constant of CAPTURING_PHASE.
   * @type {number}
   */
  get CAPTURING_PHASE() {
    return 1;
  },

  /**
   * Constant of AT_TARGET.
   * @type {number}
   */
  get AT_TARGET() {
    return 2;
  },

  /**
   * Constant of BUBBLING_PHASE.
   * @type {number}
   */
  get BUBBLING_PHASE() {
    return 3;
  },

  /**
   * The target of this event.
   * @type {number}
   */
  get eventPhase() {
    return pd(this).eventPhase;
  },

  /**
   * Stop event bubbling.
   * @returns {void}
   */
  stopPropagation: function stopPropagation() {
    var data = pd(this);
    data.stopped = true;

    if (typeof data.event.stopPropagation === 'function') {
      data.event.stopPropagation();
    }
  },

  /**
   * Stop event bubbling.
   * @returns {void}
   */
  stopImmediatePropagation: function stopImmediatePropagation() {
    var data = pd(this);
    data.stopped = true;
    data.immediateStopped = true;

    if (typeof data.event.stopImmediatePropagation === 'function') {
      data.event.stopImmediatePropagation();
    }
  },

  /**
   * The flag to be bubbling.
   * @type {boolean}
   */
  get bubbles() {
    return Boolean(pd(this).event.bubbles);
  },

  /**
   * The flag to be cancelable.
   * @type {boolean}
   */
  get cancelable() {
    return Boolean(pd(this).event.cancelable);
  },

  /**
   * Cancel this event.
   * @returns {void}
   */
  preventDefault: function preventDefault() {
    setCancelFlag(pd(this));
  },

  /**
   * The flag to indicate cancellation state.
   * @type {boolean}
   */
  get defaultPrevented() {
    return pd(this).canceled;
  },

  /**
   * The flag to be composed.
   * @type {boolean}
   */
  get composed() {
    return Boolean(pd(this).event.composed);
  },

  /**
   * The unix time of this event.
   * @type {number}
   */
  get timeStamp() {
    return pd(this).timeStamp;
  },

  /**
   * The target of this event.
   * @type {EventTarget}
   * @deprecated
   */
  get srcElement() {
    return pd(this).eventTarget;
  },

  /**
   * The flag to stop event bubbling.
   * @type {boolean}
   * @deprecated
   */
  get cancelBubble() {
    return pd(this).stopped;
  },

  set cancelBubble(value) {
    if (!value) {
      return;
    }

    var data = pd(this);
    data.stopped = true;

    if (typeof data.event.cancelBubble === 'boolean') {
      data.event.cancelBubble = true;
    }
  },

  /**
   * The flag to indicate cancellation state.
   * @type {boolean}
   * @deprecated
   */
  get returnValue() {
    return !pd(this).canceled;
  },

  set returnValue(value) {
    if (!value) {
      setCancelFlag(pd(this));
    }
  },

  /**
   * Initialize this event object. But do nothing under event dispatching.
   * @param {string} type The event type.
   * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
   * @param {boolean} [cancelable=false] The flag to be possible to cancel.
   * @deprecated
   */
  initEvent: function initEvent() {// Do nothing.
  }
}; // `constructor` is not enumerable.

Object.defineProperty(Event.prototype, 'constructor', {
  value: Event,
  configurable: true,
  writable: true
}); // Ensure `event instanceof window.Event` is `true`.

if (typeof window !== 'undefined' && typeof window.Event !== 'undefined') {
  Object.setPrototypeOf(Event.prototype, window.Event.prototype); // Make association for wrappers.

  wrappers.set(window.Event.prototype, Event);
}
/**
 * Get the property descriptor to redirect a given property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to redirect the property.
 * @private
 */


function defineRedirectDescriptor(key) {
  return {
    get: function get() {
      return pd(this).event[key];
    },
    set: function set(value) {
      pd(this).event[key] = value;
    },
    configurable: true,
    enumerable: true
  };
}
/**
 * Get the property descriptor to call a given method property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to call the method property.
 * @private
 */


function defineCallDescriptor(key) {
  return {
    value: function value() {
      var event = pd(this).event;
      return event[key].apply(event, arguments);
    },
    configurable: true,
    enumerable: true
  };
}
/**
 * Define new wrapper class.
 * @param {Function} BaseEvent The base wrapper class.
 * @param {Object} proto The prototype of the original event.
 * @returns {Function} The defined wrapper class.
 * @private
 */


function defineWrapper(BaseEvent, proto) {
  var keys = Object.keys(proto);

  if (keys.length === 0) {
    return BaseEvent;
  }
  /** CustomEvent */


  function CustomEvent(eventTarget, event) {
    BaseEvent.call(this, eventTarget, event);
  }

  CustomEvent.prototype = Object.create(BaseEvent.prototype, {
    constructor: {
      value: CustomEvent,
      configurable: true,
      writable: true
    }
  }); // Define accessors.

  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];

    if (!(key in BaseEvent.prototype)) {
      var descriptor = Object.getOwnPropertyDescriptor(proto, key);
      var isFunc = typeof descriptor.value === 'function';
      Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
    }
  }

  return CustomEvent;
}
/**
 * Get the wrapper class of a given prototype.
 * @param {Object} proto The prototype of the original event to get its wrapper.
 * @returns {Function} The wrapper class.
 * @private
 */


function getWrapper(proto) {
  if (proto == null || proto === Object.prototype) {
    return Event;
  }

  var wrapper = wrappers.get(proto);

  if (wrapper == null) {
    wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
    wrappers.set(proto, wrapper);
  }

  return wrapper;
}
/**
 * Wrap a given event to management a dispatching.
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Object} event The event to wrap.
 * @returns {Event} The wrapper instance.
 * @private
 */


function wrapEvent(eventTarget, event) {
  var Wrapper = getWrapper(Object.getPrototypeOf(event));
  return new Wrapper(eventTarget, event);
}
/**
 * Get the immediateStopped flag of a given event.
 * @param {Event} event The event to get.
 * @returns {boolean} The flag to stop propagation immediately.
 * @private
 */


function isStopped(event) {
  return pd(event).immediateStopped;
}
/**
 * Set the current event phase of a given event.
 * @param {Event} event The event to set current target.
 * @param {number} eventPhase New event phase.
 * @returns {void}
 * @private
 */


function setEventPhase(event, eventPhase) {
  pd(event).eventPhase = eventPhase;
}
/**
 * Set the current target of a given event.
 * @param {Event} event The event to set current target.
 * @param {EventTarget|null} currentTarget New current target.
 * @returns {void}
 * @private
 */


function setCurrentTarget(event, currentTarget) {
  pd(event).currentTarget = currentTarget;
}
/**
 * Set a passive listener of a given event.
 * @param {Event} event The event to set current target.
 * @param {Function|null} passiveListener New passive listener.
 * @returns {void}
 * @private
 */


function setPassiveListener(event, passiveListener) {
  pd(event).passiveListener = passiveListener;
}
/**
 * @typedef {object} ListenerNode
 * @property {Function} listener
 * @property {1|2|3} listenerType
 * @property {boolean} passive
 * @property {boolean} once
 * @property {ListenerNode|null} next
 * @private
 */

/**
 * @type {WeakMap<object, Map<string, ListenerNode>>}
 * @private
 */


var listenersMap = new WeakMap(); // Listener types

var CAPTURE = 1;
var BUBBLE = 2;
var ATTRIBUTE = 3;
/**
 * Check whether a given value is an object or not.
 * @param {any} x The value to check.
 * @returns {boolean} `true` if the value is an object.
 */

function isObject(x) {
  return x !== null && (0, _typeof2.default)(x) === 'object'; //eslint-disable-line no-restricted-syntax
}
/**
 * Get listeners.
 * @param {EventTarget} eventTarget The event target to get.
 * @returns {Map<string, ListenerNode>} The listeners.
 * @private
 */


function getListeners(eventTarget) {
  var listeners = listenersMap.get(eventTarget);

  if (listeners == null) {
    throw new TypeError("'this' is expected an EventTarget object, but got another value.");
  }

  return listeners;
}
/**
 * Get the property descriptor for the event attribute of a given event.
 * @param {string} eventName The event name to get property descriptor.
 * @returns {PropertyDescriptor} The property descriptor.
 * @private
 */


function defineEventAttributeDescriptor(eventName) {
  return {
    get: function get() {
      var listeners = getListeners(this);
      var node = listeners.get(eventName);

      while (node != null) {
        if (node.listenerType === ATTRIBUTE) {
          return node.listener;
        }

        node = node.next;
      }

      return null;
    },
    set: function set(listener) {
      if (typeof listener !== 'function' && !isObject(listener)) {
        listener = null; // eslint-disable-line no-param-reassign
      }

      var listeners = getListeners(this); // Traverse to the tail while removing old value.

      var prev = null;
      var node = listeners.get(eventName);

      while (node != null) {
        if (node.listenerType === ATTRIBUTE) {
          // Remove old value.
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
        } else {
          prev = node;
        }

        node = node.next;
      } // Add new value.


      if (listener !== null) {
        var newNode = {
          listener: listener,
          listenerType: ATTRIBUTE,
          passive: false,
          once: false,
          next: null
        };

        if (prev === null) {
          listeners.set(eventName, newNode);
        } else {
          prev.next = newNode;
        }
      }
    },
    configurable: true,
    enumerable: true
  };
}
/**
 * Define an event attribute (e.g. `eventTarget.onclick`).
 * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
 * @param {string} eventName The event name to define.
 * @returns {void}
 */


function defineEventAttribute(eventTargetPrototype, eventName) {
  Object.defineProperty(eventTargetPrototype, "on".concat(eventName), defineEventAttributeDescriptor(eventName));
}
/**
 * Define a custom EventTarget with event attributes.
 * @param {string[]} eventNames Event names for event attributes.
 * @returns {EventTarget} The custom EventTarget.
 * @private
 */


function defineCustomEventTarget(eventNames) {
  /** CustomEventTarget */
  function CustomEventTarget() {
    EventTarget.call(this);
  }

  CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
    constructor: {
      value: CustomEventTarget,
      configurable: true,
      writable: true
    }
  });

  for (var i = 0; i < eventNames.length; ++i) {
    defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
  }

  return CustomEventTarget;
}
/**
 * EventTarget.
 *
 * - This is constructor if no arguments.
 * - This is a function which returns a CustomEventTarget constructor if there are arguments.
 *
 * For example:
 *
 *     class A extends EventTarget {}
 *     class B extends EventTarget("message") {}
 *     class C extends EventTarget("message", "error") {}
 *     class D extends EventTarget(["message", "error"]) {}
 */


function EventTarget() {
  /*eslint-disable consistent-return */
  if (this instanceof EventTarget) {
    listenersMap.set(this, new Map());
    return;
  }

  if (arguments.length === 1 && Array.isArray(arguments[0])) {
    return defineCustomEventTarget(arguments[0]);
  }

  if (arguments.length > 0) {
    var types = new Array(arguments.length);

    for (var i = 0; i < arguments.length; ++i) {
      types[i] = arguments[i];
    }

    return defineCustomEventTarget(types);
  }

  throw new TypeError('Cannot call a class as a function');
  /*eslint-enable consistent-return */
} // Should be enumerable, but class methods are not enumerable.


EventTarget.prototype = {
  /**
   * Add a given listener to this event target.
   * @param {string} eventName The event name to add.
   * @param {Function} listener The listener to add.
   * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
   * @returns {void}
   */
  addEventListener: function addEventListener(eventName, listener, options) {
    if (listener == null) {
      return;
    }

    if (typeof listener !== 'function' && !isObject(listener)) {
      throw new TypeError("'listener' should be a function or an object.");
    }

    var listeners = getListeners(this);
    var optionsIsObj = isObject(options);
    var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
    var listenerType = capture ? CAPTURE : BUBBLE;
    var newNode = {
      listener: listener,
      listenerType: listenerType,
      passive: optionsIsObj && Boolean(options.passive),
      once: optionsIsObj && Boolean(options.once),
      next: null
    }; // Set it as the first node if the first node is null.

    var node = listeners.get(eventName);

    if (node === undefined) {
      listeners.set(eventName, newNode);
      return;
    } // Traverse to the tail while checking duplication..


    var prev = null;

    while (node != null) {
      if (node.listener === listener && node.listenerType === listenerType) {
        // Should ignore duplication.
        return;
      }

      prev = node;
      node = node.next;
    } // Add it.


    prev.next = newNode;
  },

  /**
   * Remove a given listener from this event target.
   * @param {string} eventName The event name to remove.
   * @param {Function} listener The listener to remove.
   * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
   * @returns {void}
   */
  removeEventListener: function removeEventListener(eventName, listener, options) {
    if (listener == null) {
      return;
    }

    var listeners = getListeners(this);
    var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
    var listenerType = capture ? CAPTURE : BUBBLE;
    var prev = null;
    var node = listeners.get(eventName);

    while (node != null) {
      if (node.listener === listener && node.listenerType === listenerType) {
        if (prev !== null) {
          prev.next = node.next;
        } else if (node.next !== null) {
          listeners.set(eventName, node.next);
        } else {
          listeners.delete(eventName);
        }

        return;
      }

      prev = node;
      node = node.next;
    }
  },

  /**
   * Dispatch a given event.
   * @param {Event|{type:string}} event The event to dispatch.
   * @returns {boolean} `false` if canceled.
   */
  dispatchEvent: function dispatchEvent(event) {
    if (event == null || typeof event.type !== 'string') {
      throw new TypeError('"event.type" should be a string.');
    } // If listeners aren't registered, terminate.


    var listeners = getListeners(this);
    var eventName = event.type;
    var node = listeners.get(eventName);

    if (node == null) {
      return true;
    } // Since we cannot rewrite several properties, so wrap object.


    var wrappedEvent = wrapEvent(this, event); // This doesn't process capturing phase and bubbling phase.
    // This isn't participating in a tree.

    var prev = null;

    while (node != null) {
      // Remove this listener if it's once
      if (node.once) {
        if (prev !== null) {
          prev.next = node.next;
        } else if (node.next !== null) {
          listeners.set(eventName, node.next);
        } else {
          listeners.delete(eventName);
        }
      } else {
        prev = node;
      } // Call this listener


      setPassiveListener(wrappedEvent, node.passive ? node.listener : null);

      if (typeof node.listener === 'function') {
        try {
          node.listener.call(this, wrappedEvent);
        } catch (err) {
          if (typeof console !== 'undefined' && typeof console.error === 'function') {
            console.error(err);
          }
        }
      } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === 'function') {
        node.listener.handleEvent(wrappedEvent);
      } // Break if `event.stopImmediatePropagation` was called.


      if (isStopped(wrappedEvent)) {
        break;
      }

      node = node.next;
    }

    setPassiveListener(wrappedEvent, null);
    setEventPhase(wrappedEvent, 0);
    setCurrentTarget(wrappedEvent, null);
    return !wrappedEvent.defaultPrevented;
  }
}; // `constructor` is not enumerable.

Object.defineProperty(EventTarget.prototype, 'constructor', {
  value: EventTarget,
  configurable: true,
  writable: true
}); // Ensure `eventTarget instanceof window.EventTarget` is `true`.

if (typeof window !== 'undefined' && typeof window.EventTarget !== 'undefined') {
  Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
}

exports.defineEventAttribute = defineEventAttribute;
exports.EventTarget = EventTarget;
exports.default = EventTarget;
module.exports = EventTarget;
module.exports.EventTarget = module.exports['default'] = EventTarget;
module.exports.defineEventAttribute = defineEventAttribute;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "createAdapters", {
  enumerable: true,
  get: function get() {
    return _createAdapters.default;
  }
});

var _createAdapters = _interopRequireDefault(__webpack_require__(/*! ./createAdapters */ "./lib/createAdapters.js"));

/* global process */
if (typeof HTMLDocument !== 'undefined' && typeof document !== 'undefined' && document instanceof HTMLDocument) {
  var meta = document.createElement('meta');
  meta.setAttribute('name', 'botframework-directlinespeech:version');
  meta.setAttribute('content', "0.0.0-0");
  document.head.appendChild(meta);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJIVE1MRG9jdW1lbnQiLCJkb2N1bWVudCIsIm1ldGEiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUVBOztBQUZBO0FBTUEsSUFBSSxPQUFPQSxZQUFQLEtBQXdCLFdBQXhCLElBQXVDLE9BQU9DLFFBQVAsS0FBb0IsV0FBM0QsSUFBMEVBLFFBQVEsWUFBWUQsWUFBbEcsRUFBZ0g7QUFDOUcsTUFBTUUsSUFBSSxHQUFHRCxRQUFRLENBQUNFLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBYjtBQUVBRCxFQUFBQSxJQUFJLENBQUNFLFlBQUwsQ0FBa0IsTUFBbEIsRUFBMEIsdUNBQTFCO0FBQ0FGLEVBQUFBLElBQUksQ0FBQ0UsWUFBTCxDQUFrQixTQUFsQjtBQUVBSCxFQUFBQSxRQUFRLENBQUNJLElBQVQsQ0FBY0MsV0FBZCxDQUEwQkosSUFBMUI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBwcm9jZXNzICovXHJcblxyXG5pbXBvcnQgY3JlYXRlQWRhcHRlcnMgZnJvbSAnLi9jcmVhdGVBZGFwdGVycyc7XHJcblxyXG5leHBvcnQgeyBjcmVhdGVBZGFwdGVycyB9O1xyXG5cclxuaWYgKHR5cGVvZiBIVE1MRG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiBIVE1MRG9jdW1lbnQpIHtcclxuICBjb25zdCBtZXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbWV0YScpO1xyXG5cclxuICBtZXRhLnNldEF0dHJpYnV0ZSgnbmFtZScsICdib3RmcmFtZXdvcmstZGlyZWN0bGluZXNwZWVjaDp2ZXJzaW9uJyk7XHJcbiAgbWV0YS5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnLCBwcm9jZXNzLmVudi5OUE1fUEFDS0FHRV9WRVJTSU9OKTtcclxuXHJcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChtZXRhKTtcclxufVxyXG4iXX0=

/***/ }),

/***/ "./lib/patchDialogServiceConnectorInline.js":
/*!**************************************************!*\
  !*** ./lib/patchDialogServiceConnectorInline.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = patchDialogServiceConnectorInline;

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"));

var _pDefer = _interopRequireDefault(__webpack_require__(/*! p-defer */ "./node_modules/p-defer/index.js"));

// Patching a function to add pre-processing of arguments and post-processing of result.
function patchFunction(fn, pre, post) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args = pre ? pre.apply(void 0, (0, _toConsumableArray2.default)(args)) : args;
    var result = fn.apply(void 0, (0, _toConsumableArray2.default)(args));
    return post ? post(result) : result;
  };
}

function patchDialogServiceConnectorInline(dialogServiceConnector) {
  // This function will patch DialogServiceConnector by modifying the object.
  // The patches are intended to fill-in features to make DialogServiceConnector object works like the full-fledged Recognizer object.
  var lastRecognitionDeferred;
  dialogServiceConnector.listenOnceAsync = patchFunction(dialogServiceConnector.listenOnceAsync.bind(dialogServiceConnector), function (resolve, reject) {
    lastRecognitionDeferred = (0, _pDefer.default)();

    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    return [patchFunction(resolve, null, function (result) {
      lastRecognitionDeferred.resolve(result);
      return result;
    }), patchFunction(reject, null, function (error) {
      lastRecognitionDeferred.reject(error);
      return error;
    })].concat(args);
  }); // TODO: startContinuousRecognitionAsync is not working yet, use listenOnceAsync instead.

  dialogServiceConnector.startContinuousRecognitionAsync = function (resolve, reject) {
    dialogServiceConnector.listenOnceAsync(function () {// We will resolve the Promise in a setTimeout.
    }, function (err) {
      resolve = null;
      reject && reject(err);
    });
    setTimeout(function () {
      reject = null;
      resolve && resolve();
    }, 0);
  }; // TODO: stopContinuousRecognitionAsync is not working yet, so we resolve when the recognition completed.


  dialogServiceConnector.stopContinuousRecognitionAsync = function (resolve) {
    // web-speech-cognitive-services always operate in continuous mode for compatibility reason.
    // When in non-continuous mode, this function will be called after the first recognition.
    // console.groupCollapsed('stopContinuousRecognitionAsync');
    // console.log(dialogServiceConnector);
    // console.groupEnd();
    resolve && lastRecognitionDeferred && lastRecognitionDeferred.promise.then(resolve, resolve);
  };

  return dialogServiceConnector;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXRjaERpYWxvZ1NlcnZpY2VDb25uZWN0b3JJbmxpbmUuanMiXSwibmFtZXMiOlsicGF0Y2hGdW5jdGlvbiIsImZuIiwicHJlIiwicG9zdCIsImFyZ3MiLCJyZXN1bHQiLCJwYXRjaERpYWxvZ1NlcnZpY2VDb25uZWN0b3JJbmxpbmUiLCJkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yIiwibGFzdFJlY29nbml0aW9uRGVmZXJyZWQiLCJsaXN0ZW5PbmNlQXN5bmMiLCJiaW5kIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yIiwic3RhcnRDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyIsImVyciIsInNldFRpbWVvdXQiLCJzdG9wQ29udGludW91c1JlY29nbml0aW9uQXN5bmMiLCJwcm9taXNlIiwidGhlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBLFNBQVNBLGFBQVQsQ0FBdUJDLEVBQXZCLEVBQTJCQyxHQUEzQixFQUFnQ0MsSUFBaEMsRUFBc0M7QUFDcEMsU0FBTyxZQUFhO0FBQUEsc0NBQVRDLElBQVM7QUFBVEEsTUFBQUEsSUFBUztBQUFBOztBQUNsQkEsSUFBQUEsSUFBSSxHQUFHRixHQUFHLEdBQUdBLEdBQUcsTUFBSCwwQ0FBT0UsSUFBUCxFQUFILEdBQWtCQSxJQUE1QjtBQUVBLFFBQU1DLE1BQU0sR0FBR0osRUFBRSxNQUFGLDBDQUFNRyxJQUFOLEVBQWY7QUFFQSxXQUFPRCxJQUFJLEdBQUdBLElBQUksQ0FBQ0UsTUFBRCxDQUFQLEdBQWtCQSxNQUE3QjtBQUNELEdBTkQ7QUFPRDs7QUFFYyxTQUFTQyxpQ0FBVCxDQUEyQ0Msc0JBQTNDLEVBQW1FO0FBQ2hGO0FBQ0E7QUFFQSxNQUFJQyx1QkFBSjtBQUVBRCxFQUFBQSxzQkFBc0IsQ0FBQ0UsZUFBdkIsR0FBeUNULGFBQWEsQ0FDcERPLHNCQUFzQixDQUFDRSxlQUF2QixDQUF1Q0MsSUFBdkMsQ0FBNENILHNCQUE1QyxDQURvRCxFQUVwRCxVQUFDSSxPQUFELEVBQVVDLE1BQVYsRUFBOEI7QUFDNUJKLElBQUFBLHVCQUF1QixHQUFHLHNCQUExQjs7QUFENEIsdUNBQVRKLElBQVM7QUFBVEEsTUFBQUEsSUFBUztBQUFBOztBQUc1QixZQUNFSixhQUFhLENBQUNXLE9BQUQsRUFBVSxJQUFWLEVBQWdCLFVBQUFOLE1BQU0sRUFBSTtBQUNyQ0csTUFBQUEsdUJBQXVCLENBQUNHLE9BQXhCLENBQWdDTixNQUFoQztBQUVBLGFBQU9BLE1BQVA7QUFDRCxLQUpZLENBRGYsRUFNRUwsYUFBYSxDQUFDWSxNQUFELEVBQVMsSUFBVCxFQUFlLFVBQUFDLEtBQUssRUFBSTtBQUNuQ0wsTUFBQUEsdUJBQXVCLENBQUNJLE1BQXhCLENBQStCQyxLQUEvQjtBQUVBLGFBQU9BLEtBQVA7QUFDRCxLQUpZLENBTmYsU0FXS1QsSUFYTDtBQWFELEdBbEJtRCxDQUF0RCxDQU5nRixDQTJCaEY7O0FBQ0FHLEVBQUFBLHNCQUFzQixDQUFDTywrQkFBdkIsR0FBeUQsVUFBQ0gsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQzVFTCxJQUFBQSxzQkFBc0IsQ0FBQ0UsZUFBdkIsQ0FDRSxZQUFNLENBQ0o7QUFDRCxLQUhILEVBSUUsVUFBQU0sR0FBRyxFQUFJO0FBQ0xKLE1BQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0FDLE1BQUFBLE1BQU0sSUFBSUEsTUFBTSxDQUFDRyxHQUFELENBQWhCO0FBQ0QsS0FQSDtBQVVBQyxJQUFBQSxVQUFVLENBQUMsWUFBTTtBQUNmSixNQUFBQSxNQUFNLEdBQUcsSUFBVDtBQUNBRCxNQUFBQSxPQUFPLElBQUlBLE9BQU8sRUFBbEI7QUFDRCxLQUhTLEVBR1AsQ0FITyxDQUFWO0FBSUQsR0FmRCxDQTVCZ0YsQ0E2Q2hGOzs7QUFDQUosRUFBQUEsc0JBQXNCLENBQUNVLDhCQUF2QixHQUF3RCxVQUFBTixPQUFPLEVBQUk7QUFDakU7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBQSxJQUFBQSxPQUFPLElBQUlILHVCQUFYLElBQXNDQSx1QkFBdUIsQ0FBQ1UsT0FBeEIsQ0FBZ0NDLElBQWhDLENBQXFDUixPQUFyQyxFQUE4Q0EsT0FBOUMsQ0FBdEM7QUFDRCxHQVREOztBQVdBLFNBQU9KLHNCQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlRGVmZXJyZWQgZnJvbSAncC1kZWZlcic7XHJcblxyXG4vLyBQYXRjaGluZyBhIGZ1bmN0aW9uIHRvIGFkZCBwcmUtcHJvY2Vzc2luZyBvZiBhcmd1bWVudHMgYW5kIHBvc3QtcHJvY2Vzc2luZyBvZiByZXN1bHQuXHJcbmZ1bmN0aW9uIHBhdGNoRnVuY3Rpb24oZm4sIHByZSwgcG9zdCkge1xyXG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xyXG4gICAgYXJncyA9IHByZSA/IHByZSguLi5hcmdzKSA6IGFyZ3M7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gZm4oLi4uYXJncyk7XHJcblxyXG4gICAgcmV0dXJuIHBvc3QgPyBwb3N0KHJlc3VsdCkgOiByZXN1bHQ7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGF0Y2hEaWFsb2dTZXJ2aWNlQ29ubmVjdG9ySW5saW5lKGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IpIHtcclxuICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgcGF0Y2ggRGlhbG9nU2VydmljZUNvbm5lY3RvciBieSBtb2RpZnlpbmcgdGhlIG9iamVjdC5cclxuICAvLyBUaGUgcGF0Y2hlcyBhcmUgaW50ZW5kZWQgdG8gZmlsbC1pbiBmZWF0dXJlcyB0byBtYWtlIERpYWxvZ1NlcnZpY2VDb25uZWN0b3Igb2JqZWN0IHdvcmtzIGxpa2UgdGhlIGZ1bGwtZmxlZGdlZCBSZWNvZ25pemVyIG9iamVjdC5cclxuXHJcbiAgbGV0IGxhc3RSZWNvZ25pdGlvbkRlZmVycmVkO1xyXG5cclxuICBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLmxpc3Rlbk9uY2VBc3luYyA9IHBhdGNoRnVuY3Rpb24oXHJcbiAgICBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLmxpc3Rlbk9uY2VBc3luYy5iaW5kKGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IpLFxyXG4gICAgKHJlc29sdmUsIHJlamVjdCwgLi4uYXJncykgPT4ge1xyXG4gICAgICBsYXN0UmVjb2duaXRpb25EZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XHJcblxyXG4gICAgICByZXR1cm4gW1xyXG4gICAgICAgIHBhdGNoRnVuY3Rpb24ocmVzb2x2ZSwgbnVsbCwgcmVzdWx0ID0+IHtcclxuICAgICAgICAgIGxhc3RSZWNvZ25pdGlvbkRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIHBhdGNoRnVuY3Rpb24ocmVqZWN0LCBudWxsLCBlcnJvciA9PiB7XHJcbiAgICAgICAgICBsYXN0UmVjb2duaXRpb25EZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xyXG5cclxuICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICB9KSxcclxuICAgICAgICAuLi5hcmdzXHJcbiAgICAgIF07XHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgLy8gVE9ETzogc3RhcnRDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyBpcyBub3Qgd29ya2luZyB5ZXQsIHVzZSBsaXN0ZW5PbmNlQXN5bmMgaW5zdGVhZC5cclxuICBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLnN0YXJ0Q29udGludW91c1JlY29nbml0aW9uQXN5bmMgPSAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLmxpc3Rlbk9uY2VBc3luYyhcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIC8vIFdlIHdpbGwgcmVzb2x2ZSB0aGUgUHJvbWlzZSBpbiBhIHNldFRpbWVvdXQuXHJcbiAgICAgIH0sXHJcbiAgICAgIGVyciA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZSA9IG51bGw7XHJcbiAgICAgICAgcmVqZWN0ICYmIHJlamVjdChlcnIpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICByZWplY3QgPSBudWxsO1xyXG4gICAgICByZXNvbHZlICYmIHJlc29sdmUoKTtcclxuICAgIH0sIDApO1xyXG4gIH07XHJcblxyXG4gIC8vIFRPRE86IHN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyBpcyBub3Qgd29ya2luZyB5ZXQsIHNvIHdlIHJlc29sdmUgd2hlbiB0aGUgcmVjb2duaXRpb24gY29tcGxldGVkLlxyXG4gIGRpYWxvZ1NlcnZpY2VDb25uZWN0b3Iuc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jID0gcmVzb2x2ZSA9PiB7XHJcbiAgICAvLyB3ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcyBhbHdheXMgb3BlcmF0ZSBpbiBjb250aW51b3VzIG1vZGUgZm9yIGNvbXBhdGliaWxpdHkgcmVhc29uLlxyXG4gICAgLy8gV2hlbiBpbiBub24tY29udGludW91cyBtb2RlLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIHRoZSBmaXJzdCByZWNvZ25pdGlvbi5cclxuXHJcbiAgICAvLyBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKCdzdG9wQ29udGludW91c1JlY29nbml0aW9uQXN5bmMnKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IpO1xyXG4gICAgLy8gY29uc29sZS5ncm91cEVuZCgpO1xyXG5cclxuICAgIHJlc29sdmUgJiYgbGFzdFJlY29nbml0aW9uRGVmZXJyZWQgJiYgbGFzdFJlY29nbml0aW9uRGVmZXJyZWQucHJvbWlzZS50aGVuKHJlc29sdmUsIHJlc29sdmUpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yO1xyXG59XHJcbiJdfQ==

/***/ }),

/***/ "./lib/playCognitiveServicesStream.js":
/*!********************************************!*\
  !*** ./lib/playCognitiveServicesStream.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = playCognitiveServicesStream;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _cognitiveServicesPromiseToESPromise = _interopRequireDefault(__webpack_require__(/*! ./cognitiveServicesPromiseToESPromise */ "./lib/cognitiveServicesPromiseToESPromise.js"));

var _pDefer = _interopRequireDefault(__webpack_require__(/*! p-defer */ "./node_modules/p-defer/index.js"));

/* eslint no-magic-numbers: ["error", { "ignore": [8, 16, 32, 128, 1000, 32768, 2147483648] }] */

/* eslint no-await-in-loop: "off" */

/* eslint prefer-destructuring: "off" */
function createBufferSource(audioContext, _ref, channelInterleavedAudioData) {
  var channels = _ref.channels,
      samplesPerSec = _ref.samplesPerSec;
  var bufferSource = audioContext.createBufferSource();
  var frames = channelInterleavedAudioData.length / channels;
  var audioBuffer = audioContext.createBuffer(channels, frames, samplesPerSec);

  for (var channel = 0; channel < channels; channel++) {
    var perChannelAudioData = audioBuffer.getChannelData(channel); // We are copying channel-interleaved audio data, into per-channel audio data

    for (var perChannelIndex = 0; perChannelIndex < channelInterleavedAudioData.length; perChannelIndex++) {
      perChannelAudioData[perChannelIndex] = channelInterleavedAudioData[perChannelIndex * channels + channel];
    }
  }

  bufferSource.buffer = audioBuffer;
  return bufferSource;
}

function formatTypedBitArrayToFloatArray(audioData, maxValue) {
  var float32Data = new Float32Array(audioData.length);

  for (var i = 0; i < audioData.length; i++) {
    float32Data[i] = audioData[i] / maxValue;
  }

  return float32Data;
}

function formatAudioDataArrayBufferToFloatArray(_ref2, arrayBuffer) {
  var bitsPerSample = _ref2.bitsPerSample;

  switch (bitsPerSample) {
    case 8:
      return formatTypedBitArrayToFloatArray(new Int8Array(arrayBuffer), 128);

    case 16:
      return formatTypedBitArrayToFloatArray(new Int16Array(arrayBuffer), 32768);

    case 32:
      return formatTypedBitArrayToFloatArray(new Int32Array(arrayBuffer), 2147483648);

    default:
      throw new Error('Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time');
  }
}

function abortToReject(signal) {
  return new Promise(function (_, reject) {
    signal.onabort = function () {
      return reject(new Error('aborted'));
    };
  });
}

function playCognitiveServicesStream(_x, _x2, _x3) {
  return _playCognitiveServicesStream.apply(this, arguments);
}

function _playCognitiveServicesStream() {
  _playCognitiveServicesStream = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(audioContext, audioFormat, streamReader) {
    var _ref3,
        _ref3$signal,
        signal,
        queuedBufferSourceNodes,
        abortPromise,
        lastBufferSource,
        read,
        chunk,
        currentTime,
        maxChunks,
        audioData,
        bufferSource,
        duration,
        _createDeferred,
        promise,
        resolve,
        _args = arguments;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref3 = _args.length > 3 && _args[3] !== undefined ? _args[3] : {}, _ref3$signal = _ref3.signal, signal = _ref3$signal === void 0 ? {} : _ref3$signal;
            queuedBufferSourceNodes = [];
            _context.prev = 2;
            abortPromise = abortToReject(signal);

            read = function read() {
              return Promise.race([// Abort will gracefully end the queue, we will check signal.aborted later to throw abort exception.
              abortPromise.catch(function () {
                return {
                  isEnd: true
                };
              }), (0, _cognitiveServicesPromiseToESPromise.default)(streamReader.read())]);
            };

            if (!signal.aborted) {
              _context.next = 7;
              break;
            }

            throw new Error('aborted');

          case 7:
            _context.next = 9;
            return read();

          case 9:
            chunk = _context.sent;
            maxChunks = 0;

          case 11:
            if (!(!chunk.isEnd && maxChunks < 1000 && !signal.aborted)) {
              _context.next = 29;
              break;
            }

            if (!signal.aborted) {
              _context.next = 14;
              break;
            }

            return _context.abrupt("break", 29);

          case 14:
            audioData = formatAudioDataArrayBufferToFloatArray(audioFormat, chunk.buffer);
            bufferSource = createBufferSource(audioContext, audioFormat, audioData);
            duration = bufferSource.buffer.duration;

            if (!currentTime) {
              currentTime = audioContext.currentTime;
            }

            bufferSource.connect(audioContext.destination);
            bufferSource.start(currentTime);
            queuedBufferSourceNodes.push(bufferSource);
            lastBufferSource = bufferSource;
            currentTime += duration;

          case 23:
            _context.next = 25;
            return read();

          case 25:
            chunk = _context.sent;
            maxChunks++;
            _context.next = 11;
            break;

          case 29:
            if (!signal.aborted) {
              _context.next = 31;
              break;
            }

            throw new Error('aborted');

          case 31:
            if (!lastBufferSource) {
              _context.next = 36;
              break;
            }

            _createDeferred = (0, _pDefer.default)(), promise = _createDeferred.promise, resolve = _createDeferred.resolve;
            lastBufferSource.onended = resolve;
            _context.next = 36;
            return Promise.race([abortPromise, promise]);

          case 36:
            _context.prev = 36;
            queuedBufferSourceNodes.forEach(function (node) {
              return node.stop();
            });
            return _context.finish(36);

          case 39:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2,, 36, 39]]);
  }));
  return _playCognitiveServicesStream.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./lib/playWhiteNoise.js":
/*!*******************************!*\
  !*** ./lib/playWhiteNoise.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = playWhiteNoise;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _base64Arraybuffer = __webpack_require__(/*! base64-arraybuffer */ "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js");

var _eventAsPromise = _interopRequireDefault(__webpack_require__(/*! event-as-promise */ "./node_modules/event-as-promise/lib/index.js"));

var EMPTY_MP3_BASE64 = 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';

function subscribeEvent(target, name, handler) {
  target.addEventListener(name, handler);
  return function () {
    return target.removeEventListener(name, handler);
  };
}

function asyncDecodeAudioData(audioContext, arrayBuffer) {
  return new Promise(function (resolve, reject) {
    var promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject); // Newer implementation of "decodeAudioData" will return a Promise

    promise && typeof promise.then === 'function' && resolve(promise);
  });
}

function playDecoded(audioContext, audioBuffer, source) {
  return new Promise(function (resolve, reject) {
    var audioContextClosed = new _eventAsPromise.default();
    var sourceEnded = new _eventAsPromise.default();
    var unsubscribe = subscribeEvent(audioContext, 'statechange', function (_ref) {
      var state = _ref.target.state;
      return state === 'closed' && audioContextClosed.eventListener();
    });

    try {
      source.buffer = audioBuffer; // "ended" may not fire if the underlying AudioContext is closed prematurely

      source.onended = sourceEnded.eventListener;
      source.connect(audioContext.destination);
      source.start(0);
      Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]).then(resolve);
    } catch (err) {
      reject(err);
    } finally {
      unsubscribe();
    }
  });
}

function playWhiteNoise(_x) {
  return _playWhiteNoise.apply(this, arguments);
}

function _playWhiteNoise() {
  _playWhiteNoise = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(audioContext) {
    var source, audioBuffer;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            source = audioContext.createBufferSource();
            _context.next = 3;
            return asyncDecodeAudioData(audioContext, (0, _base64Arraybuffer.decode)(EMPTY_MP3_BASE64));

          case 3:
            audioBuffer = _context.sent;
            _context.next = 6;
            return playDecoded(audioContext, audioBuffer, source);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _playWhiteNoise.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wbGF5V2hpdGVOb2lzZS5qcyJdLCJuYW1lcyI6WyJFTVBUWV9NUDNfQkFTRTY0Iiwic3Vic2NyaWJlRXZlbnQiLCJ0YXJnZXQiLCJuYW1lIiwiaGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYXN5bmNEZWNvZGVBdWRpb0RhdGEiLCJhdWRpb0NvbnRleHQiLCJhcnJheUJ1ZmZlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsImRlY29kZUF1ZGlvRGF0YSIsInRoZW4iLCJwbGF5RGVjb2RlZCIsImF1ZGlvQnVmZmVyIiwic291cmNlIiwiYXVkaW9Db250ZXh0Q2xvc2VkIiwiRXZlbnRBc1Byb21pc2UiLCJzb3VyY2VFbmRlZCIsInVuc3Vic2NyaWJlIiwic3RhdGUiLCJldmVudExpc3RlbmVyIiwiYnVmZmVyIiwib25lbmRlZCIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsInN0YXJ0IiwicmFjZSIsInVwY29taW5nIiwiZXJyIiwicGxheVdoaXRlTm9pc2UiLCJjcmVhdGVCdWZmZXJTb3VyY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxJQUFNQSxnQkFBZ0IsR0FDcEIsc2tCQURGOztBQUdBLFNBQVNDLGNBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDQyxJQUFoQyxFQUFzQ0MsT0FBdEMsRUFBK0M7QUFDN0NGLEVBQUFBLE1BQU0sQ0FBQ0csZ0JBQVAsQ0FBd0JGLElBQXhCLEVBQThCQyxPQUE5QjtBQUVBLFNBQU87QUFBQSxXQUFNRixNQUFNLENBQUNJLG1CQUFQLENBQTJCSCxJQUEzQixFQUFpQ0MsT0FBakMsQ0FBTjtBQUFBLEdBQVA7QUFDRDs7QUFFRCxTQUFTRyxvQkFBVCxDQUE4QkMsWUFBOUIsRUFBNENDLFdBQTVDLEVBQXlEO0FBQ3ZELFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFNQyxPQUFPLEdBQUdMLFlBQVksQ0FBQ00sZUFBYixDQUE2QkwsV0FBN0IsRUFBMENFLE9BQTFDLEVBQW1EQyxNQUFuRCxDQUFoQixDQURzQyxDQUd0Qzs7QUFDQUMsSUFBQUEsT0FBTyxJQUFJLE9BQU9BLE9BQU8sQ0FBQ0UsSUFBZixLQUF3QixVQUFuQyxJQUFpREosT0FBTyxDQUFDRSxPQUFELENBQXhEO0FBQ0QsR0FMTSxDQUFQO0FBTUQ7O0FBRUQsU0FBU0csV0FBVCxDQUFxQlIsWUFBckIsRUFBbUNTLFdBQW5DLEVBQWdEQyxNQUFoRCxFQUF3RDtBQUN0RCxTQUFPLElBQUlSLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdEMsUUFBTU8sa0JBQWtCLEdBQUcsSUFBSUMsdUJBQUosRUFBM0I7QUFDQSxRQUFNQyxXQUFXLEdBQUcsSUFBSUQsdUJBQUosRUFBcEI7QUFDQSxRQUFNRSxXQUFXLEdBQUdyQixjQUFjLENBQ2hDTyxZQURnQyxFQUVoQyxhQUZnQyxFQUdoQztBQUFBLFVBQWFlLEtBQWIsUUFBR3JCLE1BQUgsQ0FBYXFCLEtBQWI7QUFBQSxhQUEyQkEsS0FBSyxLQUFLLFFBQVYsSUFBc0JKLGtCQUFrQixDQUFDSyxhQUFuQixFQUFqRDtBQUFBLEtBSGdDLENBQWxDOztBQU1BLFFBQUk7QUFDRk4sTUFBQUEsTUFBTSxDQUFDTyxNQUFQLEdBQWdCUixXQUFoQixDQURFLENBRUY7O0FBQ0FDLE1BQUFBLE1BQU0sQ0FBQ1EsT0FBUCxHQUFpQkwsV0FBVyxDQUFDRyxhQUE3QjtBQUVBTixNQUFBQSxNQUFNLENBQUNTLE9BQVAsQ0FBZW5CLFlBQVksQ0FBQ29CLFdBQTVCO0FBQ0FWLE1BQUFBLE1BQU0sQ0FBQ1csS0FBUCxDQUFhLENBQWI7QUFFQW5CLE1BQUFBLE9BQU8sQ0FBQ29CLElBQVIsQ0FBYSxDQUFDWCxrQkFBa0IsQ0FBQ1ksUUFBbkIsRUFBRCxFQUFnQ1YsV0FBVyxDQUFDVSxRQUFaLEVBQWhDLENBQWIsRUFBc0VoQixJQUF0RSxDQUEyRUosT0FBM0U7QUFDRCxLQVRELENBU0UsT0FBT3FCLEdBQVAsRUFBWTtBQUNacEIsTUFBQUEsTUFBTSxDQUFDb0IsR0FBRCxDQUFOO0FBQ0QsS0FYRCxTQVdVO0FBQ1JWLE1BQUFBLFdBQVc7QUFDWjtBQUNGLEdBdkJNLENBQVA7QUF3QkQ7O1NBRTZCVyxjOzs7Ozs7OzRCQUFmLGlCQUE4QnpCLFlBQTlCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNQVSxZQUFBQSxNQURPLEdBQ0VWLFlBQVksQ0FBQzBCLGtCQUFiLEVBREY7QUFBQTtBQUFBLG1CQUVhM0Isb0JBQW9CLENBQUNDLFlBQUQsRUFBZSwrQkFBT1IsZ0JBQVAsQ0FBZixDQUZqQzs7QUFBQTtBQUVQaUIsWUFBQUEsV0FGTztBQUFBO0FBQUEsbUJBSVBELFdBQVcsQ0FBQ1IsWUFBRCxFQUFlUyxXQUFmLEVBQTRCQyxNQUE1QixDQUpKOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWNvZGUgfSBmcm9tICdiYXNlNjQtYXJyYXlidWZmZXInO1xyXG5pbXBvcnQgRXZlbnRBc1Byb21pc2UgZnJvbSAnZXZlbnQtYXMtcHJvbWlzZSc7XHJcblxyXG5jb25zdCBFTVBUWV9NUDNfQkFTRTY0ID1cclxuICAnU1VRekJBQUFBQUFBSTFSVFUwVUFBQUFQQUFBRFRHRjJaalUzTGpVMkxqRXdNUUFBQUFBQUFBQUFBQUFBLy90QXdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVNXNW1id0FBQUE4QUFBQUNBQUFCaGdDN3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTcvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy84QUFBQUFUR0YyWXpVM0xqWTBBQUFBQUFBQUFBQUFBQUFBSkFVSEFBQUFBQUFBQVlZb1JCcXBBQUFBQUFELyt4REVBQVBBQUFHa0FBQUFJQUFBTklBQUFBUk1RVTFGTXk0NU9TNDFWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWZi83RU1RcGc4QUFBYVFBQUFBZ0FBQTBnQUFBQkZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVic7XHJcblxyXG5mdW5jdGlvbiBzdWJzY3JpYmVFdmVudCh0YXJnZXQsIG5hbWUsIGhhbmRsZXIpIHtcclxuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKTtcclxuXHJcbiAgcmV0dXJuICgpID0+IHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhc3luY0RlY29kZUF1ZGlvRGF0YShhdWRpb0NvbnRleHQsIGFycmF5QnVmZmVyKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IHByb21pc2UgPSBhdWRpb0NvbnRleHQuZGVjb2RlQXVkaW9EYXRhKGFycmF5QnVmZmVyLCByZXNvbHZlLCByZWplY3QpO1xyXG5cclxuICAgIC8vIE5ld2VyIGltcGxlbWVudGF0aW9uIG9mIFwiZGVjb2RlQXVkaW9EYXRhXCIgd2lsbCByZXR1cm4gYSBQcm9taXNlXHJcbiAgICBwcm9taXNlICYmIHR5cGVvZiBwcm9taXNlLnRoZW4gPT09ICdmdW5jdGlvbicgJiYgcmVzb2x2ZShwcm9taXNlKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGxheURlY29kZWQoYXVkaW9Db250ZXh0LCBhdWRpb0J1ZmZlciwgc291cmNlKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IGF1ZGlvQ29udGV4dENsb3NlZCA9IG5ldyBFdmVudEFzUHJvbWlzZSgpO1xyXG4gICAgY29uc3Qgc291cmNlRW5kZWQgPSBuZXcgRXZlbnRBc1Byb21pc2UoKTtcclxuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gc3Vic2NyaWJlRXZlbnQoXHJcbiAgICAgIGF1ZGlvQ29udGV4dCxcclxuICAgICAgJ3N0YXRlY2hhbmdlJyxcclxuICAgICAgKHsgdGFyZ2V0OiB7IHN0YXRlIH0gfSkgPT4gc3RhdGUgPT09ICdjbG9zZWQnICYmIGF1ZGlvQ29udGV4dENsb3NlZC5ldmVudExpc3RlbmVyKClcclxuICAgICk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgc291cmNlLmJ1ZmZlciA9IGF1ZGlvQnVmZmVyO1xyXG4gICAgICAvLyBcImVuZGVkXCIgbWF5IG5vdCBmaXJlIGlmIHRoZSB1bmRlcmx5aW5nIEF1ZGlvQ29udGV4dCBpcyBjbG9zZWQgcHJlbWF0dXJlbHlcclxuICAgICAgc291cmNlLm9uZW5kZWQgPSBzb3VyY2VFbmRlZC5ldmVudExpc3RlbmVyO1xyXG5cclxuICAgICAgc291cmNlLmNvbm5lY3QoYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgc291cmNlLnN0YXJ0KDApO1xyXG5cclxuICAgICAgUHJvbWlzZS5yYWNlKFthdWRpb0NvbnRleHRDbG9zZWQudXBjb21pbmcoKSwgc291cmNlRW5kZWQudXBjb21pbmcoKV0pLnRoZW4ocmVzb2x2ZSk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgcmVqZWN0KGVycik7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICB1bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBwbGF5V2hpdGVOb2lzZShhdWRpb0NvbnRleHQpIHtcclxuICBjb25zdCBzb3VyY2UgPSBhdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCBhc3luY0RlY29kZUF1ZGlvRGF0YShhdWRpb0NvbnRleHQsIGRlY29kZShFTVBUWV9NUDNfQkFTRTY0KSk7XHJcblxyXG4gIGF3YWl0IHBsYXlEZWNvZGVkKGF1ZGlvQ29udGV4dCwgYXVkaW9CdWZmZXIsIHNvdXJjZSk7XHJcbn1cclxuIl19

/***/ }),

/***/ "./lib/shareObservable.js":
/*!********************************!*\
  !*** ./lib/shareObservable.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shareObservable;

/* global Observable */
function shareObservable(observable) {
  var observers = [];
  var subscription;
  return new Observable(function (observer) {
    if (!subscription) {
      subscription = observable.subscribe({
        complete: function complete() {
          observers.forEach(function (observer) {
            return observer.complete();
          });
        },
        error: function error(err) {
          observers.forEach(function (observer) {
            return observer.error(err);
          });
        },
        next: function next(value) {
          observers.forEach(function (observer) {
            return observer.next(value);
          });
        }
      });
    }

    observers.push(observer);
    return function () {
      observers = observers.filter(function (o) {
        return o !== observer;
      });

      if (!observers.length) {
        subscription.unsubscribe();
        subscription = null;
      }
    };
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zaGFyZU9ic2VydmFibGUuanMiXSwibmFtZXMiOlsic2hhcmVPYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsIm9ic2VydmVycyIsInN1YnNjcmlwdGlvbiIsIk9ic2VydmFibGUiLCJvYnNlcnZlciIsInN1YnNjcmliZSIsImNvbXBsZXRlIiwiZm9yRWFjaCIsImVycm9yIiwiZXJyIiwibmV4dCIsInZhbHVlIiwicHVzaCIsImZpbHRlciIsIm8iLCJsZW5ndGgiLCJ1bnN1YnNjcmliZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBRWUsU0FBU0EsZUFBVCxDQUF5QkMsVUFBekIsRUFBcUM7QUFDbEQsTUFBSUMsU0FBUyxHQUFHLEVBQWhCO0FBQ0EsTUFBSUMsWUFBSjtBQUVBLFNBQU8sSUFBSUMsVUFBSixDQUFlLFVBQUFDLFFBQVEsRUFBSTtBQUNoQyxRQUFJLENBQUNGLFlBQUwsRUFBbUI7QUFDakJBLE1BQUFBLFlBQVksR0FBR0YsVUFBVSxDQUFDSyxTQUFYLENBQXFCO0FBQ2xDQyxRQUFBQSxRQURrQyxzQkFDdkI7QUFDVEwsVUFBQUEsU0FBUyxDQUFDTSxPQUFWLENBQWtCLFVBQUFILFFBQVE7QUFBQSxtQkFBSUEsUUFBUSxDQUFDRSxRQUFULEVBQUo7QUFBQSxXQUExQjtBQUNELFNBSGlDO0FBS2xDRSxRQUFBQSxLQUxrQyxpQkFLNUJDLEdBTDRCLEVBS3ZCO0FBQ1RSLFVBQUFBLFNBQVMsQ0FBQ00sT0FBVixDQUFrQixVQUFBSCxRQUFRO0FBQUEsbUJBQUlBLFFBQVEsQ0FBQ0ksS0FBVCxDQUFlQyxHQUFmLENBQUo7QUFBQSxXQUExQjtBQUNELFNBUGlDO0FBU2xDQyxRQUFBQSxJQVRrQyxnQkFTN0JDLEtBVDZCLEVBU3RCO0FBQ1ZWLFVBQUFBLFNBQVMsQ0FBQ00sT0FBVixDQUFrQixVQUFBSCxRQUFRO0FBQUEsbUJBQUlBLFFBQVEsQ0FBQ00sSUFBVCxDQUFjQyxLQUFkLENBQUo7QUFBQSxXQUExQjtBQUNEO0FBWGlDLE9BQXJCLENBQWY7QUFhRDs7QUFFRFYsSUFBQUEsU0FBUyxDQUFDVyxJQUFWLENBQWVSLFFBQWY7QUFFQSxXQUFPLFlBQU07QUFDWEgsTUFBQUEsU0FBUyxHQUFHQSxTQUFTLENBQUNZLE1BQVYsQ0FBaUIsVUFBQUMsQ0FBQztBQUFBLGVBQUlBLENBQUMsS0FBS1YsUUFBVjtBQUFBLE9BQWxCLENBQVo7O0FBRUEsVUFBSSxDQUFDSCxTQUFTLENBQUNjLE1BQWYsRUFBdUI7QUFDckJiLFFBQUFBLFlBQVksQ0FBQ2MsV0FBYjtBQUNBZCxRQUFBQSxZQUFZLEdBQUcsSUFBZjtBQUNEO0FBQ0YsS0FQRDtBQVFELEdBM0JNLENBQVA7QUE0QkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgT2JzZXJ2YWJsZSAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhcmVPYnNlcnZhYmxlKG9ic2VydmFibGUpIHtcclxuICBsZXQgb2JzZXJ2ZXJzID0gW107XHJcbiAgbGV0IHN1YnNjcmlwdGlvbjtcclxuXHJcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcclxuICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHN1YnNjcmlwdGlvbiA9IG9ic2VydmFibGUuc3Vic2NyaWJlKHtcclxuICAgICAgICBjb21wbGV0ZSgpIHtcclxuICAgICAgICAgIG9ic2VydmVycy5mb3JFYWNoKG9ic2VydmVyID0+IG9ic2VydmVyLmNvbXBsZXRlKCkpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGVycm9yKGVycikge1xyXG4gICAgICAgICAgb2JzZXJ2ZXJzLmZvckVhY2gob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIuZXJyb3IoZXJyKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbmV4dCh2YWx1ZSkge1xyXG4gICAgICAgICAgb2JzZXJ2ZXJzLmZvckVhY2gob2JzZXJ2ZXIgPT4gb2JzZXJ2ZXIubmV4dCh2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIG9ic2VydmVycyA9IG9ic2VydmVycy5maWx0ZXIobyA9PiBvICE9PSBvYnNlcnZlcik7XHJcblxyXG4gICAgICBpZiAoIW9ic2VydmVycy5sZW5ndGgpIHtcclxuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICBzdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0pO1xyXG59XHJcbiJdfQ==

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

module.exports = _arrayWithoutHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inherits.js":
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};

  if (obj != null) {
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

module.exports = _nonIterableSpread;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/objectWithoutProperties.js":
/*!************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/objectWithoutProperties.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var objectWithoutPropertiesLoose = __webpack_require__(/*! ./objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

module.exports = _objectWithoutProperties;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

module.exports = _objectWithoutPropertiesLoose;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

var assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");

var iterableToArray = __webpack_require__(/*! ./iterableToArray */ "./node_modules/@babel/runtime/helpers/iterableToArray.js");

var nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/abort-controller/browser.js":
/*!**************************************************!*\
  !*** ./node_modules/abort-controller/browser.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*globals self, window */


/*eslint-disable @mysticatea/prettier */
const { AbortController, AbortSignal } =
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window :
    /* otherwise */ undefined
/*eslint-enable @mysticatea/prettier */

module.exports = AbortController
module.exports.AbortSignal = AbortSignal
module.exports.default = AbortController


/***/ }),

/***/ "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/core-js/features/observable/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/features/observable/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/esnext.observable */ "./node_modules/core-js/modules/esnext.observable.js");
__webpack_require__(/*! ../../modules/esnext.symbol.observable */ "./node_modules/core-js/modules/esnext.symbol.observable.js");
__webpack_require__(/*! ../../modules/es.object.to-string */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! ../../modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! ../../modules/web.dom-collections.iterator */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
var path = __webpack_require__(/*! ../../internals/path */ "./node_modules/core-js/internals/path.js");

module.exports = path.Observable;


/***/ }),

/***/ "./node_modules/core-js/internals/a-function.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/a-function.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/a-possible-prototype.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/a-possible-prototype.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/add-to-unscopables.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/add-to-unscopables.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  hide(ArrayPrototype, UNSCOPABLES, create(null));
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-instance.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/an-instance.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name) {
  if (!(it instanceof Constructor)) {
    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/an-object.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-includes.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "./node_modules/core-js/internals/bind-context.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/bind-context.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (error) {
    var returnMethod = iterator['return'];
    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
    throw error;
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof-raw.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/classof.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/copy-constructor-properties.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/correct-prototype-getter.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "./node_modules/core-js/internals/create-iterator-constructor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IteratorPrototype = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js").IteratorPrototype;
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property-descriptor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-iterator.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var IteratorsCore = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js");

var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          hide(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    hide(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-well-known-symbol.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/define-well-known-symbol.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__(/*! ../internals/path */ "./node_modules/core-js/internals/path.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/wrapped-well-known-symbol */ "./node_modules/core-js/internals/wrapped-well-known-symbol.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/descriptors.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// Thank's IE8 for his funny defineProperty
module.exports = !fails(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/document-create-element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/internals/dom-iterables.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/dom-iterables.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),

/***/ "./node_modules/core-js/internals/enum-bug-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "./node_modules/core-js/internals/export.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/export.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      hide(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/fails.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/internals/fails.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/function-to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");

module.exports = shared('native-function-to-string', Function.toString);


/***/ }),

/***/ "./node_modules/core-js/internals/get-built-in.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-built-in.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__(/*! ../internals/path */ "./node_modules/core-js/internals/path.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-iterator-method.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator-method.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-iterator.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");

module.exports = function (it) {
  var iteratorMethod = getIteratorMethod(it);
  if (typeof iteratorMethod != 'function') {
    throw TypeError(String(it) + ' is not iterable');
  } return anObject(iteratorMethod.call(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/global.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/global.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var O = 'object';
var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == O && globalThis) ||
  check(typeof window == O && window) ||
  check(typeof self == O && self) ||
  check(typeof global == O && global) ||
  // eslint-disable-next-line no-new-func
  Function('return this')();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/core-js/internals/has.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/has.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/internals/hidden-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/hide.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/hide.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/internals/host-report-errors.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/host-report-errors.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/html.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/html.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "./node_modules/core-js/internals/ie8-dom-define.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/indexed-object.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;


/***/ }),

/***/ "./node_modules/core-js/internals/internal-state.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var objectHas = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = new WeakMap();
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    hide(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-array-iterator-method.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-forced.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "./node_modules/core-js/internals/is-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-object.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-pure.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/is-pure.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/internals/iterate.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/iterate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var bind = __webpack_require__(/*! ../internals/bind-context */ "./node_modules/core-js/internals/bind-context.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");
var callWithSafeIterationClosing = __webpack_require__(/*! ../internals/call-with-safe-iteration-closing */ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js");

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
  var iterator, iterFn, index, length, result, step;

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = toLength(iterable.length); length > index; index++) {
        result = AS_ENTRIES
          ? boundFunction(anObject(step = iterable[index])[0], step[1])
          : boundFunction(iterable[index]);
        if (result && result instanceof Result) return result;
      } return new Result(false);
    }
    iterator = iterFn.call(iterable);
  }

  while (!(step = iterator.next()).done) {
    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
    if (result && result instanceof Result) return result;
  } return new Result(false);
};

iterate.stop = function (result) {
  return new Result(true, result);
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators-core.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterators-core.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/iterators.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/native-symbol.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/native-symbol.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});


/***/ }),

/***/ "./node_modules/core-js/internals/native-weak-map.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/native-weak-map.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var nativeFunctionToString = __webpack_require__(/*! ../internals/function-to-string */ "./node_modules/core-js/internals/function-to-string.js");

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(nativeFunctionToString.call(WeakMap));


/***/ }),

/***/ "./node_modules/core-js/internals/object-create.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-create.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var defineProperties = __webpack_require__(/*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var IE_PROTO = sharedKey('IE_PROTO');

var PROTOTYPE = 'prototype';
var Empty = function () { /* empty */ };

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var length = enumBugKeys.length;
  var lt = '<';
  var script = 'script';
  var gt = '>';
  var js = 'java' + script + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  iframe.src = String(js);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
  return createDict();
};

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : defineProperties(result, Properties);
};

hiddenKeys[IE_PROTO] = true;


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-properties.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-properties.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");

var nativeDefineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "./node_modules/core-js/internals/correct-prototype-getter.js");

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys-internal.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var indexOf = __webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js").indexOf;
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/internals/object-set-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var aPossiblePrototype = __webpack_require__(/*! ../internals/a-possible-prototype */ "./node_modules/core-js/internals/a-possible-prototype.js");

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "./node_modules/core-js/internals/object-to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/object-to-string.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

// `Object.prototype.toString` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
module.exports = String(test) !== '[object z]' ? function toString() {
  return '[object ' + classof(this) + ']';
} : test.toString;


/***/ }),

/***/ "./node_modules/core-js/internals/own-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/own-keys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "./node_modules/core-js/internals/path.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/path.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");


/***/ }),

/***/ "./node_modules/core-js/internals/redefine-all.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/redefine-all.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};


/***/ }),

/***/ "./node_modules/core-js/internals/redefine.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/redefine.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var nativeFunctionToString = __webpack_require__(/*! ../internals/function-to-string */ "./node_modules/core-js/internals/function-to-string.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(nativeFunctionToString).split('toString');

shared('inspectSource', function (it) {
  return nativeFunctionToString.call(it);
});

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);
    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else hide(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);
});


/***/ }),

/***/ "./node_modules/core-js/internals/require-object-coercible.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-global.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/set-global.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");

module.exports = function (key, value) {
  try {
    hide(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-species.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/set-species.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-to-string-tag.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-key.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/shared-key.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/shared.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.2.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/core-js/internals/string-multibyte.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/string-multibyte.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-absolute-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-indexed-object.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-integer.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/to-integer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-length.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-length.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-object.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-primitive.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

// `ToPrimitive` abstract operation
// https://tc39.github.io/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/internals/uid.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/uid.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};


/***/ }),

/***/ "./node_modules/core-js/internals/well-known-symbol.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");

var Symbol = global.Symbol;
var store = shared('wks');

module.exports = function (name) {
  return store[name] || (store[name] = NATIVE_SYMBOL && Symbol[name]
    || (NATIVE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};


/***/ }),

/***/ "./node_modules/core-js/internals/wrapped-well-known-symbol.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/wrapped-well-known-symbol.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.iterator.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.to-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var toString = __webpack_require__(/*! ../internals/object-to-string */ "./node_modules/core-js/internals/object-to-string.js");

var ObjectPrototype = Object.prototype;

// `Object.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
if (toString !== ObjectPrototype.toString) {
  redefine(ObjectPrototype, 'toString', toString, { unsafe: true });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__(/*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js").charAt;
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/core-js/modules/esnext.observable.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/esnext.observable.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-observable
var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var redefineAll = __webpack_require__(/*! ../internals/redefine-all */ "./node_modules/core-js/internals/redefine-all.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "./node_modules/core-js/internals/get-iterator.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var hostReportErrors = __webpack_require__(/*! ../internals/host-report-errors */ "./node_modules/core-js/internals/host-report-errors.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

var OBSERVABLE = wellKnownSymbol('observable');
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscriptionState) {
  var cleanup = subscriptionState.cleanup;
  if (cleanup) {
    subscriptionState.cleanup = undefined;
    try {
      cleanup();
    } catch (error) {
      hostReportErrors(error);
    }
  }
};

var subscriptionClosed = function (subscriptionState) {
  return subscriptionState.observer === undefined;
};

var close = function (subscription, subscriptionState) {
  if (!DESCRIPTORS) {
    subscription.closed = true;
    var subscriptionObserver = subscriptionState.subscriptionObserver;
    if (subscriptionObserver) subscriptionObserver.closed = true;
  } subscriptionState.observer = undefined;
};

var Subscription = function (observer, subscriber) {
  var subscriptionState = setInternalState(this, {
    cleanup: undefined,
    observer: anObject(observer),
    subscriptionObserver: undefined
  });
  var start;
  if (!DESCRIPTORS) this.closed = false;
  try {
    if (start = getMethod(observer.start)) start.call(observer, this);
  } catch (error) {
    hostReportErrors(error);
  }
  if (subscriptionClosed(subscriptionState)) return;
  var subscriptionObserver = subscriptionState.subscriptionObserver = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(subscriptionObserver);
    var subscription = cleanup;
    if (cleanup != null) subscriptionState.cleanup = typeof cleanup.unsubscribe === 'function'
      ? function () { subscription.unsubscribe(); }
      : aFunction(cleanup);
  } catch (error) {
    subscriptionObserver.error(error);
    return;
  } if (subscriptionClosed(subscriptionState)) cleanupSubscription(subscriptionState);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() {
    var subscriptionState = getInternalState(this);
    if (!subscriptionClosed(subscriptionState)) {
      close(this, subscriptionState);
      cleanupSubscription(subscriptionState);
    }
  }
});

if (DESCRIPTORS) defineProperty(Subscription.prototype, 'closed', {
  configurable: true,
  get: function () {
    return subscriptionClosed(getInternalState(this));
  }
});

var SubscriptionObserver = function (subscription) {
  setInternalState(this, { subscription: subscription });
  if (!DESCRIPTORS) this.closed = false;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscriptionState = getInternalState(getInternalState(this).subscription);
    if (!subscriptionClosed(subscriptionState)) {
      var observer = subscriptionState.observer;
      try {
        var nextMethod = getMethod(observer.next);
        if (nextMethod) nextMethod.call(observer, value);
      } catch (error) {
        hostReportErrors(error);
      }
    }
  },
  error: function error(value) {
    var subscription = getInternalState(this).subscription;
    var subscriptionState = getInternalState(subscription);
    if (!subscriptionClosed(subscriptionState)) {
      var observer = subscriptionState.observer;
      close(subscription, subscriptionState);
      try {
        var errorMethod = getMethod(observer.error);
        if (errorMethod) errorMethod.call(observer, value);
        else hostReportErrors(value);
      } catch (err) {
        hostReportErrors(err);
      } cleanupSubscription(subscriptionState);
    }
  },
  complete: function complete() {
    var subscription = getInternalState(this).subscription;
    var subscriptionState = getInternalState(subscription);
    if (!subscriptionClosed(subscriptionState)) {
      var observer = subscriptionState.observer;
      close(subscription, subscriptionState);
      try {
        var completeMethod = getMethod(observer.complete);
        if (completeMethod) completeMethod.call(observer);
      } catch (error) {
        hostReportErrors(error);
      } cleanupSubscription(subscriptionState);
    }
  }
});

if (DESCRIPTORS) defineProperty(SubscriptionObserver.prototype, 'closed', {
  configurable: true,
  get: function () {
    return subscriptionClosed(getInternalState(getInternalState(this).subscription));
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable');
  setInternalState(this, { subscriber: aFunction(subscriber) });
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    var length = arguments.length;
    return new Subscription(typeof observer === 'function' ? {
      next: observer,
      error: length > 1 ? arguments[1] : undefined,
      complete: length > 2 ? arguments[2] : undefined
    } : isObject(observer) ? observer : {}, getInternalState(this).subscriber);
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var observableMethod = getMethod(anObject(x)[OBSERVABLE]);
    if (observableMethod) {
      var observable = anObject(observableMethod.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    var iterator = getIterator(x);
    return new C(function (observer) {
      iterate(iterator, function (it) {
        observer.next(it);
        if (observer.closed) return iterate.stop();
      }, undefined, false, true);
      observer.complete();
    });
  },
  of: function of() {
    var C = typeof this === 'function' ? this : $Observable;
    var length = arguments.length;
    var items = new Array(length);
    var index = 0;
    while (index < length) items[index] = arguments[index++];
    return new C(function (observer) {
      for (var i = 0; i < length; i++) {
        observer.next(items[i]);
        if (observer.closed) return;
      } observer.complete();
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$({ global: true }, {
  Observable: $Observable
});

setSpecies('Observable');


/***/ }),

/***/ "./node_modules/core-js/modules/esnext.symbol.observable.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/esnext.symbol.observable.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__(/*! ../internals/define-well-known-symbol */ "./node_modules/core-js/internals/define-well-known-symbol.js");

// `Symbol.observable` well-known symbol
// https://github.com/tc39/proposal-observable
defineWellKnownSymbol('observable');


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-collections.iterator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.iterator.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
var ArrayIteratorMethods = __webpack_require__(/*! ../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      hide(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) hide(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        hide(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
}


/***/ }),

/***/ "./node_modules/event-as-promise/lib/external/p-defer.js":
/*!***************************************************************!*\
  !*** ./node_modules/event-as-promise/lib/external/p-defer.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// The MIT License (MIT)
//
// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// This piece of code is adopted from https://github.com/sindresorhus/p-defer
// The reason why we need to fork it is because:
// - The original package published to NPM is not ES5-compliant
//    - Due to the use of arrow functions
// - create-react-app@1 does not play nice with packages that are not ES5-compliant
//    - create-react-app@2 do play nice, but it was so new that most of the people are still on @1
// Criteria to remove this package:
// - When create-react-app@2 become mainstream, or,
// - When p-defer start publishing a ES5-compliant version on NPM


module.exports = function () {
  var ret = {};
  ret.promise = new Promise(function (resolve, reject) {
    ret.resolve = resolve;
    ret.reject = reject;
  });
  return ret;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHRlcm5hbC9wLWRlZmVyLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXQiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBWTtBQUMzQixNQUFNQyxHQUFHLEdBQUcsRUFBWjtBQUVBQSxFQUFBQSxHQUFHLENBQUNDLE9BQUosR0FBYyxJQUFJQyxPQUFKLENBQVksVUFBVUMsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDbkRKLElBQUFBLEdBQUcsQ0FBQ0csT0FBSixHQUFjQSxPQUFkO0FBQ0FILElBQUFBLEdBQUcsQ0FBQ0ksTUFBSixHQUFhQSxNQUFiO0FBQ0QsR0FIYSxDQUFkO0FBS0EsU0FBT0osR0FBUDtBQUNELENBVEQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIFNpbmRyZSBTb3JodXMgPHNpbmRyZXNvcmh1c0BnbWFpbC5jb20+IChzaW5kcmVzb3JodXMuY29tKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbi8vIFRoaXMgcGllY2Ugb2YgY29kZSBpcyBhZG9wdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9wLWRlZmVyXG5cbi8vIFRoZSByZWFzb24gd2h5IHdlIG5lZWQgdG8gZm9yayBpdCBpcyBiZWNhdXNlOlxuLy8gLSBUaGUgb3JpZ2luYWwgcGFja2FnZSBwdWJsaXNoZWQgdG8gTlBNIGlzIG5vdCBFUzUtY29tcGxpYW50XG4vLyAgICAtIER1ZSB0byB0aGUgdXNlIG9mIGFycm93IGZ1bmN0aW9uc1xuLy8gLSBjcmVhdGUtcmVhY3QtYXBwQDEgZG9lcyBub3QgcGxheSBuaWNlIHdpdGggcGFja2FnZXMgdGhhdCBhcmUgbm90IEVTNS1jb21wbGlhbnRcbi8vICAgIC0gY3JlYXRlLXJlYWN0LWFwcEAyIGRvIHBsYXkgbmljZSwgYnV0IGl0IHdhcyBzbyBuZXcgdGhhdCBtb3N0IG9mIHRoZSBwZW9wbGUgYXJlIHN0aWxsIG9uIEAxXG5cbi8vIENyaXRlcmlhIHRvIHJlbW92ZSB0aGlzIHBhY2thZ2U6XG4vLyAtIFdoZW4gY3JlYXRlLXJlYWN0LWFwcEAyIGJlY29tZSBtYWluc3RyZWFtLCBvcixcbi8vIC0gV2hlbiBwLWRlZmVyIHN0YXJ0IHB1Ymxpc2hpbmcgYSBFUzUtY29tcGxpYW50IHZlcnNpb24gb24gTlBNXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuXG4gIHJldC5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJldC5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICByZXQucmVqZWN0ID0gcmVqZWN0O1xuICB9KTtcblxuICByZXR1cm4gcmV0O1xufTtcbiJdfQ==

/***/ }),

/***/ "./node_modules/event-as-promise/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/event-as-promise/lib/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pDefer = _interopRequireDefault(__webpack_require__(/*! ./external/p-defer */ "./node_modules/event-as-promise/lib/external/p-defer.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var EventAsPromise =
/*#__PURE__*/
function () {
  function EventAsPromise() {
    var _this = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, EventAsPromise);

    this.defers = [];
    this.upcomingDeferred = null;
    this.eventListener = this.eventListener.bind(this);
    this.options = options;
    this.one = this.one.bind(this);
    this.upcoming = this.upcoming.bind(this);

    this[Symbol.iterator] = function () {
      return {
        next: function next() {
          return {
            done: false,
            value: _this.upcoming()
          };
        }
      };
    };
  }

  _createClass(EventAsPromise, [{
    key: "eventListener",
    value: function eventListener(event) {
      var deferred = this.defers.shift();
      var args = this.options.array ? [].slice.call(arguments) : event;
      deferred && deferred.resolve(args);

      if (this.upcomingDeferred) {
        this.upcomingDeferred.resolve(args);
        this.upcomingDeferred = null;
      }
    }
  }, {
    key: "one",
    value: function one() {
      var deferred = (0, _pDefer.default)();
      this.defers.push(deferred);
      return deferred.promise;
    }
  }, {
    key: "upcoming",
    value: function upcoming() {
      if (!this.upcomingDeferred) {
        this.upcomingDeferred = (0, _pDefer.default)();
      }

      return this.upcomingDeferred.promise;
    }
  }]);

  return EventAsPromise;
}();

exports.default = EventAsPromise;
module.exports = exports.default;
module.exports.default = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJFdmVudEFzUHJvbWlzZSIsIm9wdGlvbnMiLCJkZWZlcnMiLCJ1cGNvbWluZ0RlZmVycmVkIiwiZXZlbnRMaXN0ZW5lciIsImJpbmQiLCJvbmUiLCJ1cGNvbWluZyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsImV2ZW50IiwiZGVmZXJyZWQiLCJzaGlmdCIsImFyZ3MiLCJhcnJheSIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsInJlc29sdmUiLCJwdXNoIiwicHJvbWlzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Ozs7O0lBRXFCQSxjOzs7QUFDbkIsNEJBQTBCO0FBQUE7O0FBQUEsUUFBZEMsT0FBYyx1RUFBSixFQUFJOztBQUFBOztBQUN4QixTQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQixLQUFLQSxhQUFMLENBQW1CQyxJQUFuQixDQUF3QixJQUF4QixDQUFyQjtBQUNBLFNBQUtKLE9BQUwsR0FBZUEsT0FBZjtBQUVBLFNBQUtLLEdBQUwsR0FBVyxLQUFLQSxHQUFMLENBQVNELElBQVQsQ0FBYyxJQUFkLENBQVg7QUFDQSxTQUFLRSxRQUFMLEdBQWdCLEtBQUtBLFFBQUwsQ0FBY0YsSUFBZCxDQUFtQixJQUFuQixDQUFoQjs7QUFFQSxTQUFLRyxNQUFNLENBQUNDLFFBQVosSUFBd0I7QUFBQSxhQUFPO0FBQzdCQyxRQUFBQSxJQUFJLEVBQUU7QUFBQSxpQkFBTztBQUNYQyxZQUFBQSxJQUFJLEVBQUUsS0FESztBQUVYQyxZQUFBQSxLQUFLLEVBQUUsS0FBSSxDQUFDTCxRQUFMO0FBRkksV0FBUDtBQUFBO0FBRHVCLE9BQVA7QUFBQSxLQUF4QjtBQU1EOzs7O2tDQUVhTSxLLEVBQU87QUFDbkIsVUFBTUMsUUFBUSxHQUFHLEtBQUtaLE1BQUwsQ0FBWWEsS0FBWixFQUFqQjtBQUNBLFVBQU1DLElBQUksR0FBRyxLQUFLZixPQUFMLENBQWFnQixLQUFiLEdBQXFCLEdBQUdDLEtBQUgsQ0FBU0MsSUFBVCxDQUFjQyxTQUFkLENBQXJCLEdBQWdEUCxLQUE3RDtBQUVBQyxNQUFBQSxRQUFRLElBQUlBLFFBQVEsQ0FBQ08sT0FBVCxDQUFpQkwsSUFBakIsQ0FBWjs7QUFFQSxVQUFJLEtBQUtiLGdCQUFULEVBQTJCO0FBQ3pCLGFBQUtBLGdCQUFMLENBQXNCa0IsT0FBdEIsQ0FBOEJMLElBQTlCO0FBQ0EsYUFBS2IsZ0JBQUwsR0FBd0IsSUFBeEI7QUFDRDtBQUNGOzs7MEJBRUs7QUFDSixVQUFNVyxRQUFRLEdBQUcsc0JBQWpCO0FBRUEsV0FBS1osTUFBTCxDQUFZb0IsSUFBWixDQUFpQlIsUUFBakI7QUFFQSxhQUFPQSxRQUFRLENBQUNTLE9BQWhCO0FBQ0Q7OzsrQkFFVTtBQUNULFVBQUksQ0FBQyxLQUFLcEIsZ0JBQVYsRUFBNEI7QUFDMUIsYUFBS0EsZ0JBQUwsR0FBd0Isc0JBQXhCO0FBQ0Q7O0FBRUQsYUFBTyxLQUFLQSxnQkFBTCxDQUFzQm9CLE9BQTdCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlRGVmZXJyZWQgZnJvbSAnLi9leHRlcm5hbC9wLWRlZmVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRBc1Byb21pc2Uge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmRlZmVycyA9IFtdO1xuICAgIHRoaXMudXBjb21pbmdEZWZlcnJlZCA9IG51bGw7XG4gICAgdGhpcy5ldmVudExpc3RlbmVyID0gdGhpcy5ldmVudExpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHRoaXMub25lID0gdGhpcy5vbmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnVwY29taW5nID0gdGhpcy51cGNvbWluZy5iaW5kKHRoaXMpO1xuXG4gICAgdGhpc1tTeW1ib2wuaXRlcmF0b3JdID0gKCkgPT4gKHtcbiAgICAgIG5leHQ6ICgpID0+ICh7XG4gICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogdGhpcy51cGNvbWluZygpXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgZXZlbnRMaXN0ZW5lcihldmVudCkge1xuICAgIGNvbnN0IGRlZmVycmVkID0gdGhpcy5kZWZlcnMuc2hpZnQoKTtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5vcHRpb25zLmFycmF5ID8gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpIDogZXZlbnQ7XG5cbiAgICBkZWZlcnJlZCAmJiBkZWZlcnJlZC5yZXNvbHZlKGFyZ3MpO1xuXG4gICAgaWYgKHRoaXMudXBjb21pbmdEZWZlcnJlZCkge1xuICAgICAgdGhpcy51cGNvbWluZ0RlZmVycmVkLnJlc29sdmUoYXJncyk7XG4gICAgICB0aGlzLnVwY29taW5nRGVmZXJyZWQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIG9uZSgpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG5cbiAgICB0aGlzLmRlZmVycy5wdXNoKGRlZmVycmVkKTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgdXBjb21pbmcoKSB7XG4gICAgaWYgKCF0aGlzLnVwY29taW5nRGVmZXJyZWQpIHtcbiAgICAgIHRoaXMudXBjb21pbmdEZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudXBjb21pbmdEZWZlcnJlZC5wcm9taXNlO1xuICB9XG59XG4iXX0=

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/microsoft.cognitiveservices.speech.sdk.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/microsoft.cognitiveservices.speech.sdk.js ***!
  \**********************************************************************************************************************/
/*! exports provided: AudioConfig, AudioStreamFormat, AudioInputStream, PullAudioInputStream, PushAudioInputStream, AudioOutputStream, PullAudioOutputStream, CancellationReason, PullAudioInputStreamCallback, KeywordRecognitionModel, SessionEventArgs, RecognitionEventArgs, OutputFormat, IntentRecognitionEventArgs, RecognitionResult, SpeechRecognitionResult, IntentRecognitionResult, LanguageUnderstandingModel, SpeechRecognitionEventArgs, SpeechRecognitionCanceledEventArgs, TranslationRecognitionEventArgs, TranslationSynthesisEventArgs, TranslationRecognitionResult, TranslationSynthesisResult, ResultReason, SpeechConfig, SpeechConfigImpl, SpeechTranslationConfig, PropertyCollection, PropertyId, Recognizer, SpeechRecognizer, IntentRecognizer, TranslationRecognizer, Translations, NoMatchReason, NoMatchDetails, TranslationRecognitionCanceledEventArgs, IntentRecognitionCanceledEventArgs, CancellationDetails, CancellationErrorCode, ConnectionEventArgs, Connection, PhraseListGrammar, DialogServiceConfig, BotFrameworkConfig, SpeechCommandsConfig, DialogServiceConnector, ActivityReceivedEventArgs, ServicePropertyChannel, ProfanityOption, BaseAudioPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/Exports.js");
/* harmony import */ var _src_common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioConfig", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioStreamFormat", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamFormat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioInputStream", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioInputStream"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PullAudioInputStream", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PullAudioInputStream"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PushAudioInputStream", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PushAudioInputStream"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioOutputStream", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioOutputStream"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PullAudioOutputStream", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PullAudioOutputStream"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CancellationReason", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PullAudioInputStreamCallback", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PullAudioInputStreamCallback"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KeywordRecognitionModel", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["KeywordRecognitionModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SessionEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SessionEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognitionEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["RecognitionEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OutputFormat", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["OutputFormat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentRecognitionEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["IntentRecognitionEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognitionResult", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["RecognitionResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionResult", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechRecognitionResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentRecognitionResult", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["IntentRecognitionResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LanguageUnderstandingModel", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["LanguageUnderstandingModel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechRecognitionEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionCanceledEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechRecognitionCanceledEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognitionEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["TranslationRecognitionEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationSynthesisEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["TranslationSynthesisEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognitionResult", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["TranslationRecognitionResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationSynthesisResult", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["TranslationSynthesisResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResultReason", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["ResultReason"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechConfig", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechConfigImpl", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechConfigImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechTranslationConfig", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechTranslationConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyCollection", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyCollection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyId", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Recognizer", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["Recognizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognizer", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechRecognizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentRecognizer", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["IntentRecognizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognizer", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["TranslationRecognizer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Translations", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["Translations"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NoMatchReason", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["NoMatchReason"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NoMatchDetails", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["NoMatchDetails"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognitionCanceledEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["TranslationRecognitionCanceledEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentRecognitionCanceledEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["IntentRecognitionCanceledEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CancellationDetails", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationDetails"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CancellationErrorCode", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["ConnectionEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["Connection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PhraseListGrammar", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PhraseListGrammar"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogServiceConfig", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["DialogServiceConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BotFrameworkConfig", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["BotFrameworkConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechCommandsConfig", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechCommandsConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogServiceConnector", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["DialogServiceConnector"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActivityReceivedEventArgs", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["ActivityReceivedEventArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServicePropertyChannel", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["ServicePropertyChannel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProfanityOption", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["ProfanityOption"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseAudioPlayer", function() { return _src_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["BaseAudioPlayer"]; });

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());
// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());
_src_common_Exports__WEBPACK_IMPORTED_MODULE_1__["Events"].instance.attachListener(new _src_common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["ConsoleLoggingListener"]());
// Speech SDK API


//# sourceMappingURL=microsoft.cognitiveservices.speech.sdk.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ConsoleLoggingListener.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ConsoleLoggingListener.js ***!
  \*************************************************************************************************************************/
/*! exports provided: ConsoleLoggingListener */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConsoleLoggingListener", function() { return ConsoleLoggingListener; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class ConsoleLoggingListener {
    constructor(logLevelFilter = _common_Exports__WEBPACK_IMPORTED_MODULE_0__["EventType"].Warning) {
        this.onEvent = (event) => {
            if (event.eventType >= this.privLogLevelFilter) {
                const log = this.toString(event);
                switch (event.eventType) {
                    case _common_Exports__WEBPACK_IMPORTED_MODULE_0__["EventType"].Debug:
                        // tslint:disable-next-line:no-console
                        console.debug(log);
                        break;
                    case _common_Exports__WEBPACK_IMPORTED_MODULE_0__["EventType"].Info:
                        // tslint:disable-next-line:no-console
                        console.info(log);
                        break;
                    case _common_Exports__WEBPACK_IMPORTED_MODULE_0__["EventType"].Warning:
                        // tslint:disable-next-line:no-console
                        console.warn(log);
                        break;
                    case _common_Exports__WEBPACK_IMPORTED_MODULE_0__["EventType"].Error:
                        // tslint:disable-next-line:no-console
                        console.error(log);
                        break;
                    default:
                        // tslint:disable-next-line:no-console
                        console.log(log);
                        break;
                }
            }
        };
        this.toString = (event) => {
            const logFragments = [
                `${event.EventTime}`,
                `${event.Name}`,
            ];
            for (const prop in event) {
                if (prop && event.hasOwnProperty(prop) &&
                    prop !== "eventTime" && prop !== "eventType" &&
                    prop !== "eventId" && prop !== "name" &&
                    prop !== "constructor") {
                    const value = event[prop];
                    let valueToLog = "<NULL>";
                    if (value !== undefined && value !== null) {
                        if (typeof (value) === "number" || typeof (value) === "string") {
                            valueToLog = value.toString();
                        }
                        else {
                            valueToLog = JSON.stringify(value);
                        }
                    }
                    logFragments.push(`${prop}: ${valueToLog}`);
                }
            }
            return logFragments.join(" | ");
        };
        this.privLogLevelFilter = logLevelFilter;
    }
}

//# sourceMappingURL=ConsoleLoggingListener.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/Exports.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/Exports.js ***!
  \**********************************************************************************************************/
/*! exports provided: ConsoleLoggingListener, AudioWorkletSourceURLPropertyName, MicAudioSource, FileAudioSource, PcmRecorder, WebsocketConnection, WebsocketMessageAdapter, ReplayableAudioNode, ProxyInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ConsoleLoggingListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConsoleLoggingListener */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ConsoleLoggingListener.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConsoleLoggingListener", function() { return _ConsoleLoggingListener__WEBPACK_IMPORTED_MODULE_0__["ConsoleLoggingListener"]; });

/* harmony import */ var _MicAudioSource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MicAudioSource */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/MicAudioSource.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioWorkletSourceURLPropertyName", function() { return _MicAudioSource__WEBPACK_IMPORTED_MODULE_1__["AudioWorkletSourceURLPropertyName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MicAudioSource", function() { return _MicAudioSource__WEBPACK_IMPORTED_MODULE_1__["MicAudioSource"]; });

/* harmony import */ var _FileAudioSource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FileAudioSource */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/FileAudioSource.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FileAudioSource", function() { return _FileAudioSource__WEBPACK_IMPORTED_MODULE_2__["FileAudioSource"]; });

/* harmony import */ var _PCMRecorder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PCMRecorder */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/PCMRecorder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PcmRecorder", function() { return _PCMRecorder__WEBPACK_IMPORTED_MODULE_3__["PcmRecorder"]; });

/* harmony import */ var _WebsocketConnection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./WebsocketConnection */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebsocketConnection", function() { return _WebsocketConnection__WEBPACK_IMPORTED_MODULE_4__["WebsocketConnection"]; });

/* harmony import */ var _WebsocketMessageAdapter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./WebsocketMessageAdapter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketMessageAdapter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebsocketMessageAdapter", function() { return _WebsocketMessageAdapter__WEBPACK_IMPORTED_MODULE_5__["WebsocketMessageAdapter"]; });

/* harmony import */ var _ReplayableAudioNode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ReplayableAudioNode */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ReplayableAudioNode.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReplayableAudioNode", function() { return _ReplayableAudioNode__WEBPACK_IMPORTED_MODULE_6__["ReplayableAudioNode"]; });

/* harmony import */ var _ProxyInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ProxyInfo */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProxyInfo", function() { return _ProxyInfo__WEBPACK_IMPORTED_MODULE_7__["ProxyInfo"]; });

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.









//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/FileAudioSource.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/FileAudioSource.js ***!
  \******************************************************************************************************************/
/*! exports provided: FileAudioSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileAudioSource", function() { return FileAudioSource; });
/* harmony import */ var _src_sdk_Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/sdk/Audio/AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class FileAudioSource {
    constructor(file, audioSourceId) {
        this.privStreams = {};
        this.turnOn = () => {
            if (typeof FileReader === "undefined") {
                const errorMsg = "Browser does not support FileReader.";
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceErrorEvent"](errorMsg, "")); // initialization error - no streamid at this point
                return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromError(errorMsg);
            }
            else if (this.privFile.name.lastIndexOf(".wav") !== this.privFile.name.length - 4) {
                const errorMsg = this.privFile.name + " is not supported. Only WAVE files are allowed at the moment.";
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceErrorEvent"](errorMsg, ""));
                return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromError(errorMsg);
            }
            else if (this.privFile.size > FileAudioSource.MAX_SIZE) {
                const errorMsg = this.privFile.name + " exceeds the maximum allowed file size (" + FileAudioSource.MAX_SIZE + ").";
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceErrorEvent"](errorMsg, ""));
                return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromError(errorMsg);
            }
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceInitializingEvent"](this.privId)); // no stream id
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceReadyEvent"](this.privId));
            return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(true);
        };
        this.id = () => {
            return this.privId;
        };
        this.attach = (audioNodeId) => {
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeAttachingEvent"](this.privId, audioNodeId));
            return this.upload(audioNodeId).onSuccessContinueWith((streamReader) => {
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeAttachedEvent"](this.privId, audioNodeId));
                return {
                    detach: () => {
                        streamReader.close();
                        delete this.privStreams[audioNodeId];
                        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeDetachedEvent"](this.privId, audioNodeId));
                        this.turnOff();
                    },
                    id: () => {
                        return audioNodeId;
                    },
                    read: () => {
                        return streamReader.read();
                    },
                };
            });
        };
        this.detach = (audioNodeId) => {
            if (audioNodeId && this.privStreams[audioNodeId]) {
                this.privStreams[audioNodeId].close();
                delete this.privStreams[audioNodeId];
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeDetachedEvent"](this.privId, audioNodeId));
            }
        };
        this.turnOff = () => {
            for (const streamId in this.privStreams) {
                if (streamId) {
                    const stream = this.privStreams[streamId];
                    if (stream && !stream.isClosed) {
                        stream.close();
                    }
                }
            }
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceOffEvent"](this.privId)); // no stream now
            return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(true);
        };
        this.upload = (audioNodeId) => {
            return this.turnOn()
                .onSuccessContinueWith((_) => {
                const stream = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["Stream"](audioNodeId);
                this.privStreams[audioNodeId] = stream;
                const reader = new FileReader();
                let startOffset = 0;
                let endOffset = FileAudioSource.CHUNK_SIZE;
                const processNextChunk = (event) => {
                    if (stream.isClosed) {
                        return; // output stream was closed (somebody called TurnOff). We're done here.
                    }
                    stream.writeStreamChunk({
                        buffer: reader.result,
                        isEnd: false,
                        timeReceived: Date.now(),
                    });
                    if (endOffset < this.privFile.size) {
                        startOffset = endOffset;
                        endOffset = Math.min(endOffset + FileAudioSource.CHUNK_SIZE, this.privFile.size);
                        const chunk = this.privFile.slice(startOffset, endOffset);
                        reader.readAsArrayBuffer(chunk);
                    }
                    else {
                        // we've written the entire file to the output stream, can close it now.
                        stream.close();
                    }
                };
                reader.onload = processNextChunk;
                reader.onerror = (event) => {
                    const errorMsg = `Error occurred while processing '${this.privFile.name}'. ${event}`;
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeErrorEvent"](this.privId, audioNodeId, errorMsg));
                    throw new Error(errorMsg);
                };
                const chunk = this.privFile.slice(startOffset, endOffset);
                reader.readAsArrayBuffer(chunk);
                return stream.getReader();
            });
        };
        this.onEvent = (event) => {
            this.privEvents.onEvent(event);
            _common_Exports__WEBPACK_IMPORTED_MODULE_2__["Events"].instance.onEvent(event);
        };
        this.privId = audioSourceId ? audioSourceId : Object(_common_Exports__WEBPACK_IMPORTED_MODULE_2__["createNoDashGuid"])();
        this.privEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["EventSource"]();
        this.privFile = file;
    }
    get format() {
        return FileAudioSource.FILEFORMAT;
    }
    get events() {
        return this.privEvents;
    }
    get deviceInfo() {
        return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult({
            bitspersample: FileAudioSource.FILEFORMAT.bitsPerSample,
            channelcount: FileAudioSource.FILEFORMAT.channels,
            connectivity: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["connectivity"].Unknown,
            manufacturer: "Speech SDK",
            model: "File",
            samplerate: FileAudioSource.FILEFORMAT.samplesPerSec,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["type"].File,
        });
    }
}
// Recommended sample rate (bytes/second).
FileAudioSource.SAMPLE_RATE = 16000 * 2; // 16 kHz * 16 bits
// We should stream audio at no faster than 2x real-time (i.e., send five chunks
// per second, with the chunk size == sample rate in bytes per second * 2 / 5).
FileAudioSource.CHUNK_SIZE = FileAudioSource.SAMPLE_RATE * 2 / 5;
// 10 seconds of audio in bytes =
// sample rate (bytes/second) * 600 (seconds) + 44 (size of the wave header).
FileAudioSource.MAX_SIZE = FileAudioSource.SAMPLE_RATE * 600 + 44;
FileAudioSource.FILEFORMAT = _src_sdk_Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__["AudioStreamFormat"].getWaveFormatPCM(16000, 16, 1);

//# sourceMappingURL=FileAudioSource.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/MicAudioSource.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/MicAudioSource.js ***!
  \*****************************************************************************************************************/
/*! exports provided: AudioWorkletSourceURLPropertyName, MicAudioSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioWorkletSourceURLPropertyName", function() { return AudioWorkletSourceURLPropertyName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MicAudioSource", function() { return MicAudioSource; });
/* harmony import */ var _src_sdk_Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/sdk/Audio/AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



const AudioWorkletSourceURLPropertyName = "MICROPHONE-WorkletSourceUrl";
class MicAudioSource {
    constructor(privRecorder, outputChunkSize, audioSourceId, deviceId) {
        this.privRecorder = privRecorder;
        this.deviceId = deviceId;
        this.privStreams = {};
        this.turnOn = () => {
            if (this.privInitializeDeferral) {
                return this.privInitializeDeferral.promise();
            }
            this.privInitializeDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["Deferred"]();
            this.createAudioContext();
            const nav = window.navigator;
            let getUserMedia = (nav.getUserMedia ||
                nav.webkitGetUserMedia ||
                nav.mozGetUserMedia ||
                nav.msGetUserMedia);
            if (!!nav.mediaDevices) {
                getUserMedia = (constraints, successCallback, errorCallback) => {
                    nav.mediaDevices
                        .getUserMedia(constraints)
                        .then(successCallback)
                        .catch(errorCallback);
                };
            }
            if (!getUserMedia) {
                const errorMsg = "Browser does not support getUserMedia.";
                this.privInitializeDeferral.reject(errorMsg);
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceErrorEvent"](errorMsg, "")); // mic initialized error - no streamid at this point
            }
            else {
                const next = () => {
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceInitializingEvent"](this.privId)); // no stream id
                    getUserMedia({ audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false }, (mediaStream) => {
                        this.privMediaStream = mediaStream;
                        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceReadyEvent"](this.privId));
                        this.privInitializeDeferral.resolve(true);
                    }, (error) => {
                        const errorMsg = `Error occurred during microphone initialization: ${error}`;
                        const tmp = this.privInitializeDeferral;
                        // HACK: this should be handled through onError callbacks of all promises up the stack.
                        // Unfortunately, the current implementation does not provide an easy way to reject promises
                        // without a lot of code replication.
                        // TODO: fix promise implementation, allow for a graceful reject chaining.
                        this.privInitializeDeferral = null;
                        tmp.reject(errorMsg); // this will bubble up through the whole chain of promises,
                        // with each new level adding extra "Unhandled callback error" prefix to the error message.
                        // The following line is not guaranteed to be executed.
                        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceErrorEvent"](this.privId, errorMsg));
                    });
                };
                if (this.privContext.state === "suspended") {
                    // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.
                    // https://github.com/WebAudio/web-audio-api/issues/790
                    this.privContext.resume().then(next, (reason) => {
                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`);
                    });
                }
                else {
                    next();
                }
            }
            return this.privInitializeDeferral.promise();
        };
        this.id = () => {
            return this.privId;
        };
        this.attach = (audioNodeId) => {
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeAttachingEvent"](this.privId, audioNodeId));
            return this.listen(audioNodeId).onSuccessContinueWith((streamReader) => {
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeAttachedEvent"](this.privId, audioNodeId));
                return {
                    detach: () => {
                        streamReader.close();
                        this.turnOff();
                        delete this.privStreams[audioNodeId];
                        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeDetachedEvent"](this.privId, audioNodeId));
                    },
                    id: () => {
                        return audioNodeId;
                    },
                    read: () => {
                        return streamReader.read();
                    },
                };
            });
        };
        this.detach = (audioNodeId) => {
            if (audioNodeId && this.privStreams[audioNodeId]) {
                this.privStreams[audioNodeId].close();
                delete this.privStreams[audioNodeId];
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeDetachedEvent"](this.privId, audioNodeId));
            }
        };
        this.turnOff = () => {
            for (const streamId in this.privStreams) {
                if (streamId) {
                    const stream = this.privStreams[streamId];
                    if (stream) {
                        stream.close();
                    }
                }
            }
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceOffEvent"](this.privId)); // no stream now
            this.privInitializeDeferral = null;
            this.destroyAudioContext();
            return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(true);
        };
        this.listen = (audioNodeId) => {
            return this.turnOn()
                .onSuccessContinueWith((_) => {
                const stream = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["ChunkedArrayBufferStream"](this.privOutputChunkSize, audioNodeId);
                this.privStreams[audioNodeId] = stream;
                try {
                    this.privRecorder.record(this.privContext, this.privMediaStream, stream);
                }
                catch (error) {
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeErrorEvent"](this.privId, audioNodeId, error));
                    throw error;
                }
                return stream.getReader();
            });
        };
        this.onEvent = (event) => {
            this.privEvents.onEvent(event);
            _common_Exports__WEBPACK_IMPORTED_MODULE_2__["Events"].instance.onEvent(event);
        };
        this.createAudioContext = () => {
            if (!!this.privContext) {
                return;
            }
            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext
            const AudioContext = (window.AudioContext)
                || (window.webkitAudioContext)
                || false;
            if (!AudioContext) {
                throw new Error("Browser does not support Web Audio API (AudioContext is not available).");
            }
            this.privContext = new AudioContext();
        };
        this.destroyAudioContext = () => {
            if (!this.privContext) {
                return;
            }
            this.privRecorder.releaseMediaResources(this.privContext);
            // This pattern brought to you by a bug in the TypeScript compiler where it
            // confuses the ("close" in this.privContext) with this.privContext always being null as the alternate.
            // https://github.com/Microsoft/TypeScript/issues/11498
            let hasClose = false;
            if ("close" in this.privContext) {
                hasClose = true;
            }
            if (hasClose) {
                this.privContext.close();
                this.privContext = null;
            }
            else if (null !== this.privContext && this.privContext.state === "running") {
                // Suspend actually takes a callback, but analogous to the
                // resume method, it'll be only fired if suspend is called
                // in a direct response to a user action. The later is not always
                // the case, as TurnOff is also called, when we receive an
                // end-of-speech message from the service. So, doing a best effort
                // fire-and-forget here.
                this.privContext.suspend();
            }
        };
        this.privOutputChunkSize = outputChunkSize;
        this.privId = audioSourceId ? audioSourceId : Object(_common_Exports__WEBPACK_IMPORTED_MODULE_2__["createNoDashGuid"])();
        this.privEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["EventSource"]();
    }
    get format() {
        return MicAudioSource.AUDIOFORMAT;
    }
    get events() {
        return this.privEvents;
    }
    get deviceInfo() {
        return this.getMicrophoneLabel().onSuccessContinueWith((label) => {
            return {
                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,
                channelcount: MicAudioSource.AUDIOFORMAT.channels,
                connectivity: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["connectivity"].Unknown,
                manufacturer: "Speech SDK",
                model: label,
                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,
                type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["type"].Microphones,
            };
        });
    }
    setProperty(name, value) {
        if (name === AudioWorkletSourceURLPropertyName) {
            this.privRecorder.setWorkletUrl(value);
        }
        else {
            throw new Error("Property '" + name + "' is not supported on Microphone.");
        }
    }
    getMicrophoneLabel() {
        const defaultMicrophoneName = "microphone";
        // If we did this already, return the value.
        if (this.privMicrophoneLabel !== undefined) {
            return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(this.privMicrophoneLabel);
        }
        // If the stream isn't currently running, we can't query devices because security.
        if (this.privMediaStream === undefined || !this.privMediaStream.active) {
            return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(defaultMicrophoneName);
        }
        // Setup a default
        this.privMicrophoneLabel = defaultMicrophoneName;
        // Get the id of the device running the audio track.
        const microphoneDeviceId = this.privMediaStream.getTracks()[0].getSettings().deviceId;
        // If the browser doesn't support getting the device ID, set a default and return.
        if (undefined === microphoneDeviceId) {
            return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(this.privMicrophoneLabel);
        }
        const deferred = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["Deferred"]();
        // Enumerate the media devices.
        navigator.mediaDevices.enumerateDevices().then((devices) => {
            for (const device of devices) {
                if (device.deviceId === microphoneDeviceId) {
                    // Found the device
                    this.privMicrophoneLabel = device.label;
                    break;
                }
            }
            deferred.resolve(this.privMicrophoneLabel);
        }, () => deferred.resolve(this.privMicrophoneLabel));
        return deferred.promise();
    }
}
MicAudioSource.AUDIOFORMAT = _src_sdk_Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__["AudioStreamFormat"].getDefaultInputFormat();

//# sourceMappingURL=MicAudioSource.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/PCMRecorder.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/PCMRecorder.js ***!
  \**************************************************************************************************************/
/*! exports provided: PcmRecorder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PcmRecorder", function() { return PcmRecorder; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class PcmRecorder {
    constructor() {
        this.record = (context, mediaStream, outputStream) => {
            const desiredSampleRate = 16000;
            const scriptNode = (() => {
                let bufferSize = 0;
                try {
                    return context.createScriptProcessor(bufferSize, 1, 1);
                }
                catch (error) {
                    // Webkit (<= version 31) requires a valid bufferSize.
                    bufferSize = 2048;
                    let audioSampleRate = context.sampleRate;
                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {
                        bufferSize <<= 1;
                        audioSampleRate >>= 1;
                    }
                    return context.createScriptProcessor(bufferSize, 1, 1);
                }
            })();
            const waveStreamEncoder = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["RiffPcmEncoder"](context.sampleRate, desiredSampleRate);
            let needHeader = true;
            const that = this;
            scriptNode.onaudioprocess = (event) => {
                const inputFrame = event.inputBuffer.getChannelData(0);
                if (outputStream && !outputStream.isClosed) {
                    const waveFrame = waveStreamEncoder.encode(needHeader, inputFrame);
                    if (!!waveFrame) {
                        outputStream.writeStreamChunk({
                            buffer: waveFrame,
                            isEnd: false,
                            timeReceived: Date.now(),
                        });
                        needHeader = false;
                    }
                }
            };
            const micInput = context.createMediaStreamSource(mediaStream);
            // https://webaudio.github.io/web-audio-api/#audioworklet
            // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread
            if (!!this.privSpeechProcessorScript && !!context.audioWorklet) {
                context.audioWorklet
                    .addModule(this.privSpeechProcessorScript)
                    .then(() => {
                    const workletNode = new AudioWorkletNode(context, "speech-processor");
                    workletNode.port.onmessage = (ev) => {
                        const inputFrame = ev.data;
                        if (outputStream && !outputStream.isClosed) {
                            const waveFrame = waveStreamEncoder.encode(needHeader, inputFrame);
                            if (!!waveFrame) {
                                outputStream.writeStreamChunk({
                                    buffer: waveFrame,
                                    isEnd: false,
                                    timeReceived: Date.now(),
                                });
                                needHeader = false;
                            }
                        }
                    };
                    micInput.connect(workletNode);
                    workletNode.connect(context.destination);
                    this.privMediaResources = {
                        scriptProcessorNode: workletNode,
                        source: micInput,
                        stream: mediaStream,
                    };
                })
                    .catch(() => {
                    micInput.connect(scriptNode);
                    scriptNode.connect(context.destination);
                    this.privMediaResources = {
                        scriptProcessorNode: scriptNode,
                        source: micInput,
                        stream: mediaStream,
                    };
                });
            }
            else {
                micInput.connect(scriptNode);
                scriptNode.connect(context.destination);
                this.privMediaResources = {
                    scriptProcessorNode: scriptNode,
                    source: micInput,
                    stream: mediaStream,
                };
            }
        };
        this.releaseMediaResources = (context) => {
            if (this.privMediaResources) {
                if (this.privMediaResources.scriptProcessorNode) {
                    this.privMediaResources.scriptProcessorNode.disconnect(context.destination);
                    this.privMediaResources.scriptProcessorNode = null;
                }
                if (this.privMediaResources.source) {
                    this.privMediaResources.source.disconnect();
                    this.privMediaResources.stream.getTracks().forEach((track) => track.stop());
                    this.privMediaResources.source = null;
                }
            }
        };
    }
    setWorkletUrl(url) {
        this.privSpeechProcessorScript = url;
    }
}

//# sourceMappingURL=PCMRecorder.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js ***!
  \************************************************************************************************************/
/*! exports provided: ProxyInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProxyInfo", function() { return ProxyInfo; });
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class ProxyInfo {
    constructor(proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.privProxyHostName = proxyHostName;
        this.privProxyPort = proxyPort;
        this.privProxyUserName = proxyUserName;
        this.privProxyPassword = proxyPassword;
    }
    static fromRecognizerConfig(config) {
        return new ProxyInfo(config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["PropertyId"].SpeechServiceConnection_ProxyHostName), parseInt(config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["PropertyId"].SpeechServiceConnection_ProxyPort), 10), config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["PropertyId"].SpeechServiceConnection_ProxyUserName), config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["PropertyId"].SpeechServiceConnection_ProxyPassword));
    }
    get HostName() {
        return this.privProxyHostName;
    }
    get Port() {
        return this.privProxyPort;
    }
    get UserName() {
        return this.privProxyUserName;
    }
    get Password() {
        return this.privProxyPassword;
    }
}

//# sourceMappingURL=ProxyInfo.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ReplayableAudioNode.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ReplayableAudioNode.js ***!
  \**********************************************************************************************************************/
/*! exports provided: ReplayableAudioNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplayableAudioNode", function() { return ReplayableAudioNode; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class ReplayableAudioNode {
    constructor(audioSource, format) {
        this.privBuffers = [];
        this.privReplayOffset = 0;
        this.privLastShrinkOffset = 0;
        this.privBufferStartOffset = 0;
        this.privBufferSerial = 0;
        this.privBufferedBytes = 0;
        this.privReplay = false;
        this.privLastChunkAcquiredTime = 0;
        this.id = () => {
            return this.privAudioNode.id();
        };
        this.privAudioNode = audioSource;
        this.privFormat = format;
    }
    // Reads and returns the next chunk of audio buffer.
    // If replay of existing buffers are needed, read() will first seek and replay
    // existing content, and upoin completion it will read new content from the underlying
    // audio node, saving that content into the replayable buffers.
    read() {
        // if there is a replay request to honor.
        if (!!this.privReplay && this.privBuffers.length !== 0) {
            // Find the start point in the buffers.
            // Offsets are in 100ns increments.
            // So how many bytes do we need to seek to get the right offset?
            const offsetToSeek = this.privReplayOffset - this.privBufferStartOffset;
            let bytesToSeek = Math.round(offsetToSeek * this.privFormat.avgBytesPerSec * 1e-7);
            if (0 !== (bytesToSeek % 2)) {
                bytesToSeek++;
            }
            let i = 0;
            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {
                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;
            }
            const retVal = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);
            this.privReplayOffset += (retVal.byteLength / this.privFormat.avgBytesPerSec) * 1e+7;
            // If we've reached the end of the buffers, stop replaying.
            if (i === this.privBuffers.length - 1) {
                this.privReplay = false;
            }
            return _common_Exports__WEBPACK_IMPORTED_MODULE_0__["PromiseHelper"].fromResult({
                buffer: retVal,
                isEnd: false,
                timeReceived: this.privBuffers[i].chunk.timeReceived,
            });
        }
        return this.privAudioNode.read()
            .onSuccessContinueWith((result) => {
            if (result && result.buffer) {
                this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));
                this.privBufferedBytes += result.buffer.byteLength;
            }
            return result;
        });
    }
    detach() {
        this.privAudioNode.detach();
        this.privBuffers = undefined;
    }
    replay() {
        if (this.privBuffers && 0 !== this.privBuffers.length) {
            this.privReplay = true;
            this.privReplayOffset = this.privLastShrinkOffset;
        }
    }
    // Shrinks the existing audio buffers to start at the new offset, or at the
    // beginning of the buffer closest to the requested offset.
    // A replay request will start from the last shrink point.
    shrinkBuffers(offset) {
        this.privLastShrinkOffset = offset;
        // Find the start point in the buffers.
        // Offsets are in 100ns increments.
        // So how many bytes do we need to seek to get the right offset?
        const offsetToSeek = offset - this.privBufferStartOffset;
        let bytesToSeek = Math.round(offsetToSeek * this.privFormat.avgBytesPerSec * 1e-7);
        let i = 0;
        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {
            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;
        }
        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privFormat.avgBytesPerSec) * 1e+7));
        this.privBuffers = this.privBuffers.slice(i);
    }
    // Finds the time a buffer of audio was first seen by offset.
    findTimeAtOffset(offset) {
        if (offset < this.privBufferStartOffset) {
            return 0;
        }
        for (const value of this.privBuffers) {
            const startOffset = (value.byteOffset / this.privFormat.avgBytesPerSec) * 1e7;
            const endOffset = startOffset + ((value.chunk.buffer.byteLength / this.privFormat.avgBytesPerSec) * 1e7);
            if (offset >= startOffset && offset <= endOffset) {
                return value.chunk.timeReceived;
            }
        }
        return 0;
    }
}
// Primary use of this class is to help debugging problems with the replay
// code. If the memory cost of alloc / dealloc gets too much, drop it and just use
// the ArrayBuffer directly.
// tslint:disable-next-line:max-classes-per-file
class BufferEntry {
    constructor(chunk, serial, byteOffset) {
        this.chunk = chunk;
        this.serial = serial;
        this.byteOffset = byteOffset;
    }
}

//# sourceMappingURL=ReplayableAudioNode.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js ***!
  \**********************************************************************************************************************/
/*! exports provided: WebsocketConnection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebsocketConnection", function() { return WebsocketConnection; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _WebsocketMessageAdapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WebsocketMessageAdapter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketMessageAdapter.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class WebsocketConnection {
    constructor(uri, queryParameters, headers, messageFormatter, proxyInfo, connectionId) {
        this.privIsDisposed = false;
        this.dispose = () => {
            this.privIsDisposed = true;
            if (this.privConnectionMessageAdapter) {
                this.privConnectionMessageAdapter.close();
            }
        };
        this.isDisposed = () => {
            return this.privIsDisposed;
        };
        this.state = () => {
            return this.privConnectionMessageAdapter.state;
        };
        this.open = () => {
            return this.privConnectionMessageAdapter.open();
        };
        this.send = (message) => {
            return this.privConnectionMessageAdapter.send(message);
        };
        this.read = () => {
            return this.privConnectionMessageAdapter.read();
        };
        if (!uri) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("uri");
        }
        if (!messageFormatter) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("messageFormatter");
        }
        this.privMessageFormatter = messageFormatter;
        let queryParams = "";
        let i = 0;
        if (queryParameters) {
            for (const paramName in queryParameters) {
                if (paramName) {
                    queryParams += ((i === 0) && (uri.indexOf("?") === -1)) ? "?" : "&";
                    const val = encodeURIComponent(queryParameters[paramName]);
                    queryParams += `${paramName}=${val}`;
                    i++;
                }
            }
        }
        if (headers) {
            for (const headerName in headers) {
                if (headerName) {
                    queryParams += i === 0 ? "?" : "&";
                    const val = encodeURIComponent(headers[headerName]);
                    queryParams += `${headerName}=${val}`;
                    i++;
                }
            }
        }
        this.privUri = uri + queryParams;
        this.privId = connectionId ? connectionId : Object(_common_Exports__WEBPACK_IMPORTED_MODULE_0__["createNoDashGuid"])();
        this.privConnectionMessageAdapter = new _WebsocketMessageAdapter__WEBPACK_IMPORTED_MODULE_1__["WebsocketMessageAdapter"](this.privUri, this.id, this.privMessageFormatter, proxyInfo, headers);
    }
    get id() {
        return this.privId;
    }
    get events() {
        return this.privConnectionMessageAdapter.events;
    }
}

//# sourceMappingURL=WebsocketConnection.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketMessageAdapter.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketMessageAdapter.js ***!
  \**************************************************************************************************************************/
/*! exports provided: WebsocketMessageAdapter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebsocketMessageAdapter", function() { return WebsocketMessageAdapter; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var https_proxy_agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! https-proxy-agent */ 0);
/* harmony import */ var https_proxy_agent__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(https_proxy_agent__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ws */ 1);
/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(ws__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _external_ocsp_ocsp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../external/ocsp/ocsp */ 2);
/* harmony import */ var _external_ocsp_ocsp__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_external_ocsp_ocsp__WEBPACK_IMPORTED_MODULE_3__);
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.




class WebsocketMessageAdapter {
    constructor(uri, connectionId, messageFormatter, proxyInfo, headers) {
        this.open = () => {
            if (this.privConnectionState === _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Disconnected) {
                return _common_Exports__WEBPACK_IMPORTED_MODULE_0__["PromiseHelper"].fromError(`Cannot open a connection that is in ${this.privConnectionState} state`);
            }
            if (this.privConnectionEstablishDeferral) {
                return this.privConnectionEstablishDeferral.promise();
            }
            this.privConnectionEstablishDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Deferred"]();
            this.privCertificateValidatedDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Deferred"]();
            this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Connecting;
            try {
                if (typeof WebSocket !== "undefined" && !WebsocketMessageAdapter.forceNpmWebSocket) {
                    // Browser handles cert checks.
                    this.privCertificateValidatedDeferral.resolve(true);
                    this.privWebsocketClient = new WebSocket(this.privUri);
                }
                else {
                    if (this.proxyInfo !== undefined &&
                        this.proxyInfo.HostName !== undefined &&
                        this.proxyInfo.Port > 0) {
                        const httpProxyOptions = {
                            host: this.proxyInfo.HostName,
                            port: this.proxyInfo.Port,
                        };
                        if (undefined !== this.proxyInfo.UserName) {
                            httpProxyOptions.headers = {
                                "Proxy-Authentication": "Basic " + new Buffer(this.proxyInfo.UserName + ":" + (this.proxyInfo.Password === undefined) ? "" : this.proxyInfo.Password).toString("base64"),
                                "requestOCSP": "true",
                            };
                        }
                        const httpProxyAgent = new https_proxy_agent__WEBPACK_IMPORTED_MODULE_1__(httpProxyOptions);
                        const httpsOptions = { agent: httpProxyAgent, headers: this.privHeaders };
                        this.privWebsocketClient = new ws__WEBPACK_IMPORTED_MODULE_2__(this.privUri, httpsOptions);
                        // Register to be notified when WebSocket upgrade happens so we can check the validity of the
                        // Certificate.
                        this.privWebsocketClient.addListener("upgrade", (e) => {
                            const tlsSocket = e.socket;
                            const peer = tlsSocket.getPeerCertificate(true);
                            // Cork the socket until we know if the cert is good.
                            tlsSocket.cork();
                            _external_ocsp_ocsp__WEBPACK_IMPORTED_MODULE_3__["check"]({
                                cert: peer.raw,
                                httpOptions: httpsOptions,
                                issuer: peer.issuerCertificate.raw,
                            }, (error, res) => {
                                if (error) {
                                    this.privCertificateValidatedDeferral.reject(error.message);
                                    tlsSocket.destroy(error);
                                }
                                else {
                                    this.privCertificateValidatedDeferral.resolve(true);
                                    tlsSocket.uncork();
                                }
                            });
                        });
                    }
                    else {
                        // The ocsp library will handle validation for us and fail the connection if needed.
                        this.privCertificateValidatedDeferral.resolve(true);
                        const ocspAgent = new _external_ocsp_ocsp__WEBPACK_IMPORTED_MODULE_3__["Agent"]({});
                        const options = { agent: ocspAgent, headers: this.privHeaders };
                        this.privWebsocketClient = new ws__WEBPACK_IMPORTED_MODULE_2__(this.privUri, options);
                    }
                }
                this.privWebsocketClient.binaryType = "arraybuffer";
                this.privReceivingMessageQueue = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Queue"]();
                this.privDisconnectDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Deferred"]();
                this.privSendMessageQueue = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Queue"]();
                this.processSendQueue();
            }
            catch (error) {
                this.privConnectionEstablishDeferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionOpenResponse"](500, error));
                return this.privConnectionEstablishDeferral.promise();
            }
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionStartEvent"](this.privConnectionId, this.privUri));
            this.privWebsocketClient.onopen = (e) => {
                this.privCertificateValidatedDeferral.promise().on(() => {
                    this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Connected;
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionEstablishedEvent"](this.privConnectionId));
                    this.privConnectionEstablishDeferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionOpenResponse"](200, ""));
                }, (error) => {
                    this.privConnectionEstablishDeferral.reject(error);
                });
            };
            this.privWebsocketClient.onerror = (e) => {
                // TODO: Understand what this is error is. Will we still get onClose ?
                if (this.privConnectionState !== _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Connecting) {
                    // TODO: Is this required ?
                    // this.onEvent(new ConnectionErrorEvent(errorMsg, connectionId));
                }
            };
            this.privWebsocketClient.onclose = (e) => {
                if (this.privConnectionState === _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Connecting) {
                    this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Disconnected;
                    // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));
                    this.privConnectionEstablishDeferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionOpenResponse"](e.code, e.reason));
                }
                else {
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionClosedEvent"](this.privConnectionId, e.code, e.reason));
                }
                this.onClose(e.code, e.reason);
            };
            this.privWebsocketClient.onmessage = (e) => {
                const networkReceivedTime = new Date().toISOString();
                if (this.privConnectionState === _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Connected) {
                    const deferred = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Deferred"]();
                    // let id = ++this.idCounter;
                    this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise());
                    if (e.data instanceof ArrayBuffer) {
                        const rawMessage = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["RawWebsocketMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Binary, e.data);
                        this.privMessageFormatter
                            .toConnectionMessage(rawMessage)
                            .on((connectionMessage) => {
                            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionMessageReceivedEvent"](this.privConnectionId, networkReceivedTime, connectionMessage));
                            deferred.resolve(connectionMessage);
                        }, (error) => {
                            // TODO: Events for these ?
                            deferred.reject(`Invalid binary message format. Error: ${error}`);
                        });
                    }
                    else {
                        const rawMessage = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["RawWebsocketMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Text, e.data);
                        this.privMessageFormatter
                            .toConnectionMessage(rawMessage)
                            .on((connectionMessage) => {
                            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionMessageReceivedEvent"](this.privConnectionId, networkReceivedTime, connectionMessage));
                            deferred.resolve(connectionMessage);
                        }, (error) => {
                            // TODO: Events for these ?
                            deferred.reject(`Invalid text message format. Error: ${error}`);
                        });
                    }
                }
            };
            return this.privConnectionEstablishDeferral.promise();
        };
        this.send = (message) => {
            if (this.privConnectionState !== _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Connected) {
                return _common_Exports__WEBPACK_IMPORTED_MODULE_0__["PromiseHelper"].fromError(`Cannot send on connection that is in ${this.privConnectionState} state`);
            }
            const messageSendStatusDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Deferred"]();
            const messageSendDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Deferred"]();
            this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise());
            this.privMessageFormatter
                .fromConnectionMessage(message)
                .on((rawMessage) => {
                messageSendDeferral.resolve({
                    Message: message,
                    RawWebsocketMessage: rawMessage,
                    sendStatusDeferral: messageSendStatusDeferral,
                });
            }, (error) => {
                messageSendDeferral.reject(`Error formatting the message. ${error}`);
            });
            return messageSendStatusDeferral.promise();
        };
        this.read = () => {
            if (this.privConnectionState !== _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Connected) {
                return _common_Exports__WEBPACK_IMPORTED_MODULE_0__["PromiseHelper"].fromError(`Cannot read on connection that is in ${this.privConnectionState} state`);
            }
            return this.privReceivingMessageQueue.dequeue();
        };
        this.close = (reason) => {
            if (this.privWebsocketClient) {
                if (this.privConnectionState !== _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Disconnected) {
                    this.privWebsocketClient.close(1000, reason ? reason : "Normal closure by client");
                }
            }
            else {
                const deferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Deferred"]();
                deferral.resolve(true);
                return deferral.promise();
            }
            return this.privDisconnectDeferral.promise();
        };
        this.sendRawMessage = (sendItem) => {
            try {
                // indicates we are draining the queue and it came with no message;
                if (!sendItem) {
                    return _common_Exports__WEBPACK_IMPORTED_MODULE_0__["PromiseHelper"].fromResult(true);
                }
                this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionMessageSentEvent"](this.privConnectionId, new Date().toISOString(), sendItem.Message));
                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);
                return _common_Exports__WEBPACK_IMPORTED_MODULE_0__["PromiseHelper"].fromResult(true);
            }
            catch (e) {
                return _common_Exports__WEBPACK_IMPORTED_MODULE_0__["PromiseHelper"].fromError(`websocket send error: ${e}`);
            }
        };
        this.onClose = (code, reason) => {
            const closeReason = `Connection closed. ${code}: ${reason}`;
            this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].Disconnected;
            this.privDisconnectDeferral.resolve(true);
            this.privReceivingMessageQueue.dispose(reason);
            this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem) => {
                // TODO: Events for these ?
                // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));
            }, closeReason);
            this.privSendMessageQueue.drainAndDispose((pendingSendItem) => {
                pendingSendItem.sendStatusDeferral.reject(closeReason);
            }, closeReason);
        };
        this.processSendQueue = () => {
            this.privSendMessageQueue
                .dequeue()
                .on((sendItem) => {
                // indicates we are draining the queue and it came with no message;
                if (!sendItem) {
                    return;
                }
                this.sendRawMessage(sendItem)
                    .on((result) => {
                    sendItem.sendStatusDeferral.resolve(result);
                    this.processSendQueue();
                }, (sendError) => {
                    sendItem.sendStatusDeferral.reject(sendError);
                    this.processSendQueue();
                });
            }, (error) => {
                // do nothing
            });
        };
        this.onEvent = (event) => {
            this.privConnectionEvents.onEvent(event);
            _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Events"].instance.onEvent(event);
        };
        if (!uri) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("uri");
        }
        if (!messageFormatter) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("messageFormatter");
        }
        this.proxyInfo = proxyInfo;
        this.privConnectionEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["EventSource"]();
        this.privConnectionId = connectionId;
        this.privMessageFormatter = messageFormatter;
        this.privConnectionState = _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionState"].None;
        this.privUri = uri;
        this.privHeaders = headers;
    }
    get state() {
        return this.privConnectionState;
    }
    get events() {
        return this.privConnectionEvents;
    }
}
WebsocketMessageAdapter.forceNpmWebSocket = false;

//# sourceMappingURL=WebsocketMessageAdapter.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AddedLmIntent.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AddedLmIntent.js ***!
  \***************************************************************************************************************/
/*! exports provided: AddedLmIntent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddedLmIntent", function() { return AddedLmIntent; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * @class AddedLmIntent
 */
// tslint:disable-next-line:max-classes-per-file
class AddedLmIntent {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param modelImpl - The model.
     * @param intentName - The intent name.
     */
    constructor(modelImpl, intentName) {
        this.modelImpl = modelImpl;
        this.intentName = intentName;
    }
}

//# sourceMappingURL=AddedLmIntent.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js ***!
  \*************************************************************************************************************/
/*! exports provided: AgentConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgentConfig", function() { return AgentConfig; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Represents the JSON used in the agent.config message sent to the speech service.
 */
class AgentConfig {
    toJsonString() {
        return JSON.stringify(this.iPrivConfig);
    }
    get() {
        return this.iPrivConfig;
    }
    /**
     * Setter for the agent.config object.
     * @param value a JSON serializable object.
     */
    set(value) {
        this.iPrivConfig = value;
    }
}

//# sourceMappingURL=AgentConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js ***!
  \****************************************************************************************************************************************/
/*! exports provided: CognitiveSubscriptionKeyAuthentication */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CognitiveSubscriptionKeyAuthentication", function() { return CognitiveSubscriptionKeyAuthentication; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _IAuthentication__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IAuthentication */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


const AuthHeader = "Ocp-Apim-Subscription-Key";
/**
 * @class
 */
class CognitiveSubscriptionKeyAuthentication {
    /**
     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.
     * @constructor
     * @param {string} subscriptionKey - The subscription key
     */
    constructor(subscriptionKey) {
        /**
         * Fetches the subscription key.
         * @member
         * @function
         * @public
         * @param {string} authFetchEventId - The id to fetch.
         */
        this.fetch = (authFetchEventId) => {
            return _common_Exports__WEBPACK_IMPORTED_MODULE_0__["PromiseHelper"].fromResult(this.privAuthInfo);
        };
        /**
         * Fetches the subscription key.
         * @member
         * @function
         * @public
         * @param {string} authFetchEventId - The id to fetch.
         */
        this.fetchOnExpiry = (authFetchEventId) => {
            return _common_Exports__WEBPACK_IMPORTED_MODULE_0__["PromiseHelper"].fromResult(this.privAuthInfo);
        };
        if (!subscriptionKey) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("subscriptionKey");
        }
        this.privAuthInfo = new _IAuthentication__WEBPACK_IMPORTED_MODULE_1__["AuthInfo"](AuthHeader, subscriptionKey);
    }
}

//# sourceMappingURL=CognitiveSubscriptionKeyAuthentication.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js ***!
  \******************************************************************************************************************************/
/*! exports provided: CognitiveTokenAuthentication */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CognitiveTokenAuthentication", function() { return CognitiveTokenAuthentication; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _IAuthentication__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IAuthentication */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


const AuthHeader = "Authorization";
class CognitiveTokenAuthentication {
    constructor(fetchCallback, fetchOnExpiryCallback) {
        this.fetch = (authFetchEventId) => {
            return this.privFetchCallback(authFetchEventId).onSuccessContinueWith((token) => new _IAuthentication__WEBPACK_IMPORTED_MODULE_1__["AuthInfo"](AuthHeader, token));
        };
        this.fetchOnExpiry = (authFetchEventId) => {
            return this.privFetchOnExpiryCallback(authFetchEventId).onSuccessContinueWith((token) => new _IAuthentication__WEBPACK_IMPORTED_MODULE_1__["AuthInfo"](AuthHeader, token));
        };
        if (!fetchCallback) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("fetchCallback");
        }
        if (!fetchOnExpiryCallback) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("fetchOnExpiryCallback");
        }
        this.privFetchCallback = fetchCallback;
        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;
    }
}

//# sourceMappingURL=CognitiveTokenAuthentication.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js ***!
  \***********************************************************************************************************************/
/*! exports provided: ConnectionFactoryBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionFactoryBase", function() { return ConnectionFactoryBase; });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class ConnectionFactoryBase {
    setCommonUrlParams(config, queryParams, endpoint) {
        this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_EnableAudioLogging, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__["QueryParameterNames"].EnableAudioLogging, config, queryParams, endpoint);
        this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceResponse_RequestWordLevelTimestamps, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__["QueryParameterNames"].EnableWordLevelTimestamps, config, queryParams, endpoint);
        this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceResponse_ProfanityOption, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__["QueryParameterNames"].Profanify, config, queryParams, endpoint);
        this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_InitialSilenceTimeoutMs, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__["QueryParameterNames"].InitialSilenceTimeoutMs, config, queryParams, endpoint);
        this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_EndSilenceTimeoutMs, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__["QueryParameterNames"].EndSilenceTimeoutMs, config, queryParams, endpoint);
        this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceResponse_StablePartialResultThreshold, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_2__["QueryParameterNames"].StableIntermediateThreshold, config, queryParams, endpoint);
        const serviceProperties = JSON.parse(config.parameters.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["ServicePropertiesPropertyName"], "{}"));
        Object.keys(serviceProperties).forEach((value, num, array) => {
            queryParams[value] = serviceProperties[value];
        });
    }
    setUrlParameter(propId, parameterName, config, queryParams, endpoint) {
        const value = config.parameters.getProperty(propId, undefined);
        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {
            queryParams[parameterName] = value.toLocaleLowerCase();
        }
    }
}

//# sourceMappingURL=ConnectionFactoryBase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogConnectorFactory.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogConnectorFactory.js ***!
  \************************************************************************************************************************/
/*! exports provided: DialogConnectionFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogConnectionFactory", function() { return DialogConnectionFactory; });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.





const baseUrl = "convai.speech.microsoft.com";
const botFramework = {
    authHeader: "X-DLS-Secret",
    resourcePath: "",
    version: "v3"
};
const speechCommands = {
    authHeader: "X-CommandsAppId",
    resourcePath: "commands",
    version: "v1"
};
const pathSuffix = "api";
function getDialogSpecificValues(dialogType) {
    switch (dialogType) {
        case "speech_commands": {
            return speechCommands;
        }
        case "bot_framework": {
            return botFramework;
        }
    }
    throw new Error(`Invalid dialog type '${dialogType}'`);
}
class DialogConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_2__["ConnectionFactoryBase"] {
    constructor() {
        super(...arguments);
        this.create = (config, authInfo, connectionId) => {
            const applicationId = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].Conversation_ApplicationId, "");
            const dialogType = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].Conversation_DialogType);
            const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_Region);
            const language = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_RecoLanguage, "en-US");
            const queryParams = {};
            queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__["QueryParameterNames"].LanguageParamName] = language;
            const { resourcePath, version, authHeader } = getDialogSpecificValues(dialogType);
            const headers = {};
            headers[authInfo.headerName] = authInfo.token;
            headers[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__["QueryParameterNames"].ConnectionIdHeader] = connectionId;
            let endpoint;
            // ApplicationId is only required for CustomCommands
            if (applicationId === "") {
                endpoint = `wss://${region}.${baseUrl}/${pathSuffix}/${version}`;
            }
            else {
                endpoint = `wss://${region}.${baseUrl}/${resourcePath}/${pathSuffix}/${version}`;
                headers[authHeader] = applicationId;
            }
            return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["WebsocketConnection"](endpoint, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_3__["WebsocketMessageFormatter"](), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["ProxyInfo"].fromRecognizerConfig(config), connectionId);
        };
    }
}

//# sourceMappingURL=DialogConnectorFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceAdapter.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceAdapter.js ***!
  \**********************************************************************************************************************/
/*! exports provided: DialogServiceAdapter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogServiceAdapter", function() { return DialogServiceAdapter; });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/Exports.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _DialogServiceTurnStateManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DialogServiceTurnStateManager */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnStateManager.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _ServiceMessages_ActivityResponsePayload__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ServiceMessages/ActivityResponsePayload */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/ActivityResponsePayload.js");
/* harmony import */ var _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SpeechConnectionMessage.Internal */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.







class DialogServiceAdapter extends _Exports__WEBPACK_IMPORTED_MODULE_4__["ServiceRecognizerBase"] {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);
        this.sendMessage = (message) => {
            const interactionGuid = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_1__["createGuid"])();
            const requestId = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_1__["createNoDashGuid"])();
            const agentMessage = {
                context: {
                    interactionId: interactionGuid
                },
                messagePayload: message,
                version: 0.5
            };
            const agentMessageJson = JSON.stringify(agentMessage);
            this.fetchDialogConnection().onSuccessContinueWith((connection) => {
                connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_6__["SpeechConnectionMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Text, "agent", requestId, "application/json", agentMessageJson));
            });
        };
        this.listenOnce = (recoMode, successCallback, errorCallback) => {
            this.privRecognizerConfig.recognitionMode = recoMode;
            this.privDialogRequestSession.startNewRecognition();
            this.privDialogRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);
            // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().
            this.dialogConnectImpl();
            this.sendPreAudioMessages();
            this.privSuccessCallback = successCallback;
            return this.privDialogAudioSource
                .attach(this.privDialogRequestSession.audioNodeId)
                .continueWithPromise((result) => {
                let audioNode;
                if (result.isError) {
                    this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].ConnectionFailure, result.error, successCallback);
                    return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromError(result.error);
                }
                else {
                    audioNode = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["ReplayableAudioNode"](result.result, this.privDialogAudioSource.format);
                    this.privDialogRequestSession.onAudioSourceAttachCompleted(audioNode, false);
                }
                return this.privDialogAudioSource.deviceInfo.onSuccessContinueWithPromise((deviceInfo) => {
                    this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };
                    return this.configConnection()
                        .on((_) => {
                        const sessionStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SessionEventArgs"](this.privDialogRequestSession.sessionId);
                        if (!!this.privRecognizer.sessionStarted) {
                            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);
                        }
                        const audioSendPromise = this.sendAudio(audioNode);
                        // /* tslint:disable:no-empty */
                        audioSendPromise.on((_) => { }, (error) => {
                            this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].RuntimeError, error, successCallback);
                        });
                    }, (error) => {
                        this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].ConnectionFailure, error, successCallback);
                    }).continueWithPromise((result) => {
                        if (result.isError) {
                            return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromError(result.error);
                        }
                        else {
                            return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(true);
                        }
                    });
                });
            });
        };
        this.sendAudio = (audioStreamNode) => {
            // NOTE: Home-baked promises crash ios safari during the invocation
            // of the error callback chain (looks like the recursion is way too deep, and
            // it blows up the stack). The following construct is a stop-gap that does not
            // bubble the error up the callback chain and hence circumvents this problem.
            // TODO: rewrite with ES6 promises.
            const deferred = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__["Deferred"]();
            // The time we last sent data to the service.
            let nextSendTime = Date.now();
            const audioFormat = this.privDialogAudioSource.format;
            // Max amount to send before we start to throttle
            const fastLaneSizeMs = this.privRecognizerConfig.parameters.getProperty("SPEECH-TransmitLengthBeforThrottleMs", "5000");
            const maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);
            const startRecogNumber = this.privDialogRequestSession.recogNumber;
            const readAndUploadCycle = () => {
                // If speech is done, stop sending audio.
                if (!this.privDialogIsDisposed &&
                    !this.privDialogRequestSession.isSpeechEnded &&
                    this.privDialogRequestSession.isRecognizing &&
                    this.privDialogRequestSession.recogNumber === startRecogNumber) {
                    this.fetchDialogConnection().on((connection) => {
                        audioStreamNode.read().on((audioStreamChunk) => {
                            // we have a new audio chunk to upload.
                            if (this.privDialogRequestSession.isSpeechEnded) {
                                // If service already recognized audio end then don't send any more audio
                                deferred.resolve(true);
                                return;
                            }
                            let payload;
                            let sendDelay;
                            if (!audioStreamChunk || audioStreamChunk.isEnd) {
                                payload = null;
                                sendDelay = 0;
                            }
                            else {
                                payload = audioStreamChunk.buffer;
                                this.privDialogRequestSession.onAudioSent(payload.byteLength);
                                if (maxSendUnthrottledBytes >= this.privDialogRequestSession.bytesSent) {
                                    sendDelay = 0;
                                }
                                else {
                                    sendDelay = Math.max(0, nextSendTime - Date.now());
                                }
                            }
                            // Are we ready to send, or need we delay more?
                            setTimeout(() => {
                                if (payload !== null) {
                                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));
                                }
                                const uploaded = connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_6__["SpeechConnectionMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Binary, "audio", this.privDialogRequestSession.requestId, null, payload));
                                if (audioStreamChunk && !audioStreamChunk.isEnd) {
                                    uploaded.continueWith((_) => {
                                        // Regardless of success or failure, schedule the next upload.
                                        // If the underlying connection was broken, the next cycle will
                                        // get a new connection and re-transmit missing audio automatically.
                                        readAndUploadCycle();
                                    });
                                }
                                else {
                                    // the audio stream has been closed, no need to schedule next
                                    // read-upload cycle.
                                    this.privDialogRequestSession.onSpeechEnded();
                                    deferred.resolve(true);
                                }
                            }, sendDelay);
                        }, (error) => {
                            if (this.privDialogRequestSession.isSpeechEnded) {
                                // For whatever reason, Reject is used to remove queue subscribers inside
                                // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which
                                // means that sometimes things can be rejected in normal circumstances, without
                                // any errors.
                                deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.
                            }
                            else {
                                // Only reject, if there was a proper error.
                                deferred.reject(error);
                            }
                        });
                    }, (error) => {
                        deferred.reject(error);
                    });
                }
            };
            readAndUploadCycle();
            return deferred.promise();
        };
        this.receiveDialogMessageOverride = (successCallback, errorCallBack) => {
            // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages
            const communicationCustodian = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__["Deferred"]();
            this.fetchDialogConnection().on((connection) => {
                return connection.read()
                    .onSuccessContinueWithPromise((message) => {
                    const isDisposed = this.isDisposed();
                    const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);
                    if (isDisposed || terminateMessageLoop) {
                        // We're done.
                        communicationCustodian.resolve(undefined);
                        return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(undefined);
                    }
                    if (!message) {
                        return this.receiveDialogMessageOverride();
                    }
                    const connectionMessage = _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_6__["SpeechConnectionMessage"].fromConnectionMessage(message);
                    switch (connectionMessage.path.toLowerCase()) {
                        case "turn.start":
                            {
                                const turnRequestId = connectionMessage.requestId.toUpperCase();
                                const audioSessionReqId = this.privDialogRequestSession.requestId.toUpperCase();
                                // turn started by the service
                                if (turnRequestId !== audioSessionReqId) {
                                    this.privTurnStateManager.StartTurn(turnRequestId);
                                }
                            }
                            break;
                        case "speech.startdetected":
                            const speechStartDetected = _Exports__WEBPACK_IMPORTED_MODULE_4__["SpeechDetected"].fromJSON(connectionMessage.textBody);
                            const speechStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["RecognitionEventArgs"](speechStartDetected.Offset, this.privDialogRequestSession.sessionId);
                            if (!!this.privRecognizer.speechStartDetected) {
                                this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);
                            }
                            break;
                        case "speech.enddetected":
                            let json;
                            if (connectionMessage.textBody.length > 0) {
                                json = connectionMessage.textBody;
                            }
                            else {
                                // If the request was empty, the JSON returned is empty.
                                json = "{ Offset: 0 }";
                            }
                            const speechStopDetected = _Exports__WEBPACK_IMPORTED_MODULE_4__["SpeechDetected"].fromJSON(json);
                            this.privDialogRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privDialogRequestSession.currentTurnAudioOffset);
                            const speechStopEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["RecognitionEventArgs"](speechStopDetected.Offset + this.privDialogRequestSession.currentTurnAudioOffset, this.privDialogRequestSession.sessionId);
                            if (!!this.privRecognizer.speechEndDetected) {
                                this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);
                            }
                            break;
                        case "turn.end":
                            {
                                const turnEndRequestId = connectionMessage.requestId.toUpperCase();
                                const audioSessionReqId = this.privDialogRequestSession.requestId.toUpperCase();
                                // turn started by the service
                                if (turnEndRequestId !== audioSessionReqId) {
                                    this.privTurnStateManager.CompleteTurn(turnEndRequestId);
                                }
                                else {
                                    // Audio session turn
                                    const sessionStopEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SessionEventArgs"](this.privDialogRequestSession.sessionId);
                                    this.privDialogRequestSession.onServiceTurnEndResponse(false);
                                    if (this.privDialogRequestSession.isSpeechEnded) {
                                        if (!!this.privRecognizer.sessionStopped) {
                                            this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            this.processTypeSpecificMessages(connectionMessage, successCallback, errorCallBack);
                    }
                    return this.receiveDialogMessageOverride();
                });
            }, (error) => {
                this.terminateMessageLoop = true;
            });
            return communicationCustodian.promise();
        };
        this.fetchDialogConnection = () => {
            return this.configConnection();
        };
        this.sendAgentConfig = (connection) => {
            if (this.agentConfig && !this.agentConfigSent) {
                const agentConfigJson = this.agentConfig.toJsonString();
                this.agentConfigSent = true;
                return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_6__["SpeechConnectionMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Text, "agent.config", this.privDialogRequestSession.requestId, "application/json", agentConfigJson));
            }
            return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(true);
        };
        this.sendAgentContext = (connection) => {
            const guid = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_1__["createGuid"])();
            const agentContext = {
                channelData: "",
                context: {
                    interactionId: guid
                },
                version: 0.5
            };
            const agentContextJson = JSON.stringify(agentContext);
            return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_6__["SpeechConnectionMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Text, "speech.agent.context", this.privDialogRequestSession.requestId, "application/json", agentContextJson));
        };
        this.privDialogServiceConnector = dialogServiceConnector;
        this.privDialogAuthentication = authentication;
        this.receiveMessageOverride = this.receiveDialogMessageOverride;
        this.privTurnStateManager = new _DialogServiceTurnStateManager__WEBPACK_IMPORTED_MODULE_3__["DialogServiceTurnStateManager"]();
        this.recognizeOverride = this.listenOnce;
        this.connectImplOverride = this.dialogConnectImpl;
        this.configConnectionOverride = this.configConnection;
        this.fetchConnectionOverride = this.fetchDialogConnection;
        this.disconnectOverride = this.privDisconnect;
        this.privDialogAudioSource = audioSource;
        this.privDialogRequestSession = new _Exports__WEBPACK_IMPORTED_MODULE_4__["RequestSession"](audioSource.id());
        this.privDialogConnectionFactory = connectionFactory;
        this.privDialogIsDisposed = false;
        this.agentConfigSent = false;
    }
    isDisposed() {
        return this.privDialogIsDisposed;
    }
    dispose(reason) {
        this.privDialogIsDisposed = true;
        if (this.privConnectionConfigPromise) {
            this.privConnectionConfigPromise.onSuccessContinueWith((connection) => {
                connection.dispose(reason);
            });
        }
    }
    privDisconnect() {
        this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].NoError, "Disconnecting", undefined);
        this.terminateMessageLoop = true;
        this.agentConfigSent = false;
        if (this.privDialogConnectionPromise.result().isCompleted) {
            if (!this.privDialogConnectionPromise.result().isError) {
                this.privDialogConnectionPromise.result().result.dispose();
                this.privDialogConnectionPromise = null;
            }
        }
        else {
            this.privDialogConnectionPromise.onSuccessContinueWith((connection) => {
                connection.dispose();
            });
        }
    }
    processTypeSpecificMessages(connectionMessage, successCallback, errorCallBack) {
        const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyCollection"]();
        if (connectionMessage.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Text) {
            resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        }
        let result;
        switch (connectionMessage.path.toLowerCase()) {
            case "speech.phrase":
                const speechPhrase = _Exports__WEBPACK_IMPORTED_MODULE_4__["SimpleSpeechPhrase"].fromJSON(connectionMessage.textBody);
                this.privDialogRequestSession.onPhraseRecognized(this.privDialogRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);
                if (speechPhrase.RecognitionStatus === _Exports__WEBPACK_IMPORTED_MODULE_4__["RecognitionStatus"].Success) {
                    const args = this.fireEventForResult(speechPhrase, resultProps);
                    if (!!this.privDialogServiceConnector.recognized) {
                        try {
                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);
                            /* tslint:disable:no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                    // report result to promise.
                    if (!!this.privSuccessCallback) {
                        try {
                            this.privSuccessCallback(args.result);
                        }
                        catch (e) {
                            if (!!errorCallBack) {
                                errorCallBack(e);
                            }
                        }
                        // Only invoke the call back once.
                        // and if it's successful don't invoke the
                        // error after that.
                        this.privSuccessCallback = undefined;
                        errorCallBack = undefined;
                    }
                }
                break;
            case "speech.hypothesis":
                const hypothesis = _Exports__WEBPACK_IMPORTED_MODULE_4__["SpeechHypothesis"].fromJSON(connectionMessage.textBody);
                const offset = hypothesis.Offset + this.privDialogRequestSession.currentTurnAudioOffset;
                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechRecognitionResult"](this.privDialogRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["ResultReason"].RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, undefined, connectionMessage.textBody, resultProps);
                this.privDialogRequestSession.onHypothesis(offset);
                const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechRecognitionEventArgs"](result, hypothesis.Duration, this.privDialogRequestSession.sessionId);
                if (!!this.privDialogServiceConnector.recognizing) {
                    try {
                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);
                        /* tslint:disable:no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                break;
            case "audio":
                {
                    const audioRequestId = connectionMessage.requestId.toUpperCase();
                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);
                    try {
                        // Empty binary message signals end of stream.
                        if (!connectionMessage.binaryBody) {
                            turn.endAudioStream();
                        }
                        else {
                            turn.audioStream.write(connectionMessage.binaryBody);
                        }
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                break;
            case "response":
                {
                    const responseRequestId = connectionMessage.requestId.toUpperCase();
                    const activityPayload = _ServiceMessages_ActivityResponsePayload__WEBPACK_IMPORTED_MODULE_5__["ActivityPayloadResponse"].fromJSON(connectionMessage.textBody);
                    const turn = this.privTurnStateManager.GetTurn(responseRequestId);
                    // update the conversation Id
                    if (activityPayload.conversationId) {
                        const updateAgentConfig = this.agentConfig.get();
                        updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;
                        this.agentConfig.set(updateAgentConfig);
                    }
                    const pullAudioOutputStream = turn.processActivityPayload(activityPayload);
                    const activity = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["ActivityReceivedEventArgs"](activityPayload.messagePayload, pullAudioOutputStream);
                    if (!!this.privDialogServiceConnector.activityReceived) {
                        try {
                            this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);
                            /* tslint:disable:no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                }
                break;
            default:
                break;
        }
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error, cancelRecoCallback) {
        this.terminateMessageLoop = true;
        if (!!this.privDialogRequestSession.isRecognizing) {
            this.privDialogRequestSession.onStopRecognizing();
        }
        if (!!this.privDialogServiceConnector.canceled) {
            const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyCollection"]();
            properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_4__["CancellationErrorCodePropertyName"], _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"][errorCode]);
            const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechRecognitionCanceledEventArgs"](cancellationReason, error, errorCode, undefined, sessionId);
            try {
                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);
                /* tslint:disable:no-empty */
            }
            catch (_a) { }
            if (!!cancelRecoCallback) {
                const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechRecognitionResult"](undefined, // ResultId
                _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["ResultReason"].Canceled, undefined, // Text
                undefined, // Druation
                undefined, // Offset
                error, undefined, // Json
                properties);
                try {
                    cancelRecoCallback(result);
                    /* tslint:disable:no-empty */
                }
                catch (_b) { }
            }
        }
    }
    // Establishes a websocket connection to the end point.
    dialogConnectImpl(isUnAuthorized = false) {
        if (this.privDialogConnectionPromise) {
            if (this.privDialogConnectionPromise.result().isCompleted &&
                (this.privDialogConnectionPromise.result().isError
                    || this.privDialogConnectionPromise.result().result.state() === _common_Exports__WEBPACK_IMPORTED_MODULE_1__["ConnectionState"].Disconnected)) {
                this.agentConfigSent = false;
                this.privDialogConnectionPromise = null;
            }
            else {
                return this.privDialogConnectionPromise;
            }
        }
        this.privDialogAuthFetchEventId = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_1__["createNoDashGuid"])();
        // keep the connectionId for reconnect events
        if (this.privConnectionId === undefined) {
            this.privConnectionId = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_1__["createNoDashGuid"])();
        }
        this.privDialogRequestSession.onPreConnectionStart(this.privDialogAuthFetchEventId, this.privConnectionId);
        const authPromise = isUnAuthorized ? this.privDialogAuthentication.fetchOnExpiry(this.privDialogAuthFetchEventId) : this.privDialogAuthentication.fetch(this.privDialogAuthFetchEventId);
        this.privDialogConnectionPromise = authPromise
            .continueWithPromise((result) => {
            if (result.isError) {
                this.privDialogRequestSession.onAuthCompleted(true, result.error);
                throw new Error(result.error);
            }
            else {
                this.privDialogRequestSession.onAuthCompleted(false);
            }
            const connection = this.privDialogConnectionFactory.create(this.privRecognizerConfig, result.result, this.privConnectionId);
            this.privDialogRequestSession.listenForServiceTelemetry(connection.events);
            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,
            // it'll stop sending events.
            connection.events.attach((event) => {
                this.connectionEvents.onEvent(event);
            });
            return connection.open().onSuccessContinueWithPromise((response) => {
                if (response.statusCode === 200) {
                    this.privDialogRequestSession.onPreConnectionStart(this.privDialogAuthFetchEventId, this.privConnectionId);
                    this.privDialogRequestSession.onConnectionEstablishCompleted(response.statusCode);
                    return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(connection);
                }
                else if (response.statusCode === 403 && !isUnAuthorized) {
                    return this.dialogConnectImpl(true);
                }
                else {
                    this.privDialogRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);
                    return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromError(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);
                }
            });
        });
        this.privConnectionLoop = this.startMessageLoop();
        return this.privDialogConnectionPromise;
    }
    startMessageLoop() {
        this.terminateMessageLoop = false;
        const messageRetrievalPromise = this.receiveDialogMessageOverride();
        return messageRetrievalPromise.on((r) => {
            return true;
        }, (error) => {
            this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].RuntimeError, error, this.privSuccessCallback);
        });
    }
    // Takes an established websocket connection to the endpoint and sends speech configuration information.
    configConnection() {
        if (this.privConnectionConfigPromise) {
            if (this.privConnectionConfigPromise.result().isCompleted &&
                (this.privConnectionConfigPromise.result().isError
                    || this.privConnectionConfigPromise.result().result.state() === _common_Exports__WEBPACK_IMPORTED_MODULE_1__["ConnectionState"].Disconnected)) {
                this.privConnectionConfigPromise = null;
                return this.configConnection();
            }
            else {
                return this.privConnectionConfigPromise;
            }
        }
        this.privConnectionConfigPromise = this.dialogConnectImpl().onSuccessContinueWithPromise((connection) => {
            return this.sendSpeechServiceConfig(connection, this.privDialogRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize())
                .onSuccessContinueWithPromise((_) => {
                return this.sendAgentConfig(connection).onSuccessContinueWith((_) => {
                    return connection;
                });
            });
        });
        return this.privConnectionConfigPromise;
    }
    sendPreAudioMessages() {
        this.fetchDialogConnection().onSuccessContinueWith((connection) => {
            this.sendAgentContext(connection);
        });
    }
    fireEventForResult(serviceResult, properties) {
        const resultReason = _Exports__WEBPACK_IMPORTED_MODULE_4__["EnumTranslation"].implTranslateRecognitionResult(serviceResult.RecognitionStatus);
        const offset = serviceResult.Offset + this.privDialogRequestSession.currentTurnAudioOffset;
        const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechRecognitionResult"](this.privDialogRequestSession.requestId, resultReason, serviceResult.DisplayText, serviceResult.Duration, offset, undefined, JSON.stringify(serviceResult), properties);
        const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechRecognitionEventArgs"](result, offset, this.privDialogRequestSession.sessionId);
        return ev;
    }
}

//# sourceMappingURL=DialogServiceAdapter.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnState.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnState.js ***!
  \************************************************************************************************************************/
/*! exports provided: DialogServiceTurnState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogServiceTurnState", function() { return DialogServiceTurnState; });
/* harmony import */ var _sdk_Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Audio/AudioOutputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js");
/* harmony import */ var _ServiceMessages_ActivityResponsePayload__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ServiceMessages/ActivityResponsePayload */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/ActivityResponsePayload.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class DialogServiceTurnState {
    constructor(manager, requestId) {
        this.privRequestId = requestId;
        this.privIsCompleted = false;
        this.privAudioStream = null;
        this.privTurnManager = manager;
        this.resetTurnEndTimeout();
        // tslint:disable-next-line:no-console
        // console.info("DialogServiceTurnState debugturn start:" + this.privRequestId);
    }
    get audioStream() {
        // Called when is needed to stream.
        this.resetTurnEndTimeout();
        return this.privAudioStream;
    }
    processActivityPayload(payload) {
        if (payload.messageDataStreamType === _ServiceMessages_ActivityResponsePayload__WEBPACK_IMPORTED_MODULE_1__["MessageDataStreamType"].TextToSpeechAudio) {
            this.privAudioStream = _sdk_Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_0__["AudioOutputStream"].createPullStream();
            // tslint:disable-next-line:no-console
            // console.info("Audio start debugturn:" + this.privRequestId);
        }
        return this.privAudioStream;
    }
    endAudioStream() {
        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {
            this.privAudioStream.close();
        }
    }
    complete() {
        if (this.privTimeoutToken !== undefined) {
            clearTimeout(this.privTimeoutToken);
        }
        this.endAudioStream();
    }
    resetTurnEndTimeout() {
        if (this.privTimeoutToken !== undefined) {
            clearTimeout(this.privTimeoutToken);
        }
        // tslint:disable-next-line:no-console
        // console.info("Timeout reset debugturn:" + this.privRequestId);
        this.privTimeoutToken = setTimeout(() => {
            // tslint:disable-next-line:no-console
            // console.info("Timeout complete debugturn:" + this.privRequestId);
            this.privTurnManager.CompleteTurn(this.privRequestId);
            return;
        }, 2000);
    }
}

//# sourceMappingURL=DialogServiceTurnState.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnStateManager.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnStateManager.js ***!
  \*******************************************************************************************************************************/
/*! exports provided: DialogServiceTurnStateManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogServiceTurnStateManager", function() { return DialogServiceTurnStateManager; });
/* harmony import */ var _common_Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _DialogServiceTurnState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DialogServiceTurnState */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceTurnState.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class DialogServiceTurnStateManager {
    constructor() {
        this.privTurnMap = new Map();
        return;
    }
    StartTurn(id) {
        if (this.privTurnMap.has(id)) {
            throw new _common_Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"]("Service error: There is already a turn with id:" + id);
        }
        const turnState = new _DialogServiceTurnState__WEBPACK_IMPORTED_MODULE_1__["DialogServiceTurnState"](this, id);
        this.privTurnMap.set(id, turnState);
        return this.privTurnMap.get(id);
    }
    GetTurn(id) {
        return this.privTurnMap.get(id);
    }
    CompleteTurn(id) {
        if (!this.privTurnMap.has(id)) {
            throw new _common_Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"]("Service error: Received turn end for an unknown turn id:" + id);
        }
        const turnState = this.privTurnMap.get(id);
        turnState.complete();
        this.privTurnMap.delete(id);
        return turnState;
    }
}

//# sourceMappingURL=DialogServiceTurnStateManager.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarBuilder.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarBuilder.js ***!
  \***********************************************************************************************************************/
/*! exports provided: DynamicGrammarBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicGrammarBuilder", function() { return DynamicGrammarBuilder; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Responsible for building the object to be sent to the speech service to support dynamic grammars.
 * @class DynamicGrammarBuilder
 */
class DynamicGrammarBuilder {
    // Adds one more reference phrases to the dynamic grammar to send.
    // All added phrases are generic phrases.
    addPhrase(phrase) {
        if (!this.privPhrases) {
            this.privPhrases = [];
        }
        if (phrase instanceof Array) {
            this.privPhrases = this.privPhrases.concat(phrase);
        }
        else {
            this.privPhrases.push(phrase);
        }
    }
    // Clears all phrases stored in the current object.
    clearPhrases() {
        this.privPhrases = undefined;
    }
    // Adds one or more reference grammars to the current grammar.
    addReferenceGrammar(grammar) {
        if (!this.privGrammars) {
            this.privGrammars = [];
        }
        if (grammar instanceof Array) {
            this.privGrammars = this.privGrammars.concat(grammar);
        }
        else {
            this.privGrammars.push(grammar);
        }
    }
    // clears all grammars stored on the recognizer.
    clearGrammars() {
        this.privGrammars = undefined;
    }
    // Generates an object that represents the dynamic grammar used by the Speech Service.
    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance
    // of a DynamicGrammarBuilder
    generateGrammarObject() {
        if (this.privGrammars === undefined && this.privPhrases === undefined) {
            return undefined;
        }
        const retObj = {};
        retObj.ReferenceGrammars = this.privGrammars;
        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {
            const retPhrases = [];
            this.privPhrases.forEach((value, index, array) => {
                retPhrases.push({
                    Text: value,
                });
            });
            retObj.Groups = [{ Type: "Generic", Items: retPhrases }];
        }
        return retObj;
    }
}

//# sourceMappingURL=DynamicGrammarBuilder.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js ***!
  \*****************************************************************************************************************/
/*! exports provided: EnumTranslation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EnumTranslation", function() { return EnumTranslation; });
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class EnumTranslation {
    static implTranslateRecognitionResult(recognitionStatus) {
        let reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["ResultReason"].Canceled;
        switch (recognitionStatus) {
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].Success:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["ResultReason"].RecognizedSpeech;
                break;
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].NoMatch:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].InitialSilenceTimeout:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].BabbleTimeout:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].EndOfDictation:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["ResultReason"].NoMatch;
                break;
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].Error:
            default:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["ResultReason"].Canceled;
                break;
        }
        return reason;
    }
    static implTranslateCancelResult(recognitionStatus) {
        let reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["CancellationReason"].EndOfStream;
        switch (recognitionStatus) {
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].Success:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].EndOfDictation:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].NoMatch:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["CancellationReason"].EndOfStream;
                break;
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].InitialSilenceTimeout:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].BabbleTimeout:
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].Error:
            default:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["CancellationReason"].Error;
                break;
        }
        return reason;
    }
    static implTranslateCancelErrorCode(recognitionStatus) {
        let reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["CancellationErrorCode"].NoError;
        switch (recognitionStatus) {
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].Error:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["CancellationErrorCode"].ServiceError;
                break;
            case _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].TooManyRequests:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["CancellationErrorCode"].TooManyRequests;
                break;
            default:
                reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["CancellationErrorCode"].NoError;
                break;
        }
        return reason;
    }
}

//# sourceMappingURL=EnumTranslation.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js ***!
  \*********************************************************************************************************/
/*! exports provided: CognitiveSubscriptionKeyAuthentication, CognitiveTokenAuthentication, AuthInfo, IntentConnectionFactory, SpeechRecognitionEvent, RecognitionTriggeredEvent, ListeningStartedEvent, ConnectingToServiceEvent, RecognitionStartedEvent, RecognitionCompletionStatus, RecognitionEndedEvent, ServiceRecognizerBase, RecognitionMode, SpeechResultFormat, RecognizerConfig, SpeechServiceConfig, Context, System, OS, Device, connectivity, type, WebsocketMessageFormatter, SpeechConnectionFactory, TranslationConnectionFactory, EnumTranslation, SynthesisStatus, RecognitionStatus, TranslationSynthesisEnd, TranslationHypothesis, TranslationPhrase, TranslationServiceRecognizer, SpeechDetected, SpeechHypothesis, SpeechServiceRecognizer, DetailedSpeechPhrase, SimpleSpeechPhrase, AddedLmIntent, IntentServiceRecognizer, IntentResponse, RequestSession, SpeechContext, DynamicGrammarBuilder, DialogServiceAdapter, AgentConfig, OutputFormatPropertyName, CancellationErrorCodePropertyName, ServicePropertiesPropertyName, ForceDictationPropertyName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutputFormatPropertyName", function() { return OutputFormatPropertyName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancellationErrorCodePropertyName", function() { return CancellationErrorCodePropertyName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServicePropertiesPropertyName", function() { return ServicePropertiesPropertyName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForceDictationPropertyName", function() { return ForceDictationPropertyName; });
/* harmony import */ var _CognitiveSubscriptionKeyAuthentication__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CognitiveSubscriptionKeyAuthentication */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CognitiveSubscriptionKeyAuthentication", function() { return _CognitiveSubscriptionKeyAuthentication__WEBPACK_IMPORTED_MODULE_0__["CognitiveSubscriptionKeyAuthentication"]; });

/* harmony import */ var _CognitiveTokenAuthentication__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CognitiveTokenAuthentication */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CognitiveTokenAuthentication", function() { return _CognitiveTokenAuthentication__WEBPACK_IMPORTED_MODULE_1__["CognitiveTokenAuthentication"]; });

/* harmony import */ var _IAuthentication__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./IAuthentication */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AuthInfo", function() { return _IAuthentication__WEBPACK_IMPORTED_MODULE_2__["AuthInfo"]; });

/* harmony import */ var _IntentConnectionFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IntentConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentConnectionFactory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentConnectionFactory", function() { return _IntentConnectionFactory__WEBPACK_IMPORTED_MODULE_3__["IntentConnectionFactory"]; });

/* harmony import */ var _RecognitionEvents__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RecognitionEvents */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionEvent", function() { return _RecognitionEvents__WEBPACK_IMPORTED_MODULE_4__["SpeechRecognitionEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognitionTriggeredEvent", function() { return _RecognitionEvents__WEBPACK_IMPORTED_MODULE_4__["RecognitionTriggeredEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListeningStartedEvent", function() { return _RecognitionEvents__WEBPACK_IMPORTED_MODULE_4__["ListeningStartedEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectingToServiceEvent", function() { return _RecognitionEvents__WEBPACK_IMPORTED_MODULE_4__["ConnectingToServiceEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognitionStartedEvent", function() { return _RecognitionEvents__WEBPACK_IMPORTED_MODULE_4__["RecognitionStartedEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognitionCompletionStatus", function() { return _RecognitionEvents__WEBPACK_IMPORTED_MODULE_4__["RecognitionCompletionStatus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognitionEndedEvent", function() { return _RecognitionEvents__WEBPACK_IMPORTED_MODULE_4__["RecognitionEndedEvent"]; });

/* harmony import */ var _ServiceRecognizerBase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ServiceRecognizerBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServiceRecognizerBase", function() { return _ServiceRecognizerBase__WEBPACK_IMPORTED_MODULE_5__["ServiceRecognizerBase"]; });

/* harmony import */ var _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./RecognizerConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognitionMode", function() { return _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__["RecognitionMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechResultFormat", function() { return _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__["SpeechResultFormat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognizerConfig", function() { return _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__["RecognizerConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechServiceConfig", function() { return _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__["SpeechServiceConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Context", function() { return _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__["Context"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "System", function() { return _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__["System"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OS", function() { return _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__["OS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Device", function() { return _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__["Device"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "connectivity", function() { return _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__["connectivity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "type", function() { return _RecognizerConfig__WEBPACK_IMPORTED_MODULE_6__["type"]; });

/* harmony import */ var _WebsocketMessageFormatter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./WebsocketMessageFormatter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebsocketMessageFormatter", function() { return _WebsocketMessageFormatter__WEBPACK_IMPORTED_MODULE_7__["WebsocketMessageFormatter"]; });

/* harmony import */ var _SpeechConnectionFactory__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SpeechConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionFactory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechConnectionFactory", function() { return _SpeechConnectionFactory__WEBPACK_IMPORTED_MODULE_8__["SpeechConnectionFactory"]; });

/* harmony import */ var _TranslationConnectionFactory__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./TranslationConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationConnectionFactory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationConnectionFactory", function() { return _TranslationConnectionFactory__WEBPACK_IMPORTED_MODULE_9__["TranslationConnectionFactory"]; });

/* harmony import */ var _EnumTranslation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./EnumTranslation */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/EnumTranslation.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EnumTranslation", function() { return _EnumTranslation__WEBPACK_IMPORTED_MODULE_10__["EnumTranslation"]; });

/* harmony import */ var _ServiceMessages_Enums__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ServiceMessages/Enums */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SynthesisStatus", function() { return _ServiceMessages_Enums__WEBPACK_IMPORTED_MODULE_11__["SynthesisStatus"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognitionStatus", function() { return _ServiceMessages_Enums__WEBPACK_IMPORTED_MODULE_11__["RecognitionStatus"]; });

/* harmony import */ var _ServiceMessages_TranslationSynthesisEnd__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ServiceMessages/TranslationSynthesisEnd */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationSynthesisEnd", function() { return _ServiceMessages_TranslationSynthesisEnd__WEBPACK_IMPORTED_MODULE_12__["TranslationSynthesisEnd"]; });

/* harmony import */ var _ServiceMessages_TranslationHypothesis__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ServiceMessages/TranslationHypothesis */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationHypothesis.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationHypothesis", function() { return _ServiceMessages_TranslationHypothesis__WEBPACK_IMPORTED_MODULE_13__["TranslationHypothesis"]; });

/* harmony import */ var _ServiceMessages_TranslationPhrase__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ServiceMessages/TranslationPhrase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationPhrase.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationPhrase", function() { return _ServiceMessages_TranslationPhrase__WEBPACK_IMPORTED_MODULE_14__["TranslationPhrase"]; });

/* harmony import */ var _TranslationServiceRecognizer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./TranslationServiceRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationServiceRecognizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationServiceRecognizer", function() { return _TranslationServiceRecognizer__WEBPACK_IMPORTED_MODULE_15__["TranslationServiceRecognizer"]; });

/* harmony import */ var _ServiceMessages_SpeechDetected__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ServiceMessages/SpeechDetected */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechDetected.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechDetected", function() { return _ServiceMessages_SpeechDetected__WEBPACK_IMPORTED_MODULE_16__["SpeechDetected"]; });

/* harmony import */ var _ServiceMessages_SpeechHypothesis__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ServiceMessages/SpeechHypothesis */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechHypothesis", function() { return _ServiceMessages_SpeechHypothesis__WEBPACK_IMPORTED_MODULE_17__["SpeechHypothesis"]; });

/* harmony import */ var _SpeechServiceRecognizer__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./SpeechServiceRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceRecognizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechServiceRecognizer", function() { return _SpeechServiceRecognizer__WEBPACK_IMPORTED_MODULE_18__["SpeechServiceRecognizer"]; });

/* harmony import */ var _ServiceMessages_DetailedSpeechPhrase__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ServiceMessages/DetailedSpeechPhrase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DetailedSpeechPhrase", function() { return _ServiceMessages_DetailedSpeechPhrase__WEBPACK_IMPORTED_MODULE_19__["DetailedSpeechPhrase"]; });

/* harmony import */ var _ServiceMessages_SimpleSpeechPhrase__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ServiceMessages/SimpleSpeechPhrase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SimpleSpeechPhrase", function() { return _ServiceMessages_SimpleSpeechPhrase__WEBPACK_IMPORTED_MODULE_20__["SimpleSpeechPhrase"]; });

/* harmony import */ var _AddedLmIntent__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./AddedLmIntent */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AddedLmIntent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AddedLmIntent", function() { return _AddedLmIntent__WEBPACK_IMPORTED_MODULE_21__["AddedLmIntent"]; });

/* harmony import */ var _IntentServiceRecognizer__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./IntentServiceRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentServiceRecognizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentServiceRecognizer", function() { return _IntentServiceRecognizer__WEBPACK_IMPORTED_MODULE_22__["IntentServiceRecognizer"]; });

/* harmony import */ var _ServiceMessages_IntentResponse__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./ServiceMessages/IntentResponse */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/IntentResponse.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentResponse", function() { return _ServiceMessages_IntentResponse__WEBPACK_IMPORTED_MODULE_23__["IntentResponse"]; });

/* harmony import */ var _RequestSession__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./RequestSession */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RequestSession.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequestSession", function() { return _RequestSession__WEBPACK_IMPORTED_MODULE_24__["RequestSession"]; });

/* harmony import */ var _SpeechContext__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./SpeechContext */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechContext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechContext", function() { return _SpeechContext__WEBPACK_IMPORTED_MODULE_25__["SpeechContext"]; });

/* harmony import */ var _DynamicGrammarBuilder__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./DynamicGrammarBuilder */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DynamicGrammarBuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DynamicGrammarBuilder", function() { return _DynamicGrammarBuilder__WEBPACK_IMPORTED_MODULE_26__["DynamicGrammarBuilder"]; });

/* harmony import */ var _DialogServiceAdapter__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./DialogServiceAdapter */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogServiceAdapter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogServiceAdapter", function() { return _DialogServiceAdapter__WEBPACK_IMPORTED_MODULE_27__["DialogServiceAdapter"]; });

/* harmony import */ var _AgentConfig__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./AgentConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AgentConfig", function() { return _AgentConfig__WEBPACK_IMPORTED_MODULE_28__["AgentConfig"]; });

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// Make sure not to export internal modules.
//





























const OutputFormatPropertyName = "OutputFormat";
const CancellationErrorCodePropertyName = "CancellationErrorCode";
const ServicePropertiesPropertyName = "ServiceProperties";
const ForceDictationPropertyName = "ForceDication";

//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js ***!
  \*****************************************************************************************************************/
/*! exports provided: AuthInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthInfo", function() { return AuthInfo; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class AuthInfo {
    constructor(headerName, token) {
        this.privHeaderName = headerName;
        this.privToken = token;
    }
    get headerName() {
        return this.privHeaderName;
    }
    get token() {
        return this.privToken;
    }
}

//# sourceMappingURL=IAuthentication.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentConnectionFactory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentConnectionFactory.js ***!
  \*************************************************************************************************************************/
/*! exports provided: IntentConnectionFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntentConnectionFactory", function() { return IntentConnectionFactory; });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.




const TestHooksParamName = "testhooks";
const ConnectionIdHeader = "X-ConnectionId";
class IntentConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_2__["ConnectionFactoryBase"] {
    constructor() {
        super(...arguments);
        this.create = (config, authInfo, connectionId) => {
            let endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_Endpoint);
            if (!endpoint) {
                const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_IntentRegion);
                endpoint = "wss://speech.platform.bing.com/speech/" + this.getSpeechRegionFromIntentRegion(region) + "/recognition/interactive/cognitiveservices/v1";
            }
            const queryParams = {
                format: "simple",
                language: config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_RecoLanguage),
            };
            this.setCommonUrlParams(config, queryParams, endpoint);
            const headers = {};
            headers[authInfo.headerName] = authInfo.token;
            headers[ConnectionIdHeader] = connectionId;
            return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["WebsocketConnection"](endpoint, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_3__["WebsocketMessageFormatter"](), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["ProxyInfo"].fromRecognizerConfig(config), connectionId);
        };
    }
    getSpeechRegionFromIntentRegion(intentRegion) {
        switch (intentRegion) {
            case "West US":
            case "US West":
            case "westus":
                return "uswest";
            case "West US 2":
            case "US West 2":
            case "westus2":
                return "uswest2";
            case "South Central US":
            case "US South Central":
            case "southcentralus":
                return "ussouthcentral";
            case "West Central US":
            case "US West Central":
            case "westcentralus":
                return "uswestcentral";
            case "East US":
            case "US East":
            case "eastus":
                return "useast";
            case "East US 2":
            case "US East 2":
            case "eastus2":
                return "useast2";
            case "West Europe":
            case "Europe West":
            case "westeurope":
                return "europewest";
            case "North Europe":
            case "Europe North":
            case "northeurope":
                return "europenorth";
            case "Brazil South":
            case "South Brazil":
            case "southbrazil":
                return "brazilsouth";
            case "Australia East":
            case "East Australia":
            case "eastaustralia":
                return "australiaeast";
            case "Southeast Asia":
            case "Asia Southeast":
            case "southeastasia":
                return "asiasoutheast";
            case "East Asia":
            case "Asia East":
            case "eastasia":
                return "asiaeast";
            default:
                return intentRegion;
        }
    }
}

//# sourceMappingURL=IntentConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentServiceRecognizer.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IntentServiceRecognizer.js ***!
  \*************************************************************************************************************************/
/*! exports provided: IntentServiceRecognizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntentServiceRecognizer", function() { return IntentServiceRecognizer; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



// tslint:disable-next-line:max-classes-per-file
class IntentServiceRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_2__["ServiceRecognizerBase"] {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);
        this.privIntentRecognizer = recognizer;
        this.privIntentDataSent = false;
    }
    setIntents(addedIntents, umbrellaIntent) {
        this.privAddedLmIntents = addedIntents;
        this.privUmbrellaIntent = umbrellaIntent;
        this.privIntentDataSent = true;
    }
    processTypeSpecificMessages(connectionMessage, successCallback, errorCallBack) {
        let result;
        let ev;
        const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyCollection"]();
        if (connectionMessage.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Text) {
            resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        }
        switch (connectionMessage.path.toLowerCase()) {
            case "speech.hypothesis":
                const speechHypothesis = _Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechHypothesis"].fromJSON(connectionMessage.textBody);
                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["IntentRecognitionResult"](undefined, this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].RecognizingIntent, speechHypothesis.Text, speechHypothesis.Duration, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);
                this.privRequestSession.onHypothesis(result.offset);
                ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["IntentRecognitionEventArgs"](result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);
                if (!!this.privIntentRecognizer.recognizing) {
                    try {
                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);
                        /* tslint:disable:no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                break;
            case "speech.phrase":
                const simple = _Exports__WEBPACK_IMPORTED_MODULE_2__["SimpleSpeechPhrase"].fromJSON(connectionMessage.textBody);
                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["IntentRecognitionResult"](undefined, this.privRequestSession.requestId, _Exports__WEBPACK_IMPORTED_MODULE_2__["EnumTranslation"].implTranslateRecognitionResult(simple.RecognitionStatus), simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);
                ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["IntentRecognitionEventArgs"](result, result.offset, this.privRequestSession.sessionId);
                const sendEvent = () => {
                    if (!!this.privIntentRecognizer.recognized) {
                        try {
                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);
                            /* tslint:disable:no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                    // report result to promise.
                    if (!!successCallback) {
                        try {
                            successCallback(result);
                        }
                        catch (e) {
                            if (!!errorCallBack) {
                                errorCallBack(e);
                            }
                        }
                        // Only invoke the call back once.
                        // and if it's successful don't invoke the
                        // error after that.
                        successCallback = undefined;
                        errorCallBack = undefined;
                    }
                };
                // If intent data was sent, the terminal result for this recognizer is an intent being found.
                // If no intent data was sent, the terminal event is speech recognition being successful.
                if (false === this.privIntentDataSent || _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].NoMatch === ev.result.reason) {
                    // Advance the buffers.
                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);
                    sendEvent();
                }
                else {
                    // Squirrel away the args, when the response event arrives it will build upon them
                    // and then return
                    this.privPendingIntentArgs = ev;
                }
                break;
            case "response":
                // Response from LUIS
                ev = this.privPendingIntentArgs;
                this.privPendingIntentArgs = undefined;
                if (undefined === ev) {
                    if ("" === connectionMessage.textBody) {
                        // This condition happens if there is nothing but silence in the
                        // audio sent to the service.
                        return;
                    }
                    // Odd... Not sure this can happen
                    ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["IntentRecognitionEventArgs"](new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["IntentRecognitionResult"](), 0 /*TODO*/, this.privRequestSession.sessionId);
                }
                const intentResponse = _Exports__WEBPACK_IMPORTED_MODULE_2__["IntentResponse"].fromJSON(connectionMessage.textBody);
                // If LUIS didn't return anything, send the existing event, else
                // modify it to show the match.
                // See if the intent found is in the list of intents asked for.
                let addedIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];
                if (this.privUmbrellaIntent !== undefined) {
                    addedIntent = this.privUmbrellaIntent;
                }
                if (null !== intentResponse && addedIntent !== undefined) {
                    const intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;
                    let reason = ev.result.reason;
                    if (undefined !== intentId) {
                        reason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].RecognizedIntent;
                    }
                    // make sure, properties is set.
                    const properties = (undefined !== ev.result.properties) ?
                        ev.result.properties : new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyCollection"]();
                    properties.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);
                    ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["IntentRecognitionEventArgs"](new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["IntentRecognitionResult"](intentId, ev.result.resultId, reason, ev.result.text, ev.result.duration, ev.result.offset, ev.result.errorDetails, ev.result.json, properties), ev.offset, ev.sessionId);
                }
                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);
                if (!!this.privIntentRecognizer.recognized) {
                    try {
                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);
                        /* tslint:disable:no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                // report result to promise.
                if (!!successCallback) {
                    try {
                        successCallback(ev.result);
                    }
                    catch (e) {
                        if (!!errorCallBack) {
                            errorCallBack(e);
                        }
                    }
                    // Only invoke the call back once.
                    // and if it's successful don't invoke the
                    // error after that.
                    successCallback = undefined;
                    errorCallBack = undefined;
                }
                break;
            default:
                break;
        }
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error, cancelRecoCallback) {
        const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyCollection"]();
        properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCodePropertyName"], _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["CancellationErrorCode"][errorCode]);
        if (!!this.privIntentRecognizer.canceled) {
            const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["IntentRecognitionCanceledEventArgs"](cancellationReason, error, errorCode, undefined, undefined, sessionId);
            try {
                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);
                /* tslint:disable:no-empty */
            }
            catch (_a) { }
        }
        if (!!cancelRecoCallback) {
            const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["IntentRecognitionResult"](undefined, // Intent Id
            requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].Canceled, undefined, // Text
            undefined, // Druation
            undefined, // Offset
            error, undefined, // Json
            properties);
            try {
                cancelRecoCallback(result);
                /* tslint:disable:no-empty */
            }
            catch (_b) { }
        }
    }
}

//# sourceMappingURL=IntentServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js ***!
  \*********************************************************************************************************************/
/*! exports provided: QueryParameterNames */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryParameterNames", function() { return QueryParameterNames; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class QueryParameterNames {
    static get TestHooksParamName() {
        return "testhooks";
    }
    static get ConnectionIdHeader() {
        return "X-ConnectionId";
    }
    static get DeploymentIdParamName() {
        return "cid";
    }
    static get FormatParamName() {
        return "format";
    }
    static get LanguageParamName() {
        return "language";
    }
    static get TranslationFromParamName() {
        return "from";
    }
    static get TranslationToParamName() {
        return "to";
    }
    static get Profanify() {
        return "profanity";
    }
    static get EnableAudioLogging() {
        return "storeAudio";
    }
    static get EnableWordLevelTimestamps() {
        return "wordLevelTimestamps";
    }
    static get InitialSilenceTimeoutMs() {
        return "initialSilenceTimeoutMs";
    }
    static get EndSilenceTimeoutMs() {
        return "endSilenceTimeoutMs";
    }
    static get StableIntermediateThreshold() {
        return "stableIntermediateThreshold";
    }
    static get StableTranslation() {
        return "stableTranslation";
    }
}

//# sourceMappingURL=QueryParameterNames.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js ***!
  \*******************************************************************************************************************/
/*! exports provided: SpeechRecognitionEvent, RecognitionTriggeredEvent, ListeningStartedEvent, ConnectingToServiceEvent, RecognitionStartedEvent, RecognitionCompletionStatus, RecognitionEndedEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionEvent", function() { return SpeechRecognitionEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognitionTriggeredEvent", function() { return RecognitionTriggeredEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListeningStartedEvent", function() { return ListeningStartedEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectingToServiceEvent", function() { return ConnectingToServiceEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognitionStartedEvent", function() { return RecognitionStartedEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognitionCompletionStatus", function() { return RecognitionCompletionStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognitionEndedEvent", function() { return RecognitionEndedEvent; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class SpeechRecognitionEvent extends _common_Exports__WEBPACK_IMPORTED_MODULE_0__["PlatformEvent"] {
    constructor(eventName, requestId, sessionId, eventType = _common_Exports__WEBPACK_IMPORTED_MODULE_0__["EventType"].Info) {
        super(eventName, eventType);
        this.privRequestId = requestId;
        this.privSessionId = sessionId;
    }
    get requestId() {
        return this.privRequestId;
    }
    get sessionId() {
        return this.privSessionId;
    }
}
// tslint:disable-next-line:max-classes-per-file
class RecognitionTriggeredEvent extends SpeechRecognitionEvent {
    constructor(requestId, sessionId, audioSourceId, audioNodeId) {
        super("RecognitionTriggeredEvent", requestId, sessionId);
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
    }
    get audioSourceId() {
        return this.privAudioSourceId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
}
// tslint:disable-next-line:max-classes-per-file
class ListeningStartedEvent extends SpeechRecognitionEvent {
    constructor(requestId, sessionId, audioSourceId, audioNodeId) {
        super("ListeningStartedEvent", requestId, sessionId);
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
    }
    get audioSourceId() {
        return this.privAudioSourceId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
}
// tslint:disable-next-line:max-classes-per-file
class ConnectingToServiceEvent extends SpeechRecognitionEvent {
    constructor(requestId, authFetchEventid, sessionId) {
        super("ConnectingToServiceEvent", requestId, sessionId);
        this.privAuthFetchEventid = authFetchEventid;
    }
    get authFetchEventid() {
        return this.privAuthFetchEventid;
    }
}
// tslint:disable-next-line:max-classes-per-file
class RecognitionStartedEvent extends SpeechRecognitionEvent {
    constructor(requestId, audioSourceId, audioNodeId, authFetchEventId, sessionId) {
        super("RecognitionStartedEvent", requestId, sessionId);
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
        this.privAuthFetchEventId = authFetchEventId;
    }
    get audioSourceId() {
        return this.privAudioSourceId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
    get authFetchEventId() {
        return this.privAuthFetchEventId;
    }
}
var RecognitionCompletionStatus;
(function (RecognitionCompletionStatus) {
    RecognitionCompletionStatus[RecognitionCompletionStatus["Success"] = 0] = "Success";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AudioSourceError"] = 1] = "AudioSourceError";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AudioSourceTimeout"] = 2] = "AudioSourceTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AuthTokenFetchError"] = 3] = "AuthTokenFetchError";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AuthTokenFetchTimeout"] = 4] = "AuthTokenFetchTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["UnAuthorized"] = 5] = "UnAuthorized";
    RecognitionCompletionStatus[RecognitionCompletionStatus["ConnectTimeout"] = 6] = "ConnectTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["ConnectError"] = 7] = "ConnectError";
    RecognitionCompletionStatus[RecognitionCompletionStatus["ClientRecognitionActivityTimeout"] = 8] = "ClientRecognitionActivityTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["UnknownError"] = 9] = "UnknownError";
})(RecognitionCompletionStatus || (RecognitionCompletionStatus = {}));
// tslint:disable-next-line:max-classes-per-file
class RecognitionEndedEvent extends SpeechRecognitionEvent {
    constructor(requestId, audioSourceId, audioNodeId, authFetchEventId, sessionId, serviceTag, status, error) {
        super("RecognitionEndedEvent", requestId, sessionId, status === RecognitionCompletionStatus.Success ? _common_Exports__WEBPACK_IMPORTED_MODULE_0__["EventType"].Info : _common_Exports__WEBPACK_IMPORTED_MODULE_0__["EventType"].Error);
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
        this.privAuthFetchEventId = authFetchEventId;
        this.privStatus = status;
        this.privError = error;
        this.privServiceTag = serviceTag;
    }
    get audioSourceId() {
        return this.privAudioSourceId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
    get authFetchEventId() {
        return this.privAuthFetchEventId;
    }
    get serviceTag() {
        return this.privServiceTag;
    }
    get status() {
        return this.privStatus;
    }
    get error() {
        return this.privError;
    }
}

//# sourceMappingURL=RecognitionEvents.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js ***!
  \******************************************************************************************************************/
/*! exports provided: RecognitionMode, SpeechResultFormat, RecognizerConfig, SpeechServiceConfig, Context, System, OS, Device, connectivity, type */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognitionMode", function() { return RecognitionMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechResultFormat", function() { return SpeechResultFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognizerConfig", function() { return RecognizerConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechServiceConfig", function() { return SpeechServiceConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Context", function() { return Context; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "System", function() { return System; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OS", function() { return OS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Device", function() { return Device; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectivity", function() { return connectivity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "type", function() { return type; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var RecognitionMode;
(function (RecognitionMode) {
    RecognitionMode[RecognitionMode["Interactive"] = 0] = "Interactive";
    RecognitionMode[RecognitionMode["Conversation"] = 1] = "Conversation";
    RecognitionMode[RecognitionMode["Dictation"] = 2] = "Dictation";
})(RecognitionMode || (RecognitionMode = {}));
var SpeechResultFormat;
(function (SpeechResultFormat) {
    SpeechResultFormat[SpeechResultFormat["Simple"] = 0] = "Simple";
    SpeechResultFormat[SpeechResultFormat["Detailed"] = 1] = "Detailed";
})(SpeechResultFormat || (SpeechResultFormat = {}));
class RecognizerConfig {
    constructor(speechServiceConfig, parameters) {
        this.privRecognitionMode = RecognitionMode.Interactive;
        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));
        this.privParameters = parameters;
    }
    get parameters() {
        return this.privParameters;
    }
    get recognitionMode() {
        return this.privRecognitionMode;
    }
    set recognitionMode(value) {
        this.privRecognitionMode = value;
        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;
        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];
    }
    get SpeechServiceConfig() {
        return this.privSpeechServiceConfig;
    }
    get recognitionActivityTimeout() {
        return this.privRecognitionActivityTimeout;
    }
    get isContinuousRecognition() {
        return this.privRecognitionMode !== RecognitionMode.Interactive;
    }
}
// The config is serialized and sent as the Speech.Config
// tslint:disable-next-line:max-classes-per-file
class SpeechServiceConfig {
    constructor(context) {
        this.serialize = () => {
            return JSON.stringify(this, (key, value) => {
                if (value && typeof value === "object") {
                    const replacement = {};
                    for (const k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];
                        }
                    }
                    return replacement;
                }
                return value;
            });
        };
        this.context = context;
    }
    get Context() {
        return this.context;
    }
    get Recognition() {
        return this.recognition;
    }
    set Recognition(value) {
        this.recognition = value.toLowerCase();
    }
}
// tslint:disable-next-line:max-classes-per-file
class Context {
    constructor(os) {
        this.system = new System();
        this.os = os;
    }
}
// tslint:disable-next-line:max-classes-per-file
class System {
    constructor() {
        // Note: below will be patched for official builds.
        const SPEECHSDK_CLIENTSDK_VERSION = "1.6.0-alpha.0.1";
        this.name = "SpeechSDK";
        this.version = SPEECHSDK_CLIENTSDK_VERSION;
        this.build = "JavaScript";
        this.lang = "JavaScript";
    }
}
// tslint:disable-next-line:max-classes-per-file
class OS {
    constructor(platform, name, version) {
        this.platform = platform;
        this.name = name;
        this.version = version;
    }
}
// tslint:disable-next-line:max-classes-per-file
class Device {
    constructor(manufacturer, model, version) {
        this.manufacturer = manufacturer;
        this.model = model;
        this.version = version;
    }
}
var connectivity;
(function (connectivity) {
    connectivity["Bluetooth"] = "Bluetooth";
    connectivity["Wired"] = "Wired";
    connectivity["WiFi"] = "WiFi";
    connectivity["Cellular"] = "Cellular";
    connectivity["InBuilt"] = "InBuilt";
    connectivity["Unknown"] = "Unknown";
})(connectivity || (connectivity = {}));
var type;
(function (type) {
    type["Phone"] = "Phone";
    type["Speaker"] = "Speaker";
    type["Car"] = "Car";
    type["Headset"] = "Headset";
    type["Thermostat"] = "Thermostat";
    type["Microphones"] = "Microphones";
    type["Deskphone"] = "Deskphone";
    type["RemoteControl"] = "RemoteControl";
    type["Unknown"] = "Unknown";
    type["File"] = "File";
    type["Stream"] = "Stream";
})(type || (type = {}));

//# sourceMappingURL=RecognizerConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RequestSession.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RequestSession.js ***!
  \****************************************************************************************************************/
/*! exports provided: RequestSession */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RequestSession", function() { return RequestSession; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _RecognitionEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RecognitionEvents */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js");
/* harmony import */ var _ServiceTelemetryListener_Internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ServiceTelemetryListener.Internal */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceTelemetryListener.Internal.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class RequestSession {
    constructor(audioSourceId) {
        this.privIsDisposed = false;
        this.privDetachables = new Array();
        this.privIsAudioNodeDetached = false;
        this.privIsRecognizing = false;
        this.privIsSpeechEnded = false;
        this.privTurnStartAudioOffset = 0;
        this.privLastRecoOffset = 0;
        this.privHypothesisReceived = false;
        this.privBytesSent = 0;
        this.privRecogNumber = 0;
        this.onAudioSourceAttachCompleted = (audioNode, isError, error) => {
            this.privAudioNode = audioNode;
            this.privIsAudioNodeDetached = false;
            if (isError) {
                this.onComplete();
            }
            else {
                this.onEvent(new _RecognitionEvents__WEBPACK_IMPORTED_MODULE_1__["ListeningStartedEvent"](this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));
            }
        };
        this.onPreConnectionStart = (authFetchEventId, connectionId) => {
            this.privAuthFetchEventId = authFetchEventId;
            this.privSessionId = connectionId;
            this.onEvent(new _RecognitionEvents__WEBPACK_IMPORTED_MODULE_1__["ConnectingToServiceEvent"](this.privRequestId, this.privAuthFetchEventId, this.privSessionId));
        };
        this.onAuthCompleted = (isError, error) => {
            if (isError) {
                this.onComplete();
            }
        };
        this.onConnectionEstablishCompleted = (statusCode, reason) => {
            if (statusCode === 200) {
                this.onEvent(new _RecognitionEvents__WEBPACK_IMPORTED_MODULE_1__["RecognitionStartedEvent"](this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));
                if (!!this.privAudioNode) {
                    this.privAudioNode.replay();
                }
                this.privTurnStartAudioOffset = this.privLastRecoOffset;
                this.privBytesSent = 0;
                return;
            }
            else if (statusCode === 403) {
                this.onComplete();
            }
        };
        this.onServiceTurnEndResponse = (continuousRecognition) => {
            if (!continuousRecognition || this.isSpeechEnded) {
                this.onComplete();
            }
            else {
                // Start a new request set.
                this.privTurnStartAudioOffset = this.privLastRecoOffset;
                this.privRequestId = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_0__["createNoDashGuid"])();
                this.privAudioNode.replay();
            }
        };
        this.dispose = (error) => {
            if (!this.privIsDisposed) {
                // we should have completed by now. If we did not its an unknown error.
                this.privIsDisposed = true;
                for (const detachable of this.privDetachables) {
                    detachable.detach();
                }
                this.privServiceTelemetryListener.dispose();
            }
        };
        this.getTelemetry = () => {
            if (this.privServiceTelemetryListener.hasTelemetry) {
                return this.privServiceTelemetryListener.getTelemetry();
            }
            else {
                return null;
            }
        };
        this.onEvent = (event) => {
            if (!!this.privServiceTelemetryListener) {
                this.privServiceTelemetryListener.onEvent(event);
            }
            _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Events"].instance.onEvent(event);
        };
        this.onComplete = () => {
            if (!!this.privIsRecognizing) {
                this.privIsRecognizing = false;
                this.detachAudioNode();
            }
        };
        this.detachAudioNode = () => {
            if (!this.privIsAudioNodeDetached) {
                this.privIsAudioNodeDetached = true;
                if (this.privAudioNode) {
                    this.privAudioNode.detach();
                }
            }
        };
        this.privAudioSourceId = audioSourceId;
        this.privRequestId = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_0__["createNoDashGuid"])();
        this.privAudioNodeId = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_0__["createNoDashGuid"])();
        this.privRequestCompletionDeferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Deferred"]();
    }
    get sessionId() {
        return this.privSessionId;
    }
    get requestId() {
        return this.privRequestId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
    get completionPromise() {
        return this.privRequestCompletionDeferral.promise();
    }
    get isSpeechEnded() {
        return this.privIsSpeechEnded;
    }
    get isRecognizing() {
        return this.privIsRecognizing;
    }
    get currentTurnAudioOffset() {
        return this.privTurnStartAudioOffset;
    }
    get recogNumber() {
        return this.privRecogNumber;
    }
    // The number of bytes sent for the current connection.
    // Counter is reset to 0 each time a connection is established.
    get bytesSent() {
        return this.privBytesSent;
    }
    listenForServiceTelemetry(eventSource) {
        if (!!this.privServiceTelemetryListener) {
            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));
        }
    }
    startNewRecognition() {
        this.privIsSpeechEnded = false;
        this.privIsRecognizing = true;
        this.privTurnStartAudioOffset = 0;
        this.privLastRecoOffset = 0;
        this.privRequestId = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_0__["createNoDashGuid"])();
        this.privRecogNumber++;
        this.privServiceTelemetryListener = new _ServiceTelemetryListener_Internal__WEBPACK_IMPORTED_MODULE_2__["ServiceTelemetryListener"](this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);
        this.onEvent(new _RecognitionEvents__WEBPACK_IMPORTED_MODULE_1__["RecognitionTriggeredEvent"](this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));
    }
    onHypothesis(offset) {
        if (!this.privHypothesisReceived) {
            this.privHypothesisReceived = true;
            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));
        }
    }
    onPhraseRecognized(offset) {
        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));
        this.onServiceRecognized(offset);
    }
    onServiceRecognized(offset) {
        this.privLastRecoOffset = offset;
        this.privHypothesisReceived = false;
        this.privAudioNode.shrinkBuffers(offset);
    }
    onAudioSent(bytesSent) {
        this.privBytesSent += bytesSent;
    }
    onStopRecognizing() {
        this.onComplete();
    }
    // Should be called with the audioNode for this session has indicated that it is out of speech.
    onSpeechEnded() {
        this.privIsSpeechEnded = true;
    }
}

//# sourceMappingURL=RequestSession.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/ActivityResponsePayload.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/ActivityResponsePayload.js ***!
  \*****************************************************************************************************************************************/
/*! exports provided: ActivityPayloadResponse, MessageDataStreamType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivityPayloadResponse", function() { return ActivityPayloadResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageDataStreamType", function() { return MessageDataStreamType; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// response
class ActivityPayloadResponse {
    constructor(json) {
        this.privActivityResponse = JSON.parse(json);
    }
    static fromJSON(json) {
        return new ActivityPayloadResponse(json);
    }
    get conversationId() {
        return this.privActivityResponse.conversationId;
    }
    get messageDataStreamType() {
        return this.privActivityResponse.messageDataStreamType;
    }
    get messagePayload() {
        return this.privActivityResponse.messagePayload;
    }
    get version() {
        return this.privActivityResponse.version;
    }
}
var MessageDataStreamType;
(function (MessageDataStreamType) {
    MessageDataStreamType[MessageDataStreamType["None"] = 0] = "None";
    MessageDataStreamType[MessageDataStreamType["TextToSpeechAudio"] = 1] = "TextToSpeechAudio";
})(MessageDataStreamType || (MessageDataStreamType = {}));

//# sourceMappingURL=ActivityResponsePayload.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js ***!
  \**************************************************************************************************************************************/
/*! exports provided: DetailedSpeechPhrase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DetailedSpeechPhrase", function() { return DetailedSpeechPhrase; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class DetailedSpeechPhrase {
    constructor(json) {
        this.privDetailedSpeechPhrase = JSON.parse(json);
        this.privDetailedSpeechPhrase.RecognitionStatus = _Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionStatus"][this.privDetailedSpeechPhrase.RecognitionStatus];
    }
    static fromJSON(json) {
        return new DetailedSpeechPhrase(json);
    }
    get RecognitionStatus() {
        return this.privDetailedSpeechPhrase.RecognitionStatus;
    }
    get NBest() {
        return this.privDetailedSpeechPhrase.NBest;
    }
    get Duration() {
        return this.privDetailedSpeechPhrase.Duration;
    }
    get Offset() {
        return this.privDetailedSpeechPhrase.Offset;
    }
}

//# sourceMappingURL=DetailedSpeechPhrase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/Enums.js ***!
  \***********************************************************************************************************************/
/*! exports provided: SynthesisStatus, RecognitionStatus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SynthesisStatus", function() { return SynthesisStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognitionStatus", function() { return RecognitionStatus; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * @class SynthesisStatus
 * @private
 */
var SynthesisStatus;
(function (SynthesisStatus) {
    /**
     * The response contains valid audio data.
     * @member SynthesisStatus.Success
     */
    SynthesisStatus[SynthesisStatus["Success"] = 0] = "Success";
    /**
     * Indicates the end of audio data. No valid audio data is included in the message.
     * @member SynthesisStatus.SynthesisEnd
     */
    SynthesisStatus[SynthesisStatus["SynthesisEnd"] = 1] = "SynthesisEnd";
    /**
     * Indicates an error occurred during synthesis data processing.
     * @member SynthesisStatus.Error
     */
    SynthesisStatus[SynthesisStatus["Error"] = 2] = "Error";
})(SynthesisStatus || (SynthesisStatus = {}));
var RecognitionStatus;
(function (RecognitionStatus) {
    RecognitionStatus[RecognitionStatus["Success"] = 0] = "Success";
    RecognitionStatus[RecognitionStatus["NoMatch"] = 1] = "NoMatch";
    RecognitionStatus[RecognitionStatus["InitialSilenceTimeout"] = 2] = "InitialSilenceTimeout";
    RecognitionStatus[RecognitionStatus["BabbleTimeout"] = 3] = "BabbleTimeout";
    RecognitionStatus[RecognitionStatus["Error"] = 4] = "Error";
    RecognitionStatus[RecognitionStatus["EndOfDictation"] = 5] = "EndOfDictation";
    RecognitionStatus[RecognitionStatus["TooManyRequests"] = 6] = "TooManyRequests";
})(RecognitionStatus || (RecognitionStatus = {}));

//# sourceMappingURL=Enums.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/IntentResponse.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/IntentResponse.js ***!
  \********************************************************************************************************************************/
/*! exports provided: IntentResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntentResponse", function() { return IntentResponse; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// response
class IntentResponse {
    constructor(json) {
        this.privIntentResponse = JSON.parse(json);
    }
    static fromJSON(json) {
        return new IntentResponse(json);
    }
    get query() {
        return this.privIntentResponse.query;
    }
    get topScoringIntent() {
        return this.privIntentResponse.topScoringIntent;
    }
    get entities() {
        return this.privIntentResponse.entities;
    }
}

//# sourceMappingURL=IntentResponse.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js ***!
  \************************************************************************************************************************************/
/*! exports provided: SimpleSpeechPhrase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleSpeechPhrase", function() { return SimpleSpeechPhrase; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class SimpleSpeechPhrase {
    constructor(json) {
        this.privSimpleSpeechPhrase = JSON.parse(json);
        this.privSimpleSpeechPhrase.RecognitionStatus = _Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionStatus"][this.privSimpleSpeechPhrase.RecognitionStatus];
    }
    static fromJSON(json) {
        return new SimpleSpeechPhrase(json);
    }
    get RecognitionStatus() {
        return this.privSimpleSpeechPhrase.RecognitionStatus;
    }
    get DisplayText() {
        return this.privSimpleSpeechPhrase.DisplayText;
    }
    get Offset() {
        return this.privSimpleSpeechPhrase.Offset;
    }
    get Duration() {
        return this.privSimpleSpeechPhrase.Duration;
    }
}

//# sourceMappingURL=SimpleSpeechPhrase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechDetected.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechDetected.js ***!
  \********************************************************************************************************************************/
/*! exports provided: SpeechDetected */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechDetected", function() { return SpeechDetected; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class SpeechDetected {
    constructor(json) {
        this.privSpeechStartDetected = JSON.parse(json);
    }
    static fromJSON(json) {
        return new SpeechDetected(json);
    }
    get Offset() {
        return this.privSpeechStartDetected.Offset;
    }
}

//# sourceMappingURL=SpeechDetected.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/SpeechHypothesis.js ***!
  \**********************************************************************************************************************************/
/*! exports provided: SpeechHypothesis */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechHypothesis", function() { return SpeechHypothesis; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class SpeechHypothesis {
    constructor(json) {
        this.privSpeechHypothesis = JSON.parse(json);
    }
    static fromJSON(json) {
        return new SpeechHypothesis(json);
    }
    get Text() {
        return this.privSpeechHypothesis.Text;
    }
    get Offset() {
        return this.privSpeechHypothesis.Offset;
    }
    get Duration() {
        return this.privSpeechHypothesis.Duration;
    }
}

//# sourceMappingURL=SpeechHypothesis.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationHypothesis.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationHypothesis.js ***!
  \***************************************************************************************************************************************/
/*! exports provided: TranslationHypothesis */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationHypothesis", function() { return TranslationHypothesis; });
/* harmony import */ var _TranslationStatus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../TranslationStatus */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationStatus.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class TranslationHypothesis {
    constructor(json) {
        this.privTranslationHypothesis = JSON.parse(json);
        this.privTranslationHypothesis.Translation.TranslationStatus = _TranslationStatus__WEBPACK_IMPORTED_MODULE_0__["TranslationStatus"][this.privTranslationHypothesis.Translation.TranslationStatus];
    }
    static fromJSON(json) {
        return new TranslationHypothesis(json);
    }
    get Duration() {
        return this.privTranslationHypothesis.Duration;
    }
    get Offset() {
        return this.privTranslationHypothesis.Offset;
    }
    get Text() {
        return this.privTranslationHypothesis.Text;
    }
    get Translation() {
        return this.privTranslationHypothesis.Translation;
    }
}

//# sourceMappingURL=TranslationHypothesis.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationPhrase.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationPhrase.js ***!
  \***********************************************************************************************************************************/
/*! exports provided: TranslationPhrase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationPhrase", function() { return TranslationPhrase; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _TranslationStatus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../TranslationStatus */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationStatus.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class TranslationPhrase {
    constructor(json) {
        this.privTranslationPhrase = JSON.parse(json);
        this.privTranslationPhrase.RecognitionStatus = _Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionStatus"][this.privTranslationPhrase.RecognitionStatus];
        if (this.privTranslationPhrase.Translation !== undefined) {
            this.privTranslationPhrase.Translation.TranslationStatus = _TranslationStatus__WEBPACK_IMPORTED_MODULE_1__["TranslationStatus"][this.privTranslationPhrase.Translation.TranslationStatus];
        }
    }
    static fromJSON(json) {
        return new TranslationPhrase(json);
    }
    get RecognitionStatus() {
        return this.privTranslationPhrase.RecognitionStatus;
    }
    get Offset() {
        return this.privTranslationPhrase.Offset;
    }
    get Duration() {
        return this.privTranslationPhrase.Duration;
    }
    get Text() {
        return this.privTranslationPhrase.Text;
    }
    get Translation() {
        return this.privTranslationPhrase.Translation;
    }
}

//# sourceMappingURL=TranslationPhrase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js ***!
  \*****************************************************************************************************************************************/
/*! exports provided: TranslationSynthesisEnd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationSynthesisEnd", function() { return TranslationSynthesisEnd; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class TranslationSynthesisEnd {
    constructor(json) {
        this.privSynthesisEnd = JSON.parse(json);
        this.privSynthesisEnd.SynthesisStatus = _Exports__WEBPACK_IMPORTED_MODULE_0__["SynthesisStatus"][this.privSynthesisEnd.SynthesisStatus];
    }
    static fromJSON(json) {
        return new TranslationSynthesisEnd(json);
    }
    get SynthesisStatus() {
        return this.privSynthesisEnd.SynthesisStatus;
    }
    get FailureReason() {
        return this.privSynthesisEnd.FailureReason;
    }
}

//# sourceMappingURL=TranslationSynthesisEnd.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceRecognizerBase.js ***!
  \***********************************************************************************************************************/
/*! exports provided: ServiceRecognizerBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceRecognizerBase", function() { return ServiceRecognizerBase; });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/Exports.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SpeechConnectionMessage.Internal */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.





class ServiceRecognizerBase {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {
        this.recognizeOverride = undefined;
        this.disconnectOverride = undefined;
        this.sendTelemetryData = () => {
            const telemetryData = this.privRequestSession.getTelemetry();
            // console.warn("Telem: " + telemetryData);
            if (ServiceRecognizerBase.telemetryDataEnabled !== true ||
                this.privIsDisposed ||
                null === telemetryData) {
                return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(true);
            }
            if (!!ServiceRecognizerBase.telemetryData) {
                try {
                    ServiceRecognizerBase.telemetryData(telemetryData);
                    /* tslint:disable:no-empty */
                }
                catch (_a) { }
            }
            return this.fetchConnection().onSuccessContinueWith((connection) => {
                return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__["SpeechConnectionMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Text, "telemetry", this.privRequestSession.requestId, "application/json", telemetryData));
            });
        };
        this.receiveMessageOverride = undefined;
        this.receiveMessage = (successCallback, errorCallBack) => {
            return this.fetchConnection().on((connection) => {
                return connection.read()
                    .onSuccessContinueWithPromise((message) => {
                    if (this.receiveMessageOverride !== undefined) {
                        return this.receiveMessageOverride();
                    }
                    if (this.privIsDisposed || !this.privRequestSession.isRecognizing) {
                        // We're done.
                        return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(undefined);
                    }
                    // indicates we are draining the queue and it came with no message;
                    if (!message) {
                        if (!this.privRequestSession.isRecognizing) {
                            return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(true);
                        }
                        else {
                            return this.receiveMessage(successCallback, errorCallBack);
                        }
                    }
                    const connectionMessage = _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__["SpeechConnectionMessage"].fromConnectionMessage(message);
                    if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {
                        switch (connectionMessage.path.toLowerCase()) {
                            case "turn.start":
                                this.privMustReportEndOfStream = true;
                                break;
                            case "speech.startdetected":
                                const speechStartDetected = _Exports__WEBPACK_IMPORTED_MODULE_3__["SpeechDetected"].fromJSON(connectionMessage.textBody);
                                const speechStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["RecognitionEventArgs"](speechStartDetected.Offset, this.privRequestSession.sessionId);
                                if (!!this.privRecognizer.speechStartDetected) {
                                    this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);
                                }
                                break;
                            case "speech.enddetected":
                                let json;
                                if (connectionMessage.textBody.length > 0) {
                                    json = connectionMessage.textBody;
                                }
                                else {
                                    // If the request was empty, the JSON returned is empty.
                                    json = "{ Offset: 0 }";
                                }
                                const speechStopDetected = _Exports__WEBPACK_IMPORTED_MODULE_3__["SpeechDetected"].fromJSON(json);
                                // Only shrink the buffers for continuous recognition.
                                // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.
                                if (this.privRecognizerConfig.isContinuousRecognition) {
                                    this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);
                                }
                                const speechStopEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["RecognitionEventArgs"](speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);
                                if (!!this.privRecognizer.speechEndDetected) {
                                    this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);
                                }
                                break;
                            case "turn.end":
                                this.sendTelemetryData();
                                if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {
                                    this.privMustReportEndOfStream = false;
                                    this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].EndOfStream, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].NoError, undefined, successCallback);
                                }
                                const sessionStopEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SessionEventArgs"](this.privRequestSession.sessionId);
                                this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);
                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded) {
                                    if (!!this.privRecognizer.sessionStopped) {
                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);
                                    }
                                    return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(true);
                                }
                                else {
                                    this.fetchConnection().onSuccessContinueWith((connection) => {
                                        this.sendSpeechContext(connection);
                                    });
                                }
                            default:
                                this.processTypeSpecificMessages(connectionMessage, successCallback, errorCallBack);
                        }
                    }
                    return this.receiveMessage(successCallback, errorCallBack);
                });
            }, (error) => {
            });
        };
        this.sendSpeechContext = (connection) => {
            const speechContextJson = this.speechContext.toJSON();
            if (speechContextJson) {
                return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__["SpeechConnectionMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Text, "speech.context", this.privRequestSession.requestId, "application/json", speechContextJson));
            }
            return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(true);
        };
        this.connectImplOverride = undefined;
        this.configConnectionOverride = undefined;
        this.fetchConnectionOverride = undefined;
        this.sendSpeechServiceConfig = (connection, requestSession, SpeechServiceConfigJson) => {
            // filter out anything that is not required for the service to work.
            if (ServiceRecognizerBase.telemetryDataEnabled !== true) {
                const withTelemetry = JSON.parse(SpeechServiceConfigJson);
                const replacement = {
                    context: {
                        system: withTelemetry.context.system,
                    },
                };
                SpeechServiceConfigJson = JSON.stringify(replacement);
            }
            if (SpeechServiceConfigJson) { // && this.privConnectionId !== this.privSpeechServiceConfigConnectionId) {
                this.privSpeechServiceConfigConnectionId = this.privConnectionId;
                return connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__["SpeechConnectionMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Text, "speech.config", requestSession.requestId, "application/json", SpeechServiceConfigJson));
            }
            return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(true);
        };
        this.sendAudio = (audioStreamNode) => {
            // NOTE: Home-baked promises crash ios safari during the invocation
            // of the error callback chain (looks like the recursion is way too deep, and
            // it blows up the stack). The following construct is a stop-gap that does not
            // bubble the error up the callback chain and hence circumvents this problem.
            // TODO: rewrite with ES6 promises.
            const deferred = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__["Deferred"]();
            // The time we last sent data to the service.
            let nextSendTime = Date.now();
            const audioFormat = this.privAudioSource.format;
            // Max amount to send before we start to throttle
            const fastLaneSizeMs = this.privRecognizerConfig.parameters.getProperty("SPEECH-TransmitLengthBeforThrottleMs", "5000");
            const maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);
            const startRecogNumber = this.privRequestSession.recogNumber;
            const readAndUploadCycle = () => {
                // If speech is done, stop sending audio.
                if (!this.privIsDisposed &&
                    !this.privRequestSession.isSpeechEnded &&
                    this.privRequestSession.isRecognizing &&
                    this.privRequestSession.recogNumber === startRecogNumber) {
                    this.fetchConnection().on((connection) => {
                        audioStreamNode.read().on((audioStreamChunk) => {
                            // we have a new audio chunk to upload.
                            if (this.privRequestSession.isSpeechEnded) {
                                // If service already recognized audio end then don't send any more audio
                                deferred.resolve(true);
                                return;
                            }
                            let payload;
                            let sendDelay;
                            if (audioStreamChunk.isEnd) {
                                payload = null;
                                sendDelay = 0;
                            }
                            else {
                                payload = audioStreamChunk.buffer;
                                this.privRequestSession.onAudioSent(payload.byteLength);
                                if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {
                                    sendDelay = 0;
                                }
                                else {
                                    sendDelay = Math.max(0, nextSendTime - Date.now());
                                }
                            }
                            // Are we ready to send, or need we delay more?
                            setTimeout(() => {
                                if (payload !== null) {
                                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));
                                }
                                const uploaded = connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__["SpeechConnectionMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Binary, "audio", this.privRequestSession.requestId, null, payload));
                                if (!audioStreamChunk.isEnd) {
                                    uploaded.continueWith((_) => {
                                        // Regardless of success or failure, schedule the next upload.
                                        // If the underlying connection was broken, the next cycle will
                                        // get a new connection and re-transmit missing audio automatically.
                                        readAndUploadCycle();
                                    });
                                }
                                else {
                                    // the audio stream has been closed, no need to schedule next
                                    // read-upload cycle.
                                    this.privRequestSession.onSpeechEnded();
                                    deferred.resolve(true);
                                }
                            }, sendDelay);
                        }, (error) => {
                            if (this.privRequestSession.isSpeechEnded) {
                                // For whatever reason, Reject is used to remove queue subscribers inside
                                // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which
                                // means that sometimes things can be rejected in normal circumstances, without
                                // any errors.
                                deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.
                            }
                            else {
                                // Only reject, if there was a proper error.
                                deferred.reject(error);
                            }
                        });
                    }, (error) => {
                        deferred.reject(error);
                    });
                }
            };
            readAndUploadCycle();
            return deferred.promise();
        };
        this.fetchConnection = () => {
            if (this.fetchConnectionOverride !== undefined) {
                return this.fetchConnectionOverride();
            }
            return this.configureConnection();
        };
        if (!authentication) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__["ArgumentNullError"]("authentication");
        }
        if (!connectionFactory) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__["ArgumentNullError"]("connectionFactory");
        }
        if (!audioSource) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__["ArgumentNullError"]("audioSource");
        }
        if (!recognizerConfig) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__["ArgumentNullError"]("recognizerConfig");
        }
        this.privMustReportEndOfStream = false;
        this.privAuthentication = authentication;
        this.privConnectionFactory = connectionFactory;
        this.privAudioSource = audioSource;
        this.privRecognizerConfig = recognizerConfig;
        this.privIsDisposed = false;
        this.privRecognizer = recognizer;
        this.privRequestSession = new _Exports__WEBPACK_IMPORTED_MODULE_3__["RequestSession"](this.privAudioSource.id());
        this.privConnectionEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__["EventSource"]();
        this.privDynamicGrammar = new _Exports__WEBPACK_IMPORTED_MODULE_3__["DynamicGrammarBuilder"]();
        this.privSpeechContext = new _Exports__WEBPACK_IMPORTED_MODULE_3__["SpeechContext"](this.privDynamicGrammar);
        this.privAgentConfig = new _Exports__WEBPACK_IMPORTED_MODULE_3__["AgentConfig"]();
    }
    get audioSource() {
        return this.privAudioSource;
    }
    get speechContext() {
        return this.privSpeechContext;
    }
    get dynamicGrammar() {
        return this.privDynamicGrammar;
    }
    get agentConfig() {
        return this.privAgentConfig;
    }
    isDisposed() {
        return this.privIsDisposed;
    }
    dispose(reason) {
        this.privIsDisposed = true;
        if (this.privConnectionConfigurationPromise) {
            this.privConnectionConfigurationPromise.onSuccessContinueWith((connection) => {
                connection.dispose(reason);
            });
        }
    }
    get connectionEvents() {
        return this.privConnectionEvents;
    }
    get recognitionMode() {
        return this.privRecognizerConfig.recognitionMode;
    }
    recognize(recoMode, successCallback, errorCallBack) {
        if (this.recognizeOverride !== undefined) {
            return this.recognizeOverride(recoMode, successCallback, errorCallBack);
        }
        // Clear the existing configuration promise to force a re-transmission of config and context.
        this.privConnectionConfigurationPromise = null;
        this.privRecognizerConfig.recognitionMode = recoMode;
        this.privRequestSession.startNewRecognition();
        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);
        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().
        this.connectImpl();
        return this.audioSource
            .attach(this.privRequestSession.audioNodeId)
            .continueWithPromise((result) => {
            let audioNode;
            if (result.isError) {
                this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].ConnectionFailure, result.error, successCallback);
                return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromError(result.error);
            }
            else {
                audioNode = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["ReplayableAudioNode"](result.result, this.audioSource.format);
                this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);
            }
            return this.audioSource.deviceInfo.onSuccessContinueWithPromise((deviceInfo) => {
                this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };
                return this.configureConnection()
                    .on((_) => {
                    const sessionStartEventArgs = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["SessionEventArgs"](this.privRequestSession.sessionId);
                    if (!!this.privRecognizer.sessionStarted) {
                        this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);
                    }
                    const messageRetrievalPromise = this.receiveMessage(successCallback, errorCallBack);
                    const audioSendPromise = this.sendAudio(audioNode);
                    /* tslint:disable:no-empty */
                    audioSendPromise.on((_) => { }, (error) => {
                        this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].RuntimeError, error, successCallback);
                    });
                    const completionPromise = _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].whenAll([messageRetrievalPromise, audioSendPromise]);
                    return completionPromise.on((r) => {
                        return true;
                    }, (error) => {
                        this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].RuntimeError, error, successCallback);
                    });
                }, (error) => {
                    this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].ConnectionFailure, error, successCallback);
                }).continueWithPromise((result) => {
                    if (result.isError) {
                        return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromError(result.error);
                    }
                    else {
                        return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(true);
                    }
                });
            });
        });
    }
    stopRecognizing() {
        if (this.privRequestSession.isRecognizing) {
            this.privRequestSession.onStopRecognizing();
            this.sendTelemetryData();
            this.audioSource.turnOff();
            this.sendFinalAudio();
            this.privRequestSession.dispose();
        }
    }
    connect() {
        this.connectImpl().result();
    }
    disconnect() {
        if (this.disconnectOverride !== undefined) {
            this.disconnectOverride();
            return;
        }
        this.cancelRecognitionLocal(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationReason"].Error, _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCode"].NoError, "Disconnecting", undefined);
        if (this.privConnectionPromise.result().isCompleted) {
            if (!this.privConnectionPromise.result().isError) {
                this.privConnectionPromise.result().result.dispose();
                this.privConnectionPromise = null;
            }
        }
        else {
            this.privConnectionPromise.onSuccessContinueWith((connection) => {
                connection.dispose();
            });
        }
    }
    sendMessage(message) { }
    // Cancels recognition.
    cancelRecognitionLocal(cancellationReason, errorCode, error, cancelRecoCallback) {
        if (!!this.privRequestSession.isRecognizing) {
            this.privRequestSession.onStopRecognizing();
            this.sendTelemetryData();
            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, cancellationReason, errorCode, error, cancelRecoCallback);
        }
    }
    // Establishes a websocket connection to the end point.
    connectImpl(isUnAuthorized = false) {
        if (this.connectImplOverride !== undefined) {
            return this.connectImplOverride(isUnAuthorized);
        }
        if (this.privConnectionPromise) {
            if (this.privConnectionPromise.result().isCompleted &&
                (this.privConnectionPromise.result().isError
                    || this.privConnectionPromise.result().result.state() === _common_Exports__WEBPACK_IMPORTED_MODULE_1__["ConnectionState"].Disconnected)) {
                this.privConnectionId = null;
                this.privConnectionPromise = null;
                return this.connectImpl();
            }
            else {
                return this.privConnectionPromise;
            }
        }
        this.privAuthFetchEventId = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_1__["createNoDashGuid"])();
        this.privConnectionId = Object(_common_Exports__WEBPACK_IMPORTED_MODULE_1__["createNoDashGuid"])();
        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);
        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);
        this.privConnectionPromise = authPromise
            .continueWithPromise((result) => {
            if (result.isError) {
                this.privRequestSession.onAuthCompleted(true, result.error);
                throw new Error(result.error);
            }
            else {
                this.privRequestSession.onAuthCompleted(false);
            }
            const connection = this.privConnectionFactory.create(this.privRecognizerConfig, result.result, this.privConnectionId);
            this.privRequestSession.listenForServiceTelemetry(connection.events);
            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,
            // it'll stop sending events.
            connection.events.attach((event) => {
                this.connectionEvents.onEvent(event);
            });
            return connection.open().onSuccessContinueWithPromise((response) => {
                if (response.statusCode === 200) {
                    this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);
                    this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);
                    return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(connection);
                }
                else if (response.statusCode === 403 && !isUnAuthorized) {
                    return this.connectImpl(true);
                }
                else {
                    this.privRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);
                    return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromError(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);
                }
            });
        });
        return this.privConnectionPromise;
    }
    sendFinalAudio() {
        const deferred = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__["Deferred"]();
        this.fetchConnection().on((connection) => {
            connection.send(new _SpeechConnectionMessage_Internal__WEBPACK_IMPORTED_MODULE_4__["SpeechConnectionMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Binary, "audio", this.privRequestSession.requestId, null, null)).on((_) => {
                deferred.resolve(true);
            }, (error) => {
                deferred.reject(error);
            });
        }, (error) => {
            deferred.reject(error);
        });
        return deferred.promise();
    }
    // Takes an established websocket connection to the endpoint and sends speech configuration information.
    configureConnection() {
        if (this.configConnectionOverride !== undefined) {
            return this.configConnectionOverride();
        }
        if (this.privConnectionConfigurationPromise) {
            if (this.privConnectionConfigurationPromise.result().isCompleted &&
                (this.privConnectionConfigurationPromise.result().isError
                    || this.privConnectionConfigurationPromise.result().result.state() === _common_Exports__WEBPACK_IMPORTED_MODULE_1__["ConnectionState"].Disconnected)) {
                this.privConnectionConfigurationPromise = null;
                return this.configureConnection();
            }
            else {
                return this.privConnectionConfigurationPromise;
            }
        }
        this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise((connection) => {
            return this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize())
                .onSuccessContinueWithPromise((_) => {
                return this.sendSpeechContext(connection).onSuccessContinueWith((_) => {
                    return connection;
                });
            });
        });
        return this.privConnectionConfigurationPromise;
    }
}
ServiceRecognizerBase.telemetryDataEnabled = true;

//# sourceMappingURL=ServiceRecognizerBase.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceTelemetryListener.Internal.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ServiceTelemetryListener.Internal.js ***!
  \***********************************************************************************************************************************/
/*! exports provided: ServiceTelemetryListener */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceTelemetryListener", function() { return ServiceTelemetryListener; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _RecognitionEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RecognitionEvents */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognitionEvents.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


// tslint:disable-next-line:max-classes-per-file
class ServiceTelemetryListener {
    constructor(requestId, audioSourceId, audioNodeId) {
        this.privIsDisposed = false;
        this.privListeningTriggerMetric = null;
        this.privMicMetric = null;
        this.privConnectionEstablishMetric = null;
        this.onEvent = (e) => {
            if (this.privIsDisposed) {
                return;
            }
            if (e instanceof _RecognitionEvents__WEBPACK_IMPORTED_MODULE_1__["RecognitionTriggeredEvent"] && e.requestId === this.privRequestId) {
                this.privListeningTriggerMetric = {
                    End: e.eventTime,
                    Name: "ListeningTrigger",
                    Start: e.eventTime,
                };
            }
            if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_0__["AudioStreamNodeAttachingEvent"] && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {
                this.privMicStartTime = e.eventTime;
            }
            if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_0__["AudioStreamNodeAttachedEvent"] && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {
                this.privMicStartTime = e.eventTime;
            }
            if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_0__["AudioSourceErrorEvent"] && e.audioSourceId === this.privAudioSourceId) {
                if (!this.privMicMetric) {
                    this.privMicMetric = {
                        End: e.eventTime,
                        Error: e.error,
                        Name: "Microphone",
                        Start: this.privMicStartTime,
                    };
                }
            }
            if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_0__["AudioStreamNodeErrorEvent"] && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {
                if (!this.privMicMetric) {
                    this.privMicMetric = {
                        End: e.eventTime,
                        Error: e.error,
                        Name: "Microphone",
                        Start: this.privMicStartTime,
                    };
                }
            }
            if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_0__["AudioStreamNodeDetachedEvent"] && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {
                if (!this.privMicMetric) {
                    this.privMicMetric = {
                        End: e.eventTime,
                        Name: "Microphone",
                        Start: this.privMicStartTime,
                    };
                }
            }
            if (e instanceof _RecognitionEvents__WEBPACK_IMPORTED_MODULE_1__["ConnectingToServiceEvent"] && e.requestId === this.privRequestId) {
                this.privConnectionId = e.sessionId;
            }
            if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionStartEvent"] && e.connectionId === this.privConnectionId) {
                this.privConnectionStartTime = e.eventTime;
            }
            if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionEstablishedEvent"] && e.connectionId === this.privConnectionId) {
                if (!this.privConnectionEstablishMetric) {
                    this.privConnectionEstablishMetric = {
                        End: e.eventTime,
                        Id: this.privConnectionId,
                        Name: "Connection",
                        Start: this.privConnectionStartTime,
                    };
                }
            }
            if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionEstablishErrorEvent"] && e.connectionId === this.privConnectionId) {
                if (!this.privConnectionEstablishMetric) {
                    this.privConnectionEstablishMetric = {
                        End: e.eventTime,
                        Error: this.getConnectionError(e.statusCode),
                        Id: this.privConnectionId,
                        Name: "Connection",
                        Start: this.privConnectionStartTime,
                    };
                }
            }
            if (e instanceof _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionMessageReceivedEvent"] && e.connectionId === this.privConnectionId) {
                if (e.message && e.message.headers && e.message.headers.path) {
                    if (!this.privReceivedMessages[e.message.headers.path]) {
                        this.privReceivedMessages[e.message.headers.path] = new Array();
                    }
                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);
                }
            }
        };
        this.getTelemetry = () => {
            const metrics = new Array();
            if (this.privListeningTriggerMetric) {
                metrics.push(this.privListeningTriggerMetric);
            }
            if (this.privMicMetric) {
                metrics.push(this.privMicMetric);
            }
            if (this.privConnectionEstablishMetric) {
                metrics.push(this.privConnectionEstablishMetric);
            }
            if (this.privPhraseLatencies.length > 0) {
                metrics.push({
                    PhraseLatencyMs: this.privPhraseLatencies,
                });
            }
            if (this.privHypothesisLatencies.length > 0) {
                metrics.push({
                    FirstHypothesisLatencyMs: this.privHypothesisLatencies,
                });
            }
            const telemetry = {
                Metrics: metrics,
                ReceivedMessages: this.privReceivedMessages,
            };
            const json = JSON.stringify(telemetry);
            // We dont want to send the same telemetry again. So clean those out.
            this.privReceivedMessages = {};
            this.privListeningTriggerMetric = null;
            this.privMicMetric = null;
            this.privConnectionEstablishMetric = null;
            this.privPhraseLatencies = [];
            this.privHypothesisLatencies = [];
            return json;
        };
        this.dispose = () => {
            this.privIsDisposed = true;
        };
        this.getConnectionError = (statusCode) => {
            /*
            -- Websocket status codes --
            NormalClosure = 1000,
            EndpointUnavailable = 1001,
            ProtocolError = 1002,
            InvalidMessageType = 1003,
            Empty = 1005,
            InvalidPayloadData = 1007,
            PolicyViolation = 1008,
            MessageTooBig = 1009,
            MandatoryExtension = 1010,
            InternalServerError = 1011
            */
            switch (statusCode) {
                case 400:
                case 1002:
                case 1003:
                case 1005:
                case 1007:
                case 1008:
                case 1009: return "BadRequest";
                case 401: return "Unauthorized";
                case 403: return "Forbidden";
                case 503:
                case 1001: return "ServerUnavailable";
                case 500:
                case 1011: return "ServerError";
                case 408:
                case 504: return "Timeout";
                default: return "statuscode:" + statusCode.toString();
            }
        };
        this.privRequestId = requestId;
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
        this.privReceivedMessages = {};
        this.privPhraseLatencies = [];
        this.privHypothesisLatencies = [];
    }
    phraseReceived(audioReceivedTime) {
        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.
            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);
        }
    }
    hypothesisReceived(audioReceivedTime) {
        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.
            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);
        }
    }
    // Determines if there are any telemetry events to send to the service.
    get hasTelemetry() {
        return (Object.keys(this.privReceivedMessages).length !== 0 ||
            this.privListeningTriggerMetric !== null ||
            this.privMicMetric !== null ||
            this.privConnectionEstablishMetric !== null ||
            this.privPhraseLatencies.length !== 0 ||
            this.privHypothesisLatencies.length !== 0);
    }
}

//# sourceMappingURL=ServiceTelemetryListener.Internal.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionFactory.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionFactory.js ***!
  \*************************************************************************************************************************/
/*! exports provided: SpeechConnectionFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechConnectionFactory", function() { return SpeechConnectionFactory; });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/Exports.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.






class SpeechConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_3__["ConnectionFactoryBase"] {
    constructor() {
        super(...arguments);
        this.interactiveRelativeUri = "/speech/recognition/interactive/cognitiveservices/v1";
        this.conversationRelativeUri = "/speech/recognition/conversation/cognitiveservices/v1";
        this.dictationRelativeUri = "/speech/recognition/dictation/cognitiveservices/v1";
        this.create = (config, authInfo, connectionId) => {
            let endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Endpoint, undefined);
            const queryParams = {};
            const endpointId = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_EndpointId, undefined);
            const language = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_RecoLanguage, undefined);
            if (endpointId) {
                if (!endpoint || endpoint.search(_QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__["QueryParameterNames"].DeploymentIdParamName) === -1) {
                    queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__["QueryParameterNames"].DeploymentIdParamName] = endpointId;
                }
            }
            else if (language) {
                if (!endpoint || endpoint.search(_QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__["QueryParameterNames"].LanguageParamName) === -1) {
                    queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__["QueryParameterNames"].LanguageParamName] = language;
                }
            }
            if (!endpoint || endpoint.search(_QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__["QueryParameterNames"].FormatParamName) === -1) {
                queryParams[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__["QueryParameterNames"].FormatParamName] = config.parameters.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["OutputFormatPropertyName"], _sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["OutputFormat"][_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["OutputFormat"].Simple]).toLowerCase();
            }
            this.setCommonUrlParams(config, queryParams, endpoint);
            if (!endpoint) {
                const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region, undefined);
                const host = "wss://" + region + ".stt.speech.microsoft.com";
                switch (config.recognitionMode) {
                    case _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionMode"].Conversation:
                        if (config.parameters.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["ForceDictationPropertyName"], "false") === "true") {
                            endpoint = host + this.dictationRelativeUri;
                        }
                        else {
                            endpoint = host + this.conversationRelativeUri;
                        }
                        break;
                    case _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionMode"].Dictation:
                        endpoint = host + this.dictationRelativeUri;
                        break;
                    default:
                        endpoint = host + this.interactiveRelativeUri; // default is interactive
                        break;
                }
            }
            const headers = {};
            headers[authInfo.headerName] = authInfo.token;
            headers[_QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__["QueryParameterNames"].ConnectionIdHeader] = connectionId;
            return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["WebsocketConnection"](endpoint, queryParams, headers, new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["WebsocketMessageFormatter"](), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["ProxyInfo"].fromRecognizerConfig(config), connectionId);
        };
    }
}

//# sourceMappingURL=SpeechConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js ***!
  \**********************************************************************************************************************************/
/*! exports provided: SpeechConnectionMessage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechConnectionMessage", function() { return SpeechConnectionMessage; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

const PathHeaderName = "path";
const ContentTypeHeaderName = "content-type";
const RequestIdHeaderName = "x-requestid";
const RequestTimestampHeaderName = "x-timestamp";
class SpeechConnectionMessage extends _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionMessage"] {
    constructor(messageType, path, requestId, contentType, body, additionalHeaders, id) {
        if (!path) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("path");
        }
        if (!requestId) {
            throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("requestId");
        }
        const headers = {};
        headers[PathHeaderName] = path;
        headers[RequestIdHeaderName] = requestId;
        headers[RequestTimestampHeaderName] = new Date().toISOString();
        if (contentType) {
            headers[ContentTypeHeaderName] = contentType;
        }
        if (additionalHeaders) {
            for (const headerName in additionalHeaders) {
                if (headerName) {
                    headers[headerName] = additionalHeaders[headerName];
                }
            }
        }
        if (id) {
            super(messageType, body, headers, id);
        }
        else {
            super(messageType, body, headers);
        }
        this.privPath = path;
        this.privRequestId = requestId;
        this.privContentType = contentType;
        this.privAdditionalHeaders = additionalHeaders;
    }
    get path() {
        return this.privPath;
    }
    get requestId() {
        return this.privRequestId;
    }
    get contentType() {
        return this.privContentType;
    }
    get additionalHeaders() {
        return this.privAdditionalHeaders;
    }
}
SpeechConnectionMessage.fromConnectionMessage = (message) => {
    let path = null;
    let requestId = null;
    let contentType = null;
    let requestTimestamp = null;
    const additionalHeaders = {};
    if (message.headers) {
        for (const headerName in message.headers) {
            if (headerName) {
                if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {
                    path = message.headers[headerName];
                }
                else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {
                    requestId = message.headers[headerName];
                }
                else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {
                    requestTimestamp = message.headers[headerName];
                }
                else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {
                    contentType = message.headers[headerName];
                }
                else {
                    additionalHeaders[headerName] = message.headers[headerName];
                }
            }
        }
    }
    return new SpeechConnectionMessage(message.messageType, path, requestId, contentType, message.body, additionalHeaders, message.id);
};

//# sourceMappingURL=SpeechConnectionMessage.Internal.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechContext.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechContext.js ***!
  \***************************************************************************************************************/
/*! exports provided: SpeechContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechContext", function() { return SpeechContext; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Represents the JSON used in the speech.context message sent to the speech service.
 * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.
 */
class SpeechContext {
    constructor(dynamicGrammar) {
        this.privContext = {};
        this.privDynamicGrammar = dynamicGrammar;
    }
    /**
     * Adds a section to the speech.context object.
     * @param sectionName Name of the section to add.
     * @param value JSON serializeable object that represents the value.
     */
    setSection(sectionName, value) {
        this.privContext[sectionName] = value;
    }
    toJSON() {
        const dgi = this.privDynamicGrammar.generateGrammarObject();
        this.setSection("dgi", dgi);
        const ret = JSON.stringify(this.privContext);
        return ret;
    }
}

//# sourceMappingURL=SpeechContext.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceRecognizer.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechServiceRecognizer.js ***!
  \*************************************************************************************************************************/
/*! exports provided: SpeechServiceRecognizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechServiceRecognizer", function() { return SpeechServiceRecognizer; });
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


// tslint:disable-next-line:max-classes-per-file
class SpeechServiceRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_1__["ServiceRecognizerBase"] {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);
        this.privSpeechRecognizer = speechRecognizer;
    }
    processTypeSpecificMessages(connectionMessage, successCallback, errorCallBack) {
        let result;
        const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["PropertyCollection"]();
        resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["PropertyId"].SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        switch (connectionMessage.path.toLowerCase()) {
            case "speech.hypothesis":
            case "speech.fragment":
                const hypothesis = _Exports__WEBPACK_IMPORTED_MODULE_1__["SpeechHypothesis"].fromJSON(connectionMessage.textBody);
                const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;
                result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechRecognitionResult"](this.privRequestSession.requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["ResultReason"].RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, undefined, connectionMessage.textBody, resultProps);
                this.privRequestSession.onHypothesis(offset);
                const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechRecognitionEventArgs"](result, hypothesis.Duration, this.privRequestSession.sessionId);
                if (!!this.privSpeechRecognizer.recognizing) {
                    try {
                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);
                        /* tslint:disable:no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                break;
            case "speech.phrase":
                const simple = _Exports__WEBPACK_IMPORTED_MODULE_1__["SimpleSpeechPhrase"].fromJSON(connectionMessage.textBody);
                const resultReason = _Exports__WEBPACK_IMPORTED_MODULE_1__["EnumTranslation"].implTranslateRecognitionResult(simple.RecognitionStatus);
                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);
                if (_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["ResultReason"].Canceled === resultReason) {
                    const cancelReason = _Exports__WEBPACK_IMPORTED_MODULE_1__["EnumTranslation"].implTranslateCancelResult(simple.RecognitionStatus);
                    this.cancelRecognitionLocal(cancelReason, _Exports__WEBPACK_IMPORTED_MODULE_1__["EnumTranslation"].implTranslateCancelErrorCode(simple.RecognitionStatus), undefined, successCallback);
                }
                else {
                    if (!(this.privRequestSession.isSpeechEnded && resultReason === _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["ResultReason"].NoMatch && simple.RecognitionStatus !== _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].InitialSilenceTimeout)) {
                        if (this.privRecognizerConfig.parameters.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__["OutputFormatPropertyName"]) === _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["OutputFormat"][_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["OutputFormat"].Simple]) {
                            result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechRecognitionResult"](this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);
                        }
                        else {
                            const detailed = _Exports__WEBPACK_IMPORTED_MODULE_1__["DetailedSpeechPhrase"].fromJSON(connectionMessage.textBody);
                            result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechRecognitionResult"](this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === _Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionStatus"].Success ? detailed.NBest[0].Display : undefined, detailed.Duration, detailed.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);
                        }
                        const event = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechRecognitionEventArgs"](result, result.offset, this.privRequestSession.sessionId);
                        if (!!this.privSpeechRecognizer.recognized) {
                            try {
                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);
                                /* tslint:disable:no-empty */
                            }
                            catch (error) {
                                // Not going to let errors in the event handler
                                // trip things up.
                            }
                        }
                    }
                    // report result to promise.
                    if (!!successCallback) {
                        try {
                            successCallback(result);
                        }
                        catch (e) {
                            if (!!errorCallBack) {
                                errorCallBack(e);
                            }
                        }
                        // Only invoke the call back once.
                        // and if it's successful don't invoke the
                        // error after that.
                        successCallback = undefined;
                        errorCallBack = undefined;
                    }
                }
                break;
            default:
                break;
        }
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error, cancelRecoCallback) {
        const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["PropertyCollection"]();
        properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__["CancellationErrorCodePropertyName"], _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["CancellationErrorCode"][errorCode]);
        if (!!this.privSpeechRecognizer.canceled) {
            const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechRecognitionCanceledEventArgs"](cancellationReason, error, errorCode, undefined, sessionId);
            try {
                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);
                /* tslint:disable:no-empty */
            }
            catch (_a) { }
        }
        if (!!cancelRecoCallback) {
            const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechRecognitionResult"](requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__["ResultReason"].Canceled, undefined, // Text
            undefined, // Druation
            undefined, // Offset
            error, undefined, // Json
            properties);
            try {
                cancelRecoCallback(result);
                /* tslint:disable:no-empty */
            }
            catch (_b) { }
        }
    }
}

//# sourceMappingURL=SpeechServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationConnectionFactory.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationConnectionFactory.js ***!
  \******************************************************************************************************************************/
/*! exports provided: TranslationConnectionFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationConnectionFactory", function() { return TranslationConnectionFactory; });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConnectionFactoryBase */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.





const TestHooksParamName = "testhooks";
const ConnectionIdHeader = "X-ConnectionId";
class TranslationConnectionFactory extends _ConnectionFactoryBase__WEBPACK_IMPORTED_MODULE_2__["ConnectionFactoryBase"] {
    constructor() {
        super(...arguments);
        this.create = (config, authInfo, connectionId) => {
            let endpoint = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_Endpoint, undefined);
            if (!endpoint) {
                const region = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_Region, undefined);
                endpoint = "wss://" + region + ".s2s.speech.microsoft.com/speech/translation/cognitiveservices/v1";
            }
            const queryParams = {
                from: config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_RecoLanguage),
                to: config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_TranslationToLanguages),
            };
            this.setCommonUrlParams(config, queryParams, endpoint);
            this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceResponse_TranslationRequestStablePartialResult, _QueryParameterNames__WEBPACK_IMPORTED_MODULE_4__["QueryParameterNames"].StableTranslation, config, queryParams, endpoint);
            const voiceName = "voice";
            const featureName = "features";
            if (config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {
                queryParams[voiceName] = config.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_TranslationVoice);
                queryParams[featureName] = "texttospeech";
            }
            const headers = {};
            headers[authInfo.headerName] = authInfo.token;
            headers[ConnectionIdHeader] = connectionId;
            return new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["WebsocketConnection"](endpoint, queryParams, headers, new _Exports__WEBPACK_IMPORTED_MODULE_3__["WebsocketMessageFormatter"](), _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["ProxyInfo"].fromRecognizerConfig(config), connectionId);
        };
    }
}

//# sourceMappingURL=TranslationConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationServiceRecognizer.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationServiceRecognizer.js ***!
  \******************************************************************************************************************************/
/*! exports provided: TranslationServiceRecognizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationServiceRecognizer", function() { return TranslationServiceRecognizer; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



// tslint:disable-next-line:max-classes-per-file
class TranslationServiceRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_2__["ServiceRecognizerBase"] {
    constructor(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) {
        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);
        this.privTranslationRecognizer = translationRecognizer;
    }
    processTypeSpecificMessages(connectionMessage, successCallback, errorCallBack) {
        const resultProps = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyCollection"]();
        if (connectionMessage.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Text) {
            resultProps.setProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        }
        switch (connectionMessage.path.toLowerCase()) {
            case "translation.hypothesis":
                const result = this.fireEventForResult(_Exports__WEBPACK_IMPORTED_MODULE_2__["TranslationHypothesis"].fromJSON(connectionMessage.textBody), resultProps);
                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);
                if (!!this.privTranslationRecognizer.recognizing) {
                    try {
                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);
                        /* tslint:disable:no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                break;
            case "translation.phrase":
                const translatedPhrase = _Exports__WEBPACK_IMPORTED_MODULE_2__["TranslationPhrase"].fromJSON(connectionMessage.textBody);
                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);
                if (translatedPhrase.RecognitionStatus === _Exports__WEBPACK_IMPORTED_MODULE_2__["RecognitionStatus"].Success) {
                    // OK, the recognition was successful. How'd the translation do?
                    const result = this.fireEventForResult(translatedPhrase, resultProps);
                    if (!!this.privTranslationRecognizer.recognized) {
                        try {
                            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);
                            /* tslint:disable:no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                    // report result to promise.
                    if (!!successCallback) {
                        try {
                            successCallback(result.result);
                        }
                        catch (e) {
                            if (!!errorCallBack) {
                                errorCallBack(e);
                            }
                        }
                        // Only invoke the call back once.
                        // and if it's successful don't invoke the
                        // error after that.
                        successCallback = undefined;
                        errorCallBack = undefined;
                    }
                    break;
                }
                else {
                    const reason = _Exports__WEBPACK_IMPORTED_MODULE_2__["EnumTranslation"].implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);
                    const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationRecognitionResult"](undefined, this.privRequestSession.requestId, reason, translatedPhrase.Text, translatedPhrase.Duration, this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset, undefined, connectionMessage.textBody, resultProps);
                    if (reason === _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].Canceled) {
                        const cancelReason = _Exports__WEBPACK_IMPORTED_MODULE_2__["EnumTranslation"].implTranslateCancelResult(translatedPhrase.RecognitionStatus);
                        this.cancelRecognitionLocal(cancelReason, _Exports__WEBPACK_IMPORTED_MODULE_2__["EnumTranslation"].implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus), undefined, successCallback);
                    }
                    else {
                        if (!(this.privRequestSession.isSpeechEnded && reason === _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].NoMatch && translatedPhrase.RecognitionStatus !== _Exports__WEBPACK_IMPORTED_MODULE_2__["RecognitionStatus"].InitialSilenceTimeout)) {
                            const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationRecognitionEventArgs"](result, result.offset, this.privRequestSession.sessionId);
                            if (!!this.privTranslationRecognizer.recognized) {
                                try {
                                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);
                                    /* tslint:disable:no-empty */
                                }
                                catch (error) {
                                    // Not going to let errors in the event handler
                                    // trip things up.
                                }
                            }
                        }
                        // report result to promise.
                        if (!!successCallback) {
                            try {
                                successCallback(result);
                            }
                            catch (e) {
                                if (!!errorCallBack) {
                                    errorCallBack(e);
                                }
                            }
                            // Only invoke the call back once.
                            // and if it's successful don't invoke the
                            // error after that.
                            successCallback = undefined;
                            errorCallBack = undefined;
                        }
                    }
                }
                break;
            case "translation.synthesis":
                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);
                break;
            case "translation.synthesis.end":
                const synthEnd = _Exports__WEBPACK_IMPORTED_MODULE_2__["TranslationSynthesisEnd"].fromJSON(connectionMessage.textBody);
                switch (synthEnd.SynthesisStatus) {
                    case _Exports__WEBPACK_IMPORTED_MODULE_2__["SynthesisStatus"].Error:
                        if (!!this.privTranslationRecognizer.synthesizing) {
                            const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationSynthesisResult"](_sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].Canceled, undefined);
                            const retEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationSynthesisEventArgs"](result, this.privRequestSession.sessionId);
                            try {
                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);
                                /* tslint:disable:no-empty */
                            }
                            catch (error) {
                                // Not going to let errors in the event handler
                                // trip things up.
                            }
                        }
                        if (!!this.privTranslationRecognizer.canceled) {
                            // And raise a canceled event to send the rich(er) error message back.
                            const canceledResult = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationRecognitionCanceledEventArgs"](this.privRequestSession.sessionId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["CancellationReason"].Error, synthEnd.FailureReason, _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["CancellationErrorCode"].ServiceError, null);
                            try {
                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);
                                /* tslint:disable:no-empty */
                            }
                            catch (error) {
                                // Not going to let errors in the event handler
                                // trip things up.
                            }
                        }
                        break;
                    case _Exports__WEBPACK_IMPORTED_MODULE_2__["SynthesisStatus"].Success:
                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
    }
    // Cancels recognition.
    cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error, cancelRecoCallback) {
        const properties = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyCollection"]();
        properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["CancellationErrorCodePropertyName"], _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["CancellationErrorCode"][errorCode]);
        if (!!this.privTranslationRecognizer.canceled) {
            const cancelEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationRecognitionCanceledEventArgs"](sessionId, cancellationReason, error, errorCode, undefined);
            try {
                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);
                /* tslint:disable:no-empty */
            }
            catch (_a) { }
        }
        if (!!cancelRecoCallback) {
            const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationRecognitionResult"](undefined, // Translations
            requestId, _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].Canceled, undefined, // Text
            undefined, // Druation
            undefined, // Offset
            error, undefined, // Json
            properties);
            try {
                cancelRecoCallback(result);
                /* tslint:disable:no-empty */
            }
            catch (_b) { }
        }
    }
    fireEventForResult(serviceResult, properties) {
        let translations;
        if (undefined !== serviceResult.Translation.Translations) {
            translations = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["Translations"]();
            for (const translation of serviceResult.Translation.Translations) {
                translations.set(translation.Language, translation.Text);
            }
        }
        let resultReason;
        if (serviceResult instanceof _Exports__WEBPACK_IMPORTED_MODULE_2__["TranslationPhrase"]) {
            if (serviceResult.Translation.TranslationStatus === _common_Exports__WEBPACK_IMPORTED_MODULE_0__["TranslationStatus"].Success) {
                resultReason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].TranslatedSpeech;
            }
            else {
                resultReason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].RecognizedSpeech;
            }
        }
        else {
            resultReason = _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].TranslatingSpeech;
        }
        const offset = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;
        const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationRecognitionResult"](translations, this.privRequestSession.requestId, resultReason, serviceResult.Text, serviceResult.Duration, offset, serviceResult.Translation.FailureReason, JSON.stringify(serviceResult), properties);
        const ev = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationRecognitionEventArgs"](result, offset, this.privRequestSession.sessionId);
        return ev;
    }
    sendSynthesisAudio(audio, sessionId) {
        const reason = (undefined === audio) ? _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].SynthesizingAudioCompleted : _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["ResultReason"].SynthesizingAudio;
        const result = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationSynthesisResult"](reason, audio);
        const retEvent = new _sdk_Exports__WEBPACK_IMPORTED_MODULE_1__["TranslationSynthesisEventArgs"](result, sessionId);
        if (!!this.privTranslationRecognizer.synthesizing) {
            try {
                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);
                /* tslint:disable:no-empty */
            }
            catch (error) {
                // Not going to let errors in the event handler
                // trip things up.
            }
        }
    }
}

//# sourceMappingURL=TranslationServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationStatus.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationStatus.js ***!
  \*******************************************************************************************************************/
/*! exports provided: TranslationStatus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationStatus", function() { return TranslationStatus; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines translation status.
 * @class TranslationStatus
 */
var TranslationStatus;
(function (TranslationStatus) {
    /**
     * @member TranslationStatus.Success
     */
    TranslationStatus[TranslationStatus["Success"] = 0] = "Success";
    /**
     * @member TranslationStatus.Error
     */
    TranslationStatus[TranslationStatus["Error"] = 1] = "Error";
})(TranslationStatus || (TranslationStatus = {}));

//# sourceMappingURL=TranslationStatus.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js ***!
  \***************************************************************************************************************************/
/*! exports provided: WebsocketMessageFormatter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebsocketMessageFormatter", function() { return WebsocketMessageFormatter; });
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

const CRLF = "\r\n";
class WebsocketMessageFormatter {
    constructor() {
        this.toConnectionMessage = (message) => {
            const deferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Deferred"]();
            try {
                if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Text) {
                    const textMessage = message.textContent;
                    let headers = {};
                    let body = null;
                    if (textMessage) {
                        const headerBodySplit = textMessage.split("\r\n\r\n");
                        if (headerBodySplit && headerBodySplit.length > 0) {
                            headers = this.parseHeaders(headerBodySplit[0]);
                            if (headerBodySplit.length > 1) {
                                body = headerBodySplit[1];
                            }
                        }
                    }
                    deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionMessage"](message.messageType, body, headers, message.id));
                }
                else if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Binary) {
                    const binaryMessage = message.binaryContent;
                    let headers = {};
                    let body = null;
                    if (!binaryMessage || binaryMessage.byteLength < 2) {
                        throw new Error("Invalid binary message format. Header length missing.");
                    }
                    const dataView = new DataView(binaryMessage);
                    const headerLength = dataView.getInt16(0);
                    if (binaryMessage.byteLength < headerLength + 2) {
                        throw new Error("Invalid binary message format. Header content missing.");
                    }
                    let headersString = "";
                    for (let i = 0; i < headerLength; i++) {
                        headersString += String.fromCharCode((dataView).getInt8(i + 2));
                    }
                    headers = this.parseHeaders(headersString);
                    if (binaryMessage.byteLength > headerLength + 2) {
                        body = binaryMessage.slice(2 + headerLength);
                    }
                    deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionMessage"](message.messageType, body, headers, message.id));
                }
            }
            catch (e) {
                deferral.reject(`Error formatting the message. Error: ${e}`);
            }
            return deferral.promise();
        };
        this.fromConnectionMessage = (message) => {
            const deferral = new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["Deferred"]();
            try {
                if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Text) {
                    const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : ""}`;
                    deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["RawWebsocketMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Text, payload, message.id));
                }
                else if (message.messageType === _common_Exports__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Binary) {
                    const headersString = this.makeHeaders(message);
                    const content = message.binaryBody;
                    const headerInt8Array = new Int8Array(this.stringToArrayBuffer(headersString));
                    const payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));
                    const dataView = new DataView(payload);
                    dataView.setInt16(0, headerInt8Array.length);
                    for (let i = 0; i < headerInt8Array.byteLength; i++) {
                        dataView.setInt8(2 + i, headerInt8Array[i]);
                    }
                    if (content) {
                        const bodyInt8Array = new Int8Array(content);
                        for (let i = 0; i < bodyInt8Array.byteLength; i++) {
                            dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);
                        }
                    }
                    deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_0__["RawWebsocketMessage"](_common_Exports__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Binary, payload, message.id));
                }
            }
            catch (e) {
                deferral.reject(`Error formatting the message. ${e}`);
            }
            return deferral.promise();
        };
        this.makeHeaders = (message) => {
            let headersString = "";
            if (message.headers) {
                for (const header in message.headers) {
                    if (header) {
                        headersString += `${header}: ${message.headers[header]}${CRLF}`;
                    }
                }
            }
            return headersString;
        };
        this.parseHeaders = (headersString) => {
            const headers = {};
            if (headersString) {
                const headerMatches = headersString.match(/[^\r\n]+/g);
                if (headers) {
                    for (const header of headerMatches) {
                        if (header) {
                            const separatorIndex = header.indexOf(":");
                            const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;
                            const headerValue = separatorIndex > 0 && header.length > (separatorIndex + 1) ?
                                header.substr(separatorIndex + 1).trim() :
                                "";
                            headers[headerName] = headerValue;
                        }
                    }
                }
            }
            return headers;
        };
        this.stringToArrayBuffer = (str) => {
            const buffer = new ArrayBuffer(str.length);
            const view = new DataView(buffer);
            for (let i = 0; i < str.length; i++) {
                view.setUint8(i, str.charCodeAt(i));
            }
            return buffer;
        };
    }
}

//# sourceMappingURL=WebsocketMessageFormatter.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js ***!
  \************************************************************************************************************/
/*! exports provided: AudioSourceEvent, AudioSourceInitializingEvent, AudioSourceReadyEvent, AudioSourceOffEvent, AudioSourceErrorEvent, AudioStreamNodeEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioSourceEvent", function() { return AudioSourceEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioSourceInitializingEvent", function() { return AudioSourceInitializingEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioSourceReadyEvent", function() { return AudioSourceReadyEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioSourceOffEvent", function() { return AudioSourceOffEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioSourceErrorEvent", function() { return AudioSourceErrorEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioStreamNodeEvent", function() { return AudioStreamNodeEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioStreamNodeAttachingEvent", function() { return AudioStreamNodeAttachingEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioStreamNodeAttachedEvent", function() { return AudioStreamNodeAttachedEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioStreamNodeDetachedEvent", function() { return AudioStreamNodeDetachedEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioStreamNodeErrorEvent", function() { return AudioStreamNodeErrorEvent; });
/* harmony import */ var _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlatformEvent */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class AudioSourceEvent extends _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__["PlatformEvent"] {
    constructor(eventName, audioSourceId, eventType = _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__["EventType"].Info) {
        super(eventName, eventType);
        this.privAudioSourceId = audioSourceId;
    }
    get audioSourceId() {
        return this.privAudioSourceId;
    }
}
// tslint:disable-next-line:max-classes-per-file
class AudioSourceInitializingEvent extends AudioSourceEvent {
    constructor(audioSourceId) {
        super("AudioSourceInitializingEvent", audioSourceId);
    }
}
// tslint:disable-next-line:max-classes-per-file
class AudioSourceReadyEvent extends AudioSourceEvent {
    constructor(audioSourceId) {
        super("AudioSourceReadyEvent", audioSourceId);
    }
}
// tslint:disable-next-line:max-classes-per-file
class AudioSourceOffEvent extends AudioSourceEvent {
    constructor(audioSourceId) {
        super("AudioSourceOffEvent", audioSourceId);
    }
}
// tslint:disable-next-line:max-classes-per-file
class AudioSourceErrorEvent extends AudioSourceEvent {
    constructor(audioSourceId, error) {
        super("AudioSourceErrorEvent", audioSourceId, _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__["EventType"].Error);
        this.privError = error;
    }
    get error() {
        return this.privError;
    }
}
// tslint:disable-next-line:max-classes-per-file
class AudioStreamNodeEvent extends AudioSourceEvent {
    constructor(eventName, audioSourceId, audioNodeId) {
        super(eventName, audioSourceId);
        this.privAudioNodeId = audioNodeId;
    }
    get audioNodeId() {
        return this.privAudioNodeId;
    }
}
// tslint:disable-next-line:max-classes-per-file
class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {
    constructor(audioSourceId, audioNodeId) {
        super("AudioStreamNodeAttachingEvent", audioSourceId, audioNodeId);
    }
}
// tslint:disable-next-line:max-classes-per-file
class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {
    constructor(audioSourceId, audioNodeId) {
        super("AudioStreamNodeAttachedEvent", audioSourceId, audioNodeId);
    }
}
// tslint:disable-next-line:max-classes-per-file
class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {
    constructor(audioSourceId, audioNodeId) {
        super("AudioStreamNodeDetachedEvent", audioSourceId, audioNodeId);
    }
}
// tslint:disable-next-line:max-classes-per-file
class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {
    constructor(audioSourceId, audioNodeId, error) {
        super("AudioStreamNodeErrorEvent", audioSourceId, audioNodeId);
        this.privError = error;
    }
    get error() {
        return this.privError;
    }
}

//# sourceMappingURL=AudioSourceEvents.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ChunkedArrayBufferStream.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ChunkedArrayBufferStream.js ***!
  \*******************************************************************************************************************/
/*! exports provided: ChunkedArrayBufferStream */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkedArrayBufferStream", function() { return ChunkedArrayBufferStream; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class ChunkedArrayBufferStream extends _Exports__WEBPACK_IMPORTED_MODULE_0__["Stream"] {
    constructor(targetChunkSize, streamId) {
        super(streamId);
        this.privTargetChunkSize = targetChunkSize;
        this.privNextBufferReadyBytes = 0;
    }
    writeStreamChunk(chunk) {
        // No pending write, and the buffer is the right size so write it.
        if (chunk.isEnd ||
            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {
            super.writeStreamChunk(chunk);
            return;
        }
        let bytesCopiedFromBuffer = 0;
        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {
            // Fill the next buffer.
            if (undefined === this.privNextBufferToWrite) {
                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);
                this.privNextBufferStartTime = chunk.timeReceived;
            }
            // Find out how many bytes we can copy into the read buffer.
            const bytesToCopy = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);
            const targetView = new Uint8Array(this.privNextBufferToWrite);
            const sourceView = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));
            targetView.set(sourceView, this.privNextBufferReadyBytes);
            this.privNextBufferReadyBytes += bytesToCopy;
            bytesCopiedFromBuffer += bytesToCopy;
            // Are we ready to write?
            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {
                super.writeStreamChunk({
                    buffer: this.privNextBufferToWrite,
                    isEnd: false,
                    timeReceived: this.privNextBufferStartTime,
                });
                this.privNextBufferReadyBytes = 0;
                this.privNextBufferToWrite = undefined;
            }
        }
    }
    close() {
        // Send whatever is pending, then close the base class.
        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {
            super.writeStreamChunk({
                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),
                isEnd: false,
                timeReceived: this.privNextBufferStartTime,
            });
        }
        super.close();
    }
}

//# sourceMappingURL=ChunkedArrayBufferStream.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js ***!
  \***********************************************************************************************************/
/*! exports provided: ConnectionEvent, ConnectionStartEvent, ConnectionEstablishedEvent, ConnectionClosedEvent, ConnectionEstablishErrorEvent, ConnectionMessageReceivedEvent, ConnectionMessageSentEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionEvent", function() { return ConnectionEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionStartEvent", function() { return ConnectionStartEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionEstablishedEvent", function() { return ConnectionEstablishedEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionClosedEvent", function() { return ConnectionClosedEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionEstablishErrorEvent", function() { return ConnectionEstablishErrorEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionMessageReceivedEvent", function() { return ConnectionMessageReceivedEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionMessageSentEvent", function() { return ConnectionMessageSentEvent; });
/* harmony import */ var _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlatformEvent */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class ConnectionEvent extends _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__["PlatformEvent"] {
    constructor(eventName, connectionId, eventType = _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__["EventType"].Info) {
        super(eventName, eventType);
        this.privConnectionId = connectionId;
    }
    get connectionId() {
        return this.privConnectionId;
    }
}
// tslint:disable-next-line:max-classes-per-file
class ConnectionStartEvent extends ConnectionEvent {
    constructor(connectionId, uri, headers) {
        super("ConnectionStartEvent", connectionId);
        this.privUri = uri;
        this.privHeaders = headers;
    }
    get uri() {
        return this.privUri;
    }
    get headers() {
        return this.privHeaders;
    }
}
// tslint:disable-next-line:max-classes-per-file
class ConnectionEstablishedEvent extends ConnectionEvent {
    constructor(connectionId, metadata) {
        super("ConnectionEstablishedEvent", connectionId);
    }
}
// tslint:disable-next-line:max-classes-per-file
class ConnectionClosedEvent extends ConnectionEvent {
    constructor(connectionId, statusCode, reason) {
        super("ConnectionClosedEvent", connectionId, _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__["EventType"].Debug);
        this.privRreason = reason;
        this.privStatusCode = statusCode;
    }
    get reason() {
        return this.privRreason;
    }
    get statusCode() {
        return this.privStatusCode;
    }
}
// tslint:disable-next-line:max-classes-per-file
class ConnectionEstablishErrorEvent extends ConnectionEvent {
    constructor(connectionId, statuscode, reason) {
        super("ConnectionEstablishErrorEvent", connectionId, _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__["EventType"].Error);
        this.privStatusCode = statuscode;
        this.privReason = reason;
    }
    get reason() {
        return this.privReason;
    }
    get statusCode() {
        return this.privStatusCode;
    }
}
// tslint:disable-next-line:max-classes-per-file
class ConnectionMessageReceivedEvent extends ConnectionEvent {
    constructor(connectionId, networkReceivedTimeISO, message) {
        super("ConnectionMessageReceivedEvent", connectionId);
        this.privNetworkReceivedTime = networkReceivedTimeISO;
        this.privMessage = message;
    }
    get networkReceivedTime() {
        return this.privNetworkReceivedTime;
    }
    get message() {
        return this.privMessage;
    }
}
// tslint:disable-next-line:max-classes-per-file
class ConnectionMessageSentEvent extends ConnectionEvent {
    constructor(connectionId, networkSentTimeISO, message) {
        super("ConnectionMessageSentEvent", connectionId);
        this.privNetworkSentTime = networkSentTimeISO;
        this.privMessage = message;
    }
    get networkSentTime() {
        return this.privNetworkSentTime;
    }
    get message() {
        return this.privMessage;
    }
}

//# sourceMappingURL=ConnectionEvents.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js ***!
  \************************************************************************************************************/
/*! exports provided: MessageType, ConnectionMessage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageType", function() { return MessageType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionMessage", function() { return ConnectionMessage; });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


var MessageType;
(function (MessageType) {
    MessageType[MessageType["Text"] = 0] = "Text";
    MessageType[MessageType["Binary"] = 1] = "Binary";
})(MessageType || (MessageType = {}));
class ConnectionMessage {
    constructor(messageType, body, headers, id) {
        this.privBody = null;
        if (messageType === MessageType.Text && body && !(typeof (body) === "string")) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"]("Payload must be a string");
        }
        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"]("Payload must be ArrayBuffer");
        }
        this.privMessageType = messageType;
        this.privBody = body;
        this.privHeaders = headers ? headers : {};
        this.privId = id ? id : Object(_Guid__WEBPACK_IMPORTED_MODULE_1__["createNoDashGuid"])();
    }
    get messageType() {
        return this.privMessageType;
    }
    get headers() {
        return this.privHeaders;
    }
    get body() {
        return this.privBody;
    }
    get textBody() {
        if (this.privMessageType === MessageType.Binary) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"]("Not supported for binary message");
        }
        return this.privBody;
    }
    get binaryBody() {
        if (this.privMessageType === MessageType.Text) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"]("Not supported for text message");
        }
        return this.privBody;
    }
    get id() {
        return this.privId;
    }
}

//# sourceMappingURL=ConnectionMessage.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionOpenResponse.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionOpenResponse.js ***!
  \*****************************************************************************************************************/
/*! exports provided: ConnectionOpenResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionOpenResponse", function() { return ConnectionOpenResponse; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class ConnectionOpenResponse {
    constructor(statusCode, reason) {
        this.privStatusCode = statusCode;
        this.privReason = reason;
    }
    get statusCode() {
        return this.privStatusCode;
    }
    get reason() {
        return this.privReason;
    }
}

//# sourceMappingURL=ConnectionOpenResponse.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js ***!
  \************************************************************************************************/
/*! exports provided: ArgumentNullError, InvalidOperationError, ObjectDisposedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArgumentNullError", function() { return ArgumentNullError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvalidOperationError", function() { return InvalidOperationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectDisposedError", function() { return ObjectDisposedError; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * The error that is thrown when an argument passed in is null.
 *
 * @export
 * @class ArgumentNullError
 * @extends {Error}
 */
class ArgumentNullError extends Error {
    /**
     * Creates an instance of ArgumentNullError.
     *
     * @param {string} argumentName - Name of the argument that is null
     *
     * @memberOf ArgumentNullError
     */
    constructor(argumentName) {
        super(argumentName);
        this.name = "ArgumentNull";
        this.message = argumentName;
    }
}
/**
 * The error that is thrown when an invalid operation is performed in the code.
 *
 * @export
 * @class InvalidOperationError
 * @extends {Error}
 */
// tslint:disable-next-line:max-classes-per-file
class InvalidOperationError extends Error {
    /**
     * Creates an instance of InvalidOperationError.
     *
     * @param {string} error - The error
     *
     * @memberOf InvalidOperationError
     */
    constructor(error) {
        super(error);
        this.name = "InvalidOperation";
        this.message = error;
    }
}
/**
 * The error that is thrown when an object is disposed.
 *
 * @export
 * @class ObjectDisposedError
 * @extends {Error}
 */
// tslint:disable-next-line:max-classes-per-file
class ObjectDisposedError extends Error {
    /**
     * Creates an instance of ObjectDisposedError.
     *
     * @param {string} objectName - The object that is disposed
     * @param {string} error - The error
     *
     * @memberOf ObjectDisposedError
     */
    constructor(objectName, error) {
        super(error);
        this.name = objectName + "ObjectDisposed";
        this.message = error;
    }
}

//# sourceMappingURL=Error.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js ***!
  \******************************************************************************************************/
/*! exports provided: EventSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventSource", function() { return EventSource; });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class EventSource {
    constructor(metadata) {
        this.privEventListeners = {};
        this.privIsDisposed = false;
        this.onEvent = (event) => {
            if (this.isDisposed()) {
                throw (new _Error__WEBPACK_IMPORTED_MODULE_0__["ObjectDisposedError"]("EventSource"));
            }
            if (this.metadata) {
                for (const paramName in this.metadata) {
                    if (paramName) {
                        if (event.metadata) {
                            if (!event.metadata[paramName]) {
                                event.metadata[paramName] = this.metadata[paramName];
                            }
                        }
                    }
                }
            }
            for (const eventId in this.privEventListeners) {
                if (eventId && this.privEventListeners[eventId]) {
                    this.privEventListeners[eventId](event);
                }
            }
        };
        this.attach = (onEventCallback) => {
            const id = Object(_Guid__WEBPACK_IMPORTED_MODULE_1__["createNoDashGuid"])();
            this.privEventListeners[id] = onEventCallback;
            return {
                detach: () => {
                    delete this.privEventListeners[id];
                },
            };
        };
        this.attachListener = (listener) => {
            return this.attach(listener.onEvent);
        };
        this.isDisposed = () => {
            return this.privIsDisposed;
        };
        this.dispose = () => {
            this.privEventListeners = null;
            this.privIsDisposed = true;
        };
        this.privMetadata = metadata;
    }
    get metadata() {
        return this.privMetadata;
    }
}

//# sourceMappingURL=EventSource.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js ***!
  \*************************************************************************************************/
/*! exports provided: Events */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Events", function() { return Events; });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _EventSource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventSource */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


class Events {
    static get instance() {
        return Events.privInstance;
    }
}
Events.privInstance = new _EventSource__WEBPACK_IMPORTED_MODULE_1__["EventSource"]();
Events.setEventSource = (eventSource) => {
    if (!eventSource) {
        throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("eventSource");
    }
    Events.privInstance = eventSource;
};

//# sourceMappingURL=Events.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js ***!
  \**************************************************************************************************/
/*! exports provided: AudioSourceEvent, AudioSourceInitializingEvent, AudioSourceReadyEvent, AudioSourceOffEvent, AudioSourceErrorEvent, AudioStreamNodeEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent, ConnectionEvent, ConnectionStartEvent, ConnectionEstablishedEvent, ConnectionClosedEvent, ConnectionEstablishErrorEvent, ConnectionMessageReceivedEvent, ConnectionMessageSentEvent, MessageType, ConnectionMessage, ConnectionOpenResponse, ArgumentNullError, InvalidOperationError, ObjectDisposedError, Events, EventSource, createGuid, createNoDashGuid, ConnectionState, List, EventType, PlatformEvent, PromiseState, PromiseResult, PromiseResultEventSource, PromiseHelper, Promise, Deferred, Sink, Queue, RawWebsocketMessage, RiffPcmEncoder, Stream, StreamReader, TranslationStatus, ChunkedArrayBufferStream */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AudioSourceEvents */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioSourceEvent", function() { return _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__["AudioSourceEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioSourceInitializingEvent", function() { return _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__["AudioSourceInitializingEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioSourceReadyEvent", function() { return _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__["AudioSourceReadyEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioSourceOffEvent", function() { return _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__["AudioSourceOffEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioSourceErrorEvent", function() { return _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__["AudioSourceErrorEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioStreamNodeEvent", function() { return _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__["AudioStreamNodeEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioStreamNodeAttachingEvent", function() { return _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__["AudioStreamNodeAttachingEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioStreamNodeAttachedEvent", function() { return _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__["AudioStreamNodeAttachedEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioStreamNodeDetachedEvent", function() { return _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__["AudioStreamNodeDetachedEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioStreamNodeErrorEvent", function() { return _AudioSourceEvents__WEBPACK_IMPORTED_MODULE_0__["AudioStreamNodeErrorEvent"]; });

/* harmony import */ var _ConnectionEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConnectionEvents */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionEvent", function() { return _ConnectionEvents__WEBPACK_IMPORTED_MODULE_1__["ConnectionEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionStartEvent", function() { return _ConnectionEvents__WEBPACK_IMPORTED_MODULE_1__["ConnectionStartEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionEstablishedEvent", function() { return _ConnectionEvents__WEBPACK_IMPORTED_MODULE_1__["ConnectionEstablishedEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionClosedEvent", function() { return _ConnectionEvents__WEBPACK_IMPORTED_MODULE_1__["ConnectionClosedEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionEstablishErrorEvent", function() { return _ConnectionEvents__WEBPACK_IMPORTED_MODULE_1__["ConnectionEstablishErrorEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionMessageReceivedEvent", function() { return _ConnectionEvents__WEBPACK_IMPORTED_MODULE_1__["ConnectionMessageReceivedEvent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionMessageSentEvent", function() { return _ConnectionEvents__WEBPACK_IMPORTED_MODULE_1__["ConnectionMessageSentEvent"]; });

/* harmony import */ var _ConnectionMessage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ConnectionMessage */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MessageType", function() { return _ConnectionMessage__WEBPACK_IMPORTED_MODULE_2__["MessageType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionMessage", function() { return _ConnectionMessage__WEBPACK_IMPORTED_MODULE_2__["ConnectionMessage"]; });

/* harmony import */ var _ConnectionOpenResponse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConnectionOpenResponse */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionOpenResponse.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionOpenResponse", function() { return _ConnectionOpenResponse__WEBPACK_IMPORTED_MODULE_3__["ConnectionOpenResponse"]; });

/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArgumentNullError", function() { return _Error__WEBPACK_IMPORTED_MODULE_4__["ArgumentNullError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InvalidOperationError", function() { return _Error__WEBPACK_IMPORTED_MODULE_4__["InvalidOperationError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ObjectDisposedError", function() { return _Error__WEBPACK_IMPORTED_MODULE_4__["ObjectDisposedError"]; });

/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Events */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Events", function() { return _Events__WEBPACK_IMPORTED_MODULE_5__["Events"]; });

/* harmony import */ var _EventSource__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./EventSource */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EventSource", function() { return _EventSource__WEBPACK_IMPORTED_MODULE_6__["EventSource"]; });

/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createGuid", function() { return _Guid__WEBPACK_IMPORTED_MODULE_7__["createGuid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createNoDashGuid", function() { return _Guid__WEBPACK_IMPORTED_MODULE_7__["createNoDashGuid"]; });

/* harmony import */ var _IConnection__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./IConnection */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionState", function() { return _IConnection__WEBPACK_IMPORTED_MODULE_8__["ConnectionState"]; });

/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./List */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/List.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "List", function() { return _List__WEBPACK_IMPORTED_MODULE_9__["List"]; });

/* harmony import */ var _PlatformEvent__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./PlatformEvent */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EventType", function() { return _PlatformEvent__WEBPACK_IMPORTED_MODULE_10__["EventType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PlatformEvent", function() { return _PlatformEvent__WEBPACK_IMPORTED_MODULE_10__["PlatformEvent"]; });

/* harmony import */ var _Promise__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Promise */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PromiseState", function() { return _Promise__WEBPACK_IMPORTED_MODULE_11__["PromiseState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PromiseResult", function() { return _Promise__WEBPACK_IMPORTED_MODULE_11__["PromiseResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PromiseResultEventSource", function() { return _Promise__WEBPACK_IMPORTED_MODULE_11__["PromiseResultEventSource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PromiseHelper", function() { return _Promise__WEBPACK_IMPORTED_MODULE_11__["PromiseHelper"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Promise", function() { return _Promise__WEBPACK_IMPORTED_MODULE_11__["Promise"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return _Promise__WEBPACK_IMPORTED_MODULE_11__["Deferred"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sink", function() { return _Promise__WEBPACK_IMPORTED_MODULE_11__["Sink"]; });

/* harmony import */ var _Queue__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Queue */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Queue", function() { return _Queue__WEBPACK_IMPORTED_MODULE_12__["Queue"]; });

/* harmony import */ var _RawWebsocketMessage__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./RawWebsocketMessage */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RawWebsocketMessage", function() { return _RawWebsocketMessage__WEBPACK_IMPORTED_MODULE_13__["RawWebsocketMessage"]; });

/* harmony import */ var _RiffPcmEncoder__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./RiffPcmEncoder */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RiffPcmEncoder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RiffPcmEncoder", function() { return _RiffPcmEncoder__WEBPACK_IMPORTED_MODULE_14__["RiffPcmEncoder"]; });

/* harmony import */ var _Stream__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Stream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Stream", function() { return _Stream__WEBPACK_IMPORTED_MODULE_15__["Stream"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StreamReader", function() { return _Stream__WEBPACK_IMPORTED_MODULE_15__["StreamReader"]; });

/* harmony import */ var _common_speech_TranslationStatus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../common.speech/TranslationStatus */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/TranslationStatus.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationStatus", function() { return _common_speech_TranslationStatus__WEBPACK_IMPORTED_MODULE_16__["TranslationStatus"]; });

/* harmony import */ var _ChunkedArrayBufferStream__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ChunkedArrayBufferStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ChunkedArrayBufferStream.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChunkedArrayBufferStream", function() { return _ChunkedArrayBufferStream__WEBPACK_IMPORTED_MODULE_17__["ChunkedArrayBufferStream"]; });

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



















//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js ***!
  \***********************************************************************************************/
/*! exports provided: createGuid, createNoDashGuid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createGuid", function() { return createGuid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNoDashGuid", function() { return createNoDashGuid; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
const createGuid = () => {
    let d = new Date().getTime();
    const guid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
        const r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === "x" ? r : (r & 0x3 | 0x8)).toString(16);
    });
    return guid;
};
const createNoDashGuid = () => {
    return createGuid().replace(new RegExp("-", "g"), "").toUpperCase();
};


//# sourceMappingURL=Guid.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js ***!
  \******************************************************************************************************/
/*! exports provided: ConnectionState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionState", function() { return ConnectionState; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["None"] = 0] = "None";
    ConnectionState[ConnectionState["Connected"] = 1] = "Connected";
    ConnectionState[ConnectionState["Connecting"] = 2] = "Connecting";
    ConnectionState[ConnectionState["Disconnected"] = 3] = "Disconnected";
})(ConnectionState || (ConnectionState = {}));

//# sourceMappingURL=IConnection.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/List.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/List.js ***!
  \***********************************************************************************************/
/*! exports provided: List */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "List", function() { return List; });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

class List {
    constructor(list) {
        this.privSubscriptionIdCounter = 0;
        this.privAddSubscriptions = {};
        this.privRemoveSubscriptions = {};
        this.privDisposedSubscriptions = {};
        this.privDisposeReason = null;
        this.get = (itemIndex) => {
            this.throwIfDisposed();
            return this.privList[itemIndex];
        };
        this.first = () => {
            return this.get(0);
        };
        this.last = () => {
            return this.get(this.length() - 1);
        };
        this.add = (item) => {
            this.throwIfDisposed();
            this.insertAt(this.privList.length, item);
        };
        this.insertAt = (index, item) => {
            this.throwIfDisposed();
            if (index === 0) {
                this.privList.unshift(item);
            }
            else if (index === this.privList.length) {
                this.privList.push(item);
            }
            else {
                this.privList.splice(index, 0, item);
            }
            this.triggerSubscriptions(this.privAddSubscriptions);
        };
        this.removeFirst = () => {
            this.throwIfDisposed();
            return this.removeAt(0);
        };
        this.removeLast = () => {
            this.throwIfDisposed();
            return this.removeAt(this.length() - 1);
        };
        this.removeAt = (index) => {
            this.throwIfDisposed();
            return this.remove(index, 1)[0];
        };
        this.remove = (index, count) => {
            this.throwIfDisposed();
            const removedElements = this.privList.splice(index, count);
            this.triggerSubscriptions(this.privRemoveSubscriptions);
            return removedElements;
        };
        this.clear = () => {
            this.throwIfDisposed();
            this.remove(0, this.length());
        };
        this.length = () => {
            this.throwIfDisposed();
            return this.privList.length;
        };
        this.onAdded = (addedCallback) => {
            this.throwIfDisposed();
            const subscriptionId = this.privSubscriptionIdCounter++;
            this.privAddSubscriptions[subscriptionId] = addedCallback;
            return {
                detach: () => {
                    delete this.privAddSubscriptions[subscriptionId];
                },
            };
        };
        this.onRemoved = (removedCallback) => {
            this.throwIfDisposed();
            const subscriptionId = this.privSubscriptionIdCounter++;
            this.privRemoveSubscriptions[subscriptionId] = removedCallback;
            return {
                detach: () => {
                    delete this.privRemoveSubscriptions[subscriptionId];
                },
            };
        };
        this.onDisposed = (disposedCallback) => {
            this.throwIfDisposed();
            const subscriptionId = this.privSubscriptionIdCounter++;
            this.privDisposedSubscriptions[subscriptionId] = disposedCallback;
            return {
                detach: () => {
                    delete this.privDisposedSubscriptions[subscriptionId];
                },
            };
        };
        this.join = (seperator) => {
            this.throwIfDisposed();
            return this.privList.join(seperator);
        };
        this.toArray = () => {
            const cloneCopy = Array();
            this.privList.forEach((val) => {
                cloneCopy.push(val);
            });
            return cloneCopy;
        };
        this.any = (callback) => {
            this.throwIfDisposed();
            if (callback) {
                return this.where(callback).length() > 0;
            }
            else {
                return this.length() > 0;
            }
        };
        this.all = (callback) => {
            this.throwIfDisposed();
            return this.where(callback).length() === this.length();
        };
        this.forEach = (callback) => {
            this.throwIfDisposed();
            for (let i = 0; i < this.length(); i++) {
                callback(this.privList[i], i);
            }
        };
        this.select = (callback) => {
            this.throwIfDisposed();
            const selectList = [];
            for (let i = 0; i < this.privList.length; i++) {
                selectList.push(callback(this.privList[i], i));
            }
            return new List(selectList);
        };
        this.where = (callback) => {
            this.throwIfDisposed();
            const filteredList = new List();
            for (let i = 0; i < this.privList.length; i++) {
                if (callback(this.privList[i], i)) {
                    filteredList.add(this.privList[i]);
                }
            }
            return filteredList;
        };
        this.orderBy = (compareFn) => {
            this.throwIfDisposed();
            const clonedArray = this.toArray();
            const orderedArray = clonedArray.sort(compareFn);
            return new List(orderedArray);
        };
        this.orderByDesc = (compareFn) => {
            this.throwIfDisposed();
            return this.orderBy((a, b) => compareFn(b, a));
        };
        this.clone = () => {
            this.throwIfDisposed();
            return new List(this.toArray());
        };
        this.concat = (list) => {
            this.throwIfDisposed();
            return new List(this.privList.concat(list.toArray()));
        };
        this.concatArray = (array) => {
            this.throwIfDisposed();
            return new List(this.privList.concat(array));
        };
        this.isDisposed = () => {
            return this.privList == null;
        };
        this.dispose = (reason) => {
            if (!this.isDisposed()) {
                this.privDisposeReason = reason;
                this.privList = null;
                this.privAddSubscriptions = null;
                this.privRemoveSubscriptions = null;
                this.triggerSubscriptions(this.privDisposedSubscriptions);
            }
        };
        this.throwIfDisposed = () => {
            if (this.isDisposed()) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ObjectDisposedError"]("List", this.privDisposeReason);
            }
        };
        this.triggerSubscriptions = (subscriptions) => {
            if (subscriptions) {
                for (const subscriptionId in subscriptions) {
                    if (subscriptionId) {
                        subscriptions[subscriptionId]();
                    }
                }
            }
        };
        this.privList = [];
        // copy the list rather than taking as is.
        if (list) {
            for (const item of list) {
                this.privList.push(item);
            }
        }
    }
}

//# sourceMappingURL=List.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js ***!
  \********************************************************************************************************/
/*! exports provided: EventType, PlatformEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventType", function() { return EventType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformEvent", function() { return PlatformEvent; });
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

var EventType;
(function (EventType) {
    EventType[EventType["Debug"] = 0] = "Debug";
    EventType[EventType["Info"] = 1] = "Info";
    EventType[EventType["Warning"] = 2] = "Warning";
    EventType[EventType["Error"] = 3] = "Error";
})(EventType || (EventType = {}));
class PlatformEvent {
    constructor(eventName, eventType) {
        this.privName = eventName;
        this.privEventId = Object(_Guid__WEBPACK_IMPORTED_MODULE_0__["createNoDashGuid"])();
        this.privEventTime = new Date().toISOString();
        this.privEventType = eventType;
        this.privMetadata = {};
    }
    get name() {
        return this.privName;
    }
    get eventId() {
        return this.privEventId;
    }
    get eventTime() {
        return this.privEventTime;
    }
    get eventType() {
        return this.privEventType;
    }
    get metadata() {
        return this.privMetadata;
    }
}

//# sourceMappingURL=PlatformEvent.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js ***!
  \**************************************************************************************************/
/*! exports provided: PromiseState, PromiseResult, PromiseResultEventSource, PromiseHelper, Promise, Deferred, Sink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PromiseState", function() { return PromiseState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PromiseResult", function() { return PromiseResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PromiseResultEventSource", function() { return PromiseResultEventSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PromiseHelper", function() { return PromiseHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Promise", function() { return Promise; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return Deferred; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sink", function() { return Sink; });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

var PromiseState;
(function (PromiseState) {
    PromiseState[PromiseState["None"] = 0] = "None";
    PromiseState[PromiseState["Resolved"] = 1] = "Resolved";
    PromiseState[PromiseState["Rejected"] = 2] = "Rejected";
})(PromiseState || (PromiseState = {}));
class PromiseResult {
    constructor(promiseResultEventSource) {
        this.throwIfError = () => {
            if (this.isError) {
                throw this.error;
            }
        };
        promiseResultEventSource.on((result) => {
            if (!this.privIsCompleted) {
                this.privIsCompleted = true;
                this.privIsError = false;
                this.privResult = result;
            }
        }, (error) => {
            if (!this.privIsCompleted) {
                this.privIsCompleted = true;
                this.privIsError = true;
                this.privError = error;
            }
        });
    }
    get isCompleted() {
        return this.privIsCompleted;
    }
    get isError() {
        return this.privIsError;
    }
    get error() {
        return this.privError;
    }
    get result() {
        return this.privResult;
    }
}
// tslint:disable-next-line:max-classes-per-file
class PromiseResultEventSource {
    constructor() {
        this.setResult = (result) => {
            this.privOnSetResult(result);
        };
        this.setError = (error) => {
            this.privOnSetError(error);
        };
        this.on = (onSetResult, onSetError) => {
            this.privOnSetResult = onSetResult;
            this.privOnSetError = onSetError;
        };
    }
}
// tslint:disable-next-line:max-classes-per-file
class PromiseHelper {
}
PromiseHelper.whenAll = (promises) => {
    if (!promises || promises.length === 0) {
        throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("promises");
    }
    const deferred = new Deferred();
    const errors = [];
    let completedPromises = 0;
    const checkForCompletion = () => {
        completedPromises++;
        if (completedPromises === promises.length) {
            if (errors.length === 0) {
                deferred.resolve(true);
            }
            else {
                deferred.reject(errors.join(", "));
            }
        }
    };
    for (const promise of promises) {
        promise.on((r) => {
            checkForCompletion();
        }, (e) => {
            errors.push(e);
            checkForCompletion();
        });
    }
    return deferred.promise();
};
PromiseHelper.fromResult = (result) => {
    const deferred = new Deferred();
    deferred.resolve(result);
    return deferred.promise();
};
PromiseHelper.fromError = (error) => {
    const deferred = new Deferred();
    deferred.reject(error);
    return deferred.promise();
};
// TODO: replace with ES6 promises
// tslint:disable-next-line:max-classes-per-file
class Promise {
    constructor(sink) {
        this.result = () => {
            return this.privSink.result;
        };
        this.continueWith = (continuationCallback) => {
            if (!continuationCallback) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("continuationCallback");
            }
            const continuationDeferral = new Deferred();
            this.privSink.on((r) => {
                try {
                    const continuationResult = continuationCallback(this.privSink.result);
                    continuationDeferral.resolve(continuationResult);
                }
                catch (e) {
                    continuationDeferral.reject(e);
                }
            }, (error) => {
                try {
                    const continuationResult = continuationCallback(this.privSink.result);
                    continuationDeferral.resolve(continuationResult);
                }
                catch (e) {
                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);
                }
            });
            return continuationDeferral.promise();
        };
        this.onSuccessContinueWith = (continuationCallback) => {
            if (!continuationCallback) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("continuationCallback");
            }
            const continuationDeferral = new Deferred();
            this.privSink.on((r) => {
                try {
                    const continuationResult = continuationCallback(r);
                    continuationDeferral.resolve(continuationResult);
                }
                catch (e) {
                    continuationDeferral.reject(e);
                }
            }, (error) => {
                continuationDeferral.reject(error);
            });
            return continuationDeferral.promise();
        };
        this.continueWithPromise = (continuationCallback) => {
            if (!continuationCallback) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("continuationCallback");
            }
            const continuationDeferral = new Deferred();
            this.privSink.on((r) => {
                try {
                    const continuationPromise = continuationCallback(this.privSink.result);
                    if (!continuationPromise) {
                        throw new Error("'Continuation callback did not return promise'");
                    }
                    continuationPromise.on((continuationResult) => {
                        continuationDeferral.resolve(continuationResult);
                    }, (e) => {
                        continuationDeferral.reject(e);
                    });
                }
                catch (e) {
                    continuationDeferral.reject(e);
                }
            }, (error) => {
                try {
                    const continuationPromise = continuationCallback(this.privSink.result);
                    if (!continuationPromise) {
                        throw new Error("Continuation callback did not return promise");
                    }
                    continuationPromise.on((continuationResult) => {
                        continuationDeferral.resolve(continuationResult);
                    }, (e) => {
                        continuationDeferral.reject(e);
                    });
                }
                catch (e) {
                    continuationDeferral.reject(`'Error handler for error ${error} threw error ${e}'`);
                }
            });
            return continuationDeferral.promise();
        };
        this.onSuccessContinueWithPromise = (continuationCallback) => {
            if (!continuationCallback) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("continuationCallback");
            }
            const continuationDeferral = new Deferred();
            this.privSink.on((r) => {
                try {
                    const continuationPromise = continuationCallback(r);
                    if (!continuationPromise) {
                        throw new Error("Continuation callback did not return promise");
                    }
                    continuationPromise.on((continuationResult) => {
                        continuationDeferral.resolve(continuationResult);
                    }, (e) => {
                        continuationDeferral.reject(e);
                    });
                }
                catch (e) {
                    continuationDeferral.reject(e);
                }
            }, (error) => {
                continuationDeferral.reject(error);
            });
            return continuationDeferral.promise();
        };
        this.on = (successCallback, errorCallback) => {
            if (!successCallback) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("successCallback");
            }
            if (!errorCallback) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("errorCallback");
            }
            this.privSink.on(successCallback, errorCallback);
            return this;
        };
        this.finally = (callback) => {
            if (!callback) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ArgumentNullError"]("callback");
            }
            const callbackWrapper = (_) => {
                callback();
            };
            return this.on(callbackWrapper, callbackWrapper);
        };
        this.privSink = sink;
    }
}
// tslint:disable-next-line:max-classes-per-file
class Deferred {
    constructor() {
        this.state = () => {
            return this.privSink.state;
        };
        this.promise = () => {
            return this.privPromise;
        };
        this.resolve = (result) => {
            this.privSink.resolve(result);
            return this;
        };
        this.reject = (error) => {
            this.privSink.reject(error);
            return this;
        };
        this.privSink = new Sink();
        this.privPromise = new Promise(this.privSink);
    }
}
// tslint:disable-next-line:max-classes-per-file
class Sink {
    constructor() {
        this.privState = PromiseState.None;
        this.privPromiseResult = null;
        this.privPromiseResultEvents = null;
        this.privSuccessHandlers = [];
        this.privErrorHandlers = [];
        this.resolve = (result) => {
            if (this.privState !== PromiseState.None) {
                throw new Error("'Cannot resolve a completed promise'");
            }
            this.privState = PromiseState.Resolved;
            this.privPromiseResultEvents.setResult(result);
            for (let i = 0; i < this.privSuccessHandlers.length; i++) {
                this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);
            }
            this.detachHandlers();
        };
        this.reject = (error) => {
            if (this.privState !== PromiseState.None) {
                throw new Error("'Cannot reject a completed promise'");
            }
            this.privState = PromiseState.Rejected;
            this.privPromiseResultEvents.setError(error);
            for (const errorHandler of this.privErrorHandlers) {
                this.executeErrorCallback(error, errorHandler);
            }
            this.detachHandlers();
        };
        this.on = (successCallback, errorCallback) => {
            if (successCallback == null) {
                successCallback = (r) => { return; };
            }
            if (this.privState === PromiseState.None) {
                this.privSuccessHandlers.push(successCallback);
                this.privErrorHandlers.push(errorCallback);
            }
            else {
                if (this.privState === PromiseState.Resolved) {
                    this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);
                }
                else if (this.privState === PromiseState.Rejected) {
                    this.executeErrorCallback(this.privPromiseResult.error, errorCallback);
                }
                this.detachHandlers();
            }
        };
        this.executeSuccessCallback = (result, successCallback, errorCallback) => {
            try {
                successCallback(result);
            }
            catch (e) {
                this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);
            }
        };
        this.executeErrorCallback = (error, errorCallback) => {
            if (errorCallback) {
                try {
                    errorCallback(error);
                }
                catch (e) {
                    throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);
                }
            }
            else {
                throw new Error(`'Unhandled error: ${error}'`);
            }
        };
        this.detachHandlers = () => {
            this.privErrorHandlers = [];
            this.privSuccessHandlers = [];
        };
        this.privPromiseResultEvents = new PromiseResultEventSource();
        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);
    }
    get state() {
        return this.privState;
    }
    get result() {
        return this.privPromiseResult;
    }
}

//# sourceMappingURL=Promise.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js ***!
  \************************************************************************************************/
/*! exports provided: Queue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Queue", function() { return Queue; });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./List */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/List.js");
/* harmony import */ var _Promise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Promise */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



var SubscriberType;
(function (SubscriberType) {
    SubscriberType[SubscriberType["Dequeue"] = 0] = "Dequeue";
    SubscriberType[SubscriberType["Peek"] = 1] = "Peek";
})(SubscriberType || (SubscriberType = {}));
class Queue {
    constructor(list) {
        this.privPromiseStore = new _List__WEBPACK_IMPORTED_MODULE_1__["List"]();
        this.privIsDrainInProgress = false;
        this.privIsDisposing = false;
        this.privDisposeReason = null;
        this.enqueue = (item) => {
            this.throwIfDispose();
            this.enqueueFromPromise(_Promise__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(item));
        };
        this.enqueueFromPromise = (promise) => {
            this.throwIfDispose();
            this.privPromiseStore.add(promise);
            promise.finally(() => {
                while (this.privPromiseStore.length() > 0) {
                    if (!this.privPromiseStore.first().result().isCompleted) {
                        break;
                    }
                    else {
                        const p = this.privPromiseStore.removeFirst();
                        if (!p.result().isError) {
                            this.privList.add(p.result().result);
                        }
                        else {
                            // TODO: Log as warning.
                        }
                    }
                }
            });
        };
        this.dequeue = () => {
            this.throwIfDispose();
            const deferredSubscriber = new _Promise__WEBPACK_IMPORTED_MODULE_2__["Deferred"]();
            if (this.privSubscribers) {
                this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });
                this.drain();
            }
            return deferredSubscriber.promise();
        };
        this.peek = () => {
            this.throwIfDispose();
            const deferredSubscriber = new _Promise__WEBPACK_IMPORTED_MODULE_2__["Deferred"]();
            const subs = this.privSubscribers;
            if (subs) {
                this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });
                this.drain();
            }
            return deferredSubscriber.promise();
        };
        this.length = () => {
            this.throwIfDispose();
            return this.privList.length();
        };
        this.isDisposed = () => {
            return this.privSubscribers == null;
        };
        this.drainAndDispose = (pendingItemProcessor, reason) => {
            if (!this.isDisposed() && !this.privIsDisposing) {
                this.privDisposeReason = reason;
                this.privIsDisposing = true;
                const subs = this.privSubscribers;
                if (subs) {
                    while (subs.length() > 0) {
                        const subscriber = subs.removeFirst();
                        // TODO: this needs work (Resolve(null) instead?).
                        subscriber.deferral.resolve(undefined);
                        // subscriber.deferral.reject("Disposed");
                    }
                    // note: this block assumes cooperative multitasking, i.e.,
                    // between the if-statement and the assignment there are no
                    // thread switches.
                    // Reason is that between the initial const = this.; and this
                    // point there is the derral.resolve() operation that might have
                    // caused recursive calls to the Queue, especially, calling
                    // Dispose() on the queue alredy (which would reset the var
                    // here to null!).
                    // That should generally hold true for javascript...
                    if (this.privSubscribers === subs) {
                        this.privSubscribers = subs;
                    }
                }
                for (const detachable of this.privDetachables) {
                    detachable.detach();
                }
                if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {
                    return _Promise__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"]
                        .whenAll(this.privPromiseStore.toArray())
                        .continueWith(() => {
                        this.privSubscribers = null;
                        this.privList.forEach((item, index) => {
                            pendingItemProcessor(item);
                        });
                        this.privList = null;
                        return true;
                    });
                }
                else {
                    this.privSubscribers = null;
                    this.privList = null;
                }
            }
            return _Promise__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(true);
        };
        this.dispose = (reason) => {
            this.drainAndDispose(null, reason);
        };
        this.drain = () => {
            if (!this.privIsDrainInProgress && !this.privIsDisposing) {
                this.privIsDrainInProgress = true;
                const subs = this.privSubscribers;
                const lists = this.privList;
                if (subs && lists) {
                    while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {
                        const subscriber = subs.removeFirst();
                        if (subscriber.type === SubscriberType.Peek) {
                            subscriber.deferral.resolve(lists.first());
                        }
                        else {
                            const dequeuedItem = lists.removeFirst();
                            subscriber.deferral.resolve(dequeuedItem);
                        }
                    }
                    // note: this block assumes cooperative multitasking, i.e.,
                    // between the if-statement and the assignment there are no
                    // thread switches.
                    // Reason is that between the initial const = this.; and this
                    // point there is the derral.resolve() operation that might have
                    // caused recursive calls to the Queue, especially, calling
                    // Dispose() on the queue alredy (which would reset the var
                    // here to null!).
                    // That should generally hold true for javascript...
                    if (this.privSubscribers === subs) {
                        this.privSubscribers = subs;
                    }
                    // note: this block assumes cooperative multitasking, i.e.,
                    // between the if-statement and the assignment there are no
                    // thread switches.
                    // Reason is that between the initial const = this.; and this
                    // point there is the derral.resolve() operation that might have
                    // caused recursive calls to the Queue, especially, calling
                    // Dispose() on the queue alredy (which would reset the var
                    // here to null!).
                    // That should generally hold true for javascript...
                    if (this.privList === lists) {
                        this.privList = lists;
                    }
                }
                this.privIsDrainInProgress = false;
            }
        };
        this.throwIfDispose = () => {
            if (this.isDisposed()) {
                if (this.privDisposeReason) {
                    throw new _Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"](this.privDisposeReason);
                }
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["ObjectDisposedError"]("Queue");
            }
            else if (this.privIsDisposing) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"]("Queue disposing");
            }
        };
        this.privList = list ? list : new _List__WEBPACK_IMPORTED_MODULE_1__["List"]();
        this.privDetachables = [];
        this.privSubscribers = new _List__WEBPACK_IMPORTED_MODULE_1__["List"]();
        this.privDetachables.push(this.privList.onAdded(this.drain));
    }
}

//# sourceMappingURL=Queue.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js ***!
  \**************************************************************************************************************/
/*! exports provided: RawWebsocketMessage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RawWebsocketMessage", function() { return RawWebsocketMessage; });
/* harmony import */ var _ConnectionMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConnectionMessage */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js");
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class RawWebsocketMessage {
    constructor(messageType, payload, id) {
        this.privPayload = null;
        if (!payload) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_1__["ArgumentNullError"]("payload");
        }
        if (messageType === _ConnectionMessage__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Binary && !(payload instanceof ArrayBuffer)) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_1__["InvalidOperationError"]("Payload must be ArrayBuffer");
        }
        if (messageType === _ConnectionMessage__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Text && !(typeof (payload) === "string")) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_1__["InvalidOperationError"]("Payload must be a string");
        }
        this.privMessageType = messageType;
        this.privPayload = payload;
        this.privId = id ? id : Object(_Guid__WEBPACK_IMPORTED_MODULE_2__["createNoDashGuid"])();
    }
    get messageType() {
        return this.privMessageType;
    }
    get payload() {
        return this.privPayload;
    }
    get textContent() {
        if (this.privMessageType === _ConnectionMessage__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Binary) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_1__["InvalidOperationError"]("Not supported for binary message");
        }
        return this.privPayload;
    }
    get binaryContent() {
        if (this.privMessageType === _ConnectionMessage__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Text) {
            throw new _Error__WEBPACK_IMPORTED_MODULE_1__["InvalidOperationError"]("Not supported for text message");
        }
        return this.privPayload;
    }
    get id() {
        return this.privId;
    }
}

//# sourceMappingURL=RawWebsocketMessage.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RiffPcmEncoder.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RiffPcmEncoder.js ***!
  \*********************************************************************************************************/
/*! exports provided: RiffPcmEncoder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RiffPcmEncoder", function() { return RiffPcmEncoder; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
class RiffPcmEncoder {
    constructor(actualSampleRate, desiredSampleRate) {
        this.privChannelCount = 1;
        this.encode = (needHeader, actualAudioFrame) => {
            const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);
            if (!audioFrame) {
                return null;
            }
            const audioLength = audioFrame.length * 2;
            if (!needHeader) {
                const buffer = new ArrayBuffer(audioLength);
                const view = new DataView(buffer);
                this.floatTo16BitPCM(view, 0, audioFrame);
                return buffer;
            }
            const buffer = new ArrayBuffer(44 + audioLength);
            const bitsPerSample = 16;
            const bytesPerSample = bitsPerSample / 8;
            // We dont know ahead of time about the length of audio to stream. So set to 0.
            const fileLength = 0;
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView
            const view = new DataView(buffer);
            /* RIFF identifier */
            this.setString(view, 0, "RIFF");
            /* file length */
            view.setUint32(4, fileLength, true);
            /* RIFF type & Format */
            this.setString(view, 8, "WAVEfmt ");
            /* format chunk length */
            view.setUint32(16, 16, true);
            /* sample format (raw) */
            view.setUint16(20, 1, true);
            /* channel count */
            view.setUint16(22, this.privChannelCount, true);
            /* sample rate */
            view.setUint32(24, this.privDesiredSampleRate, true);
            /* byte rate (sample rate * block align) */
            view.setUint32(28, this.privDesiredSampleRate * this.privChannelCount * bytesPerSample, true);
            /* block align (channel count * bytes per sample) */
            view.setUint16(32, this.privChannelCount * bytesPerSample, true);
            /* bits per sample */
            view.setUint16(34, bitsPerSample, true);
            /* data chunk identifier */
            this.setString(view, 36, "data");
            /* data chunk length */
            view.setUint32(40, fileLength, true);
            this.floatTo16BitPCM(view, 44, audioFrame);
            return buffer;
        };
        this.setString = (view, offset, str) => {
            for (let i = 0; i < str.length; i++) {
                view.setUint8(offset + i, str.charCodeAt(i));
            }
        };
        this.floatTo16BitPCM = (view, offset, input) => {
            for (let i = 0; i < input.length; i++, offset += 2) {
                const s = Math.max(-1, Math.min(1, input[i]));
                view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
            }
        };
        this.downSampleAudioFrame = (srcFrame, srcRate, dstRate) => {
            if (dstRate === srcRate || dstRate > srcRate) {
                return srcFrame;
            }
            const ratio = srcRate / dstRate;
            const dstLength = Math.round(srcFrame.length / ratio);
            const dstFrame = new Float32Array(dstLength);
            let srcOffset = 0;
            let dstOffset = 0;
            while (dstOffset < dstLength) {
                const nextSrcOffset = Math.round((dstOffset + 1) * ratio);
                let accum = 0;
                let count = 0;
                while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {
                    accum += srcFrame[srcOffset++];
                    count++;
                }
                dstFrame[dstOffset++] = accum / count;
            }
            return dstFrame;
        };
        this.privActualSampleRate = actualSampleRate;
        this.privDesiredSampleRate = desiredSampleRate;
    }
}

//# sourceMappingURL=RiffPcmEncoder.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js ***!
  \*************************************************************************************************/
/*! exports provided: Stream, StreamReader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Stream", function() { return Stream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StreamReader", function() { return StreamReader; });
/* harmony import */ var _Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
/* harmony import */ var _Guid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _Queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Queue */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



class Stream {
    constructor(streamId) {
        this.privReaderIdCounter = 1;
        this.privIsEnded = false;
        this.getReader = () => {
            const readerId = this.privReaderIdCounter;
            this.privReaderIdCounter++;
            const readerQueue = new _Queue__WEBPACK_IMPORTED_MODULE_2__["Queue"]();
            const currentLength = this.privStreambuffer.length;
            this.privReaderQueues[readerId] = readerQueue;
            for (let i = 0; i < currentLength; i++) {
                readerQueue.enqueue(this.privStreambuffer[i]);
            }
            return new StreamReader(this.privId, readerQueue, () => {
                delete this.privReaderQueues[readerId];
            });
        };
        this.throwIfClosed = () => {
            if (this.privIsEnded) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"]("Stream closed");
            }
        };
        this.privId = streamId ? streamId : Object(_Guid__WEBPACK_IMPORTED_MODULE_1__["createNoDashGuid"])();
        this.privStreambuffer = [];
        this.privReaderQueues = {};
    }
    get isClosed() {
        return this.privIsEnded;
    }
    get id() {
        return this.privId;
    }
    close() {
        if (!this.privIsEnded) {
            this.writeStreamChunk({
                buffer: null,
                isEnd: true,
                timeReceived: Date.now(),
            });
            this.privIsEnded = true;
        }
    }
    writeStreamChunk(streamChunk) {
        this.throwIfClosed();
        this.privStreambuffer.push(streamChunk);
        for (const readerId in this.privReaderQueues) {
            if (!this.privReaderQueues[readerId].isDisposed()) {
                try {
                    this.privReaderQueues[readerId].enqueue(streamChunk);
                }
                catch (e) {
                    // Do nothing
                }
            }
        }
    }
}
// tslint:disable-next-line:max-classes-per-file
class StreamReader {
    constructor(streamId, readerQueue, onClose) {
        this.privIsClosed = false;
        this.read = () => {
            if (this.isClosed) {
                throw new _Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"]("StreamReader closed");
            }
            return this.privReaderQueue
                .dequeue()
                .onSuccessContinueWith((streamChunk) => {
                if (streamChunk === undefined || streamChunk.isEnd) {
                    this.privReaderQueue.dispose("End of stream reached");
                }
                return streamChunk;
            });
        };
        this.close = () => {
            if (!this.privIsClosed) {
                this.privIsClosed = true;
                this.privReaderQueue.dispose("StreamReader closed");
                this.privOnClose();
            }
        };
        this.privReaderQueue = readerQueue;
        this.privOnClose = onClose;
        this.privStreamId = streamId;
    }
    get isClosed() {
        return this.privIsClosed;
    }
    get streamId() {
        return this.privStreamId;
    }
}

//# sourceMappingURL=Stream.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ActivityReceivedEventArgs.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ActivityReceivedEventArgs.js ***!
  \*****************************************************************************************************************/
/*! exports provided: ActivityReceivedEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivityReceivedEventArgs", function() { return ActivityReceivedEventArgs; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines contents of received message/events.
 * @class ActivityReceivedEventArgs
 */
class ActivityReceivedEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {any} activity - The activity..
     */
    constructor(activity, audioStream) {
        this.privActivity = activity;
        this.privAudioStream = audioStream;
    }
    /**
     * Gets the received activity
     * @member ActivityReceivedEventArgs.prototype.activity
     * @function
     * @public
     * @returns {any} the received activity.
     */
    get activity() {
        return this.privActivity;
    }
    get audioStream() {
        return this.privAudioStream;
    }
}

//# sourceMappingURL=ActivityReceivedEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js ***!
  \*********************************************************************************************************/
/*! exports provided: AudioConfig, AudioConfigImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioConfig", function() { return AudioConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioConfigImpl", function() { return AudioConfigImpl; });
/* harmony import */ var _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _AudioInputStream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AudioInputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioInputStream.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.




/**
 * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).
 * @class AudioConfig
 */
class AudioConfig {
    /**
     * Creates an AudioConfig object representing the default microphone on the system.
     * @member AudioConfig.fromDefaultMicrophoneInput
     * @function
     * @public
     * @returns {AudioConfig} The audio input configuration being created.
     */
    static fromDefaultMicrophoneInput() {
        const pcmRecorder = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["PcmRecorder"]();
        return new AudioConfigImpl(new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["MicAudioSource"](pcmRecorder, _AudioInputStream__WEBPACK_IMPORTED_MODULE_3__["bufferSize"]));
    }
    /**
     * Creates an AudioConfig object representing a microphone with the specified device ID.
     * @member AudioConfig.fromMicrophoneInput
     * @function
     * @public
     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.
     *        Default microphone is used the value is omitted.
     * @returns {AudioConfig} The audio input configuration being created.
     */
    static fromMicrophoneInput(deviceId) {
        const pcmRecorder = new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["PcmRecorder"]();
        return new AudioConfigImpl(new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["MicAudioSource"](pcmRecorder, _AudioInputStream__WEBPACK_IMPORTED_MODULE_3__["bufferSize"], deviceId));
    }
    /**
     * Creates an AudioConfig object representing the specified file.
     * @member AudioConfig.fromWavFileInput
     * @function
     * @public
     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM with 16-bit
     *        samples, 16 kHz sample rate, and a single channel (Mono) is supported.
     * @returns {AudioConfig} The audio input configuration being created.
     */
    static fromWavFileInput(file) {
        return new AudioConfigImpl(new _common_browser_Exports__WEBPACK_IMPORTED_MODULE_0__["FileAudioSource"](file));
    }
    /**
     * Creates an AudioConfig object representing the specified stream.
     * @member AudioConfig.fromStreamInput
     * @function
     * @public
     * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input
     *        stream. Currently, only WAV / PCM with 16-bit samples, 16 kHz sample rate, and a single channel
     *        (Mono) is supported.
     * @returns {AudioConfig} The audio input configuration being created.
     */
    static fromStreamInput(audioStream) {
        if (audioStream instanceof _Exports__WEBPACK_IMPORTED_MODULE_2__["PullAudioInputStreamCallback"]) {
            return new AudioConfigImpl(new _AudioInputStream__WEBPACK_IMPORTED_MODULE_3__["PullAudioInputStreamImpl"](audioStream));
        }
        if (audioStream instanceof _Exports__WEBPACK_IMPORTED_MODULE_2__["AudioInputStream"]) {
            return new AudioConfigImpl(audioStream);
        }
        throw new Error("Not Supported Type");
    }
}
/**
 * Represents audio input stream used for custom audio input configurations.
 * @private
 * @class AudioConfigImpl
 */
// tslint:disable-next-line:max-classes-per-file
class AudioConfigImpl extends AudioConfig {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {IAudioSource} source - An audio source.
     */
    constructor(source) {
        super();
        this.privSource = source;
    }
    /**
     * Format information for the audio
     */
    get format() {
        return this.privSource.format;
    }
    /**
     * @member AudioConfigImpl.prototype.close
     * @function
     * @public
     */
    close() {
        this.privSource.turnOff();
    }
    /**
     * @member AudioConfigImpl.prototype.id
     * @function
     * @public
     */
    id() {
        return this.privSource.id();
    }
    /**
     * @member AudioConfigImpl.prototype.turnOn
     * @function
     * @public
     * @returns {Promise<boolean>} A promise.
     */
    turnOn() {
        return this.privSource.turnOn();
    }
    /**
     * @member AudioConfigImpl.prototype.attach
     * @function
     * @public
     * @param {string} audioNodeId - The audio node id.
     * @returns {Promise<IAudioStreamNode>} A promise.
     */
    attach(audioNodeId) {
        return this.privSource.attach(audioNodeId);
    }
    /**
     * @member AudioConfigImpl.prototype.detach
     * @function
     * @public
     * @param {string} audioNodeId - The audio node id.
     */
    detach(audioNodeId) {
        return this.detach(audioNodeId);
    }
    /**
     * @member AudioConfigImpl.prototype.turnOff
     * @function
     * @public
     * @returns {Promise<boolean>} A promise.
     */
    turnOff() {
        return this.privSource.turnOff();
    }
    /**
     * @member AudioConfigImpl.prototype.events
     * @function
     * @public
     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.
     */
    get events() {
        return this.privSource.events;
    }
    setProperty(name, value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNull(value, "value");
        if (undefined !== this.privSource.setProperty) {
            this.privSource.setProperty(name, value);
        }
        else {
            throw new Error("This AudioConfig instance does not support setting properties.");
        }
    }
    getProperty(name, def) {
        if (undefined !== this.privSource.getProperty) {
            return this.privSource.getProperty(name, def);
        }
        else {
            throw new Error("This AudioConfig instance does not support getting properties.");
        }
        return def;
    }
    get deviceInfo() {
        return this.privSource.deviceInfo;
    }
}

//# sourceMappingURL=AudioConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioInputStream.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioInputStream.js ***!
  \**************************************************************************************************************/
/*! exports provided: bufferSize, AudioInputStream, PushAudioInputStream, PushAudioInputStreamImpl, PullAudioInputStream, PullAudioInputStreamImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bufferSize", function() { return bufferSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioInputStream", function() { return AudioInputStream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PushAudioInputStream", function() { return PushAudioInputStream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PushAudioInputStreamImpl", function() { return PushAudioInputStreamImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PullAudioInputStream", function() { return PullAudioInputStream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PullAudioInputStreamImpl", function() { return PullAudioInputStreamImpl; });
/* harmony import */ var _src_common_Guid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../src/common/Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.





const bufferSize = 4096;
/**
 * Represents audio input stream used for custom audio input configurations.
 * @class AudioInputStream
 */
class AudioInputStream {
    /**
     * Creates and initializes an instance.
     * @constructor
     */
    constructor() { }
    /**
     * Creates a memory backed PushAudioInputStream with the specified audio format.
     * @member AudioInputStream.createPushStream
     * @function
     * @public
     * @param {AudioStreamFormat} format - The audio data format in which audio will be
     *        written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).
     * @returns {PushAudioInputStream} The audio input stream being created.
     */
    static createPushStream(format) {
        return PushAudioInputStream.create(format);
    }
    /**
     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()
     * and close() methods.
     * @member AudioInputStream.createPullStream
     * @function
     * @public
     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from
     *        PullAudioInputStreamCallback
     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from
     *        the callback's read() method (currently only support 16 kHz 16bit mono PCM).
     * @returns {PullAudioInputStream} The audio input stream being created.
     */
    static createPullStream(callback, format) {
        return PullAudioInputStream.create(callback, format);
        // throw new Error("Oops");
    }
}
/**
 * Represents memory backed push audio input stream used for custom audio input configurations.
 * @class PushAudioInputStream
 */
// tslint:disable-next-line:max-classes-per-file
class PushAudioInputStream extends AudioInputStream {
    /**
     * Creates a memory backed PushAudioInputStream with the specified audio format.
     * @member PushAudioInputStream.create
     * @function
     * @public
     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the
     *        push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).
     * @returns {PushAudioInputStream} The push audio input stream being created.
     */
    static create(format) {
        return new PushAudioInputStreamImpl(bufferSize, format);
    }
}
/**
 * Represents memory backed push audio input stream used for custom audio input configurations.
 * @private
 * @class PushAudioInputStreamImpl
 */
// tslint:disable-next-line:max-classes-per-file
class PushAudioInputStreamImpl extends PushAudioInputStream {
    /**
     * Creates and initalizes an instance with the given values.
     * @constructor
     * @param {AudioStreamFormat} format - The audio stream format.
     */
    constructor(chunkSize, format) {
        super();
        this.onEvent = (event) => {
            this.privEvents.onEvent(event);
            _common_Exports__WEBPACK_IMPORTED_MODULE_2__["Events"].instance.onEvent(event);
        };
        if (format === undefined) {
            this.privFormat = _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_4__["AudioStreamFormatImpl"].getDefaultInputFormat();
        }
        else {
            this.privFormat = format;
        }
        this.privEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["EventSource"]();
        this.privId = Object(_src_common_Guid__WEBPACK_IMPORTED_MODULE_0__["createNoDashGuid"])();
        this.privStream = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["ChunkedArrayBufferStream"](chunkSize);
    }
    /**
     * Format information for the audio
     */
    get format() {
        return this.privFormat;
    }
    /**
     * Writes the audio data specified by making an internal copy of the data.
     * @member PushAudioInputStreamImpl.prototype.write
     * @function
     * @public
     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.
     */
    write(dataBuffer) {
        this.privStream.writeStreamChunk({
            buffer: dataBuffer,
            isEnd: false,
            timeReceived: Date.now()
        });
    }
    /**
     * Closes the stream.
     * @member PushAudioInputStreamImpl.prototype.close
     * @function
     * @public
     */
    close() {
        this.privStream.close();
    }
    id() {
        return this.privId;
    }
    turnOn() {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceInitializingEvent"](this.privId)); // no stream id
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceReadyEvent"](this.privId));
        return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(true);
    }
    attach(audioNodeId) {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeAttachingEvent"](this.privId, audioNodeId));
        return this.turnOn()
            .onSuccessContinueWith((_) => {
            // For now we support a single parallel reader of the pushed stream.
            // So we can simiply hand the stream to the recognizer and let it recognize.
            return this.privStream.getReader();
        })
            .onSuccessContinueWith((streamReader) => {
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeAttachedEvent"](this.privId, audioNodeId));
            return {
                detach: () => {
                    streamReader.close();
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeDetachedEvent"](this.privId, audioNodeId));
                    this.turnOff();
                },
                id: () => {
                    return audioNodeId;
                },
                read: () => {
                    return streamReader.read();
                },
            };
        });
    }
    detach(audioNodeId) {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeDetachedEvent"](this.privId, audioNodeId));
    }
    turnOff() {
        return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(false);
    }
    get events() {
        return this.privEvents;
    }
    get deviceInfo() {
        return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult({
            bitspersample: this.privFormat.bitsPerSample,
            channelcount: this.privFormat.channels,
            connectivity: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["connectivity"].Unknown,
            manufacturer: "Speech SDK",
            model: "PushStream",
            samplerate: this.privFormat.samplesPerSec,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["type"].Stream,
        });
    }
}
/*
 * Represents audio input stream used for custom audio input configurations.
 * @class PullAudioInputStream
 */
// tslint:disable-next-line:max-classes-per-file
class PullAudioInputStream extends AudioInputStream {
    /**
     * Creates and initializes and instance.
     * @constructor
     */
    constructor() { super(); }
    /**
     * Creates a PullAudioInputStream that delegates to the specified callback interface for
     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).
     * @member PullAudioInputStream.create
     * @function
     * @public
     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,
     *        derived from PullAudioInputStreamCustomCallback
     * @param {AudioStreamFormat} format - The audio data format in which audio will be
     *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).
     * @returns {PullAudioInputStream} The push audio input stream being created.
     */
    static create(callback, format) {
        return new PullAudioInputStreamImpl(callback, format);
    }
}
/**
 * Represents audio input stream used for custom audio input configurations.
 * @private
 * @class PullAudioInputStreamImpl
 */
// tslint:disable-next-line:max-classes-per-file
class PullAudioInputStreamImpl extends PullAudioInputStream {
    /**
     * Creates a PullAudioInputStream that delegates to the specified callback interface for
     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).
     * @constructor
     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,
     *        derived from PullAudioInputStreamCustomCallback
     * @param {AudioStreamFormat} format - The audio data format in which audio will be
     *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).
     */
    constructor(callback, format) {
        super();
        this.onEvent = (event) => {
            this.privEvents.onEvent(event);
            _common_Exports__WEBPACK_IMPORTED_MODULE_2__["Events"].instance.onEvent(event);
        };
        if (undefined === format) {
            this.privFormat = _Exports__WEBPACK_IMPORTED_MODULE_3__["AudioStreamFormat"].getDefaultInputFormat();
        }
        else {
            this.privFormat = format;
        }
        this.privEvents = new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["EventSource"]();
        this.privId = Object(_src_common_Guid__WEBPACK_IMPORTED_MODULE_0__["createNoDashGuid"])();
        this.privCallback = callback;
        this.privIsClosed = false;
    }
    /**
     * Format information for the audio
     */
    get format() {
        return this.privFormat;
    }
    /**
     * Closes the stream.
     * @member PullAudioInputStreamImpl.prototype.close
     * @function
     * @public
     */
    close() {
        this.privIsClosed = true;
        this.privCallback.close();
    }
    id() {
        return this.privId;
    }
    turnOn() {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceInitializingEvent"](this.privId)); // no stream id
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioSourceReadyEvent"](this.privId));
        return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(true);
    }
    attach(audioNodeId) {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeAttachingEvent"](this.privId, audioNodeId));
        return this.turnOn()
            .onSuccessContinueWith((result) => {
            this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeAttachedEvent"](this.privId, audioNodeId));
            return {
                detach: () => {
                    this.privCallback.close();
                    this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeDetachedEvent"](this.privId, audioNodeId));
                    this.turnOff();
                },
                id: () => {
                    return audioNodeId;
                },
                read: () => {
                    let totalBytes = 0;
                    let transmitBuff;
                    // Until we have the minimum number of bytes to send in a transmission, keep asking for more.
                    while (totalBytes < bufferSize) {
                        // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much
                        // data back.
                        const readBuff = new ArrayBuffer(bufferSize - totalBytes);
                        const pulledBytes = this.privCallback.read(readBuff);
                        // If there is no return buffer yet defined, set the return buffer to the that was just populated.
                        // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the
                        // preferred size allocated.
                        if (undefined === transmitBuff) {
                            transmitBuff = readBuff;
                        }
                        else {
                            // Not the first bite at the apple, so fill the return buffer with the data we got back.
                            const intView = new Int8Array(transmitBuff);
                            intView.set(new Int8Array(readBuff), totalBytes);
                        }
                        // If there are no bytes to read, just break out and be done.
                        if (0 === pulledBytes) {
                            break;
                        }
                        totalBytes += pulledBytes;
                    }
                    return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult({
                        buffer: transmitBuff.slice(0, totalBytes),
                        isEnd: this.privIsClosed || totalBytes === 0,
                        timeReceived: Date.now(),
                    });
                },
            };
        });
    }
    detach(audioNodeId) {
        this.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__["AudioStreamNodeDetachedEvent"](this.privId, audioNodeId));
    }
    turnOff() {
        return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult(false);
    }
    get events() {
        return this.privEvents;
    }
    get deviceInfo() {
        return _common_Exports__WEBPACK_IMPORTED_MODULE_2__["PromiseHelper"].fromResult({
            bitspersample: this.privFormat.bitsPerSample,
            channelcount: this.privFormat.channels,
            connectivity: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["connectivity"].Unknown,
            manufacturer: "Speech SDK",
            model: "PullStream",
            samplerate: this.privFormat.samplesPerSec,
            type: _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["type"].Stream,
        });
    }
}

//# sourceMappingURL=AudioInputStream.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js ***!
  \***************************************************************************************************************/
/*! exports provided: bufferSize, AudioOutputStream, PullAudioOutputStream, PullAudioOutputStreamImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bufferSize", function() { return bufferSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioOutputStream", function() { return AudioOutputStream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PullAudioOutputStream", function() { return PullAudioOutputStream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PullAudioOutputStreamImpl", function() { return PullAudioOutputStreamImpl; });
/* harmony import */ var _src_common_Guid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../src/common/Guid */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



const bufferSize = 4096;
/**
 * Represents audio input stream used for custom audio input configurations.
 * @class AudioInputStream
 */
class AudioOutputStream {
    /**
     * Creates and initializes an instance.
     * @constructor
     */
    constructor() { }
    /**
     * Creates a memory backed PullAudioOutputStream with the specified audio format.
     * @member AudioInputStream.createPullStream
     * @function
     * @public
     * @param {AudioStreamFormat} format - The audio data format in which audio will be
     *        written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).
     * @returns {PullAudioOutputStream} The audio input stream being created.
     */
    static createPullStream(format) {
        return PullAudioOutputStream.create(format);
    }
}
/**
 * Represents memory backed push audio input stream used for custom audio input configurations.
 * @class PullAudioOutputStream
 */
// tslint:disable-next-line:max-classes-per-file
class PullAudioOutputStream extends AudioOutputStream {
    /**
     * Creates a memory backed PullAudioOutputStream with the specified audio format.
     * @member PullAudioOutputStream.create
     * @function
     * @public
     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the
     *        push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).
     * @returns {PullAudioOutputStream} The push audio input stream being created.
     */
    static create(format) {
        return new PullAudioOutputStreamImpl(bufferSize, format);
    }
}
/**
 * Represents memory backed push audio input stream used for custom audio input configurations.
 * @private
 * @class PullAudioOutputStreamImpl
 */
// tslint:disable-next-line:max-classes-per-file
class PullAudioOutputStreamImpl extends PullAudioOutputStream {
    /**
     * Creates and initalizes an instance with the given values.
     * @constructor
     * @param {AudioStreamFormat} format - The audio stream format.
     */
    constructor(chunkSize, format) {
        super();
        if (format === undefined) {
            this.privFormat = _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_2__["AudioStreamFormatImpl"].getDefaultInputFormat();
        }
        else {
            this.privFormat = format;
        }
        this.privId = Object(_src_common_Guid__WEBPACK_IMPORTED_MODULE_0__["createNoDashGuid"])();
        this.privStream = new _common_Exports__WEBPACK_IMPORTED_MODULE_1__["ChunkedArrayBufferStream"](chunkSize);
        this.streamReader = this.privStream.getReader();
    }
    /**
     * Format information for the audio
     */
    get format() {
        return this.privFormat;
    }
    /**
     * Checks if the stream is closed
     * @member PullAudioOutputStreamImpl.prototype.isClosed
     * @property
     * @public
     */
    get isClosed() {
        return this.privStream.isClosed;
    }
    /**
     * Gets the id of the stream
     * @member PullAudioOutputStreamImpl.prototype.id
     * @property
     * @public
     */
    get id() {
        return this.privId;
    }
    /**
     * Reads data from the buffer
     * @member PullAudioOutputStreamImpl.prototype.read
     * @function
     * @public
     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.
     */
    read() {
        return this.streamReader.read()
            .onSuccessContinueWithPromise((chunk) => {
            return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(chunk.buffer);
        });
    }
    /**
     * Writes the audio data specified by making an internal copy of the data.
     * @member PullAudioOutputStreamImpl.prototype.write
     * @function
     * @public
     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.
     */
    write(dataBuffer) {
        this.privStream.writeStreamChunk({
            buffer: dataBuffer,
            isEnd: false,
            timeReceived: Date.now()
        });
    }
    /**
     * Closes the stream.
     * @member PullAudioOutputStreamImpl.prototype.close
     * @function
     * @public
     */
    close() {
        this.privStream.close();
    }
}

//# sourceMappingURL=AudioOutputStream.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js ***!
  \***************************************************************************************************************/
/*! exports provided: AudioStreamFormat, AudioStreamFormatImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioStreamFormat", function() { return AudioStreamFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioStreamFormatImpl", function() { return AudioStreamFormatImpl; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Represents audio stream format used for custom audio input configurations.
 * @class AudioStreamFormat
 */
class AudioStreamFormat {
    /**
     * Creates an audio stream format object representing the default audio stream
     * format (16KHz 16bit mono PCM).
     * @member AudioStreamFormat.getDefaultInputFormat
     * @function
     * @public
     * @returns {AudioStreamFormat} The audio stream format being created.
     */
    static getDefaultInputFormat() {
        return AudioStreamFormatImpl.getDefaultInputFormat();
    }
    /**
     * Creates an audio stream format object with the specified pcm waveformat characteristics.
     * @member AudioStreamFormat.getWaveFormatPCM
     * @function
     * @public
     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).
     * @param {number} bitsPerSample - Bits per sample, typically 16.
     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data
     *        uses one channel and stereo data uses two channels.
     * @returns {AudioStreamFormat} The audio stream format being created.
     */
    static getWaveFormatPCM(samplesPerSecond, bitsPerSample, channels) {
        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);
    }
}
/**
 * @private
 * @class AudioStreamFormatImpl
 */
// tslint:disable-next-line:max-classes-per-file
class AudioStreamFormatImpl extends AudioStreamFormat {
    /**
     * Creates an instance with the given values.
     * @constructor
     * @param {number} samplesPerSec - Samples per second.
     * @param {number} bitsPerSample - Bits per sample.
     * @param {number} channels - Number of channels.
     */
    constructor(samplesPerSec = 16000, bitsPerSample = 16, channels = 1) {
        super();
        this.formatTag = 1;
        this.bitsPerSample = bitsPerSample;
        this.samplesPerSec = samplesPerSec;
        this.channels = channels;
        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);
        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);
    }
    /**
     * Retrieves the default input format.
     * @member AudioStreamFormatImpl.getDefaultInputFormat
     * @function
     * @public
     * @returns {AudioStreamFormatImpl} The default input format.
     */
    static getDefaultInputFormat() {
        return new AudioStreamFormatImpl();
    }
    /**
     * Closes the configuration object.
     * @member AudioStreamFormatImpl.prototype.close
     * @function
     * @public
     */
    close() { return; }
}

//# sourceMappingURL=AudioStreamFormat.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/BaseAudioPlayer.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/BaseAudioPlayer.js ***!
  \*************************************************************************************************************/
/*! exports provided: BaseAudioPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseAudioPlayer", function() { return BaseAudioPlayer; });
/* harmony import */ var _common_Error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/Error */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Base audio player class
 * TODO: Plays only PCM for now.
 * @class
 */
class BaseAudioPlayer {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     */
    constructor(audioFormat) {
        this.audioContext = null;
        this.gainNode = null;
        this.autoUpdateBufferTimer = 0;
        this.init(audioFormat);
    }
    /**
     * play Audio sample
     * @param newAudioData audio data to be played.
     */
    playAudioSample(newAudioData) {
        this.ensureInitializedContext();
        const audioData = this.formatAudioData(newAudioData);
        const newSamplesData = new Float32Array(this.samples.length + audioData.length);
        newSamplesData.set(this.samples, 0);
        newSamplesData.set(audioData, this.samples.length);
        this.samples = newSamplesData;
    }
    /**
     * stops audio and clears the buffers
     */
    stopAudio() {
        if (this.audioContext !== null) {
            this.samples = new Float32Array();
            clearInterval(this.autoUpdateBufferTimer);
            this.audioContext.close();
            this.audioContext = null;
        }
    }
    init(audioFormat) {
        this.audioFormat = audioFormat;
        this.samples = new Float32Array();
    }
    ensureInitializedContext() {
        if (this.audioContext === null) {
            this.createAudioContext();
            const timerPeriod = 200;
            this.autoUpdateBufferTimer = setInterval(() => {
                this.updateAudioBuffer();
            }, timerPeriod);
        }
    }
    createAudioContext() {
        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();
        this.audioContext = new AudioContext();
        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan
        // to control the volume, not likely
        this.gainNode = this.audioContext.createGain();
        this.gainNode.gain.value = 1;
        this.gainNode.connect(this.audioContext.destination);
        this.startTime = this.audioContext.currentTime;
    }
    formatAudioData(audioData) {
        switch (this.audioFormat.bitsPerSample) {
            case 8:
                return this.formatArrayBuffer(new Int8Array(audioData), 128);
            case 16:
                return this.formatArrayBuffer(new Int16Array(audioData), 32768);
            case 32:
                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);
            default:
                throw new _common_Error__WEBPACK_IMPORTED_MODULE_0__["InvalidOperationError"]("Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time");
        }
    }
    formatArrayBuffer(audioData, maxValue) {
        const float32Data = new Float32Array(audioData.length);
        for (let i = 0; i < audioData.length; i++) {
            float32Data[i] = audioData[i] / maxValue;
        }
        return float32Data;
    }
    updateAudioBuffer() {
        if (this.samples.length === 0) {
            return;
        }
        const channelCount = this.audioFormat.channels;
        const bufferSource = this.audioContext.createBufferSource();
        const frameCount = this.samples.length / channelCount;
        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);
        // TODO: Should we do the conversion in the pushAudioSample instead?
        for (let channel = 0; channel < channelCount; channel++) {
            // Fill in individual channel data
            let channelOffset = channel;
            const audioData = audioBuffer.getChannelData(channel);
            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {
                audioData[i] = this.samples[channelOffset];
            }
        }
        if (this.startTime < this.audioContext.currentTime) {
            this.startTime = this.audioContext.currentTime;
        }
        bufferSource.buffer = audioBuffer;
        bufferSource.connect(this.gainNode);
        bufferSource.start(this.startTime);
        // Make sure we play the next sample after the current one.
        this.startTime += audioBuffer.duration;
        // Clear the samples for the next pushed data.
        this.samples = new Float32Array();
    }
}

//# sourceMappingURL=BaseAudioPlayer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PullAudioInputStreamCallback.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PullAudioInputStreamCallback.js ***!
  \**************************************************************************************************************************/
/*! exports provided: PullAudioInputStreamCallback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PullAudioInputStreamCallback", function() { return PullAudioInputStreamCallback; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * An abstract base class that defines callback methods (read() and close()) for
 * custom audio input streams).
 * @class PullAudioInputStreamCallback
 */
class PullAudioInputStreamCallback {
}

//# sourceMappingURL=PullAudioInputStreamCallback.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/BotFrameworkConfig.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/BotFrameworkConfig.js ***!
  \**********************************************************************************************************/
/*! exports provided: BotFrameworkConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BotFrameworkConfig", function() { return BotFrameworkConfig; });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DialogServiceConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



/**
 * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.
 * @class BotFrameworkConfig
 */
class BotFrameworkConfig extends _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_1__["DialogServiceConfigImpl"] {
    /**
     * Creates an instance of BotFrameworkConfig.
     */
    constructor() {
        super();
    }
    /**
     * Creates an instance of the bot framework config with the specified subscription and region.
     * @member BotFrameworkConfig.fromSubscription
     * @function
     * @public
     * @param subscription Subscription key associated with the bot
     * @param region The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {BotFrameworkConfig} A new bot framework config.
     */
    static fromSubscription(subscription, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(subscription, "subscription");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(region, "region");
        const botFrameworkConfig = new _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_1__["DialogServiceConfigImpl"]();
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].Conversation_DialogType, "bot_framework");
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Key, subscription);
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region, region);
        return botFrameworkConfig;
    }
    /**
     * Creates an instance of the bot framework config with the specified authorization token and region.
     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token
     * expires, the caller needs to refresh it by calling this setter with a new valid token.
     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.
     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer
     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
     * @member BotFrameworkConfig.fromAuthorizationToken
     * @function
     * @public
     * @param authorizationToken The authorization token associated with the bot
     * @param region The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {BotFrameworkConfig} A new bot framework config.
     */
    static fromAuthorizationToken(authorizationToken, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(authorizationToken, "authorizationToken");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(region, "region");
        const botFrameworkConfig = new _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_1__["DialogServiceConfigImpl"]();
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].Conversation_DialogType, "bot_framework");
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceAuthorization_Token, authorizationToken);
        botFrameworkConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region, region);
        return botFrameworkConfig;
    }
}

//# sourceMappingURL=BotFrameworkConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetails.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetails.js ***!
  \***********************************************************************************************************/
/*! exports provided: CancellationDetails */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancellationDetails", function() { return CancellationDetails; });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * Contains detailed information about why a result was canceled.
 * @class CancellationDetails
 */
class CancellationDetails {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {CancellationReason} reason - The cancellation reason.
     * @param {string} errorDetails - The error details, if provided.
     */
    constructor(reason, errorDetails, errorCode) {
        this.privReason = reason;
        this.privErrorDetails = errorDetails;
        this.privErrorCode = errorCode;
    }
    /**
     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.
     * @member CancellationDetails.fromResult
     * @function
     * @public
     * @param {RecognitionResult} result - The result that was canceled.
     * @returns {CancellationDetails} The cancellation details object being created.
     */
    static fromResult(result) {
        let reason = _Exports__WEBPACK_IMPORTED_MODULE_1__["CancellationReason"].Error;
        let errorCode = _Exports__WEBPACK_IMPORTED_MODULE_1__["CancellationErrorCode"].NoError;
        if (!!result.json) {
            const simpleSpeech = _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["SimpleSpeechPhrase"].fromJSON(result.json);
            reason = _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["EnumTranslation"].implTranslateCancelResult(simpleSpeech.RecognitionStatus);
        }
        if (!!result.properties) {
            errorCode = _Exports__WEBPACK_IMPORTED_MODULE_1__["CancellationErrorCode"][result.properties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["CancellationErrorCodePropertyName"], _Exports__WEBPACK_IMPORTED_MODULE_1__["CancellationErrorCode"][_Exports__WEBPACK_IMPORTED_MODULE_1__["CancellationErrorCode"].NoError])];
        }
        return new CancellationDetails(reason, result.errorDetails, errorCode);
    }
    /**
     * The reason the recognition was canceled.
     * @member CancellationDetails.prototype.reason
     * @function
     * @public
     * @returns {CancellationReason} Specifies the reason canceled.
     */
    get reason() {
        return this.privReason;
    }
    /**
     * In case of an unsuccessful recognition, provides details of the occurred error.
     * @member CancellationDetails.prototype.errorDetails
     * @function
     * @public
     * @returns {string} A String that represents the error details.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
    /**
     * The error code in case of an unsuccessful recognition.
     * Added in version 1.1.0.
     * @return An error code that represents the error reason.
     */
    get ErrorCode() {
        return this.privErrorCode;
    }
}

//# sourceMappingURL=CancellationDetails.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js ***!
  \**************************************************************************************************************/
/*! exports provided: CancellationErrorCode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancellationErrorCode", function() { return CancellationErrorCode; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 *  Defines error code in case that CancellationReason is Error.
 *  Added in version 1.1.0.
 */
var CancellationErrorCode;
(function (CancellationErrorCode) {
    /**
     * Indicates that no error occurred during speech recognition.
     */
    CancellationErrorCode[CancellationErrorCode["NoError"] = 0] = "NoError";
    /**
     * Indicates an authentication error.
     */
    CancellationErrorCode[CancellationErrorCode["AuthenticationFailure"] = 1] = "AuthenticationFailure";
    /**
     * Indicates that one or more recognition parameters are invalid.
     */
    CancellationErrorCode[CancellationErrorCode["BadRequestParameters"] = 2] = "BadRequestParameters";
    /**
     * Indicates that the number of parallel requests exceeded the number of allowed
     * concurrent transcriptions for the subscription.
     */
    CancellationErrorCode[CancellationErrorCode["TooManyRequests"] = 3] = "TooManyRequests";
    /**
     * Indicates a connection error.
     */
    CancellationErrorCode[CancellationErrorCode["ConnectionFailure"] = 4] = "ConnectionFailure";
    /**
     * Indicates a time-out error when waiting for response from service.
     */
    CancellationErrorCode[CancellationErrorCode["ServiceTimeout"] = 5] = "ServiceTimeout";
    /**
     * Indicates that an error is returned by the service.
     */
    CancellationErrorCode[CancellationErrorCode["ServiceError"] = 6] = "ServiceError";
    /**
     * Indicates an unexpected runtime error.
     */
    CancellationErrorCode[CancellationErrorCode["RuntimeError"] = 7] = "RuntimeError";
})(CancellationErrorCode || (CancellationErrorCode = {}));

//# sourceMappingURL=CancellationErrorCodes.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js ***!
  \**********************************************************************************************************/
/*! exports provided: CancellationReason */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancellationReason", function() { return CancellationReason; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines the possible reasons a recognition result might be canceled.
 * @class CancellationReason
 */
var CancellationReason;
(function (CancellationReason) {
    /**
     * Indicates that an error occurred during speech recognition.
     * @member CancellationReason.Error
     */
    CancellationReason[CancellationReason["Error"] = 0] = "Error";
    /**
     * Indicates that the end of the audio stream was reached.
     * @member CancellationReason.EndOfStream
     */
    CancellationReason[CancellationReason["EndOfStream"] = 1] = "EndOfStream";
})(CancellationReason || (CancellationReason = {}));

//# sourceMappingURL=CancellationReason.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Connection.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Connection.js ***!
  \**************************************************************************************************/
/*! exports provided: Connection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return Connection; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//

/**
 * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.
 * By default, a Recognizer autonomously manages connection to service when needed.
 * The Connection class provides additional methods for users to explicitly open or close a connection and
 * to subscribe to connection status changes.
 * The use of Connection is optional, and mainly for scenarios where fine tuning of application
 * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection
 * in advance before starting recognition on the Recognizer associated with this Connection.
 * If the Recognizer needs to connect or disconnect to service, it will
 * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection
 * status via Connected/Disconnected events.
 * Added in version 1.2.0.
 */
class Connection {
    /**
     * Gets the Connection instance from the specified recognizer.
     * @param recognizer The recognizer associated with the connection.
     * @return The Connection instance of the recognizer.
     */
    static fromRecognizer(recognizer) {
        const recoBase = recognizer.internalData;
        const ret = new Connection();
        ret.privServiceRecognizer = recoBase;
        ret.privEventListener = ret.privServiceRecognizer.connectionEvents.attach((connectionEvent) => {
            if (connectionEvent.name === "ConnectionEstablishedEvent") {
                if (!!ret.connected) {
                    ret.connected(new _Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionEventArgs"](connectionEvent.connectionId));
                }
            }
            else if (connectionEvent.name === "ConnectionClosedEvent") {
                if (!!ret.disconnected) {
                    ret.disconnected(new _Exports__WEBPACK_IMPORTED_MODULE_0__["ConnectionEventArgs"](connectionEvent.connectionId));
                }
            }
        });
        return ret;
    }
    /**
     * Starts to set up connection to the service.
     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the
     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect
     *
     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to
     * be notfied when the connection is established.
     */
    openConnection() {
        this.privServiceRecognizer.connect();
    }
    /**
     * Closes the connection the service.
     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.
     *
     * If closeConnection() is called during recognition, recognition will fail and cancel wtih an error.
     */
    closeConnection() {
        this.privServiceRecognizer.disconnect();
    }
    /**
     * Dispose of associated resources.
     */
    close() {
        /* tslint:disable:no-empty */
    }
}

//# sourceMappingURL=Connection.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionEventArgs.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionEventArgs.js ***!
  \***********************************************************************************************************/
/*! exports provided: ConnectionEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionEventArgs", function() { return ConnectionEventArgs; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//

/**
 * Defines payload for connection events like Connected/Disconnected.
 * Added in version 1.2.0
 */
class ConnectionEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__["SessionEventArgs"] {
}

//# sourceMappingURL=ConnectionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js ***!
  \*************************************************************************************************/
/*! exports provided: Contracts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Contracts", function() { return Contracts; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * @class Contracts
 * @private
 */
class Contracts {
    static throwIfNullOrUndefined(param, name) {
        if (param === undefined || param === null) {
            throw new Error("throwIfNullOrUndefined:" + name);
        }
    }
    static throwIfNull(param, name) {
        if (param === null) {
            throw new Error("throwIfNull:" + name);
        }
    }
    static throwIfNullOrWhitespace(param, name) {
        Contracts.throwIfNullOrUndefined(param, name);
        if (("" + param).trim().length < 1) {
            throw new Error("throwIfNullOrWhitespace:" + name);
        }
    }
    static throwIfDisposed(isDisposed) {
        if (isDisposed) {
            throw new Error("the object is already disposed");
        }
    }
    static throwIfArrayEmptyOrWhitespace(array, name) {
        Contracts.throwIfNullOrUndefined(array, name);
        if (array.length === 0) {
            throw new Error("throwIfArrayEmptyOrWhitespace:" + name);
        }
        for (const item of array) {
            Contracts.throwIfNullOrWhitespace(item, name);
        }
    }
    static throwIfFileDoesNotExist(param, name) {
        Contracts.throwIfNullOrWhitespace(param, name);
        // TODO check for file existence.
    }
}

//# sourceMappingURL=Contracts.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js ***!
  \***********************************************************************************************************/
/*! exports provided: DialogServiceConfig, DialogServiceConfigImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogServiceConfig", function() { return DialogServiceConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogServiceConfigImpl", function() { return DialogServiceConfigImpl; });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * Class that defines base configurations for dialog service connector
 * @class DialogServiceConfig
 */
class DialogServiceConfig {
    /**
     * Creates an instance of DialogService config.
     * @constructor
     */
    constructor() { }
}
/**
 * Dialog Service configuration.
 * @class DialogServiceConfigImpl
 */
// tslint:disable-next-line:max-classes-per-file
class DialogServiceConfigImpl extends DialogServiceConfig {
    /**
     * Creates an instance of dialogService config.
     */
    constructor() {
        super();
        this.privSpeechConfig = new _Exports__WEBPACK_IMPORTED_MODULE_1__["SpeechConfigImpl"]();
    }
    /**
     * Provides access to custom properties.
     * @member DialogServiceConfigImpl.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The properties.
     */
    get properties() {
        return this.privSpeechConfig.properties;
    }
    /**
     * Gets the speech recognition language.
     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage
     * @function
     * @public
     */
    get speechRecognitionLanguage() {
        return this.privSpeechConfig.speechRecognitionLanguage;
    }
    /**
     * Sets the speech recognition language.
     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @param {string} value - The language to set.
     */
    set speechRecognitionLanguage(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(value, "value");
        this.privSpeechConfig.speechRecognitionLanguage = value;
    }
    /**
     * Sets a named property as value
     * @member DialogServiceConfigImpl.prototype.setProperty
     * @function
     * @public
     * @param {PropertyId | string} name - The property to set.
     * @param {string} value - The value.
     */
    setProperty(name, value) {
        this.privSpeechConfig.setProperty(name, value);
    }
    /**
     * Sets a named property as value
     * @member DialogServiceConfigImpl.prototype.getProperty
     * @function
     * @public
     * @param {PropertyId | string} name - The property to get.
     * @param {string} def - The default value to return in case the property is not known.
     * @returns {string} The current value, or provided default, of the given property.
     */
    getProperty(name, def) {
        return this.privSpeechConfig.getProperty(name);
    }
    /**
     * Sets the proxy configuration.
     * Only relevant in Node.js environments.
     * Added in version 1.4.0.
     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)
     * @param proxyPort The port number of the proxy server.
     * @param proxyUserName The user name of the proxy server.
     * @param proxyPassword The password of the proxy server.
     */
    setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_ProxyHostName, proxyHostName);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_ProxyPort, `${proxyPort}`);
        if (proxyUserName) {
            this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_ProxyUserName, proxyUserName);
        }
        if (proxyPassword) {
            this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_1__["PropertyId"].SpeechServiceConnection_ProxyPassword, proxyPassword);
        }
    }
    setServiceProperty(name, value, channel) {
        this.privSpeechConfig.setServiceProperty(name, value, channel);
    }
    /**
     * Dispose of associated resources.
     * @member DialogServiceConfigImpl.prototype.close
     * @function
     * @public
     */
    close() {
        return;
    }
}

//# sourceMappingURL=DialogServiceConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConnector.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConnector.js ***!
  \**************************************************************************************************************/
/*! exports provided: DialogServiceConnector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogServiceConnector", function() { return DialogServiceConnector; });
/* harmony import */ var _common_speech_DialogConnectorFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.speech/DialogConnectorFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/DialogConnectorFactory.js");
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
/* harmony import */ var _PropertyId__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PropertyId */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.





/**
 * Dialog Service Connector
 * @class DialogServiceConnector
 */
class DialogServiceConnector extends _Exports__WEBPACK_IMPORTED_MODULE_3__["Recognizer"] {
    /**
     * Initializes an instance of the DialogServiceConnector.
     * @constructor
     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.
     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer
     */
    constructor(dialogConfig, audioConfig) {
        const dialogServiceConfigImpl = dialogConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfNull(dialogConfig, "dialogConfig");
        super(audioConfig, dialogServiceConfigImpl.properties, new _common_speech_DialogConnectorFactory__WEBPACK_IMPORTED_MODULE_0__["DialogConnectionFactory"]());
        this.privIsDisposed = false;
        this.privProperties = dialogServiceConfigImpl.properties.clone();
        const agentConfig = this.buildAgentConfig();
        this.privReco.agentConfig.set(agentConfig);
    }
    /**
     * Starts a connection to the service.
     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.
     *
     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to
     * be notified when the connection is established.
     * @member DialogServiceConnector.prototype.connect
     * @function
     * @public
     */
    connect() {
        this.privReco.connect();
    }
    /**
     * Closes the connection the service.
     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.
     *
     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.
     */
    disconnect() {
        this.privReco.disconnect();
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member DialogServiceConnector.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__["PropertyId"].SpeechServiceAuthorization_Token);
    }
    /**
     * Sets the authorization token used to communicate with the service.
     * @member DialogServiceConnector.prototype.authorizationToken
     * @function
     * @public
     * @param {string} token - Authorization token.
     */
    set authorizationToken(token) {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfNullOrWhitespace(token, "token");
        this.properties.setProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__["PropertyId"].SpeechServiceAuthorization_Token, token);
    }
    /**
     * The collection of properties and their values defined for this DialogServiceConnector.
     * @member DialogServiceConnector.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Starts recognition and stops after the first utterance is recognized.
     * @member DialogServiceConnector.prototype.listenOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the result when the reco has completed.
     * @param err - Callback invoked in case of an error.
     */
    listenOnceAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfDisposed(this.privIsDisposed);
            this.connect();
            this.implRecognizerStop();
            this.implRecognizerStart(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["RecognitionMode"].Conversation, (e) => {
                this.implRecognizerStop();
                if (!!cb) {
                    cb(e);
                }
            }, (e) => {
                this.implRecognizerStop();
                if (!!err) {
                    err(e);
                }
            });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    }
    sendActivityAsync(activity) {
        this.privReco.sendMessage(activity);
    }
    /**
     * closes all external resources held by an instance of this class.
     * @member DialogServiceConnector.prototype.close
     * @function
     * @public
     */
    close() {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfDisposed(this.privIsDisposed);
        this.dispose(true);
    }
    dispose(disposing) {
        if (this.privIsDisposed) {
            return;
        }
        if (disposing) {
            this.implRecognizerStop();
            this.privIsDisposed = true;
            super.dispose(disposing);
        }
    }
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["RecognizerConfig"](speechConfig, this.privProperties);
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const audioSource = audioConfig;
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_1__["DialogServiceAdapter"](authentication, connectionFactory, audioSource, recognizerConfig, this);
    }
    buildAgentConfig() {
        const communicationType = this.properties.getProperty("Conversation_Communication_Type", "Default");
        return {
            botInfo: {
                commType: communicationType,
                connectionId: this.properties.getProperty(_PropertyId__WEBPACK_IMPORTED_MODULE_4__["PropertyId"].Conversation_ApplicationId),
                conversationId: undefined
            },
            version: 0.2
        };
    }
}

//# sourceMappingURL=DialogServiceConnector.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js ***!
  \***********************************************************************************************/
/*! exports provided: AudioConfig, AudioStreamFormat, AudioInputStream, PullAudioInputStream, PushAudioInputStream, AudioOutputStream, PullAudioOutputStream, CancellationReason, PullAudioInputStreamCallback, KeywordRecognitionModel, SessionEventArgs, RecognitionEventArgs, OutputFormat, IntentRecognitionEventArgs, RecognitionResult, SpeechRecognitionResult, IntentRecognitionResult, LanguageUnderstandingModel, SpeechRecognitionEventArgs, SpeechRecognitionCanceledEventArgs, TranslationRecognitionEventArgs, TranslationSynthesisEventArgs, TranslationRecognitionResult, TranslationSynthesisResult, ResultReason, SpeechConfig, SpeechConfigImpl, SpeechTranslationConfig, PropertyCollection, PropertyId, Recognizer, SpeechRecognizer, IntentRecognizer, TranslationRecognizer, Translations, NoMatchReason, NoMatchDetails, TranslationRecognitionCanceledEventArgs, IntentRecognitionCanceledEventArgs, CancellationDetails, CancellationErrorCode, ConnectionEventArgs, Connection, PhraseListGrammar, DialogServiceConfig, BotFrameworkConfig, SpeechCommandsConfig, DialogServiceConnector, ActivityReceivedEventArgs, ServicePropertyChannel, ProfanityOption, BaseAudioPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Audio_AudioConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Audio/AudioConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioConfig", function() { return _Audio_AudioConfig__WEBPACK_IMPORTED_MODULE_0__["AudioConfig"]; });

/* harmony import */ var _Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Audio/AudioStreamFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioStreamFormat", function() { return _Audio_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_1__["AudioStreamFormat"]; });

/* harmony import */ var _Audio_AudioInputStream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Audio/AudioInputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioInputStream.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioInputStream", function() { return _Audio_AudioInputStream__WEBPACK_IMPORTED_MODULE_2__["AudioInputStream"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PullAudioInputStream", function() { return _Audio_AudioInputStream__WEBPACK_IMPORTED_MODULE_2__["PullAudioInputStream"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PushAudioInputStream", function() { return _Audio_AudioInputStream__WEBPACK_IMPORTED_MODULE_2__["PushAudioInputStream"]; });

/* harmony import */ var _Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Audio/AudioOutputStream */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioOutputStream", function() { return _Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_3__["AudioOutputStream"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PullAudioOutputStream", function() { return _Audio_AudioOutputStream__WEBPACK_IMPORTED_MODULE_3__["PullAudioOutputStream"]; });

/* harmony import */ var _CancellationReason__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CancellationReason */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CancellationReason", function() { return _CancellationReason__WEBPACK_IMPORTED_MODULE_4__["CancellationReason"]; });

/* harmony import */ var _Audio_PullAudioInputStreamCallback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Audio/PullAudioInputStreamCallback */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PullAudioInputStreamCallback.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PullAudioInputStreamCallback", function() { return _Audio_PullAudioInputStreamCallback__WEBPACK_IMPORTED_MODULE_5__["PullAudioInputStreamCallback"]; });

/* harmony import */ var _KeywordRecognitionModel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./KeywordRecognitionModel */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/KeywordRecognitionModel.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KeywordRecognitionModel", function() { return _KeywordRecognitionModel__WEBPACK_IMPORTED_MODULE_6__["KeywordRecognitionModel"]; });

/* harmony import */ var _SessionEventArgs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SessionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SessionEventArgs", function() { return _SessionEventArgs__WEBPACK_IMPORTED_MODULE_7__["SessionEventArgs"]; });

/* harmony import */ var _RecognitionEventArgs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./RecognitionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognitionEventArgs", function() { return _RecognitionEventArgs__WEBPACK_IMPORTED_MODULE_8__["RecognitionEventArgs"]; });

/* harmony import */ var _OutputFormat__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./OutputFormat */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OutputFormat", function() { return _OutputFormat__WEBPACK_IMPORTED_MODULE_9__["OutputFormat"]; });

/* harmony import */ var _IntentRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./IntentRecognitionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentRecognitionEventArgs", function() { return _IntentRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_10__["IntentRecognitionEventArgs"]; });

/* harmony import */ var _RecognitionResult__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./RecognitionResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionResult.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RecognitionResult", function() { return _RecognitionResult__WEBPACK_IMPORTED_MODULE_11__["RecognitionResult"]; });

/* harmony import */ var _SpeechRecognitionResult__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./SpeechRecognitionResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionResult", function() { return _SpeechRecognitionResult__WEBPACK_IMPORTED_MODULE_12__["SpeechRecognitionResult"]; });

/* harmony import */ var _IntentRecognitionResult__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./IntentRecognitionResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionResult.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentRecognitionResult", function() { return _IntentRecognitionResult__WEBPACK_IMPORTED_MODULE_13__["IntentRecognitionResult"]; });

/* harmony import */ var _LanguageUnderstandingModel__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./LanguageUnderstandingModel */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/LanguageUnderstandingModel.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LanguageUnderstandingModel", function() { return _LanguageUnderstandingModel__WEBPACK_IMPORTED_MODULE_14__["LanguageUnderstandingModel"]; });

/* harmony import */ var _SpeechRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./SpeechRecognitionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionEventArgs", function() { return _SpeechRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_15__["SpeechRecognitionEventArgs"]; });

/* harmony import */ var _SpeechRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./SpeechRecognitionCanceledEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionCanceledEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionCanceledEventArgs", function() { return _SpeechRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_16__["SpeechRecognitionCanceledEventArgs"]; });

/* harmony import */ var _TranslationRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./TranslationRecognitionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognitionEventArgs", function() { return _TranslationRecognitionEventArgs__WEBPACK_IMPORTED_MODULE_17__["TranslationRecognitionEventArgs"]; });

/* harmony import */ var _TranslationSynthesisEventArgs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./TranslationSynthesisEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationSynthesisEventArgs", function() { return _TranslationSynthesisEventArgs__WEBPACK_IMPORTED_MODULE_18__["TranslationSynthesisEventArgs"]; });

/* harmony import */ var _TranslationRecognitionResult__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./TranslationRecognitionResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionResult.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognitionResult", function() { return _TranslationRecognitionResult__WEBPACK_IMPORTED_MODULE_19__["TranslationRecognitionResult"]; });

/* harmony import */ var _TranslationSynthesisResult__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./TranslationSynthesisResult */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisResult.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationSynthesisResult", function() { return _TranslationSynthesisResult__WEBPACK_IMPORTED_MODULE_20__["TranslationSynthesisResult"]; });

/* harmony import */ var _ResultReason__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ResultReason */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResultReason", function() { return _ResultReason__WEBPACK_IMPORTED_MODULE_21__["ResultReason"]; });

/* harmony import */ var _SpeechConfig__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./SpeechConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechConfig", function() { return _SpeechConfig__WEBPACK_IMPORTED_MODULE_22__["SpeechConfig"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechConfigImpl", function() { return _SpeechConfig__WEBPACK_IMPORTED_MODULE_22__["SpeechConfigImpl"]; });

/* harmony import */ var _SpeechTranslationConfig__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./SpeechTranslationConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechTranslationConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechTranslationConfig", function() { return _SpeechTranslationConfig__WEBPACK_IMPORTED_MODULE_23__["SpeechTranslationConfig"]; });

/* harmony import */ var _PropertyCollection__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./PropertyCollection */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyCollection", function() { return _PropertyCollection__WEBPACK_IMPORTED_MODULE_24__["PropertyCollection"]; });

/* harmony import */ var _PropertyId__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./PropertyId */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyId", function() { return _PropertyId__WEBPACK_IMPORTED_MODULE_25__["PropertyId"]; });

/* harmony import */ var _Recognizer__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./Recognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Recognizer", function() { return _Recognizer__WEBPACK_IMPORTED_MODULE_26__["Recognizer"]; });

/* harmony import */ var _SpeechRecognizer__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./SpeechRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognizer", function() { return _SpeechRecognizer__WEBPACK_IMPORTED_MODULE_27__["SpeechRecognizer"]; });

/* harmony import */ var _IntentRecognizer__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./IntentRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentRecognizer", function() { return _IntentRecognizer__WEBPACK_IMPORTED_MODULE_28__["IntentRecognizer"]; });

/* harmony import */ var _TranslationRecognizer__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./TranslationRecognizer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognizer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognizer", function() { return _TranslationRecognizer__WEBPACK_IMPORTED_MODULE_29__["TranslationRecognizer"]; });

/* harmony import */ var _Translations__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./Translations */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Translations.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Translations", function() { return _Translations__WEBPACK_IMPORTED_MODULE_30__["Translations"]; });

/* harmony import */ var _NoMatchReason__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./NoMatchReason */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchReason.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NoMatchReason", function() { return _NoMatchReason__WEBPACK_IMPORTED_MODULE_31__["NoMatchReason"]; });

/* harmony import */ var _NoMatchDetails__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./NoMatchDetails */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchDetails.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NoMatchDetails", function() { return _NoMatchDetails__WEBPACK_IMPORTED_MODULE_32__["NoMatchDetails"]; });

/* harmony import */ var _TranslationRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./TranslationRecognitionCanceledEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionCanceledEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognitionCanceledEventArgs", function() { return _TranslationRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_33__["TranslationRecognitionCanceledEventArgs"]; });

/* harmony import */ var _IntentRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./IntentRecognitionCanceledEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionCanceledEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntentRecognitionCanceledEventArgs", function() { return _IntentRecognitionCanceledEventArgs__WEBPACK_IMPORTED_MODULE_34__["IntentRecognitionCanceledEventArgs"]; });

/* harmony import */ var _CancellationDetails__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./CancellationDetails */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationDetails.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CancellationDetails", function() { return _CancellationDetails__WEBPACK_IMPORTED_MODULE_35__["CancellationDetails"]; });

/* harmony import */ var _CancellationErrorCodes__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./CancellationErrorCodes */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CancellationErrorCode", function() { return _CancellationErrorCodes__WEBPACK_IMPORTED_MODULE_36__["CancellationErrorCode"]; });

/* harmony import */ var _ConnectionEventArgs__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./ConnectionEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ConnectionEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectionEventArgs", function() { return _ConnectionEventArgs__WEBPACK_IMPORTED_MODULE_37__["ConnectionEventArgs"]; });

/* harmony import */ var _Connection__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./Connection */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Connection.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return _Connection__WEBPACK_IMPORTED_MODULE_38__["Connection"]; });

/* harmony import */ var _PhraseListGrammar__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./PhraseListGrammar */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PhraseListGrammar.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PhraseListGrammar", function() { return _PhraseListGrammar__WEBPACK_IMPORTED_MODULE_39__["PhraseListGrammar"]; });

/* harmony import */ var _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./DialogServiceConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogServiceConfig", function() { return _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_40__["DialogServiceConfig"]; });

/* harmony import */ var _BotFrameworkConfig__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./BotFrameworkConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/BotFrameworkConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BotFrameworkConfig", function() { return _BotFrameworkConfig__WEBPACK_IMPORTED_MODULE_41__["BotFrameworkConfig"]; });

/* harmony import */ var _SpeechCommandsConfig__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./SpeechCommandsConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechCommandsConfig.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpeechCommandsConfig", function() { return _SpeechCommandsConfig__WEBPACK_IMPORTED_MODULE_42__["SpeechCommandsConfig"]; });

/* harmony import */ var _DialogServiceConnector__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./DialogServiceConnector */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConnector.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogServiceConnector", function() { return _DialogServiceConnector__WEBPACK_IMPORTED_MODULE_43__["DialogServiceConnector"]; });

/* harmony import */ var _ActivityReceivedEventArgs__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./ActivityReceivedEventArgs */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ActivityReceivedEventArgs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActivityReceivedEventArgs", function() { return _ActivityReceivedEventArgs__WEBPACK_IMPORTED_MODULE_44__["ActivityReceivedEventArgs"]; });

/* harmony import */ var _ServicePropertyChannel__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./ServicePropertyChannel */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServicePropertyChannel.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServicePropertyChannel", function() { return _ServicePropertyChannel__WEBPACK_IMPORTED_MODULE_45__["ServicePropertyChannel"]; });

/* harmony import */ var _ProfanityOption__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./ProfanityOption */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProfanityOption", function() { return _ProfanityOption__WEBPACK_IMPORTED_MODULE_46__["ProfanityOption"]; });

/* harmony import */ var _Audio_BaseAudioPlayer__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./Audio/BaseAudioPlayer */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/BaseAudioPlayer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseAudioPlayer", function() { return _Audio_BaseAudioPlayer__WEBPACK_IMPORTED_MODULE_47__["BaseAudioPlayer"]; });

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

















































//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionCanceledEventArgs.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionCanceledEventArgs.js ***!
  \**************************************************************************************************************************/
/*! exports provided: IntentRecognitionCanceledEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntentRecognitionCanceledEventArgs", function() { return IntentRecognitionCanceledEventArgs; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Define payload of intent recognition canceled result events.
 * @class IntentRecognitionCanceledEventArgs
 */
class IntentRecognitionCanceledEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__["IntentRecognitionEventArgs"] {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {CancellationReason} result - The result of the intent recognition.
     * @param {string} offset - The offset.
     * @param {IntentRecognitionResult} sessionId - The session id.
     */
    constructor(reason, errorDetails, errorCode, result, offset, sessionId) {
        super(result, offset, sessionId);
        this.privReason = reason;
        this.privErrorDetails = errorDetails;
        this.privErrorCode = errorCode;
    }
    /**
     * The reason the recognition was canceled.
     * @member IntentRecognitionCanceledEventArgs.prototype.reason
     * @function
     * @public
     * @returns {CancellationReason} Specifies the reason canceled.
     */
    get reason() {
        return this.privReason;
    }
    /**
     * The error code in case of an unsuccessful recognition.
     * Added in version 1.1.0.
     * @return An error code that represents the error reason.
     */
    get errorCode() {
        return this.privErrorCode;
    }
    /**
     * In case of an unsuccessful recognition, provides details of the occurred error.
     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails
     * @function
     * @public
     * @returns {string} A String that represents the error details.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
}

//# sourceMappingURL=IntentRecognitionCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionEventArgs.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionEventArgs.js ***!
  \******************************************************************************************************************/
/*! exports provided: IntentRecognitionEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntentRecognitionEventArgs", function() { return IntentRecognitionEventArgs; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Intent recognition result event arguments.
 * @class
 */
class IntentRecognitionEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionEventArgs"] {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param result - The result of the intent recognition.
     * @param offset - The offset.
     * @param sessionId - The session id.
     */
    constructor(result, offset, sessionId) {
        super(offset, sessionId);
        this.privResult = result;
    }
    /**
     * Represents the intent recognition result.
     * @member IntentRecognitionEventArgs.prototype.result
     * @function
     * @public
     * @returns {IntentRecognitionResult} Represents the intent recognition result.
     */
    get result() {
        return this.privResult;
    }
}

//# sourceMappingURL=IntentRecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionResult.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognitionResult.js ***!
  \***************************************************************************************************************/
/*! exports provided: IntentRecognitionResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntentRecognitionResult", function() { return IntentRecognitionResult; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Intent recognition result.
 * @class
 */
class IntentRecognitionResult extends _Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechRecognitionResult"] {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param intentId - The intent id.
     * @param resultId - The result id.
     * @param reason - The reason.
     * @param text - The recognized text.
     * @param duration - The duration.
     * @param offset - The offset into the stream.
     * @param errorDetails - Error details, if provided.
     * @param json - Additional Json, if provided.
     * @param properties - Additional properties, if provided.
     */
    constructor(intentId, resultId, reason, text, duration, offset, errorDetails, json, properties) {
        super(resultId, reason, text, duration, offset, errorDetails, json, properties);
        this.privIntentId = intentId;
    }
    /**
     * A String that represents the intent identifier being recognized.
     * @member IntentRecognitionResult.prototype.intentId
     * @function
     * @public
     * @returns {string} A String that represents the intent identifier being recognized.
     */
    get intentId() {
        return this.privIntentId;
    }
}

//# sourceMappingURL=IntentRecognitionResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognizer.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/IntentRecognizer.js ***!
  \********************************************************************************************************/
/*! exports provided: IntentRecognizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntentRecognizer", function() { return IntentRecognizer; });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



/**
 * Intent recognizer.
 * @class
 */
class IntentRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_2__["Recognizer"] {
    /**
     * Initializes an instance of the IntentRecognizer.
     * @constructor
     * @param {SpeechConfig} speechConfig - The set of configuration properties.
     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer
     */
    constructor(speechConfig, audioConfig) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrUndefined(speechConfig, "speechConfig");
        const configImpl = speechConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrUndefined(configImpl, "speechConfig");
        super(audioConfig, configImpl.properties, new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["IntentConnectionFactory"]());
        this.privAddedIntents = [];
        this.privAddedLmIntents = {};
        this.privDisposedIntentRecognizer = false;
        this.privProperties = configImpl.properties;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_RecoLanguage), _Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_RecoLanguage]);
    }
    /**
     * Gets the spoken language of recognition.
     * @member IntentRecognizer.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @returns {string} the spoken language of recognition.
     */
    get speechRecognitionLanguage() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedIntentRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_RecoLanguage);
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member IntentRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceAuthorization_Token);
    }
    /**
     * Gets/Sets the authorization token used to communicate with the service.
     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.
     * @member IntentRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @param {string} value - Authorization token.
     */
    set authorizationToken(value) {
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceAuthorization_Token, value);
    }
    /**
     * The collection of properties and their values defined for this IntentRecognizer.
     * @member IntentRecognizer.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their
     *          values defined for this IntentRecognizer.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Starts intent recognition, and stops after the first utterance is recognized.
     * The task returns the recognition text and intent as result.
     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,
     *       so it is suitable only for single shot recognition like command or query.
     *       For long-running recognition, use StartContinuousRecognitionAsync() instead.
     * @member IntentRecognizer.prototype.recognizeOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.
     * @param err - Callback invoked in case of an error.
     */
    recognizeOnceAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedIntentRecognizer);
            this.implRecognizerStop();
            if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {
                const context = this.buildSpeechContext();
                this.privReco.speechContext.setSection("intent", context.Intent);
                this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);
                const intentReco = this.privReco;
                intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);
            }
            this.implRecognizerStart(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionMode"].Interactive, (e) => {
                this.implRecognizerStop();
                if (!!cb) {
                    cb(e);
                }
            }, (e) => {
                this.implRecognizerStop();
                if (!!err) {
                    err(e);
                }
            });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    }
    /**
     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    startContinuousRecognitionAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedIntentRecognizer);
            this.implRecognizerStop();
            if (Object.keys(this.privAddedLmIntents).length !== 0) {
                const context = this.buildSpeechContext();
                this.privReco.speechContext.setSection("intent", context.Intent);
                this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);
                const intentReco = this.privReco;
                intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);
            }
            this.implRecognizerStart(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionMode"].Conversation, undefined, undefined);
            // report result to promise.
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
                cb = undefined;
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    }
    /**
     * Stops continuous intent recognition.
     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    stopContinuousRecognitionAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedIntentRecognizer);
            this.implRecognizerStop();
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    }
    /**
     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * Note: Key word spotting functionality is only available on the Speech Devices SDK.
     *       This functionality is currently not included in the SDK itself.
     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync
     * @function
     * @public
     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    startKeywordRecognitionAsync(model, cb, err) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNull(model, "model");
        if (!!err) {
            err("Not yet implemented.");
        }
    }
    /**
     * Stops continuous speech recognition.
     * Note: Key word spotting functionality is only available on the Speech Devices SDK.
     *       This functionality is currently not included in the SDK itself.
     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    stopKeywordRecognitionAsync(cb, err) {
        if (!!cb) {
            cb();
        }
    }
    /**
     * Adds a phrase that should be recognized as intent.
     * @member IntentRecognizer.prototype.addIntent
     * @function
     * @public
     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.
     * @param {string} phrase - A String that specifies the phrase representing the intent.
     */
    addIntent(simplePhrase, intentId) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedIntentRecognizer);
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(intentId, "intentId");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(simplePhrase, "simplePhrase");
        this.privAddedIntents.push([intentId, simplePhrase]);
    }
    /**
     * Adds an intent from Language Understanding service for recognition.
     * @member IntentRecognizer.prototype.addIntentWithLanguageModel
     * @function
     * @public
     * @param {string} intentId - A String that represents the identifier of the intent
     *        to be recognized. Ignored if intentName is empty.
     * @param {string} model - The intent model from Language Understanding service.
     * @param {string} intentName - The intent name defined in the intent model. If it
     *        is empty, all intent names defined in the model will be added.
     */
    addIntentWithLanguageModel(intentId, model, intentName) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedIntentRecognizer);
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(intentId, "intentId");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNull(model, "model");
        const modelImpl = model;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(modelImpl.appId, "model.appId");
        this.privAddedLmIntents[intentId] = new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["AddedLmIntent"](modelImpl, intentName);
    }
    /**
     * @summary Adds all intents from the specified Language Understanding Model.
     * @member IntentRecognizer.prototype.addAllIntents
     * @function
     * @public
     * @function
     * @public
     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.
     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.
     */
    addAllIntents(model, intentId) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNull(model, "model");
        const modelImpl = model;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(modelImpl.appId, "model.appId");
        this.privUmbrellaIntent = new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["AddedLmIntent"](modelImpl, intentId);
    }
    /**
     * closes all external resources held by an instance of this class.
     * @member IntentRecognizer.prototype.close
     * @function
     * @public
     */
    close() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedIntentRecognizer);
        this.dispose(true);
    }
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognizerConfig"](speechConfig, this.properties);
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const audioImpl = audioConfig;
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["IntentServiceRecognizer"](authentication, connectionFactory, audioImpl, recognizerConfig, this);
    }
    dispose(disposing) {
        if (this.privDisposedIntentRecognizer) {
            return;
        }
        if (disposing) {
            this.privDisposedIntentRecognizer = true;
            super.dispose(disposing);
        }
    }
    buildSpeechContext() {
        let appId;
        let region;
        let subscriptionKey;
        const refGrammers = [];
        if (undefined !== this.privUmbrellaIntent) {
            appId = this.privUmbrellaIntent.modelImpl.appId;
            region = this.privUmbrellaIntent.modelImpl.region;
            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;
        }
        // Build the reference grammer array.
        for (const intentId of Object.keys(this.privAddedLmIntents)) {
            const addedLmIntent = this.privAddedLmIntents[intentId];
            // validate all the same model, region, and key...
            if (appId === undefined) {
                appId = addedLmIntent.modelImpl.appId;
            }
            else {
                if (appId !== addedLmIntent.modelImpl.appId) {
                    throw new Error("Intents must all be from the same LUIS model");
                }
            }
            if (region === undefined) {
                region = addedLmIntent.modelImpl.region;
            }
            else {
                if (region !== addedLmIntent.modelImpl.region) {
                    throw new Error("Intents must all be from the same LUIS model in a single region");
                }
            }
            if (subscriptionKey === undefined) {
                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;
            }
            else {
                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {
                    throw new Error("Intents must all use the same subscription key");
                }
            }
            const grammer = "luis/" + appId + "-PRODUCTION#" + intentId;
            refGrammers.push(grammer);
        }
        return {
            Intent: {
                id: appId,
                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Key]) : subscriptionKey,
                provider: "LUIS",
            },
            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : ["luis/" + appId + "-PRODUCTION"],
        };
    }
}

//# sourceMappingURL=IntentRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/KeywordRecognitionModel.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/KeywordRecognitionModel.js ***!
  \***************************************************************************************************************/
/*! exports provided: KeywordRecognitionModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeywordRecognitionModel", function() { return KeywordRecognitionModel; });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Represents a keyword recognition model for recognizing when
 * the user says a keyword to initiate further speech recognition.
 * @class KeywordRecognitionModel
 */
class KeywordRecognitionModel {
    /**
     * Create and initializes a new instance.
     * @constructor
     */
    constructor() {
        this.privDisposed = false;
    }
    /**
     * Creates a keyword recognition model using the specified filename.
     * @member KeywordRecognitionModel.fromFile
     * @function
     * @public
     * @param {string} fileName - A string that represents file name for the keyword recognition model.
     *        Note, the file can point to a zip file in which case the model
     *        will be extracted from the zip.
     * @returns {KeywordRecognitionModel} The keyword recognition model being created.
     */
    static fromFile(fileName) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfFileDoesNotExist(fileName, "fileName");
        throw new Error("Not yet implemented.");
    }
    /**
     * Creates a keyword recognition model using the specified filename.
     * @member KeywordRecognitionModel.fromStream
     * @function
     * @public
     * @param {string} file - A File that represents file for the keyword recognition model.
     *        Note, the file can point to a zip file in which case the model will be extracted from the zip.
     * @returns {KeywordRecognitionModel} The keyword recognition model being created.
     */
    static fromStream(file) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNull(file, "file");
        throw new Error("Not yet implemented.");
    }
    /**
     * Dispose of associated resources.
     * @member KeywordRecognitionModel.prototype.close
     * @function
     * @public
     */
    close() {
        if (this.privDisposed) {
            return;
        }
        this.privDisposed = true;
    }
}

//# sourceMappingURL=KeywordRecognitionModel.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/LanguageUnderstandingModel.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/LanguageUnderstandingModel.js ***!
  \******************************************************************************************************************/
/*! exports provided: LanguageUnderstandingModel, LanguageUnderstandingModelImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LanguageUnderstandingModel", function() { return LanguageUnderstandingModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LanguageUnderstandingModelImpl", function() { return LanguageUnderstandingModelImpl; });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Language understanding model
 * @class LanguageUnderstandingModel
 */
class LanguageUnderstandingModel {
    /**
     * Creates and initializes a new instance
     * @constructor
     */
    constructor() {
    }
    /**
     * Creates an language understanding model using the specified endpoint.
     * @member LanguageUnderstandingModel.fromEndpoint
     * @function
     * @public
     * @param {URL} uri - A String that represents the endpoint of the language understanding model.
     * @returns {LanguageUnderstandingModel} The language understanding model being created.
     */
    static fromEndpoint(uri) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNull(uri, "uri");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(uri.hostname, "uri");
        const langModelImp = new LanguageUnderstandingModelImpl();
        // Need to extract the app ID from the URL.
        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360
        // Start tearing the string apart.
        // region can be extracted from the host name.
        const firstDot = uri.host.indexOf(".");
        if (-1 === firstDot) {
            throw new Error("Could not determine region from endpoint");
        }
        langModelImp.region = uri.host.substr(0, firstDot);
        // Now the app ID.
        const lastSegment = uri.pathname.lastIndexOf("/") + 1;
        if (-1 === lastSegment) {
            throw new Error("Could not determine appId from endpoint");
        }
        langModelImp.appId = uri.pathname.substr(lastSegment);
        // And finally the key.
        langModelImp.subscriptionKey = uri.searchParams.get("subscription-key");
        if (undefined === langModelImp.subscriptionKey) {
            throw new Error("Could not determine subscription key from endpoint");
        }
        return langModelImp;
    }
    /**
     * Creates an language understanding model using the application id of Language Understanding service.
     * @member LanguageUnderstandingModel.fromAppId
     * @function
     * @public
     * @param {string} appId - A String that represents the application id of Language Understanding service.
     * @returns {LanguageUnderstandingModel} The language understanding model being created.
     */
    static fromAppId(appId) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(appId, "appId");
        const langModelImp = new LanguageUnderstandingModelImpl();
        langModelImp.appId = appId;
        return langModelImp;
    }
    /**
     * Creates a language understanding model using hostname, subscription key and application
     * id of Language Understanding service.
     * @member LanguageUnderstandingModel.fromSubscription
     * @function
     * @public
     * @param {string} subscriptionKey - A String that represents the subscription key of
     *        Language Understanding service.
     * @param {string} appId - A String that represents the application id of Language
     *        Understanding service.
     * @param {LanguageUnderstandingModel} region - A String that represents the region
     *        of the Language Understanding service (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {LanguageUnderstandingModel} The language understanding model being created.
     */
    static fromSubscription(subscriptionKey, appId, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(subscriptionKey, "subscriptionKey");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(appId, "appId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(region, "region");
        const langModelImp = new LanguageUnderstandingModelImpl();
        langModelImp.appId = appId;
        langModelImp.region = region;
        langModelImp.subscriptionKey = subscriptionKey;
        return langModelImp;
    }
}
/**
 * @private
 * @class LanguageUnderstandingModelImpl
 */
// tslint:disable-next-line:max-classes-per-file
class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {
}

//# sourceMappingURL=LanguageUnderstandingModel.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchDetails.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchDetails.js ***!
  \******************************************************************************************************/
/*! exports provided: NoMatchDetails */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoMatchDetails", function() { return NoMatchDetails; });
/* harmony import */ var _src_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


/**
 * Contains detailed information for NoMatch recognition results.
 * @class NoMatchDetails
 */
class NoMatchDetails {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {NoMatchReason} reason - The no-match reason.
     */
    constructor(reason) {
        this.privReason = reason;
    }
    /**
     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.
     * @member NoMatchDetails.fromResult
     * @function
     * @public
     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}
     *        result - The recognition result that was not recognized.
     * @returns {NoMatchDetails} The no match details object being created.
     */
    static fromResult(result) {
        const simpleSpeech = _src_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["SimpleSpeechPhrase"].fromJSON(result.json);
        let reason = _Exports__WEBPACK_IMPORTED_MODULE_1__["NoMatchReason"].NotRecognized;
        switch (simpleSpeech.RecognitionStatus) {
            case _src_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionStatus"].BabbleTimeout:
                reason = _Exports__WEBPACK_IMPORTED_MODULE_1__["NoMatchReason"].InitialBabbleTimeout;
                break;
            case _src_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionStatus"].InitialSilenceTimeout:
                reason = _Exports__WEBPACK_IMPORTED_MODULE_1__["NoMatchReason"].InitialSilenceTimeout;
                break;
            default:
                reason = _Exports__WEBPACK_IMPORTED_MODULE_1__["NoMatchReason"].NotRecognized;
                break;
        }
        return new NoMatchDetails(reason);
    }
    /**
     * The reason the recognition was canceled.
     * @member NoMatchDetails.prototype.reason
     * @function
     * @public
     * @returns {NoMatchReason} Specifies the reason canceled.
     */
    get reason() {
        return this.privReason;
    }
}

//# sourceMappingURL=NoMatchDetails.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchReason.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/NoMatchReason.js ***!
  \*****************************************************************************************************/
/*! exports provided: NoMatchReason */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoMatchReason", function() { return NoMatchReason; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines the possible reasons a recognition result might not be recognized.
 * @class NoMatchReason
 */
var NoMatchReason;
(function (NoMatchReason) {
    /**
     * Indicates that speech was detected, but not recognized.
     * @member NoMatchReason.NotRecognized
     */
    NoMatchReason[NoMatchReason["NotRecognized"] = 0] = "NotRecognized";
    /**
     * Indicates that the start of the audio stream contained only silence,
     * and the service timed out waiting for speech.
     * @member NoMatchReason.InitialSilenceTimeout
     */
    NoMatchReason[NoMatchReason["InitialSilenceTimeout"] = 1] = "InitialSilenceTimeout";
    /**
     * Indicates that the start of the audio stream contained only noise,
     * and the service timed out waiting for speech.
     * @member NoMatchReason.InitialBabbleTimeout
     */
    NoMatchReason[NoMatchReason["InitialBabbleTimeout"] = 2] = "InitialBabbleTimeout";
})(NoMatchReason || (NoMatchReason = {}));

//# sourceMappingURL=NoMatchReason.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js ***!
  \****************************************************************************************************/
/*! exports provided: OutputFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutputFormat", function() { return OutputFormat; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Define Speech Recognizer output formats.
 * @class OutputFormat
 */
var OutputFormat;
(function (OutputFormat) {
    /**
     * @member OutputFormat.Simple
     */
    OutputFormat[OutputFormat["Simple"] = 0] = "Simple";
    /**
     * @member OutputFormat.Detailed
     */
    OutputFormat[OutputFormat["Detailed"] = 1] = "Detailed";
})(OutputFormat || (OutputFormat = {}));

//# sourceMappingURL=OutputFormat.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PhraseListGrammar.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PhraseListGrammar.js ***!
  \*********************************************************************************************************/
/*! exports provided: PhraseListGrammar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhraseListGrammar", function() { return PhraseListGrammar; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Allows additions of new phrases to improve speech recognition.
 *
 * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect
 * to the speech service.
 */
class PhraseListGrammar {
    constructor(recogBase) {
        this.privGrammerBuilder = recogBase.dynamicGrammar;
    }
    /**
     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.
     * @param recognizer The recognizer to add phrase lists to.
     */
    static fromRecognizer(recognizer) {
        const recoBase = recognizer.internalData;
        return new PhraseListGrammar(recoBase);
    }
    /**
     * Adds a single phrase to the current recognizer.
     * @param phrase Phrase to add.
     */
    addPhrase(phrase) {
        this.privGrammerBuilder.addPhrase(phrase);
    }
    /**
     * Adds multiple phrases to the current recognizer.
     * @param phrases Array of phrases to add.
     */
    addPhrases(phrases) {
        this.privGrammerBuilder.addPhrase(phrases);
    }
    /**
     * Clears all phrases added to the current recognizer.
     */
    clear() {
        this.privGrammerBuilder.clearPhrases();
    }
}

//# sourceMappingURL=PhraseListGrammar.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ProfanityOption.js ***!
  \*******************************************************************************************************/
/*! exports provided: ProfanityOption */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProfanityOption", function() { return ProfanityOption; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Profanity option.
 * Added in version 1.7.0.
 */
var ProfanityOption;
(function (ProfanityOption) {
    ProfanityOption[ProfanityOption["Masked"] = 0] = "Masked";
    ProfanityOption[ProfanityOption["Removed"] = 1] = "Removed";
    ProfanityOption[ProfanityOption["Raw"] = 2] = "Raw";
})(ProfanityOption || (ProfanityOption = {}));

//# sourceMappingURL=ProfanityOption.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js ***!
  \**********************************************************************************************************/
/*! exports provided: PropertyCollection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyCollection", function() { return PropertyCollection; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Represents collection of properties and their values.
 * @class PropertyCollection
 */
class PropertyCollection {
    constructor() {
        this.privKeys = [];
        this.privValues = [];
    }
    /**
     * Returns the property value in type String. The parameter must have the same type as String.
     * Currently only String, int and bool are allowed.
     * If the name is not available, the specified defaultValue is returned.
     * @member PropertyCollection.prototype.getProperty
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} def - The default value which is returned if the parameter
     *        is not available in the collection.
     * @returns {string} value of the parameter.
     */
    getProperty(key, def) {
        let keyToUse;
        if (typeof key === "string") {
            keyToUse = key;
        }
        else {
            keyToUse = _Exports__WEBPACK_IMPORTED_MODULE_0__["PropertyId"][key];
        }
        for (let n = 0; n < this.privKeys.length; n++) {
            if (this.privKeys[n] === keyToUse) {
                return this.privValues[n];
            }
        }
        return def;
    }
    /**
     * Sets the String value of the parameter specified by name.
     * @member PropertyCollection.prototype.setProperty
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} value - The value of the parameter.
     */
    setProperty(key, value) {
        let keyToUse;
        if (typeof key === "string") {
            keyToUse = key;
        }
        else {
            keyToUse = _Exports__WEBPACK_IMPORTED_MODULE_0__["PropertyId"][key];
        }
        for (let n = 0; n < this.privKeys.length; n++) {
            if (this.privKeys[n] === keyToUse) {
                this.privValues[n] = value;
                return;
            }
        }
        this.privKeys.push(keyToUse);
        this.privValues.push(value);
    }
    /**
     * Clones the collection.
     * @member PropertyCollection.prototype.clone
     * @function
     * @public
     * @returns {PropertyCollection} A copy of the collection.
     */
    clone() {
        const clonedMap = new PropertyCollection();
        for (let n = 0; n < this.privKeys.length; n++) {
            clonedMap.privKeys.push(this.privKeys[n]);
            clonedMap.privValues.push(this.privValues[n]);
        }
        return clonedMap;
    }
}

//# sourceMappingURL=PropertyCollection.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js ***!
  \**************************************************************************************************/
/*! exports provided: PropertyId */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyId", function() { return PropertyId; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines speech property ids.
 * @class PropertyId
 */
var PropertyId;
(function (PropertyId) {
    /**
     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to specify
     * to specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't
     * have to use this property directly.
     * Instead, use [[SpeechConfig.fromSubscription]].
     * @member PropertyId.SpeechServiceConnection_Key
     */
    PropertyId[PropertyId["SpeechServiceConnection_Key"] = 0] = "SpeechServiceConnection_Key";
    /**
     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't
     * have to use this property directly.
     * Instead, use [[SpeechConfig.fromEndpoint]].
     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.
     * @member PropertyId.SpeechServiceConnection_Endpoint
     */
    PropertyId[PropertyId["SpeechServiceConnection_Endpoint"] = 1] = "SpeechServiceConnection_Endpoint";
    /**
     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to
     * use this property directly.
     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].
     * @member PropertyId.SpeechServiceConnection_Region
     */
    PropertyId[PropertyId["SpeechServiceConnection_Region"] = 2] = "SpeechServiceConnection_Region";
    /**
     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,
     * you shouldn't have to use this property directly.
     * Instead, use [[SpeechConfig.fromAuthorizationToken]],
     * [[SpeechRecognizer.authorizationToken]], [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]].
     * @member PropertyId.SpeechServiceAuthorization_Token
     */
    PropertyId[PropertyId["SpeechServiceAuthorization_Token"] = 3] = "SpeechServiceAuthorization_Token";
    /**
     * The Cognitive Services Speech Service authorization type. Currently unused.
     * @member PropertyId.SpeechServiceAuthorization_Type
     */
    PropertyId[PropertyId["SpeechServiceAuthorization_Type"] = 4] = "SpeechServiceAuthorization_Type";
    /**
     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't
     * have to use this property directly.
     * Instead, use [[SpeechConfig.endpointId]].
     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.
     * @member PropertyId.SpeechServiceConnection_EndpointId
     */
    PropertyId[PropertyId["SpeechServiceConnection_EndpointId"] = 5] = "SpeechServiceConnection_EndpointId";
    /**
     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,
     * you shouldn't have to use this property directly.
     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],
     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].
     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages
     */
    PropertyId[PropertyId["SpeechServiceConnection_TranslationToLanguages"] = 6] = "SpeechServiceConnection_TranslationToLanguages";
    /**
     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this
     * property directly.
     * Instead, use [[SpeechTranslationConfig.voiceName]].
     * NOTE: Valid voice names can be found <a href="https://aka.ms/csspeech/voicenames">here</a>.
     * @member PropertyId.SpeechServiceConnection_TranslationVoice
     */
    PropertyId[PropertyId["SpeechServiceConnection_TranslationVoice"] = 7] = "SpeechServiceConnection_TranslationVoice";
    /**
     * Translation features.
     * @member PropertyId.SpeechServiceConnection_TranslationFeatures
     */
    PropertyId[PropertyId["SpeechServiceConnection_TranslationFeatures"] = 8] = "SpeechServiceConnection_TranslationFeatures";
    /**
     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.
     * Instead, use [[LanguageUnderstandingModel]].
     * @member PropertyId.SpeechServiceConnection_IntentRegion
     */
    PropertyId[PropertyId["SpeechServiceConnection_IntentRegion"] = 9] = "SpeechServiceConnection_IntentRegion";
    /**
     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyHostName"] = 10] = "SpeechServiceConnection_ProxyHostName";
    /**
     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyPort"] = 11] = "SpeechServiceConnection_ProxyPort";
    /**
     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyUserName"] = 12] = "SpeechServiceConnection_ProxyUserName";
    /**
     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyPassword"] = 13] = "SpeechServiceConnection_ProxyPassword";
    /**
     * The Cognitive Services Speech Service recognition Mode. Can be "INTERACTIVE", "CONVERSATION", "DICTATION".
     * This property is intended to be read-only. The SDK is using it internally.
     * @member PropertyId.SpeechServiceConnection_RecoMode
     */
    PropertyId[PropertyId["SpeechServiceConnection_RecoMode"] = 14] = "SpeechServiceConnection_RecoMode";
    /**
     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property
     * directly.
     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].
     * @member PropertyId.SpeechServiceConnection_RecoLanguage
     */
    PropertyId[PropertyId["SpeechServiceConnection_RecoLanguage"] = 15] = "SpeechServiceConnection_RecoLanguage";
    /**
     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream
     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this
     * property directly.
     * Instead use [[SessionEventArgs.sessionId]].
     * @member PropertyId.Speech_SessionId
     */
    PropertyId[PropertyId["Speech_SessionId"] = 16] = "Speech_SessionId";
    /**
     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have
     * to use this property directly.
     * Instead use [[SpeechConfig.outputFormat]].
     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestDetailedResultTrueFalse"] = 17] = "SpeechServiceResponse_RequestDetailedResultTrueFalse";
    /**
     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.
     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestProfanityFilterTrueFalse"] = 18] = "SpeechServiceResponse_RequestProfanityFilterTrueFalse";
    /**
     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.
     * @member PropertyId.SpeechServiceResponse_JsonResult
     */
    PropertyId[PropertyId["SpeechServiceResponse_JsonResult"] = 19] = "SpeechServiceResponse_JsonResult";
    /**
     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to
     * use this property directly. Instead use [[CancellationDetails.errorDetails]].
     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails
     */
    PropertyId[PropertyId["SpeechServiceResponse_JsonErrorDetails"] = 20] = "SpeechServiceResponse_JsonErrorDetails";
    /**
     * The cancellation reason. Currently unused.
     * @member PropertyId.CancellationDetails_Reason
     */
    PropertyId[PropertyId["CancellationDetails_Reason"] = 21] = "CancellationDetails_Reason";
    /**
     * The cancellation text. Currently unused.
     * @member PropertyId.CancellationDetails_ReasonText
     */
    PropertyId[PropertyId["CancellationDetails_ReasonText"] = 22] = "CancellationDetails_ReasonText";
    /**
     * The Cancellation detailed text. Currently unused.
     * @member PropertyId.CancellationDetails_ReasonDetailedText
     */
    PropertyId[PropertyId["CancellationDetails_ReasonDetailedText"] = 23] = "CancellationDetails_ReasonDetailedText";
    /**
     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]
     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult
     */
    PropertyId[PropertyId["LanguageUnderstandingServiceResponse_JsonResult"] = 24] = "LanguageUnderstandingServiceResponse_JsonResult";
    /**
     * The URL string built from speech configuration.
     * This property is intended to be read-only. The SDK is using it internally.
     * NOTE: Added in version 1.7.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_Url"] = 25] = "SpeechServiceConnection_Url";
    /**
     * The initial silence timeout value (in milliseconds) used by the service.
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceConnection_InitialSilenceTimeoutMs"] = 26] = "SpeechServiceConnection_InitialSilenceTimeoutMs";
    /**
     * The end silence timeout value (in milliseconds) used by the service.
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceConnection_EndSilenceTimeoutMs"] = 27] = "SpeechServiceConnection_EndSilenceTimeoutMs";
    /**
     * A boolean value specifying whether audio logging is enabled in the service or not.
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceConnection_EnableAudioLogging"] = 28] = "SpeechServiceConnection_EnableAudioLogging";
    /**
     * The requested Cognitive Services Speech Service response output profanity setting.
     * Allowed values are "masked", "removed", and "raw".
     * Added in version 1.7.0.
     */
    PropertyId[PropertyId["SpeechServiceResponse_ProfanityOption"] = 29] = "SpeechServiceResponse_ProfanityOption";
    /**
     * A string value specifying which post processing option should be used by service.
     * Allowed values are "TrueText".
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceResponse_PostProcessingOption"] = 30] = "SpeechServiceResponse_PostProcessingOption";
    /**
     *  A boolean value specifying whether to include word-level timestamps in the response result.
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestWordLevelTimestamps"] = 31] = "SpeechServiceResponse_RequestWordLevelTimestamps";
    /**
     * The number of times a word has to be in partial results to be returned.
     * Added in version 1.7.0
     */
    PropertyId[PropertyId["SpeechServiceResponse_StablePartialResultThreshold"] = 32] = "SpeechServiceResponse_StablePartialResultThreshold";
    /**
     * A string value specifying the output format option in the response result. Internal use only.
     * Added in version 1.7.0.
     */
    PropertyId[PropertyId["SpeechServiceResponse_OutputFormatOption"] = 33] = "SpeechServiceResponse_OutputFormatOption";
    /**
     * A boolean value to request for stabilizing translation partial results by omitting words in the end.
     * Added in version 1.7.0.
     */
    PropertyId[PropertyId["SpeechServiceResponse_TranslationRequestStablePartialResult"] = 34] = "SpeechServiceResponse_TranslationRequestStablePartialResult";
    /**
     * Identifier used to connect to the backend service.
     * @member PropertyId.Conversation_ApplicationId
     */
    PropertyId[PropertyId["Conversation_ApplicationId"] = 35] = "Conversation_ApplicationId";
    /**
     * Type of dialog backend to connect to.
     * @member PropertyId.Conversation_DialogType
     */
    PropertyId[PropertyId["Conversation_DialogType"] = 36] = "Conversation_DialogType";
    /**
     * Silence timeout for listening
     * @member PropertyId.Conversation_Initial_Silence_Timeout
     */
    PropertyId[PropertyId["Conversation_Initial_Silence_Timeout"] = 37] = "Conversation_Initial_Silence_Timeout";
    /**
     * From Id to add to speech recognition activities.
     * @member PropertyId.Conversation_From_Id
     */
    PropertyId[PropertyId["Conversation_From_Id"] = 38] = "Conversation_From_Id";
})(PropertyId || (PropertyId = {}));

//# sourceMappingURL=PropertyId.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionEventArgs.js ***!
  \************************************************************************************************************/
/*! exports provided: RecognitionEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognitionEventArgs", function() { return RecognitionEventArgs; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines payload for session events like Speech Start/End Detected
 * @class
 */
class RecognitionEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__["SessionEventArgs"] {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    constructor(offset, sessionId) {
        super(sessionId);
        this.privOffset = offset;
    }
    /**
     * Represents the message offset
     * @member RecognitionEventArgs.prototype.offset
     * @function
     * @public
     */
    get offset() {
        return this.privOffset;
    }
}

//# sourceMappingURL=RecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionResult.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/RecognitionResult.js ***!
  \*********************************************************************************************************/
/*! exports provided: RecognitionResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognitionResult", function() { return RecognitionResult; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines result of speech recognition.
 * @class RecognitionResult
 */
class RecognitionResult {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {string} text - The recognized text.
     * @param {number} duration - The duration.
     * @param {number} offset - The offset into the stream.
     * @param {string} errorDetails - Error details, if provided.
     * @param {string} json - Additional Json, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     */
    constructor(resultId, reason, text, duration, offset, errorDetails, json, properties) {
        this.privResultId = resultId;
        this.privReason = reason;
        this.privText = text;
        this.privDuration = duration;
        this.privOffset = offset;
        this.privErrorDetails = errorDetails;
        this.privJson = json;
        this.privProperties = properties;
    }
    /**
     * Specifies the result identifier.
     * @member RecognitionResult.prototype.resultId
     * @function
     * @public
     * @returns {string} Specifies the result identifier.
     */
    get resultId() {
        return this.privResultId;
    }
    /**
     * Specifies status of the result.
     * @member RecognitionResult.prototype.reason
     * @function
     * @public
     * @returns {ResultReason} Specifies status of the result.
     */
    get reason() {
        return this.privReason;
    }
    /**
     * Presents the recognized text in the result.
     * @member RecognitionResult.prototype.text
     * @function
     * @public
     * @returns {string} Presents the recognized text in the result.
     */
    get text() {
        return this.privText;
    }
    /**
     * Duration of recognized speech in 100 nano second incements.
     * @member RecognitionResult.prototype.duration
     * @function
     * @public
     * @returns {number} Duration of recognized speech in 100 nano second incements.
     */
    get duration() {
        return this.privDuration;
    }
    /**
     * Offset of recognized speech in 100 nano second incements.
     * @member RecognitionResult.prototype.offset
     * @function
     * @public
     * @returns {number} Offset of recognized speech in 100 nano second incements.
     */
    get offset() {
        return this.privOffset;
    }
    /**
     * In case of an unsuccessful recognition, provides details of the occurred error.
     * @member RecognitionResult.prototype.errorDetails
     * @function
     * @public
     * @returns {string} a brief description of an error.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
    /**
     * A string containing Json serialized recognition result as it was received from the service.
     * @member RecognitionResult.prototype.json
     * @function
     * @private
     * @returns {string} Json serialized representation of the result.
     */
    get json() {
        return this.privJson;
    }
    /**
     *  The set of properties exposed in the result.
     * @member RecognitionResult.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The set of properties exposed in the result.
     */
    get properties() {
        return this.privProperties;
    }
}

//# sourceMappingURL=RecognitionResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Recognizer.js ***!
  \**************************************************************************************************/
/*! exports provided: Recognizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Recognizer", function() { return Recognizer; });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _common_Exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.




/**
 * Defines the base class Recognizer which mainly contains common event handlers.
 * @class Recognizer
 */
class Recognizer {
    /**
     * Creates and initializes an instance of a Recognizer
     * @constructor
     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer
     */
    constructor(audioConfig, properties, connectionFactory) {
        this.audioConfig = (audioConfig !== undefined) ? audioConfig : _Exports__WEBPACK_IMPORTED_MODULE_3__["AudioConfig"].fromDefaultMicrophoneInput();
        this.privDisposed = false;
        this.privProperties = properties.clone();
        this.privConnectionFactory = connectionFactory;
        this.implCommonRecognizerSetup();
    }
    /**
     * Dispose of associated resources.
     * @member Recognizer.prototype.close
     * @function
     * @public
     */
    close() {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfDisposed(this.privDisposed);
        this.dispose(true);
    }
    /**
     * @Internal
     * Internal data member to support fromRecognizer* pattern methods on other classes.
     * Do not use externally, object returned will change without warning or notice.
     */
    get internalData() {
        return this.privReco;
    }
    /**
     * This method performs cleanup of resources.
     * The Boolean parameter disposing indicates whether the method is called
     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).
     * Derived classes should override this method to dispose resource if needed.
     * @member Recognizer.prototype.dispose
     * @function
     * @public
     * @param {boolean} disposing - Flag to request disposal.
     */
    dispose(disposing) {
        if (this.privDisposed) {
            return;
        }
        if (disposing) {
            if (this.privReco) {
                this.privReco.audioSource.turnOff();
                this.privReco.dispose();
            }
        }
        this.privDisposed = true;
    }
    /**
     * This method returns the current state of the telemetry setting.
     * @member Recognizer.prototype.telemetryEnabled
     * @function
     * @public
     * @returns true if the telemetry is enabled, false otherwise.
     */
    static get telemetryEnabled() {
        return _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["ServiceRecognizerBase"].telemetryDataEnabled;
    }
    /**
     * This method globally enables or disables telemetry.
     * @member Recognizer.prototype.enableTelemetry
     * @function
     * @public
     * @param enabled - Global setting for telemetry collection.
     * If set to true, telemetry information like microphone errors,
     * recognition errors are collected and sent to Microsoft.
     * If set to false, no telemetry is sent to Microsoft.
     */
    /* tslint:disable:member-ordering */
    static enableTelemetry(enabled) {
        _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["ServiceRecognizerBase"].telemetryDataEnabled = enabled;
    }
    // Does the generic recognizer setup that is common across all recognizer types.
    implCommonRecognizerSetup() {
        let osPlatform = (typeof window !== "undefined") ? "Browser" : "Node";
        let osName = "unknown";
        let osVersion = "unknown";
        if (typeof navigator !== "undefined") {
            osPlatform = osPlatform + "/" + navigator.platform;
            osName = navigator.userAgent;
            osVersion = navigator.appVersion;
        }
        const recognizerConfig = this.createRecognizerConfig(new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechServiceConfig"](new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["Context"](new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["OS"](osPlatform, osName, osVersion))));
        const subscriptionKey = this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__["PropertyId"].SpeechServiceConnection_Key, undefined);
        const authentication = (subscriptionKey && subscriptionKey !== "") ?
            new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["CognitiveSubscriptionKeyAuthentication"](subscriptionKey) :
            new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["CognitiveTokenAuthentication"]((authFetchEventId) => {
                const authorizationToken = this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__["PropertyId"].SpeechServiceAuthorization_Token, undefined);
                return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(authorizationToken);
            }, (authFetchEventId) => {
                const authorizationToken = this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__["PropertyId"].SpeechServiceAuthorization_Token, undefined);
                return _common_Exports__WEBPACK_IMPORTED_MODULE_1__["PromiseHelper"].fromResult(authorizationToken);
            });
        this.privReco = this.createServiceRecognizer(authentication, this.privConnectionFactory, this.audioConfig, recognizerConfig);
    }
    // Start the recognition
    implRecognizerStart(recognitionMode, successCallback, errorCallback) {
        this.privReco.recognize(recognitionMode, successCallback, errorCallback).on(
        /* tslint:disable:no-empty */
        (result) => { }, (error) => {
            if (!!errorCallback) {
                // Internal error with service communication.
                errorCallback("Runtime error: " + error);
            }
        });
    }
    implRecognizerStop() {
        if (this.privReco) {
            this.privReco.stopRecognizing();
        }
    }
}

//# sourceMappingURL=Recognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js ***!
  \****************************************************************************************************/
/*! exports provided: ResultReason */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResultReason", function() { return ResultReason; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines the possible reasons a recognition result might be generated.
 * @class ResultReason
 */
var ResultReason;
(function (ResultReason) {
    /**
     * Indicates speech could not be recognized. More details
     * can be found in the NoMatchDetails object.
     * @member ResultReason.NoMatch
     */
    ResultReason[ResultReason["NoMatch"] = 0] = "NoMatch";
    /**
     * Indicates that the recognition was canceled. More details
     * can be found using the CancellationDetails object.
     * @member ResultReason.Canceled
     */
    ResultReason[ResultReason["Canceled"] = 1] = "Canceled";
    /**
     * Indicates the speech result contains hypothesis text.
     * @member ResultReason.RecognizedSpeech
     */
    ResultReason[ResultReason["RecognizingSpeech"] = 2] = "RecognizingSpeech";
    /**
     * Indicates the speech result contains final text that has been recognized.
     * Speech Recognition is now complete for this phrase.
     * @member ResultReason.RecognizedSpeech
     */
    ResultReason[ResultReason["RecognizedSpeech"] = 3] = "RecognizedSpeech";
    /**
     * Indicates the intent result contains hypothesis text and intent.
     * @member ResultReason.RecognizingIntent
     */
    ResultReason[ResultReason["RecognizingIntent"] = 4] = "RecognizingIntent";
    /**
     * Indicates the intent result contains final text and intent.
     * Speech Recognition and Intent determination are now complete for this phrase.
     * @member ResultReason.RecognizedIntent
     */
    ResultReason[ResultReason["RecognizedIntent"] = 5] = "RecognizedIntent";
    /**
     * Indicates the translation result contains hypothesis text and its translation(s).
     * @member ResultReason.TranslatingSpeech
     */
    ResultReason[ResultReason["TranslatingSpeech"] = 6] = "TranslatingSpeech";
    /**
     * Indicates the translation result contains final text and corresponding translation(s).
     * Speech Recognition and Translation are now complete for this phrase.
     * @member ResultReason.TranslatedSpeech
     */
    ResultReason[ResultReason["TranslatedSpeech"] = 7] = "TranslatedSpeech";
    /**
     * Indicates the synthesized audio result contains a non-zero amount of audio data
     * @member ResultReason.SynthesizingAudio
     */
    ResultReason[ResultReason["SynthesizingAudio"] = 8] = "SynthesizingAudio";
    /**
     * Indicates the synthesized audio is now complete for this phrase.
     * @member ResultReason.SynthesizingAudioCompleted
     */
    ResultReason[ResultReason["SynthesizingAudioCompleted"] = 9] = "SynthesizingAudioCompleted";
})(ResultReason || (ResultReason = {}));

//# sourceMappingURL=ResultReason.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServicePropertyChannel.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ServicePropertyChannel.js ***!
  \**************************************************************************************************************/
/*! exports provided: ServicePropertyChannel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServicePropertyChannel", function() { return ServicePropertyChannel; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Defines channels used to pass property settings to service.
 * Added in version 1.7.0.
 */
var ServicePropertyChannel;
(function (ServicePropertyChannel) {
    /**
     * Uses URI query parameter to pass property settings to service.
     */
    ServicePropertyChannel[ServicePropertyChannel["UriQueryParameter"] = 0] = "UriQueryParameter";
})(ServicePropertyChannel || (ServicePropertyChannel = {}));

//# sourceMappingURL=ServicePropertyChannel.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SessionEventArgs.js ***!
  \********************************************************************************************************/
/*! exports provided: SessionEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SessionEventArgs", function() { return SessionEventArgs; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.
 * @class SessionEventArgs
 */
class SessionEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} sessionId - The session id.
     */
    constructor(sessionId) {
        this.privSessionId = sessionId;
    }
    /**
     * Represents the session identifier.
     * @member SessionEventArgs.prototype.sessionId
     * @function
     * @public
     * @returns {string} Represents the session identifier.
     */
    get sessionId() {
        return this.privSessionId;
    }
}

//# sourceMappingURL=SessionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechCommandsConfig.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechCommandsConfig.js ***!
  \************************************************************************************************************/
/*! exports provided: SpeechCommandsConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechCommandsConfig", function() { return SpeechCommandsConfig; });
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DialogServiceConfig */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/DialogServiceConfig.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



/**
 * Class that defines configurations for the dialog service connector object for using a SpeechCommands backend.
 * @class SpeechCommandsConfig
 */
class SpeechCommandsConfig extends _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_1__["DialogServiceConfigImpl"] {
    /**
     * Creates an instance of SpeechCommandsConfig.
     */
    constructor() {
        super();
    }
    /**
     * Creates an instance of the bot framework config with the specified subscription and region.
     * @member SpeechCommandsConfig.fromSubscription
     * @function
     * @public
     * @param applicationId Speech Commands application id.
     * @param subscription Subscription key associated with the bot
     * @param region The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechCommandsConfig} A new bot framework config.
     */
    static fromSubscription(applicationId, subscription, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(applicationId, "applicationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(subscription, "subscription");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(region, "region");
        const speechCommandsConfig = new _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_1__["DialogServiceConfigImpl"]();
        speechCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].Conversation_DialogType, "custom_commands");
        speechCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].Conversation_ApplicationId, applicationId);
        speechCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Key, subscription);
        speechCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region, region);
        return speechCommandsConfig;
    }
    /**
     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.
     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token
     * expires, the caller needs to refresh it by calling this setter with a new valid token.
     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.
     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer
     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
     * @member SpeechCommandsConfig.fromAuthorizationToken
     * @function
     * @public
     * @param applicationId Speech Commands application id.
     * @param authorizationToken The authorization token associated with the application.
     * @param region The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechCommandsConfig} A new speech commands config.
     */
    static fromAuthorizationToken(applicationId, authorizationToken, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(applicationId, "applicationId");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(authorizationToken, "authorizationToken");
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(region, "region");
        const speechCommandsConfig = new _DialogServiceConfig__WEBPACK_IMPORTED_MODULE_1__["DialogServiceConfigImpl"]();
        speechCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].Conversation_DialogType, "custom_commands");
        speechCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].Conversation_ApplicationId, applicationId);
        speechCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceAuthorization_Token, authorizationToken);
        speechCommandsConfig.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region, region);
        return speechCommandsConfig;
    }
    /**
     * Sets the corresponding backend application identifier.
     * @member SpeechCommandsConfig.prototype.Conversation_ApplicationId
     * @function
     * @public
     * @param {string} value - The application identifier to set.
     */
    set applicationId(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_0__["Contracts"].throwIfNullOrWhitespace(value, "value");
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].Conversation_ApplicationId, value);
    }
    /**
     * Gets the corresponding backend application identifier.
     * @member SpeechCommandsConfig.prototype.Conversation_ApplicationId
     * @function
     * @public
     * @param {string} value - The application identifier to get.
     */
    get applicationId() {
        return this.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].Conversation_ApplicationId);
    }
}

//# sourceMappingURL=SpeechCommandsConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechConfig.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechConfig.js ***!
  \****************************************************************************************************/
/*! exports provided: SpeechConfig, SpeechConfigImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechConfig", function() { return SpeechConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechConfigImpl", function() { return SpeechConfigImpl; });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



/**
 * Speech configuration.
 * @class SpeechConfig
 */
class SpeechConfig {
    /**
     * Creates and initializes an instance.
     * @constructor
     */
    constructor() { }
    /**
     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.
     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.
     * @member SpeechConfig.fromSubscription
     * @function
     * @public
     * @param {string} subscriptionKey - The subscription key.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechConfig} The speech factory
     */
    static fromSubscription(subscriptionKey, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(subscriptionKey, "subscriptionKey");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(region, "region");
        const speechImpl = new SpeechConfigImpl();
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region, region);
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_IntentRegion, region);
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Key, subscriptionKey);
        return speechImpl;
    }
    /**
     * Creates an instance of the speech config with specified endpoint and subscription key.
     * This method is intended only for users who use a non-standard service endpoint or parameters.
     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.
     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.
     * For example, if language is defined in the uri as query parameter "language=de-DE", and also set by
     *              SpeechConfig.speechRecognitionLanguage = "en-US", the language setting in uri takes precedence,
     *              and the effective language is "de-DE". Only the parameters that are not specified in the
     *              endpoint URL can be set by other APIs.
     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the
     *       fromEndpoint method, and then set authorizationToken="token" on the created SpeechConfig instance to
     *       use the authorization token.
     * @member SpeechConfig.fromEndpoint
     * @function
     * @public
     * @param {URL} endpoint - The service endpoint to connect to.
     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.
     * @returns {SpeechConfig} A speech factory instance.
     */
    static fromEndpoint(endpoint, subscriptionKey) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNull(endpoint, "endpoint");
        const speechImpl = new SpeechConfigImpl();
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Endpoint, endpoint.href);
        if (undefined !== subscriptionKey) {
            speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Key, subscriptionKey);
        }
        return speechImpl;
    }
    /**
     * Creates an instance of the speech factory with specified initial authorization token and region.
     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token
     *       expires, the caller needs to refresh it by calling this setter with a new valid token.
     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want
     *       to use the Intent recognizer. As configuration values are copied when creating a new recognizer,
     *       the new token value will not apply to recognizers that have already been created. For recognizers
     *       that have been created before, you need to set authorization token of the corresponding recognizer
     *       to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
     * @member SpeechConfig.fromAuthorizationToken
     * @function
     * @public
     * @param {string} authorizationToken - The initial authorization token.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechConfig} A speech factory instance.
     */
    static fromAuthorizationToken(authorizationToken, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNull(authorizationToken, "authorizationToken");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(region, "region");
        const speechImpl = new SpeechConfigImpl();
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region, region);
        speechImpl.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_IntentRegion, region);
        speechImpl.authorizationToken = authorizationToken;
        return speechImpl;
    }
    /**
     * Closes the configuration.
     * @member SpeechConfig.prototype.close
     * @function
     * @public
     */
    /* tslint:disable:no-empty */
    close() { }
}
/**
 * @public
 * @class SpeechConfigImpl
 */
// tslint:disable-next-line:max-classes-per-file
class SpeechConfigImpl extends SpeechConfig {
    constructor() {
        super();
        this.privProperties = new _Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyCollection"]();
        this.speechRecognitionLanguage = "en-US"; // Should we have a default?
        this.outputFormat = _Exports__WEBPACK_IMPORTED_MODULE_2__["OutputFormat"].Simple;
    }
    get properties() {
        return this.privProperties;
    }
    get endPoint() {
        return new URL(this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Endpoint));
    }
    get subscriptionKey() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Key);
    }
    get region() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region);
    }
    get authorizationToken() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceAuthorization_Token);
    }
    set authorizationToken(value) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceAuthorization_Token, value);
    }
    get speechRecognitionLanguage() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_RecoLanguage);
    }
    set speechRecognitionLanguage(value) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_RecoLanguage, value);
    }
    get outputFormat() {
        return _Exports__WEBPACK_IMPORTED_MODULE_2__["OutputFormat"][this.privProperties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["OutputFormatPropertyName"], undefined)];
    }
    set outputFormat(value) {
        this.privProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["OutputFormatPropertyName"], _Exports__WEBPACK_IMPORTED_MODULE_2__["OutputFormat"][value]);
    }
    get endpointId() {
        return this.privProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_EndpointId);
    }
    set endpointId(value) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_EndpointId, value);
    }
    setProperty(name, value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNull(value, "value");
        this.privProperties.setProperty(name, value);
    }
    getProperty(name, def) {
        return this.privProperties.getProperty(name, def);
    }
    setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_ProxyHostName], proxyHostName);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_ProxyPort], proxyPort);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_ProxyUserName], proxyUserName);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_ProxyPassword], proxyPassword);
    }
    setServiceProperty(name, value, channel) {
        const currentProperties = JSON.parse(this.privProperties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["ServicePropertiesPropertyName"], "{}"));
        currentProperties[name] = value;
        this.privProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["ServicePropertiesPropertyName"], JSON.stringify(currentProperties));
    }
    setProfanity(profanity) {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceResponse_ProfanityOption, _Exports__WEBPACK_IMPORTED_MODULE_2__["ProfanityOption"][profanity]);
    }
    enableAudioLogging() {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_EnableAudioLogging, "true");
    }
    requestWordLevelTimestamps() {
        this.privProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceResponse_RequestWordLevelTimestamps, "true");
    }
    enableDictation() {
        this.privProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["ForceDictationPropertyName"], "true");
    }
    clone() {
        const ret = new SpeechConfigImpl();
        ret.privProperties = this.privProperties.clone();
        return ret;
    }
}

//# sourceMappingURL=SpeechConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionCanceledEventArgs.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionCanceledEventArgs.js ***!
  \**************************************************************************************************************************/
/*! exports provided: SpeechRecognitionCanceledEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionCanceledEventArgs", function() { return SpeechRecognitionCanceledEventArgs; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines content of a RecognitionErrorEvent.
 * @class SpeechRecognitionCanceledEventArgs
 */
class SpeechRecognitionCanceledEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionEventArgs"] {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {CancellationReason} reason - The cancellation reason.
     * @param {string} errorDetails - Error details, if provided.
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    constructor(reason, errorDetails, errorCode, offset, sessionId) {
        super(offset, sessionId);
        this.privReason = reason;
        this.privErrorDetails = errorDetails;
        this.privErrorCode = errorCode;
    }
    /**
     * The reason the recognition was canceled.
     * @member SpeechRecognitionCanceledEventArgs.prototype.reason
     * @function
     * @public
     * @returns {CancellationReason} Specifies the reason canceled.
     */
    get reason() {
        return this.privReason;
    }
    /**
     * The error code in case of an unsuccessful recognition.
     * Added in version 1.1.0.
     * @return An error code that represents the error reason.
     */
    get errorCode() {
        return this.privErrorCode;
    }
    /**
     * In case of an unsuccessful recognition, provides details of the occurred error.
     * @member SpeechRecognitionCanceledEventArgs.prototype.errorDetails
     * @function
     * @public
     * @returns {string} A String that represents the error details.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
}

//# sourceMappingURL=SpeechRecognitionCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionEventArgs.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionEventArgs.js ***!
  \******************************************************************************************************************/
/*! exports provided: SpeechRecognitionEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionEventArgs", function() { return SpeechRecognitionEventArgs; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines contents of speech recognizing/recognized event.
 * @class SpeechRecognitionEventArgs
 */
class SpeechRecognitionEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionEventArgs"] {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {SpeechRecognitionResult} result - The speech recognition result.
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    constructor(result, offset, sessionId) {
        super(offset, sessionId);
        this.privResult = result;
    }
    /**
     * Specifies the recognition result.
     * @member SpeechRecognitionEventArgs.prototype.result
     * @function
     * @public
     * @returns {SpeechRecognitionResult} the recognition result.
     */
    get result() {
        return this.privResult;
    }
}

//# sourceMappingURL=SpeechRecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognitionResult.js ***!
  \***************************************************************************************************************/
/*! exports provided: SpeechRecognitionResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognitionResult", function() { return SpeechRecognitionResult; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Defines result of speech recognition.
 * @class SpeechRecognitionResult
 */
class SpeechRecognitionResult extends _Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionResult"] {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @public
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {string} text - The recognized text.
     * @param {number} duration - The duration.
     * @param {number} offset - The offset into the stream.
     * @param {string} errorDetails - Error details, if provided.
     * @param {string} json - Additional Json, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     */
    constructor(resultId, reason, text, duration, offset, errorDetails, json, properties) {
        super(resultId, reason, text, duration, offset, errorDetails, json, properties);
    }
}

//# sourceMappingURL=SpeechRecognitionResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognizer.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognizer.js ***!
  \********************************************************************************************************/
/*! exports provided: SpeechRecognizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechRecognizer", function() { return SpeechRecognizer; });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _common_speech_SpeechConnectionFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common.speech/SpeechConnectionFactory */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionFactory.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.




/**
 * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.
 * @class SpeechRecognizer
 */
class SpeechRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_3__["Recognizer"] {
    /**
     * SpeechRecognizer constructor.
     * @constructor
     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer
     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer
     */
    constructor(speechConfig, audioConfig) {
        const speechConfigImpl = speechConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfNull(speechConfigImpl, "speechConfig");
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__["PropertyId"].SpeechServiceConnection_RecoLanguage), _Exports__WEBPACK_IMPORTED_MODULE_3__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_3__["PropertyId"].SpeechServiceConnection_RecoLanguage]);
        super(audioConfig, speechConfigImpl.properties, new _common_speech_SpeechConnectionFactory__WEBPACK_IMPORTED_MODULE_1__["SpeechConnectionFactory"]());
        this.privDisposedSpeechRecognizer = false;
    }
    /**
     * Gets the endpoint id of a customized speech model that is used for speech recognition.
     * @member SpeechRecognizer.prototype.endpointId
     * @function
     * @public
     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.
     */
    get endpointId() {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfDisposed(this.privDisposedSpeechRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__["PropertyId"].SpeechServiceConnection_EndpointId, "00000000-0000-0000-0000-000000000000");
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member SpeechRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__["PropertyId"].SpeechServiceAuthorization_Token);
    }
    /**
     * Gets/Sets the authorization token used to communicate with the service.
     * @member SpeechRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @param {string} token - Authorization token.
     */
    set authorizationToken(token) {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfNullOrWhitespace(token, "token");
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__["PropertyId"].SpeechServiceAuthorization_Token, token);
    }
    /**
     * Gets the spoken language of recognition.
     * @member SpeechRecognizer.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @returns {string} The spoken language of recognition.
     */
    get speechRecognitionLanguage() {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfDisposed(this.privDisposedSpeechRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_3__["PropertyId"].SpeechServiceConnection_RecoLanguage);
    }
    /**
     * Gets the output format of recognition.
     * @member SpeechRecognizer.prototype.outputFormat
     * @function
     * @public
     * @returns {OutputFormat} The output format of recognition.
     */
    get outputFormat() {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfDisposed(this.privDisposedSpeechRecognizer);
        if (this.properties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["OutputFormatPropertyName"], _Exports__WEBPACK_IMPORTED_MODULE_3__["OutputFormat"][_Exports__WEBPACK_IMPORTED_MODULE_3__["OutputFormat"].Simple]) === _Exports__WEBPACK_IMPORTED_MODULE_3__["OutputFormat"][_Exports__WEBPACK_IMPORTED_MODULE_3__["OutputFormat"].Simple]) {
            return _Exports__WEBPACK_IMPORTED_MODULE_3__["OutputFormat"].Simple;
        }
        else {
            return _Exports__WEBPACK_IMPORTED_MODULE_3__["OutputFormat"].Detailed;
        }
    }
    /**
     * The collection of properties and their values defined for this SpeechRecognizer.
     * @member SpeechRecognizer.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Starts speech recognition, and stops after the first utterance is recognized.
     * The task returns the recognition text as result.
     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,
     *       so it is suitable only for single shot recognition
     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.
     * @member SpeechRecognizer.prototype.recognizeOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the SpeechRecognitionResult.
     * @param err - Callback invoked in case of an error.
     */
    recognizeOnceAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfDisposed(this.privDisposedSpeechRecognizer);
            this.implRecognizerStop();
            this.implRecognizerStart(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionMode"].Interactive, (e) => {
                this.implRecognizerStop();
                if (!!cb) {
                    cb(e);
                }
            }, (e) => {
                this.implRecognizerStop();
                if (!!err) {
                    err(e);
                }
            });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    }
    /**
     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    startContinuousRecognitionAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfDisposed(this.privDisposedSpeechRecognizer);
            this.implRecognizerStop();
            this.implRecognizerStart(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionMode"].Conversation, undefined, undefined);
            // report result to promise.
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
                cb = undefined;
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    }
    /**
     * Stops continuous speech recognition.
     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    stopContinuousRecognitionAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfDisposed(this.privDisposedSpeechRecognizer);
            this.implRecognizerStop();
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    }
    /**
     * Starts speech recognition with keyword spotting, until
     * stopKeywordRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * Note: Key word spotting functionality is only available on the
     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.
     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync
     * @function
     * @public
     * @param {KeywordRecognitionModel} model The keyword recognition model that
     *        specifies the keyword to be recognized.
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    startKeywordRecognitionAsync(model, cb, err) {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfNull(model, "model");
        if (!!err) {
            err("Not yet implemented.");
        }
    }
    /**
     * Stops continuous speech recognition.
     * Note: Key word spotting functionality is only available on the
     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.
     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    stopKeywordRecognitionAsync(cb, err) {
        if (!!cb) {
            cb();
        }
    }
    /**
     * closes all external resources held by an instance of this class.
     * @member SpeechRecognizer.prototype.close
     * @function
     * @public
     */
    close() {
        _Contracts__WEBPACK_IMPORTED_MODULE_2__["Contracts"].throwIfDisposed(this.privDisposedSpeechRecognizer);
        this.dispose(true);
    }
    /**
     * Disposes any resources held by the object.
     * @member SpeechRecognizer.prototype.dispose
     * @function
     * @public
     * @param {boolean} disposing - true if disposing the object.
     */
    dispose(disposing) {
        if (this.privDisposedSpeechRecognizer) {
            return;
        }
        if (disposing) {
            this.implRecognizerStop();
            this.privDisposedSpeechRecognizer = true;
        }
        super.dispose(disposing);
    }
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognizerConfig"](speechConfig, this.properties);
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const configImpl = audioConfig;
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechServiceRecognizer"](authentication, connectionFactory, configImpl, recognizerConfig, this);
    }
}

//# sourceMappingURL=SpeechRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechTranslationConfig.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechTranslationConfig.js ***!
  \***************************************************************************************************************/
/*! exports provided: SpeechTranslationConfig, SpeechTranslationConfigImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechTranslationConfig", function() { return SpeechTranslationConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpeechTranslationConfigImpl", function() { return SpeechTranslationConfigImpl; });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



/**
 * Speech translation configuration.
 * @class SpeechTranslationConfig
 */
class SpeechTranslationConfig extends _Exports__WEBPACK_IMPORTED_MODULE_2__["SpeechConfig"] {
    /**
     * Creates an instance of recognizer config.
     */
    constructor() {
        super();
    }
    /**
     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.
     * @member SpeechTranslationConfig.fromSubscription
     * @function
     * @public
     * @param {string} subscriptionKey - The subscription key.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechTranslationConfig} The speech translation config.
     */
    static fromSubscription(subscriptionKey, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(subscriptionKey, "subscriptionKey");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(region, "region");
        const ret = new SpeechTranslationConfigImpl();
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Key, subscriptionKey);
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region, region);
        return ret;
    }
    /**
     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.
     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token
     *       expires, the caller needs to refresh it by setting the property authorizationToken with a new
     *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance
     *       will encounter errors during recognition.
     * As configuration values are copied when creating a new recognizer, the new token value will not apply
     * to recognizers that have already been created.
     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer
     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
     * @member SpeechTranslationConfig.fromAuthorizationToken
     * @function
     * @public
     * @param {string} authorizationToken - The authorization token.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechTranslationConfig} The speech translation config.
     */
    static fromAuthorizationToken(authorizationToken, region) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(authorizationToken, "authorizationToken");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(region, "region");
        const ret = new SpeechTranslationConfigImpl();
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceAuthorization_Token, authorizationToken);
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region, region);
        return ret;
    }
    /**
     * Creates an instance of the speech translation config with specified endpoint and subscription key.
     * This method is intended only for users who use a non-standard service endpoint or paramters.
     * Note: The query properties specified in the endpoint URL are not changed, even if they are
     *       set by any other APIs. For example, if language is defined in the uri as query parameter
     *       "language=de-DE", and also set by the speechRecognitionLanguage property, the language
     *       setting in uri takes precedence, and the effective language is "de-DE".
     * Only the properties that are not specified in the endpoint URL can be set by other APIs.
     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the
     *       fromEndpoint method, and then set authorizationToken="token" on the created SpeechConfig instance to
     *       use the authorization token.
     * @member SpeechTranslationConfig.fromEndpoint
     * @function
     * @public
     * @param {URL} endpoint - The service endpoint to connect to.
     * @param {string} subscriptionKey - The subscription key.
     * @returns {SpeechTranslationConfig} A speech config instance.
     */
    static fromEndpoint(endpoint, subscriptionKey) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNull(endpoint, "endpoint");
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNull(subscriptionKey, "subscriptionKey");
        const ret = new SpeechTranslationConfigImpl();
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Endpoint, endpoint.href);
        ret.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Key, subscriptionKey);
        return ret;
    }
}
/**
 * @private
 * @class SpeechTranslationConfigImpl
 */
// tslint:disable-next-line:max-classes-per-file
class SpeechTranslationConfigImpl extends SpeechTranslationConfig {
    constructor() {
        super();
        this.privSpeechProperties = new _Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyCollection"]();
        this.outputFormat = _Exports__WEBPACK_IMPORTED_MODULE_2__["OutputFormat"].Simple;
    }
    /**
     * Gets/Sets the authorization token.
     * If this is set, subscription key is ignored.
     * User needs to make sure the provided authorization token is valid and not expired.
     * @member SpeechTranslationConfigImpl.prototype.authorizationToken
     * @function
     * @public
     * @param {string} value - The authorization token.
     */
    set authorizationToken(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(value, "value");
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceAuthorization_Token, value);
    }
    /**
     * Gets/Sets the speech recognition language.
     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @param {string} value - The authorization token.
     */
    set speechRecognitionLanguage(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(value, "value");
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_RecoLanguage, value);
    }
    /**
     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey
     * @function
     * @public
     */
    get subscriptionKey() {
        return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Key]);
    }
    /**
     * Gets the output format
     * @member SpeechTranslationConfigImpl.prototype.outputFormat
     * @function
     * @public
     */
    get outputFormat() {
        return _Exports__WEBPACK_IMPORTED_MODULE_2__["OutputFormat"][this.privSpeechProperties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["OutputFormatPropertyName"], undefined)];
    }
    /**
     * Gets/Sets the output format
     * @member SpeechTranslationConfigImpl.prototype.outputFormat
     * @function
     * @public
     */
    set outputFormat(value) {
        this.privSpeechProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["OutputFormatPropertyName"], _Exports__WEBPACK_IMPORTED_MODULE_2__["OutputFormat"][value]);
    }
    /**
     * Gets the endpoint id.
     * @member SpeechTranslationConfigImpl.prototype.endpointId
     * @function
     * @public
     */
    get endpointId() {
        return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_EndpointId);
    }
    /**
     * Gets/Sets the endpoint id.
     * @member SpeechTranslationConfigImpl.prototype.endpointId
     * @function
     * @public
     */
    set endpointId(value) {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Endpoint, value);
    }
    /**
     * Add a (text) target language to translate into.
     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage
     * @function
     * @public
     * @param {string} value - The language such as de-DE
     */
    addTargetLanguage(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(value, "value");
        const languages = this.targetLanguages;
        languages.push(value);
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationToLanguages, languages.join(","));
    }
    /**
     * Gets the (text) target language to translate into.
     * @member SpeechTranslationConfigImpl.prototype.targetLanguages
     * @function
     * @public
     * @param {string} value - The language such as de-DE
     */
    get targetLanguages() {
        if (this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {
            return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationToLanguages).split(",");
        }
        else {
            return [];
        }
    }
    /**
     * Gets the voice name.
     * @member SpeechTranslationConfigImpl.prototype.voiceName
     * @function
     * @public
     */
    get voiceName() {
        return this.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationVoice]);
    }
    /**
     * Gets/Sets the voice of the translated language, enable voice synthesis output.
     * @member SpeechTranslationConfigImpl.prototype.voiceName
     * @function
     * @public
     * @param {string} value - The name of the voice.
     */
    set voiceName(value) {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(value, "value");
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationVoice, value);
    }
    /**
     * Provides the region.
     * @member SpeechTranslationConfigImpl.prototype.region
     * @function
     * @public
     * @returns {string} The region.
     */
    get region() {
        return this.privSpeechProperties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_Region);
    }
    setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_ProxyHostName], proxyHostName);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_ProxyPort], proxyPort);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_ProxyUserName], proxyUserName);
        this.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_ProxyPassword], proxyPassword);
    }
    /**
     * Gets an arbitrary property value.
     * @member SpeechTranslationConfigImpl.prototype.getProperty
     * @function
     * @public
     * @param {string} name - The name of the property.
     * @param {string} def - The default value of the property in case it is not set.
     * @returns {string} The value of the property.
     */
    getProperty(name, def) {
        return this.privSpeechProperties.getProperty(name, def);
    }
    /**
     * Gets/Sets an arbitrary property value.
     * @member SpeechTranslationConfigImpl.prototype.setProperty
     * @function
     * @public
     * @param {string} name - The name of the property.
     * @param {string} value - The value of the property.
     */
    setProperty(name, value) {
        this.privSpeechProperties.setProperty(name, value);
    }
    /**
     * Provides access to custom properties.
     * @member SpeechTranslationConfigImpl.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The properties.
     */
    get properties() {
        return this.privSpeechProperties;
    }
    /**
     * Dispose of associated resources.
     * @member SpeechTranslationConfigImpl.prototype.close
     * @function
     * @public
     */
    close() {
        return;
    }
    setServiceProperty(name, value, channel) {
        const currentProperties = JSON.parse(this.privSpeechProperties.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["ServicePropertiesPropertyName"], "{}"));
        currentProperties[name] = value;
        this.privSpeechProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["ServicePropertiesPropertyName"], JSON.stringify(currentProperties));
    }
    setProfanity(profanity) {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceResponse_ProfanityOption, _Exports__WEBPACK_IMPORTED_MODULE_2__["ProfanityOption"][profanity]);
    }
    enableAudioLogging() {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_EnableAudioLogging, "true");
    }
    requestWordLevelTimestamps() {
        this.privSpeechProperties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceResponse_RequestWordLevelTimestamps, "true");
    }
    enableDictation() {
        this.privSpeechProperties.setProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["ForceDictationPropertyName"], "true");
    }
}

//# sourceMappingURL=SpeechTranslationConfig.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionCanceledEventArgs.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionCanceledEventArgs.js ***!
  \*******************************************************************************************************************************/
/*! exports provided: TranslationRecognitionCanceledEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognitionCanceledEventArgs", function() { return TranslationRecognitionCanceledEventArgs; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Define payload of speech recognition canceled result events.
 * @class TranslationRecognitionCanceledEventArgs
 */
class TranslationRecognitionCanceledEventArgs {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} sessionid - The session id.
     * @param {CancellationReason} cancellationReason - The cancellation reason.
     * @param {string} errorDetails - Error details, if provided.
     * @param {TranslationRecognitionResult} result - The result.
     */
    constructor(sessionid, cancellationReason, errorDetails, errorCode, result) {
        this.privCancelReason = cancellationReason;
        this.privErrorDetails = errorDetails;
        this.privResult = result;
        this.privSessionId = sessionid;
        this.privErrorCode = errorCode;
    }
    /**
     * Specifies the recognition result.
     * @member TranslationRecognitionCanceledEventArgs.prototype.result
     * @function
     * @public
     * @returns {TranslationRecognitionResult} the recognition result.
     */
    get result() {
        return this.privResult;
    }
    /**
     * Specifies the session identifier.
     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId
     * @function
     * @public
     * @returns {string} the session identifier.
     */
    get sessionId() {
        return this.privSessionId;
    }
    /**
     * The reason the recognition was canceled.
     * @member TranslationRecognitionCanceledEventArgs.prototype.reason
     * @function
     * @public
     * @returns {CancellationReason} Specifies the reason canceled.
     */
    get reason() {
        return this.privCancelReason;
    }
    /**
     * The error code in case of an unsuccessful recognition.
     * Added in version 1.1.0.
     * @return An error code that represents the error reason.
     */
    get errorCode() {
        return this.privErrorCode;
    }
    /**
     * In case of an unsuccessful recognition, provides details of the occurred error.
     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails
     * @function
     * @public
     * @returns {string} A String that represents the error details.
     */
    get errorDetails() {
        return this.privErrorDetails;
    }
}

//# sourceMappingURL=TranslationRecognitionCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionEventArgs.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionEventArgs.js ***!
  \***********************************************************************************************************************/
/*! exports provided: TranslationRecognitionEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognitionEventArgs", function() { return TranslationRecognitionEventArgs; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Translation text result event arguments.
 * @class TranslationRecognitionEventArgs
 */
class TranslationRecognitionEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionEventArgs"] {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {TranslationRecognitionResult} result - The translation recognition result.
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    constructor(result, offset, sessionId) {
        super(offset, sessionId);
        this.privResult = result;
    }
    /**
     * Specifies the recognition result.
     * @member TranslationRecognitionEventArgs.prototype.result
     * @function
     * @public
     * @returns {TranslationRecognitionResult} the recognition result.
     */
    get result() {
        return this.privResult;
    }
}

//# sourceMappingURL=TranslationRecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionResult.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognitionResult.js ***!
  \********************************************************************************************************************/
/*! exports provided: TranslationRecognitionResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognitionResult", function() { return TranslationRecognitionResult; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Translation text result.
 * @class TranslationRecognitionResult
 */
class TranslationRecognitionResult extends _Exports__WEBPACK_IMPORTED_MODULE_0__["SpeechRecognitionResult"] {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {Translations} translations - The translations.
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {string} text - The recognized text.
     * @param {number} duration - The duration.
     * @param {number} offset - The offset into the stream.
     * @param {string} errorDetails - Error details, if provided.
     * @param {string} json - Additional Json, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     */
    constructor(translations, resultId, reason, text, duration, offset, errorDetails, json, properties) {
        super(resultId, reason, text, duration, offset, errorDetails, json, properties);
        this.privTranslations = translations;
    }
    /**
     * Presents the translation results. Each item in the dictionary represents
     * a translation result in one of target languages, where the key is the name
     * of the target language, in BCP-47 format, and the value is the translation
     * text in the specified language.
     * @member TranslationRecognitionResult.prototype.translations
     * @function
     * @public
     * @returns {Translations} the current translation map that holds all translations requested.
     */
    get translations() {
        return this.privTranslations;
    }
}

//# sourceMappingURL=TranslationRecognitionResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognizer.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationRecognizer.js ***!
  \*************************************************************************************************************/
/*! exports provided: TranslationRecognizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationRecognizer", function() { return TranslationRecognizer; });
/* harmony import */ var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");
/* harmony import */ var _Contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Contracts */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.



/**
 * Translation recognizer
 * @class TranslationRecognizer
 */
class TranslationRecognizer extends _Exports__WEBPACK_IMPORTED_MODULE_2__["Recognizer"] {
    /**
     * Initializes an instance of the TranslationRecognizer.
     * @constructor
     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.
     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer
     */
    constructor(speechConfig, audioConfig) {
        const configImpl = speechConfig;
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNull(configImpl, "speechConfig");
        super(audioConfig, configImpl.properties, new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["TranslationConnectionFactory"]());
        this.privDisposedTranslationRecognizer = false;
        this.privProperties = configImpl.properties.clone();
        if (this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationVoice), _Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationVoice]);
        }
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationToLanguages), _Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationToLanguages]);
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfNullOrWhitespace(this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_RecoLanguage), _Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"][_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_RecoLanguage]);
    }
    /**
     * Gets the language name that was set when the recognizer was created.
     * @member TranslationRecognizer.prototype.speechRecognitionLanguage
     * @function
     * @public
     * @returns {string} Gets the language name that was set when the recognizer was created.
     */
    get speechRecognitionLanguage() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedTranslationRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_RecoLanguage);
    }
    /**
     * Gets target languages for translation that were set when the recognizer was created.
     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.
     * @member TranslationRecognizer.prototype.targetLanguages
     * @function
     * @public
     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.
     */
    get targetLanguages() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedTranslationRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationToLanguages).split(",");
    }
    /**
     * Gets the name of output voice.
     * @member TranslationRecognizer.prototype.voiceName
     * @function
     * @public
     * @returns {string} the name of output voice.
     */
    get voiceName() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedTranslationRecognizer);
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceConnection_TranslationVoice, undefined);
    }
    /**
     * Gets the authorization token used to communicate with the service.
     * @member TranslationRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @returns {string} Authorization token.
     */
    get authorizationToken() {
        return this.properties.getProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceAuthorization_Token);
    }
    /**
     * Gets/Sets the authorization token used to communicate with the service.
     * @member TranslationRecognizer.prototype.authorizationToken
     * @function
     * @public
     * @param {string} value - Authorization token.
     */
    set authorizationToken(value) {
        this.properties.setProperty(_Exports__WEBPACK_IMPORTED_MODULE_2__["PropertyId"].SpeechServiceAuthorization_Token, value);
    }
    /**
     * The collection of properties and their values defined for this TranslationRecognizer.
     * @member TranslationRecognizer.prototype.properties
     * @function
     * @public
     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.
     */
    get properties() {
        return this.privProperties;
    }
    /**
     * Starts recognition and translation, and stops after the first utterance is recognized.
     * The task returns the translation text as result.
     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly
     *       for single shot recognition like command or query. For long-running recognition,
     *       use startContinuousRecognitionAsync() instead.
     * @member TranslationRecognizer.prototype.recognizeOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the result when the translation has completed.
     * @param err - Callback invoked in case of an error.
     */
    recognizeOnceAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedTranslationRecognizer);
            this.implRecognizerStop();
            this.implRecognizerStart(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionMode"].Conversation, (e) => {
                this.implRecognizerStop();
                if (!!cb) {
                    cb(e);
                }
            }, (e) => {
                this.implRecognizerStop();
                if (!!err) {
                    err(e);
                }
            });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    }
    /**
     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.
     * User must subscribe to events to receive translation results.
     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback that received the translation has started.
     * @param err - Callback invoked in case of an error.
     */
    startContinuousRecognitionAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedTranslationRecognizer);
            this.implRecognizerStop();
            this.implRecognizerStart(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognitionMode"].Conversation, undefined, undefined);
            // report result to promise.
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
                cb = undefined;
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    }
    /**
     * Stops continuous recognition and translation.
     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback that received the translation has stopped.
     * @param err - Callback invoked in case of an error.
     */
    stopContinuousRecognitionAsync(cb, err) {
        try {
            _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedTranslationRecognizer);
            this.implRecognizerStop();
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    const typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    }
    /**
     * closes all external resources held by an instance of this class.
     * @member TranslationRecognizer.prototype.close
     * @function
     * @public
     */
    close() {
        _Contracts__WEBPACK_IMPORTED_MODULE_1__["Contracts"].throwIfDisposed(this.privDisposedTranslationRecognizer);
        this.dispose(true);
    }
    dispose(disposing) {
        if (this.privDisposedTranslationRecognizer) {
            return;
        }
        if (disposing) {
            this.implRecognizerStop();
            this.privDisposedTranslationRecognizer = true;
            super.dispose(disposing);
        }
    }
    createRecognizerConfig(speechConfig) {
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["RecognizerConfig"](speechConfig, this.properties);
    }
    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {
        const configImpl = audioConfig;
        return new _common_speech_Exports__WEBPACK_IMPORTED_MODULE_0__["TranslationServiceRecognizer"](authentication, connectionFactory, configImpl, recognizerConfig, this);
    }
}

//# sourceMappingURL=TranslationRecognizer.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisEventArgs.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisEventArgs.js ***!
  \*********************************************************************************************************************/
/*! exports provided: TranslationSynthesisEventArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationSynthesisEventArgs", function() { return TranslationSynthesisEventArgs; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Translation Synthesis event arguments
 * @class TranslationSynthesisEventArgs
 */
class TranslationSynthesisEventArgs extends _Exports__WEBPACK_IMPORTED_MODULE_0__["SessionEventArgs"] {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {TranslationSynthesisResult} result - The translation synthesis result.
     * @param {string} sessionId - The session id.
     */
    constructor(result, sessionId) {
        super(sessionId);
        this.privResult = result;
    }
    /**
     * Specifies the translation synthesis result.
     * @member TranslationSynthesisEventArgs.prototype.result
     * @function
     * @public
     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.
     */
    get result() {
        return this.privResult;
    }
}

//# sourceMappingURL=TranslationSynthesisEventArgs.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisResult.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/TranslationSynthesisResult.js ***!
  \******************************************************************************************************************/
/*! exports provided: TranslationSynthesisResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationSynthesisResult", function() { return TranslationSynthesisResult; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * Defines translation synthesis result, i.e. the voice output of the translated
 * text in the target language.
 * @class TranslationSynthesisResult
 */
class TranslationSynthesisResult {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {ResultReason} reason - The synthesis reason.
     * @param {ArrayBuffer} audio - The audio data.
     */
    constructor(reason, audio) {
        this.privReason = reason;
        this.privAudio = audio;
    }
    /**
     * Translated text in the target language.
     * @member TranslationSynthesisResult.prototype.audio
     * @function
     * @public
     * @returns {ArrayBuffer} Translated audio in the target language.
     */
    get audio() {
        return this.privAudio;
    }
    /**
     * The synthesis status.
     * @member TranslationSynthesisResult.prototype.reason
     * @function
     * @public
     * @returns {ResultReason} The synthesis status.
     */
    get reason() {
        return this.privReason;
    }
}

//# sourceMappingURL=TranslationSynthesisResult.js.map


/***/ }),

/***/ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Translations.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Translations.js ***!
  \****************************************************************************************************/
/*! exports provided: Translations */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Translations", function() { return Translations; });
/* harmony import */ var _Exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Exports */ "./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Exports.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/**
 * Represents collection of parameters and their values.
 * @class Translation
 */
class Translations {
    constructor() {
        // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.
        this.privMap = new _Exports__WEBPACK_IMPORTED_MODULE_0__["PropertyCollection"]();
    }
    /**
     * Returns the parameter value in type String. The parameter must have the same type as String.
     * Currently only String, int and bool are allowed.
     * If the name is not available, the specified defaultValue is returned.
     * @member Translation.prototype.get
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} def - The default value which is returned if the parameter is not available in the collection.
     * @returns {string} value of the parameter.
     */
    get(key, def) {
        return this.privMap.getProperty(key, def);
    }
    /**
     * Sets the String value of the parameter specified by name.
     * @member Translation.prototype.set
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} value - The value of the parameter.
     */
    set(key, value) {
        this.privMap.setProperty(key, value);
    }
}

//# sourceMappingURL=Translations.js.map


/***/ }),

/***/ "./node_modules/p-defer/index.js":
/*!***************************************!*\
  !*** ./node_modules/p-defer/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const pDefer = () => {
	const deferred = {};

	deferred.promise = new Promise((resolve, reject) => {
		deferred.resolve = resolve;
		deferred.reject = reject;
	});

	return deferred;
};

module.exports = pDefer;


/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechSDK.js":
/*!************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechSDK.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _microsoftCognitiveservicesSpeech = __webpack_require__(/*! microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.js");

// We are only importing what we need.
var _default = {
  AudioConfig: _microsoftCognitiveservicesSpeech.AudioConfig,
  OutputFormat: _microsoftCognitiveservicesSpeech.OutputFormat,
  ResultReason: _microsoftCognitiveservicesSpeech.ResultReason,
  SpeechConfig: _microsoftCognitiveservicesSpeech.SpeechConfig,
  SpeechRecognizer: _microsoftCognitiveservicesSpeech.SpeechRecognizer
};
exports.default = _default;
//# sourceMappingURL=SpeechSDK.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "createSpeechRecognitionPonyfillFromRecognizer", {
  enumerable: true,
  get: function get() {
    return _createSpeechRecognitionPonyfill.createSpeechRecognitionPonyfillFromRecognizer;
  }
});
exports.default = void 0;

var _createSpeechRecognitionPonyfill = _interopRequireWildcard(__webpack_require__(/*! ./SpeechToText/createSpeechRecognitionPonyfill */ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.js"));

var _default = _createSpeechRecognitionPonyfill.default;
exports.default = _default;
//# sourceMappingURL=SpeechToText.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/SpeechGrammarList.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/SpeechGrammarList.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

/* eslint class-methods-use-this: "off" */
var _default =
/*#__PURE__*/
function () {
  function _default() {
    (0, _classCallCheck2.default)(this, _default);
    this._phrases = [];
  }

  (0, _createClass2.default)(_default, [{
    key: "addFromString",
    value: function addFromString() {
      throw new Error('JSGF is not supported');
    }
  }, {
    key: "phrases",
    get: function get() {
      return this._phrases;
    },
    set: function set(value) {
      if (Array.isArray(value)) {
        this._phrases = value;
      } else if (typeof value === 'string') {
        this._phrases = [value];
      } else {
        throw new Error("The provided value is not an array or of type 'string'");
      }
    }
  }]);
  return _default;
}();

exports.default = _default;
//# sourceMappingURL=SpeechGrammarList.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js ***!
  \***************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _arrayToMap = _interopRequireDefault(__webpack_require__(/*! ../../Util/arrayToMap */ "./node_modules/web-speech-cognitive-services/lib/Util/arrayToMap.js"));

var _SpeechSDK = _interopRequireDefault(__webpack_require__(/*! ../SpeechSDK */ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechSDK.js"));

var _SpeechSDK$ResultReas = _SpeechSDK.default.ResultReason,
    RecognizingSpeech = _SpeechSDK$ResultReas.RecognizingSpeech,
    RecognizedSpeech = _SpeechSDK$ResultReas.RecognizedSpeech;

function _default(result) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$maxAlternatives = _ref.maxAlternatives,
      maxAlternatives = _ref$maxAlternatives === void 0 ? Infinity : _ref$maxAlternatives,
      _ref$textNormalizatio = _ref.textNormalization,
      textNormalization = _ref$textNormalizatio === void 0 ? 'display' : _ref$textNormalizatio;

  if (result.reason === RecognizingSpeech || result.reason === RecognizedSpeech && !result.json.NBest) {
    var resultList = [{
      confidence: .5,
      transcript: result.text
    }];

    if (result.reason === RecognizedSpeech) {
      resultList.isFinal = true;
    }

    return resultList;
  } else if (result.reason === RecognizedSpeech) {
    var _resultList = (0, _arrayToMap.default)((result.json.NBest || []).slice(0, maxAlternatives).map(function (_ref2) {
      var confidence = _ref2.Confidence,
          display = _ref2.Display,
          itn = _ref2.ITN,
          lexical = _ref2.Lexical,
          maskedITN = _ref2.MaskedITN;
      return {
        confidence: confidence,
        transcript: textNormalization === 'itn' ? itn : textNormalization === 'lexical' ? lexical : textNormalization === 'maskeditn' ? maskedITN : display
      };
    }), {
      isFinal: true
    });

    return _resultList;
  }

  return [];
}
//# sourceMappingURL=cognitiveServiceEventResultToWebSpeechRecognitionResultList.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.js ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSpeechRecognitionPonyfillFromRecognizer = createSpeechRecognitionPonyfillFromRecognizer;
exports.default = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _eventTargetShim = __webpack_require__(/*! ../../external/event-target-shim */ "./node_modules/web-speech-cognitive-services/lib/external/event-target-shim.js");

var _cognitiveServiceEventResultToWebSpeechRecognitionResultList = _interopRequireDefault(__webpack_require__(/*! ./cognitiveServiceEventResultToWebSpeechRecognitionResultList */ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js"));

var _createPromiseQueue = _interopRequireDefault(__webpack_require__(/*! ../../Util/createPromiseQueue */ "./node_modules/web-speech-cognitive-services/lib/Util/createPromiseQueue.js"));

var _patchOptions2 = _interopRequireDefault(__webpack_require__(/*! ../patchOptions */ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/patchOptions.js"));

var _SpeechGrammarList = _interopRequireDefault(__webpack_require__(/*! ./SpeechGrammarList */ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechToText/SpeechGrammarList.js"));

var _SpeechSDK = _interopRequireDefault(__webpack_require__(/*! ../SpeechSDK */ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/SpeechSDK.js"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// https://docs.microsoft.com/en-us/javascript/api/microsoft-cognitiveservices-speech-sdk/speechconfig?view=azure-node-latest#outputformat
// {
//   "RecognitionStatus": "Success",
//   "Offset": 900000,
//   "Duration": 49000000,
//   "NBest": [
//     {
//       "Confidence": 0.738919,
//       "Lexical": "second",
//       "ITN": "second",
//       "MaskedITN": "second",
//       "Display": "Second."
//     }
//   ]
// }
// {
//   "RecognitionStatus": "InitialSilenceTimeout",
//   "Offset": 50000000,
//   "Duration": 0
// }
var AudioConfig = _SpeechSDK.default.AudioConfig,
    OutputFormat = _SpeechSDK.default.OutputFormat,
    ResultReason = _SpeechSDK.default.ResultReason,
    SpeechConfig = _SpeechSDK.default.SpeechConfig,
    SpeechRecognizer = _SpeechSDK.default.SpeechRecognizer;

function serializeRecognitionResult(_ref) {
  var duration = _ref.duration,
      errorDetails = _ref.errorDetails,
      json = _ref.json,
      offset = _ref.offset,
      properties = _ref.properties,
      reason = _ref.reason,
      resultId = _ref.resultId,
      text = _ref.text;
  return {
    duration: duration,
    errorDetails: errorDetails,
    json: JSON.parse(json),
    offset: offset,
    properties: properties,
    reason: reason,
    resultId: resultId,
    text: text
  };
}

function improviseAsync(fn, improviser) {
  return function () {
    return fn.apply(void 0, arguments).onSuccessContinueWith(function (result) {
      return improviser(result);
    });
  };
}

function averageAmplitude(arrayBuffer) {
  var array = new Int16Array(arrayBuffer);
  return [].reduce.call(array, function (averageAmplitude, amplitude) {
    return averageAmplitude + Math.abs(amplitude);
  }, 0) / array.length;
}

function cognitiveServicesAsyncToPromise(fn) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new Promise(function (resolve, reject) {
      return fn.apply(void 0, args.concat([resolve, reject]));
    });
  };
}

var SpeechRecognitionEvent = function SpeechRecognitionEvent(type) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      data = _ref2.data,
      emma = _ref2.emma,
      interpretation = _ref2.interpretation,
      resultIndex = _ref2.resultIndex,
      results = _ref2.results;

  (0, _classCallCheck2.default)(this, SpeechRecognitionEvent);
  this.data = data;
  this.emma = emma;
  this.interpretation = interpretation;
  this.resultIndex = resultIndex;
  this.results = results;
  this.type = type;
};

function prepareAudioConfig(audioConfig) {
  var originalAttach = audioConfig.attach;
  var firstChunk;
  var muted; // We modify "attach" function and detect when audible chunk is read.
  // We will only modify "attach" function once.

  audioConfig.attach = improviseAsync(originalAttach.bind(audioConfig), function (reader) {
    return _objectSpread({}, reader, {
      read: improviseAsync(reader.read.bind(reader), function (chunk) {
        // The magic number 150 is measured by:
        // 1. Set microphone volume to 0
        // 2. Observe the amplitude (100-110) for the first few chunks
        //    (There is a short static caught when turning on the microphone)
        // 3. Set the number a bit higher than the observation
        if (!firstChunk && averageAmplitude(chunk.buffer) > 150) {
          audioConfig.events.onEvent({
            name: 'FirstAudibleChunk'
          });
          firstChunk = true;
        }

        if (muted) {
          return {
            buffer: new ArrayBuffer(0),
            isEnd: true,
            timeReceived: Date.now()
          };
        }

        return chunk;
      })
    });
  });
  return {
    audioConfig: audioConfig,
    pause: function pause() {
      muted = true;
    },
    unprepare: function unprepare() {
      audioConfig.attach = originalAttach;
    }
  };
}

function createSpeechRecognitionPonyfillFromRecognizer(_ref3) {
  var createRecognizer = _ref3.createRecognizer,
      enableTelemetry = _ref3.enableTelemetry,
      looseEvents = _ref3.looseEvents,
      referenceGrammars = _ref3.referenceGrammars,
      textNormalization = _ref3.textNormalization;
  // If enableTelemetry is set to null or non-boolean, we will default to true.
  SpeechRecognizer.enableTelemetry(enableTelemetry !== false);

  var SpeechRecognition =
  /*#__PURE__*/
  function (_EventTarget) {
    (0, _inherits2.default)(SpeechRecognition, _EventTarget);

    function SpeechRecognition() {
      var _this;

      (0, _classCallCheck2.default)(this, SpeechRecognition);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SpeechRecognition).call(this));
      _this._continuous = false;
      _this._interimResults = false;
      _this._lang = typeof window !== 'undefined' ? window.document.documentElement.getAttribute('lang') || window.navigator.language : 'en-US';
      _this._grammars = new _SpeechGrammarList.default();
      _this._maxAlternatives = 1;
      return _this;
    }

    (0, _createClass2.default)(SpeechRecognition, [{
      key: "emitCognitiveServices",
      value: function emitCognitiveServices(type, event) {
        this.dispatchEvent(new SpeechRecognitionEvent('cognitiveservices', {
          data: _objectSpread({}, event, {
            type: type
          })
        }));
      }
    }, {
      key: "abort",
      value: function abort() {}
    }, {
      key: "start",
      value: function start() {
        var _this2 = this;

        this._startOnce().catch(function (err) {
          _this2.dispatchEvent(new ErrorEvent('error', {
            error: err,
            message: err && err.message
          }));
        });
      }
    }, {
      key: "_startOnce",
      value: function () {
        var _startOnce2 = (0, _asyncToGenerator2.default)(
        /*#__PURE__*/
        _regenerator.default.mark(function _callee() {
          var _this3 = this;

          var recognizer, _prepareAudioConfig, pause, unprepare, queue, soundStarted, speechStarted, stopping, _recognizer$audioConf, detachAudioConfigEvent, phrases, dynamicGrammar, audioStarted, finalEvent, finalizedResults, _loop, loop, _ret;

          return _regenerator.default.wrap(function _callee$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return createRecognizer(this.lang);

                case 2:
                  recognizer = _context2.sent;
                  _prepareAudioConfig = prepareAudioConfig(recognizer.audioConfig), pause = _prepareAudioConfig.pause, unprepare = _prepareAudioConfig.unprepare;
                  _context2.prev = 4;
                  queue = (0, _createPromiseQueue.default)();
                  _recognizer$audioConf = recognizer.audioConfig.events.attach(function (event) {
                    var name = event.name;

                    if (name === 'AudioSourceReadyEvent') {
                      queue.push({
                        audioSourceReady: {}
                      });
                    } else if (name === 'AudioSourceOffEvent') {
                      queue.push({
                        audioSourceOff: {}
                      });
                    } else if (name === 'FirstAudibleChunk') {
                      queue.push({
                        firstAudibleChunk: {}
                      });
                    }
                  }), detachAudioConfigEvent = _recognizer$audioConf.detach;

                  recognizer.canceled = function (_, _ref4) {
                    var errorDetails = _ref4.errorDetails,
                        offset = _ref4.offset,
                        reason = _ref4.reason,
                        sessionId = _ref4.sessionId;
                    queue.push({
                      canceled: {
                        errorDetails: errorDetails,
                        offset: offset,
                        reason: reason,
                        sessionId: sessionId
                      }
                    });
                  };

                  recognizer.recognized = function (_, _ref5) {
                    var offset = _ref5.offset,
                        result = _ref5.result,
                        sessionId = _ref5.sessionId;
                    queue.push({
                      recognized: {
                        offset: offset,
                        result: serializeRecognitionResult(result),
                        sessionId: sessionId
                      }
                    });
                  };

                  recognizer.recognizing = function (_, _ref6) {
                    var offset = _ref6.offset,
                        result = _ref6.result,
                        sessionId = _ref6.sessionId;
                    queue.push({
                      recognizing: {
                        offset: offset,
                        result: serializeRecognitionResult(result),
                        sessionId: sessionId
                      }
                    });
                  };

                  recognizer.sessionStarted = function (_, _ref7) {
                    var sessionId = _ref7.sessionId;
                    queue.push({
                      sessionStarted: {
                        sessionId: sessionId
                      }
                    });
                  };

                  recognizer.sessionStopped = function (_, _ref8) {
                    var sessionId = _ref8.sessionId;
                    // "sessionStopped" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.
                    queue.push({
                      sessionStopped: {
                        sessionId: sessionId
                      }
                    });
                  };

                  recognizer.speechStartDetected = function (_, _ref9) {
                    var offset = _ref9.offset,
                        sessionId = _ref9.sessionId;
                    queue.push({
                      speechStartDetected: {
                        offset: offset,
                        sessionId: sessionId
                      }
                    });
                  };

                  recognizer.speechEndDetected = function (_, _ref10) {
                    var sessionId = _ref10.sessionId;
                    // "speechEndDetected" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.
                    // Update: "speechEndDetected" is fired for DLSpeech.listenOnceAsync()
                    queue.push({
                      speechEndDetected: {
                        sessionId: sessionId
                      }
                    });
                  };

                  phrases = this.grammars.phrases; // HACK: We are using the internal of SpeechRecognizer because they did not expose it

                  dynamicGrammar = recognizer.privReco.dynamicGrammar;
                  referenceGrammars && referenceGrammars.length && dynamicGrammar.addReferenceGrammar(referenceGrammars);
                  phrases && phrases.length && dynamicGrammar.addPhrase(phrases);
                  _context2.next = 20;
                  return cognitiveServicesAsyncToPromise(recognizer.startContinuousRecognitionAsync.bind(recognizer))();

                case 20:
                  this.abort = function () {
                    return queue.push({
                      abort: {}
                    });
                  };

                  this.stop = function () {
                    return queue.push({
                      stop: {}
                    });
                  };

                  finalizedResults = [];
                  _loop =
                  /*#__PURE__*/
                  _regenerator.default.mark(function _loop(loop) {
                    var event, abort, audioSourceOff, audioSourceReady, canceled, firstAudibleChunk, recognized, recognizing, stop, errorMessage, result, recognizable;
                    return _regenerator.default.wrap(function _loop$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return queue.shift();

                          case 2:
                            event = _context.sent;
                            abort = event.abort, audioSourceOff = event.audioSourceOff, audioSourceReady = event.audioSourceReady, canceled = event.canceled, firstAudibleChunk = event.firstAudibleChunk, recognized = event.recognized, recognizing = event.recognizing, stop = event.stop; // We are emitting event "cognitiveservices" for debugging purpose.

                            Object.keys(event).forEach(function (name) {
                              return _this3.emitCognitiveServices(name, event[name]);
                            });
                            errorMessage = canceled && canceled.errorDetails;

                            if (!/Permission[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]denied/.test(errorMessage || '')) {
                              _context.next = 9;
                              break;
                            }

                            // If microphone is not allowed, we should not emit "start" event.
                            finalEvent = {
                              error: 'not-allowed',
                              type: 'error'
                            };
                            return _context.abrupt("return", "break");

                          case 9:
                            if (!loop) {
                              _this3.dispatchEvent(new SpeechRecognitionEvent('start'));
                            }

                            if (!errorMessage) {
                              _context.next = 15;
                              break;
                            }

                            if (/1006/.test(errorMessage)) {
                              if (!audioStarted) {
                                _this3.dispatchEvent(new SpeechRecognitionEvent('audiostart'));

                                _this3.dispatchEvent(new SpeechRecognitionEvent('audioend'));
                              }

                              finalEvent = {
                                error: 'network',
                                type: 'error'
                              };
                            } else {
                              finalEvent = {
                                error: 'unknown',
                                type: 'error'
                              };
                            }

                            return _context.abrupt("return", "break");

                          case 15:
                            if (!(abort || stop)) {
                              _context.next = 22;
                              break;
                            }

                            if (abort) {
                              finalEvent = {
                                error: 'aborted',
                                type: 'error'
                              }; // If we are aborting, we will ignore lingering recognizing/recognized events. But if we are stopping, we need them.

                              stopping = 'abort';
                            } else {
                              // When we pause, we will send { isEnd: true }, Speech Services will send us "recognized" event.
                              pause();
                              stopping = 'stop';
                            }

                            if (!abort) {
                              _context.next = 20;
                              break;
                            }

                            _context.next = 20;
                            return cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();

                          case 20:
                            _context.next = 61;
                            break;

                          case 22:
                            if (!audioSourceReady) {
                              _context.next = 27;
                              break;
                            }

                            _this3.dispatchEvent(new SpeechRecognitionEvent('audiostart'));

                            audioStarted = true;
                            _context.next = 61;
                            break;

                          case 27:
                            if (!firstAudibleChunk) {
                              _context.next = 32;
                              break;
                            }

                            _this3.dispatchEvent(new SpeechRecognitionEvent('soundstart'));

                            soundStarted = true;
                            _context.next = 61;
                            break;

                          case 32:
                            if (!audioSourceOff) {
                              _context.next = 40;
                              break;
                            }

                            // Looks like we don't need this line and all the tests are still working.
                            // Guessing probably stopping is already truthy.
                            // stopping = true;
                            speechStarted && _this3.dispatchEvent(new SpeechRecognitionEvent('speechend'));
                            soundStarted && _this3.dispatchEvent(new SpeechRecognitionEvent('soundend'));
                            audioStarted && _this3.dispatchEvent(new SpeechRecognitionEvent('audioend'));
                            audioStarted = soundStarted = speechStarted = false;
                            return _context.abrupt("return", "break");

                          case 40:
                            if (!(stopping !== 'abort')) {
                              _context.next = 61;
                              break;
                            }

                            if (!(recognized && recognized.result && recognized.result.reason === ResultReason.NoMatch)) {
                              _context.next = 45;
                              break;
                            }

                            finalEvent = {
                              error: 'no-speech',
                              type: 'error'
                            };
                            _context.next = 61;
                            break;

                          case 45:
                            if (!(recognized || recognizing)) {
                              _context.next = 61;
                              break;
                            }

                            if (!audioStarted) {
                              // Unconfirmed prevention of quirks
                              _this3.dispatchEvent(new SpeechRecognitionEvent('audiostart'));

                              audioStarted = true;
                            }

                            if (!soundStarted) {
                              _this3.dispatchEvent(new SpeechRecognitionEvent('soundstart'));

                              soundStarted = true;
                            }

                            if (!speechStarted) {
                              _this3.dispatchEvent(new SpeechRecognitionEvent('speechstart'));

                              speechStarted = true;
                            }

                            if (!recognized) {
                              _context.next = 60;
                              break;
                            }

                            result = (0, _cognitiveServiceEventResultToWebSpeechRecognitionResultList.default)(recognized.result, {
                              maxAlternatives: _this3.maxAlternatives,
                              textNormalization: textNormalization
                            });
                            recognizable = !!result[0].transcript;

                            if (recognizable) {
                              finalizedResults = [].concat((0, _toConsumableArray2.default)(finalizedResults), [result]);
                              _this3.continuous && _this3.dispatchEvent(new SpeechRecognitionEvent('result', {
                                results: finalizedResults
                              }));
                            } // If it is continuous, we just sent the finalized results. So we don't need to send it again after "audioend" event.


                            if (_this3.continuous && recognizable) {
                              finalEvent = null;
                            } else {
                              finalEvent = {
                                results: finalizedResults,
                                type: 'result'
                              };
                            }

                            if (_this3.continuous) {
                              _context.next = 57;
                              break;
                            }

                            _context.next = 57;
                            return cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();

                          case 57:
                            // If event order can be loosened, we can send the recognized event as soon as we receive it.
                            // 1. If it is not recognizable (no-speech), we should send an "error" event just before "end" event. We will not loosen "error" events.
                            if (looseEvents && finalEvent && recognizable) {
                              _this3.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));

                              finalEvent = null;
                            }

                            _context.next = 61;
                            break;

                          case 60:
                            if (recognizing) {
                              _this3.interimResults && _this3.dispatchEvent(new SpeechRecognitionEvent('result', {
                                results: [].concat((0, _toConsumableArray2.default)(finalizedResults), [(0, _cognitiveServiceEventResultToWebSpeechRecognitionResultList.default)(recognizing.result, {
                                  maxAlternatives: _this3.maxAlternatives,
                                  textNormalization: textNormalization
                                })])
                              }));
                            }

                          case 61:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _loop);
                  });
                  loop = 0;

                case 25:
                  if (!(!stopping || audioStarted)) {
                    _context2.next = 33;
                    break;
                  }

                  return _context2.delegateYield(_loop(loop), "t0", 27);

                case 27:
                  _ret = _context2.t0;

                  if (!(_ret === "break")) {
                    _context2.next = 30;
                    break;
                  }

                  return _context2.abrupt("break", 33);

                case 30:
                  loop++;
                  _context2.next = 25;
                  break;

                case 33:
                  if (speechStarted) {
                    this.dispatchEvent(new SpeechRecognitionEvent('speechend'));
                  }

                  if (soundStarted) {
                    this.dispatchEvent(new SpeechRecognitionEvent('soundend'));
                  }

                  if (audioStarted) {
                    this.dispatchEvent(new SpeechRecognitionEvent('audioend'));
                  }

                  if (finalEvent) {
                    if (finalEvent.type === 'result' && !finalEvent.results.length) {
                      finalEvent = {
                        error: 'no-speech',
                        type: 'error'
                      };
                    }

                    if (finalEvent.type === 'error') {
                      this.dispatchEvent(new ErrorEvent('error', finalEvent));
                    } else {
                      this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));
                    }
                  } // Even though there is no "start" event emitted, we will still emit "end" event
                  // This is mainly for "microphone blocked" story.


                  this.dispatchEvent(new SpeechRecognitionEvent('end'));
                  detachAudioConfigEvent();
                  _context2.next = 45;
                  break;

                case 41:
                  _context2.prev = 41;
                  _context2.t1 = _context2["catch"](4);
                  // Logging out the erorr because Speech SDK would fail silently.
                  console.error(_context2.t1);
                  throw _context2.t1;

                case 45:
                  _context2.prev = 45;
                  unprepare();
                  recognizer.dispose();
                  return _context2.finish(45);

                case 49:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee, this, [[4, 41, 45, 49]]);
        }));

        function _startOnce() {
          return _startOnce2.apply(this, arguments);
        }

        return _startOnce;
      }()
    }, {
      key: "stop",
      value: function stop() {}
    }, {
      key: "continuous",
      get: function get() {
        return this._continuous;
      },
      set: function set(value) {
        this._continuous = value;
      }
    }, {
      key: "grammars",
      get: function get() {
        return this._grammars;
      },
      set: function set(value) {
        if (value instanceof _SpeechGrammarList.default) {
          this._grammars = value;
        } else {
          throw new Error("The provided value is not of type 'SpeechGrammarList'");
        }
      }
    }, {
      key: "interimResults",
      get: function get() {
        return this._interimResults;
      },
      set: function set(value) {
        this._interimResults = value;
      }
    }, {
      key: "maxAlternatives",
      get: function get() {
        return this._maxAlternatives;
      },
      set: function set(value) {
        this._maxAlternatives = value;
      }
    }, {
      key: "lang",
      get: function get() {
        return this._lang;
      },
      set: function set(value) {
        this._lang = value;
      }
    }]);
    return SpeechRecognition;
  }(_eventTargetShim.EventTarget);

  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'audioend');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'audiostart');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'cognitiveservices');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'end');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'error');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'nomatch');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'result');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'soundend');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'soundstart');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'speechend');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'speechstart');
  (0, _eventTargetShim.defineEventAttribute)(SpeechRecognition.prototype, 'start');
  return {
    SpeechGrammarList: _SpeechGrammarList.default,
    SpeechRecognition: SpeechRecognition,
    SpeechRecognitionEvent: SpeechRecognitionEvent
  };
}

var _default = function _default(options) {
  var _patchOptions = (0, _patchOptions2.default)(options),
      _patchOptions$audioCo = _patchOptions.audioConfig,
      audioConfig = _patchOptions$audioCo === void 0 ? AudioConfig.fromDefaultMicrophoneInput() : _patchOptions$audioCo,
      _patchOptions$enableT = _patchOptions.enableTelemetry,
      enableTelemetry = _patchOptions$enableT === void 0 ? true : _patchOptions$enableT,
      fetchCredentials = _patchOptions.fetchCredentials,
      looseEvents = _patchOptions.looseEvents,
      referenceGrammars = _patchOptions.referenceGrammars,
      speechRecognitionEndpointId = _patchOptions.speechRecognitionEndpointId,
      _patchOptions$textNor = _patchOptions.textNormalization,
      textNormalization = _patchOptions$textNor === void 0 ? 'display' : _patchOptions$textNor;

  if (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia) {
    console.warn('web-speech-cognitive-services: This browser does not support WebRTC and it will not work with Cognitive Services Speech Services.');
    return {};
  }

  var createRecognizer =
  /*#__PURE__*/
  function () {
    var _ref11 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2(lang) {
      var _ref12, authorizationToken, region, subscriptionKey, speechConfig;

      return _regenerator.default.wrap(function _callee2$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return fetchCredentials();

            case 2:
              _ref12 = _context3.sent;
              authorizationToken = _ref12.authorizationToken;
              region = _ref12.region;
              subscriptionKey = _ref12.subscriptionKey;
              speechConfig = authorizationToken ? SpeechConfig.fromAuthorizationToken(authorizationToken, region) : SpeechConfig.fromSubscription(subscriptionKey, region);

              if (speechRecognitionEndpointId) {
                speechConfig.endpointId = speechRecognitionEndpointId;
              }

              speechConfig.outputFormat = OutputFormat.Detailed;
              speechConfig.speechRecognitionLanguage = lang || 'en-US';
              return _context3.abrupt("return", new SpeechRecognizer(speechConfig, audioConfig));

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee2);
    }));

    return function createRecognizer(_x) {
      return _ref11.apply(this, arguments);
    };
  }();

  return createSpeechRecognitionPonyfillFromRecognizer({
    audioConfig: audioConfig,
    createRecognizer: createRecognizer,
    enableTelemetry: enableTelemetry,
    looseEvents: looseEvents,
    referenceGrammars: referenceGrammars,
    textNormalization: textNormalization
  });
};

exports.default = _default;
//# sourceMappingURL=createSpeechRecognitionPonyfill.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/patchOptions.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/SpeechServices/patchOptions.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = patchOptions;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "./node_modules/@babel/runtime/helpers/objectWithoutProperties.js"));

var _resolveFunctionOrReturnValue = _interopRequireDefault(__webpack_require__(/*! ./resolveFunctionOrReturnValue */ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/resolveFunctionOrReturnValue.js"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var shouldWarnOnSubscriptionKey = true;

function patchOptions() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var authorizationToken = _ref.authorizationToken,
      credentials = _ref.credentials,
      looseEvent = _ref.looseEvent,
      looseEvents = _ref.looseEvents,
      _ref$region = _ref.region,
      region = _ref$region === void 0 ? 'westus' : _ref$region,
      subscriptionKey = _ref.subscriptionKey,
      otherOptions = (0, _objectWithoutProperties2.default)(_ref, ["authorizationToken", "credentials", "looseEvent", "looseEvents", "region", "subscriptionKey"]);

  if (typeof looseEvent !== 'undefined') {
    console.warn('web-speech-cognitive-services: The option "looseEvent" should be named as "looseEvents".');
    looseEvents = looseEvent;
  }

  if (!credentials) {
    if (!authorizationToken && !subscriptionKey) {
      throw new Error('web-speech-cognitive-services: Credentials must be specified.');
    } else {
      console.warn('web-speech-cognitive-services: We are deprecating authorizationToken, region, and subscriptionKey. Please use credentials instead. The deprecated option will be removed on or after 2020-11-14.');

      credentials =
      /*#__PURE__*/
      function () {
        var _ref2 = (0, _asyncToGenerator2.default)(
        /*#__PURE__*/
        _regenerator.default.mark(function _callee() {
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!authorizationToken) {
                    _context.next = 8;
                    break;
                  }

                  _context.next = 3;
                  return (0, _resolveFunctionOrReturnValue.default)(authorizationToken);

                case 3:
                  _context.t1 = _context.sent;
                  _context.t2 = region;
                  _context.t0 = {
                    authorizationToken: _context.t1,
                    region: _context.t2
                  };
                  _context.next = 13;
                  break;

                case 8:
                  _context.t3 = region;
                  _context.next = 11;
                  return (0, _resolveFunctionOrReturnValue.default)(subscriptionKey);

                case 11:
                  _context.t4 = _context.sent;
                  _context.t0 = {
                    region: _context.t3,
                    subscriptionKey: _context.t4
                  };

                case 13:
                  return _context.abrupt("return", _context.t0);

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function credentials() {
          return _ref2.apply(this, arguments);
        };
      }();
    }
  }

  return _objectSpread({}, otherOptions, {
    fetchCredentials: function () {
      var _fetchCredentials = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2() {
        var _ref3, authorizationToken, region, subscriptionKey;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _resolveFunctionOrReturnValue.default)(credentials);

              case 2:
                _ref3 = _context2.sent;
                authorizationToken = _ref3.authorizationToken;
                region = _ref3.region;
                subscriptionKey = _ref3.subscriptionKey;

                if (!(!authorizationToken && !subscriptionKey)) {
                  _context2.next = 8;
                  break;
                }

                throw new Error('web-speech-cognitive-services: Either authorization token and subscription key must be provided.');

              case 8:
                if (!authorizationToken) {
                  _context2.next = 13;
                  break;
                }

                if (!(typeof authorizationToken !== 'string')) {
                  _context2.next = 11;
                  break;
                }

                throw new Error('web-speech-cognitive-services: Authorization token must be a string.');

              case 11:
                _context2.next = 15;
                break;

              case 13:
                if (!(typeof subscriptionKey !== 'string')) {
                  _context2.next = 15;
                  break;
                }

                throw new Error('web-speech-cognitive-services: Subscription key must be a string.');

              case 15:
                if (shouldWarnOnSubscriptionKey && subscriptionKey) {
                  console.warn('web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.');
                  shouldWarnOnSubscriptionKey = false;
                }

                return _context2.abrupt("return", authorizationToken ? {
                  authorizationToken: authorizationToken,
                  region: region
                } : {
                  region: region,
                  subscriptionKey: subscriptionKey
                });

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function fetchCredentials() {
        return _fetchCredentials.apply(this, arguments);
      }

      return fetchCredentials;
    }(),
    looseEvents: looseEvents
  });
}
//# sourceMappingURL=patchOptions.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/SpeechServices/resolveFunctionOrReturnValue.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/SpeechServices/resolveFunctionOrReturnValue.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveFunctionOrReturnValue;

function resolveFunctionOrReturnValue(fnOrValue) {
  return typeof fnOrValue === 'function' ? fnOrValue() : fnOrValue;
}
//# sourceMappingURL=resolveFunctionOrReturnValue.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/Util/arrayToMap.js":
/*!***************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/Util/arrayToMap.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _default(array, extras) {
  var map = _objectSpread({}, [].reduce.call(array, function (map, value, index) {
    map[index] = value;
    return map;
  }, {}), {}, extras, (0, _defineProperty2.default)({
    length: array.length
  }, Symbol.iterator, function () {
    return [].slice.call(map)[Symbol.iterator]();
  }));

  return map;
}
//# sourceMappingURL=arrayToMap.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/Util/createDeferred.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/Util/createDeferred.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// The MIT License (MIT)
//
// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// This piece of code is adopted from https://github.com/sindresorhus/p-defer
// The reason why we need to fork it is because:
// - The original package published to NPM is not ES5-compliant
//    - Due to the use of arrow functions
// - create-react-app@1 does not play nice with packages that are not ES5-compliant
//    - create-react-app@2 do play nice, but it was so new that most of the people are still on @1
// Criteria to remove this package:
// - When create-react-app@2 become mainstream


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDeferred;

function createDeferred() {
  var ret = {};
  ret.promise = new Promise(function (resolve, reject) {
    ret.resolve = resolve;
    ret.reject = reject;
  });
  return ret;
}
//# sourceMappingURL=createDeferred.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/Util/createPromiseQueue.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/Util/createPromiseQueue.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _createDeferred = _interopRequireDefault(__webpack_require__(/*! ./createDeferred */ "./node_modules/web-speech-cognitive-services/lib/Util/createDeferred.js"));

function _default() {
  var shiftDeferred;
  var queue = [];

  var push = function push(value) {
    if (shiftDeferred) {
      var _shiftDeferred = shiftDeferred,
          resolve = _shiftDeferred.resolve;
      shiftDeferred = null;
      resolve(value);
    } else {
      queue.push(value);
    }
  };

  var shift = function shift() {
    if (queue.length) {
      return Promise.resolve(queue.shift());
    }

    return (shiftDeferred || (shiftDeferred = (0, _createDeferred.default)())).promise;
  };

  return {
    push: push,
    shift: shift
  };
}
//# sourceMappingURL=createPromiseQueue.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/lib/external/event-target-shim.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/lib/external/event-target-shim.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// This is adopted from event-target-shim@5.0.1 under MIT License.
// The source code is copied here because the original package do not support ES5 browsers.

/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * @typedef {object} PrivateData
 * @property {EventTarget} eventTarget The event target.
 * @property {{type:string}} event The original event object.
 * @property {number} eventPhase The current event phase.
 * @property {EventTarget|null} currentTarget The current event target.
 * @property {boolean} canceled The flag to prevent default.
 * @property {boolean} stopped The flag to stop propagation.
 * @property {boolean} immediateStopped The flag to stop propagation immediately.
 * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
 * @property {number} timeStamp The unix time.
 * @private
 */

/**
 * Private data for event wrappers.
 * @type {WeakMap<Event, PrivateData>}
 * @private
 */

var privateData = new WeakMap();
/**
 * Cache for wrapper classes.
 * @type {WeakMap<Object, Function>}
 * @private
 */

var wrappers = new WeakMap();
/**
 * Get private data.
 * @param {Event} event The event object to get private data.
 * @returns {PrivateData} The private data of the event.
 * @private
 */

function pd(event) {
  var retv = privateData.get(event);
  console.assert(retv != null, "'this' is expected an Event object, but got", event);
  return retv;
}
/**
 * https://dom.spec.whatwg.org/#set-the-canceled-flag
 * @param data {PrivateData} private data.
 */


function setCancelFlag(data) {
  if (data.passiveListener != null) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
    }

    return;
  }

  if (!data.event.cancelable) {
    return;
  }

  data.canceled = true;

  if (typeof data.event.preventDefault === "function") {
    data.event.preventDefault();
  }
}
/**
 * @see https://dom.spec.whatwg.org/#interface-event
 * @private
 */

/**
 * The event wrapper.
 * @constructor
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Event|{type:string}} event The original event to wrap.
 */


function Event(eventTarget, event) {
  privateData.set(this, {
    eventTarget: eventTarget,
    event: event,
    eventPhase: 2,
    currentTarget: eventTarget,
    canceled: false,
    stopped: false,
    immediateStopped: false,
    passiveListener: null,
    timeStamp: event.timeStamp || Date.now()
  }); // https://heycam.github.io/webidl/#Unforgeable

  Object.defineProperty(this, "isTrusted", {
    value: false,
    enumerable: true
  }); // Define accessors

  var keys = Object.keys(event);

  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];

    if (!(key in this)) {
      Object.defineProperty(this, key, defineRedirectDescriptor(key));
    }
  }
} // Should be enumerable, but class methods are not enumerable.


Event.prototype = {
  /**
   * The type of this event.
   * @type {string}
   */
  get type() {
    return pd(this).event.type;
  },

  /**
   * The target of this event.
   * @type {EventTarget}
   */
  get target() {
    return pd(this).eventTarget;
  },

  /**
   * The target of this event.
   * @type {EventTarget}
   */
  get currentTarget() {
    return pd(this).currentTarget;
  },

  /**
   * @returns {EventTarget[]} The composed path of this event.
   */
  composedPath: function composedPath() {
    var currentTarget = pd(this).currentTarget;

    if (currentTarget == null) {
      return [];
    }

    return [currentTarget];
  },

  /**
   * Constant of NONE.
   * @type {number}
   */
  get NONE() {
    return 0;
  },

  /**
   * Constant of CAPTURING_PHASE.
   * @type {number}
   */
  get CAPTURING_PHASE() {
    return 1;
  },

  /**
   * Constant of AT_TARGET.
   * @type {number}
   */
  get AT_TARGET() {
    return 2;
  },

  /**
   * Constant of BUBBLING_PHASE.
   * @type {number}
   */
  get BUBBLING_PHASE() {
    return 3;
  },

  /**
   * The target of this event.
   * @type {number}
   */
  get eventPhase() {
    return pd(this).eventPhase;
  },

  /**
   * Stop event bubbling.
   * @returns {void}
   */
  stopPropagation: function stopPropagation() {
    var data = pd(this);
    data.stopped = true;

    if (typeof data.event.stopPropagation === "function") {
      data.event.stopPropagation();
    }
  },

  /**
   * Stop event bubbling.
   * @returns {void}
   */
  stopImmediatePropagation: function stopImmediatePropagation() {
    var data = pd(this);
    data.stopped = true;
    data.immediateStopped = true;

    if (typeof data.event.stopImmediatePropagation === "function") {
      data.event.stopImmediatePropagation();
    }
  },

  /**
   * The flag to be bubbling.
   * @type {boolean}
   */
  get bubbles() {
    return Boolean(pd(this).event.bubbles);
  },

  /**
   * The flag to be cancelable.
   * @type {boolean}
   */
  get cancelable() {
    return Boolean(pd(this).event.cancelable);
  },

  /**
   * Cancel this event.
   * @returns {void}
   */
  preventDefault: function preventDefault() {
    setCancelFlag(pd(this));
  },

  /**
   * The flag to indicate cancellation state.
   * @type {boolean}
   */
  get defaultPrevented() {
    return pd(this).canceled;
  },

  /**
   * The flag to be composed.
   * @type {boolean}
   */
  get composed() {
    return Boolean(pd(this).event.composed);
  },

  /**
   * The unix time of this event.
   * @type {number}
   */
  get timeStamp() {
    return pd(this).timeStamp;
  },

  /**
   * The target of this event.
   * @type {EventTarget}
   * @deprecated
   */
  get srcElement() {
    return pd(this).eventTarget;
  },

  /**
   * The flag to stop event bubbling.
   * @type {boolean}
   * @deprecated
   */
  get cancelBubble() {
    return pd(this).stopped;
  },

  set cancelBubble(value) {
    if (!value) {
      return;
    }

    var data = pd(this);
    data.stopped = true;

    if (typeof data.event.cancelBubble === "boolean") {
      data.event.cancelBubble = true;
    }
  },

  /**
   * The flag to indicate cancellation state.
   * @type {boolean}
   * @deprecated
   */
  get returnValue() {
    return !pd(this).canceled;
  },

  set returnValue(value) {
    if (!value) {
      setCancelFlag(pd(this));
    }
  },

  /**
   * Initialize this event object. But do nothing under event dispatching.
   * @param {string} type The event type.
   * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
   * @param {boolean} [cancelable=false] The flag to be possible to cancel.
   * @deprecated
   */
  initEvent: function initEvent() {// Do nothing.
  }
}; // `constructor` is not enumerable.

Object.defineProperty(Event.prototype, "constructor", {
  value: Event,
  configurable: true,
  writable: true
}); // Ensure `event instanceof window.Event` is `true`.

if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
  Object.setPrototypeOf(Event.prototype, window.Event.prototype); // Make association for wrappers.

  wrappers.set(window.Event.prototype, Event);
}
/**
 * Get the property descriptor to redirect a given property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to redirect the property.
 * @private
 */


function defineRedirectDescriptor(key) {
  return {
    get: function get() {
      return pd(this).event[key];
    },
    set: function set(value) {
      pd(this).event[key] = value;
    },
    configurable: true,
    enumerable: true
  };
}
/**
 * Get the property descriptor to call a given method property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to call the method property.
 * @private
 */


function defineCallDescriptor(key) {
  return {
    value: function value() {
      var event = pd(this).event;
      return event[key].apply(event, arguments);
    },
    configurable: true,
    enumerable: true
  };
}
/**
 * Define new wrapper class.
 * @param {Function} BaseEvent The base wrapper class.
 * @param {Object} proto The prototype of the original event.
 * @returns {Function} The defined wrapper class.
 * @private
 */


function defineWrapper(BaseEvent, proto) {
  var keys = Object.keys(proto);

  if (keys.length === 0) {
    return BaseEvent;
  }
  /** CustomEvent */


  function CustomEvent(eventTarget, event) {
    BaseEvent.call(this, eventTarget, event);
  }

  CustomEvent.prototype = Object.create(BaseEvent.prototype, {
    constructor: {
      value: CustomEvent,
      configurable: true,
      writable: true
    }
  }); // Define accessors.

  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];

    if (!(key in BaseEvent.prototype)) {
      var descriptor = Object.getOwnPropertyDescriptor(proto, key);
      var isFunc = typeof descriptor.value === "function";
      Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
    }
  }

  return CustomEvent;
}
/**
 * Get the wrapper class of a given prototype.
 * @param {Object} proto The prototype of the original event to get its wrapper.
 * @returns {Function} The wrapper class.
 * @private
 */


function getWrapper(proto) {
  if (proto == null || proto === Object.prototype) {
    return Event;
  }

  var wrapper = wrappers.get(proto);

  if (wrapper == null) {
    wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
    wrappers.set(proto, wrapper);
  }

  return wrapper;
}
/**
 * Wrap a given event to management a dispatching.
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Object} event The event to wrap.
 * @returns {Event} The wrapper instance.
 * @private
 */


function wrapEvent(eventTarget, event) {
  var Wrapper = getWrapper(Object.getPrototypeOf(event));
  return new Wrapper(eventTarget, event);
}
/**
 * Get the immediateStopped flag of a given event.
 * @param {Event} event The event to get.
 * @returns {boolean} The flag to stop propagation immediately.
 * @private
 */


function isStopped(event) {
  return pd(event).immediateStopped;
}
/**
 * Set the current event phase of a given event.
 * @param {Event} event The event to set current target.
 * @param {number} eventPhase New event phase.
 * @returns {void}
 * @private
 */


function setEventPhase(event, eventPhase) {
  pd(event).eventPhase = eventPhase;
}
/**
 * Set the current target of a given event.
 * @param {Event} event The event to set current target.
 * @param {EventTarget|null} currentTarget New current target.
 * @returns {void}
 * @private
 */


function setCurrentTarget(event, currentTarget) {
  pd(event).currentTarget = currentTarget;
}
/**
 * Set a passive listener of a given event.
 * @param {Event} event The event to set current target.
 * @param {Function|null} passiveListener New passive listener.
 * @returns {void}
 * @private
 */


function setPassiveListener(event, passiveListener) {
  pd(event).passiveListener = passiveListener;
}
/**
 * @typedef {object} ListenerNode
 * @property {Function} listener
 * @property {1|2|3} listenerType
 * @property {boolean} passive
 * @property {boolean} once
 * @property {ListenerNode|null} next
 * @private
 */

/**
 * @type {WeakMap<object, Map<string, ListenerNode>>}
 * @private
 */


var listenersMap = new WeakMap(); // Listener types

var CAPTURE = 1;
var BUBBLE = 2;
var ATTRIBUTE = 3;
/**
 * Check whether a given value is an object or not.
 * @param {any} x The value to check.
 * @returns {boolean} `true` if the value is an object.
 */

function isObject(x) {
  return x !== null && (0, _typeof2.default)(x) === "object"; //eslint-disable-line no-restricted-syntax
}
/**
 * Get listeners.
 * @param {EventTarget} eventTarget The event target to get.
 * @returns {Map<string, ListenerNode>} The listeners.
 * @private
 */


function getListeners(eventTarget) {
  var listeners = listenersMap.get(eventTarget);

  if (listeners == null) {
    throw new TypeError("'this' is expected an EventTarget object, but got another value.");
  }

  return listeners;
}
/**
 * Get the property descriptor for the event attribute of a given event.
 * @param {string} eventName The event name to get property descriptor.
 * @returns {PropertyDescriptor} The property descriptor.
 * @private
 */


function defineEventAttributeDescriptor(eventName) {
  return {
    get: function get() {
      var listeners = getListeners(this);
      var node = listeners.get(eventName);

      while (node != null) {
        if (node.listenerType === ATTRIBUTE) {
          return node.listener;
        }

        node = node.next;
      }

      return null;
    },
    set: function set(listener) {
      if (typeof listener !== "function" && !isObject(listener)) {
        listener = null; // eslint-disable-line no-param-reassign
      }

      var listeners = getListeners(this); // Traverse to the tail while removing old value.

      var prev = null;
      var node = listeners.get(eventName);

      while (node != null) {
        if (node.listenerType === ATTRIBUTE) {
          // Remove old value.
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
        } else {
          prev = node;
        }

        node = node.next;
      } // Add new value.


      if (listener !== null) {
        var newNode = {
          listener: listener,
          listenerType: ATTRIBUTE,
          passive: false,
          once: false,
          next: null
        };

        if (prev === null) {
          listeners.set(eventName, newNode);
        } else {
          prev.next = newNode;
        }
      }
    },
    configurable: true,
    enumerable: true
  };
}
/**
 * Define an event attribute (e.g. `eventTarget.onclick`).
 * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
 * @param {string} eventName The event name to define.
 * @returns {void}
 */


function defineEventAttribute(eventTargetPrototype, eventName) {
  Object.defineProperty(eventTargetPrototype, "on".concat(eventName), defineEventAttributeDescriptor(eventName));
}
/**
 * Define a custom EventTarget with event attributes.
 * @param {string[]} eventNames Event names for event attributes.
 * @returns {EventTarget} The custom EventTarget.
 * @private
 */


function defineCustomEventTarget(eventNames) {
  /** CustomEventTarget */
  function CustomEventTarget() {
    EventTarget.call(this);
  }

  CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
    constructor: {
      value: CustomEventTarget,
      configurable: true,
      writable: true
    }
  });

  for (var i = 0; i < eventNames.length; ++i) {
    defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
  }

  return CustomEventTarget;
}
/**
 * EventTarget.
 *
 * - This is constructor if no arguments.
 * - This is a function which returns a CustomEventTarget constructor if there are arguments.
 *
 * For example:
 *
 *     class A extends EventTarget {}
 *     class B extends EventTarget("message") {}
 *     class C extends EventTarget("message", "error") {}
 *     class D extends EventTarget(["message", "error"]) {}
 */


function EventTarget() {
  /*eslint-disable consistent-return */
  if (this instanceof EventTarget) {
    listenersMap.set(this, new Map());
    return;
  }

  if (arguments.length === 1 && Array.isArray(arguments[0])) {
    return defineCustomEventTarget(arguments[0]);
  }

  if (arguments.length > 0) {
    var types = new Array(arguments.length);

    for (var i = 0; i < arguments.length; ++i) {
      types[i] = arguments[i];
    }

    return defineCustomEventTarget(types);
  }

  throw new TypeError("Cannot call a class as a function");
  /*eslint-enable consistent-return */
} // Should be enumerable, but class methods are not enumerable.


EventTarget.prototype = {
  /**
   * Add a given listener to this event target.
   * @param {string} eventName The event name to add.
   * @param {Function} listener The listener to add.
   * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
   * @returns {void}
   */
  addEventListener: function addEventListener(eventName, listener, options) {
    if (listener == null) {
      return;
    }

    if (typeof listener !== "function" && !isObject(listener)) {
      throw new TypeError("'listener' should be a function or an object.");
    }

    var listeners = getListeners(this);
    var optionsIsObj = isObject(options);
    var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
    var listenerType = capture ? CAPTURE : BUBBLE;
    var newNode = {
      listener: listener,
      listenerType: listenerType,
      passive: optionsIsObj && Boolean(options.passive),
      once: optionsIsObj && Boolean(options.once),
      next: null
    }; // Set it as the first node if the first node is null.

    var node = listeners.get(eventName);

    if (node === undefined) {
      listeners.set(eventName, newNode);
      return;
    } // Traverse to the tail while checking duplication..


    var prev = null;

    while (node != null) {
      if (node.listener === listener && node.listenerType === listenerType) {
        // Should ignore duplication.
        return;
      }

      prev = node;
      node = node.next;
    } // Add it.


    prev.next = newNode;
  },

  /**
   * Remove a given listener from this event target.
   * @param {string} eventName The event name to remove.
   * @param {Function} listener The listener to remove.
   * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
   * @returns {void}
   */
  removeEventListener: function removeEventListener(eventName, listener, options) {
    if (listener == null) {
      return;
    }

    var listeners = getListeners(this);
    var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
    var listenerType = capture ? CAPTURE : BUBBLE;
    var prev = null;
    var node = listeners.get(eventName);

    while (node != null) {
      if (node.listener === listener && node.listenerType === listenerType) {
        if (prev !== null) {
          prev.next = node.next;
        } else if (node.next !== null) {
          listeners.set(eventName, node.next);
        } else {
          listeners.delete(eventName);
        }

        return;
      }

      prev = node;
      node = node.next;
    }
  },

  /**
   * Dispatch a given event.
   * @param {Event|{type:string}} event The event to dispatch.
   * @returns {boolean} `false` if canceled.
   */
  dispatchEvent: function dispatchEvent(event) {
    if (event == null || typeof event.type !== "string") {
      throw new TypeError('"event.type" should be a string.');
    } // If listeners aren't registered, terminate.


    var listeners = getListeners(this);
    var eventName = event.type;
    var node = listeners.get(eventName);

    if (node == null) {
      return true;
    } // Since we cannot rewrite several properties, so wrap object.


    var wrappedEvent = wrapEvent(this, event); // This doesn't process capturing phase and bubbling phase.
    // This isn't participating in a tree.

    var prev = null;

    while (node != null) {
      // Remove this listener if it's once
      if (node.once) {
        if (prev !== null) {
          prev.next = node.next;
        } else if (node.next !== null) {
          listeners.set(eventName, node.next);
        } else {
          listeners.delete(eventName);
        }
      } else {
        prev = node;
      } // Call this listener


      setPassiveListener(wrappedEvent, node.passive ? node.listener : null);

      if (typeof node.listener === "function") {
        try {
          node.listener.call(this, wrappedEvent);
        } catch (err) {
          if (typeof console !== "undefined" && typeof console.error === "function") {
            console.error(err);
          }
        }
      } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
        node.listener.handleEvent(wrappedEvent);
      } // Break if `event.stopImmediatePropagation` was called.


      if (isStopped(wrappedEvent)) {
        break;
      }

      node = node.next;
    }

    setPassiveListener(wrappedEvent, null);
    setEventPhase(wrappedEvent, 0);
    setCurrentTarget(wrappedEvent, null);
    return !wrappedEvent.defaultPrevented;
  }
}; // `constructor` is not enumerable.

Object.defineProperty(EventTarget.prototype, "constructor", {
  value: EventTarget,
  configurable: true,
  writable: true
}); // Ensure `eventTarget instanceof window.EventTarget` is `true`.

if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
  Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
}

exports.defineEventAttribute = defineEventAttribute;
exports.EventTarget = EventTarget;
exports.default = EventTarget;
module.exports = EventTarget;
module.exports.EventTarget = module.exports["default"] = EventTarget;
module.exports.defineEventAttribute = defineEventAttribute;
//# sourceMappingURL=event-target-shim.js.map

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.js ***!
  \**************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var Exports_1 = __webpack_require__(/*! ./src/common.browser/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js");
var Exports_2 = __webpack_require__(/*! ./src/common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());
// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());
Exports_2.Events.instance.attachListener(new Exports_1.ConsoleLoggingListener());
// Speech SDK API
__export(__webpack_require__(/*! ./src/sdk/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js"));

//# sourceMappingURL=microsoft.cognitiveservices.speech.sdk.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener.js ***!
  \*****************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var ConsoleLoggingListener = /** @class */ (function () {
    function ConsoleLoggingListener(logLevelFilter) {
        var _this = this;
        if (logLevelFilter === void 0) { logLevelFilter = Exports_1.EventType.Warning; }
        this.onEvent = function (event) {
            if (event.eventType >= _this.privLogLevelFilter) {
                var log = _this.toString(event);
                switch (event.eventType) {
                    case Exports_1.EventType.Debug:
                        // tslint:disable-next-line:no-console
                        console.debug(log);
                        break;
                    case Exports_1.EventType.Info:
                        // tslint:disable-next-line:no-console
                        console.info(log);
                        break;
                    case Exports_1.EventType.Warning:
                        // tslint:disable-next-line:no-console
                        console.warn(log);
                        break;
                    case Exports_1.EventType.Error:
                        // tslint:disable-next-line:no-console
                        console.error(log);
                        break;
                    default:
                        // tslint:disable-next-line:no-console
                        console.log(log);
                        break;
                }
            }
        };
        this.toString = function (event) {
            var logFragments = [
                "" + event.EventTime,
                "" + event.Name,
            ];
            for (var prop in event) {
                if (prop && event.hasOwnProperty(prop) &&
                    prop !== "eventTime" && prop !== "eventType" &&
                    prop !== "eventId" && prop !== "name" &&
                    prop !== "constructor") {
                    var value = event[prop];
                    var valueToLog = "<NULL>";
                    if (value !== undefined && value !== null) {
                        if (typeof (value) === "number" || typeof (value) === "string") {
                            valueToLog = value.toString();
                        }
                        else {
                            valueToLog = JSON.stringify(value);
                        }
                    }
                    logFragments.push(prop + ": " + valueToLog);
                }
            }
            return logFragments.join(" | ");
        };
        this.privLogLevelFilter = logLevelFilter;
    }
    return ConsoleLoggingListener;
}());
exports.ConsoleLoggingListener = ConsoleLoggingListener;

//# sourceMappingURL=ConsoleLoggingListener.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./ConsoleLoggingListener */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ConsoleLoggingListener.js"));
__export(__webpack_require__(/*! ./MicAudioSource */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/MicAudioSource.js"));
__export(__webpack_require__(/*! ./FileAudioSource */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/FileAudioSource.js"));
__export(__webpack_require__(/*! ./PCMRecorder */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/PCMRecorder.js"));
__export(__webpack_require__(/*! ./WebsocketConnection */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/WebsocketConnection.js"));
__export(__webpack_require__(/*! ./WebsocketMessageAdapter */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/WebsocketMessageAdapter.js"));
__export(__webpack_require__(/*! ./ReplayableAudioNode */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ReplayableAudioNode.js"));
__export(__webpack_require__(/*! ./ProxyInfo */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ProxyInfo.js"));

//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/FileAudioSource.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/FileAudioSource.js ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var AudioStreamFormat_1 = __webpack_require__(/*! ../../src/sdk/Audio/AudioStreamFormat */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioStreamFormat.js");
var Exports_1 = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Exports_2 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var FileAudioSource = /** @class */ (function () {
    function FileAudioSource(file, audioSourceId) {
        var _this = this;
        this.privStreams = {};
        this.turnOn = function () {
            if (typeof FileReader === "undefined") {
                var errorMsg = "Browser does not support FileReader.";
                _this.onEvent(new Exports_2.AudioSourceErrorEvent(errorMsg, "")); // initialization error - no streamid at this point
                return Exports_2.PromiseHelper.fromError(errorMsg);
            }
            else if (_this.privFile.name.lastIndexOf(".wav") !== _this.privFile.name.length - 4) {
                var errorMsg = _this.privFile.name + " is not supported. Only WAVE files are allowed at the moment.";
                _this.onEvent(new Exports_2.AudioSourceErrorEvent(errorMsg, ""));
                return Exports_2.PromiseHelper.fromError(errorMsg);
            }
            else if (_this.privFile.size > FileAudioSource.MAX_SIZE) {
                var errorMsg = _this.privFile.name + " exceeds the maximum allowed file size (" + FileAudioSource.MAX_SIZE + ").";
                _this.onEvent(new Exports_2.AudioSourceErrorEvent(errorMsg, ""));
                return Exports_2.PromiseHelper.fromError(errorMsg);
            }
            _this.onEvent(new Exports_2.AudioSourceInitializingEvent(_this.privId)); // no stream id
            _this.onEvent(new Exports_2.AudioSourceReadyEvent(_this.privId));
            return Exports_2.PromiseHelper.fromResult(true);
        };
        this.id = function () {
            return _this.privId;
        };
        this.attach = function (audioNodeId) {
            _this.onEvent(new Exports_2.AudioStreamNodeAttachingEvent(_this.privId, audioNodeId));
            return _this.upload(audioNodeId).onSuccessContinueWith(function (streamReader) {
                _this.onEvent(new Exports_2.AudioStreamNodeAttachedEvent(_this.privId, audioNodeId));
                return {
                    detach: function () {
                        streamReader.close();
                        delete _this.privStreams[audioNodeId];
                        _this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(_this.privId, audioNodeId));
                        _this.turnOff();
                    },
                    id: function () {
                        return audioNodeId;
                    },
                    read: function () {
                        return streamReader.read();
                    },
                };
            });
        };
        this.detach = function (audioNodeId) {
            if (audioNodeId && _this.privStreams[audioNodeId]) {
                _this.privStreams[audioNodeId].close();
                delete _this.privStreams[audioNodeId];
                _this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(_this.privId, audioNodeId));
            }
        };
        this.turnOff = function () {
            for (var streamId in _this.privStreams) {
                if (streamId) {
                    var stream = _this.privStreams[streamId];
                    if (stream && !stream.isClosed) {
                        stream.close();
                    }
                }
            }
            _this.onEvent(new Exports_2.AudioSourceOffEvent(_this.privId)); // no stream now
            return Exports_2.PromiseHelper.fromResult(true);
        };
        this.upload = function (audioNodeId) {
            return _this.turnOn()
                .onSuccessContinueWith(function (_) {
                var stream = new Exports_2.Stream(audioNodeId);
                _this.privStreams[audioNodeId] = stream;
                var reader = new FileReader();
                var startOffset = 0;
                var endOffset = FileAudioSource.CHUNK_SIZE;
                var processNextChunk = function (event) {
                    if (stream.isClosed) {
                        return; // output stream was closed (somebody called TurnOff). We're done here.
                    }
                    stream.writeStreamChunk({
                        buffer: reader.result,
                        isEnd: false,
                        timeReceived: Date.now(),
                    });
                    if (endOffset < _this.privFile.size) {
                        startOffset = endOffset;
                        endOffset = Math.min(endOffset + FileAudioSource.CHUNK_SIZE, _this.privFile.size);
                        var chunk_1 = _this.privFile.slice(startOffset, endOffset);
                        reader.readAsArrayBuffer(chunk_1);
                    }
                    else {
                        // we've written the entire file to the output stream, can close it now.
                        stream.close();
                    }
                };
                reader.onload = processNextChunk;
                reader.onerror = function (event) {
                    var errorMsg = "Error occurred while processing '" + _this.privFile.name + "'. " + event;
                    _this.onEvent(new Exports_2.AudioStreamNodeErrorEvent(_this.privId, audioNodeId, errorMsg));
                    throw new Error(errorMsg);
                };
                var chunk = _this.privFile.slice(startOffset, endOffset);
                reader.readAsArrayBuffer(chunk);
                return stream.getReader();
            });
        };
        this.onEvent = function (event) {
            _this.privEvents.onEvent(event);
            Exports_2.Events.instance.onEvent(event);
        };
        this.privId = audioSourceId ? audioSourceId : Exports_2.createNoDashGuid();
        this.privEvents = new Exports_2.EventSource();
        this.privFile = file;
    }
    Object.defineProperty(FileAudioSource.prototype, "format", {
        get: function () {
            return FileAudioSource.FILEFORMAT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileAudioSource.prototype, "events", {
        get: function () {
            return this.privEvents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileAudioSource.prototype, "deviceInfo", {
        get: function () {
            return Exports_2.PromiseHelper.fromResult({
                bitspersample: FileAudioSource.FILEFORMAT.bitsPerSample,
                channelcount: FileAudioSource.FILEFORMAT.channels,
                connectivity: Exports_1.connectivity.Unknown,
                manufacturer: "Speech SDK",
                model: "File",
                samplerate: FileAudioSource.FILEFORMAT.samplesPerSec,
                type: Exports_1.type.File,
            });
        },
        enumerable: true,
        configurable: true
    });
    // Recommended sample rate (bytes/second).
    FileAudioSource.SAMPLE_RATE = 16000 * 2; // 16 kHz * 16 bits
    // We should stream audio at no faster than 2x real-time (i.e., send five chunks
    // per second, with the chunk size == sample rate in bytes per second * 2 / 5).
    FileAudioSource.CHUNK_SIZE = FileAudioSource.SAMPLE_RATE * 2 / 5;
    // 10 seconds of audio in bytes =
    // sample rate (bytes/second) * 600 (seconds) + 44 (size of the wave header).
    FileAudioSource.MAX_SIZE = FileAudioSource.SAMPLE_RATE * 600 + 44;
    FileAudioSource.FILEFORMAT = AudioStreamFormat_1.AudioStreamFormat.getWaveFormatPCM(16000, 16, 1);
    return FileAudioSource;
}());
exports.FileAudioSource = FileAudioSource;

//# sourceMappingURL=FileAudioSource.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/MicAudioSource.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/MicAudioSource.js ***!
  \*********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var AudioStreamFormat_1 = __webpack_require__(/*! ../../src/sdk/Audio/AudioStreamFormat */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioStreamFormat.js");
var Exports_1 = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Exports_2 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
exports.AudioWorkletSourceURLPropertyName = "MICROPHONE-WorkletSourceUrl";
var MicAudioSource = /** @class */ (function () {
    function MicAudioSource(privRecorder, outputChunkSize, audioSourceId, deviceId) {
        var _this = this;
        this.privRecorder = privRecorder;
        this.deviceId = deviceId;
        this.privStreams = {};
        this.turnOn = function () {
            if (_this.privInitializeDeferral) {
                return _this.privInitializeDeferral.promise();
            }
            _this.privInitializeDeferral = new Exports_2.Deferred();
            _this.createAudioContext();
            var nav = window.navigator;
            var getUserMedia = (nav.getUserMedia ||
                nav.webkitGetUserMedia ||
                nav.mozGetUserMedia ||
                nav.msGetUserMedia);
            if (!!nav.mediaDevices) {
                getUserMedia = function (constraints, successCallback, errorCallback) {
                    nav.mediaDevices
                        .getUserMedia(constraints)
                        .then(successCallback)
                        .catch(errorCallback);
                };
            }
            if (!getUserMedia) {
                var errorMsg = "Browser does not support getUserMedia.";
                _this.privInitializeDeferral.reject(errorMsg);
                _this.onEvent(new Exports_2.AudioSourceErrorEvent(errorMsg, "")); // mic initialized error - no streamid at this point
            }
            else {
                var next = function () {
                    _this.onEvent(new Exports_2.AudioSourceInitializingEvent(_this.privId)); // no stream id
                    getUserMedia({ audio: _this.deviceId ? { deviceId: _this.deviceId } : true, video: false }, function (mediaStream) {
                        _this.privMediaStream = mediaStream;
                        _this.onEvent(new Exports_2.AudioSourceReadyEvent(_this.privId));
                        _this.privInitializeDeferral.resolve(true);
                    }, function (error) {
                        var errorMsg = "Error occurred during microphone initialization: " + error;
                        var tmp = _this.privInitializeDeferral;
                        // HACK: this should be handled through onError callbacks of all promises up the stack.
                        // Unfortunately, the current implementation does not provide an easy way to reject promises
                        // without a lot of code replication.
                        // TODO: fix promise implementation, allow for a graceful reject chaining.
                        _this.privInitializeDeferral = null;
                        tmp.reject(errorMsg); // this will bubble up through the whole chain of promises,
                        // with each new level adding extra "Unhandled callback error" prefix to the error message.
                        // The following line is not guaranteed to be executed.
                        _this.onEvent(new Exports_2.AudioSourceErrorEvent(_this.privId, errorMsg));
                    });
                };
                if (_this.privContext.state === "suspended") {
                    // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.
                    // https://github.com/WebAudio/web-audio-api/issues/790
                    _this.privContext.resume().then(next, function (reason) {
                        _this.privInitializeDeferral.reject("Failed to initialize audio context: " + reason);
                    });
                }
                else {
                    next();
                }
            }
            return _this.privInitializeDeferral.promise();
        };
        this.id = function () {
            return _this.privId;
        };
        this.attach = function (audioNodeId) {
            _this.onEvent(new Exports_2.AudioStreamNodeAttachingEvent(_this.privId, audioNodeId));
            return _this.listen(audioNodeId).onSuccessContinueWith(function (streamReader) {
                _this.onEvent(new Exports_2.AudioStreamNodeAttachedEvent(_this.privId, audioNodeId));
                return {
                    detach: function () {
                        streamReader.close();
                        delete _this.privStreams[audioNodeId];
                        _this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(_this.privId, audioNodeId));
                        _this.turnOff();
                    },
                    id: function () {
                        return audioNodeId;
                    },
                    read: function () {
                        return streamReader.read();
                    },
                };
            });
        };
        this.detach = function (audioNodeId) {
            if (audioNodeId && _this.privStreams[audioNodeId]) {
                _this.privStreams[audioNodeId].close();
                delete _this.privStreams[audioNodeId];
                _this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(_this.privId, audioNodeId));
            }
        };
        this.turnOff = function () {
            for (var streamId in _this.privStreams) {
                if (streamId) {
                    var stream = _this.privStreams[streamId];
                    if (stream) {
                        stream.close();
                    }
                }
            }
            _this.onEvent(new Exports_2.AudioSourceOffEvent(_this.privId)); // no stream now
            _this.privInitializeDeferral = null;
            _this.destroyAudioContext();
            return Exports_2.PromiseHelper.fromResult(true);
        };
        this.listen = function (audioNodeId) {
            return _this.turnOn()
                .onSuccessContinueWith(function (_) {
                var stream = new Exports_2.ChunkedArrayBufferStream(_this.privOutputChunkSize, audioNodeId);
                _this.privStreams[audioNodeId] = stream;
                try {
                    _this.privRecorder.record(_this.privContext, _this.privMediaStream, stream);
                }
                catch (error) {
                    _this.onEvent(new Exports_2.AudioStreamNodeErrorEvent(_this.privId, audioNodeId, error));
                    throw error;
                }
                return stream.getReader();
            });
        };
        this.onEvent = function (event) {
            _this.privEvents.onEvent(event);
            Exports_2.Events.instance.onEvent(event);
        };
        this.createAudioContext = function () {
            if (!!_this.privContext) {
                return;
            }
            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext
            var AudioContext = (window.AudioContext)
                || (window.webkitAudioContext)
                || false;
            if (!AudioContext) {
                throw new Error("Browser does not support Web Audio API (AudioContext is not available).");
            }
            _this.privContext = new AudioContext();
        };
        this.destroyAudioContext = function () {
            if (!_this.privContext) {
                return;
            }
            _this.privRecorder.releaseMediaResources(_this.privContext);
            // This pattern brought to you by a bug in the TypeScript compiler where it
            // confuses the ("close" in this.privContext) with this.privContext always being null as the alternate.
            // https://github.com/Microsoft/TypeScript/issues/11498
            var hasClose = false;
            if ("close" in _this.privContext) {
                hasClose = true;
            }
            if (hasClose) {
                _this.privContext.close();
                _this.privContext = null;
            }
            else if (null !== _this.privContext && _this.privContext.state === "running") {
                // Suspend actually takes a callback, but analogous to the
                // resume method, it'll be only fired if suspend is called
                // in a direct response to a user action. The later is not always
                // the case, as TurnOff is also called, when we receive an
                // end-of-speech message from the service. So, doing a best effort
                // fire-and-forget here.
                _this.privContext.suspend();
            }
        };
        this.privOutputChunkSize = outputChunkSize;
        this.privId = audioSourceId ? audioSourceId : Exports_2.createNoDashGuid();
        this.privEvents = new Exports_2.EventSource();
    }
    Object.defineProperty(MicAudioSource.prototype, "format", {
        get: function () {
            return MicAudioSource.AUDIOFORMAT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MicAudioSource.prototype, "events", {
        get: function () {
            return this.privEvents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MicAudioSource.prototype, "deviceInfo", {
        get: function () {
            return this.getMicrophoneLabel().onSuccessContinueWith(function (label) {
                return {
                    bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,
                    channelcount: MicAudioSource.AUDIOFORMAT.channels,
                    connectivity: Exports_1.connectivity.Unknown,
                    manufacturer: "Speech SDK",
                    model: label,
                    samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,
                    type: Exports_1.type.Microphones,
                };
            });
        },
        enumerable: true,
        configurable: true
    });
    MicAudioSource.prototype.setProperty = function (name, value) {
        if (name === exports.AudioWorkletSourceURLPropertyName) {
            this.privRecorder.setWorkletUrl(value);
        }
        else {
            throw new Error("Property '" + name + "' is not supported on Microphone.");
        }
    };
    MicAudioSource.prototype.getMicrophoneLabel = function () {
        var _this = this;
        var defaultMicrophoneName = "microphone";
        // If we did this already, return the value.
        if (this.privMicrophoneLabel !== undefined) {
            return Exports_2.PromiseHelper.fromResult(this.privMicrophoneLabel);
        }
        // If the stream isn't currently running, we can't query devices because security.
        if (this.privMediaStream === undefined || !this.privMediaStream.active) {
            return Exports_2.PromiseHelper.fromResult(defaultMicrophoneName);
        }
        // Setup a default
        this.privMicrophoneLabel = defaultMicrophoneName;
        // Get the id of the device running the audio track.
        var microphoneDeviceId = this.privMediaStream.getTracks()[0].getSettings().deviceId;
        // If the browser doesn't support getting the device ID, set a default and return.
        if (undefined === microphoneDeviceId) {
            return Exports_2.PromiseHelper.fromResult(this.privMicrophoneLabel);
        }
        var deferred = new Exports_2.Deferred();
        // Enumerate the media devices.
        navigator.mediaDevices.enumerateDevices().then(function (devices) {
            for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) {
                var device = devices_1[_i];
                if (device.deviceId === microphoneDeviceId) {
                    // Found the device
                    _this.privMicrophoneLabel = device.label;
                    break;
                }
            }
            deferred.resolve(_this.privMicrophoneLabel);
        }, function () { return deferred.resolve(_this.privMicrophoneLabel); });
        return deferred.promise();
    };
    MicAudioSource.AUDIOFORMAT = AudioStreamFormat_1.AudioStreamFormat.getDefaultInputFormat();
    return MicAudioSource;
}());
exports.MicAudioSource = MicAudioSource;

//# sourceMappingURL=MicAudioSource.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/PCMRecorder.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/PCMRecorder.js ***!
  \******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var PcmRecorder = /** @class */ (function () {
    function PcmRecorder() {
        var _this = this;
        this.record = function (context, mediaStream, outputStream) {
            var desiredSampleRate = 16000;
            var scriptNode = (function () {
                var bufferSize = 0;
                try {
                    return context.createScriptProcessor(bufferSize, 1, 1);
                }
                catch (error) {
                    // Webkit (<= version 31) requires a valid bufferSize.
                    bufferSize = 2048;
                    var audioSampleRate = context.sampleRate;
                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {
                        bufferSize <<= 1;
                        audioSampleRate >>= 1;
                    }
                    return context.createScriptProcessor(bufferSize, 1, 1);
                }
            })();
            var waveStreamEncoder = new Exports_1.RiffPcmEncoder(context.sampleRate, desiredSampleRate);
            var needHeader = true;
            var that = _this;
            scriptNode.onaudioprocess = function (event) {
                var inputFrame = event.inputBuffer.getChannelData(0);
                if (outputStream && !outputStream.isClosed) {
                    var waveFrame = waveStreamEncoder.encode(needHeader, inputFrame);
                    if (!!waveFrame) {
                        outputStream.writeStreamChunk({
                            buffer: waveFrame,
                            isEnd: false,
                            timeReceived: Date.now(),
                        });
                        needHeader = false;
                    }
                }
            };
            var micInput = context.createMediaStreamSource(mediaStream);
            // https://webaudio.github.io/web-audio-api/#audioworklet
            // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread
            if (!!_this.privSpeechProcessorScript && !!context.audioWorklet) {
                context.audioWorklet
                    .addModule(_this.privSpeechProcessorScript)
                    .then(function () {
                    var workletNode = new AudioWorkletNode(context, "speech-processor");
                    workletNode.port.onmessage = function (ev) {
                        var inputFrame = ev.data;
                        if (outputStream && !outputStream.isClosed) {
                            var waveFrame = waveStreamEncoder.encode(needHeader, inputFrame);
                            if (!!waveFrame) {
                                outputStream.writeStreamChunk({
                                    buffer: waveFrame,
                                    isEnd: false,
                                    timeReceived: Date.now(),
                                });
                                needHeader = false;
                            }
                        }
                    };
                    micInput.connect(workletNode);
                    workletNode.connect(context.destination);
                    _this.privMediaResources = {
                        scriptProcessorNode: workletNode,
                        source: micInput,
                        stream: mediaStream,
                    };
                })
                    .catch(function () {
                    micInput.connect(scriptNode);
                    scriptNode.connect(context.destination);
                    _this.privMediaResources = {
                        scriptProcessorNode: scriptNode,
                        source: micInput,
                        stream: mediaStream,
                    };
                });
            }
            else {
                micInput.connect(scriptNode);
                scriptNode.connect(context.destination);
                _this.privMediaResources = {
                    scriptProcessorNode: scriptNode,
                    source: micInput,
                    stream: mediaStream,
                };
            }
        };
        this.releaseMediaResources = function (context) {
            if (_this.privMediaResources) {
                if (_this.privMediaResources.scriptProcessorNode) {
                    _this.privMediaResources.scriptProcessorNode.disconnect(context.destination);
                    _this.privMediaResources.scriptProcessorNode = null;
                }
                if (_this.privMediaResources.source) {
                    _this.privMediaResources.source.disconnect();
                    _this.privMediaResources.stream.getTracks().forEach(function (track) { return track.stop(); });
                    _this.privMediaResources.source = null;
                }
            }
        };
    }
    PcmRecorder.prototype.setWorkletUrl = function (url) {
        this.privSpeechProcessorScript = url;
    };
    return PcmRecorder;
}());
exports.PcmRecorder = PcmRecorder;

//# sourceMappingURL=PCMRecorder.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ProxyInfo.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ProxyInfo.js ***!
  \****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var ProxyInfo = /** @class */ (function () {
    function ProxyInfo(proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.privProxyHostName = proxyHostName;
        this.privProxyPort = proxyPort;
        this.privProxyUserName = proxyUserName;
        this.privProxyPassword = proxyPassword;
    }
    ProxyInfo.fromRecognizerConfig = function (config) {
        return new ProxyInfo(config.parameters.getProperty(Exports_1.PropertyId.SpeechServiceConnection_ProxyHostName), parseInt(config.parameters.getProperty(Exports_1.PropertyId.SpeechServiceConnection_ProxyPort), 10), config.parameters.getProperty(Exports_1.PropertyId.SpeechServiceConnection_ProxyUserName), config.parameters.getProperty(Exports_1.PropertyId.SpeechServiceConnection_ProxyPassword));
    };
    Object.defineProperty(ProxyInfo.prototype, "HostName", {
        get: function () {
            return this.privProxyHostName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProxyInfo.prototype, "Port", {
        get: function () {
            return this.privProxyPort;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProxyInfo.prototype, "UserName", {
        get: function () {
            return this.privProxyUserName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProxyInfo.prototype, "Password", {
        get: function () {
            return this.privProxyPassword;
        },
        enumerable: true,
        configurable: true
    });
    return ProxyInfo;
}());
exports.ProxyInfo = ProxyInfo;

//# sourceMappingURL=ProxyInfo.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ReplayableAudioNode.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/ReplayableAudioNode.js ***!
  \**************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var ReplayableAudioNode = /** @class */ (function () {
    function ReplayableAudioNode(audioSource, format) {
        var _this = this;
        this.privBuffers = [];
        this.privReplayOffset = 0;
        this.privLastShrinkOffset = 0;
        this.privBufferStartOffset = 0;
        this.privBufferSerial = 0;
        this.privBufferedBytes = 0;
        this.privReplay = false;
        this.privLastChunkAcquiredTime = 0;
        this.id = function () {
            return _this.privAudioNode.id();
        };
        this.privAudioNode = audioSource;
        this.privFormat = format;
    }
    // Reads and returns the next chunk of audio buffer.
    // If replay of existing buffers are needed, read() will first seek and replay
    // existing content, and upoin completion it will read new content from the underlying
    // audio node, saving that content into the replayable buffers.
    ReplayableAudioNode.prototype.read = function () {
        var _this = this;
        // if there is a replay request to honor.
        if (!!this.privReplay && this.privBuffers.length !== 0) {
            // Find the start point in the buffers.
            // Offsets are in 100ns increments.
            // So how many bytes do we need to seek to get the right offset?
            var offsetToSeek = this.privReplayOffset - this.privBufferStartOffset;
            var bytesToSeek = Math.round(offsetToSeek * this.privFormat.avgBytesPerSec * 1e-7);
            if (0 !== (bytesToSeek % 2)) {
                bytesToSeek++;
            }
            var i = 0;
            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {
                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;
            }
            var retVal = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);
            this.privReplayOffset += (retVal.byteLength / this.privFormat.avgBytesPerSec) * 1e+7;
            // If we've reached the end of the buffers, stop replaying.
            if (i === this.privBuffers.length - 1) {
                this.privReplay = false;
            }
            return Exports_1.PromiseHelper.fromResult({
                buffer: retVal,
                isEnd: false,
                timeReceived: this.privBuffers[i].chunk.timeReceived,
            });
        }
        return this.privAudioNode.read()
            .onSuccessContinueWith(function (result) {
            if (result.buffer) {
                _this.privBuffers.push(new BufferEntry(result, _this.privBufferSerial++, _this.privBufferedBytes));
                _this.privBufferedBytes += result.buffer.byteLength;
            }
            return result;
        });
    };
    ReplayableAudioNode.prototype.detach = function () {
        this.privAudioNode.detach();
        this.privBuffers = undefined;
    };
    ReplayableAudioNode.prototype.replay = function () {
        if (0 !== this.privBuffers.length) {
            this.privReplay = true;
            this.privReplayOffset = this.privLastShrinkOffset;
        }
    };
    // Shrinks the existing audio buffers to start at the new offset, or at the
    // beginning of the buffer closest to the requested offset.
    // A replay request will start from the last shrink point.
    ReplayableAudioNode.prototype.shrinkBuffers = function (offset) {
        this.privLastShrinkOffset = offset;
        // Find the start point in the buffers.
        // Offsets are in 100ns increments.
        // So how many bytes do we need to seek to get the right offset?
        var offsetToSeek = offset - this.privBufferStartOffset;
        var bytesToSeek = Math.round(offsetToSeek * this.privFormat.avgBytesPerSec * 1e-7);
        var i = 0;
        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {
            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;
        }
        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privFormat.avgBytesPerSec) * 1e+7));
        this.privBuffers = this.privBuffers.slice(i);
    };
    // Finds the time a buffer of audio was first seen by offset.
    ReplayableAudioNode.prototype.findTimeAtOffset = function (offset) {
        if (offset < this.privBufferStartOffset) {
            return 0;
        }
        for (var _i = 0, _a = this.privBuffers; _i < _a.length; _i++) {
            var value = _a[_i];
            var startOffset = (value.byteOffset / this.privFormat.avgBytesPerSec) * 1e7;
            var endOffset = startOffset + ((value.chunk.buffer.byteLength / this.privFormat.avgBytesPerSec) * 1e7);
            if (offset >= startOffset && offset <= endOffset) {
                return value.chunk.timeReceived;
            }
        }
        return 0;
    };
    return ReplayableAudioNode;
}());
exports.ReplayableAudioNode = ReplayableAudioNode;
// Primary use of this class is to help debugging problems with the replay
// code. If the memory cost of alloc / dealloc gets too much, drop it and just use
// the ArrayBuffer directly.
// tslint:disable-next-line:max-classes-per-file
var BufferEntry = /** @class */ (function () {
    function BufferEntry(chunk, serial, byteOffset) {
        this.chunk = chunk;
        this.serial = serial;
        this.byteOffset = byteOffset;
    }
    return BufferEntry;
}());

//# sourceMappingURL=ReplayableAudioNode.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/WebsocketConnection.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/WebsocketConnection.js ***!
  \**************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var WebsocketMessageAdapter_1 = __webpack_require__(/*! ./WebsocketMessageAdapter */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/WebsocketMessageAdapter.js");
var WebsocketConnection = /** @class */ (function () {
    function WebsocketConnection(uri, queryParameters, headers, messageFormatter, proxyInfo, connectionId) {
        var _this = this;
        this.privIsDisposed = false;
        this.dispose = function () {
            _this.privIsDisposed = true;
            if (_this.privConnectionMessageAdapter) {
                _this.privConnectionMessageAdapter.close();
            }
        };
        this.isDisposed = function () {
            return _this.privIsDisposed;
        };
        this.state = function () {
            return _this.privConnectionMessageAdapter.state;
        };
        this.open = function () {
            return _this.privConnectionMessageAdapter.open();
        };
        this.send = function (message) {
            return _this.privConnectionMessageAdapter.send(message);
        };
        this.read = function () {
            return _this.privConnectionMessageAdapter.read();
        };
        if (!uri) {
            throw new Exports_1.ArgumentNullError("uri");
        }
        if (!messageFormatter) {
            throw new Exports_1.ArgumentNullError("messageFormatter");
        }
        this.privMessageFormatter = messageFormatter;
        var queryParams = "";
        var i = 0;
        if (queryParameters) {
            for (var paramName in queryParameters) {
                if (paramName) {
                    queryParams += ((i === 0) && (uri.indexOf("?") === -1)) ? "?" : "&";
                    var val = encodeURIComponent(queryParameters[paramName]);
                    queryParams += paramName + "=" + val;
                    i++;
                }
            }
        }
        if (headers) {
            for (var headerName in headers) {
                if (headerName) {
                    queryParams += i === 0 ? "?" : "&";
                    var val = encodeURIComponent(headers[headerName]);
                    queryParams += headerName + "=" + val;
                    i++;
                }
            }
        }
        this.privUri = uri + queryParams;
        this.privId = connectionId ? connectionId : Exports_1.createNoDashGuid();
        this.privConnectionMessageAdapter = new WebsocketMessageAdapter_1.WebsocketMessageAdapter(this.privUri, this.id, this.privMessageFormatter, proxyInfo);
    }
    Object.defineProperty(WebsocketConnection.prototype, "id", {
        get: function () {
            return this.privId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebsocketConnection.prototype, "events", {
        get: function () {
            return this.privConnectionMessageAdapter.events;
        },
        enumerable: true,
        configurable: true
    });
    return WebsocketConnection;
}());
exports.WebsocketConnection = WebsocketConnection;

//# sourceMappingURL=WebsocketConnection.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/WebsocketMessageAdapter.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/WebsocketMessageAdapter.js ***!
  \******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var HttpsProxyAgent = __webpack_require__(/*! https-proxy-agent */ 3);
var ws = __webpack_require__(/*! ws */ 4);
var ocsp = __webpack_require__(/*! ../../external/ocsp/ocsp */ 5);
var WebsocketMessageAdapter = /** @class */ (function () {
    function WebsocketMessageAdapter(uri, connectionId, messageFormatter, proxyInfo) {
        var _this = this;
        this.open = function () {
            if (_this.privConnectionState === Exports_1.ConnectionState.Disconnected) {
                return Exports_1.PromiseHelper.fromError("Cannot open a connection that is in " + _this.privConnectionState + " state");
            }
            if (_this.privConnectionEstablishDeferral) {
                return _this.privConnectionEstablishDeferral.promise();
            }
            _this.privConnectionEstablishDeferral = new Exports_1.Deferred();
            _this.privCertificateValidatedDeferral = new Exports_1.Deferred();
            _this.privConnectionState = Exports_1.ConnectionState.Connecting;
            try {
                if (typeof WebSocket !== "undefined" && !WebsocketMessageAdapter.forceNpmWebSocket) {
                    // Browser handles cert checks.
                    _this.privCertificateValidatedDeferral.resolve(true);
                    _this.privWebsocketClient = new WebSocket(_this.privUri);
                }
                else {
                    if (_this.proxyInfo !== undefined &&
                        _this.proxyInfo.HostName !== undefined &&
                        _this.proxyInfo.Port > 0) {
                        var httpProxyOptions = {
                            host: _this.proxyInfo.HostName,
                            port: _this.proxyInfo.Port,
                        };
                        if (undefined !== _this.proxyInfo.UserName) {
                            httpProxyOptions.headers = {
                                "Proxy-Authentication": "Basic " + new Buffer(_this.proxyInfo.UserName + ":" + (_this.proxyInfo.Password === undefined) ? "" : _this.proxyInfo.Password).toString("base64"),
                                "requestOCSP": "true",
                            };
                        }
                        var httpProxyAgent = new HttpsProxyAgent(httpProxyOptions);
                        var httpsOptions_1 = { agent: httpProxyAgent };
                        _this.privWebsocketClient = new ws(_this.privUri, httpsOptions_1);
                        // Register to be notified when WebSocket upgrade happens so we can check the validity of the
                        // Certificate.
                        _this.privWebsocketClient.addListener("upgrade", function (e) {
                            var tlsSocket = e.socket;
                            var peer = tlsSocket.getPeerCertificate(true);
                            // Cork the socket until we know if the cert is good.
                            tlsSocket.cork();
                            ocsp.check({
                                cert: peer.raw,
                                httpOptions: httpsOptions_1,
                                issuer: peer.issuerCertificate.raw,
                            }, function (error, res) {
                                if (error) {
                                    _this.privCertificateValidatedDeferral.reject(error.message);
                                    tlsSocket.destroy(error);
                                }
                                else {
                                    _this.privCertificateValidatedDeferral.resolve(true);
                                    tlsSocket.uncork();
                                }
                            });
                        });
                    }
                    else {
                        // The ocsp library will handle validation for us and fail the connection if needed.
                        _this.privCertificateValidatedDeferral.resolve(true);
                        var ocspAgent = new ocsp.Agent({});
                        var options = { agent: ocspAgent };
                        _this.privWebsocketClient = new ws(_this.privUri, options);
                    }
                }
                _this.privWebsocketClient.binaryType = "arraybuffer";
                _this.privReceivingMessageQueue = new Exports_1.Queue();
                _this.privDisconnectDeferral = new Exports_1.Deferred();
                _this.privSendMessageQueue = new Exports_1.Queue();
                _this.processSendQueue();
            }
            catch (error) {
                _this.privConnectionEstablishDeferral.resolve(new Exports_1.ConnectionOpenResponse(500, error));
                return _this.privConnectionEstablishDeferral.promise();
            }
            _this.onEvent(new Exports_1.ConnectionStartEvent(_this.privConnectionId, _this.privUri));
            _this.privWebsocketClient.onopen = function (e) {
                _this.privCertificateValidatedDeferral.promise().on(function () {
                    _this.privConnectionState = Exports_1.ConnectionState.Connected;
                    _this.onEvent(new Exports_1.ConnectionEstablishedEvent(_this.privConnectionId));
                    _this.privConnectionEstablishDeferral.resolve(new Exports_1.ConnectionOpenResponse(200, ""));
                }, function (error) {
                    _this.privConnectionEstablishDeferral.reject(error);
                });
            };
            _this.privWebsocketClient.onerror = function (e) {
                // TODO: Understand what this is error is. Will we still get onClose ?
                if (_this.privConnectionState !== Exports_1.ConnectionState.Connecting) {
                    // TODO: Is this required ?
                    // this.onEvent(new ConnectionErrorEvent(errorMsg, connectionId));
                }
            };
            _this.privWebsocketClient.onclose = function (e) {
                if (_this.privConnectionState === Exports_1.ConnectionState.Connecting) {
                    _this.privConnectionState = Exports_1.ConnectionState.Disconnected;
                    // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));
                    _this.privConnectionEstablishDeferral.resolve(new Exports_1.ConnectionOpenResponse(e.code, e.reason));
                }
                else {
                    _this.onEvent(new Exports_1.ConnectionClosedEvent(_this.privConnectionId, e.code, e.reason));
                }
                _this.onClose(e.code, e.reason);
            };
            _this.privWebsocketClient.onmessage = function (e) {
                var networkReceivedTime = new Date().toISOString();
                if (_this.privConnectionState === Exports_1.ConnectionState.Connected) {
                    var deferred_1 = new Exports_1.Deferred();
                    // let id = ++this.idCounter;
                    _this.privReceivingMessageQueue.enqueueFromPromise(deferred_1.promise());
                    if (e.data instanceof ArrayBuffer) {
                        var rawMessage = new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Binary, e.data);
                        _this.privMessageFormatter
                            .toConnectionMessage(rawMessage)
                            .on(function (connectionMessage) {
                            _this.onEvent(new Exports_1.ConnectionMessageReceivedEvent(_this.privConnectionId, networkReceivedTime, connectionMessage));
                            deferred_1.resolve(connectionMessage);
                        }, function (error) {
                            // TODO: Events for these ?
                            deferred_1.reject("Invalid binary message format. Error: " + error);
                        });
                    }
                    else {
                        var rawMessage = new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Text, e.data);
                        _this.privMessageFormatter
                            .toConnectionMessage(rawMessage)
                            .on(function (connectionMessage) {
                            _this.onEvent(new Exports_1.ConnectionMessageReceivedEvent(_this.privConnectionId, networkReceivedTime, connectionMessage));
                            deferred_1.resolve(connectionMessage);
                        }, function (error) {
                            // TODO: Events for these ?
                            deferred_1.reject("Invalid text message format. Error: " + error);
                        });
                    }
                }
            };
            return _this.privConnectionEstablishDeferral.promise();
        };
        this.send = function (message) {
            if (_this.privConnectionState !== Exports_1.ConnectionState.Connected) {
                return Exports_1.PromiseHelper.fromError("Cannot send on connection that is in " + _this.privConnectionState + " state");
            }
            var messageSendStatusDeferral = new Exports_1.Deferred();
            var messageSendDeferral = new Exports_1.Deferred();
            _this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise());
            _this.privMessageFormatter
                .fromConnectionMessage(message)
                .on(function (rawMessage) {
                messageSendDeferral.resolve({
                    Message: message,
                    RawWebsocketMessage: rawMessage,
                    sendStatusDeferral: messageSendStatusDeferral,
                });
            }, function (error) {
                messageSendDeferral.reject("Error formatting the message. " + error);
            });
            return messageSendStatusDeferral.promise();
        };
        this.read = function () {
            if (_this.privConnectionState !== Exports_1.ConnectionState.Connected) {
                return Exports_1.PromiseHelper.fromError("Cannot read on connection that is in " + _this.privConnectionState + " state");
            }
            return _this.privReceivingMessageQueue.dequeue();
        };
        this.close = function (reason) {
            if (_this.privWebsocketClient) {
                if (_this.privConnectionState !== Exports_1.ConnectionState.Disconnected) {
                    _this.privWebsocketClient.close(1000, reason ? reason : "Normal closure by client");
                }
            }
            else {
                var deferral = new Exports_1.Deferred();
                deferral.resolve(true);
                return deferral.promise();
            }
            return _this.privDisconnectDeferral.promise();
        };
        this.sendRawMessage = function (sendItem) {
            try {
                // indicates we are draining the queue and it came with no message;
                if (!sendItem) {
                    return Exports_1.PromiseHelper.fromResult(true);
                }
                _this.onEvent(new Exports_1.ConnectionMessageSentEvent(_this.privConnectionId, new Date().toISOString(), sendItem.Message));
                _this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);
                return Exports_1.PromiseHelper.fromResult(true);
            }
            catch (e) {
                return Exports_1.PromiseHelper.fromError("websocket send error: " + e);
            }
        };
        this.onClose = function (code, reason) {
            var closeReason = "Connection closed. " + code + ": " + reason;
            _this.privConnectionState = Exports_1.ConnectionState.Disconnected;
            _this.privDisconnectDeferral.resolve(true);
            _this.privReceivingMessageQueue.dispose(reason);
            _this.privReceivingMessageQueue.drainAndDispose(function (pendingReceiveItem) {
                // TODO: Events for these ?
                // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));
            }, closeReason);
            _this.privSendMessageQueue.drainAndDispose(function (pendingSendItem) {
                pendingSendItem.sendStatusDeferral.reject(closeReason);
            }, closeReason);
        };
        this.processSendQueue = function () {
            _this.privSendMessageQueue
                .dequeue()
                .on(function (sendItem) {
                // indicates we are draining the queue and it came with no message;
                if (!sendItem) {
                    return;
                }
                _this.sendRawMessage(sendItem)
                    .on(function (result) {
                    sendItem.sendStatusDeferral.resolve(result);
                    _this.processSendQueue();
                }, function (sendError) {
                    sendItem.sendStatusDeferral.reject(sendError);
                    _this.processSendQueue();
                });
            }, function (error) {
                // do nothing
            });
        };
        this.onEvent = function (event) {
            _this.privConnectionEvents.onEvent(event);
            Exports_1.Events.instance.onEvent(event);
        };
        if (!uri) {
            throw new Exports_1.ArgumentNullError("uri");
        }
        if (!messageFormatter) {
            throw new Exports_1.ArgumentNullError("messageFormatter");
        }
        this.proxyInfo = proxyInfo;
        this.privConnectionEvents = new Exports_1.EventSource();
        this.privConnectionId = connectionId;
        this.privMessageFormatter = messageFormatter;
        this.privConnectionState = Exports_1.ConnectionState.None;
        this.privUri = uri;
    }
    Object.defineProperty(WebsocketMessageAdapter.prototype, "state", {
        get: function () {
            return this.privConnectionState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebsocketMessageAdapter.prototype, "events", {
        get: function () {
            return this.privConnectionEvents;
        },
        enumerable: true,
        configurable: true
    });
    WebsocketMessageAdapter.forceNpmWebSocket = false;
    return WebsocketMessageAdapter;
}());
exports.WebsocketMessageAdapter = WebsocketMessageAdapter;

//# sourceMappingURL=WebsocketMessageAdapter.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/AddedLmIntent.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/AddedLmIntent.js ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @class AddedLmIntent
 */
// tslint:disable-next-line:max-classes-per-file
var AddedLmIntent = /** @class */ (function () {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param modelImpl - The model.
     * @param intentName - The intent name.
     */
    function AddedLmIntent(modelImpl, intentName) {
        this.modelImpl = modelImpl;
        this.intentName = intentName;
    }
    return AddedLmIntent;
}());
exports.AddedLmIntent = AddedLmIntent;

//# sourceMappingURL=AddedLmIntent.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/CognitiveSubscriptionKeyAuthentication.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/CognitiveSubscriptionKeyAuthentication.js ***!
  \********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var IAuthentication_1 = __webpack_require__(/*! ./IAuthentication */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IAuthentication.js");
var AuthHeader = "Ocp-Apim-Subscription-Key";
/**
 * @class
 */
var CognitiveSubscriptionKeyAuthentication = /** @class */ (function () {
    /**
     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.
     * @constructor
     * @param {string} subscriptionKey - The subscription key
     */
    function CognitiveSubscriptionKeyAuthentication(subscriptionKey) {
        var _this = this;
        /**
         * Fetches the subscription key.
         * @member
         * @function
         * @public
         * @param {string} authFetchEventId - The id to fetch.
         */
        this.fetch = function (authFetchEventId) {
            return Exports_1.PromiseHelper.fromResult(_this.privAuthInfo);
        };
        /**
         * Fetches the subscription key.
         * @member
         * @function
         * @public
         * @param {string} authFetchEventId - The id to fetch.
         */
        this.fetchOnExpiry = function (authFetchEventId) {
            return Exports_1.PromiseHelper.fromResult(_this.privAuthInfo);
        };
        if (!subscriptionKey) {
            throw new Exports_1.ArgumentNullError("subscriptionKey");
        }
        this.privAuthInfo = new IAuthentication_1.AuthInfo(AuthHeader, subscriptionKey);
    }
    return CognitiveSubscriptionKeyAuthentication;
}());
exports.CognitiveSubscriptionKeyAuthentication = CognitiveSubscriptionKeyAuthentication;

//# sourceMappingURL=CognitiveSubscriptionKeyAuthentication.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/CognitiveTokenAuthentication.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/CognitiveTokenAuthentication.js ***!
  \**********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var IAuthentication_1 = __webpack_require__(/*! ./IAuthentication */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IAuthentication.js");
var AuthHeader = "Authorization";
var CognitiveTokenAuthentication = /** @class */ (function () {
    function CognitiveTokenAuthentication(fetchCallback, fetchOnExpiryCallback) {
        var _this = this;
        this.fetch = function (authFetchEventId) {
            return _this.privFetchCallback(authFetchEventId).onSuccessContinueWith(function (token) { return new IAuthentication_1.AuthInfo(AuthHeader, token); });
        };
        this.fetchOnExpiry = function (authFetchEventId) {
            return _this.privFetchOnExpiryCallback(authFetchEventId).onSuccessContinueWith(function (token) { return new IAuthentication_1.AuthInfo(AuthHeader, token); });
        };
        if (!fetchCallback) {
            throw new Exports_1.ArgumentNullError("fetchCallback");
        }
        if (!fetchOnExpiryCallback) {
            throw new Exports_1.ArgumentNullError("fetchOnExpiryCallback");
        }
        this.privFetchCallback = fetchCallback;
        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;
    }
    return CognitiveTokenAuthentication;
}());
exports.CognitiveTokenAuthentication = CognitiveTokenAuthentication;

//# sourceMappingURL=CognitiveTokenAuthentication.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/DynamicGrammarBuilder.js":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/DynamicGrammarBuilder.js ***!
  \***************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Responsible for building the object to be sent to the speech service to support dynamic grammars.
 * @class DynamicGrammarBuilder
 */
var DynamicGrammarBuilder = /** @class */ (function () {
    function DynamicGrammarBuilder() {
    }
    // Adds one more reference phrases to the dynamic grammar to send.
    // All added phrases are generic phrases.
    DynamicGrammarBuilder.prototype.addPhrase = function (phrase) {
        if (!this.privPhrases) {
            this.privPhrases = [];
        }
        if (phrase instanceof Array) {
            this.privPhrases = this.privPhrases.concat(phrase);
        }
        else {
            this.privPhrases.push(phrase);
        }
    };
    // Clears all phrases stored in the current object.
    DynamicGrammarBuilder.prototype.clearPhrases = function () {
        this.privPhrases = undefined;
    };
    // Adds one or more reference grammars to the current grammar.
    DynamicGrammarBuilder.prototype.addReferenceGrammar = function (grammar) {
        if (!this.privGrammars) {
            this.privGrammars = [];
        }
        if (grammar instanceof Array) {
            this.privGrammars = this.privGrammars.concat(grammar);
        }
        else {
            this.privGrammars.push(grammar);
        }
    };
    // clears all grammars stored on the recognizer.
    DynamicGrammarBuilder.prototype.clearGrammars = function () {
        this.privGrammars = undefined;
    };
    // Generates an object that represents the dynamic grammar used by the Speech Service.
    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance
    // of a DynamicGrammarBuilder
    DynamicGrammarBuilder.prototype.generateGrammarObject = function () {
        if (this.privGrammars === undefined && this.privPhrases === undefined) {
            return undefined;
        }
        var retObj = {};
        retObj.ReferenceGrammars = this.privGrammars;
        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {
            var retPhrases_1 = [];
            this.privPhrases.forEach(function (value, index, array) {
                retPhrases_1.push({
                    Text: value,
                });
            });
            retObj.Groups = [{ Type: "Generic", Items: retPhrases_1 }];
        }
        return retObj;
    };
    return DynamicGrammarBuilder;
}());
exports.DynamicGrammarBuilder = DynamicGrammarBuilder;

//# sourceMappingURL=DynamicGrammarBuilder.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/EnumTranslation.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/EnumTranslation.js ***!
  \*********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var Exports_2 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var EnumTranslation = /** @class */ (function () {
    function EnumTranslation() {
    }
    EnumTranslation.implTranslateRecognitionResult = function (recognitionStatus) {
        var reason = Exports_1.ResultReason.Canceled;
        switch (recognitionStatus) {
            case Exports_2.RecognitionStatus.Success:
                reason = Exports_1.ResultReason.RecognizedSpeech;
                break;
            case Exports_2.RecognitionStatus.NoMatch:
            case Exports_2.RecognitionStatus.InitialSilenceTimeout:
            case Exports_2.RecognitionStatus.BabbleTimeout:
            case Exports_2.RecognitionStatus.EndOfDictation:
                reason = Exports_1.ResultReason.NoMatch;
                break;
            case Exports_2.RecognitionStatus.Error:
            default:
                reason = Exports_1.ResultReason.Canceled;
                break;
        }
        return reason;
    };
    EnumTranslation.implTranslateCancelResult = function (recognitionStatus) {
        var reason = Exports_1.CancellationReason.EndOfStream;
        switch (recognitionStatus) {
            case Exports_2.RecognitionStatus.Success:
            case Exports_2.RecognitionStatus.EndOfDictation:
            case Exports_2.RecognitionStatus.NoMatch:
                reason = Exports_1.CancellationReason.EndOfStream;
                break;
            case Exports_2.RecognitionStatus.InitialSilenceTimeout:
            case Exports_2.RecognitionStatus.BabbleTimeout:
            case Exports_2.RecognitionStatus.Error:
            default:
                reason = Exports_1.CancellationReason.Error;
                break;
        }
        return reason;
    };
    return EnumTranslation;
}());
exports.EnumTranslation = EnumTranslation;

//# sourceMappingURL=EnumTranslation.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// Make sure not to export internal modules.
//
__export(__webpack_require__(/*! ./CognitiveSubscriptionKeyAuthentication */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/CognitiveSubscriptionKeyAuthentication.js"));
__export(__webpack_require__(/*! ./CognitiveTokenAuthentication */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/CognitiveTokenAuthentication.js"));
__export(__webpack_require__(/*! ./IAuthentication */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IAuthentication.js"));
__export(__webpack_require__(/*! ./IntentConnectionFactory */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IntentConnectionFactory.js"));
__export(__webpack_require__(/*! ./RecognitionEvents */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognitionEvents.js"));
__export(__webpack_require__(/*! ./ServiceRecognizerBase */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js"));
__export(__webpack_require__(/*! ./RecognizerConfig */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig.js"));
__export(__webpack_require__(/*! ./WebsocketMessageFormatter */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/WebsocketMessageFormatter.js"));
__export(__webpack_require__(/*! ./SpeechConnectionFactory */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionFactory.js"));
__export(__webpack_require__(/*! ./TranslationConnectionFactory */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js"));
__export(__webpack_require__(/*! ./EnumTranslation */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/EnumTranslation.js"));
__export(__webpack_require__(/*! ./ServiceMessages/Enums */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/Enums.js"));
__export(__webpack_require__(/*! ./ServiceMessages/TranslationSynthesisEnd */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js"));
__export(__webpack_require__(/*! ./ServiceMessages/TranslationHypothesis */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationHypothesis.js"));
__export(__webpack_require__(/*! ./ServiceMessages/TranslationPhrase */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationPhrase.js"));
__export(__webpack_require__(/*! ./TranslationServiceRecognizer */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationServiceRecognizer.js"));
__export(__webpack_require__(/*! ./ServiceMessages/SpeechDetected */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SpeechDetected.js"));
__export(__webpack_require__(/*! ./ServiceMessages/SpeechHypothesis */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SpeechHypothesis.js"));
__export(__webpack_require__(/*! ./SpeechServiceRecognizer */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechServiceRecognizer.js"));
__export(__webpack_require__(/*! ./ServiceMessages/DetailedSpeechPhrase */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js"));
__export(__webpack_require__(/*! ./ServiceMessages/SimpleSpeechPhrase */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js"));
__export(__webpack_require__(/*! ./AddedLmIntent */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/AddedLmIntent.js"));
__export(__webpack_require__(/*! ./IntentServiceRecognizer */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IntentServiceRecognizer.js"));
__export(__webpack_require__(/*! ./ServiceMessages/IntentResponse */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/IntentResponse.js"));
__export(__webpack_require__(/*! ./RequestSession */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RequestSession.js"));
__export(__webpack_require__(/*! ./SpeechContext */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechContext.js"));
__export(__webpack_require__(/*! ./DynamicGrammarBuilder */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/DynamicGrammarBuilder.js"));
exports.OutputFormatPropertyName = "OutputFormat";
exports.CancellationErrorCodePropertyName = "CancellationErrorCode";

//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IAuthentication.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IAuthentication.js ***!
  \*********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var AuthInfo = /** @class */ (function () {
    function AuthInfo(headerName, token) {
        this.privHeaderName = headerName;
        this.privToken = token;
    }
    Object.defineProperty(AuthInfo.prototype, "headerName", {
        get: function () {
            return this.privHeaderName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthInfo.prototype, "token", {
        get: function () {
            return this.privToken;
        },
        enumerable: true,
        configurable: true
    });
    return AuthInfo;
}());
exports.AuthInfo = AuthInfo;

//# sourceMappingURL=IAuthentication.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IntentConnectionFactory.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IntentConnectionFactory.js ***!
  \*****************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js");
var Exports_2 = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var Exports_3 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var TestHooksParamName = "testhooks";
var ConnectionIdHeader = "X-ConnectionId";
var IntentConnectionFactory = /** @class */ (function () {
    function IntentConnectionFactory() {
        var _this = this;
        this.create = function (config, authInfo, connectionId) {
            var endpoint = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint);
            if (!endpoint) {
                var region = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_IntentRegion);
                endpoint = "wss://speech.platform.bing.com/speech/" + _this.getSpeechRegionFromIntentRegion(region) + "/recognition/interactive/cognitiveservices/v1";
            }
            var queryParams = {
                format: "simple",
                language: config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage),
            };
            var headers = {};
            headers[authInfo.headerName] = authInfo.token;
            headers[ConnectionIdHeader] = connectionId;
            return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_3.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), connectionId);
        };
    }
    IntentConnectionFactory.prototype.getSpeechRegionFromIntentRegion = function (intentRegion) {
        switch (intentRegion) {
            case "West US":
            case "US West":
            case "westus":
                return "uswest";
            case "West US 2":
            case "US West 2":
            case "westus2":
                return "uswest2";
            case "South Central US":
            case "US South Central":
            case "southcentralus":
                return "ussouthcentral";
            case "West Central US":
            case "US West Central":
            case "westcentralus":
                return "uswestcentral";
            case "East US":
            case "US East":
            case "eastus":
                return "useast";
            case "East US 2":
            case "US East 2":
            case "eastus2":
                return "useast2";
            case "West Europe":
            case "Europe West":
            case "westeurope":
                return "europewest";
            case "North Europe":
            case "Europe North":
            case "northeurope":
                return "europenorth";
            case "Brazil South":
            case "South Brazil":
            case "southbrazil":
                return "brazilsouth";
            case "Australia East":
            case "East Australia":
            case "eastaustralia":
                return "australiaeast";
            case "Southeast Asia":
            case "Asia Southeast":
            case "southeastasia":
                return "asiasoutheast";
            case "East Asia":
            case "Asia East":
            case "eastasia":
                return "asiaeast";
            default:
                return intentRegion;
        }
    };
    return IntentConnectionFactory;
}());
exports.IntentConnectionFactory = IntentConnectionFactory;

//# sourceMappingURL=IntentConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IntentServiceRecognizer.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/IntentServiceRecognizer.js ***!
  \*****************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var Exports_2 = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var Exports_3 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
// tslint:disable-next-line:max-classes-per-file
var IntentServiceRecognizer = /** @class */ (function (_super) {
    __extends(IntentServiceRecognizer, _super);
    function IntentServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {
        var _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, recognizer) || this;
        _this.privIntentRecognizer = recognizer;
        _this.privIntentDataSent = false;
        return _this;
    }
    IntentServiceRecognizer.prototype.setIntents = function (addedIntents, umbrellaIntent) {
        this.privAddedLmIntents = addedIntents;
        this.privUmbrellaIntent = umbrellaIntent;
        this.privIntentDataSent = true;
    };
    IntentServiceRecognizer.prototype.processTypeSpecificMessages = function (connectionMessage, successCallback, errorCallBack) {
        var _this = this;
        var result;
        var ev;
        var resultProps = new Exports_2.PropertyCollection();
        if (connectionMessage.messageType === Exports_1.MessageType.Text) {
            resultProps.setProperty(Exports_2.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        }
        switch (connectionMessage.path.toLowerCase()) {
            case "speech.hypothesis":
                var speechHypothesis = Exports_3.SpeechHypothesis.fromJSON(connectionMessage.textBody);
                result = new Exports_2.IntentRecognitionResult(undefined, this.privRequestSession.requestId, Exports_2.ResultReason.RecognizingIntent, speechHypothesis.Text, speechHypothesis.Duration, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);
                this.privRequestSession.onHypothesis(result.offset);
                ev = new Exports_2.IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);
                if (!!this.privIntentRecognizer.recognizing) {
                    try {
                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);
                        /* tslint:disable:no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                break;
            case "speech.phrase":
                var simple = Exports_3.SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);
                result = new Exports_2.IntentRecognitionResult(undefined, this.privRequestSession.requestId, Exports_3.EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus), simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);
                ev = new Exports_2.IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);
                var sendEvent = function () {
                    if (!!_this.privIntentRecognizer.recognized) {
                        try {
                            _this.privIntentRecognizer.recognized(_this.privIntentRecognizer, ev);
                            /* tslint:disable:no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                    // report result to promise.
                    if (!!successCallback) {
                        try {
                            successCallback(result);
                        }
                        catch (e) {
                            if (!!errorCallBack) {
                                errorCallBack(e);
                            }
                        }
                        // Only invoke the call back once.
                        // and if it's successful don't invoke the
                        // error after that.
                        successCallback = undefined;
                        errorCallBack = undefined;
                    }
                };
                // If intent data was sent, the terminal result for this recognizer is an intent being found.
                // If no intent data was sent, the terminal event is speech recognition being successful.
                if (false === this.privIntentDataSent || Exports_2.ResultReason.NoMatch === ev.result.reason) {
                    // Advance the buffers.
                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);
                    sendEvent();
                }
                else {
                    // Squirrel away the args, when the response event arrives it will build upon them
                    // and then return
                    this.privPendingIntentArgs = ev;
                }
                break;
            case "response":
                // Response from LUIS
                ev = this.privPendingIntentArgs;
                this.privPendingIntentArgs = undefined;
                if (undefined === ev) {
                    if ("" === connectionMessage.textBody) {
                        // This condition happens if there is nothing but silence in the
                        // audio sent to the service.
                        return;
                    }
                    // Odd... Not sure this can happen
                    ev = new Exports_2.IntentRecognitionEventArgs(new Exports_2.IntentRecognitionResult(), 0 /*TODO*/, this.privRequestSession.sessionId);
                }
                var intentResponse = Exports_3.IntentResponse.fromJSON(connectionMessage.textBody);
                // If LUIS didn't return anything, send the existing event, else
                // modify it to show the match.
                // See if the intent found is in the list of intents asked for.
                var addedIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];
                if (this.privUmbrellaIntent !== undefined) {
                    addedIntent = this.privUmbrellaIntent;
                }
                if (null !== intentResponse && addedIntent !== undefined) {
                    var intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;
                    var reason = ev.result.reason;
                    if (undefined !== intentId) {
                        reason = Exports_2.ResultReason.RecognizedIntent;
                    }
                    // make sure, properties is set.
                    var properties = (undefined !== ev.result.properties) ?
                        ev.result.properties : new Exports_2.PropertyCollection();
                    properties.setProperty(Exports_2.PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);
                    ev = new Exports_2.IntentRecognitionEventArgs(new Exports_2.IntentRecognitionResult(intentId, ev.result.resultId, reason, ev.result.text, ev.result.duration, ev.result.offset, ev.result.errorDetails, ev.result.json, properties), ev.offset, ev.sessionId);
                }
                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);
                if (!!this.privIntentRecognizer.recognized) {
                    try {
                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);
                        /* tslint:disable:no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                // report result to promise.
                if (!!successCallback) {
                    try {
                        successCallback(ev.result);
                    }
                    catch (e) {
                        if (!!errorCallBack) {
                            errorCallBack(e);
                        }
                    }
                    // Only invoke the call back once.
                    // and if it's successful don't invoke the
                    // error after that.
                    successCallback = undefined;
                    errorCallBack = undefined;
                }
                break;
            default:
                break;
        }
    };
    // Cancels recognition.
    IntentServiceRecognizer.prototype.cancelRecognition = function (sessionId, requestId, cancellationReason, errorCode, error, cancelRecoCallback) {
        if (!!this.privIntentRecognizer.canceled) {
            var properties = new Exports_2.PropertyCollection();
            properties.setProperty(Exports_3.CancellationErrorCodePropertyName, Exports_2.CancellationErrorCode[errorCode]);
            var cancelEvent = new Exports_2.IntentRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, undefined, sessionId);
            try {
                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);
                /* tslint:disable:no-empty */
            }
            catch (_a) { }
            if (!!cancelRecoCallback) {
                var result = new Exports_2.IntentRecognitionResult(undefined, // Intent Id
                requestId, Exports_2.ResultReason.Canceled, undefined, // Text
                undefined, // Druation
                undefined, // Offset
                error, undefined, // Json
                properties);
                try {
                    cancelRecoCallback(result);
                    /* tslint:disable:no-empty */
                }
                catch (_b) { }
            }
        }
    };
    return IntentServiceRecognizer;
}(Exports_3.ServiceRecognizerBase));
exports.IntentServiceRecognizer = IntentServiceRecognizer;

//# sourceMappingURL=IntentServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/QueryParameterNames.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/QueryParameterNames.js ***!
  \*************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var QueryParameterNames = /** @class */ (function () {
    function QueryParameterNames() {
    }
    Object.defineProperty(QueryParameterNames, "TestHooksParamName", {
        get: function () {
            return "testhooks";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryParameterNames, "ConnectionIdHeader", {
        get: function () {
            return "X-ConnectionId";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryParameterNames, "DeploymentIdParamName", {
        get: function () {
            return "cid";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryParameterNames, "FormatParamName", {
        get: function () {
            return "format";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryParameterNames, "LanguageParamName", {
        get: function () {
            return "language";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryParameterNames, "TranslationFromParamName", {
        get: function () {
            return "from";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryParameterNames, "TranslationToParamName", {
        get: function () {
            return "to";
        },
        enumerable: true,
        configurable: true
    });
    return QueryParameterNames;
}());
exports.QueryParameterNames = QueryParameterNames;

//# sourceMappingURL=QueryParameterNames.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognitionEvents.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognitionEvents.js ***!
  \***********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var SpeechRecognitionEvent = /** @class */ (function (_super) {
    __extends(SpeechRecognitionEvent, _super);
    function SpeechRecognitionEvent(eventName, requestId, sessionId, eventType) {
        if (eventType === void 0) { eventType = Exports_1.EventType.Info; }
        var _this = _super.call(this, eventName, eventType) || this;
        _this.privRequestId = requestId;
        _this.privSessionId = sessionId;
        return _this;
    }
    Object.defineProperty(SpeechRecognitionEvent.prototype, "requestId", {
        get: function () {
            return this.privRequestId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechRecognitionEvent.prototype, "sessionId", {
        get: function () {
            return this.privSessionId;
        },
        enumerable: true,
        configurable: true
    });
    return SpeechRecognitionEvent;
}(Exports_1.PlatformEvent));
exports.SpeechRecognitionEvent = SpeechRecognitionEvent;
// tslint:disable-next-line:max-classes-per-file
var RecognitionTriggeredEvent = /** @class */ (function (_super) {
    __extends(RecognitionTriggeredEvent, _super);
    function RecognitionTriggeredEvent(requestId, sessionId, audioSourceId, audioNodeId) {
        var _this = _super.call(this, "RecognitionTriggeredEvent", requestId, sessionId) || this;
        _this.privAudioSourceId = audioSourceId;
        _this.privAudioNodeId = audioNodeId;
        return _this;
    }
    Object.defineProperty(RecognitionTriggeredEvent.prototype, "audioSourceId", {
        get: function () {
            return this.privAudioSourceId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionTriggeredEvent.prototype, "audioNodeId", {
        get: function () {
            return this.privAudioNodeId;
        },
        enumerable: true,
        configurable: true
    });
    return RecognitionTriggeredEvent;
}(SpeechRecognitionEvent));
exports.RecognitionTriggeredEvent = RecognitionTriggeredEvent;
// tslint:disable-next-line:max-classes-per-file
var ListeningStartedEvent = /** @class */ (function (_super) {
    __extends(ListeningStartedEvent, _super);
    function ListeningStartedEvent(requestId, sessionId, audioSourceId, audioNodeId) {
        var _this = _super.call(this, "ListeningStartedEvent", requestId, sessionId) || this;
        _this.privAudioSourceId = audioSourceId;
        _this.privAudioNodeId = audioNodeId;
        return _this;
    }
    Object.defineProperty(ListeningStartedEvent.prototype, "audioSourceId", {
        get: function () {
            return this.privAudioSourceId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListeningStartedEvent.prototype, "audioNodeId", {
        get: function () {
            return this.privAudioNodeId;
        },
        enumerable: true,
        configurable: true
    });
    return ListeningStartedEvent;
}(SpeechRecognitionEvent));
exports.ListeningStartedEvent = ListeningStartedEvent;
// tslint:disable-next-line:max-classes-per-file
var ConnectingToServiceEvent = /** @class */ (function (_super) {
    __extends(ConnectingToServiceEvent, _super);
    function ConnectingToServiceEvent(requestId, authFetchEventid, sessionId) {
        var _this = _super.call(this, "ConnectingToServiceEvent", requestId, sessionId) || this;
        _this.privAuthFetchEventid = authFetchEventid;
        return _this;
    }
    Object.defineProperty(ConnectingToServiceEvent.prototype, "authFetchEventid", {
        get: function () {
            return this.privAuthFetchEventid;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectingToServiceEvent;
}(SpeechRecognitionEvent));
exports.ConnectingToServiceEvent = ConnectingToServiceEvent;
// tslint:disable-next-line:max-classes-per-file
var RecognitionStartedEvent = /** @class */ (function (_super) {
    __extends(RecognitionStartedEvent, _super);
    function RecognitionStartedEvent(requestId, audioSourceId, audioNodeId, authFetchEventId, sessionId) {
        var _this = _super.call(this, "RecognitionStartedEvent", requestId, sessionId) || this;
        _this.privAudioSourceId = audioSourceId;
        _this.privAudioNodeId = audioNodeId;
        _this.privAuthFetchEventId = authFetchEventId;
        return _this;
    }
    Object.defineProperty(RecognitionStartedEvent.prototype, "audioSourceId", {
        get: function () {
            return this.privAudioSourceId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionStartedEvent.prototype, "audioNodeId", {
        get: function () {
            return this.privAudioNodeId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionStartedEvent.prototype, "authFetchEventId", {
        get: function () {
            return this.privAuthFetchEventId;
        },
        enumerable: true,
        configurable: true
    });
    return RecognitionStartedEvent;
}(SpeechRecognitionEvent));
exports.RecognitionStartedEvent = RecognitionStartedEvent;
var RecognitionCompletionStatus;
(function (RecognitionCompletionStatus) {
    RecognitionCompletionStatus[RecognitionCompletionStatus["Success"] = 0] = "Success";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AudioSourceError"] = 1] = "AudioSourceError";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AudioSourceTimeout"] = 2] = "AudioSourceTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AuthTokenFetchError"] = 3] = "AuthTokenFetchError";
    RecognitionCompletionStatus[RecognitionCompletionStatus["AuthTokenFetchTimeout"] = 4] = "AuthTokenFetchTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["UnAuthorized"] = 5] = "UnAuthorized";
    RecognitionCompletionStatus[RecognitionCompletionStatus["ConnectTimeout"] = 6] = "ConnectTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["ConnectError"] = 7] = "ConnectError";
    RecognitionCompletionStatus[RecognitionCompletionStatus["ClientRecognitionActivityTimeout"] = 8] = "ClientRecognitionActivityTimeout";
    RecognitionCompletionStatus[RecognitionCompletionStatus["UnknownError"] = 9] = "UnknownError";
})(RecognitionCompletionStatus = exports.RecognitionCompletionStatus || (exports.RecognitionCompletionStatus = {}));
// tslint:disable-next-line:max-classes-per-file
var RecognitionEndedEvent = /** @class */ (function (_super) {
    __extends(RecognitionEndedEvent, _super);
    function RecognitionEndedEvent(requestId, audioSourceId, audioNodeId, authFetchEventId, sessionId, serviceTag, status, error) {
        var _this = _super.call(this, "RecognitionEndedEvent", requestId, sessionId, status === RecognitionCompletionStatus.Success ? Exports_1.EventType.Info : Exports_1.EventType.Error) || this;
        _this.privAudioSourceId = audioSourceId;
        _this.privAudioNodeId = audioNodeId;
        _this.privAuthFetchEventId = authFetchEventId;
        _this.privStatus = status;
        _this.privError = error;
        _this.privServiceTag = serviceTag;
        return _this;
    }
    Object.defineProperty(RecognitionEndedEvent.prototype, "audioSourceId", {
        get: function () {
            return this.privAudioSourceId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionEndedEvent.prototype, "audioNodeId", {
        get: function () {
            return this.privAudioNodeId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionEndedEvent.prototype, "authFetchEventId", {
        get: function () {
            return this.privAuthFetchEventId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionEndedEvent.prototype, "serviceTag", {
        get: function () {
            return this.privServiceTag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionEndedEvent.prototype, "status", {
        get: function () {
            return this.privStatus;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionEndedEvent.prototype, "error", {
        get: function () {
            return this.privError;
        },
        enumerable: true,
        configurable: true
    });
    return RecognitionEndedEvent;
}(SpeechRecognitionEvent));
exports.RecognitionEndedEvent = RecognitionEndedEvent;

//# sourceMappingURL=RecognitionEvents.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig.js ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var RecognitionMode;
(function (RecognitionMode) {
    RecognitionMode[RecognitionMode["Interactive"] = 0] = "Interactive";
    RecognitionMode[RecognitionMode["Conversation"] = 1] = "Conversation";
    RecognitionMode[RecognitionMode["Dictation"] = 2] = "Dictation";
})(RecognitionMode = exports.RecognitionMode || (exports.RecognitionMode = {}));
var SpeechResultFormat;
(function (SpeechResultFormat) {
    SpeechResultFormat[SpeechResultFormat["Simple"] = 0] = "Simple";
    SpeechResultFormat[SpeechResultFormat["Detailed"] = 1] = "Detailed";
})(SpeechResultFormat = exports.SpeechResultFormat || (exports.SpeechResultFormat = {}));
var RecognizerConfig = /** @class */ (function () {
    function RecognizerConfig(speechServiceConfig, parameters) {
        this.privRecognitionMode = RecognitionMode.Interactive;
        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));
        this.privParameters = parameters;
    }
    Object.defineProperty(RecognizerConfig.prototype, "parameters", {
        get: function () {
            return this.privParameters;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognizerConfig.prototype, "recognitionMode", {
        get: function () {
            return this.privRecognitionMode;
        },
        set: function (value) {
            this.privRecognitionMode = value;
            this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;
            this.privSpeechServiceConfig.Recognition = RecognitionMode[value];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognizerConfig.prototype, "SpeechServiceConfig", {
        get: function () {
            return this.privSpeechServiceConfig;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognizerConfig.prototype, "recognitionActivityTimeout", {
        get: function () {
            return this.privRecognitionActivityTimeout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognizerConfig.prototype, "isContinuousRecognition", {
        get: function () {
            return this.privRecognitionMode !== RecognitionMode.Interactive;
        },
        enumerable: true,
        configurable: true
    });
    return RecognizerConfig;
}());
exports.RecognizerConfig = RecognizerConfig;
// The config is serialized and sent as the Speech.Config
// tslint:disable-next-line:max-classes-per-file
var SpeechServiceConfig = /** @class */ (function () {
    function SpeechServiceConfig(context) {
        var _this = this;
        this.serialize = function () {
            return JSON.stringify(_this, function (key, value) {
                if (value && typeof value === "object") {
                    var replacement = {};
                    for (var k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];
                        }
                    }
                    return replacement;
                }
                return value;
            });
        };
        this.context = context;
    }
    Object.defineProperty(SpeechServiceConfig.prototype, "Context", {
        get: function () {
            return this.context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechServiceConfig.prototype, "Recognition", {
        get: function () {
            return this.recognition;
        },
        set: function (value) {
            this.recognition = value.toLowerCase();
        },
        enumerable: true,
        configurable: true
    });
    return SpeechServiceConfig;
}());
exports.SpeechServiceConfig = SpeechServiceConfig;
// tslint:disable-next-line:max-classes-per-file
var Context = /** @class */ (function () {
    function Context(os) {
        this.system = new System();
        this.os = os;
    }
    return Context;
}());
exports.Context = Context;
// tslint:disable-next-line:max-classes-per-file
var System = /** @class */ (function () {
    function System() {
        // Note: below will be patched for official builds.
        var SPEECHSDK_CLIENTSDK_VERSION = "1.6.0";
        this.name = "SpeechSDK";
        this.version = SPEECHSDK_CLIENTSDK_VERSION;
        this.build = "JavaScript";
        this.lang = "JavaScript";
    }
    return System;
}());
exports.System = System;
// tslint:disable-next-line:max-classes-per-file
var OS = /** @class */ (function () {
    function OS(platform, name, version) {
        this.platform = platform;
        this.name = name;
        this.version = version;
    }
    return OS;
}());
exports.OS = OS;
// tslint:disable-next-line:max-classes-per-file
var Device = /** @class */ (function () {
    function Device(manufacturer, model, version) {
        this.manufacturer = manufacturer;
        this.model = model;
        this.version = version;
    }
    return Device;
}());
exports.Device = Device;
var connectivity;
(function (connectivity) {
    connectivity["Bluetooth"] = "Bluetooth";
    connectivity["Wired"] = "Wired";
    connectivity["WiFi"] = "WiFi";
    connectivity["Cellular"] = "Cellular";
    connectivity["InBuilt"] = "InBuilt";
    connectivity["Unknown"] = "Unknown";
})(connectivity = exports.connectivity || (exports.connectivity = {}));
var type;
(function (type) {
    type["Phone"] = "Phone";
    type["Speaker"] = "Speaker";
    type["Car"] = "Car";
    type["Headset"] = "Headset";
    type["Thermostat"] = "Thermostat";
    type["Microphones"] = "Microphones";
    type["Deskphone"] = "Deskphone";
    type["RemoteControl"] = "RemoteControl";
    type["Unknown"] = "Unknown";
    type["File"] = "File";
    type["Stream"] = "Stream";
})(type = exports.type || (exports.type = {}));

//# sourceMappingURL=RecognizerConfig.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RequestSession.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RequestSession.js ***!
  \********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var RecognitionEvents_1 = __webpack_require__(/*! ./RecognitionEvents */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognitionEvents.js");
var ServiceTelemetryListener_Internal_1 = __webpack_require__(/*! ./ServiceTelemetryListener.Internal */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceTelemetryListener.Internal.js");
var RequestSession = /** @class */ (function () {
    function RequestSession(audioSourceId) {
        var _this = this;
        this.privIsDisposed = false;
        this.privDetachables = new Array();
        this.privIsAudioNodeDetached = false;
        this.privIsRecognizing = false;
        this.privIsSpeechEnded = false;
        this.privTurnStartAudioOffset = 0;
        this.privLastRecoOffset = 0;
        this.privHypothesisReceived = false;
        this.privBytesSent = 0;
        this.onAudioSourceAttachCompleted = function (audioNode, isError, error) {
            _this.privAudioNode = audioNode;
            if (isError) {
                _this.onComplete();
            }
            else {
                _this.onEvent(new RecognitionEvents_1.ListeningStartedEvent(_this.privRequestId, _this.privSessionId, _this.privAudioSourceId, _this.privAudioNodeId));
            }
        };
        this.onPreConnectionStart = function (authFetchEventId, connectionId) {
            _this.privAuthFetchEventId = authFetchEventId;
            _this.privSessionId = connectionId;
            _this.onEvent(new RecognitionEvents_1.ConnectingToServiceEvent(_this.privRequestId, _this.privAuthFetchEventId, _this.privSessionId));
        };
        this.onAuthCompleted = function (isError, error) {
            if (isError) {
                _this.onComplete();
            }
        };
        this.onConnectionEstablishCompleted = function (statusCode, reason) {
            if (statusCode === 200) {
                _this.onEvent(new RecognitionEvents_1.RecognitionStartedEvent(_this.requestId, _this.privAudioSourceId, _this.privAudioNodeId, _this.privAuthFetchEventId, _this.privSessionId));
                if (!!_this.privAudioNode) {
                    _this.privAudioNode.replay();
                }
                _this.privTurnStartAudioOffset = _this.privLastRecoOffset;
                _this.privBytesSent = 0;
                return;
            }
            else if (statusCode === 403) {
                _this.onComplete();
            }
        };
        this.onServiceTurnEndResponse = function (continuousRecognition) {
            if (!continuousRecognition || _this.isSpeechEnded) {
                _this.onComplete();
            }
            else {
                // Start a new request set.
                _this.privTurnStartAudioOffset = _this.privLastRecoOffset;
                _this.privRequestId = Exports_1.createNoDashGuid();
                _this.privAudioNode.replay();
            }
        };
        this.dispose = function (error) {
            if (!_this.privIsDisposed) {
                // we should have completed by now. If we did not its an unknown error.
                _this.privIsDisposed = true;
                for (var _i = 0, _a = _this.privDetachables; _i < _a.length; _i++) {
                    var detachable = _a[_i];
                    detachable.detach();
                }
                _this.privServiceTelemetryListener.dispose();
            }
        };
        this.getTelemetry = function () {
            if (_this.privServiceTelemetryListener.hasTelemetry) {
                return _this.privServiceTelemetryListener.getTelemetry();
            }
            else {
                return null;
            }
        };
        this.onEvent = function (event) {
            if (!!_this.privServiceTelemetryListener) {
                _this.privServiceTelemetryListener.onEvent(event);
            }
            Exports_1.Events.instance.onEvent(event);
        };
        this.onComplete = function () {
            if (!!_this.privIsRecognizing) {
                _this.privIsRecognizing = false;
                _this.detachAudioNode();
            }
        };
        this.detachAudioNode = function () {
            if (!_this.privIsAudioNodeDetached) {
                _this.privIsAudioNodeDetached = true;
                if (_this.privAudioNode) {
                    _this.privAudioNode.detach();
                }
            }
        };
        this.privAudioSourceId = audioSourceId;
        this.privRequestId = Exports_1.createNoDashGuid();
        this.privAudioNodeId = Exports_1.createNoDashGuid();
        this.privRequestCompletionDeferral = new Exports_1.Deferred();
    }
    Object.defineProperty(RequestSession.prototype, "sessionId", {
        get: function () {
            return this.privSessionId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RequestSession.prototype, "requestId", {
        get: function () {
            return this.privRequestId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RequestSession.prototype, "audioNodeId", {
        get: function () {
            return this.privAudioNodeId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RequestSession.prototype, "completionPromise", {
        get: function () {
            return this.privRequestCompletionDeferral.promise();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RequestSession.prototype, "isSpeechEnded", {
        get: function () {
            return this.privIsSpeechEnded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RequestSession.prototype, "isRecognizing", {
        get: function () {
            return this.privIsRecognizing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RequestSession.prototype, "currentTurnAudioOffset", {
        get: function () {
            return this.privTurnStartAudioOffset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RequestSession.prototype, "bytesSent", {
        // The number of bytes sent for the current connection.
        // Counter is reset to 0 each time a connection is established.
        get: function () {
            return this.privBytesSent;
        },
        enumerable: true,
        configurable: true
    });
    RequestSession.prototype.listenForServiceTelemetry = function (eventSource) {
        if (!!this.privServiceTelemetryListener) {
            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));
        }
    };
    RequestSession.prototype.startNewRecognition = function () {
        this.privIsSpeechEnded = false;
        this.privIsRecognizing = true;
        this.privTurnStartAudioOffset = 0;
        this.privLastRecoOffset = 0;
        this.privRequestId = Exports_1.createNoDashGuid();
        this.privServiceTelemetryListener = new ServiceTelemetryListener_Internal_1.ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);
        this.onEvent(new RecognitionEvents_1.RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));
    };
    RequestSession.prototype.onHypothesis = function (offset) {
        if (!this.privHypothesisReceived) {
            this.privHypothesisReceived = true;
            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));
        }
    };
    RequestSession.prototype.onPhraseRecognized = function (offset) {
        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));
        this.onServiceRecognized(offset);
    };
    RequestSession.prototype.onServiceRecognized = function (offset) {
        this.privLastRecoOffset = offset;
        this.privHypothesisReceived = false;
        this.privAudioNode.shrinkBuffers(offset);
    };
    RequestSession.prototype.onAudioSent = function (bytesSent) {
        this.privBytesSent += bytesSent;
    };
    RequestSession.prototype.onStopRecognizing = function () {
        this.privIsRecognizing = false;
    };
    // Should be called with the audioNode for this session has indicated that it is out of speech.
    RequestSession.prototype.onSpeechEnded = function () {
        this.privIsSpeechEnded = true;
    };
    return RequestSession;
}());
exports.RequestSession = RequestSession;

//# sourceMappingURL=RequestSession.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/DetailedSpeechPhrase.js ***!
  \******************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var DetailedSpeechPhrase = /** @class */ (function () {
    function DetailedSpeechPhrase(json) {
        this.privDetailedSpeechPhrase = JSON.parse(json);
        this.privDetailedSpeechPhrase.RecognitionStatus = Exports_1.RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus];
    }
    DetailedSpeechPhrase.fromJSON = function (json) {
        return new DetailedSpeechPhrase(json);
    };
    Object.defineProperty(DetailedSpeechPhrase.prototype, "RecognitionStatus", {
        get: function () {
            return this.privDetailedSpeechPhrase.RecognitionStatus;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DetailedSpeechPhrase.prototype, "NBest", {
        get: function () {
            return this.privDetailedSpeechPhrase.NBest;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DetailedSpeechPhrase.prototype, "Duration", {
        get: function () {
            return this.privDetailedSpeechPhrase.Duration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DetailedSpeechPhrase.prototype, "Offset", {
        get: function () {
            return this.privDetailedSpeechPhrase.Offset;
        },
        enumerable: true,
        configurable: true
    });
    return DetailedSpeechPhrase;
}());
exports.DetailedSpeechPhrase = DetailedSpeechPhrase;

//# sourceMappingURL=DetailedSpeechPhrase.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/Enums.js":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/Enums.js ***!
  \***************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @class SynthesisStatus
 * @private
 */
var SynthesisStatus;
(function (SynthesisStatus) {
    /**
     * The response contains valid audio data.
     * @member SynthesisStatus.Success
     */
    SynthesisStatus[SynthesisStatus["Success"] = 0] = "Success";
    /**
     * Indicates the end of audio data. No valid audio data is included in the message.
     * @member SynthesisStatus.SynthesisEnd
     */
    SynthesisStatus[SynthesisStatus["SynthesisEnd"] = 1] = "SynthesisEnd";
    /**
     * Indicates an error occurred during synthesis data processing.
     * @member SynthesisStatus.Error
     */
    SynthesisStatus[SynthesisStatus["Error"] = 2] = "Error";
})(SynthesisStatus = exports.SynthesisStatus || (exports.SynthesisStatus = {}));
var RecognitionStatus;
(function (RecognitionStatus) {
    RecognitionStatus[RecognitionStatus["Success"] = 0] = "Success";
    RecognitionStatus[RecognitionStatus["NoMatch"] = 1] = "NoMatch";
    RecognitionStatus[RecognitionStatus["InitialSilenceTimeout"] = 2] = "InitialSilenceTimeout";
    RecognitionStatus[RecognitionStatus["BabbleTimeout"] = 3] = "BabbleTimeout";
    RecognitionStatus[RecognitionStatus["Error"] = 4] = "Error";
    RecognitionStatus[RecognitionStatus["EndOfDictation"] = 5] = "EndOfDictation";
})(RecognitionStatus = exports.RecognitionStatus || (exports.RecognitionStatus = {}));

//# sourceMappingURL=Enums.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/IntentResponse.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/IntentResponse.js ***!
  \************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// response
Object.defineProperty(exports, "__esModule", { value: true });
var IntentResponse = /** @class */ (function () {
    function IntentResponse(json) {
        this.privIntentResponse = JSON.parse(json);
    }
    IntentResponse.fromJSON = function (json) {
        return new IntentResponse(json);
    };
    Object.defineProperty(IntentResponse.prototype, "query", {
        get: function () {
            return this.privIntentResponse.query;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IntentResponse.prototype, "topScoringIntent", {
        get: function () {
            return this.privIntentResponse.topScoringIntent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IntentResponse.prototype, "entities", {
        get: function () {
            return this.privIntentResponse.entities;
        },
        enumerable: true,
        configurable: true
    });
    return IntentResponse;
}());
exports.IntentResponse = IntentResponse;

//# sourceMappingURL=IntentResponse.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SimpleSpeechPhrase.js ***!
  \****************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var SimpleSpeechPhrase = /** @class */ (function () {
    function SimpleSpeechPhrase(json) {
        this.privSimpleSpeechPhrase = JSON.parse(json);
        this.privSimpleSpeechPhrase.RecognitionStatus = Exports_1.RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus];
    }
    SimpleSpeechPhrase.fromJSON = function (json) {
        return new SimpleSpeechPhrase(json);
    };
    Object.defineProperty(SimpleSpeechPhrase.prototype, "RecognitionStatus", {
        get: function () {
            return this.privSimpleSpeechPhrase.RecognitionStatus;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleSpeechPhrase.prototype, "DisplayText", {
        get: function () {
            return this.privSimpleSpeechPhrase.DisplayText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleSpeechPhrase.prototype, "Offset", {
        get: function () {
            return this.privSimpleSpeechPhrase.Offset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleSpeechPhrase.prototype, "Duration", {
        get: function () {
            return this.privSimpleSpeechPhrase.Duration;
        },
        enumerable: true,
        configurable: true
    });
    return SimpleSpeechPhrase;
}());
exports.SimpleSpeechPhrase = SimpleSpeechPhrase;

//# sourceMappingURL=SimpleSpeechPhrase.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SpeechDetected.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SpeechDetected.js ***!
  \************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var SpeechDetected = /** @class */ (function () {
    function SpeechDetected(json) {
        this.privSpeechStartDetected = JSON.parse(json);
    }
    SpeechDetected.fromJSON = function (json) {
        return new SpeechDetected(json);
    };
    Object.defineProperty(SpeechDetected.prototype, "Offset", {
        get: function () {
            return this.privSpeechStartDetected.Offset;
        },
        enumerable: true,
        configurable: true
    });
    return SpeechDetected;
}());
exports.SpeechDetected = SpeechDetected;

//# sourceMappingURL=SpeechDetected.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SpeechHypothesis.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/SpeechHypothesis.js ***!
  \**************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var SpeechHypothesis = /** @class */ (function () {
    function SpeechHypothesis(json) {
        this.privSpeechHypothesis = JSON.parse(json);
    }
    SpeechHypothesis.fromJSON = function (json) {
        return new SpeechHypothesis(json);
    };
    Object.defineProperty(SpeechHypothesis.prototype, "Text", {
        get: function () {
            return this.privSpeechHypothesis.Text;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechHypothesis.prototype, "Offset", {
        get: function () {
            return this.privSpeechHypothesis.Offset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechHypothesis.prototype, "Duration", {
        get: function () {
            return this.privSpeechHypothesis.Duration;
        },
        enumerable: true,
        configurable: true
    });
    return SpeechHypothesis;
}());
exports.SpeechHypothesis = SpeechHypothesis;

//# sourceMappingURL=SpeechHypothesis.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationHypothesis.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationHypothesis.js ***!
  \*******************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var TranslationStatus_1 = __webpack_require__(/*! ../TranslationStatus */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationStatus.js");
var TranslationHypothesis = /** @class */ (function () {
    function TranslationHypothesis(json) {
        this.privTranslationHypothesis = JSON.parse(json);
        this.privTranslationHypothesis.Translation.TranslationStatus = TranslationStatus_1.TranslationStatus[this.privTranslationHypothesis.Translation.TranslationStatus];
    }
    TranslationHypothesis.fromJSON = function (json) {
        return new TranslationHypothesis(json);
    };
    Object.defineProperty(TranslationHypothesis.prototype, "Duration", {
        get: function () {
            return this.privTranslationHypothesis.Duration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationHypothesis.prototype, "Offset", {
        get: function () {
            return this.privTranslationHypothesis.Offset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationHypothesis.prototype, "Text", {
        get: function () {
            return this.privTranslationHypothesis.Text;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationHypothesis.prototype, "Translation", {
        get: function () {
            return this.privTranslationHypothesis.Translation;
        },
        enumerable: true,
        configurable: true
    });
    return TranslationHypothesis;
}());
exports.TranslationHypothesis = TranslationHypothesis;

//# sourceMappingURL=TranslationHypothesis.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationPhrase.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationPhrase.js ***!
  \***************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var TranslationStatus_1 = __webpack_require__(/*! ../TranslationStatus */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationStatus.js");
var TranslationPhrase = /** @class */ (function () {
    function TranslationPhrase(json) {
        this.privTranslationPhrase = JSON.parse(json);
        this.privTranslationPhrase.RecognitionStatus = Exports_1.RecognitionStatus[this.privTranslationPhrase.RecognitionStatus];
        if (this.privTranslationPhrase.Translation !== undefined) {
            this.privTranslationPhrase.Translation.TranslationStatus = TranslationStatus_1.TranslationStatus[this.privTranslationPhrase.Translation.TranslationStatus];
        }
    }
    TranslationPhrase.fromJSON = function (json) {
        return new TranslationPhrase(json);
    };
    Object.defineProperty(TranslationPhrase.prototype, "RecognitionStatus", {
        get: function () {
            return this.privTranslationPhrase.RecognitionStatus;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationPhrase.prototype, "Offset", {
        get: function () {
            return this.privTranslationPhrase.Offset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationPhrase.prototype, "Duration", {
        get: function () {
            return this.privTranslationPhrase.Duration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationPhrase.prototype, "Text", {
        get: function () {
            return this.privTranslationPhrase.Text;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationPhrase.prototype, "Translation", {
        get: function () {
            return this.privTranslationPhrase.Translation;
        },
        enumerable: true,
        configurable: true
    });
    return TranslationPhrase;
}());
exports.TranslationPhrase = TranslationPhrase;

//# sourceMappingURL=TranslationPhrase.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/TranslationSynthesisEnd.js ***!
  \*********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var TranslationSynthesisEnd = /** @class */ (function () {
    function TranslationSynthesisEnd(json) {
        this.privSynthesisEnd = JSON.parse(json);
        this.privSynthesisEnd.SynthesisStatus = Exports_1.SynthesisStatus[this.privSynthesisEnd.SynthesisStatus];
    }
    TranslationSynthesisEnd.fromJSON = function (json) {
        return new TranslationSynthesisEnd(json);
    };
    Object.defineProperty(TranslationSynthesisEnd.prototype, "SynthesisStatus", {
        get: function () {
            return this.privSynthesisEnd.SynthesisStatus;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationSynthesisEnd.prototype, "FailureReason", {
        get: function () {
            return this.privSynthesisEnd.FailureReason;
        },
        enumerable: true,
        configurable: true
    });
    return TranslationSynthesisEnd;
}());
exports.TranslationSynthesisEnd = TranslationSynthesisEnd;

//# sourceMappingURL=TranslationSynthesisEnd.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceRecognizerBase.js ***!
  \***************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js");
var Exports_2 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var Exports_3 = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var Exports_4 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var SpeechConnectionMessage_Internal_1 = __webpack_require__(/*! ./SpeechConnectionMessage.Internal */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionMessage.Internal.js");
var ServiceRecognizerBase = /** @class */ (function () {
    function ServiceRecognizerBase(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {
        var _this = this;
        this.sendTelemetryData = function () {
            var telemetryData = _this.privRequestSession.getTelemetry();
            // console.warn("Telem: " + telemetryData);
            if (ServiceRecognizerBase.telemetryDataEnabled !== true ||
                _this.privIsDisposed ||
                null === telemetryData) {
                return Exports_2.PromiseHelper.fromResult(true);
            }
            if (!!ServiceRecognizerBase.telemetryData) {
                try {
                    ServiceRecognizerBase.telemetryData(telemetryData);
                    /* tslint:disable:no-empty */
                }
                catch (_a) { }
            }
            return _this.fetchConnection().onSuccessContinueWith(function (connection) {
                return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Text, "telemetry", _this.privRequestSession.requestId, "application/json", telemetryData));
            });
        };
        this.fetchConnection = function () {
            return _this.configureConnection();
        };
        this.receiveMessage = function (successCallback, errorCallBack) {
            return _this.fetchConnection().on(function (connection) {
                return connection.read()
                    .onSuccessContinueWithPromise(function (message) {
                    if (_this.privIsDisposed || !_this.privRequestSession.isRecognizing) {
                        // We're done.
                        return Exports_2.PromiseHelper.fromResult(undefined);
                    }
                    // indicates we are draining the queue and it came with no message;
                    if (!message) {
                        if (!_this.privRequestSession.isRecognizing) {
                            return Exports_2.PromiseHelper.fromResult(true);
                        }
                        else {
                            return _this.receiveMessage(successCallback, errorCallBack);
                        }
                    }
                    var connectionMessage = SpeechConnectionMessage_Internal_1.SpeechConnectionMessage.fromConnectionMessage(message);
                    if (connectionMessage.requestId.toLowerCase() === _this.privRequestSession.requestId.toLowerCase()) {
                        switch (connectionMessage.path.toLowerCase()) {
                            case "turn.start":
                                _this.privMustReportEndOfStream = true;
                                break;
                            case "speech.startdetected":
                                var speechStartDetected = Exports_4.SpeechDetected.fromJSON(connectionMessage.textBody);
                                var speechStartEventArgs = new Exports_3.RecognitionEventArgs(speechStartDetected.Offset, _this.privRequestSession.sessionId);
                                if (!!_this.privRecognizer.speechStartDetected) {
                                    _this.privRecognizer.speechStartDetected(_this.privRecognizer, speechStartEventArgs);
                                }
                                break;
                            case "speech.enddetected":
                                var json = void 0;
                                if (connectionMessage.textBody.length > 0) {
                                    json = connectionMessage.textBody;
                                }
                                else {
                                    // If the request was empty, the JSON returned is empty.
                                    json = "{ Offset: 0 }";
                                }
                                var speechStopDetected = Exports_4.SpeechDetected.fromJSON(json);
                                _this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + _this.privRequestSession.currentTurnAudioOffset);
                                var speechStopEventArgs = new Exports_3.RecognitionEventArgs(speechStopDetected.Offset + _this.privRequestSession.currentTurnAudioOffset, _this.privRequestSession.sessionId);
                                if (!!_this.privRecognizer.speechEndDetected) {
                                    _this.privRecognizer.speechEndDetected(_this.privRecognizer, speechStopEventArgs);
                                }
                                break;
                            case "turn.end":
                                _this.sendTelemetryData();
                                if (_this.privRequestSession.isSpeechEnded && _this.privMustReportEndOfStream) {
                                    _this.privMustReportEndOfStream = false;
                                    _this.cancelRecognitionLocal(Exports_3.CancellationReason.EndOfStream, Exports_3.CancellationErrorCode.NoError, undefined, successCallback);
                                }
                                var sessionStopEventArgs = new Exports_3.SessionEventArgs(_this.privRequestSession.sessionId);
                                _this.privRequestSession.onServiceTurnEndResponse(_this.privRecognizerConfig.isContinuousRecognition);
                                if (!_this.privRecognizerConfig.isContinuousRecognition || _this.privRequestSession.isSpeechEnded) {
                                    if (!!_this.privRecognizer.sessionStopped) {
                                        _this.privRecognizer.sessionStopped(_this.privRecognizer, sessionStopEventArgs);
                                    }
                                    return Exports_2.PromiseHelper.fromResult(true);
                                }
                                else {
                                    _this.fetchConnection().onSuccessContinueWith(function (connection) {
                                        _this.sendSpeechContext(connection);
                                    });
                                }
                            default:
                                _this.processTypeSpecificMessages(connectionMessage, successCallback, errorCallBack);
                        }
                    }
                    return _this.receiveMessage(successCallback, errorCallBack);
                });
            }, function (error) {
            });
        };
        this.sendSpeechServiceConfig = function (connection, requestSession, SpeechServiceConfigJson) {
            // filter out anything that is not required for the service to work.
            if (ServiceRecognizerBase.telemetryDataEnabled !== true) {
                var withTelemetry = JSON.parse(SpeechServiceConfigJson);
                var replacement = {
                    context: {
                        system: withTelemetry.context.system,
                    },
                };
                SpeechServiceConfigJson = JSON.stringify(replacement);
            }
            if (SpeechServiceConfigJson) { // && this.privConnectionId !== this.privSpeechServiceConfigConnectionId) {
                _this.privSpeechServiceConfigConnectionId = _this.privConnectionId;
                return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Text, "speech.config", requestSession.requestId, "application/json", SpeechServiceConfigJson));
            }
            return Exports_2.PromiseHelper.fromResult(true);
        };
        this.sendSpeechContext = function (connection) {
            var speechContextJson = _this.speechContext.toJSON();
            if (speechContextJson) {
                return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Text, "speech.context", _this.privRequestSession.requestId, "application/json", speechContextJson));
            }
            return Exports_2.PromiseHelper.fromResult(true);
        };
        this.sendAudio = function (audioStreamNode) {
            // NOTE: Home-baked promises crash ios safari during the invocation
            // of the error callback chain (looks like the recursion is way too deep, and
            // it blows up the stack). The following construct is a stop-gap that does not
            // bubble the error up the callback chain and hence circumvents this problem.
            // TODO: rewrite with ES6 promises.
            var deferred = new Exports_2.Deferred();
            // The time we last sent data to the service.
            var nextSendTime = Date.now();
            var audioFormat = _this.privAudioSource.format;
            // Max amount to send before we start to throttle
            var fastLaneSizeMs = _this.privRecognizerConfig.parameters.getProperty("SPEECH-TransmitLengthBeforThrottleMs", "5000");
            var maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);
            var readAndUploadCycle = function () {
                // If speech is done, stop sending audio.
                if (!_this.privIsDisposed && !_this.privRequestSession.isSpeechEnded && _this.privRequestSession.isRecognizing) {
                    _this.fetchConnection().on(function (connection) {
                        audioStreamNode.read().on(function (audioStreamChunk) {
                            // we have a new audio chunk to upload.
                            if (_this.privRequestSession.isSpeechEnded) {
                                // If service already recognized audio end then don't send any more audio
                                deferred.resolve(true);
                                return;
                            }
                            var payload;
                            var sendDelay;
                            if (audioStreamChunk.isEnd) {
                                payload = null;
                                sendDelay = 0;
                            }
                            else {
                                payload = audioStreamChunk.buffer;
                                _this.privRequestSession.onAudioSent(payload.byteLength);
                                if (maxSendUnthrottledBytes >= _this.privRequestSession.bytesSent) {
                                    sendDelay = 0;
                                }
                                else {
                                    sendDelay = Math.max(0, nextSendTime - Date.now());
                                }
                            }
                            // Are we ready to send, or need we delay more?
                            setTimeout(function () {
                                if (payload !== null) {
                                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));
                                }
                                var uploaded = connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Binary, "audio", _this.privRequestSession.requestId, null, payload));
                                if (!audioStreamChunk.isEnd) {
                                    uploaded.continueWith(function (_) {
                                        // Regardless of success or failure, schedule the next upload.
                                        // If the underlying connection was broken, the next cycle will
                                        // get a new connection and re-transmit missing audio automatically.
                                        readAndUploadCycle();
                                    });
                                }
                                else {
                                    // the audio stream has been closed, no need to schedule next
                                    // read-upload cycle.
                                    _this.privRequestSession.onSpeechEnded();
                                    deferred.resolve(true);
                                }
                            }, sendDelay);
                        }, function (error) {
                            if (_this.privRequestSession.isSpeechEnded) {
                                // For whatever reason, Reject is used to remove queue subscribers inside
                                // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which
                                // means that sometimes things can be rejected in normal circumstances, without
                                // any errors.
                                deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.
                            }
                            else {
                                // Only reject, if there was a proper error.
                                deferred.reject(error);
                            }
                        });
                    }, function (error) {
                        deferred.reject(error);
                    });
                }
            };
            readAndUploadCycle();
            return deferred.promise();
        };
        if (!authentication) {
            throw new Exports_2.ArgumentNullError("authentication");
        }
        if (!connectionFactory) {
            throw new Exports_2.ArgumentNullError("connectionFactory");
        }
        if (!audioSource) {
            throw new Exports_2.ArgumentNullError("audioSource");
        }
        if (!recognizerConfig) {
            throw new Exports_2.ArgumentNullError("recognizerConfig");
        }
        this.privMustReportEndOfStream = false;
        this.privAuthentication = authentication;
        this.privConnectionFactory = connectionFactory;
        this.privAudioSource = audioSource;
        this.privRecognizerConfig = recognizerConfig;
        this.privIsDisposed = false;
        this.privRecognizer = recognizer;
        this.privRequestSession = new Exports_4.RequestSession(this.privAudioSource.id());
        this.privConnectionEvents = new Exports_2.EventSource();
        this.privDynamicGrammar = new Exports_4.DynamicGrammarBuilder();
        this.privSpeechContext = new Exports_4.SpeechContext(this.privDynamicGrammar);
    }
    Object.defineProperty(ServiceRecognizerBase.prototype, "audioSource", {
        get: function () {
            return this.privAudioSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceRecognizerBase.prototype, "speechContext", {
        get: function () {
            return this.privSpeechContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceRecognizerBase.prototype, "dynamicGrammar", {
        get: function () {
            return this.privDynamicGrammar;
        },
        enumerable: true,
        configurable: true
    });
    ServiceRecognizerBase.prototype.isDisposed = function () {
        return this.privIsDisposed;
    };
    ServiceRecognizerBase.prototype.dispose = function (reason) {
        this.privIsDisposed = true;
        if (this.privConnectionConfigurationPromise) {
            this.privConnectionConfigurationPromise.onSuccessContinueWith(function (connection) {
                connection.dispose(reason);
            });
        }
    };
    Object.defineProperty(ServiceRecognizerBase.prototype, "connectionEvents", {
        get: function () {
            return this.privConnectionEvents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceRecognizerBase.prototype, "recognitionMode", {
        get: function () {
            return this.privRecognizerConfig.recognitionMode;
        },
        enumerable: true,
        configurable: true
    });
    ServiceRecognizerBase.prototype.recognize = function (recoMode, successCallback, errorCallBack) {
        var _this = this;
        // Clear the existing configuration promise to force a re-transmission of config and context.
        this.privConnectionConfigurationPromise = null;
        this.privRecognizerConfig.recognitionMode = recoMode;
        this.privRequestSession.startNewRecognition();
        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);
        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().
        this.connectImpl();
        return this.audioSource
            .attach(this.privRequestSession.audioNodeId)
            .continueWithPromise(function (result) {
            var audioNode;
            if (result.isError) {
                _this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.ConnectionFailure, result.error, successCallback);
                return Exports_2.PromiseHelper.fromError(result.error);
            }
            else {
                audioNode = new Exports_1.ReplayableAudioNode(result.result, _this.audioSource.format);
                _this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);
            }
            return _this.audioSource.deviceInfo.onSuccessContinueWithPromise(function (deviceInfo) {
                _this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };
                return _this.configureConnection()
                    .on(function (_) {
                    var sessionStartEventArgs = new Exports_3.SessionEventArgs(_this.privRequestSession.sessionId);
                    if (!!_this.privRecognizer.sessionStarted) {
                        _this.privRecognizer.sessionStarted(_this.privRecognizer, sessionStartEventArgs);
                    }
                    var messageRetrievalPromise = _this.receiveMessage(successCallback, errorCallBack);
                    var audioSendPromise = _this.sendAudio(audioNode);
                    /* tslint:disable:no-empty */
                    audioSendPromise.on(function (_) { }, function (error) {
                        _this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.RuntimeError, error, successCallback);
                    });
                    var completionPromise = Exports_2.PromiseHelper.whenAll([messageRetrievalPromise, audioSendPromise]);
                    return completionPromise.on(function (r) {
                        return true;
                    }, function (error) {
                        _this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.RuntimeError, error, successCallback);
                    });
                }, function (error) {
                    _this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.ConnectionFailure, error, successCallback);
                }).continueWithPromise(function (result) {
                    if (result.isError) {
                        return Exports_2.PromiseHelper.fromError(result.error);
                    }
                    else {
                        return Exports_2.PromiseHelper.fromResult(true);
                    }
                });
            });
        });
    };
    ServiceRecognizerBase.prototype.stopRecognizing = function () {
        if (this.privRequestSession.isRecognizing) {
            this.privRequestSession.onStopRecognizing();
            this.sendTelemetryData();
            this.audioSource.turnOff();
            this.sendFinalAudio();
            this.privRequestSession.dispose();
        }
    };
    ServiceRecognizerBase.prototype.connect = function () {
        this.connectImpl().result();
    };
    ServiceRecognizerBase.prototype.disconnect = function () {
        this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.NoError, "Disconnecting", undefined);
        if (this.privConnectionPromise.result().isCompleted) {
            if (!this.privConnectionPromise.result().isError) {
                this.privConnectionPromise.result().result.dispose();
                this.privConnectionPromise = null;
            }
        }
        else {
            this.privConnectionPromise.onSuccessContinueWith(function (connection) {
                connection.dispose();
            });
        }
    };
    // Cancels recognition.
    ServiceRecognizerBase.prototype.cancelRecognitionLocal = function (cancellationReason, errorCode, error, cancelRecoCallback) {
        if (!!this.privRequestSession.isRecognizing) {
            this.privRequestSession.onStopRecognizing();
            this.sendTelemetryData();
            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, cancellationReason, errorCode, error, cancelRecoCallback);
        }
    };
    // Establishes a websocket connection to the end point.
    ServiceRecognizerBase.prototype.connectImpl = function (isUnAuthorized) {
        var _this = this;
        if (isUnAuthorized === void 0) { isUnAuthorized = false; }
        if (this.privConnectionPromise) {
            if (this.privConnectionPromise.result().isCompleted &&
                (this.privConnectionPromise.result().isError
                    || this.privConnectionPromise.result().result.state() === Exports_2.ConnectionState.Disconnected)) {
                this.privConnectionId = null;
                this.privConnectionPromise = null;
                return this.connectImpl();
            }
            else {
                return this.privConnectionPromise;
            }
        }
        this.privAuthFetchEventId = Exports_2.createNoDashGuid();
        this.privConnectionId = Exports_2.createNoDashGuid();
        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);
        var authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);
        this.privConnectionPromise = authPromise
            .continueWithPromise(function (result) {
            if (result.isError) {
                _this.privRequestSession.onAuthCompleted(true, result.error);
                throw new Error(result.error);
            }
            else {
                _this.privRequestSession.onAuthCompleted(false);
            }
            var connection = _this.privConnectionFactory.create(_this.privRecognizerConfig, result.result, _this.privConnectionId);
            _this.privRequestSession.listenForServiceTelemetry(connection.events);
            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,
            // it'll stop sending events.
            connection.events.attach(function (event) {
                _this.connectionEvents.onEvent(event);
            });
            return connection.open().onSuccessContinueWithPromise(function (response) {
                if (response.statusCode === 200) {
                    _this.privRequestSession.onPreConnectionStart(_this.privAuthFetchEventId, _this.privConnectionId);
                    _this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);
                    return Exports_2.PromiseHelper.fromResult(connection);
                }
                else if (response.statusCode === 403 && !isUnAuthorized) {
                    return _this.connectImpl(true);
                }
                else {
                    _this.privRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);
                    return Exports_2.PromiseHelper.fromError("Unable to contact server. StatusCode: " + response.statusCode + ", " + _this.privRecognizerConfig.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Endpoint) + " Reason: " + response.reason);
                }
            });
        });
        return this.privConnectionPromise;
    };
    // Takes an established websocket connection to the endpoint and sends speech configuration information.
    ServiceRecognizerBase.prototype.configureConnection = function () {
        var _this = this;
        if (this.privConnectionConfigurationPromise) {
            if (this.privConnectionConfigurationPromise.result().isCompleted &&
                (this.privConnectionConfigurationPromise.result().isError
                    || this.privConnectionConfigurationPromise.result().result.state() === Exports_2.ConnectionState.Disconnected)) {
                this.privConnectionConfigurationPromise = null;
                return this.configureConnection();
            }
            else {
                return this.privConnectionConfigurationPromise;
            }
        }
        this.privConnectionConfigurationPromise = this.connectImpl().onSuccessContinueWithPromise(function (connection) {
            return _this.sendSpeechServiceConfig(connection, _this.privRequestSession, _this.privRecognizerConfig.SpeechServiceConfig.serialize())
                .onSuccessContinueWithPromise(function (_) {
                return _this.sendSpeechContext(connection).onSuccessContinueWith(function (_) {
                    return connection;
                });
            });
        });
        return this.privConnectionConfigurationPromise;
    };
    ServiceRecognizerBase.prototype.sendFinalAudio = function () {
        var _this = this;
        var deferred = new Exports_2.Deferred();
        this.fetchConnection().on(function (connection) {
            connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Binary, "audio", _this.privRequestSession.requestId, null, null)).on(function (_) {
                deferred.resolve(true);
            }, function (error) {
                deferred.reject(error);
            });
        }, function (error) {
            deferred.reject(error);
        });
        return deferred.promise();
    };
    ServiceRecognizerBase.telemetryDataEnabled = true;
    return ServiceRecognizerBase;
}());
exports.ServiceRecognizerBase = ServiceRecognizerBase;

//# sourceMappingURL=ServiceRecognizerBase.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceTelemetryListener.Internal.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceTelemetryListener.Internal.js ***!
  \***************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var RecognitionEvents_1 = __webpack_require__(/*! ./RecognitionEvents */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognitionEvents.js");
// tslint:disable-next-line:max-classes-per-file
var ServiceTelemetryListener = /** @class */ (function () {
    function ServiceTelemetryListener(requestId, audioSourceId, audioNodeId) {
        var _this = this;
        this.privIsDisposed = false;
        this.privListeningTriggerMetric = null;
        this.privMicMetric = null;
        this.privConnectionEstablishMetric = null;
        this.onEvent = function (e) {
            if (_this.privIsDisposed) {
                return;
            }
            if (e instanceof RecognitionEvents_1.RecognitionTriggeredEvent && e.requestId === _this.privRequestId) {
                _this.privListeningTriggerMetric = {
                    End: e.eventTime,
                    Name: "ListeningTrigger",
                    Start: e.eventTime,
                };
            }
            if (e instanceof Exports_1.AudioStreamNodeAttachingEvent && e.audioSourceId === _this.privAudioSourceId && e.audioNodeId === _this.privAudioNodeId) {
                _this.privMicStartTime = e.eventTime;
            }
            if (e instanceof Exports_1.AudioStreamNodeAttachedEvent && e.audioSourceId === _this.privAudioSourceId && e.audioNodeId === _this.privAudioNodeId) {
                _this.privMicStartTime = e.eventTime;
            }
            if (e instanceof Exports_1.AudioSourceErrorEvent && e.audioSourceId === _this.privAudioSourceId) {
                if (!_this.privMicMetric) {
                    _this.privMicMetric = {
                        End: e.eventTime,
                        Error: e.error,
                        Name: "Microphone",
                        Start: _this.privMicStartTime,
                    };
                }
            }
            if (e instanceof Exports_1.AudioStreamNodeErrorEvent && e.audioSourceId === _this.privAudioSourceId && e.audioNodeId === _this.privAudioNodeId) {
                if (!_this.privMicMetric) {
                    _this.privMicMetric = {
                        End: e.eventTime,
                        Error: e.error,
                        Name: "Microphone",
                        Start: _this.privMicStartTime,
                    };
                }
            }
            if (e instanceof Exports_1.AudioStreamNodeDetachedEvent && e.audioSourceId === _this.privAudioSourceId && e.audioNodeId === _this.privAudioNodeId) {
                if (!_this.privMicMetric) {
                    _this.privMicMetric = {
                        End: e.eventTime,
                        Name: "Microphone",
                        Start: _this.privMicStartTime,
                    };
                }
            }
            if (e instanceof RecognitionEvents_1.ConnectingToServiceEvent && e.requestId === _this.privRequestId) {
                _this.privConnectionId = e.sessionId;
            }
            if (e instanceof Exports_1.ConnectionStartEvent && e.connectionId === _this.privConnectionId) {
                _this.privConnectionStartTime = e.eventTime;
            }
            if (e instanceof Exports_1.ConnectionEstablishedEvent && e.connectionId === _this.privConnectionId) {
                if (!_this.privConnectionEstablishMetric) {
                    _this.privConnectionEstablishMetric = {
                        End: e.eventTime,
                        Id: _this.privConnectionId,
                        Name: "Connection",
                        Start: _this.privConnectionStartTime,
                    };
                }
            }
            if (e instanceof Exports_1.ConnectionEstablishErrorEvent && e.connectionId === _this.privConnectionId) {
                if (!_this.privConnectionEstablishMetric) {
                    _this.privConnectionEstablishMetric = {
                        End: e.eventTime,
                        Error: _this.getConnectionError(e.statusCode),
                        Id: _this.privConnectionId,
                        Name: "Connection",
                        Start: _this.privConnectionStartTime,
                    };
                }
            }
            if (e instanceof Exports_1.ConnectionMessageReceivedEvent && e.connectionId === _this.privConnectionId) {
                if (e.message && e.message.headers && e.message.headers.path) {
                    if (!_this.privReceivedMessages[e.message.headers.path]) {
                        _this.privReceivedMessages[e.message.headers.path] = new Array();
                    }
                    _this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);
                }
            }
        };
        this.getTelemetry = function () {
            var metrics = new Array();
            if (_this.privListeningTriggerMetric) {
                metrics.push(_this.privListeningTriggerMetric);
            }
            if (_this.privMicMetric) {
                metrics.push(_this.privMicMetric);
            }
            if (_this.privConnectionEstablishMetric) {
                metrics.push(_this.privConnectionEstablishMetric);
            }
            if (_this.privPhraseLatencies.length > 0) {
                metrics.push({
                    PhraseLatencyMs: _this.privPhraseLatencies,
                });
            }
            if (_this.privHypothesisLatencies.length > 0) {
                metrics.push({
                    FirstHypothesisLatencyMs: _this.privHypothesisLatencies,
                });
            }
            var telemetry = {
                Metrics: metrics,
                ReceivedMessages: _this.privReceivedMessages,
            };
            var json = JSON.stringify(telemetry);
            // We dont want to send the same telemetry again. So clean those out.
            _this.privReceivedMessages = {};
            _this.privListeningTriggerMetric = null;
            _this.privMicMetric = null;
            _this.privConnectionEstablishMetric = null;
            _this.privPhraseLatencies = [];
            _this.privHypothesisLatencies = [];
            return json;
        };
        this.dispose = function () {
            _this.privIsDisposed = true;
        };
        this.getConnectionError = function (statusCode) {
            /*
            -- Websocket status codes --
            NormalClosure = 1000,
            EndpointUnavailable = 1001,
            ProtocolError = 1002,
            InvalidMessageType = 1003,
            Empty = 1005,
            InvalidPayloadData = 1007,
            PolicyViolation = 1008,
            MessageTooBig = 1009,
            MandatoryExtension = 1010,
            InternalServerError = 1011
            */
            switch (statusCode) {
                case 400:
                case 1002:
                case 1003:
                case 1005:
                case 1007:
                case 1008:
                case 1009: return "BadRequest";
                case 401: return "Unauthorized";
                case 403: return "Forbidden";
                case 503:
                case 1001: return "ServerUnavailable";
                case 500:
                case 1011: return "ServerError";
                case 408:
                case 504: return "Timeout";
                default: return "statuscode:" + statusCode.toString();
            }
        };
        this.privRequestId = requestId;
        this.privAudioSourceId = audioSourceId;
        this.privAudioNodeId = audioNodeId;
        this.privReceivedMessages = {};
        this.privPhraseLatencies = [];
        this.privHypothesisLatencies = [];
    }
    ServiceTelemetryListener.prototype.phraseReceived = function (audioReceivedTime) {
        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.
            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);
        }
    };
    ServiceTelemetryListener.prototype.hypothesisReceived = function (audioReceivedTime) {
        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.
            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);
        }
    };
    Object.defineProperty(ServiceTelemetryListener.prototype, "hasTelemetry", {
        // Determines if there are any telemetry events to send to the service.
        get: function () {
            return (Object.keys(this.privReceivedMessages).length !== 0 ||
                this.privListeningTriggerMetric !== null ||
                this.privMicMetric !== null ||
                this.privConnectionEstablishMetric !== null ||
                this.privPhraseLatencies.length !== 0 ||
                this.privHypothesisLatencies.length !== 0);
        },
        enumerable: true,
        configurable: true
    });
    return ServiceTelemetryListener;
}());
exports.ServiceTelemetryListener = ServiceTelemetryListener;

//# sourceMappingURL=ServiceTelemetryListener.Internal.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionFactory.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionFactory.js ***!
  \*****************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js");
var Exports_2 = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Exports_3 = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var Exports_4 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var QueryParameterNames_1 = __webpack_require__(/*! ./QueryParameterNames */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/QueryParameterNames.js");
var SpeechConnectionFactory = /** @class */ (function () {
    function SpeechConnectionFactory() {
        var _this = this;
        this.interactiveRelativeUri = "/speech/recognition/interactive/cognitiveservices/v1";
        this.conversationRelativeUri = "/speech/recognition/conversation/cognitiveservices/v1";
        this.dictationRelativeUri = "/speech/recognition/dictation/cognitiveservices/v1";
        this.create = function (config, authInfo, connectionId) {
            var endpoint = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Endpoint, undefined);
            var queryParams = {};
            var endpointId = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_EndpointId, undefined);
            var language = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage, undefined);
            if (endpointId) {
                if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.DeploymentIdParamName) === -1) {
                    queryParams[QueryParameterNames_1.QueryParameterNames.DeploymentIdParamName] = endpointId;
                }
            }
            else if (language) {
                if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.LanguageParamName) === -1) {
                    queryParams[QueryParameterNames_1.QueryParameterNames.LanguageParamName] = language;
                }
            }
            if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.FormatParamName) === -1) {
                queryParams[QueryParameterNames_1.QueryParameterNames.FormatParamName] = config.parameters.getProperty(Exports_2.OutputFormatPropertyName, Exports_3.OutputFormat[Exports_3.OutputFormat.Simple]).toLowerCase();
            }
            if (!endpoint) {
                var region = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Region, undefined);
                var host = "wss://" + region + ".stt.speech.microsoft.com";
                switch (config.recognitionMode) {
                    case Exports_4.RecognitionMode.Conversation:
                        endpoint = host + _this.conversationRelativeUri;
                        break;
                    case Exports_4.RecognitionMode.Dictation:
                        endpoint = host + _this.dictationRelativeUri;
                        break;
                    default:
                        endpoint = host + _this.interactiveRelativeUri; // default is interactive
                        break;
                }
            }
            var headers = {};
            headers[authInfo.headerName] = authInfo.token;
            headers[QueryParameterNames_1.QueryParameterNames.ConnectionIdHeader] = connectionId;
            return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_4.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), connectionId);
        };
    }
    return SpeechConnectionFactory;
}());
exports.SpeechConnectionFactory = SpeechConnectionFactory;

//# sourceMappingURL=SpeechConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionMessage.Internal.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionMessage.Internal.js ***!
  \**************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var PathHeaderName = "path";
var ContentTypeHeaderName = "content-type";
var RequestIdHeaderName = "x-requestid";
var RequestTimestampHeaderName = "x-timestamp";
var SpeechConnectionMessage = /** @class */ (function (_super) {
    __extends(SpeechConnectionMessage, _super);
    function SpeechConnectionMessage(messageType, path, requestId, contentType, body, additionalHeaders, id) {
        var _this = this;
        if (!path) {
            throw new Exports_1.ArgumentNullError("path");
        }
        if (!requestId) {
            throw new Exports_1.ArgumentNullError("requestId");
        }
        var headers = {};
        headers[PathHeaderName] = path;
        headers[RequestIdHeaderName] = requestId;
        headers[RequestTimestampHeaderName] = new Date().toISOString();
        if (contentType) {
            headers[ContentTypeHeaderName] = contentType;
        }
        if (additionalHeaders) {
            for (var headerName in additionalHeaders) {
                if (headerName) {
                    headers[headerName] = additionalHeaders[headerName];
                }
            }
        }
        if (id) {
            _this = _super.call(this, messageType, body, headers, id) || this;
        }
        else {
            _this = _super.call(this, messageType, body, headers) || this;
        }
        _this.privPath = path;
        _this.privRequestId = requestId;
        _this.privContentType = contentType;
        _this.privAdditionalHeaders = additionalHeaders;
        return _this;
    }
    Object.defineProperty(SpeechConnectionMessage.prototype, "path", {
        get: function () {
            return this.privPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechConnectionMessage.prototype, "requestId", {
        get: function () {
            return this.privRequestId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechConnectionMessage.prototype, "contentType", {
        get: function () {
            return this.privContentType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechConnectionMessage.prototype, "additionalHeaders", {
        get: function () {
            return this.privAdditionalHeaders;
        },
        enumerable: true,
        configurable: true
    });
    SpeechConnectionMessage.fromConnectionMessage = function (message) {
        var path = null;
        var requestId = null;
        var contentType = null;
        var requestTimestamp = null;
        var additionalHeaders = {};
        if (message.headers) {
            for (var headerName in message.headers) {
                if (headerName) {
                    if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {
                        path = message.headers[headerName];
                    }
                    else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {
                        requestId = message.headers[headerName];
                    }
                    else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {
                        requestTimestamp = message.headers[headerName];
                    }
                    else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {
                        contentType = message.headers[headerName];
                    }
                    else {
                        additionalHeaders[headerName] = message.headers[headerName];
                    }
                }
            }
        }
        return new SpeechConnectionMessage(message.messageType, path, requestId, contentType, message.body, additionalHeaders, message.id);
    };
    return SpeechConnectionMessage;
}(Exports_1.ConnectionMessage));
exports.SpeechConnectionMessage = SpeechConnectionMessage;

//# sourceMappingURL=SpeechConnectionMessage.Internal.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechContext.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechContext.js ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Represents the JSON used in the speech.context message sent to the speech service.
 * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.
 */
var SpeechContext = /** @class */ (function () {
    function SpeechContext(dynamicGrammar) {
        this.privContext = {};
        this.privDynamicGrammar = dynamicGrammar;
    }
    /**
     * Adds a section to the speech.context object.
     * @param sectionName Name of the section to add.
     * @param value JSON serializeable object that represents the value.
     */
    SpeechContext.prototype.setSection = function (sectionName, value) {
        this.privContext[sectionName] = value;
    };
    SpeechContext.prototype.toJSON = function () {
        var dgi = this.privDynamicGrammar.generateGrammarObject();
        this.setSection("dgi", dgi);
        var ret = JSON.stringify(this.privContext);
        return ret;
    };
    return SpeechContext;
}());
exports.SpeechContext = SpeechContext;

//# sourceMappingURL=SpeechContext.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechServiceRecognizer.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechServiceRecognizer.js ***!
  \*****************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var Exports_2 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
// tslint:disable-next-line:max-classes-per-file
var SpeechServiceRecognizer = /** @class */ (function (_super) {
    __extends(SpeechServiceRecognizer, _super);
    function SpeechServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) {
        var _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) || this;
        _this.privSpeechRecognizer = speechRecognizer;
        return _this;
    }
    SpeechServiceRecognizer.prototype.processTypeSpecificMessages = function (connectionMessage, successCallback, errorCallBack) {
        var result;
        var resultProps = new Exports_1.PropertyCollection();
        resultProps.setProperty(Exports_1.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        switch (connectionMessage.path.toLowerCase()) {
            case "speech.hypothesis":
                var hypothesis = Exports_2.SpeechHypothesis.fromJSON(connectionMessage.textBody);
                var offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;
                result = new Exports_1.SpeechRecognitionResult(this.privRequestSession.requestId, Exports_1.ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, undefined, connectionMessage.textBody, resultProps);
                this.privRequestSession.onHypothesis(offset);
                var ev = new Exports_1.SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);
                if (!!this.privSpeechRecognizer.recognizing) {
                    try {
                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);
                        /* tslint:disable:no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                break;
            case "speech.phrase":
                var simple = Exports_2.SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);
                var resultReason = Exports_2.EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);
                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);
                if (Exports_1.ResultReason.Canceled === resultReason) {
                    var cancelReason = Exports_2.EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);
                    result = new Exports_1.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, undefined, undefined, undefined, undefined, connectionMessage.textBody, resultProps);
                    if (!!this.privSpeechRecognizer.canceled) {
                        var cancelEvent = new Exports_1.SpeechRecognitionCanceledEventArgs(cancelReason, undefined, cancelReason === Exports_1.CancellationReason.Error ? Exports_1.CancellationErrorCode.ServiceError : Exports_1.CancellationErrorCode.NoError, undefined, this.privRequestSession.sessionId);
                        try {
                            this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);
                            /* tslint:disable:no-empty */
                        }
                        catch (_a) { }
                    }
                }
                else {
                    if (!(this.privRequestSession.isSpeechEnded && resultReason === Exports_1.ResultReason.NoMatch && simple.RecognitionStatus !== Exports_2.RecognitionStatus.InitialSilenceTimeout)) {
                        if (this.privRecognizerConfig.parameters.getProperty(Exports_2.OutputFormatPropertyName) === Exports_1.OutputFormat[Exports_1.OutputFormat.Simple]) {
                            result = new Exports_1.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);
                        }
                        else {
                            var detailed = Exports_2.DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);
                            result = new Exports_1.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === Exports_2.RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, detailed.Offset + this.privRequestSession.currentTurnAudioOffset, undefined, connectionMessage.textBody, resultProps);
                        }
                        var event_1 = new Exports_1.SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);
                        if (!!this.privSpeechRecognizer.recognized) {
                            try {
                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event_1);
                                /* tslint:disable:no-empty */
                            }
                            catch (error) {
                                // Not going to let errors in the event handler
                                // trip things up.
                            }
                        }
                    }
                }
                // report result to promise.
                if (!!successCallback) {
                    try {
                        successCallback(result);
                    }
                    catch (e) {
                        if (!!errorCallBack) {
                            errorCallBack(e);
                        }
                    }
                    // Only invoke the call back once.
                    // and if it's successful don't invoke the
                    // error after that.
                    successCallback = undefined;
                    errorCallBack = undefined;
                }
                break;
            default:
                break;
        }
    };
    // Cancels recognition.
    SpeechServiceRecognizer.prototype.cancelRecognition = function (sessionId, requestId, cancellationReason, errorCode, error, cancelRecoCallback) {
        var properties = new Exports_1.PropertyCollection();
        properties.setProperty(Exports_2.CancellationErrorCodePropertyName, Exports_1.CancellationErrorCode[errorCode]);
        if (!!this.privSpeechRecognizer.canceled) {
            var cancelEvent = new Exports_1.SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);
            try {
                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);
                /* tslint:disable:no-empty */
            }
            catch (_a) { }
        }
        if (!!cancelRecoCallback) {
            var result = new Exports_1.SpeechRecognitionResult(requestId, Exports_1.ResultReason.Canceled, undefined, // Text
            undefined, // Druation
            undefined, // Offset
            error, undefined, // Json
            properties);
            try {
                cancelRecoCallback(result);
                /* tslint:disable:no-empty */
            }
            catch (_b) { }
        }
    };
    return SpeechServiceRecognizer;
}(Exports_2.ServiceRecognizerBase));
exports.SpeechServiceRecognizer = SpeechServiceRecognizer;

//# sourceMappingURL=SpeechServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationConnectionFactory.js ***!
  \**********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.browser/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js");
var Exports_2 = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var Exports_3 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var TestHooksParamName = "testhooks";
var ConnectionIdHeader = "X-ConnectionId";
var TranslationConnectionFactory = /** @class */ (function () {
    function TranslationConnectionFactory() {
        this.create = function (config, authInfo, connectionId) {
            var endpoint = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, undefined);
            if (!endpoint) {
                var region = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, undefined);
                endpoint = "wss://" + region + ".s2s.speech.microsoft.com/speech/translation/cognitiveservices/v1";
            }
            var queryParams = {
                from: config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage),
                to: config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages),
            };
            var voiceName = "voice";
            var featureName = "features";
            if (config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {
                queryParams[voiceName] = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice);
                queryParams[featureName] = "texttospeech";
            }
            var headers = {};
            headers[authInfo.headerName] = authInfo.token;
            headers[ConnectionIdHeader] = connectionId;
            return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_3.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), connectionId);
        };
    }
    return TranslationConnectionFactory;
}());
exports.TranslationConnectionFactory = TranslationConnectionFactory;

//# sourceMappingURL=TranslationConnectionFactory.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationServiceRecognizer.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationServiceRecognizer.js ***!
  \**********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var Exports_2 = __webpack_require__(/*! ../sdk/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var Exports_3 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
// tslint:disable-next-line:max-classes-per-file
var TranslationServiceRecognizer = /** @class */ (function (_super) {
    __extends(TranslationServiceRecognizer, _super);
    function TranslationServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) {
        var _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) || this;
        _this.privTranslationRecognizer = translationRecognizer;
        return _this;
    }
    TranslationServiceRecognizer.prototype.processTypeSpecificMessages = function (connectionMessage, successCallback, errorCallBack) {
        var resultProps = new Exports_2.PropertyCollection();
        if (connectionMessage.messageType === Exports_1.MessageType.Text) {
            resultProps.setProperty(Exports_2.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);
        }
        switch (connectionMessage.path.toLowerCase()) {
            case "translation.hypothesis":
                var result = this.fireEventForResult(Exports_3.TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);
                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);
                if (!!this.privTranslationRecognizer.recognizing) {
                    try {
                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);
                        /* tslint:disable:no-empty */
                    }
                    catch (error) {
                        // Not going to let errors in the event handler
                        // trip things up.
                    }
                }
                break;
            case "translation.phrase":
                var translatedPhrase = Exports_3.TranslationPhrase.fromJSON(connectionMessage.textBody);
                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);
                if (translatedPhrase.RecognitionStatus === Exports_3.RecognitionStatus.Success) {
                    // OK, the recognition was successful. How'd the translation do?
                    var result_1 = this.fireEventForResult(translatedPhrase, resultProps);
                    if (!!this.privTranslationRecognizer.recognized) {
                        try {
                            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result_1);
                            /* tslint:disable:no-empty */
                        }
                        catch (error) {
                            // Not going to let errors in the event handler
                            // trip things up.
                        }
                    }
                    // report result to promise.
                    if (!!successCallback) {
                        try {
                            successCallback(result_1.result);
                        }
                        catch (e) {
                            if (!!errorCallBack) {
                                errorCallBack(e);
                            }
                        }
                        // Only invoke the call back once.
                        // and if it's successful don't invoke the
                        // error after that.
                        successCallback = undefined;
                        errorCallBack = undefined;
                    }
                    break;
                }
                else {
                    var reason = Exports_3.EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);
                    var result_2 = new Exports_2.TranslationRecognitionResult(undefined, this.privRequestSession.requestId, reason, translatedPhrase.Text, translatedPhrase.Duration, this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset, undefined, connectionMessage.textBody, resultProps);
                    if (reason === Exports_2.ResultReason.Canceled) {
                        var cancelReason = Exports_3.EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);
                        var ev = new Exports_2.TranslationRecognitionCanceledEventArgs(this.privRequestSession.sessionId, cancelReason, null, cancelReason === Exports_2.CancellationReason.Error ? Exports_2.CancellationErrorCode.ServiceError : Exports_2.CancellationErrorCode.NoError, result_2);
                        if (!!this.privTranslationRecognizer.canceled) {
                            try {
                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, ev);
                                /* tslint:disable:no-empty */
                            }
                            catch (error) {
                                // Not going to let errors in the event handler
                                // trip things up.
                            }
                        }
                    }
                    else {
                        if (!(this.privRequestSession.isSpeechEnded && reason === Exports_2.ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== Exports_3.RecognitionStatus.InitialSilenceTimeout)) {
                            var ev = new Exports_2.TranslationRecognitionEventArgs(result_2, result_2.offset, this.privRequestSession.sessionId);
                            if (!!this.privTranslationRecognizer.recognized) {
                                try {
                                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);
                                    /* tslint:disable:no-empty */
                                }
                                catch (error) {
                                    // Not going to let errors in the event handler
                                    // trip things up.
                                }
                            }
                        }
                    }
                    // report result to promise.
                    if (!!successCallback) {
                        try {
                            successCallback(result_2);
                        }
                        catch (e) {
                            if (!!errorCallBack) {
                                errorCallBack(e);
                            }
                        }
                        // Only invoke the call back once.
                        // and if it's successful don't invoke the
                        // error after that.
                        successCallback = undefined;
                        errorCallBack = undefined;
                    }
                }
                break;
            case "translation.synthesis":
                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);
                break;
            case "translation.synthesis.end":
                var synthEnd = Exports_3.TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);
                switch (synthEnd.SynthesisStatus) {
                    case Exports_3.SynthesisStatus.Error:
                        if (!!this.privTranslationRecognizer.synthesizing) {
                            var result_3 = new Exports_2.TranslationSynthesisResult(Exports_2.ResultReason.Canceled, undefined);
                            var retEvent = new Exports_2.TranslationSynthesisEventArgs(result_3, this.privRequestSession.sessionId);
                            try {
                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);
                                /* tslint:disable:no-empty */
                            }
                            catch (error) {
                                // Not going to let errors in the event handler
                                // trip things up.
                            }
                        }
                        if (!!this.privTranslationRecognizer.canceled) {
                            // And raise a canceled event to send the rich(er) error message back.
                            var canceledResult = new Exports_2.TranslationRecognitionCanceledEventArgs(this.privRequestSession.sessionId, Exports_2.CancellationReason.Error, synthEnd.FailureReason, Exports_2.CancellationErrorCode.ServiceError, null);
                            try {
                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);
                                /* tslint:disable:no-empty */
                            }
                            catch (error) {
                                // Not going to let errors in the event handler
                                // trip things up.
                            }
                        }
                        break;
                    case Exports_3.SynthesisStatus.Success:
                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
    };
    // Cancels recognition.
    TranslationServiceRecognizer.prototype.cancelRecognition = function (sessionId, requestId, cancellationReason, errorCode, error, cancelRecoCallback) {
        if (!!this.privTranslationRecognizer.canceled) {
            var properties = new Exports_2.PropertyCollection();
            properties.setProperty(Exports_3.CancellationErrorCodePropertyName, Exports_2.CancellationErrorCode[errorCode]);
            var cancelEvent = new Exports_2.TranslationRecognitionCanceledEventArgs(sessionId, cancellationReason, error, errorCode, undefined);
            try {
                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);
                /* tslint:disable:no-empty */
            }
            catch (_a) { }
            if (!!cancelRecoCallback) {
                var result = new Exports_2.TranslationRecognitionResult(undefined, // Translations
                requestId, Exports_2.ResultReason.Canceled, undefined, // Text
                undefined, // Druation
                undefined, // Offset
                error, undefined, // Json
                properties);
                try {
                    cancelRecoCallback(result);
                    /* tslint:disable:no-empty */
                }
                catch (_b) { }
            }
        }
    };
    TranslationServiceRecognizer.prototype.fireEventForResult = function (serviceResult, properties) {
        var translations;
        if (undefined !== serviceResult.Translation.Translations) {
            translations = new Exports_2.Translations();
            for (var _i = 0, _a = serviceResult.Translation.Translations; _i < _a.length; _i++) {
                var translation = _a[_i];
                translations.set(translation.Language, translation.Text);
            }
        }
        var resultReason;
        if (serviceResult instanceof Exports_3.TranslationPhrase) {
            if (serviceResult.Translation.TranslationStatus === Exports_1.TranslationStatus.Success) {
                resultReason = Exports_2.ResultReason.TranslatedSpeech;
            }
            else {
                resultReason = Exports_2.ResultReason.RecognizedSpeech;
            }
        }
        else {
            resultReason = Exports_2.ResultReason.TranslatingSpeech;
        }
        var offset = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;
        var result = new Exports_2.TranslationRecognitionResult(translations, this.privRequestSession.requestId, resultReason, serviceResult.Text, serviceResult.Duration, offset, serviceResult.Translation.FailureReason, JSON.stringify(serviceResult), properties);
        var ev = new Exports_2.TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);
        return ev;
    };
    TranslationServiceRecognizer.prototype.sendSynthesisAudio = function (audio, sessionId) {
        var reason = (undefined === audio) ? Exports_2.ResultReason.SynthesizingAudioCompleted : Exports_2.ResultReason.SynthesizingAudio;
        var result = new Exports_2.TranslationSynthesisResult(reason, audio);
        var retEvent = new Exports_2.TranslationSynthesisEventArgs(result, sessionId);
        if (!!this.privTranslationRecognizer.synthesizing) {
            try {
                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);
                /* tslint:disable:no-empty */
            }
            catch (error) {
                // Not going to let errors in the event handler
                // trip things up.
            }
        }
    };
    return TranslationServiceRecognizer;
}(Exports_3.ServiceRecognizerBase));
exports.TranslationServiceRecognizer = TranslationServiceRecognizer;

//# sourceMappingURL=TranslationServiceRecognizer.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationStatus.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationStatus.js ***!
  \***********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines translation status.
 * @class TranslationStatus
 */
var TranslationStatus;
(function (TranslationStatus) {
    /**
     * @member TranslationStatus.Success
     */
    TranslationStatus[TranslationStatus["Success"] = 0] = "Success";
    /**
     * @member TranslationStatus.Error
     */
    TranslationStatus[TranslationStatus["Error"] = 1] = "Error";
})(TranslationStatus = exports.TranslationStatus || (exports.TranslationStatus = {}));

//# sourceMappingURL=TranslationStatus.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/WebsocketMessageFormatter.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/WebsocketMessageFormatter.js ***!
  \*******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var CRLF = "\r\n";
var WebsocketMessageFormatter = /** @class */ (function () {
    function WebsocketMessageFormatter() {
        var _this = this;
        this.toConnectionMessage = function (message) {
            var deferral = new Exports_1.Deferred();
            try {
                if (message.messageType === Exports_1.MessageType.Text) {
                    var textMessage = message.textContent;
                    var headers = {};
                    var body = null;
                    if (textMessage) {
                        var headerBodySplit = textMessage.split("\r\n\r\n");
                        if (headerBodySplit && headerBodySplit.length > 0) {
                            headers = _this.parseHeaders(headerBodySplit[0]);
                            if (headerBodySplit.length > 1) {
                                body = headerBodySplit[1];
                            }
                        }
                    }
                    deferral.resolve(new Exports_1.ConnectionMessage(message.messageType, body, headers, message.id));
                }
                else if (message.messageType === Exports_1.MessageType.Binary) {
                    var binaryMessage = message.binaryContent;
                    var headers = {};
                    var body = null;
                    if (!binaryMessage || binaryMessage.byteLength < 2) {
                        throw new Error("Invalid binary message format. Header length missing.");
                    }
                    var dataView = new DataView(binaryMessage);
                    var headerLength = dataView.getInt16(0);
                    if (binaryMessage.byteLength < headerLength + 2) {
                        throw new Error("Invalid binary message format. Header content missing.");
                    }
                    var headersString = "";
                    for (var i = 0; i < headerLength; i++) {
                        headersString += String.fromCharCode((dataView).getInt8(i + 2));
                    }
                    headers = _this.parseHeaders(headersString);
                    if (binaryMessage.byteLength > headerLength + 2) {
                        body = binaryMessage.slice(2 + headerLength);
                    }
                    deferral.resolve(new Exports_1.ConnectionMessage(message.messageType, body, headers, message.id));
                }
            }
            catch (e) {
                deferral.reject("Error formatting the message. Error: " + e);
            }
            return deferral.promise();
        };
        this.fromConnectionMessage = function (message) {
            var deferral = new Exports_1.Deferred();
            try {
                if (message.messageType === Exports_1.MessageType.Text) {
                    var payload = "" + _this.makeHeaders(message) + CRLF + (message.textBody ? message.textBody : "");
                    deferral.resolve(new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Text, payload, message.id));
                }
                else if (message.messageType === Exports_1.MessageType.Binary) {
                    var headersString = _this.makeHeaders(message);
                    var content = message.binaryBody;
                    var headerInt8Array = new Int8Array(_this.stringToArrayBuffer(headersString));
                    var payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));
                    var dataView = new DataView(payload);
                    dataView.setInt16(0, headerInt8Array.length);
                    for (var i = 0; i < headerInt8Array.byteLength; i++) {
                        dataView.setInt8(2 + i, headerInt8Array[i]);
                    }
                    if (content) {
                        var bodyInt8Array = new Int8Array(content);
                        for (var i = 0; i < bodyInt8Array.byteLength; i++) {
                            dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);
                        }
                    }
                    deferral.resolve(new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Binary, payload, message.id));
                }
            }
            catch (e) {
                deferral.reject("Error formatting the message. " + e);
            }
            return deferral.promise();
        };
        this.makeHeaders = function (message) {
            var headersString = "";
            if (message.headers) {
                for (var header in message.headers) {
                    if (header) {
                        headersString += header + ": " + message.headers[header] + CRLF;
                    }
                }
            }
            return headersString;
        };
        this.parseHeaders = function (headersString) {
            var headers = {};
            if (headersString) {
                var headerMatches = headersString.match(/[^\r\n]+/g);
                if (headers) {
                    for (var _i = 0, headerMatches_1 = headerMatches; _i < headerMatches_1.length; _i++) {
                        var header = headerMatches_1[_i];
                        if (header) {
                            var separatorIndex = header.indexOf(":");
                            var headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;
                            var headerValue = separatorIndex > 0 && header.length > (separatorIndex + 1) ?
                                header.substr(separatorIndex + 1).trim() :
                                "";
                            headers[headerName] = headerValue;
                        }
                    }
                }
            }
            return headers;
        };
        this.stringToArrayBuffer = function (str) {
            var buffer = new ArrayBuffer(str.length);
            var view = new DataView(buffer);
            for (var i = 0; i < str.length; i++) {
                view.setUint8(i, str.charCodeAt(i));
            }
            return buffer;
        };
    }
    return WebsocketMessageFormatter;
}());
exports.WebsocketMessageFormatter = WebsocketMessageFormatter;

//# sourceMappingURL=WebsocketMessageFormatter.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/AudioSourceEvents.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/AudioSourceEvents.js ***!
  \****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PlatformEvent_1 = __webpack_require__(/*! ./PlatformEvent */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/PlatformEvent.js");
var AudioSourceEvent = /** @class */ (function (_super) {
    __extends(AudioSourceEvent, _super);
    function AudioSourceEvent(eventName, audioSourceId, eventType) {
        if (eventType === void 0) { eventType = PlatformEvent_1.EventType.Info; }
        var _this = _super.call(this, eventName, eventType) || this;
        _this.privAudioSourceId = audioSourceId;
        return _this;
    }
    Object.defineProperty(AudioSourceEvent.prototype, "audioSourceId", {
        get: function () {
            return this.privAudioSourceId;
        },
        enumerable: true,
        configurable: true
    });
    return AudioSourceEvent;
}(PlatformEvent_1.PlatformEvent));
exports.AudioSourceEvent = AudioSourceEvent;
// tslint:disable-next-line:max-classes-per-file
var AudioSourceInitializingEvent = /** @class */ (function (_super) {
    __extends(AudioSourceInitializingEvent, _super);
    function AudioSourceInitializingEvent(audioSourceId) {
        return _super.call(this, "AudioSourceInitializingEvent", audioSourceId) || this;
    }
    return AudioSourceInitializingEvent;
}(AudioSourceEvent));
exports.AudioSourceInitializingEvent = AudioSourceInitializingEvent;
// tslint:disable-next-line:max-classes-per-file
var AudioSourceReadyEvent = /** @class */ (function (_super) {
    __extends(AudioSourceReadyEvent, _super);
    function AudioSourceReadyEvent(audioSourceId) {
        return _super.call(this, "AudioSourceReadyEvent", audioSourceId) || this;
    }
    return AudioSourceReadyEvent;
}(AudioSourceEvent));
exports.AudioSourceReadyEvent = AudioSourceReadyEvent;
// tslint:disable-next-line:max-classes-per-file
var AudioSourceOffEvent = /** @class */ (function (_super) {
    __extends(AudioSourceOffEvent, _super);
    function AudioSourceOffEvent(audioSourceId) {
        return _super.call(this, "AudioSourceOffEvent", audioSourceId) || this;
    }
    return AudioSourceOffEvent;
}(AudioSourceEvent));
exports.AudioSourceOffEvent = AudioSourceOffEvent;
// tslint:disable-next-line:max-classes-per-file
var AudioSourceErrorEvent = /** @class */ (function (_super) {
    __extends(AudioSourceErrorEvent, _super);
    function AudioSourceErrorEvent(audioSourceId, error) {
        var _this = _super.call(this, "AudioSourceErrorEvent", audioSourceId, PlatformEvent_1.EventType.Error) || this;
        _this.privError = error;
        return _this;
    }
    Object.defineProperty(AudioSourceErrorEvent.prototype, "error", {
        get: function () {
            return this.privError;
        },
        enumerable: true,
        configurable: true
    });
    return AudioSourceErrorEvent;
}(AudioSourceEvent));
exports.AudioSourceErrorEvent = AudioSourceErrorEvent;
// tslint:disable-next-line:max-classes-per-file
var AudioStreamNodeEvent = /** @class */ (function (_super) {
    __extends(AudioStreamNodeEvent, _super);
    function AudioStreamNodeEvent(eventName, audioSourceId, audioNodeId) {
        var _this = _super.call(this, eventName, audioSourceId) || this;
        _this.privAudioNodeId = audioNodeId;
        return _this;
    }
    Object.defineProperty(AudioStreamNodeEvent.prototype, "audioNodeId", {
        get: function () {
            return this.privAudioNodeId;
        },
        enumerable: true,
        configurable: true
    });
    return AudioStreamNodeEvent;
}(AudioSourceEvent));
exports.AudioStreamNodeEvent = AudioStreamNodeEvent;
// tslint:disable-next-line:max-classes-per-file
var AudioStreamNodeAttachingEvent = /** @class */ (function (_super) {
    __extends(AudioStreamNodeAttachingEvent, _super);
    function AudioStreamNodeAttachingEvent(audioSourceId, audioNodeId) {
        return _super.call(this, "AudioStreamNodeAttachingEvent", audioSourceId, audioNodeId) || this;
    }
    return AudioStreamNodeAttachingEvent;
}(AudioStreamNodeEvent));
exports.AudioStreamNodeAttachingEvent = AudioStreamNodeAttachingEvent;
// tslint:disable-next-line:max-classes-per-file
var AudioStreamNodeAttachedEvent = /** @class */ (function (_super) {
    __extends(AudioStreamNodeAttachedEvent, _super);
    function AudioStreamNodeAttachedEvent(audioSourceId, audioNodeId) {
        return _super.call(this, "AudioStreamNodeAttachedEvent", audioSourceId, audioNodeId) || this;
    }
    return AudioStreamNodeAttachedEvent;
}(AudioStreamNodeEvent));
exports.AudioStreamNodeAttachedEvent = AudioStreamNodeAttachedEvent;
// tslint:disable-next-line:max-classes-per-file
var AudioStreamNodeDetachedEvent = /** @class */ (function (_super) {
    __extends(AudioStreamNodeDetachedEvent, _super);
    function AudioStreamNodeDetachedEvent(audioSourceId, audioNodeId) {
        return _super.call(this, "AudioStreamNodeDetachedEvent", audioSourceId, audioNodeId) || this;
    }
    return AudioStreamNodeDetachedEvent;
}(AudioStreamNodeEvent));
exports.AudioStreamNodeDetachedEvent = AudioStreamNodeDetachedEvent;
// tslint:disable-next-line:max-classes-per-file
var AudioStreamNodeErrorEvent = /** @class */ (function (_super) {
    __extends(AudioStreamNodeErrorEvent, _super);
    function AudioStreamNodeErrorEvent(audioSourceId, audioNodeId, error) {
        var _this = _super.call(this, "AudioStreamNodeErrorEvent", audioSourceId, audioNodeId) || this;
        _this.privError = error;
        return _this;
    }
    Object.defineProperty(AudioStreamNodeErrorEvent.prototype, "error", {
        get: function () {
            return this.privError;
        },
        enumerable: true,
        configurable: true
    });
    return AudioStreamNodeErrorEvent;
}(AudioStreamNodeEvent));
exports.AudioStreamNodeErrorEvent = AudioStreamNodeErrorEvent;

//# sourceMappingURL=AudioSourceEvents.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ChunkedArrayBufferStream.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ChunkedArrayBufferStream.js ***!
  \***********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var ChunkedArrayBufferStream = /** @class */ (function (_super) {
    __extends(ChunkedArrayBufferStream, _super);
    function ChunkedArrayBufferStream(targetChunkSize, streamId) {
        var _this = _super.call(this, streamId) || this;
        _this.privTargetChunkSize = targetChunkSize;
        _this.privNextBufferReadyBytes = 0;
        return _this;
    }
    ChunkedArrayBufferStream.prototype.writeStreamChunk = function (chunk) {
        // No pending write, and the buffer is the right size so write it.
        if (chunk.isEnd ||
            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {
            _super.prototype.writeStreamChunk.call(this, chunk);
            return;
        }
        var bytesCopiedFromBuffer = 0;
        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {
            // Fill the next buffer.
            if (undefined === this.privNextBufferToWrite) {
                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);
                this.privNextBufferStartTime = chunk.timeReceived;
            }
            // Find out how many bytes we can copy into the read buffer.
            var bytesToCopy = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);
            var targetView = new Uint8Array(this.privNextBufferToWrite);
            var sourceView = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));
            targetView.set(sourceView, this.privNextBufferReadyBytes);
            this.privNextBufferReadyBytes += bytesToCopy;
            bytesCopiedFromBuffer += bytesToCopy;
            // Are we ready to write?
            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {
                _super.prototype.writeStreamChunk.call(this, {
                    buffer: this.privNextBufferToWrite,
                    isEnd: false,
                    timeReceived: this.privNextBufferStartTime,
                });
                this.privNextBufferReadyBytes = 0;
                this.privNextBufferToWrite = undefined;
            }
        }
    };
    ChunkedArrayBufferStream.prototype.close = function () {
        // Send whatever is pending, then close the base class.
        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {
            _super.prototype.writeStreamChunk.call(this, {
                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),
                isEnd: false,
                timeReceived: this.privNextBufferStartTime,
            });
        }
        _super.prototype.close.call(this);
    };
    return ChunkedArrayBufferStream;
}(Exports_1.Stream));
exports.ChunkedArrayBufferStream = ChunkedArrayBufferStream;

//# sourceMappingURL=ChunkedArrayBufferStream.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionEvents.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionEvents.js ***!
  \***************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PlatformEvent_1 = __webpack_require__(/*! ./PlatformEvent */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/PlatformEvent.js");
var ConnectionEvent = /** @class */ (function (_super) {
    __extends(ConnectionEvent, _super);
    function ConnectionEvent(eventName, connectionId, eventType) {
        if (eventType === void 0) { eventType = PlatformEvent_1.EventType.Info; }
        var _this = _super.call(this, eventName, eventType) || this;
        _this.privConnectionId = connectionId;
        return _this;
    }
    Object.defineProperty(ConnectionEvent.prototype, "connectionId", {
        get: function () {
            return this.privConnectionId;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectionEvent;
}(PlatformEvent_1.PlatformEvent));
exports.ConnectionEvent = ConnectionEvent;
// tslint:disable-next-line:max-classes-per-file
var ConnectionStartEvent = /** @class */ (function (_super) {
    __extends(ConnectionStartEvent, _super);
    function ConnectionStartEvent(connectionId, uri, headers) {
        var _this = _super.call(this, "ConnectionStartEvent", connectionId) || this;
        _this.privUri = uri;
        _this.privHeaders = headers;
        return _this;
    }
    Object.defineProperty(ConnectionStartEvent.prototype, "uri", {
        get: function () {
            return this.privUri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionStartEvent.prototype, "headers", {
        get: function () {
            return this.privHeaders;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectionStartEvent;
}(ConnectionEvent));
exports.ConnectionStartEvent = ConnectionStartEvent;
// tslint:disable-next-line:max-classes-per-file
var ConnectionEstablishedEvent = /** @class */ (function (_super) {
    __extends(ConnectionEstablishedEvent, _super);
    function ConnectionEstablishedEvent(connectionId, metadata) {
        return _super.call(this, "ConnectionEstablishedEvent", connectionId) || this;
    }
    return ConnectionEstablishedEvent;
}(ConnectionEvent));
exports.ConnectionEstablishedEvent = ConnectionEstablishedEvent;
// tslint:disable-next-line:max-classes-per-file
var ConnectionClosedEvent = /** @class */ (function (_super) {
    __extends(ConnectionClosedEvent, _super);
    function ConnectionClosedEvent(connectionId, statusCode, reason) {
        var _this = _super.call(this, "ConnectionClosedEvent", connectionId, PlatformEvent_1.EventType.Debug) || this;
        _this.privRreason = reason;
        _this.privStatusCode = statusCode;
        return _this;
    }
    Object.defineProperty(ConnectionClosedEvent.prototype, "reason", {
        get: function () {
            return this.privRreason;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionClosedEvent.prototype, "statusCode", {
        get: function () {
            return this.privStatusCode;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectionClosedEvent;
}(ConnectionEvent));
exports.ConnectionClosedEvent = ConnectionClosedEvent;
// tslint:disable-next-line:max-classes-per-file
var ConnectionEstablishErrorEvent = /** @class */ (function (_super) {
    __extends(ConnectionEstablishErrorEvent, _super);
    function ConnectionEstablishErrorEvent(connectionId, statuscode, reason) {
        var _this = _super.call(this, "ConnectionEstablishErrorEvent", connectionId, PlatformEvent_1.EventType.Error) || this;
        _this.privStatusCode = statuscode;
        _this.privReason = reason;
        return _this;
    }
    Object.defineProperty(ConnectionEstablishErrorEvent.prototype, "reason", {
        get: function () {
            return this.privReason;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionEstablishErrorEvent.prototype, "statusCode", {
        get: function () {
            return this.privStatusCode;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectionEstablishErrorEvent;
}(ConnectionEvent));
exports.ConnectionEstablishErrorEvent = ConnectionEstablishErrorEvent;
// tslint:disable-next-line:max-classes-per-file
var ConnectionMessageReceivedEvent = /** @class */ (function (_super) {
    __extends(ConnectionMessageReceivedEvent, _super);
    function ConnectionMessageReceivedEvent(connectionId, networkReceivedTimeISO, message) {
        var _this = _super.call(this, "ConnectionMessageReceivedEvent", connectionId) || this;
        _this.privNetworkReceivedTime = networkReceivedTimeISO;
        _this.privMessage = message;
        return _this;
    }
    Object.defineProperty(ConnectionMessageReceivedEvent.prototype, "networkReceivedTime", {
        get: function () {
            return this.privNetworkReceivedTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionMessageReceivedEvent.prototype, "message", {
        get: function () {
            return this.privMessage;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectionMessageReceivedEvent;
}(ConnectionEvent));
exports.ConnectionMessageReceivedEvent = ConnectionMessageReceivedEvent;
// tslint:disable-next-line:max-classes-per-file
var ConnectionMessageSentEvent = /** @class */ (function (_super) {
    __extends(ConnectionMessageSentEvent, _super);
    function ConnectionMessageSentEvent(connectionId, networkSentTimeISO, message) {
        var _this = _super.call(this, "ConnectionMessageSentEvent", connectionId) || this;
        _this.privNetworkSentTime = networkSentTimeISO;
        _this.privMessage = message;
        return _this;
    }
    Object.defineProperty(ConnectionMessageSentEvent.prototype, "networkSentTime", {
        get: function () {
            return this.privNetworkSentTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionMessageSentEvent.prototype, "message", {
        get: function () {
            return this.privMessage;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectionMessageSentEvent;
}(ConnectionEvent));
exports.ConnectionMessageSentEvent = ConnectionMessageSentEvent;

//# sourceMappingURL=ConnectionEvents.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionMessage.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionMessage.js ***!
  \****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Error_1 = __webpack_require__(/*! ./Error */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js");
var Guid_1 = __webpack_require__(/*! ./Guid */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js");
var MessageType;
(function (MessageType) {
    MessageType[MessageType["Text"] = 0] = "Text";
    MessageType[MessageType["Binary"] = 1] = "Binary";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
var ConnectionMessage = /** @class */ (function () {
    function ConnectionMessage(messageType, body, headers, id) {
        this.privBody = null;
        if (messageType === MessageType.Text && body && !(typeof (body) === "string")) {
            throw new Error_1.InvalidOperationError("Payload must be a string");
        }
        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {
            throw new Error_1.InvalidOperationError("Payload must be ArrayBuffer");
        }
        this.privMessageType = messageType;
        this.privBody = body;
        this.privHeaders = headers ? headers : {};
        this.privId = id ? id : Guid_1.createNoDashGuid();
    }
    Object.defineProperty(ConnectionMessage.prototype, "messageType", {
        get: function () {
            return this.privMessageType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionMessage.prototype, "headers", {
        get: function () {
            return this.privHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionMessage.prototype, "body", {
        get: function () {
            return this.privBody;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionMessage.prototype, "textBody", {
        get: function () {
            if (this.privMessageType === MessageType.Binary) {
                throw new Error_1.InvalidOperationError("Not supported for binary message");
            }
            return this.privBody;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionMessage.prototype, "binaryBody", {
        get: function () {
            if (this.privMessageType === MessageType.Text) {
                throw new Error_1.InvalidOperationError("Not supported for text message");
            }
            return this.privBody;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionMessage.prototype, "id", {
        get: function () {
            return this.privId;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectionMessage;
}());
exports.ConnectionMessage = ConnectionMessage;

//# sourceMappingURL=ConnectionMessage.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionOpenResponse.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionOpenResponse.js ***!
  \*********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var ConnectionOpenResponse = /** @class */ (function () {
    function ConnectionOpenResponse(statusCode, reason) {
        this.privStatusCode = statusCode;
        this.privReason = reason;
    }
    Object.defineProperty(ConnectionOpenResponse.prototype, "statusCode", {
        get: function () {
            return this.privStatusCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionOpenResponse.prototype, "reason", {
        get: function () {
            return this.privReason;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectionOpenResponse;
}());
exports.ConnectionOpenResponse = ConnectionOpenResponse;

//# sourceMappingURL=ConnectionOpenResponse.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The error that is thrown when an argument passed in is null.
 *
 * @export
 * @class ArgumentNullError
 * @extends {Error}
 */
var ArgumentNullError = /** @class */ (function (_super) {
    __extends(ArgumentNullError, _super);
    /**
     * Creates an instance of ArgumentNullError.
     *
     * @param {string} argumentName - Name of the argument that is null
     *
     * @memberOf ArgumentNullError
     */
    function ArgumentNullError(argumentName) {
        var _this = _super.call(this, argumentName) || this;
        _this.name = "ArgumentNull";
        _this.message = argumentName;
        return _this;
    }
    return ArgumentNullError;
}(Error));
exports.ArgumentNullError = ArgumentNullError;
/**
 * The error that is thrown when an invalid operation is performed in the code.
 *
 * @export
 * @class InvalidOperationError
 * @extends {Error}
 */
// tslint:disable-next-line:max-classes-per-file
var InvalidOperationError = /** @class */ (function (_super) {
    __extends(InvalidOperationError, _super);
    /**
     * Creates an instance of InvalidOperationError.
     *
     * @param {string} error - The error
     *
     * @memberOf InvalidOperationError
     */
    function InvalidOperationError(error) {
        var _this = _super.call(this, error) || this;
        _this.name = "InvalidOperation";
        _this.message = error;
        return _this;
    }
    return InvalidOperationError;
}(Error));
exports.InvalidOperationError = InvalidOperationError;
/**
 * The error that is thrown when an object is disposed.
 *
 * @export
 * @class ObjectDisposedError
 * @extends {Error}
 */
// tslint:disable-next-line:max-classes-per-file
var ObjectDisposedError = /** @class */ (function (_super) {
    __extends(ObjectDisposedError, _super);
    /**
     * Creates an instance of ObjectDisposedError.
     *
     * @param {string} objectName - The object that is disposed
     * @param {string} error - The error
     *
     * @memberOf ObjectDisposedError
     */
    function ObjectDisposedError(objectName, error) {
        var _this = _super.call(this, error) || this;
        _this.name = objectName + "ObjectDisposed";
        _this.message = error;
        return _this;
    }
    return ObjectDisposedError;
}(Error));
exports.ObjectDisposedError = ObjectDisposedError;

//# sourceMappingURL=Error.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/EventSource.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/EventSource.js ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Error_1 = __webpack_require__(/*! ./Error */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js");
var Guid_1 = __webpack_require__(/*! ./Guid */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js");
var EventSource = /** @class */ (function () {
    function EventSource(metadata) {
        var _this = this;
        this.privEventListeners = {};
        this.privIsDisposed = false;
        this.onEvent = function (event) {
            if (_this.isDisposed()) {
                throw (new Error_1.ObjectDisposedError("EventSource"));
            }
            if (_this.metadata) {
                for (var paramName in _this.metadata) {
                    if (paramName) {
                        if (event.metadata) {
                            if (!event.metadata[paramName]) {
                                event.metadata[paramName] = _this.metadata[paramName];
                            }
                        }
                    }
                }
            }
            for (var eventId in _this.privEventListeners) {
                if (eventId && _this.privEventListeners[eventId]) {
                    _this.privEventListeners[eventId](event);
                }
            }
        };
        this.attach = function (onEventCallback) {
            var id = Guid_1.createNoDashGuid();
            _this.privEventListeners[id] = onEventCallback;
            return {
                detach: function () {
                    delete _this.privEventListeners[id];
                },
            };
        };
        this.attachListener = function (listener) {
            return _this.attach(listener.onEvent);
        };
        this.isDisposed = function () {
            return _this.privIsDisposed;
        };
        this.dispose = function () {
            _this.privEventListeners = null;
            _this.privIsDisposed = true;
        };
        this.privMetadata = metadata;
    }
    Object.defineProperty(EventSource.prototype, "metadata", {
        get: function () {
            return this.privMetadata;
        },
        enumerable: true,
        configurable: true
    });
    return EventSource;
}());
exports.EventSource = EventSource;

//# sourceMappingURL=EventSource.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Events.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Events.js ***!
  \*****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Error_1 = __webpack_require__(/*! ./Error */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js");
var EventSource_1 = __webpack_require__(/*! ./EventSource */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/EventSource.js");
var Events = /** @class */ (function () {
    function Events() {
    }
    Object.defineProperty(Events, "instance", {
        get: function () {
            return Events.privInstance;
        },
        enumerable: true,
        configurable: true
    });
    Events.privInstance = new EventSource_1.EventSource();
    Events.setEventSource = function (eventSource) {
        if (!eventSource) {
            throw new Error_1.ArgumentNullError("eventSource");
        }
        Events.privInstance = eventSource;
    };
    return Events;
}());
exports.Events = Events;

//# sourceMappingURL=Events.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./AudioSourceEvents */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/AudioSourceEvents.js"));
__export(__webpack_require__(/*! ./ConnectionEvents */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionEvents.js"));
__export(__webpack_require__(/*! ./ConnectionMessage */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionMessage.js"));
__export(__webpack_require__(/*! ./ConnectionOpenResponse */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionOpenResponse.js"));
__export(__webpack_require__(/*! ./Error */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js"));
__export(__webpack_require__(/*! ./Events */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Events.js"));
__export(__webpack_require__(/*! ./EventSource */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/EventSource.js"));
__export(__webpack_require__(/*! ./Guid */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js"));
__export(__webpack_require__(/*! ./IConnection */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IConnection.js"));
__export(__webpack_require__(/*! ./List */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/List.js"));
__export(__webpack_require__(/*! ./PlatformEvent */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/PlatformEvent.js"));
__export(__webpack_require__(/*! ./Promise */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Promise.js"));
__export(__webpack_require__(/*! ./Queue */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Queue.js"));
__export(__webpack_require__(/*! ./RawWebsocketMessage */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/RawWebsocketMessage.js"));
__export(__webpack_require__(/*! ./RiffPcmEncoder */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/RiffPcmEncoder.js"));
__export(__webpack_require__(/*! ./Stream */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Stream.js"));
var TranslationStatus_1 = __webpack_require__(/*! ../common.speech/TranslationStatus */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/TranslationStatus.js");
exports.TranslationStatus = TranslationStatus_1.TranslationStatus;
__export(__webpack_require__(/*! ./ChunkedArrayBufferStream */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ChunkedArrayBufferStream.js"));

//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var createGuid = function () {
    var d = new Date().getTime();
    var guid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === "x" ? r : (r & 0x3 | 0x8)).toString(16);
    });
    return guid;
};
exports.createGuid = createGuid;
var createNoDashGuid = function () {
    return createGuid().replace(new RegExp("-", "g"), "").toUpperCase();
};
exports.createNoDashGuid = createNoDashGuid;

//# sourceMappingURL=Guid.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IConnection.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IConnection.js ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["None"] = 0] = "None";
    ConnectionState[ConnectionState["Connected"] = 1] = "Connected";
    ConnectionState[ConnectionState["Connecting"] = 2] = "Connecting";
    ConnectionState[ConnectionState["Disconnected"] = 3] = "Disconnected";
})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));

//# sourceMappingURL=IConnection.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/List.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/List.js ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Error_1 = __webpack_require__(/*! ./Error */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js");
var List = /** @class */ (function () {
    function List(list) {
        var _this = this;
        this.privSubscriptionIdCounter = 0;
        this.privAddSubscriptions = {};
        this.privRemoveSubscriptions = {};
        this.privDisposedSubscriptions = {};
        this.privDisposeReason = null;
        this.get = function (itemIndex) {
            _this.throwIfDisposed();
            return _this.privList[itemIndex];
        };
        this.first = function () {
            return _this.get(0);
        };
        this.last = function () {
            return _this.get(_this.length() - 1);
        };
        this.add = function (item) {
            _this.throwIfDisposed();
            _this.insertAt(_this.privList.length, item);
        };
        this.insertAt = function (index, item) {
            _this.throwIfDisposed();
            if (index === 0) {
                _this.privList.unshift(item);
            }
            else if (index === _this.privList.length) {
                _this.privList.push(item);
            }
            else {
                _this.privList.splice(index, 0, item);
            }
            _this.triggerSubscriptions(_this.privAddSubscriptions);
        };
        this.removeFirst = function () {
            _this.throwIfDisposed();
            return _this.removeAt(0);
        };
        this.removeLast = function () {
            _this.throwIfDisposed();
            return _this.removeAt(_this.length() - 1);
        };
        this.removeAt = function (index) {
            _this.throwIfDisposed();
            return _this.remove(index, 1)[0];
        };
        this.remove = function (index, count) {
            _this.throwIfDisposed();
            var removedElements = _this.privList.splice(index, count);
            _this.triggerSubscriptions(_this.privRemoveSubscriptions);
            return removedElements;
        };
        this.clear = function () {
            _this.throwIfDisposed();
            _this.remove(0, _this.length());
        };
        this.length = function () {
            _this.throwIfDisposed();
            return _this.privList.length;
        };
        this.onAdded = function (addedCallback) {
            _this.throwIfDisposed();
            var subscriptionId = _this.privSubscriptionIdCounter++;
            _this.privAddSubscriptions[subscriptionId] = addedCallback;
            return {
                detach: function () {
                    delete _this.privAddSubscriptions[subscriptionId];
                },
            };
        };
        this.onRemoved = function (removedCallback) {
            _this.throwIfDisposed();
            var subscriptionId = _this.privSubscriptionIdCounter++;
            _this.privRemoveSubscriptions[subscriptionId] = removedCallback;
            return {
                detach: function () {
                    delete _this.privRemoveSubscriptions[subscriptionId];
                },
            };
        };
        this.onDisposed = function (disposedCallback) {
            _this.throwIfDisposed();
            var subscriptionId = _this.privSubscriptionIdCounter++;
            _this.privDisposedSubscriptions[subscriptionId] = disposedCallback;
            return {
                detach: function () {
                    delete _this.privDisposedSubscriptions[subscriptionId];
                },
            };
        };
        this.join = function (seperator) {
            _this.throwIfDisposed();
            return _this.privList.join(seperator);
        };
        this.toArray = function () {
            var cloneCopy = Array();
            _this.privList.forEach(function (val) {
                cloneCopy.push(val);
            });
            return cloneCopy;
        };
        this.any = function (callback) {
            _this.throwIfDisposed();
            if (callback) {
                return _this.where(callback).length() > 0;
            }
            else {
                return _this.length() > 0;
            }
        };
        this.all = function (callback) {
            _this.throwIfDisposed();
            return _this.where(callback).length() === _this.length();
        };
        this.forEach = function (callback) {
            _this.throwIfDisposed();
            for (var i = 0; i < _this.length(); i++) {
                callback(_this.privList[i], i);
            }
        };
        this.select = function (callback) {
            _this.throwIfDisposed();
            var selectList = [];
            for (var i = 0; i < _this.privList.length; i++) {
                selectList.push(callback(_this.privList[i], i));
            }
            return new List(selectList);
        };
        this.where = function (callback) {
            _this.throwIfDisposed();
            var filteredList = new List();
            for (var i = 0; i < _this.privList.length; i++) {
                if (callback(_this.privList[i], i)) {
                    filteredList.add(_this.privList[i]);
                }
            }
            return filteredList;
        };
        this.orderBy = function (compareFn) {
            _this.throwIfDisposed();
            var clonedArray = _this.toArray();
            var orderedArray = clonedArray.sort(compareFn);
            return new List(orderedArray);
        };
        this.orderByDesc = function (compareFn) {
            _this.throwIfDisposed();
            return _this.orderBy(function (a, b) { return compareFn(b, a); });
        };
        this.clone = function () {
            _this.throwIfDisposed();
            return new List(_this.toArray());
        };
        this.concat = function (list) {
            _this.throwIfDisposed();
            return new List(_this.privList.concat(list.toArray()));
        };
        this.concatArray = function (array) {
            _this.throwIfDisposed();
            return new List(_this.privList.concat(array));
        };
        this.isDisposed = function () {
            return _this.privList == null;
        };
        this.dispose = function (reason) {
            if (!_this.isDisposed()) {
                _this.privDisposeReason = reason;
                _this.privList = null;
                _this.privAddSubscriptions = null;
                _this.privRemoveSubscriptions = null;
                _this.triggerSubscriptions(_this.privDisposedSubscriptions);
            }
        };
        this.throwIfDisposed = function () {
            if (_this.isDisposed()) {
                throw new Error_1.ObjectDisposedError("List", _this.privDisposeReason);
            }
        };
        this.triggerSubscriptions = function (subscriptions) {
            if (subscriptions) {
                for (var subscriptionId in subscriptions) {
                    if (subscriptionId) {
                        subscriptions[subscriptionId]();
                    }
                }
            }
        };
        this.privList = [];
        // copy the list rather than taking as is.
        if (list) {
            for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                var item = list_1[_i];
                this.privList.push(item);
            }
        }
    }
    return List;
}());
exports.List = List;

//# sourceMappingURL=List.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/PlatformEvent.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/PlatformEvent.js ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Guid_1 = __webpack_require__(/*! ./Guid */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js");
var EventType;
(function (EventType) {
    EventType[EventType["Debug"] = 0] = "Debug";
    EventType[EventType["Info"] = 1] = "Info";
    EventType[EventType["Warning"] = 2] = "Warning";
    EventType[EventType["Error"] = 3] = "Error";
})(EventType = exports.EventType || (exports.EventType = {}));
var PlatformEvent = /** @class */ (function () {
    function PlatformEvent(eventName, eventType) {
        this.privName = eventName;
        this.privEventId = Guid_1.createNoDashGuid();
        this.privEventTime = new Date().toISOString();
        this.privEventType = eventType;
        this.privMetadata = {};
    }
    Object.defineProperty(PlatformEvent.prototype, "name", {
        get: function () {
            return this.privName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformEvent.prototype, "eventId", {
        get: function () {
            return this.privEventId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformEvent.prototype, "eventTime", {
        get: function () {
            return this.privEventTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformEvent.prototype, "eventType", {
        get: function () {
            return this.privEventType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformEvent.prototype, "metadata", {
        get: function () {
            return this.privMetadata;
        },
        enumerable: true,
        configurable: true
    });
    return PlatformEvent;
}());
exports.PlatformEvent = PlatformEvent;

//# sourceMappingURL=PlatformEvent.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Promise.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Promise.js ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Error_1 = __webpack_require__(/*! ./Error */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js");
var PromiseState;
(function (PromiseState) {
    PromiseState[PromiseState["None"] = 0] = "None";
    PromiseState[PromiseState["Resolved"] = 1] = "Resolved";
    PromiseState[PromiseState["Rejected"] = 2] = "Rejected";
})(PromiseState = exports.PromiseState || (exports.PromiseState = {}));
var PromiseResult = /** @class */ (function () {
    function PromiseResult(promiseResultEventSource) {
        var _this = this;
        this.throwIfError = function () {
            if (_this.isError) {
                throw _this.error;
            }
        };
        promiseResultEventSource.on(function (result) {
            if (!_this.privIsCompleted) {
                _this.privIsCompleted = true;
                _this.privIsError = false;
                _this.privResult = result;
            }
        }, function (error) {
            if (!_this.privIsCompleted) {
                _this.privIsCompleted = true;
                _this.privIsError = true;
                _this.privError = error;
            }
        });
    }
    Object.defineProperty(PromiseResult.prototype, "isCompleted", {
        get: function () {
            return this.privIsCompleted;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PromiseResult.prototype, "isError", {
        get: function () {
            return this.privIsError;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PromiseResult.prototype, "error", {
        get: function () {
            return this.privError;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PromiseResult.prototype, "result", {
        get: function () {
            return this.privResult;
        },
        enumerable: true,
        configurable: true
    });
    return PromiseResult;
}());
exports.PromiseResult = PromiseResult;
// tslint:disable-next-line:max-classes-per-file
var PromiseResultEventSource = /** @class */ (function () {
    function PromiseResultEventSource() {
        var _this = this;
        this.setResult = function (result) {
            _this.privOnSetResult(result);
        };
        this.setError = function (error) {
            _this.privOnSetError(error);
        };
        this.on = function (onSetResult, onSetError) {
            _this.privOnSetResult = onSetResult;
            _this.privOnSetError = onSetError;
        };
    }
    return PromiseResultEventSource;
}());
exports.PromiseResultEventSource = PromiseResultEventSource;
// tslint:disable-next-line:max-classes-per-file
var PromiseHelper = /** @class */ (function () {
    function PromiseHelper() {
    }
    PromiseHelper.whenAll = function (promises) {
        if (!promises || promises.length === 0) {
            throw new Error_1.ArgumentNullError("promises");
        }
        var deferred = new Deferred();
        var errors = [];
        var completedPromises = 0;
        var checkForCompletion = function () {
            completedPromises++;
            if (completedPromises === promises.length) {
                if (errors.length === 0) {
                    deferred.resolve(true);
                }
                else {
                    deferred.reject(errors.join(", "));
                }
            }
        };
        for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {
            var promise = promises_1[_i];
            promise.on(function (r) {
                checkForCompletion();
            }, function (e) {
                errors.push(e);
                checkForCompletion();
            });
        }
        return deferred.promise();
    };
    PromiseHelper.fromResult = function (result) {
        var deferred = new Deferred();
        deferred.resolve(result);
        return deferred.promise();
    };
    PromiseHelper.fromError = function (error) {
        var deferred = new Deferred();
        deferred.reject(error);
        return deferred.promise();
    };
    return PromiseHelper;
}());
exports.PromiseHelper = PromiseHelper;
// TODO: replace with ES6 promises
// tslint:disable-next-line:max-classes-per-file
var Promise = /** @class */ (function () {
    function Promise(sink) {
        var _this = this;
        this.result = function () {
            return _this.privSink.result;
        };
        this.continueWith = function (continuationCallback) {
            if (!continuationCallback) {
                throw new Error_1.ArgumentNullError("continuationCallback");
            }
            var continuationDeferral = new Deferred();
            _this.privSink.on(function (r) {
                try {
                    var continuationResult = continuationCallback(_this.privSink.result);
                    continuationDeferral.resolve(continuationResult);
                }
                catch (e) {
                    continuationDeferral.reject(e);
                }
            }, function (error) {
                try {
                    var continuationResult = continuationCallback(_this.privSink.result);
                    continuationDeferral.resolve(continuationResult);
                }
                catch (e) {
                    continuationDeferral.reject("'Error handler for error " + error + " threw error " + e + "'");
                }
            });
            return continuationDeferral.promise();
        };
        this.onSuccessContinueWith = function (continuationCallback) {
            if (!continuationCallback) {
                throw new Error_1.ArgumentNullError("continuationCallback");
            }
            var continuationDeferral = new Deferred();
            _this.privSink.on(function (r) {
                try {
                    var continuationResult = continuationCallback(r);
                    continuationDeferral.resolve(continuationResult);
                }
                catch (e) {
                    continuationDeferral.reject(e);
                }
            }, function (error) {
                continuationDeferral.reject(error);
            });
            return continuationDeferral.promise();
        };
        this.continueWithPromise = function (continuationCallback) {
            if (!continuationCallback) {
                throw new Error_1.ArgumentNullError("continuationCallback");
            }
            var continuationDeferral = new Deferred();
            _this.privSink.on(function (r) {
                try {
                    var continuationPromise = continuationCallback(_this.privSink.result);
                    if (!continuationPromise) {
                        throw new Error("'Continuation callback did not return promise'");
                    }
                    continuationPromise.on(function (continuationResult) {
                        continuationDeferral.resolve(continuationResult);
                    }, function (e) {
                        continuationDeferral.reject(e);
                    });
                }
                catch (e) {
                    continuationDeferral.reject(e);
                }
            }, function (error) {
                try {
                    var continuationPromise = continuationCallback(_this.privSink.result);
                    if (!continuationPromise) {
                        throw new Error("Continuation callback did not return promise");
                    }
                    continuationPromise.on(function (continuationResult) {
                        continuationDeferral.resolve(continuationResult);
                    }, function (e) {
                        continuationDeferral.reject(e);
                    });
                }
                catch (e) {
                    continuationDeferral.reject("'Error handler for error " + error + " threw error " + e + "'");
                }
            });
            return continuationDeferral.promise();
        };
        this.onSuccessContinueWithPromise = function (continuationCallback) {
            if (!continuationCallback) {
                throw new Error_1.ArgumentNullError("continuationCallback");
            }
            var continuationDeferral = new Deferred();
            _this.privSink.on(function (r) {
                try {
                    var continuationPromise = continuationCallback(r);
                    if (!continuationPromise) {
                        throw new Error("Continuation callback did not return promise");
                    }
                    continuationPromise.on(function (continuationResult) {
                        continuationDeferral.resolve(continuationResult);
                    }, function (e) {
                        continuationDeferral.reject(e);
                    });
                }
                catch (e) {
                    continuationDeferral.reject(e);
                }
            }, function (error) {
                continuationDeferral.reject(error);
            });
            return continuationDeferral.promise();
        };
        this.on = function (successCallback, errorCallback) {
            if (!successCallback) {
                throw new Error_1.ArgumentNullError("successCallback");
            }
            if (!errorCallback) {
                throw new Error_1.ArgumentNullError("errorCallback");
            }
            _this.privSink.on(successCallback, errorCallback);
            return _this;
        };
        this.finally = function (callback) {
            if (!callback) {
                throw new Error_1.ArgumentNullError("callback");
            }
            var callbackWrapper = function (_) {
                callback();
            };
            return _this.on(callbackWrapper, callbackWrapper);
        };
        this.privSink = sink;
    }
    return Promise;
}());
exports.Promise = Promise;
// tslint:disable-next-line:max-classes-per-file
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.state = function () {
            return _this.privSink.state;
        };
        this.promise = function () {
            return _this.privPromise;
        };
        this.resolve = function (result) {
            _this.privSink.resolve(result);
            return _this;
        };
        this.reject = function (error) {
            _this.privSink.reject(error);
            return _this;
        };
        this.privSink = new Sink();
        this.privPromise = new Promise(this.privSink);
    }
    return Deferred;
}());
exports.Deferred = Deferred;
// tslint:disable-next-line:max-classes-per-file
var Sink = /** @class */ (function () {
    function Sink() {
        var _this = this;
        this.privState = PromiseState.None;
        this.privPromiseResult = null;
        this.privPromiseResultEvents = null;
        this.privSuccessHandlers = [];
        this.privErrorHandlers = [];
        this.resolve = function (result) {
            if (_this.privState !== PromiseState.None) {
                throw new Error("'Cannot resolve a completed promise'");
            }
            _this.privState = PromiseState.Resolved;
            _this.privPromiseResultEvents.setResult(result);
            for (var i = 0; i < _this.privSuccessHandlers.length; i++) {
                _this.executeSuccessCallback(result, _this.privSuccessHandlers[i], _this.privErrorHandlers[i]);
            }
            _this.detachHandlers();
        };
        this.reject = function (error) {
            if (_this.privState !== PromiseState.None) {
                throw new Error("'Cannot reject a completed promise'");
            }
            _this.privState = PromiseState.Rejected;
            _this.privPromiseResultEvents.setError(error);
            for (var _i = 0, _a = _this.privErrorHandlers; _i < _a.length; _i++) {
                var errorHandler = _a[_i];
                _this.executeErrorCallback(error, errorHandler);
            }
            _this.detachHandlers();
        };
        this.on = function (successCallback, errorCallback) {
            if (successCallback == null) {
                successCallback = function (r) { return; };
            }
            if (_this.privState === PromiseState.None) {
                _this.privSuccessHandlers.push(successCallback);
                _this.privErrorHandlers.push(errorCallback);
            }
            else {
                if (_this.privState === PromiseState.Resolved) {
                    _this.executeSuccessCallback(_this.privPromiseResult.result, successCallback, errorCallback);
                }
                else if (_this.privState === PromiseState.Rejected) {
                    _this.executeErrorCallback(_this.privPromiseResult.error, errorCallback);
                }
                _this.detachHandlers();
            }
        };
        this.executeSuccessCallback = function (result, successCallback, errorCallback) {
            try {
                successCallback(result);
            }
            catch (e) {
                _this.executeErrorCallback("'Unhandled callback error: " + e + "'", errorCallback);
            }
        };
        this.executeErrorCallback = function (error, errorCallback) {
            if (errorCallback) {
                try {
                    errorCallback(error);
                }
                catch (e) {
                    throw new Error("'Unhandled callback error: " + e + ". InnerError: " + error + "'");
                }
            }
            else {
                throw new Error("'Unhandled error: " + error + "'");
            }
        };
        this.detachHandlers = function () {
            _this.privErrorHandlers = [];
            _this.privSuccessHandlers = [];
        };
        this.privPromiseResultEvents = new PromiseResultEventSource();
        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);
    }
    Object.defineProperty(Sink.prototype, "state", {
        get: function () {
            return this.privState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sink.prototype, "result", {
        get: function () {
            return this.privPromiseResult;
        },
        enumerable: true,
        configurable: true
    });
    return Sink;
}());
exports.Sink = Sink;

//# sourceMappingURL=Promise.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Queue.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Queue.js ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Error_1 = __webpack_require__(/*! ./Error */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js");
var List_1 = __webpack_require__(/*! ./List */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/List.js");
var Promise_1 = __webpack_require__(/*! ./Promise */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Promise.js");
var SubscriberType;
(function (SubscriberType) {
    SubscriberType[SubscriberType["Dequeue"] = 0] = "Dequeue";
    SubscriberType[SubscriberType["Peek"] = 1] = "Peek";
})(SubscriberType || (SubscriberType = {}));
var Queue = /** @class */ (function () {
    function Queue(list) {
        var _this = this;
        this.privPromiseStore = new List_1.List();
        this.privIsDrainInProgress = false;
        this.privIsDisposing = false;
        this.privDisposeReason = null;
        this.enqueue = function (item) {
            _this.throwIfDispose();
            _this.enqueueFromPromise(Promise_1.PromiseHelper.fromResult(item));
        };
        this.enqueueFromPromise = function (promise) {
            _this.throwIfDispose();
            _this.privPromiseStore.add(promise);
            promise.finally(function () {
                while (_this.privPromiseStore.length() > 0) {
                    if (!_this.privPromiseStore.first().result().isCompleted) {
                        break;
                    }
                    else {
                        var p = _this.privPromiseStore.removeFirst();
                        if (!p.result().isError) {
                            _this.privList.add(p.result().result);
                        }
                        else {
                            // TODO: Log as warning.
                        }
                    }
                }
            });
        };
        this.dequeue = function () {
            _this.throwIfDispose();
            var deferredSubscriber = new Promise_1.Deferred();
            if (_this.privSubscribers) {
                _this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });
                _this.drain();
            }
            return deferredSubscriber.promise();
        };
        this.peek = function () {
            _this.throwIfDispose();
            var deferredSubscriber = new Promise_1.Deferred();
            var subs = _this.privSubscribers;
            if (subs) {
                _this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });
                _this.drain();
            }
            return deferredSubscriber.promise();
        };
        this.length = function () {
            _this.throwIfDispose();
            return _this.privList.length();
        };
        this.isDisposed = function () {
            return _this.privSubscribers == null;
        };
        this.drainAndDispose = function (pendingItemProcessor, reason) {
            if (!_this.isDisposed() && !_this.privIsDisposing) {
                _this.privDisposeReason = reason;
                _this.privIsDisposing = true;
                var subs = _this.privSubscribers;
                if (subs) {
                    while (subs.length() > 0) {
                        var subscriber = subs.removeFirst();
                        // TODO: this needs work (Resolve(null) instead?).
                        subscriber.deferral.resolve(undefined);
                        // subscriber.deferral.reject("Disposed");
                    }
                    // note: this block assumes cooperative multitasking, i.e.,
                    // between the if-statement and the assignment there are no
                    // thread switches.
                    // Reason is that between the initial const = this.; and this
                    // point there is the derral.resolve() operation that might have
                    // caused recursive calls to the Queue, especially, calling
                    // Dispose() on the queue alredy (which would reset the var
                    // here to null!).
                    // That should generally hold true for javascript...
                    if (_this.privSubscribers === subs) {
                        _this.privSubscribers = subs;
                    }
                }
                for (var _i = 0, _a = _this.privDetachables; _i < _a.length; _i++) {
                    var detachable = _a[_i];
                    detachable.detach();
                }
                if (_this.privPromiseStore.length() > 0 && pendingItemProcessor) {
                    return Promise_1.PromiseHelper
                        .whenAll(_this.privPromiseStore.toArray())
                        .continueWith(function () {
                        _this.privSubscribers = null;
                        _this.privList.forEach(function (item, index) {
                            pendingItemProcessor(item);
                        });
                        _this.privList = null;
                        return true;
                    });
                }
                else {
                    _this.privSubscribers = null;
                    _this.privList = null;
                }
            }
            return Promise_1.PromiseHelper.fromResult(true);
        };
        this.dispose = function (reason) {
            _this.drainAndDispose(null, reason);
        };
        this.drain = function () {
            if (!_this.privIsDrainInProgress && !_this.privIsDisposing) {
                _this.privIsDrainInProgress = true;
                var subs = _this.privSubscribers;
                var lists = _this.privList;
                if (subs && lists) {
                    while (lists.length() > 0 && subs.length() > 0 && !_this.privIsDisposing) {
                        var subscriber = subs.removeFirst();
                        if (subscriber.type === SubscriberType.Peek) {
                            subscriber.deferral.resolve(lists.first());
                        }
                        else {
                            var dequeuedItem = lists.removeFirst();
                            subscriber.deferral.resolve(dequeuedItem);
                        }
                    }
                    // note: this block assumes cooperative multitasking, i.e.,
                    // between the if-statement and the assignment there are no
                    // thread switches.
                    // Reason is that between the initial const = this.; and this
                    // point there is the derral.resolve() operation that might have
                    // caused recursive calls to the Queue, especially, calling
                    // Dispose() on the queue alredy (which would reset the var
                    // here to null!).
                    // That should generally hold true for javascript...
                    if (_this.privSubscribers === subs) {
                        _this.privSubscribers = subs;
                    }
                    // note: this block assumes cooperative multitasking, i.e.,
                    // between the if-statement and the assignment there are no
                    // thread switches.
                    // Reason is that between the initial const = this.; and this
                    // point there is the derral.resolve() operation that might have
                    // caused recursive calls to the Queue, especially, calling
                    // Dispose() on the queue alredy (which would reset the var
                    // here to null!).
                    // That should generally hold true for javascript...
                    if (_this.privList === lists) {
                        _this.privList = lists;
                    }
                }
                _this.privIsDrainInProgress = false;
            }
        };
        this.throwIfDispose = function () {
            if (_this.isDisposed()) {
                if (_this.privDisposeReason) {
                    throw new Error_1.InvalidOperationError(_this.privDisposeReason);
                }
                throw new Error_1.ObjectDisposedError("Queue");
            }
            else if (_this.privIsDisposing) {
                throw new Error_1.InvalidOperationError("Queue disposing");
            }
        };
        this.privList = list ? list : new List_1.List();
        this.privDetachables = [];
        this.privSubscribers = new List_1.List();
        this.privDetachables.push(this.privList.onAdded(this.drain));
    }
    return Queue;
}());
exports.Queue = Queue;

//# sourceMappingURL=Queue.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/RawWebsocketMessage.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/RawWebsocketMessage.js ***!
  \******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var ConnectionMessage_1 = __webpack_require__(/*! ./ConnectionMessage */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/ConnectionMessage.js");
var Error_1 = __webpack_require__(/*! ./Error */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js");
var Guid_1 = __webpack_require__(/*! ./Guid */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js");
var RawWebsocketMessage = /** @class */ (function () {
    function RawWebsocketMessage(messageType, payload, id) {
        this.privPayload = null;
        if (!payload) {
            throw new Error_1.ArgumentNullError("payload");
        }
        if (messageType === ConnectionMessage_1.MessageType.Binary && !(payload instanceof ArrayBuffer)) {
            throw new Error_1.InvalidOperationError("Payload must be ArrayBuffer");
        }
        if (messageType === ConnectionMessage_1.MessageType.Text && !(typeof (payload) === "string")) {
            throw new Error_1.InvalidOperationError("Payload must be a string");
        }
        this.privMessageType = messageType;
        this.privPayload = payload;
        this.privId = id ? id : Guid_1.createNoDashGuid();
    }
    Object.defineProperty(RawWebsocketMessage.prototype, "messageType", {
        get: function () {
            return this.privMessageType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RawWebsocketMessage.prototype, "payload", {
        get: function () {
            return this.privPayload;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RawWebsocketMessage.prototype, "textContent", {
        get: function () {
            if (this.privMessageType === ConnectionMessage_1.MessageType.Binary) {
                throw new Error_1.InvalidOperationError("Not supported for binary message");
            }
            return this.privPayload;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RawWebsocketMessage.prototype, "binaryContent", {
        get: function () {
            if (this.privMessageType === ConnectionMessage_1.MessageType.Text) {
                throw new Error_1.InvalidOperationError("Not supported for text message");
            }
            return this.privPayload;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RawWebsocketMessage.prototype, "id", {
        get: function () {
            return this.privId;
        },
        enumerable: true,
        configurable: true
    });
    return RawWebsocketMessage;
}());
exports.RawWebsocketMessage = RawWebsocketMessage;

//# sourceMappingURL=RawWebsocketMessage.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/RiffPcmEncoder.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/RiffPcmEncoder.js ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var RiffPcmEncoder = /** @class */ (function () {
    function RiffPcmEncoder(actualSampleRate, desiredSampleRate) {
        var _this = this;
        this.privChannelCount = 1;
        this.encode = function (needHeader, actualAudioFrame) {
            var audioFrame = _this.downSampleAudioFrame(actualAudioFrame, _this.privActualSampleRate, _this.privDesiredSampleRate);
            if (!audioFrame) {
                return null;
            }
            var audioLength = audioFrame.length * 2;
            if (!needHeader) {
                var buffer_1 = new ArrayBuffer(audioLength);
                var view_1 = new DataView(buffer_1);
                _this.floatTo16BitPCM(view_1, 0, audioFrame);
                return buffer_1;
            }
            var buffer = new ArrayBuffer(44 + audioLength);
            var bitsPerSample = 16;
            var bytesPerSample = bitsPerSample / 8;
            // We dont know ahead of time about the length of audio to stream. So set to 0.
            var fileLength = 0;
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView
            var view = new DataView(buffer);
            /* RIFF identifier */
            _this.setString(view, 0, "RIFF");
            /* file length */
            view.setUint32(4, fileLength, true);
            /* RIFF type & Format */
            _this.setString(view, 8, "WAVEfmt ");
            /* format chunk length */
            view.setUint32(16, 16, true);
            /* sample format (raw) */
            view.setUint16(20, 1, true);
            /* channel count */
            view.setUint16(22, _this.privChannelCount, true);
            /* sample rate */
            view.setUint32(24, _this.privDesiredSampleRate, true);
            /* byte rate (sample rate * block align) */
            view.setUint32(28, _this.privDesiredSampleRate * _this.privChannelCount * bytesPerSample, true);
            /* block align (channel count * bytes per sample) */
            view.setUint16(32, _this.privChannelCount * bytesPerSample, true);
            /* bits per sample */
            view.setUint16(34, bitsPerSample, true);
            /* data chunk identifier */
            _this.setString(view, 36, "data");
            /* data chunk length */
            view.setUint32(40, fileLength, true);
            _this.floatTo16BitPCM(view, 44, audioFrame);
            return buffer;
        };
        this.setString = function (view, offset, str) {
            for (var i = 0; i < str.length; i++) {
                view.setUint8(offset + i, str.charCodeAt(i));
            }
        };
        this.floatTo16BitPCM = function (view, offset, input) {
            for (var i = 0; i < input.length; i++, offset += 2) {
                var s = Math.max(-1, Math.min(1, input[i]));
                view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
            }
        };
        this.downSampleAudioFrame = function (srcFrame, srcRate, dstRate) {
            if (dstRate === srcRate || dstRate > srcRate) {
                return srcFrame;
            }
            var ratio = srcRate / dstRate;
            var dstLength = Math.round(srcFrame.length / ratio);
            var dstFrame = new Float32Array(dstLength);
            var srcOffset = 0;
            var dstOffset = 0;
            while (dstOffset < dstLength) {
                var nextSrcOffset = Math.round((dstOffset + 1) * ratio);
                var accum = 0;
                var count = 0;
                while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {
                    accum += srcFrame[srcOffset++];
                    count++;
                }
                dstFrame[dstOffset++] = accum / count;
            }
            return dstFrame;
        };
        this.privActualSampleRate = actualSampleRate;
        this.privDesiredSampleRate = desiredSampleRate;
    }
    return RiffPcmEncoder;
}());
exports.RiffPcmEncoder = RiffPcmEncoder;

//# sourceMappingURL=RiffPcmEncoder.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Stream.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Stream.js ***!
  \*****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Error_1 = __webpack_require__(/*! ./Error */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Error.js");
var Guid_1 = __webpack_require__(/*! ./Guid */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js");
var Queue_1 = __webpack_require__(/*! ./Queue */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Queue.js");
var Stream = /** @class */ (function () {
    function Stream(streamId) {
        var _this = this;
        this.privReaderIdCounter = 1;
        this.privIsEnded = false;
        this.getReader = function () {
            var readerId = _this.privReaderIdCounter;
            _this.privReaderIdCounter++;
            var readerQueue = new Queue_1.Queue();
            var currentLength = _this.privStreambuffer.length;
            _this.privReaderQueues[readerId] = readerQueue;
            for (var i = 0; i < currentLength; i++) {
                readerQueue.enqueue(_this.privStreambuffer[i]);
            }
            return new StreamReader(_this.privId, readerQueue, function () {
                delete _this.privReaderQueues[readerId];
            });
        };
        this.throwIfClosed = function () {
            if (_this.privIsEnded) {
                throw new Error_1.InvalidOperationError("Stream closed");
            }
        };
        this.privId = streamId ? streamId : Guid_1.createNoDashGuid();
        this.privStreambuffer = [];
        this.privReaderQueues = {};
    }
    Object.defineProperty(Stream.prototype, "isClosed", {
        get: function () {
            return this.privIsEnded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stream.prototype, "id", {
        get: function () {
            return this.privId;
        },
        enumerable: true,
        configurable: true
    });
    Stream.prototype.close = function () {
        if (!this.privIsEnded) {
            this.writeStreamChunk({
                buffer: null,
                isEnd: true,
                timeReceived: Date.now(),
            });
            this.privIsEnded = true;
        }
    };
    Stream.prototype.writeStreamChunk = function (streamChunk) {
        this.throwIfClosed();
        this.privStreambuffer.push(streamChunk);
        for (var readerId in this.privReaderQueues) {
            if (!this.privReaderQueues[readerId].isDisposed()) {
                try {
                    this.privReaderQueues[readerId].enqueue(streamChunk);
                }
                catch (e) {
                    // Do nothing
                }
            }
        }
    };
    return Stream;
}());
exports.Stream = Stream;
// tslint:disable-next-line:max-classes-per-file
var StreamReader = /** @class */ (function () {
    function StreamReader(streamId, readerQueue, onClose) {
        var _this = this;
        this.privIsClosed = false;
        this.read = function () {
            if (_this.isClosed) {
                throw new Error_1.InvalidOperationError("StreamReader closed");
            }
            return _this.privReaderQueue
                .dequeue()
                .onSuccessContinueWith(function (streamChunk) {
                if (streamChunk.isEnd) {
                    _this.privReaderQueue.dispose("End of stream reached");
                }
                return streamChunk;
            });
        };
        this.close = function () {
            if (!_this.privIsClosed) {
                _this.privIsClosed = true;
                _this.privReaderQueue.dispose("StreamReader closed");
                _this.privOnClose();
            }
        };
        this.privReaderQueue = readerQueue;
        this.privOnClose = onClose;
        this.privStreamId = streamId;
    }
    Object.defineProperty(StreamReader.prototype, "isClosed", {
        get: function () {
            return this.privIsClosed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StreamReader.prototype, "streamId", {
        get: function () {
            return this.privStreamId;
        },
        enumerable: true,
        configurable: true
    });
    return StreamReader;
}());
exports.StreamReader = StreamReader;

//# sourceMappingURL=Stream.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig.js ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../../common.browser/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/Exports.js");
var Contracts_1 = __webpack_require__(/*! ../Contracts */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js");
var Exports_2 = __webpack_require__(/*! ../Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var AudioInputStream_1 = __webpack_require__(/*! ./AudioInputStream */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioInputStream.js");
/**
 * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).
 * @class AudioConfig
 */
var AudioConfig = /** @class */ (function () {
    function AudioConfig() {
    }
    /**
     * Creates an AudioConfig object representing the default microphone on the system.
     * @member AudioConfig.fromDefaultMicrophoneInput
     * @function
     * @public
     * @returns {AudioConfig} The audio input configuration being created.
     */
    AudioConfig.fromDefaultMicrophoneInput = function () {
        var pcmRecorder = new Exports_1.PcmRecorder();
        return new AudioConfigImpl(new Exports_1.MicAudioSource(pcmRecorder, AudioInputStream_1.bufferSize));
    };
    /**
     * Creates an AudioConfig object representing a microphone with the specified device ID.
     * @member AudioConfig.fromMicrophoneInput
     * @function
     * @public
     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.
     *        Default microphone is used the value is omitted.
     * @returns {AudioConfig} The audio input configuration being created.
     */
    AudioConfig.fromMicrophoneInput = function (deviceId) {
        var pcmRecorder = new Exports_1.PcmRecorder();
        return new AudioConfigImpl(new Exports_1.MicAudioSource(pcmRecorder, AudioInputStream_1.bufferSize, deviceId));
    };
    /**
     * Creates an AudioConfig object representing the specified file.
     * @member AudioConfig.fromWavFileInput
     * @function
     * @public
     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM with 16-bit
     *        samples, 16 kHz sample rate, and a single channel (Mono) is supported.
     * @returns {AudioConfig} The audio input configuration being created.
     */
    AudioConfig.fromWavFileInput = function (file) {
        return new AudioConfigImpl(new Exports_1.FileAudioSource(file));
    };
    /**
     * Creates an AudioConfig object representing the specified stream.
     * @member AudioConfig.fromStreamInput
     * @function
     * @public
     * @param {AudioInputStream | PullAudioInputStreamCallback} audioStream - Specifies the custom audio input
     *        stream. Currently, only WAV / PCM with 16-bit samples, 16 kHz sample rate, and a single channel
     *        (Mono) is supported.
     * @returns {AudioConfig} The audio input configuration being created.
     */
    AudioConfig.fromStreamInput = function (audioStream) {
        if (audioStream instanceof Exports_2.PullAudioInputStreamCallback) {
            return new AudioConfigImpl(new AudioInputStream_1.PullAudioInputStreamImpl(audioStream));
        }
        if (audioStream instanceof Exports_2.AudioInputStream) {
            return new AudioConfigImpl(audioStream);
        }
        throw new Error("Not Supported Type");
    };
    return AudioConfig;
}());
exports.AudioConfig = AudioConfig;
/**
 * Represents audio input stream used for custom audio input configurations.
 * @private
 * @class AudioConfigImpl
 */
// tslint:disable-next-line:max-classes-per-file
var AudioConfigImpl = /** @class */ (function (_super) {
    __extends(AudioConfigImpl, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {IAudioSource} source - An audio source.
     */
    function AudioConfigImpl(source) {
        var _this = _super.call(this) || this;
        _this.privSource = source;
        return _this;
    }
    Object.defineProperty(AudioConfigImpl.prototype, "format", {
        /**
         * Format information for the audio
         */
        get: function () {
            return this.privSource.format;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @member AudioConfigImpl.prototype.close
     * @function
     * @public
     */
    AudioConfigImpl.prototype.close = function () {
        this.privSource.turnOff();
    };
    /**
     * @member AudioConfigImpl.prototype.id
     * @function
     * @public
     */
    AudioConfigImpl.prototype.id = function () {
        return this.privSource.id();
    };
    /**
     * @member AudioConfigImpl.prototype.turnOn
     * @function
     * @public
     * @returns {Promise<boolean>} A promise.
     */
    AudioConfigImpl.prototype.turnOn = function () {
        return this.privSource.turnOn();
    };
    /**
     * @member AudioConfigImpl.prototype.attach
     * @function
     * @public
     * @param {string} audioNodeId - The audio node id.
     * @returns {Promise<IAudioStreamNode>} A promise.
     */
    AudioConfigImpl.prototype.attach = function (audioNodeId) {
        return this.privSource.attach(audioNodeId);
    };
    /**
     * @member AudioConfigImpl.prototype.detach
     * @function
     * @public
     * @param {string} audioNodeId - The audio node id.
     */
    AudioConfigImpl.prototype.detach = function (audioNodeId) {
        return this.detach(audioNodeId);
    };
    /**
     * @member AudioConfigImpl.prototype.turnOff
     * @function
     * @public
     * @returns {Promise<boolean>} A promise.
     */
    AudioConfigImpl.prototype.turnOff = function () {
        return this.privSource.turnOff();
    };
    Object.defineProperty(AudioConfigImpl.prototype, "events", {
        /**
         * @member AudioConfigImpl.prototype.events
         * @function
         * @public
         * @returns {EventSource<AudioSourceEvent>} An event source for audio events.
         */
        get: function () {
            return this.privSource.events;
        },
        enumerable: true,
        configurable: true
    });
    AudioConfigImpl.prototype.setProperty = function (name, value) {
        Contracts_1.Contracts.throwIfNull(value, "value");
        if (undefined !== this.privSource.setProperty) {
            this.privSource.setProperty(name, value);
        }
        else {
            throw new Error("This AudioConfig instance does not support setting properties.");
        }
    };
    AudioConfigImpl.prototype.getProperty = function (name, def) {
        if (undefined !== this.privSource.getProperty) {
            return this.privSource.getProperty(name, def);
        }
        else {
            throw new Error("This AudioConfig instance does not support getting properties.");
        }
        return def;
    };
    Object.defineProperty(AudioConfigImpl.prototype, "deviceInfo", {
        get: function () {
            return this.privSource.deviceInfo;
        },
        enumerable: true,
        configurable: true
    });
    return AudioConfigImpl;
}(AudioConfig));
exports.AudioConfigImpl = AudioConfigImpl;

//# sourceMappingURL=AudioConfig.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioInputStream.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioInputStream.js ***!
  \******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Guid_1 = __webpack_require__(/*! ../../../src/common/Guid */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Guid.js");
var Exports_1 = __webpack_require__(/*! ../../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Exports_2 = __webpack_require__(/*! ../../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var Exports_3 = __webpack_require__(/*! ../Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
var AudioStreamFormat_1 = __webpack_require__(/*! ./AudioStreamFormat */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioStreamFormat.js");
exports.bufferSize = 4096;
/**
 * Represents audio input stream used for custom audio input configurations.
 * @class AudioInputStream
 */
var AudioInputStream = /** @class */ (function () {
    /**
     * Creates and initializes an instance.
     * @constructor
     */
    function AudioInputStream() {
    }
    /**
     * Creates a memory backed PushAudioInputStream with the specified audio format.
     * @member AudioInputStream.createPushStream
     * @function
     * @public
     * @param {AudioStreamFormat} format - The audio data format in which audio will be
     *        written to the push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).
     * @returns {PushAudioInputStream} The audio input stream being created.
     */
    AudioInputStream.createPushStream = function (format) {
        return PushAudioInputStream.create(format);
    };
    /**
     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()
     * and close() methods.
     * @member AudioInputStream.createPullStream
     * @function
     * @public
     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from
     *        PullAudioInputStreamCallback
     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from
     *        the callback's read() method (currently only support 16 kHz 16bit mono PCM).
     * @returns {PullAudioInputStream} The audio input stream being created.
     */
    AudioInputStream.createPullStream = function (callback, format) {
        return PullAudioInputStream.create(callback, format);
        // throw new Error("Oops");
    };
    return AudioInputStream;
}());
exports.AudioInputStream = AudioInputStream;
/**
 * Represents memory backed push audio input stream used for custom audio input configurations.
 * @class PushAudioInputStream
 */
// tslint:disable-next-line:max-classes-per-file
var PushAudioInputStream = /** @class */ (function (_super) {
    __extends(PushAudioInputStream, _super);
    function PushAudioInputStream() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a memory backed PushAudioInputStream with the specified audio format.
     * @member PushAudioInputStream.create
     * @function
     * @public
     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the
     *        push audio stream's write() method (currently only support 16 kHz 16bit mono PCM).
     * @returns {PushAudioInputStream} The push audio input stream being created.
     */
    PushAudioInputStream.create = function (format) {
        return new PushAudioInputStreamImpl(exports.bufferSize, format);
    };
    return PushAudioInputStream;
}(AudioInputStream));
exports.PushAudioInputStream = PushAudioInputStream;
/**
 * Represents memory backed push audio input stream used for custom audio input configurations.
 * @private
 * @class PushAudioInputStreamImpl
 */
// tslint:disable-next-line:max-classes-per-file
var PushAudioInputStreamImpl = /** @class */ (function (_super) {
    __extends(PushAudioInputStreamImpl, _super);
    /**
     * Creates and initalizes an instance with the given values.
     * @constructor
     * @param {AudioStreamFormat} format - The audio stream format.
     */
    function PushAudioInputStreamImpl(chunkSize, format) {
        var _this = _super.call(this) || this;
        _this.onEvent = function (event) {
            _this.privEvents.onEvent(event);
            Exports_2.Events.instance.onEvent(event);
        };
        if (format === undefined) {
            _this.privFormat = AudioStreamFormat_1.AudioStreamFormatImpl.getDefaultInputFormat();
        }
        else {
            _this.privFormat = format;
        }
        _this.privEvents = new Exports_2.EventSource();
        _this.privId = Guid_1.createNoDashGuid();
        _this.privStream = new Exports_2.ChunkedArrayBufferStream(chunkSize);
        return _this;
    }
    Object.defineProperty(PushAudioInputStreamImpl.prototype, "format", {
        /**
         * Format information for the audio
         */
        get: function () {
            return this.privFormat;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Writes the audio data specified by making an internal copy of the data.
     * @member PushAudioInputStreamImpl.prototype.write
     * @function
     * @public
     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.
     */
    PushAudioInputStreamImpl.prototype.write = function (dataBuffer) {
        this.privStream.writeStreamChunk({
            buffer: dataBuffer,
            isEnd: false,
            timeReceived: Date.now()
        });
    };
    /**
     * Closes the stream.
     * @member PushAudioInputStreamImpl.prototype.close
     * @function
     * @public
     */
    PushAudioInputStreamImpl.prototype.close = function () {
        this.privStream.close();
    };
    PushAudioInputStreamImpl.prototype.id = function () {
        return this.privId;
    };
    PushAudioInputStreamImpl.prototype.turnOn = function () {
        this.onEvent(new Exports_2.AudioSourceInitializingEvent(this.privId)); // no stream id
        this.onEvent(new Exports_2.AudioSourceReadyEvent(this.privId));
        return Exports_2.PromiseHelper.fromResult(true);
    };
    PushAudioInputStreamImpl.prototype.attach = function (audioNodeId) {
        var _this = this;
        this.onEvent(new Exports_2.AudioStreamNodeAttachingEvent(this.privId, audioNodeId));
        return this.turnOn()
            .onSuccessContinueWith(function (_) {
            // For now we support a single parallel reader of the pushed stream.
            // So we can simiply hand the stream to the recognizer and let it recognize.
            return _this.privStream.getReader();
        })
            .onSuccessContinueWith(function (streamReader) {
            _this.onEvent(new Exports_2.AudioStreamNodeAttachedEvent(_this.privId, audioNodeId));
            return {
                detach: function () {
                    streamReader.close();
                    _this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(_this.privId, audioNodeId));
                    _this.turnOff();
                },
                id: function () {
                    return audioNodeId;
                },
                read: function () {
                    return streamReader.read();
                },
            };
        });
    };
    PushAudioInputStreamImpl.prototype.detach = function (audioNodeId) {
        this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));
    };
    PushAudioInputStreamImpl.prototype.turnOff = function () {
        return Exports_2.PromiseHelper.fromResult(false);
    };
    Object.defineProperty(PushAudioInputStreamImpl.prototype, "events", {
        get: function () {
            return this.privEvents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PushAudioInputStreamImpl.prototype, "deviceInfo", {
        get: function () {
            return Exports_2.PromiseHelper.fromResult({
                bitspersample: this.privFormat.bitsPerSample,
                channelcount: this.privFormat.channels,
                connectivity: Exports_1.connectivity.Unknown,
                manufacturer: "Speech SDK",
                model: "PushStream",
                samplerate: this.privFormat.samplesPerSec,
                type: Exports_1.type.Stream,
            });
        },
        enumerable: true,
        configurable: true
    });
    return PushAudioInputStreamImpl;
}(PushAudioInputStream));
exports.PushAudioInputStreamImpl = PushAudioInputStreamImpl;
/*
 * Represents audio input stream used for custom audio input configurations.
 * @class PullAudioInputStream
 */
// tslint:disable-next-line:max-classes-per-file
var PullAudioInputStream = /** @class */ (function (_super) {
    __extends(PullAudioInputStream, _super);
    /**
     * Creates and initializes and instance.
     * @constructor
     */
    function PullAudioInputStream() {
        return _super.call(this) || this;
    }
    /**
     * Creates a PullAudioInputStream that delegates to the specified callback interface for
     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).
     * @member PullAudioInputStream.create
     * @function
     * @public
     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,
     *        derived from PullAudioInputStreamCustomCallback
     * @param {AudioStreamFormat} format - The audio data format in which audio will be
     *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).
     * @returns {PullAudioInputStream} The push audio input stream being created.
     */
    PullAudioInputStream.create = function (callback, format) {
        return new PullAudioInputStreamImpl(callback, format);
    };
    return PullAudioInputStream;
}(AudioInputStream));
exports.PullAudioInputStream = PullAudioInputStream;
/**
 * Represents audio input stream used for custom audio input configurations.
 * @private
 * @class PullAudioInputStreamImpl
 */
// tslint:disable-next-line:max-classes-per-file
var PullAudioInputStreamImpl = /** @class */ (function (_super) {
    __extends(PullAudioInputStreamImpl, _super);
    /**
     * Creates a PullAudioInputStream that delegates to the specified callback interface for
     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).
     * @constructor
     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,
     *        derived from PullAudioInputStreamCustomCallback
     * @param {AudioStreamFormat} format - The audio data format in which audio will be
     *        returned from the callback's read() method (currently only support 16 kHz 16bit mono PCM).
     */
    function PullAudioInputStreamImpl(callback, format) {
        var _this = _super.call(this) || this;
        _this.onEvent = function (event) {
            _this.privEvents.onEvent(event);
            Exports_2.Events.instance.onEvent(event);
        };
        if (undefined === format) {
            _this.privFormat = Exports_3.AudioStreamFormat.getDefaultInputFormat();
        }
        else {
            _this.privFormat = format;
        }
        _this.privEvents = new Exports_2.EventSource();
        _this.privId = Guid_1.createNoDashGuid();
        _this.privCallback = callback;
        _this.privIsClosed = false;
        return _this;
    }
    Object.defineProperty(PullAudioInputStreamImpl.prototype, "format", {
        /**
         * Format information for the audio
         */
        get: function () {
            return this.privFormat;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Closes the stream.
     * @member PullAudioInputStreamImpl.prototype.close
     * @function
     * @public
     */
    PullAudioInputStreamImpl.prototype.close = function () {
        this.privIsClosed = true;
        this.privCallback.close();
    };
    PullAudioInputStreamImpl.prototype.id = function () {
        return this.privId;
    };
    PullAudioInputStreamImpl.prototype.turnOn = function () {
        this.onEvent(new Exports_2.AudioSourceInitializingEvent(this.privId)); // no stream id
        this.onEvent(new Exports_2.AudioSourceReadyEvent(this.privId));
        return Exports_2.PromiseHelper.fromResult(true);
    };
    PullAudioInputStreamImpl.prototype.attach = function (audioNodeId) {
        var _this = this;
        this.onEvent(new Exports_2.AudioStreamNodeAttachingEvent(this.privId, audioNodeId));
        return this.turnOn()
            .onSuccessContinueWith(function (result) {
            _this.onEvent(new Exports_2.AudioStreamNodeAttachedEvent(_this.privId, audioNodeId));
            return {
                detach: function () {
                    _this.privCallback.close();
                    _this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(_this.privId, audioNodeId));
                    _this.turnOff();
                },
                id: function () {
                    return audioNodeId;
                },
                read: function () {
                    var totalBytes = 0;
                    var transmitBuff;
                    // Until we have the minimum number of bytes to send in a transmission, keep asking for more.
                    while (totalBytes < exports.bufferSize) {
                        // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much
                        // data back.
                        var readBuff = new ArrayBuffer(exports.bufferSize - totalBytes);
                        var pulledBytes = _this.privCallback.read(readBuff);
                        // If there is no return buffer yet defined, set the return buffer to the that was just populated.
                        // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the
                        // preferred size allocated.
                        if (undefined === transmitBuff) {
                            transmitBuff = readBuff;
                        }
                        else {
                            // Not the first bite at the apple, so fill the return buffer with the data we got back.
                            var intView = new Int8Array(transmitBuff);
                            intView.set(new Int8Array(readBuff), totalBytes);
                        }
                        // If there are no bytes to read, just break out and be done.
                        if (0 === pulledBytes) {
                            break;
                        }
                        totalBytes += pulledBytes;
                    }
                    return Exports_2.PromiseHelper.fromResult({
                        buffer: transmitBuff.slice(0, totalBytes),
                        isEnd: _this.privIsClosed || totalBytes === 0,
                        timeReceived: Date.now(),
                    });
                },
            };
        });
    };
    PullAudioInputStreamImpl.prototype.detach = function (audioNodeId) {
        this.onEvent(new Exports_2.AudioStreamNodeDetachedEvent(this.privId, audioNodeId));
    };
    PullAudioInputStreamImpl.prototype.turnOff = function () {
        return Exports_2.PromiseHelper.fromResult(false);
    };
    Object.defineProperty(PullAudioInputStreamImpl.prototype, "events", {
        get: function () {
            return this.privEvents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PullAudioInputStreamImpl.prototype, "deviceInfo", {
        get: function () {
            return Exports_2.PromiseHelper.fromResult({
                bitspersample: this.privFormat.bitsPerSample,
                channelcount: this.privFormat.channels,
                connectivity: Exports_1.connectivity.Unknown,
                manufacturer: "Speech SDK",
                model: "PullStream",
                samplerate: this.privFormat.samplesPerSec,
                type: Exports_1.type.Stream,
            });
        },
        enumerable: true,
        configurable: true
    });
    return PullAudioInputStreamImpl;
}(PullAudioInputStream));
exports.PullAudioInputStreamImpl = PullAudioInputStreamImpl;

//# sourceMappingURL=AudioInputStream.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioStreamFormat.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioStreamFormat.js ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Represents audio stream format used for custom audio input configurations.
 * @class AudioStreamFormat
 */
var AudioStreamFormat = /** @class */ (function () {
    function AudioStreamFormat() {
    }
    /**
     * Creates an audio stream format object representing the default audio stream
     * format (16KHz 16bit mono PCM).
     * @member AudioStreamFormat.getDefaultInputFormat
     * @function
     * @public
     * @returns {AudioStreamFormat} The audio stream format being created.
     */
    AudioStreamFormat.getDefaultInputFormat = function () {
        return AudioStreamFormatImpl.getDefaultInputFormat();
    };
    /**
     * Creates an audio stream format object with the specified pcm waveformat characteristics.
     * @member AudioStreamFormat.getWaveFormatPCM
     * @function
     * @public
     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).
     * @param {number} bitsPerSample - Bits per sample, typically 16.
     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data
     *        uses one channel and stereo data uses two channels.
     * @returns {AudioStreamFormat} The audio stream format being created.
     */
    AudioStreamFormat.getWaveFormatPCM = function (samplesPerSecond, bitsPerSample, channels) {
        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);
    };
    return AudioStreamFormat;
}());
exports.AudioStreamFormat = AudioStreamFormat;
/**
 * @private
 * @class AudioStreamFormatImpl
 */
// tslint:disable-next-line:max-classes-per-file
var AudioStreamFormatImpl = /** @class */ (function (_super) {
    __extends(AudioStreamFormatImpl, _super);
    /**
     * Creates an instance with the given values.
     * @constructor
     * @param {number} samplesPerSec - Samples per second.
     * @param {number} bitsPerSample - Bits per sample.
     * @param {number} channels - Number of channels.
     */
    function AudioStreamFormatImpl(samplesPerSec, bitsPerSample, channels) {
        if (samplesPerSec === void 0) { samplesPerSec = 16000; }
        if (bitsPerSample === void 0) { bitsPerSample = 16; }
        if (channels === void 0) { channels = 1; }
        var _this = _super.call(this) || this;
        _this.formatTag = 1;
        _this.bitsPerSample = bitsPerSample;
        _this.samplesPerSec = samplesPerSec;
        _this.channels = channels;
        _this.avgBytesPerSec = _this.samplesPerSec * _this.channels * (_this.bitsPerSample / 8);
        _this.blockAlign = _this.channels * Math.max(_this.bitsPerSample, 8);
        return _this;
    }
    /**
     * Retrieves the default input format.
     * @member AudioStreamFormatImpl.getDefaultInputFormat
     * @function
     * @public
     * @returns {AudioStreamFormatImpl} The default input format.
     */
    AudioStreamFormatImpl.getDefaultInputFormat = function () {
        return new AudioStreamFormatImpl();
    };
    /**
     * Closes the configuration object.
     * @member AudioStreamFormatImpl.prototype.close
     * @function
     * @public
     */
    AudioStreamFormatImpl.prototype.close = function () { return; };
    return AudioStreamFormatImpl;
}(AudioStreamFormat));
exports.AudioStreamFormatImpl = AudioStreamFormatImpl;

//# sourceMappingURL=AudioStreamFormat.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/PullAudioInputStreamCallback.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/PullAudioInputStreamCallback.js ***!
  \******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
/**
 * An abstract base class that defines callback methods (read() and close()) for
 * custom audio input streams).
 * @class PullAudioInputStreamCallback
 */
var PullAudioInputStreamCallback = /** @class */ (function () {
    function PullAudioInputStreamCallback() {
    }
    return PullAudioInputStreamCallback;
}());
exports.PullAudioInputStreamCallback = PullAudioInputStreamCallback;

//# sourceMappingURL=PullAudioInputStreamCallback.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationDetails.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationDetails.js ***!
  \***************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Exports_2 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Contains detailed information about why a result was canceled.
 * @class CancellationDetails
 */
var CancellationDetails = /** @class */ (function () {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {CancellationReason} reason - The cancellation reason.
     * @param {string} errorDetails - The error details, if provided.
     */
    function CancellationDetails(reason, errorDetails, errorCode) {
        this.privReason = reason;
        this.privErrorDetails = errorDetails;
        this.privErrorCode = errorCode;
    }
    /**
     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.
     * @member CancellationDetails.fromResult
     * @function
     * @public
     * @param {RecognitionResult} result - The result that was canceled.
     * @returns {CancellationDetails} The cancellation details object being created.
     */
    CancellationDetails.fromResult = function (result) {
        var reason = Exports_2.CancellationReason.Error;
        var errorCode = Exports_2.CancellationErrorCode.NoError;
        if (!!result.json) {
            var simpleSpeech = Exports_1.SimpleSpeechPhrase.fromJSON(result.json);
            reason = Exports_1.EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);
        }
        if (!!result.properties) {
            errorCode = Exports_2.CancellationErrorCode[result.properties.getProperty(Exports_1.CancellationErrorCodePropertyName, Exports_2.CancellationErrorCode[Exports_2.CancellationErrorCode.NoError])];
        }
        return new CancellationDetails(reason, result.errorDetails, errorCode);
    };
    Object.defineProperty(CancellationDetails.prototype, "reason", {
        /**
         * The reason the recognition was canceled.
         * @member CancellationDetails.prototype.reason
         * @function
         * @public
         * @returns {CancellationReason} Specifies the reason canceled.
         */
        get: function () {
            return this.privReason;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CancellationDetails.prototype, "errorDetails", {
        /**
         * In case of an unsuccessful recognition, provides details of the occurred error.
         * @member CancellationDetails.prototype.errorDetails
         * @function
         * @public
         * @returns {string} A String that represents the error details.
         */
        get: function () {
            return this.privErrorDetails;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CancellationDetails.prototype, "ErrorCode", {
        /**
         * The error code in case of an unsuccessful recognition.
         * Added in version 1.1.0.
         * @return An error code that represents the error reason.
         */
        get: function () {
            return this.privErrorCode;
        },
        enumerable: true,
        configurable: true
    });
    return CancellationDetails;
}());
exports.CancellationDetails = CancellationDetails;

//# sourceMappingURL=CancellationDetails.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationErrorCodes.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationErrorCodes.js ***!
  \******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *  Defines error code in case that CancellationReason is Error.
 *  Added in version 1.1.0.
 */
var CancellationErrorCode;
(function (CancellationErrorCode) {
    /**
     * Indicates that no error occurred during speech recognition.
     */
    CancellationErrorCode[CancellationErrorCode["NoError"] = 0] = "NoError";
    /**
     * Indicates an authentication error.
     */
    CancellationErrorCode[CancellationErrorCode["AuthenticationFailure"] = 1] = "AuthenticationFailure";
    /**
     * Indicates that one or more recognition parameters are invalid.
     */
    CancellationErrorCode[CancellationErrorCode["BadRequestParameters"] = 2] = "BadRequestParameters";
    /**
     * Indicates that the number of parallel requests exceeded the number of allowed
     * concurrent transcriptions for the subscription.
     */
    CancellationErrorCode[CancellationErrorCode["TooManyRequests"] = 3] = "TooManyRequests";
    /**
     * Indicates a connection error.
     */
    CancellationErrorCode[CancellationErrorCode["ConnectionFailure"] = 4] = "ConnectionFailure";
    /**
     * Indicates a time-out error when waiting for response from service.
     */
    CancellationErrorCode[CancellationErrorCode["ServiceTimeout"] = 5] = "ServiceTimeout";
    /**
     * Indicates that an error is returned by the service.
     */
    CancellationErrorCode[CancellationErrorCode["ServiceError"] = 6] = "ServiceError";
    /**
     * Indicates an unexpected runtime error.
     */
    CancellationErrorCode[CancellationErrorCode["RuntimeError"] = 7] = "RuntimeError";
})(CancellationErrorCode = exports.CancellationErrorCode || (exports.CancellationErrorCode = {}));

//# sourceMappingURL=CancellationErrorCodes.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationReason.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationReason.js ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines the possible reasons a recognition result might be canceled.
 * @class CancellationReason
 */
var CancellationReason;
(function (CancellationReason) {
    /**
     * Indicates that an error occurred during speech recognition.
     * @member CancellationReason.Error
     */
    CancellationReason[CancellationReason["Error"] = 0] = "Error";
    /**
     * Indicates that the end of the audio stream was reached.
     * @member CancellationReason.EndOfStream
     */
    CancellationReason[CancellationReason["EndOfStream"] = 1] = "EndOfStream";
})(CancellationReason = exports.CancellationReason || (exports.CancellationReason = {}));

//# sourceMappingURL=CancellationReason.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Connection.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Connection.js ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.
 * By default, a Recognizer autonomously manages connection to service when needed.
 * The Connection class provides additional methods for users to explicitly open or close a connection and
 * to subscribe to connection status changes.
 * The use of Connection is optional, and mainly for scenarios where fine tuning of application
 * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection
 * in advance before starting recognition on the Recognizer associated with this Connection.
 * If the Recognizer needs to connect or disconnect to service, it will
 * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection
 * status via Connected/Disconnected events.
 * Added in version 1.2.0.
 */
var Connection = /** @class */ (function () {
    function Connection() {
    }
    /**
     * Gets the Connection instance from the specified recognizer.
     * @param recognizer The recognizer associated with the connection.
     * @return The Connection instance of the recognizer.
     */
    Connection.fromRecognizer = function (recognizer) {
        var recoBase = recognizer.internalData;
        var ret = new Connection();
        ret.privServiceRecognizer = recoBase;
        ret.privEventListener = ret.privServiceRecognizer.connectionEvents.attach(function (connectionEvent) {
            if (connectionEvent.name === "ConnectionEstablishedEvent") {
                if (!!ret.connected) {
                    ret.connected(new Exports_1.ConnectionEventArgs(connectionEvent.connectionId));
                }
            }
            else if (connectionEvent.name === "ConnectionClosedEvent") {
                if (!!ret.disconnected) {
                    ret.disconnected(new Exports_1.ConnectionEventArgs(connectionEvent.connectionId));
                }
            }
        });
        return ret;
    };
    /**
     * Starts to set up connection to the service.
     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the
     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect
     *
     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to
     * be notfied when the connection is established.
     */
    Connection.prototype.openConnection = function () {
        this.privServiceRecognizer.connect();
    };
    /**
     * Closes the connection the service.
     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.
     *
     * If closeConnection() is called during recognition, recognition will fail and cancel wtih an error.
     */
    Connection.prototype.closeConnection = function () {
        this.privServiceRecognizer.disconnect();
    };
    /**
     * Dispose of associated resources.
     */
    Connection.prototype.close = function () {
        /* tslint:disable:no-empty */
    };
    return Connection;
}());
exports.Connection = Connection;

//# sourceMappingURL=Connection.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionEventArgs.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionEventArgs.js ***!
  \***************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.
//
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Defines payload for connection events like Connected/Disconnected.
 * Added in version 1.2.0
 */
var ConnectionEventArgs = /** @class */ (function (_super) {
    __extends(ConnectionEventArgs, _super);
    function ConnectionEventArgs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ConnectionEventArgs;
}(Exports_1.SessionEventArgs));
exports.ConnectionEventArgs = ConnectionEventArgs;

//# sourceMappingURL=ConnectionEventArgs.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js ***!
  \*****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @class Contracts
 * @private
 */
var Contracts = /** @class */ (function () {
    function Contracts() {
    }
    Contracts.throwIfNullOrUndefined = function (param, name) {
        if (param === undefined || param === null) {
            throw new Error("throwIfNullOrUndefined:" + name);
        }
    };
    Contracts.throwIfNull = function (param, name) {
        if (param === null) {
            throw new Error("throwIfNull:" + name);
        }
    };
    Contracts.throwIfNullOrWhitespace = function (param, name) {
        Contracts.throwIfNullOrUndefined(param, name);
        if (("" + param).trim().length < 1) {
            throw new Error("throwIfNullOrWhitespace:" + name);
        }
    };
    Contracts.throwIfDisposed = function (isDisposed) {
        if (isDisposed) {
            throw new Error("the object is already disposed");
        }
    };
    Contracts.throwIfArrayEmptyOrWhitespace = function (array, name) {
        Contracts.throwIfNullOrUndefined(array, name);
        if (array.length === 0) {
            throw new Error("throwIfArrayEmptyOrWhitespace:" + name);
        }
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            var item = array_1[_i];
            Contracts.throwIfNullOrWhitespace(item, name);
        }
    };
    Contracts.throwIfFileDoesNotExist = function (param, name) {
        Contracts.throwIfNullOrWhitespace(param, name);
        // TODO check for file existence.
    };
    return Contracts;
}());
exports.Contracts = Contracts;

//# sourceMappingURL=Contracts.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var AudioConfig_1 = __webpack_require__(/*! ./Audio/AudioConfig */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioConfig.js");
exports.AudioConfig = AudioConfig_1.AudioConfig;
var AudioStreamFormat_1 = __webpack_require__(/*! ./Audio/AudioStreamFormat */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioStreamFormat.js");
exports.AudioStreamFormat = AudioStreamFormat_1.AudioStreamFormat;
var AudioInputStream_1 = __webpack_require__(/*! ./Audio/AudioInputStream */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/AudioInputStream.js");
exports.AudioInputStream = AudioInputStream_1.AudioInputStream;
exports.PullAudioInputStream = AudioInputStream_1.PullAudioInputStream;
exports.PushAudioInputStream = AudioInputStream_1.PushAudioInputStream;
var CancellationReason_1 = __webpack_require__(/*! ./CancellationReason */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationReason.js");
exports.CancellationReason = CancellationReason_1.CancellationReason;
var PullAudioInputStreamCallback_1 = __webpack_require__(/*! ./Audio/PullAudioInputStreamCallback */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/PullAudioInputStreamCallback.js");
exports.PullAudioInputStreamCallback = PullAudioInputStreamCallback_1.PullAudioInputStreamCallback;
var KeywordRecognitionModel_1 = __webpack_require__(/*! ./KeywordRecognitionModel */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/KeywordRecognitionModel.js");
exports.KeywordRecognitionModel = KeywordRecognitionModel_1.KeywordRecognitionModel;
var SessionEventArgs_1 = __webpack_require__(/*! ./SessionEventArgs */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SessionEventArgs.js");
exports.SessionEventArgs = SessionEventArgs_1.SessionEventArgs;
var RecognitionEventArgs_1 = __webpack_require__(/*! ./RecognitionEventArgs */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/RecognitionEventArgs.js");
exports.RecognitionEventArgs = RecognitionEventArgs_1.RecognitionEventArgs;
var OutputFormat_1 = __webpack_require__(/*! ./OutputFormat */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/OutputFormat.js");
exports.OutputFormat = OutputFormat_1.OutputFormat;
var IntentRecognitionEventArgs_1 = __webpack_require__(/*! ./IntentRecognitionEventArgs */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionEventArgs.js");
exports.IntentRecognitionEventArgs = IntentRecognitionEventArgs_1.IntentRecognitionEventArgs;
var RecognitionResult_1 = __webpack_require__(/*! ./RecognitionResult */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/RecognitionResult.js");
exports.RecognitionResult = RecognitionResult_1.RecognitionResult;
var SpeechRecognitionResult_1 = __webpack_require__(/*! ./SpeechRecognitionResult */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionResult.js");
exports.SpeechRecognitionResult = SpeechRecognitionResult_1.SpeechRecognitionResult;
var IntentRecognitionResult_1 = __webpack_require__(/*! ./IntentRecognitionResult */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionResult.js");
exports.IntentRecognitionResult = IntentRecognitionResult_1.IntentRecognitionResult;
var LanguageUnderstandingModel_1 = __webpack_require__(/*! ./LanguageUnderstandingModel */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/LanguageUnderstandingModel.js");
exports.LanguageUnderstandingModel = LanguageUnderstandingModel_1.LanguageUnderstandingModel;
var SpeechRecognitionEventArgs_1 = __webpack_require__(/*! ./SpeechRecognitionEventArgs */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionEventArgs.js");
exports.SpeechRecognitionEventArgs = SpeechRecognitionEventArgs_1.SpeechRecognitionEventArgs;
var SpeechRecognitionCanceledEventArgs_1 = __webpack_require__(/*! ./SpeechRecognitionCanceledEventArgs */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionCanceledEventArgs.js");
exports.SpeechRecognitionCanceledEventArgs = SpeechRecognitionCanceledEventArgs_1.SpeechRecognitionCanceledEventArgs;
var TranslationRecognitionEventArgs_1 = __webpack_require__(/*! ./TranslationRecognitionEventArgs */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionEventArgs.js");
exports.TranslationRecognitionEventArgs = TranslationRecognitionEventArgs_1.TranslationRecognitionEventArgs;
var TranslationSynthesisEventArgs_1 = __webpack_require__(/*! ./TranslationSynthesisEventArgs */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationSynthesisEventArgs.js");
exports.TranslationSynthesisEventArgs = TranslationSynthesisEventArgs_1.TranslationSynthesisEventArgs;
var TranslationRecognitionResult_1 = __webpack_require__(/*! ./TranslationRecognitionResult */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionResult.js");
exports.TranslationRecognitionResult = TranslationRecognitionResult_1.TranslationRecognitionResult;
var TranslationSynthesisResult_1 = __webpack_require__(/*! ./TranslationSynthesisResult */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationSynthesisResult.js");
exports.TranslationSynthesisResult = TranslationSynthesisResult_1.TranslationSynthesisResult;
var ResultReason_1 = __webpack_require__(/*! ./ResultReason */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ResultReason.js");
exports.ResultReason = ResultReason_1.ResultReason;
var SpeechConfig_1 = __webpack_require__(/*! ./SpeechConfig */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechConfig.js");
exports.SpeechConfig = SpeechConfig_1.SpeechConfig;
var SpeechTranslationConfig_1 = __webpack_require__(/*! ./SpeechTranslationConfig */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechTranslationConfig.js");
exports.SpeechTranslationConfig = SpeechTranslationConfig_1.SpeechTranslationConfig;
var PropertyCollection_1 = __webpack_require__(/*! ./PropertyCollection */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PropertyCollection.js");
exports.PropertyCollection = PropertyCollection_1.PropertyCollection;
var PropertyId_1 = __webpack_require__(/*! ./PropertyId */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PropertyId.js");
exports.PropertyId = PropertyId_1.PropertyId;
var Recognizer_1 = __webpack_require__(/*! ./Recognizer */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Recognizer.js");
exports.Recognizer = Recognizer_1.Recognizer;
var SpeechRecognizer_1 = __webpack_require__(/*! ./SpeechRecognizer */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognizer.js");
exports.SpeechRecognizer = SpeechRecognizer_1.SpeechRecognizer;
var IntentRecognizer_1 = __webpack_require__(/*! ./IntentRecognizer */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognizer.js");
exports.IntentRecognizer = IntentRecognizer_1.IntentRecognizer;
var TranslationRecognizer_1 = __webpack_require__(/*! ./TranslationRecognizer */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognizer.js");
exports.TranslationRecognizer = TranslationRecognizer_1.TranslationRecognizer;
var Translations_1 = __webpack_require__(/*! ./Translations */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Translations.js");
exports.Translations = Translations_1.Translations;
var NoMatchReason_1 = __webpack_require__(/*! ./NoMatchReason */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/NoMatchReason.js");
exports.NoMatchReason = NoMatchReason_1.NoMatchReason;
var NoMatchDetails_1 = __webpack_require__(/*! ./NoMatchDetails */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/NoMatchDetails.js");
exports.NoMatchDetails = NoMatchDetails_1.NoMatchDetails;
var TranslationRecognitionCanceledEventArgs_1 = __webpack_require__(/*! ./TranslationRecognitionCanceledEventArgs */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionCanceledEventArgs.js");
exports.TranslationRecognitionCanceledEventArgs = TranslationRecognitionCanceledEventArgs_1.TranslationRecognitionCanceledEventArgs;
var IntentRecognitionCanceledEventArgs_1 = __webpack_require__(/*! ./IntentRecognitionCanceledEventArgs */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionCanceledEventArgs.js");
exports.IntentRecognitionCanceledEventArgs = IntentRecognitionCanceledEventArgs_1.IntentRecognitionCanceledEventArgs;
var CancellationDetails_1 = __webpack_require__(/*! ./CancellationDetails */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationDetails.js");
exports.CancellationDetails = CancellationDetails_1.CancellationDetails;
var CancellationErrorCodes_1 = __webpack_require__(/*! ./CancellationErrorCodes */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/CancellationErrorCodes.js");
exports.CancellationErrorCode = CancellationErrorCodes_1.CancellationErrorCode;
var ConnectionEventArgs_1 = __webpack_require__(/*! ./ConnectionEventArgs */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ConnectionEventArgs.js");
exports.ConnectionEventArgs = ConnectionEventArgs_1.ConnectionEventArgs;
var Connection_1 = __webpack_require__(/*! ./Connection */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Connection.js");
exports.Connection = Connection_1.Connection;
var PhraseListGrammar_1 = __webpack_require__(/*! ./PhraseListGrammar */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PhraseListGrammar.js");
exports.PhraseListGrammar = PhraseListGrammar_1.PhraseListGrammar;

//# sourceMappingURL=Exports.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionCanceledEventArgs.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionCanceledEventArgs.js ***!
  \******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Define payload of intent recognition canceled result events.
 * @class IntentRecognitionCanceledEventArgs
 */
var IntentRecognitionCanceledEventArgs = /** @class */ (function (_super) {
    __extends(IntentRecognitionCanceledEventArgs, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {CancellationReason} result - The result of the intent recognition.
     * @param {string} offset - The offset.
     * @param {IntentRecognitionResult} sessionId - The session id.
     */
    function IntentRecognitionCanceledEventArgs(reason, errorDetails, errorCode, result, offset, sessionId) {
        var _this = _super.call(this, result, offset, sessionId) || this;
        _this.privReason = reason;
        _this.privErrorDetails = errorDetails;
        _this.privErrorCode = errorCode;
        return _this;
    }
    Object.defineProperty(IntentRecognitionCanceledEventArgs.prototype, "reason", {
        /**
         * The reason the recognition was canceled.
         * @member IntentRecognitionCanceledEventArgs.prototype.reason
         * @function
         * @public
         * @returns {CancellationReason} Specifies the reason canceled.
         */
        get: function () {
            return this.privReason;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IntentRecognitionCanceledEventArgs.prototype, "errorCode", {
        /**
         * The error code in case of an unsuccessful recognition.
         * Added in version 1.1.0.
         * @return An error code that represents the error reason.
         */
        get: function () {
            return this.privErrorCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IntentRecognitionCanceledEventArgs.prototype, "errorDetails", {
        /**
         * In case of an unsuccessful recognition, provides details of the occurred error.
         * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails
         * @function
         * @public
         * @returns {string} A String that represents the error details.
         */
        get: function () {
            return this.privErrorDetails;
        },
        enumerable: true,
        configurable: true
    });
    return IntentRecognitionCanceledEventArgs;
}(Exports_1.IntentRecognitionEventArgs));
exports.IntentRecognitionCanceledEventArgs = IntentRecognitionCanceledEventArgs;

//# sourceMappingURL=IntentRecognitionCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionEventArgs.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionEventArgs.js ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Intent recognition result event arguments.
 * @class
 */
var IntentRecognitionEventArgs = /** @class */ (function (_super) {
    __extends(IntentRecognitionEventArgs, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param result - The result of the intent recognition.
     * @param offset - The offset.
     * @param sessionId - The session id.
     */
    function IntentRecognitionEventArgs(result, offset, sessionId) {
        var _this = _super.call(this, offset, sessionId) || this;
        _this.privResult = result;
        return _this;
    }
    Object.defineProperty(IntentRecognitionEventArgs.prototype, "result", {
        /**
         * Represents the intent recognition result.
         * @member IntentRecognitionEventArgs.prototype.result
         * @function
         * @public
         * @returns {IntentRecognitionResult} Represents the intent recognition result.
         */
        get: function () {
            return this.privResult;
        },
        enumerable: true,
        configurable: true
    });
    return IntentRecognitionEventArgs;
}(Exports_1.RecognitionEventArgs));
exports.IntentRecognitionEventArgs = IntentRecognitionEventArgs;

//# sourceMappingURL=IntentRecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionResult.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognitionResult.js ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Intent recognition result.
 * @class
 */
var IntentRecognitionResult = /** @class */ (function (_super) {
    __extends(IntentRecognitionResult, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param intentId - The intent id.
     * @param resultId - The result id.
     * @param reason - The reason.
     * @param text - The recognized text.
     * @param duration - The duration.
     * @param offset - The offset into the stream.
     * @param errorDetails - Error details, if provided.
     * @param json - Additional Json, if provided.
     * @param properties - Additional properties, if provided.
     */
    function IntentRecognitionResult(intentId, resultId, reason, text, duration, offset, errorDetails, json, properties) {
        var _this = _super.call(this, resultId, reason, text, duration, offset, errorDetails, json, properties) || this;
        _this.privIntentId = intentId;
        return _this;
    }
    Object.defineProperty(IntentRecognitionResult.prototype, "intentId", {
        /**
         * A String that represents the intent identifier being recognized.
         * @member IntentRecognitionResult.prototype.intentId
         * @function
         * @public
         * @returns {string} A String that represents the intent identifier being recognized.
         */
        get: function () {
            return this.privIntentId;
        },
        enumerable: true,
        configurable: true
    });
    return IntentRecognitionResult;
}(Exports_1.SpeechRecognitionResult));
exports.IntentRecognitionResult = IntentRecognitionResult;

//# sourceMappingURL=IntentRecognitionResult.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognizer.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/IntentRecognizer.js ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Contracts_1 = __webpack_require__(/*! ./Contracts */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js");
var Exports_2 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Intent recognizer.
 * @class
 */
var IntentRecognizer = /** @class */ (function (_super) {
    __extends(IntentRecognizer, _super);
    /**
     * Initializes an instance of the IntentRecognizer.
     * @constructor
     * @param {SpeechConfig} speechConfig - The set of configuration properties.
     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer
     */
    function IntentRecognizer(speechConfig, audioConfig) {
        var _this = this;
        Contracts_1.Contracts.throwIfNullOrUndefined(speechConfig, "speechConfig");
        var configImpl = speechConfig;
        Contracts_1.Contracts.throwIfNullOrUndefined(configImpl, "speechConfig");
        _this = _super.call(this, audioConfig, configImpl.properties, new Exports_1.IntentConnectionFactory()) || this;
        _this.privAddedIntents = [];
        _this.privAddedLmIntents = {};
        _this.privDisposedIntentRecognizer = false;
        _this.privProperties = configImpl.properties;
        Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage), Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage]);
        return _this;
    }
    Object.defineProperty(IntentRecognizer.prototype, "speechRecognitionLanguage", {
        /**
         * Gets the spoken language of recognition.
         * @member IntentRecognizer.prototype.speechRecognitionLanguage
         * @function
         * @public
         * @returns {string} the spoken language of recognition.
         */
        get: function () {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
            return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IntentRecognizer.prototype, "authorizationToken", {
        /**
         * Gets the authorization token used to communicate with the service.
         * @member IntentRecognizer.prototype.authorizationToken
         * @function
         * @public
         * @returns {string} Authorization token.
         */
        get: function () {
            return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token);
        },
        /**
         * Gets/Sets the authorization token used to communicate with the service.
         * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.
         * @member IntentRecognizer.prototype.authorizationToken
         * @function
         * @public
         * @param {string} value - Authorization token.
         */
        set: function (value) {
            this.properties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IntentRecognizer.prototype, "properties", {
        /**
         * The collection of properties and their values defined for this IntentRecognizer.
         * @member IntentRecognizer.prototype.properties
         * @function
         * @public
         * @returns {PropertyCollection} The collection of properties and their
         *          values defined for this IntentRecognizer.
         */
        get: function () {
            return this.privProperties;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Starts intent recognition, and stops after the first utterance is recognized.
     * The task returns the recognition text and intent as result.
     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,
     *       so it is suitable only for single shot recognition like command or query.
     *       For long-running recognition, use StartContinuousRecognitionAsync() instead.
     * @member IntentRecognizer.prototype.recognizeOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.
     * @param err - Callback invoked in case of an error.
     */
    IntentRecognizer.prototype.recognizeOnceAsync = function (cb, err) {
        var _this = this;
        try {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
            this.implRecognizerStop();
            if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {
                var context = this.buildSpeechContext();
                this.privReco.speechContext.setSection("intent", context.Intent);
                this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);
                var intentReco = this.privReco;
                intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);
            }
            this.implRecognizerStart(Exports_1.RecognitionMode.Interactive, function (e) {
                _this.implRecognizerStop();
                if (!!cb) {
                    cb(e);
                }
            }, function (e) {
                _this.implRecognizerStop();
                if (!!err) {
                    err(e);
                }
            });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    var typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    };
    /**
     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    IntentRecognizer.prototype.startContinuousRecognitionAsync = function (cb, err) {
        try {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
            this.implRecognizerStop();
            if (Object.keys(this.privAddedLmIntents).length !== 0) {
                var context = this.buildSpeechContext();
                this.privReco.speechContext.setSection("intent", context.Intent);
                this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);
                var intentReco = this.privReco;
                intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);
            }
            this.implRecognizerStart(Exports_1.RecognitionMode.Conversation, undefined, undefined);
            // report result to promise.
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
                cb = undefined;
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    var typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    };
    /**
     * Stops continuous intent recognition.
     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    IntentRecognizer.prototype.stopContinuousRecognitionAsync = function (cb, err) {
        try {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
            this.implRecognizerStop();
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    var typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    };
    /**
     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * Note: Key word spotting functionality is only available on the Speech Devices SDK.
     *       This functionality is currently not included in the SDK itself.
     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync
     * @function
     * @public
     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    IntentRecognizer.prototype.startKeywordRecognitionAsync = function (model, cb, err) {
        Contracts_1.Contracts.throwIfNull(model, "model");
        if (!!err) {
            err("Not yet implemented.");
        }
    };
    /**
     * Stops continuous speech recognition.
     * Note: Key word spotting functionality is only available on the Speech Devices SDK.
     *       This functionality is currently not included in the SDK itself.
     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    IntentRecognizer.prototype.stopKeywordRecognitionAsync = function (cb, err) {
        if (!!cb) {
            cb();
        }
    };
    /**
     * Adds a phrase that should be recognized as intent.
     * @member IntentRecognizer.prototype.addIntent
     * @function
     * @public
     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.
     * @param {string} phrase - A String that specifies the phrase representing the intent.
     */
    IntentRecognizer.prototype.addIntent = function (simplePhrase, intentId) {
        Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
        Contracts_1.Contracts.throwIfNullOrWhitespace(intentId, "intentId");
        Contracts_1.Contracts.throwIfNullOrWhitespace(simplePhrase, "simplePhrase");
        this.privAddedIntents.push([intentId, simplePhrase]);
    };
    /**
     * Adds an intent from Language Understanding service for recognition.
     * @member IntentRecognizer.prototype.addIntentWithLanguageModel
     * @function
     * @public
     * @param {string} intentId - A String that represents the identifier of the intent
     *        to be recognized. Ignored if intentName is empty.
     * @param {string} model - The intent model from Language Understanding service.
     * @param {string} intentName - The intent name defined in the intent model. If it
     *        is empty, all intent names defined in the model will be added.
     */
    IntentRecognizer.prototype.addIntentWithLanguageModel = function (intentId, model, intentName) {
        Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
        Contracts_1.Contracts.throwIfNullOrWhitespace(intentId, "intentId");
        Contracts_1.Contracts.throwIfNull(model, "model");
        var modelImpl = model;
        Contracts_1.Contracts.throwIfNullOrWhitespace(modelImpl.appId, "model.appId");
        this.privAddedLmIntents[intentId] = new Exports_1.AddedLmIntent(modelImpl, intentName);
    };
    /**
     * @summary Adds all intents from the specified Language Understanding Model.
     * @member IntentRecognizer.prototype.addAllIntents
     * @function
     * @public
     * @function
     * @public
     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.
     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.
     */
    IntentRecognizer.prototype.addAllIntents = function (model, intentId) {
        Contracts_1.Contracts.throwIfNull(model, "model");
        var modelImpl = model;
        Contracts_1.Contracts.throwIfNullOrWhitespace(modelImpl.appId, "model.appId");
        this.privUmbrellaIntent = new Exports_1.AddedLmIntent(modelImpl, intentId);
    };
    /**
     * closes all external resources held by an instance of this class.
     * @member IntentRecognizer.prototype.close
     * @function
     * @public
     */
    IntentRecognizer.prototype.close = function () {
        Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);
        this.dispose(true);
    };
    IntentRecognizer.prototype.createRecognizerConfig = function (speechConfig) {
        return new Exports_1.RecognizerConfig(speechConfig, this.properties);
    };
    IntentRecognizer.prototype.createServiceRecognizer = function (authentication, connectionFactory, audioConfig, recognizerConfig) {
        var audioImpl = audioConfig;
        return new Exports_1.IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);
    };
    IntentRecognizer.prototype.dispose = function (disposing) {
        if (this.privDisposedIntentRecognizer) {
            return;
        }
        if (disposing) {
            this.privDisposedIntentRecognizer = true;
            _super.prototype.dispose.call(this, disposing);
        }
    };
    IntentRecognizer.prototype.buildSpeechContext = function () {
        var appId;
        var region;
        var subscriptionKey;
        var refGrammers = [];
        if (undefined !== this.privUmbrellaIntent) {
            appId = this.privUmbrellaIntent.modelImpl.appId;
            region = this.privUmbrellaIntent.modelImpl.region;
            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;
        }
        // Build the reference grammer array.
        for (var _i = 0, _a = Object.keys(this.privAddedLmIntents); _i < _a.length; _i++) {
            var intentId = _a[_i];
            var addedLmIntent = this.privAddedLmIntents[intentId];
            // validate all the same model, region, and key...
            if (appId === undefined) {
                appId = addedLmIntent.modelImpl.appId;
            }
            else {
                if (appId !== addedLmIntent.modelImpl.appId) {
                    throw new Error("Intents must all be from the same LUIS model");
                }
            }
            if (region === undefined) {
                region = addedLmIntent.modelImpl.region;
            }
            else {
                if (region !== addedLmIntent.modelImpl.region) {
                    throw new Error("Intents must all be from the same LUIS model in a single region");
                }
            }
            if (subscriptionKey === undefined) {
                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;
            }
            else {
                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {
                    throw new Error("Intents must all use the same subscription key");
                }
            }
            var grammer = "luis/" + appId + "-PRODUCTION#" + intentId;
            refGrammers.push(grammer);
        }
        return {
            Intent: {
                id: appId,
                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,
                provider: "LUIS",
            },
            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : ["luis/" + appId + "-PRODUCTION"],
        };
    };
    return IntentRecognizer;
}(Exports_2.Recognizer));
exports.IntentRecognizer = IntentRecognizer;

//# sourceMappingURL=IntentRecognizer.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/KeywordRecognitionModel.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/KeywordRecognitionModel.js ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Contracts_1 = __webpack_require__(/*! ./Contracts */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js");
/**
 * Represents a keyword recognition model for recognizing when
 * the user says a keyword to initiate further speech recognition.
 * @class KeywordRecognitionModel
 */
var KeywordRecognitionModel = /** @class */ (function () {
    /**
     * Create and initializes a new instance.
     * @constructor
     */
    function KeywordRecognitionModel() {
        this.privDisposed = false;
    }
    /**
     * Creates a keyword recognition model using the specified filename.
     * @member KeywordRecognitionModel.fromFile
     * @function
     * @public
     * @param {string} fileName - A string that represents file name for the keyword recognition model.
     *        Note, the file can point to a zip file in which case the model
     *        will be extracted from the zip.
     * @returns {KeywordRecognitionModel} The keyword recognition model being created.
     */
    KeywordRecognitionModel.fromFile = function (fileName) {
        Contracts_1.Contracts.throwIfFileDoesNotExist(fileName, "fileName");
        throw new Error("Not yet implemented.");
    };
    /**
     * Creates a keyword recognition model using the specified filename.
     * @member KeywordRecognitionModel.fromStream
     * @function
     * @public
     * @param {string} file - A File that represents file for the keyword recognition model.
     *        Note, the file can point to a zip file in which case the model will be extracted from the zip.
     * @returns {KeywordRecognitionModel} The keyword recognition model being created.
     */
    KeywordRecognitionModel.fromStream = function (file) {
        Contracts_1.Contracts.throwIfNull(file, "file");
        throw new Error("Not yet implemented.");
    };
    /**
     * Dispose of associated resources.
     * @member KeywordRecognitionModel.prototype.close
     * @function
     * @public
     */
    KeywordRecognitionModel.prototype.close = function () {
        if (this.privDisposed) {
            return;
        }
        this.privDisposed = true;
    };
    return KeywordRecognitionModel;
}());
exports.KeywordRecognitionModel = KeywordRecognitionModel;

//# sourceMappingURL=KeywordRecognitionModel.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/LanguageUnderstandingModel.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/LanguageUnderstandingModel.js ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Contracts_1 = __webpack_require__(/*! ./Contracts */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js");
/**
 * Language understanding model
 * @class LanguageUnderstandingModel
 */
var LanguageUnderstandingModel = /** @class */ (function () {
    /**
     * Creates and initializes a new instance
     * @constructor
     */
    function LanguageUnderstandingModel() {
    }
    /**
     * Creates an language understanding model using the specified endpoint.
     * @member LanguageUnderstandingModel.fromEndpoint
     * @function
     * @public
     * @param {URL} uri - A String that represents the endpoint of the language understanding model.
     * @returns {LanguageUnderstandingModel} The language understanding model being created.
     */
    LanguageUnderstandingModel.fromEndpoint = function (uri) {
        Contracts_1.Contracts.throwIfNull(uri, "uri");
        Contracts_1.Contracts.throwIfNullOrWhitespace(uri.hostname, "uri");
        var langModelImp = new LanguageUnderstandingModelImpl();
        // Need to extract the app ID from the URL.
        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360
        // Start tearing the string apart.
        // region can be extracted from the host name.
        var firstDot = uri.host.indexOf(".");
        if (-1 === firstDot) {
            throw new Error("Could not determine region from endpoint");
        }
        langModelImp.region = uri.host.substr(0, firstDot);
        // Now the app ID.
        var lastSegment = uri.pathname.lastIndexOf("/") + 1;
        if (-1 === lastSegment) {
            throw new Error("Could not determine appId from endpoint");
        }
        langModelImp.appId = uri.pathname.substr(lastSegment);
        // And finally the key.
        langModelImp.subscriptionKey = uri.searchParams.get("subscription-key");
        if (undefined === langModelImp.subscriptionKey) {
            throw new Error("Could not determine subscription key from endpoint");
        }
        return langModelImp;
    };
    /**
     * Creates an language understanding model using the application id of Language Understanding service.
     * @member LanguageUnderstandingModel.fromAppId
     * @function
     * @public
     * @param {string} appId - A String that represents the application id of Language Understanding service.
     * @returns {LanguageUnderstandingModel} The language understanding model being created.
     */
    LanguageUnderstandingModel.fromAppId = function (appId) {
        Contracts_1.Contracts.throwIfNullOrWhitespace(appId, "appId");
        var langModelImp = new LanguageUnderstandingModelImpl();
        langModelImp.appId = appId;
        return langModelImp;
    };
    /**
     * Creates a language understanding model using hostname, subscription key and application
     * id of Language Understanding service.
     * @member LanguageUnderstandingModel.fromSubscription
     * @function
     * @public
     * @param {string} subscriptionKey - A String that represents the subscription key of
     *        Language Understanding service.
     * @param {string} appId - A String that represents the application id of Language
     *        Understanding service.
     * @param {LanguageUnderstandingModel} region - A String that represents the region
     *        of the Language Understanding service (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {LanguageUnderstandingModel} The language understanding model being created.
     */
    LanguageUnderstandingModel.fromSubscription = function (subscriptionKey, appId, region) {
        Contracts_1.Contracts.throwIfNullOrWhitespace(subscriptionKey, "subscriptionKey");
        Contracts_1.Contracts.throwIfNullOrWhitespace(appId, "appId");
        Contracts_1.Contracts.throwIfNullOrWhitespace(region, "region");
        var langModelImp = new LanguageUnderstandingModelImpl();
        langModelImp.appId = appId;
        langModelImp.region = region;
        langModelImp.subscriptionKey = subscriptionKey;
        return langModelImp;
    };
    return LanguageUnderstandingModel;
}());
exports.LanguageUnderstandingModel = LanguageUnderstandingModel;
/**
 * @private
 * @class LanguageUnderstandingModelImpl
 */
// tslint:disable-next-line:max-classes-per-file
var LanguageUnderstandingModelImpl = /** @class */ (function (_super) {
    __extends(LanguageUnderstandingModelImpl, _super);
    function LanguageUnderstandingModelImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LanguageUnderstandingModelImpl;
}(LanguageUnderstandingModel));
exports.LanguageUnderstandingModelImpl = LanguageUnderstandingModelImpl;

//# sourceMappingURL=LanguageUnderstandingModel.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/NoMatchDetails.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/NoMatchDetails.js ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../../src/common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Exports_2 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Contains detailed information for NoMatch recognition results.
 * @class NoMatchDetails
 */
var NoMatchDetails = /** @class */ (function () {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {NoMatchReason} reason - The no-match reason.
     */
    function NoMatchDetails(reason) {
        this.privReason = reason;
    }
    /**
     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.
     * @member NoMatchDetails.fromResult
     * @function
     * @public
     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}
     *        result - The recognition result that was not recognized.
     * @returns {NoMatchDetails} The no match details object being created.
     */
    NoMatchDetails.fromResult = function (result) {
        var simpleSpeech = Exports_1.SimpleSpeechPhrase.fromJSON(result.json);
        var reason = Exports_2.NoMatchReason.NotRecognized;
        switch (simpleSpeech.RecognitionStatus) {
            case Exports_1.RecognitionStatus.BabbleTimeout:
                reason = Exports_2.NoMatchReason.InitialBabbleTimeout;
                break;
            case Exports_1.RecognitionStatus.InitialSilenceTimeout:
                reason = Exports_2.NoMatchReason.InitialSilenceTimeout;
                break;
            default:
                reason = Exports_2.NoMatchReason.NotRecognized;
                break;
        }
        return new NoMatchDetails(reason);
    };
    Object.defineProperty(NoMatchDetails.prototype, "reason", {
        /**
         * The reason the recognition was canceled.
         * @member NoMatchDetails.prototype.reason
         * @function
         * @public
         * @returns {NoMatchReason} Specifies the reason canceled.
         */
        get: function () {
            return this.privReason;
        },
        enumerable: true,
        configurable: true
    });
    return NoMatchDetails;
}());
exports.NoMatchDetails = NoMatchDetails;

//# sourceMappingURL=NoMatchDetails.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/NoMatchReason.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/NoMatchReason.js ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines the possible reasons a recognition result might not be recognized.
 * @class NoMatchReason
 */
var NoMatchReason;
(function (NoMatchReason) {
    /**
     * Indicates that speech was detected, but not recognized.
     * @member NoMatchReason.NotRecognized
     */
    NoMatchReason[NoMatchReason["NotRecognized"] = 0] = "NotRecognized";
    /**
     * Indicates that the start of the audio stream contained only silence,
     * and the service timed out waiting for speech.
     * @member NoMatchReason.InitialSilenceTimeout
     */
    NoMatchReason[NoMatchReason["InitialSilenceTimeout"] = 1] = "InitialSilenceTimeout";
    /**
     * Indicates that the start of the audio stream contained only noise,
     * and the service timed out waiting for speech.
     * @member NoMatchReason.InitialBabbleTimeout
     */
    NoMatchReason[NoMatchReason["InitialBabbleTimeout"] = 2] = "InitialBabbleTimeout";
})(NoMatchReason = exports.NoMatchReason || (exports.NoMatchReason = {}));

//# sourceMappingURL=NoMatchReason.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/OutputFormat.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/OutputFormat.js ***!
  \********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Define Speech Recognizer output formats.
 * @class OutputFormat
 */
var OutputFormat;
(function (OutputFormat) {
    /**
     * @member OutputFormat.Simple
     */
    OutputFormat[OutputFormat["Simple"] = 0] = "Simple";
    /**
     * @member OutputFormat.Detailed
     */
    OutputFormat[OutputFormat["Detailed"] = 1] = "Detailed";
})(OutputFormat = exports.OutputFormat || (exports.OutputFormat = {}));

//# sourceMappingURL=OutputFormat.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PhraseListGrammar.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PhraseListGrammar.js ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Allows additions of new phrases to improve speech recognition.
 *
 * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect
 * to the speech service.
 */
var PhraseListGrammar = /** @class */ (function () {
    function PhraseListGrammar(recogBase) {
        this.privGrammerBuilder = recogBase.dynamicGrammar;
    }
    /**
     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.
     * @param recognizer The recognizer to add phrase lists to.
     */
    PhraseListGrammar.fromRecognizer = function (recognizer) {
        var recoBase = recognizer.internalData;
        return new PhraseListGrammar(recoBase);
    };
    /**
     * Adds a single phrase to the current recognizer.
     * @param phrase Phrase to add.
     */
    PhraseListGrammar.prototype.addPhrase = function (phrase) {
        this.privGrammerBuilder.addPhrase(phrase);
    };
    /**
     * Adds multiple phrases to the current recognizer.
     * @param phrases Array of phrases to add.
     */
    PhraseListGrammar.prototype.addPhrases = function (phrases) {
        this.privGrammerBuilder.addPhrase(phrases);
    };
    /**
     * Clears all phrases added to the current recognizer.
     */
    PhraseListGrammar.prototype.clear = function () {
        this.privGrammerBuilder.clearPhrases();
    };
    return PhraseListGrammar;
}());
exports.PhraseListGrammar = PhraseListGrammar;

//# sourceMappingURL=PhraseListGrammar.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PropertyCollection.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PropertyCollection.js ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Represents collection of properties and their values.
 * @class PropertyCollection
 */
var PropertyCollection = /** @class */ (function () {
    function PropertyCollection() {
        this.privKeys = [];
        this.privValues = [];
    }
    /**
     * Returns the property value in type String. The parameter must have the same type as String.
     * Currently only String, int and bool are allowed.
     * If the name is not available, the specified defaultValue is returned.
     * @member PropertyCollection.prototype.getProperty
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} def - The default value which is returned if the parameter
     *        is not available in the collection.
     * @returns {string} value of the parameter.
     */
    PropertyCollection.prototype.getProperty = function (key, def) {
        var keyToUse;
        if (typeof key === "string") {
            keyToUse = key;
        }
        else {
            keyToUse = Exports_1.PropertyId[key];
        }
        for (var n = 0; n < this.privKeys.length; n++) {
            if (this.privKeys[n] === keyToUse) {
                return this.privValues[n];
            }
        }
        return def;
    };
    /**
     * Sets the String value of the parameter specified by name.
     * @member PropertyCollection.prototype.setProperty
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} value - The value of the parameter.
     */
    PropertyCollection.prototype.setProperty = function (key, value) {
        var keyToUse;
        if (typeof key === "string") {
            keyToUse = key;
        }
        else {
            keyToUse = Exports_1.PropertyId[key];
        }
        for (var n = 0; n < this.privKeys.length; n++) {
            if (this.privKeys[n] === keyToUse) {
                this.privValues[n] = value;
                return;
            }
        }
        this.privKeys.push(keyToUse);
        this.privValues.push(value);
    };
    /**
     * Clones the collection.
     * @member PropertyCollection.prototype.clone
     * @function
     * @public
     * @returns {PropertyCollection} A copy of the collection.
     */
    PropertyCollection.prototype.clone = function () {
        var clonedMap = new PropertyCollection();
        for (var n = 0; n < this.privKeys.length; n++) {
            clonedMap.privKeys.push(this.privKeys[n]);
            clonedMap.privValues.push(this.privValues[n]);
        }
        return clonedMap;
    };
    return PropertyCollection;
}());
exports.PropertyCollection = PropertyCollection;

//# sourceMappingURL=PropertyCollection.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PropertyId.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/PropertyId.js ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines speech property ids.
 * @class PropertyId
 */
var PropertyId;
(function (PropertyId) {
    /**
     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to specify
     * to specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't
     * have to use this property directly.
     * Instead, use [[SpeechConfig.fromSubscription]].
     * @member PropertyId.SpeechServiceConnection_Key
     */
    PropertyId[PropertyId["SpeechServiceConnection_Key"] = 0] = "SpeechServiceConnection_Key";
    /**
     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't
     * have to use this property directly.
     * Instead, use [[SpeechConfig.fromEndpoint]].
     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.
     * @member PropertyId.SpeechServiceConnection_Endpoint
     */
    PropertyId[PropertyId["SpeechServiceConnection_Endpoint"] = 1] = "SpeechServiceConnection_Endpoint";
    /**
     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to
     * use this property directly.
     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].
     * @member PropertyId.SpeechServiceConnection_Region
     */
    PropertyId[PropertyId["SpeechServiceConnection_Region"] = 2] = "SpeechServiceConnection_Region";
    /**
     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,
     * you shouldn't have to use this property directly.
     * Instead, use [[SpeechConfig.fromAuthorizationToken]],
     * [[SpeechRecognizer.authorizationToken]], [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]].
     * @member PropertyId.SpeechServiceAuthorization_Token
     */
    PropertyId[PropertyId["SpeechServiceAuthorization_Token"] = 3] = "SpeechServiceAuthorization_Token";
    /**
     * The Cognitive Services Speech Service authorization type. Currently unused.
     * @member PropertyId.SpeechServiceAuthorization_Type
     */
    PropertyId[PropertyId["SpeechServiceAuthorization_Type"] = 4] = "SpeechServiceAuthorization_Type";
    /**
     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't
     * have to use this property directly.
     * Instead, use [[SpeechConfig.endpointId]].
     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.
     * @member PropertyId.SpeechServiceConnection_EndpointId
     */
    PropertyId[PropertyId["SpeechServiceConnection_EndpointId"] = 5] = "SpeechServiceConnection_EndpointId";
    /**
     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,
     * you shouldn't have to use this property directly.
     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],
     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].
     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages
     */
    PropertyId[PropertyId["SpeechServiceConnection_TranslationToLanguages"] = 6] = "SpeechServiceConnection_TranslationToLanguages";
    /**
     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this
     * property directly.
     * Instead, use [[SpeechTranslationConfig.voiceName]].
     * NOTE: Valid voice names can be found <a href="https://aka.ms/csspeech/voicenames">here</a>.
     * @member PropertyId.SpeechServiceConnection_TranslationVoice
     */
    PropertyId[PropertyId["SpeechServiceConnection_TranslationVoice"] = 7] = "SpeechServiceConnection_TranslationVoice";
    /**
     * Translation features.
     * @member PropertyId.SpeechServiceConnection_TranslationFeatures
     */
    PropertyId[PropertyId["SpeechServiceConnection_TranslationFeatures"] = 8] = "SpeechServiceConnection_TranslationFeatures";
    /**
     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.
     * Instead, use [[LanguageUnderstandingModel]].
     * @member PropertyId.SpeechServiceConnection_IntentRegion
     */
    PropertyId[PropertyId["SpeechServiceConnection_IntentRegion"] = 9] = "SpeechServiceConnection_IntentRegion";
    /**
     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyHostName"] = 10] = "SpeechServiceConnection_ProxyHostName";
    /**
     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyPort"] = 11] = "SpeechServiceConnection_ProxyPort";
    /**
     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyUserName"] = 12] = "SpeechServiceConnection_ProxyUserName";
    /**
     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.
     * You shouldn't have to use this property directly.
     * Instead use <see cref="SpeechConfig.SetProxy(string,int,string,string)"/>.
     * Added in version 1.4.0.
     */
    PropertyId[PropertyId["SpeechServiceConnection_ProxyPassword"] = 13] = "SpeechServiceConnection_ProxyPassword";
    /**
     * The Cognitive Services Speech Service recognition Mode. Can be "INTERACTIVE", "CONVERSATION", "DICTATION".
     * This property is intended to be read-only. The SDK is using it internally.
     * @member PropertyId.SpeechServiceConnection_RecoMode
     */
    PropertyId[PropertyId["SpeechServiceConnection_RecoMode"] = 14] = "SpeechServiceConnection_RecoMode";
    /**
     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property
     * directly.
     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].
     * @member PropertyId.SpeechServiceConnection_RecoLanguage
     */
    PropertyId[PropertyId["SpeechServiceConnection_RecoLanguage"] = 15] = "SpeechServiceConnection_RecoLanguage";
    /**
     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream
     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this
     * property directly.
     * Instead use [[SessionEventArgs.sessionId]].
     * @member PropertyId.Speech_SessionId
     */
    PropertyId[PropertyId["Speech_SessionId"] = 16] = "Speech_SessionId";
    /**
     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have
     * to use this property directly.
     * Instead use [[SpeechConfig.outputFormat]].
     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestDetailedResultTrueFalse"] = 17] = "SpeechServiceResponse_RequestDetailedResultTrueFalse";
    /**
     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.
     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse
     */
    PropertyId[PropertyId["SpeechServiceResponse_RequestProfanityFilterTrueFalse"] = 18] = "SpeechServiceResponse_RequestProfanityFilterTrueFalse";
    /**
     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.
     * @member PropertyId.SpeechServiceResponse_JsonResult
     */
    PropertyId[PropertyId["SpeechServiceResponse_JsonResult"] = 19] = "SpeechServiceResponse_JsonResult";
    /**
     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to
     * use this property directly. Instead use [[CancellationDetails.errorDetails]].
     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails
     */
    PropertyId[PropertyId["SpeechServiceResponse_JsonErrorDetails"] = 20] = "SpeechServiceResponse_JsonErrorDetails";
    /**
     * The cancellation reason. Currently unused.
     * @member PropertyId.CancellationDetails_Reason
     */
    PropertyId[PropertyId["CancellationDetails_Reason"] = 21] = "CancellationDetails_Reason";
    /**
     * The cancellation text. Currently unused.
     * @member PropertyId.CancellationDetails_ReasonText
     */
    PropertyId[PropertyId["CancellationDetails_ReasonText"] = 22] = "CancellationDetails_ReasonText";
    /**
     * The Cancellation detailed text. Currently unused.
     * @member PropertyId.CancellationDetails_ReasonDetailedText
     */
    PropertyId[PropertyId["CancellationDetails_ReasonDetailedText"] = 23] = "CancellationDetails_ReasonDetailedText";
    /**
     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]
     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult
     */
    PropertyId[PropertyId["LanguageUnderstandingServiceResponse_JsonResult"] = 24] = "LanguageUnderstandingServiceResponse_JsonResult";
})(PropertyId = exports.PropertyId || (exports.PropertyId = {}));

//# sourceMappingURL=PropertyId.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/RecognitionEventArgs.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/RecognitionEventArgs.js ***!
  \****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Defines payload for session events like Speech Start/End Detected
 * @class
 */
var RecognitionEventArgs = /** @class */ (function (_super) {
    __extends(RecognitionEventArgs, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    function RecognitionEventArgs(offset, sessionId) {
        var _this = _super.call(this, sessionId) || this;
        _this.privOffset = offset;
        return _this;
    }
    Object.defineProperty(RecognitionEventArgs.prototype, "offset", {
        /**
         * Represents the message offset
         * @member RecognitionEventArgs.prototype.offset
         * @function
         * @public
         */
        get: function () {
            return this.privOffset;
        },
        enumerable: true,
        configurable: true
    });
    return RecognitionEventArgs;
}(Exports_1.SessionEventArgs));
exports.RecognitionEventArgs = RecognitionEventArgs;

//# sourceMappingURL=RecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/RecognitionResult.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/RecognitionResult.js ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines result of speech recognition.
 * @class RecognitionResult
 */
var RecognitionResult = /** @class */ (function () {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {string} text - The recognized text.
     * @param {number} duration - The duration.
     * @param {number} offset - The offset into the stream.
     * @param {string} errorDetails - Error details, if provided.
     * @param {string} json - Additional Json, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     */
    function RecognitionResult(resultId, reason, text, duration, offset, errorDetails, json, properties) {
        this.privResultId = resultId;
        this.privReason = reason;
        this.privText = text;
        this.privDuration = duration;
        this.privOffset = offset;
        this.privErrorDetails = errorDetails;
        this.privJson = json;
        this.privProperties = properties;
    }
    Object.defineProperty(RecognitionResult.prototype, "resultId", {
        /**
         * Specifies the result identifier.
         * @member RecognitionResult.prototype.resultId
         * @function
         * @public
         * @returns {string} Specifies the result identifier.
         */
        get: function () {
            return this.privResultId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionResult.prototype, "reason", {
        /**
         * Specifies status of the result.
         * @member RecognitionResult.prototype.reason
         * @function
         * @public
         * @returns {ResultReason} Specifies status of the result.
         */
        get: function () {
            return this.privReason;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionResult.prototype, "text", {
        /**
         * Presents the recognized text in the result.
         * @member RecognitionResult.prototype.text
         * @function
         * @public
         * @returns {string} Presents the recognized text in the result.
         */
        get: function () {
            return this.privText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionResult.prototype, "duration", {
        /**
         * Duration of recognized speech in 100 nano second incements.
         * @member RecognitionResult.prototype.duration
         * @function
         * @public
         * @returns {number} Duration of recognized speech in 100 nano second incements.
         */
        get: function () {
            return this.privDuration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionResult.prototype, "offset", {
        /**
         * Offset of recognized speech in 100 nano second incements.
         * @member RecognitionResult.prototype.offset
         * @function
         * @public
         * @returns {number} Offset of recognized speech in 100 nano second incements.
         */
        get: function () {
            return this.privOffset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionResult.prototype, "errorDetails", {
        /**
         * In case of an unsuccessful recognition, provides details of the occurred error.
         * @member RecognitionResult.prototype.errorDetails
         * @function
         * @public
         * @returns {string} a brief description of an error.
         */
        get: function () {
            return this.privErrorDetails;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionResult.prototype, "json", {
        /**
         * A string containing Json serialized recognition result as it was received from the service.
         * @member RecognitionResult.prototype.json
         * @function
         * @private
         * @returns {string} Json serialized representation of the result.
         */
        get: function () {
            return this.privJson;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecognitionResult.prototype, "properties", {
        /**
         *  The set of properties exposed in the result.
         * @member RecognitionResult.prototype.properties
         * @function
         * @public
         * @returns {PropertyCollection} The set of properties exposed in the result.
         */
        get: function () {
            return this.privProperties;
        },
        enumerable: true,
        configurable: true
    });
    return RecognitionResult;
}());
exports.RecognitionResult = RecognitionResult;

//# sourceMappingURL=RecognitionResult.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Recognizer.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Recognizer.js ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Exports_2 = __webpack_require__(/*! ../common/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/Exports.js");
var Contracts_1 = __webpack_require__(/*! ./Contracts */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js");
var Exports_3 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Defines the base class Recognizer which mainly contains common event handlers.
 * @class Recognizer
 */
var Recognizer = /** @class */ (function () {
    /**
     * Creates and initializes an instance of a Recognizer
     * @constructor
     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer
     */
    function Recognizer(audioConfig, properties, connectionFactory) {
        this.audioConfig = (audioConfig !== undefined) ? audioConfig : Exports_3.AudioConfig.fromDefaultMicrophoneInput();
        this.privDisposed = false;
        this.privProperties = properties.clone();
        this.privConnectionFactory = connectionFactory;
        this.implCommonRecognizerSetup();
    }
    /**
     * Dispose of associated resources.
     * @member Recognizer.prototype.close
     * @function
     * @public
     */
    Recognizer.prototype.close = function () {
        Contracts_1.Contracts.throwIfDisposed(this.privDisposed);
        this.dispose(true);
    };
    Object.defineProperty(Recognizer.prototype, "internalData", {
        /**
         * @Internal
         * Internal data member to support fromRecognizer* pattern methods on other classes.
         * Do not use externally, object returned will change without warning or notive.
         */
        get: function () {
            return this.privReco;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This method performs cleanup of resources.
     * The Boolean parameter disposing indicates whether the method is called
     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).
     * Derived classes should override this method to dispose resource if needed.
     * @member Recognizer.prototype.dispose
     * @function
     * @public
     * @param {boolean} disposing - Flag to request disposal.
     */
    Recognizer.prototype.dispose = function (disposing) {
        if (this.privDisposed) {
            return;
        }
        if (disposing) {
            if (this.privReco) {
                this.privReco.audioSource.turnOff();
                this.privReco.dispose();
            }
        }
        this.privDisposed = true;
    };
    Object.defineProperty(Recognizer, "telemetryEnabled", {
        /**
         * This method returns the current state of the telemetry setting.
         * @member Recognizer.prototype.telemetryEnabled
         * @function
         * @public
         * @returns true if the telemetry is enabled, false otherwise.
         */
        get: function () {
            return Exports_1.ServiceRecognizerBase.telemetryDataEnabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This method globally enables or disables telemetry.
     * @member Recognizer.prototype.enableTelemetry
     * @function
     * @public
     * @param enabled - Global setting for telemetry collection.
     * If set to true, telemetry information like microphone errors,
     * recognition errors are collected and sent to Microsoft.
     * If set to false, no telemetry is sent to Microsoft.
     */
    /* tslint:disable:member-ordering */
    Recognizer.enableTelemetry = function (enabled) {
        Exports_1.ServiceRecognizerBase.telemetryDataEnabled = enabled;
    };
    // Does the generic recognizer setup that is common accross all recognizer types.
    Recognizer.prototype.implCommonRecognizerSetup = function () {
        var _this = this;
        var osPlatform = (typeof window !== "undefined") ? "Browser" : "Node";
        var osName = "unknown";
        var osVersion = "unknown";
        if (typeof navigator !== "undefined") {
            osPlatform = osPlatform + "/" + navigator.platform;
            osName = navigator.userAgent;
            osVersion = navigator.appVersion;
        }
        var recognizerConfig = this.createRecognizerConfig(new Exports_1.SpeechServiceConfig(new Exports_1.Context(new Exports_1.OS(osPlatform, osName, osVersion))));
        var subscriptionKey = this.privProperties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Key, undefined);
        var authentication = (subscriptionKey && subscriptionKey !== "") ?
            new Exports_1.CognitiveSubscriptionKeyAuthentication(subscriptionKey) :
            new Exports_1.CognitiveTokenAuthentication(function (authFetchEventId) {
                var authorizationToken = _this.privProperties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, undefined);
                return Exports_2.PromiseHelper.fromResult(authorizationToken);
            }, function (authFetchEventId) {
                var authorizationToken = _this.privProperties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, undefined);
                return Exports_2.PromiseHelper.fromResult(authorizationToken);
            });
        this.privReco = this.createServiceRecognizer(authentication, this.privConnectionFactory, this.audioConfig, recognizerConfig);
    };
    // Start the recognition
    Recognizer.prototype.implRecognizerStart = function (recognitionMode, successCallback, errorCallback) {
        this.privReco.recognize(recognitionMode, successCallback, errorCallback).on(
        /* tslint:disable:no-empty */
        function (result) { }, function (error) {
            if (!!errorCallback) {
                // Internal error with service communication.
                errorCallback("Runtime error: " + error);
            }
        });
    };
    Recognizer.prototype.implRecognizerStop = function () {
        if (this.privReco) {
            this.privReco.stopRecognizing();
        }
    };
    return Recognizer;
}());
exports.Recognizer = Recognizer;

//# sourceMappingURL=Recognizer.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ResultReason.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/ResultReason.js ***!
  \********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines the possible reasons a recognition result might be generated.
 * @class ResultReason
 */
var ResultReason;
(function (ResultReason) {
    /**
     * Indicates speech could not be recognized. More details
     * can be found in the NoMatchDetails object.
     * @member ResultReason.NoMatch
     */
    ResultReason[ResultReason["NoMatch"] = 0] = "NoMatch";
    /**
     * Indicates that the recognition was canceled. More details
     * can be found using the CancellationDetails object.
     * @member ResultReason.Canceled
     */
    ResultReason[ResultReason["Canceled"] = 1] = "Canceled";
    /**
     * Indicates the speech result contains hypothesis text.
     * @member ResultReason.RecognizedSpeech
     */
    ResultReason[ResultReason["RecognizingSpeech"] = 2] = "RecognizingSpeech";
    /**
     * Indicates the speech result contains final text that has been recognized.
     * Speech Recognition is now complete for this phrase.
     * @member ResultReason.RecognizedSpeech
     */
    ResultReason[ResultReason["RecognizedSpeech"] = 3] = "RecognizedSpeech";
    /**
     * Indicates the intent result contains hypothesis text and intent.
     * @member ResultReason.RecognizingIntent
     */
    ResultReason[ResultReason["RecognizingIntent"] = 4] = "RecognizingIntent";
    /**
     * Indicates the intent result contains final text and intent.
     * Speech Recognition and Intent determination are now complete for this phrase.
     * @member ResultReason.RecognizedIntent
     */
    ResultReason[ResultReason["RecognizedIntent"] = 5] = "RecognizedIntent";
    /**
     * Indicates the translation result contains hypothesis text and its translation(s).
     * @member ResultReason.TranslatingSpeech
     */
    ResultReason[ResultReason["TranslatingSpeech"] = 6] = "TranslatingSpeech";
    /**
     * Indicates the translation result contains final text and corresponding translation(s).
     * Speech Recognition and Translation are now complete for this phrase.
     * @member ResultReason.TranslatedSpeech
     */
    ResultReason[ResultReason["TranslatedSpeech"] = 7] = "TranslatedSpeech";
    /**
     * Indicates the synthesized audio result contains a non-zero amount of audio data
     * @member ResultReason.SynthesizingAudio
     */
    ResultReason[ResultReason["SynthesizingAudio"] = 8] = "SynthesizingAudio";
    /**
     * Indicates the synthesized audio is now complete for this phrase.
     * @member ResultReason.SynthesizingAudioCompleted
     */
    ResultReason[ResultReason["SynthesizingAudioCompleted"] = 9] = "SynthesizingAudioCompleted";
})(ResultReason = exports.ResultReason || (exports.ResultReason = {}));

//# sourceMappingURL=ResultReason.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SessionEventArgs.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SessionEventArgs.js ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.
 * @class SessionEventArgs
 */
var SessionEventArgs = /** @class */ (function () {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} sessionId - The session id.
     */
    function SessionEventArgs(sessionId) {
        this.privSessionId = sessionId;
    }
    Object.defineProperty(SessionEventArgs.prototype, "sessionId", {
        /**
         * Represents the session identifier.
         * @member SessionEventArgs.prototype.sessionId
         * @function
         * @public
         * @returns {string} Represents the session identifier.
         */
        get: function () {
            return this.privSessionId;
        },
        enumerable: true,
        configurable: true
    });
    return SessionEventArgs;
}());
exports.SessionEventArgs = SessionEventArgs;

//# sourceMappingURL=SessionEventArgs.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechConfig.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechConfig.js ***!
  \********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Contracts_1 = __webpack_require__(/*! ./Contracts */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js");
var Exports_2 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Speech configuration.
 * @class SpeechConfig
 */
var SpeechConfig = /** @class */ (function () {
    /**
     * Creates and initializes an instance.
     * @constructor
     */
    function SpeechConfig() {
    }
    /**
     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.
     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.
     * @member SpeechConfig.fromSubscription
     * @function
     * @public
     * @param {string} subscriptionKey - The subscription key.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechConfig} The speech factory
     */
    SpeechConfig.fromSubscription = function (subscriptionKey, region) {
        Contracts_1.Contracts.throwIfNullOrWhitespace(subscriptionKey, "subscriptionKey");
        Contracts_1.Contracts.throwIfNullOrWhitespace(region, "region");
        var speechImpl = new SpeechConfigImpl();
        speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, region);
        speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_IntentRegion, region);
        speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        return speechImpl;
    };
    /**
     * Creates an instance of the speech config with specified endpoint and subscription key.
     * This method is intended only for users who use a non-standard service endpoint or parameters.
     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.
     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.
     * For example, if language is defined in the uri as query parameter "language=de-DE", and also set by
     *              SpeechConfig.speechRecognitionLanguage = "en-US", the language setting in uri takes precedence,
     *              and the effective language is "de-DE". Only the parameters that are not specified in the
     *              endpoint URL can be set by other APIs.
     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the
     *       fromEndpoint method, and then set authorizationToken="token" on the created SpeechConfig instance to
     *       use the authorization token.
     * @member SpeechConfig.fromEndpoint
     * @function
     * @public
     * @param {URL} endpoint - The service endpoint to connect to.
     * @param {string} subscriptionKey - The subscription key.
     * @returns {SpeechConfig} A speech factory instance.
     */
    SpeechConfig.fromEndpoint = function (endpoint, subscriptionKey) {
        Contracts_1.Contracts.throwIfNull(endpoint, "endpoint");
        Contracts_1.Contracts.throwIfNull(subscriptionKey, "subscriptionKey");
        var speechImpl = new SpeechConfigImpl();
        speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);
        speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        return speechImpl;
    };
    /**
     * Creates an instance of the speech factory with specified initial authorization token and region.
     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token
     *       expires, the caller needs to refresh it by calling this setter with a new valid token.
     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want
     *       to use the Intent recognizer. As configuration values are copied when creating a new recognizer,
     *       the new token value will not apply to recognizers that have already been created. For recognizers
     *       that have been created before, you need to set authorization token of the corresponding recognizer
     *       to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
     * @member SpeechConfig.fromAuthorizationToken
     * @function
     * @public
     * @param {string} authorizationToken - The initial authorization token.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechConfig} A speech factory instance.
     */
    SpeechConfig.fromAuthorizationToken = function (authorizationToken, region) {
        Contracts_1.Contracts.throwIfNull(authorizationToken, "authorizationToken");
        Contracts_1.Contracts.throwIfNullOrWhitespace(region, "region");
        var speechImpl = new SpeechConfigImpl();
        speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, region);
        speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_IntentRegion, region);
        speechImpl.authorizationToken = authorizationToken;
        return speechImpl;
    };
    /**
     * Closes the configuration.
     * @member SpeechConfig.prototype.close
     * @function
     * @public
     */
    /* tslint:disable:no-empty */
    SpeechConfig.prototype.close = function () { };
    return SpeechConfig;
}());
exports.SpeechConfig = SpeechConfig;
/**
 * @private
 * @class SpeechConfigImpl
 */
// tslint:disable-next-line:max-classes-per-file
var SpeechConfigImpl = /** @class */ (function (_super) {
    __extends(SpeechConfigImpl, _super);
    function SpeechConfigImpl() {
        var _this = _super.call(this) || this;
        _this.privProperties = new Exports_2.PropertyCollection();
        _this.speechRecognitionLanguage = "en-US"; // Should we have a default?
        _this.outputFormat = Exports_2.OutputFormat.Simple;
        return _this;
    }
    Object.defineProperty(SpeechConfigImpl.prototype, "properties", {
        get: function () {
            return this.privProperties;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechConfigImpl.prototype, "endPoint", {
        get: function () {
            return new URL(this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechConfigImpl.prototype, "subscriptionKey", {
        get: function () {
            return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Key);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechConfigImpl.prototype, "region", {
        get: function () {
            return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechConfigImpl.prototype, "authorizationToken", {
        get: function () {
            return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token);
        },
        set: function (value) {
            this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechConfigImpl.prototype, "speechRecognitionLanguage", {
        get: function () {
            return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage);
        },
        set: function (value) {
            this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechConfigImpl.prototype, "outputFormat", {
        get: function () {
            return Exports_2.OutputFormat[this.privProperties.getProperty(Exports_1.OutputFormatPropertyName, undefined)];
        },
        set: function (value) {
            this.privProperties.setProperty(Exports_1.OutputFormatPropertyName, Exports_2.OutputFormat[value]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechConfigImpl.prototype, "endpointId", {
        get: function () {
            return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId);
        },
        set: function (value) {
            this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId, value);
        },
        enumerable: true,
        configurable: true
    });
    SpeechConfigImpl.prototype.setProperty = function (name, value) {
        Contracts_1.Contracts.throwIfNull(value, "value");
        this.privProperties.setProperty(name, value);
    };
    SpeechConfigImpl.prototype.getProperty = function (name, def) {
        return this.privProperties.getProperty(name, def);
    };
    SpeechConfigImpl.prototype.setProxy = function (proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);
        this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);
        this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);
        this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);
    };
    SpeechConfigImpl.prototype.clone = function () {
        var ret = new SpeechConfigImpl();
        ret.privProperties = this.privProperties.clone();
        return ret;
    };
    return SpeechConfigImpl;
}(SpeechConfig));
exports.SpeechConfigImpl = SpeechConfigImpl;

//# sourceMappingURL=SpeechConfig.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionCanceledEventArgs.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionCanceledEventArgs.js ***!
  \******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Defines content of a RecognitionErrorEvent.
 * @class SpeechRecognitionCanceledEventArgs
 */
var SpeechRecognitionCanceledEventArgs = /** @class */ (function (_super) {
    __extends(SpeechRecognitionCanceledEventArgs, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {CancellationReason} reason - The cancellation reason.
     * @param {string} errorDetails - Error details, if provided.
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    function SpeechRecognitionCanceledEventArgs(reason, errorDetails, errorCode, offset, sessionId) {
        var _this = _super.call(this, offset, sessionId) || this;
        _this.privReason = reason;
        _this.privErrorDetails = errorDetails;
        _this.privErrorCode = errorCode;
        return _this;
    }
    Object.defineProperty(SpeechRecognitionCanceledEventArgs.prototype, "reason", {
        /**
         * The reason the recognition was canceled.
         * @member SpeechRecognitionCanceledEventArgs.prototype.reason
         * @function
         * @public
         * @returns {CancellationReason} Specifies the reason canceled.
         */
        get: function () {
            return this.privReason;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechRecognitionCanceledEventArgs.prototype, "errorCode", {
        /**
         * The error code in case of an unsuccessful recognition.
         * Added in version 1.1.0.
         * @return An error code that represents the error reason.
         */
        get: function () {
            return this.privErrorCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechRecognitionCanceledEventArgs.prototype, "errorDetails", {
        /**
         * In case of an unsuccessful recognition, provides details of the occurred error.
         * @member SpeechRecognitionCanceledEventArgs.prototype.errorDetails
         * @function
         * @public
         * @returns {string} A String that represents the error details.
         */
        get: function () {
            return this.privErrorDetails;
        },
        enumerable: true,
        configurable: true
    });
    return SpeechRecognitionCanceledEventArgs;
}(Exports_1.RecognitionEventArgs));
exports.SpeechRecognitionCanceledEventArgs = SpeechRecognitionCanceledEventArgs;

//# sourceMappingURL=SpeechRecognitionCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionEventArgs.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionEventArgs.js ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Defines contents of speech recognizing/recognized event.
 * @class SpeechRecognitionEventArgs
 */
var SpeechRecognitionEventArgs = /** @class */ (function (_super) {
    __extends(SpeechRecognitionEventArgs, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {SpeechRecognitionResult} result - The speech recognition result.
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    function SpeechRecognitionEventArgs(result, offset, sessionId) {
        var _this = _super.call(this, offset, sessionId) || this;
        _this.privResult = result;
        return _this;
    }
    Object.defineProperty(SpeechRecognitionEventArgs.prototype, "result", {
        /**
         * Specifies the recognition result.
         * @member SpeechRecognitionEventArgs.prototype.result
         * @function
         * @public
         * @returns {SpeechRecognitionResult} the recognition result.
         */
        get: function () {
            return this.privResult;
        },
        enumerable: true,
        configurable: true
    });
    return SpeechRecognitionEventArgs;
}(Exports_1.RecognitionEventArgs));
exports.SpeechRecognitionEventArgs = SpeechRecognitionEventArgs;

//# sourceMappingURL=SpeechRecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionResult.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognitionResult.js ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Defines result of speech recognition.
 * @class SpeechRecognitionResult
 */
var SpeechRecognitionResult = /** @class */ (function (_super) {
    __extends(SpeechRecognitionResult, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @public
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {string} text - The recognized text.
     * @param {number} duration - The duration.
     * @param {number} offset - The offset into the stream.
     * @param {string} errorDetails - Error details, if provided.
     * @param {string} json - Additional Json, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     */
    function SpeechRecognitionResult(resultId, reason, text, duration, offset, errorDetails, json, properties) {
        return _super.call(this, resultId, reason, text, duration, offset, errorDetails, json, properties) || this;
    }
    return SpeechRecognitionResult;
}(Exports_1.RecognitionResult));
exports.SpeechRecognitionResult = SpeechRecognitionResult;

//# sourceMappingURL=SpeechRecognitionResult.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognizer.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechRecognizer.js ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var SpeechConnectionFactory_1 = __webpack_require__(/*! ../common.speech/SpeechConnectionFactory */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/SpeechConnectionFactory.js");
var Contracts_1 = __webpack_require__(/*! ./Contracts */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js");
var Exports_2 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.
 * @class SpeechRecognizer
 */
var SpeechRecognizer = /** @class */ (function (_super) {
    __extends(SpeechRecognizer, _super);
    /**
     * SpeechRecognizer constructor.
     * @constructor
     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer
     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer
     */
    function SpeechRecognizer(speechConfig, audioConfig) {
        var _this = this;
        var speechConfigImpl = speechConfig;
        Contracts_1.Contracts.throwIfNull(speechConfigImpl, "speechConfig");
        Contracts_1.Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage), Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage]);
        _this = _super.call(this, audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory_1.SpeechConnectionFactory()) || this;
        _this.privDisposedSpeechRecognizer = false;
        return _this;
    }
    Object.defineProperty(SpeechRecognizer.prototype, "endpointId", {
        /**
         * Gets the endpoint id of a customized speech model that is used for speech recognition.
         * @member SpeechRecognizer.prototype.endpointId
         * @function
         * @public
         * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.
         */
        get: function () {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);
            return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId, "00000000-0000-0000-0000-000000000000");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechRecognizer.prototype, "authorizationToken", {
        /**
         * Gets the authorization token used to communicate with the service.
         * @member SpeechRecognizer.prototype.authorizationToken
         * @function
         * @public
         * @returns {string} Authorization token.
         */
        get: function () {
            return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token);
        },
        /**
         * Gets/Sets the authorization token used to communicate with the service.
         * @member SpeechRecognizer.prototype.authorizationToken
         * @function
         * @public
         * @param {string} token - Authorization token.
         */
        set: function (token) {
            Contracts_1.Contracts.throwIfNullOrWhitespace(token, "token");
            this.properties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, token);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechRecognizer.prototype, "speechRecognitionLanguage", {
        /**
         * Gets the spoken language of recognition.
         * @member SpeechRecognizer.prototype.speechRecognitionLanguage
         * @function
         * @public
         * @returns {string} The spoken language of recognition.
         */
        get: function () {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);
            return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechRecognizer.prototype, "outputFormat", {
        /**
         * Gets the output format of recognition.
         * @member SpeechRecognizer.prototype.outputFormat
         * @function
         * @public
         * @returns {OutputFormat} The output format of recognition.
         */
        get: function () {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);
            if (this.properties.getProperty(Exports_1.OutputFormatPropertyName, Exports_2.OutputFormat[Exports_2.OutputFormat.Simple]) === Exports_2.OutputFormat[Exports_2.OutputFormat.Simple]) {
                return Exports_2.OutputFormat.Simple;
            }
            else {
                return Exports_2.OutputFormat.Detailed;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechRecognizer.prototype, "properties", {
        /**
         * The collection of properties and their values defined for this SpeechRecognizer.
         * @member SpeechRecognizer.prototype.properties
         * @function
         * @public
         * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.
         */
        get: function () {
            return this.privProperties;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Starts speech recognition, and stops after the first utterance is recognized.
     * The task returns the recognition text as result.
     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,
     *       so it is suitable only for single shot recognition
     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.
     * @member SpeechRecognizer.prototype.recognizeOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the SpeechRecognitionResult.
     * @param err - Callback invoked in case of an error.
     */
    SpeechRecognizer.prototype.recognizeOnceAsync = function (cb, err) {
        var _this = this;
        try {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);
            this.implRecognizerStop();
            this.implRecognizerStart(Exports_1.RecognitionMode.Interactive, function (e) {
                _this.implRecognizerStop();
                if (!!cb) {
                    cb(e);
                }
            }, function (e) {
                _this.implRecognizerStop();
                if (!!err) {
                    err(e);
                }
            });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    var typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    };
    /**
     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    SpeechRecognizer.prototype.startContinuousRecognitionAsync = function (cb, err) {
        try {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);
            this.implRecognizerStop();
            this.implRecognizerStart(Exports_1.RecognitionMode.Conversation, undefined, undefined);
            // report result to promise.
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
                cb = undefined;
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    var typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    };
    /**
     * Stops continuous speech recognition.
     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    SpeechRecognizer.prototype.stopContinuousRecognitionAsync = function (cb, err) {
        try {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);
            this.implRecognizerStop();
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    var typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    };
    /**
     * Starts speech recognition with keyword spotting, until
     * stopKeywordRecognitionAsync() is called.
     * User must subscribe to events to receive recognition results.
     * Note: Key word spotting functionality is only available on the
     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.
     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync
     * @function
     * @public
     * @param {KeywordRecognitionModel} model The keyword recognition model that
     *        specifies the keyword to be recognized.
     * @param cb - Callback invoked once the recognition has started.
     * @param err - Callback invoked in case of an error.
     */
    SpeechRecognizer.prototype.startKeywordRecognitionAsync = function (model, cb, err) {
        Contracts_1.Contracts.throwIfNull(model, "model");
        if (!!err) {
            err("Not yet implemented.");
        }
    };
    /**
     * Stops continuous speech recognition.
     * Note: Key word spotting functionality is only available on the
     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.
     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync
     * @function
     * @public
     * @param cb - Callback invoked once the recognition has stopped.
     * @param err - Callback invoked in case of an error.
     */
    SpeechRecognizer.prototype.stopKeywordRecognitionAsync = function (cb, err) {
        if (!!cb) {
            cb();
        }
    };
    /**
     * closes all external resources held by an instance of this class.
     * @member SpeechRecognizer.prototype.close
     * @function
     * @public
     */
    SpeechRecognizer.prototype.close = function () {
        Contracts_1.Contracts.throwIfDisposed(this.privDisposedSpeechRecognizer);
        this.dispose(true);
    };
    /**
     * Disposes any resources held by the object.
     * @member SpeechRecognizer.prototype.dispose
     * @function
     * @public
     * @param {boolean} disposing - true if disposing the object.
     */
    SpeechRecognizer.prototype.dispose = function (disposing) {
        if (this.privDisposedSpeechRecognizer) {
            return;
        }
        if (disposing) {
            this.implRecognizerStop();
            this.privDisposedSpeechRecognizer = true;
        }
        _super.prototype.dispose.call(this, disposing);
    };
    SpeechRecognizer.prototype.createRecognizerConfig = function (speechConfig) {
        return new Exports_1.RecognizerConfig(speechConfig, this.properties);
    };
    SpeechRecognizer.prototype.createServiceRecognizer = function (authentication, connectionFactory, audioConfig, recognizerConfig) {
        var configImpl = audioConfig;
        return new Exports_1.SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);
    };
    return SpeechRecognizer;
}(Exports_2.Recognizer));
exports.SpeechRecognizer = SpeechRecognizer;

//# sourceMappingURL=SpeechRecognizer.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechTranslationConfig.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/SpeechTranslationConfig.js ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Contracts_1 = __webpack_require__(/*! ./Contracts */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js");
var Exports_2 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Speech translation configuration.
 * @class SpeechTranslationConfig
 */
var SpeechTranslationConfig = /** @class */ (function (_super) {
    __extends(SpeechTranslationConfig, _super);
    /**
     * Creates an instance of recognizer config.
     */
    function SpeechTranslationConfig() {
        return _super.call(this) || this;
    }
    /**
     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.
     * @member SpeechTranslationConfig.fromSubscription
     * @function
     * @public
     * @param {string} subscriptionKey - The subscription key.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechTranslationConfig} The speech translation config.
     */
    SpeechTranslationConfig.fromSubscription = function (subscriptionKey, region) {
        Contracts_1.Contracts.throwIfNullOrWhitespace(subscriptionKey, "subscriptionKey");
        Contracts_1.Contracts.throwIfNullOrWhitespace(region, "region");
        var ret = new SpeechTranslationConfigImpl();
        ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, region);
        return ret;
    };
    /**
     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.
     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token
     *       expires, the caller needs to refresh it by setting the property authorizationToken with a new
     *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance
     *       will encounter errors during recognition.
     * As configuration values are copied when creating a new recognizer, the new token value will not apply
     * to recognizers that have already been created.
     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer
     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
     * @member SpeechTranslationConfig.fromAuthorizationToken
     * @function
     * @public
     * @param {string} authorizationToken - The authorization token.
     * @param {string} region - The region name (see the <a href="https://aka.ms/csspeech/region">region page</a>).
     * @returns {SpeechTranslationConfig} The speech translation config.
     */
    SpeechTranslationConfig.fromAuthorizationToken = function (authorizationToken, region) {
        Contracts_1.Contracts.throwIfNullOrWhitespace(authorizationToken, "authorizationToken");
        Contracts_1.Contracts.throwIfNullOrWhitespace(region, "region");
        var ret = new SpeechTranslationConfigImpl();
        ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);
        ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, region);
        return ret;
    };
    /**
     * Creates an instance of the speech translation config with specified endpoint and subscription key.
     * This method is intended only for users who use a non-standard service endpoint or paramters.
     * Note: The query properties specified in the endpoint URL are not changed, even if they are
     *       set by any other APIs. For example, if language is defined in the uri as query parameter
     *       "language=de-DE", and also set by the speechRecognitionLanguage property, the language
     *       setting in uri takes precedence, and the effective language is "de-DE".
     * Only the properties that are not specified in the endpoint URL can be set by other APIs.
     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the
     *       fromEndpoint method, and then set authorizationToken="token" on the created SpeechConfig instance to
     *       use the authorization token.
     * @member SpeechTranslationConfig.fromEndpoint
     * @function
     * @public
     * @param {URL} endpoint - The service endpoint to connect to.
     * @param {string} subscriptionKey - The subscription key.
     * @returns {SpeechTranslationConfig} A speech config instance.
     */
    SpeechTranslationConfig.fromEndpoint = function (endpoint, subscriptionKey) {
        Contracts_1.Contracts.throwIfNull(endpoint, "endpoint");
        Contracts_1.Contracts.throwIfNull(subscriptionKey, "subscriptionKey");
        var ret = new SpeechTranslationConfigImpl();
        ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);
        ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);
        return ret;
    };
    return SpeechTranslationConfig;
}(Exports_2.SpeechConfig));
exports.SpeechTranslationConfig = SpeechTranslationConfig;
/**
 * @private
 * @class SpeechTranslationConfigImpl
 */
// tslint:disable-next-line:max-classes-per-file
var SpeechTranslationConfigImpl = /** @class */ (function (_super) {
    __extends(SpeechTranslationConfigImpl, _super);
    function SpeechTranslationConfigImpl() {
        var _this = _super.call(this) || this;
        _this.privSpeechProperties = new Exports_2.PropertyCollection();
        _this.outputFormat = Exports_2.OutputFormat.Simple;
        return _this;
    }
    Object.defineProperty(SpeechTranslationConfigImpl.prototype, "authorizationToken", {
        /**
         * Gets/Sets the authorization token.
         * If this is set, subscription key is ignored.
         * User needs to make sure the provided authorization token is valid and not expired.
         * @member SpeechTranslationConfigImpl.prototype.authorizationToken
         * @function
         * @public
         * @param {string} value - The authorization token.
         */
        set: function (value) {
            Contracts_1.Contracts.throwIfNullOrWhitespace(value, "value");
            this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechTranslationConfigImpl.prototype, "speechRecognitionLanguage", {
        /**
         * Gets/Sets the speech recognition language.
         * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage
         * @function
         * @public
         * @param {string} value - The authorization token.
         */
        set: function (value) {
            Contracts_1.Contracts.throwIfNullOrWhitespace(value, "value");
            this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechTranslationConfigImpl.prototype, "subscriptionKey", {
        /**
         * @member SpeechTranslationConfigImpl.prototype.subscriptionKey
         * @function
         * @public
         */
        get: function () {
            return this.privSpeechProperties.getProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_Key]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechTranslationConfigImpl.prototype, "outputFormat", {
        /**
         * Gets the output format
         * @member SpeechTranslationConfigImpl.prototype.outputFormat
         * @function
         * @public
         */
        get: function () {
            return Exports_2.OutputFormat[this.privSpeechProperties.getProperty(Exports_1.OutputFormatPropertyName, undefined)];
        },
        /**
         * Gets/Sets the output format
         * @member SpeechTranslationConfigImpl.prototype.outputFormat
         * @function
         * @public
         */
        set: function (value) {
            this.privSpeechProperties.setProperty(Exports_1.OutputFormatPropertyName, Exports_2.OutputFormat[value]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechTranslationConfigImpl.prototype, "endpointId", {
        /**
         * Gets the endpoint id.
         * @member SpeechTranslationConfigImpl.prototype.endpointId
         * @function
         * @public
         */
        get: function () {
            return this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId);
        },
        /**
         * Gets/Sets the endpoint id.
         * @member SpeechTranslationConfigImpl.prototype.endpointId
         * @function
         * @public
         */
        set: function (value) {
            this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Add a (text) target language to translate into.
     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage
     * @function
     * @public
     * @param {string} value - The language such as de-DE
     */
    SpeechTranslationConfigImpl.prototype.addTargetLanguage = function (value) {
        Contracts_1.Contracts.throwIfNullOrWhitespace(value, "value");
        var languages = this.targetLanguages;
        languages.push(value);
        this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(","));
    };
    Object.defineProperty(SpeechTranslationConfigImpl.prototype, "targetLanguages", {
        /**
         * Gets the (text) target language to translate into.
         * @member SpeechTranslationConfigImpl.prototype.targetLanguages
         * @function
         * @public
         * @param {string} value - The language such as de-DE
         */
        get: function () {
            if (this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {
                return this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(",");
            }
            else {
                return [];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechTranslationConfigImpl.prototype, "voiceName", {
        /**
         * Gets the voice name.
         * @member SpeechTranslationConfigImpl.prototype.voiceName
         * @function
         * @public
         */
        get: function () {
            return this.getProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice]);
        },
        /**
         * Gets/Sets the voice of the translated language, enable voice synthesis output.
         * @member SpeechTranslationConfigImpl.prototype.voiceName
         * @function
         * @public
         * @param {string} value - The name of the voice.
         */
        set: function (value) {
            Contracts_1.Contracts.throwIfNullOrWhitespace(value, "value");
            this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpeechTranslationConfigImpl.prototype, "region", {
        /**
         * Provides the region.
         * @member SpeechTranslationConfigImpl.prototype.region
         * @function
         * @public
         * @returns {string} The region.
         */
        get: function () {
            return this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region);
        },
        enumerable: true,
        configurable: true
    });
    SpeechTranslationConfigImpl.prototype.setProxy = function (proxyHostName, proxyPort, proxyUserName, proxyPassword) {
        this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);
        this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);
        this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);
        this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);
    };
    /**
     * Gets an arbitrary property value.
     * @member SpeechTranslationConfigImpl.prototype.getProperty
     * @function
     * @public
     * @param {string} name - The name of the property.
     * @param {string} def - The default value of the property in case it is not set.
     * @returns {string} The value of the property.
     */
    SpeechTranslationConfigImpl.prototype.getProperty = function (name, def) {
        return this.privSpeechProperties.getProperty(name, def);
    };
    /**
     * Gets/Sets an arbitrary property value.
     * @member SpeechTranslationConfigImpl.prototype.setProperty
     * @function
     * @public
     * @param {string} name - The name of the property.
     * @param {string} value - The value of the property.
     */
    SpeechTranslationConfigImpl.prototype.setProperty = function (name, value) {
        this.privSpeechProperties.setProperty(name, value);
    };
    Object.defineProperty(SpeechTranslationConfigImpl.prototype, "properties", {
        /**
         * Provides access to custom properties.
         * @member SpeechTranslationConfigImpl.prototype.properties
         * @function
         * @public
         * @returns {PropertyCollection} The properties.
         */
        get: function () {
            return this.privSpeechProperties;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of associated resources.
     * @member SpeechTranslationConfigImpl.prototype.close
     * @function
     * @public
     */
    SpeechTranslationConfigImpl.prototype.close = function () {
        return;
    };
    return SpeechTranslationConfigImpl;
}(SpeechTranslationConfig));
exports.SpeechTranslationConfigImpl = SpeechTranslationConfigImpl;

//# sourceMappingURL=SpeechTranslationConfig.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionCanceledEventArgs.js":
/*!***********************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionCanceledEventArgs.js ***!
  \***********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Define payload of speech recognition canceled result events.
 * @class TranslationRecognitionCanceledEventArgs
 */
var TranslationRecognitionCanceledEventArgs = /** @class */ (function () {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {string} sessionid - The session id.
     * @param {CancellationReason} cancellationReason - The cancellation reason.
     * @param {string} errorDetails - Error details, if provided.
     * @param {TranslationRecognitionResult} result - The result.
     */
    function TranslationRecognitionCanceledEventArgs(sessionid, cancellationReason, errorDetails, errorCode, result) {
        this.privCancelReason = cancellationReason;
        this.privErrorDetails = errorDetails;
        this.privResult = result;
        this.privSessionId = sessionid;
        this.privErrorCode = errorCode;
    }
    Object.defineProperty(TranslationRecognitionCanceledEventArgs.prototype, "result", {
        /**
         * Specifies the recognition result.
         * @member TranslationRecognitionCanceledEventArgs.prototype.result
         * @function
         * @public
         * @returns {TranslationRecognitionResult} the recognition result.
         */
        get: function () {
            return this.privResult;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationRecognitionCanceledEventArgs.prototype, "sessionId", {
        /**
         * Specifies the session identifier.
         * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId
         * @function
         * @public
         * @returns {string} the session identifier.
         */
        get: function () {
            return this.privSessionId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationRecognitionCanceledEventArgs.prototype, "reason", {
        /**
         * The reason the recognition was canceled.
         * @member TranslationRecognitionCanceledEventArgs.prototype.reason
         * @function
         * @public
         * @returns {CancellationReason} Specifies the reason canceled.
         */
        get: function () {
            return this.privCancelReason;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationRecognitionCanceledEventArgs.prototype, "errorCode", {
        /**
         * The error code in case of an unsuccessful recognition.
         * Added in version 1.1.0.
         * @return An error code that represents the error reason.
         */
        get: function () {
            return this.privErrorCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationRecognitionCanceledEventArgs.prototype, "errorDetails", {
        /**
         * In case of an unsuccessful recognition, provides details of the occurred error.
         * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails
         * @function
         * @public
         * @returns {string} A String that represents the error details.
         */
        get: function () {
            return this.privErrorDetails;
        },
        enumerable: true,
        configurable: true
    });
    return TranslationRecognitionCanceledEventArgs;
}());
exports.TranslationRecognitionCanceledEventArgs = TranslationRecognitionCanceledEventArgs;

//# sourceMappingURL=TranslationRecognitionCanceledEventArgs.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionEventArgs.js":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionEventArgs.js ***!
  \***************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Translation text result event arguments.
 * @class TranslationRecognitionEventArgs
 */
var TranslationRecognitionEventArgs = /** @class */ (function (_super) {
    __extends(TranslationRecognitionEventArgs, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {TranslationRecognitionResult} result - The translation recognition result.
     * @param {number} offset - The offset.
     * @param {string} sessionId - The session id.
     */
    function TranslationRecognitionEventArgs(result, offset, sessionId) {
        var _this = _super.call(this, offset, sessionId) || this;
        _this.privResult = result;
        return _this;
    }
    Object.defineProperty(TranslationRecognitionEventArgs.prototype, "result", {
        /**
         * Specifies the recognition result.
         * @member TranslationRecognitionEventArgs.prototype.result
         * @function
         * @public
         * @returns {TranslationRecognitionResult} the recognition result.
         */
        get: function () {
            return this.privResult;
        },
        enumerable: true,
        configurable: true
    });
    return TranslationRecognitionEventArgs;
}(Exports_1.RecognitionEventArgs));
exports.TranslationRecognitionEventArgs = TranslationRecognitionEventArgs;

//# sourceMappingURL=TranslationRecognitionEventArgs.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionResult.js":
/*!************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognitionResult.js ***!
  \************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Translation text result.
 * @class TranslationRecognitionResult
 */
var TranslationRecognitionResult = /** @class */ (function (_super) {
    __extends(TranslationRecognitionResult, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {Translations} translations - The translations.
     * @param {string} resultId - The result id.
     * @param {ResultReason} reason - The reason.
     * @param {string} text - The recognized text.
     * @param {number} duration - The duration.
     * @param {number} offset - The offset into the stream.
     * @param {string} errorDetails - Error details, if provided.
     * @param {string} json - Additional Json, if provided.
     * @param {PropertyCollection} properties - Additional properties, if provided.
     */
    function TranslationRecognitionResult(translations, resultId, reason, text, duration, offset, errorDetails, json, properties) {
        var _this = _super.call(this, resultId, reason, text, duration, offset, errorDetails, json, properties) || this;
        _this.privTranslations = translations;
        return _this;
    }
    Object.defineProperty(TranslationRecognitionResult.prototype, "translations", {
        /**
         * Presents the translation results. Each item in the dictionary represents
         * a translation result in one of target languages, where the key is the name
         * of the target language, in BCP-47 format, and the value is the translation
         * text in the specified language.
         * @member TranslationRecognitionResult.prototype.translations
         * @function
         * @public
         * @returns {Translations} the current translation map that holds all translations requested.
         */
        get: function () {
            return this.privTranslations;
        },
        enumerable: true,
        configurable: true
    });
    return TranslationRecognitionResult;
}(Exports_1.SpeechRecognitionResult));
exports.TranslationRecognitionResult = TranslationRecognitionResult;

//# sourceMappingURL=TranslationRecognitionResult.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognizer.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationRecognizer.js ***!
  \*****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ../common.speech/Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Exports.js");
var Contracts_1 = __webpack_require__(/*! ./Contracts */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Contracts.js");
var Exports_2 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Translation recognizer
 * @class TranslationRecognizer
 */
var TranslationRecognizer = /** @class */ (function (_super) {
    __extends(TranslationRecognizer, _super);
    /**
     * Initializes an instance of the TranslationRecognizer.
     * @constructor
     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.
     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer
     */
    function TranslationRecognizer(speechConfig, audioConfig) {
        var _this = this;
        var configImpl = speechConfig;
        Contracts_1.Contracts.throwIfNull(configImpl, "speechConfig");
        _this = _super.call(this, audioConfig, configImpl.properties, new Exports_1.TranslationConnectionFactory()) || this;
        _this.privDisposedTranslationRecognizer = false;
        _this.privProperties = configImpl.properties.clone();
        if (_this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {
            Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice), Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice]);
        }
        Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages), Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages]);
        Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage), Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage]);
        return _this;
    }
    Object.defineProperty(TranslationRecognizer.prototype, "speechRecognitionLanguage", {
        /**
         * Gets the language name that was set when the recognizer was created.
         * @member TranslationRecognizer.prototype.speechRecognitionLanguage
         * @function
         * @public
         * @returns {string} Gets the language name that was set when the recognizer was created.
         */
        get: function () {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
            return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationRecognizer.prototype, "targetLanguages", {
        /**
         * Gets target languages for translation that were set when the recognizer was created.
         * The language is specified in BCP-47 format. The translation will provide translated text for each of language.
         * @member TranslationRecognizer.prototype.targetLanguages
         * @function
         * @public
         * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.
         */
        get: function () {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
            return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(",");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationRecognizer.prototype, "voiceName", {
        /**
         * Gets the name of output voice.
         * @member TranslationRecognizer.prototype.voiceName
         * @function
         * @public
         * @returns {string} the name of output voice.
         */
        get: function () {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
            return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice, undefined);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationRecognizer.prototype, "authorizationToken", {
        /**
         * Gets the authorization token used to communicate with the service.
         * @member TranslationRecognizer.prototype.authorizationToken
         * @function
         * @public
         * @returns {string} Authorization token.
         */
        get: function () {
            return this.properties.getProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token);
        },
        /**
         * Gets/Sets the authorization token used to communicate with the service.
         * @member TranslationRecognizer.prototype.authorizationToken
         * @function
         * @public
         * @param {string} value - Authorization token.
         */
        set: function (value) {
            this.properties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationRecognizer.prototype, "properties", {
        /**
         * The collection of properties and their values defined for this TranslationRecognizer.
         * @member TranslationRecognizer.prototype.properties
         * @function
         * @public
         * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.
         */
        get: function () {
            return this.privProperties;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Starts recognition and translation, and stops after the first utterance is recognized.
     * The task returns the translation text as result.
     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly
     *       for single shot recognition like command or query. For long-running recognition,
     *       use startContinuousRecognitionAsync() instead.
     * @member TranslationRecognizer.prototype.recognizeOnceAsync
     * @function
     * @public
     * @param cb - Callback that received the result when the translation has completed.
     * @param err - Callback invoked in case of an error.
     */
    TranslationRecognizer.prototype.recognizeOnceAsync = function (cb, err) {
        var _this = this;
        try {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
            this.implRecognizerStop();
            this.implRecognizerStart(Exports_1.RecognitionMode.Conversation, function (e) {
                _this.implRecognizerStop();
                if (!!cb) {
                    cb(e);
                }
            }, function (e) {
                _this.implRecognizerStop();
                if (!!err) {
                    err(e);
                }
            });
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    var typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    };
    /**
     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.
     * User must subscribe to events to receive translation results.
     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback that received the translation has started.
     * @param err - Callback invoked in case of an error.
     */
    TranslationRecognizer.prototype.startContinuousRecognitionAsync = function (cb, err) {
        try {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
            this.implRecognizerStop();
            this.implRecognizerStart(Exports_1.RecognitionMode.Conversation, undefined, undefined);
            // report result to promise.
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
                cb = undefined;
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    var typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    };
    /**
     * Stops continuous recognition and translation.
     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync
     * @function
     * @public
     * @param cb - Callback that received the translation has stopped.
     * @param err - Callback invoked in case of an error.
     */
    TranslationRecognizer.prototype.stopContinuousRecognitionAsync = function (cb, err) {
        try {
            Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
            this.implRecognizerStop();
            if (!!cb) {
                try {
                    cb();
                }
                catch (e) {
                    if (!!err) {
                        err(e);
                    }
                }
            }
        }
        catch (error) {
            if (!!err) {
                if (error instanceof Error) {
                    var typedError = error;
                    err(typedError.name + ": " + typedError.message);
                }
                else {
                    err(error);
                }
            }
            // Destroy the recognizer.
            this.dispose(true);
        }
    };
    /**
     * closes all external resources held by an instance of this class.
     * @member TranslationRecognizer.prototype.close
     * @function
     * @public
     */
    TranslationRecognizer.prototype.close = function () {
        Contracts_1.Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);
        this.dispose(true);
    };
    TranslationRecognizer.prototype.dispose = function (disposing) {
        if (this.privDisposedTranslationRecognizer) {
            return;
        }
        if (disposing) {
            this.implRecognizerStop();
            this.privDisposedTranslationRecognizer = true;
            _super.prototype.dispose.call(this, disposing);
        }
    };
    TranslationRecognizer.prototype.createRecognizerConfig = function (speechConfig) {
        return new Exports_1.RecognizerConfig(speechConfig, this.properties);
    };
    TranslationRecognizer.prototype.createServiceRecognizer = function (authentication, connectionFactory, audioConfig, recognizerConfig) {
        var configImpl = audioConfig;
        return new Exports_1.TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);
    };
    return TranslationRecognizer;
}(Exports_2.Recognizer));
exports.TranslationRecognizer = TranslationRecognizer;

//# sourceMappingURL=TranslationRecognizer.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationSynthesisEventArgs.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationSynthesisEventArgs.js ***!
  \*************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Translation Synthesis event arguments
 * @class TranslationSynthesisEventArgs
 */
var TranslationSynthesisEventArgs = /** @class */ (function (_super) {
    __extends(TranslationSynthesisEventArgs, _super);
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {TranslationSynthesisResult} result - The translation synthesis result.
     * @param {string} sessionId - The session id.
     */
    function TranslationSynthesisEventArgs(result, sessionId) {
        var _this = _super.call(this, sessionId) || this;
        _this.privResult = result;
        return _this;
    }
    Object.defineProperty(TranslationSynthesisEventArgs.prototype, "result", {
        /**
         * Specifies the translation synthesis result.
         * @member TranslationSynthesisEventArgs.prototype.result
         * @function
         * @public
         * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.
         */
        get: function () {
            return this.privResult;
        },
        enumerable: true,
        configurable: true
    });
    return TranslationSynthesisEventArgs;
}(Exports_1.SessionEventArgs));
exports.TranslationSynthesisEventArgs = TranslationSynthesisEventArgs;

//# sourceMappingURL=TranslationSynthesisEventArgs.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationSynthesisResult.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/TranslationSynthesisResult.js ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines translation synthesis result, i.e. the voice output of the translated
 * text in the target language.
 * @class TranslationSynthesisResult
 */
var TranslationSynthesisResult = /** @class */ (function () {
    /**
     * Creates and initializes an instance of this class.
     * @constructor
     * @param {ResultReason} reason - The synthesis reason.
     * @param {ArrayBuffer} audio - The audio data.
     */
    function TranslationSynthesisResult(reason, audio) {
        this.privReason = reason;
        this.privAudio = audio;
    }
    Object.defineProperty(TranslationSynthesisResult.prototype, "audio", {
        /**
         * Translated text in the target language.
         * @member TranslationSynthesisResult.prototype.audio
         * @function
         * @public
         * @returns {ArrayBuffer} Translated audio in the target language.
         */
        get: function () {
            return this.privAudio;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TranslationSynthesisResult.prototype, "reason", {
        /**
         * The synthesis status.
         * @member TranslationSynthesisResult.prototype.reason
         * @function
         * @public
         * @returns {ResultReason} The synthesis status.
         */
        get: function () {
            return this.privReason;
        },
        enumerable: true,
        configurable: true
    });
    return TranslationSynthesisResult;
}());
exports.TranslationSynthesisResult = TranslationSynthesisResult;

//# sourceMappingURL=TranslationSynthesisResult.js.map


/***/ }),

/***/ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Translations.js":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Translations.js ***!
  \********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var Exports_1 = __webpack_require__(/*! ./Exports */ "./node_modules/web-speech-cognitive-services/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Exports.js");
/**
 * Represents collection of parameters and their values.
 * @class Translation
 */
var Translations = /** @class */ (function () {
    function Translations() {
        // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.
        this.privMap = new Exports_1.PropertyCollection();
    }
    /**
     * Returns the parameter value in type String. The parameter must have the same type as String.
     * Currently only String, int and bool are allowed.
     * If the name is not available, the specified defaultValue is returned.
     * @member Translation.prototype.get
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} def - The default value which is returned if the parameter is not available in the collection.
     * @returns {string} value of the parameter.
     */
    Translations.prototype.get = function (key, def) {
        return this.privMap.getProperty(key, def);
    };
    /**
     * Sets the String value of the parameter specified by name.
     * @member Translation.prototype.set
     * @function
     * @public
     * @param {string} key - The parameter name.
     * @param {string} value - The value of the parameter.
     */
    Translations.prototype.set = function (key, value) {
        this.privMap.setProperty(key, value);
    };
    return Translations;
}());
exports.Translations = Translations;

//# sourceMappingURL=Translations.js.map


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ 0:
/*!***********************************!*\
  !*** https-proxy-agent (ignored) ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!********************!*\
  !*** ws (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/*!******************************************!*\
  !*** ../../external/ocsp/ocsp (ignored) ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/*!***********************************!*\
  !*** https-proxy-agent (ignored) ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 4:
/*!********************!*\
  !*** ws (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 5:
/*!******************************************!*\
  !*** ../../external/ocsp/ocsp (ignored) ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9saWIvRGlyZWN0TGluZVNwZWVjaC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbGliL1NwZWVjaFN5bnRoZXNpc0F1ZGlvU3RyZWFtVXR0ZXJhbmNlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9saWIvY29nbml0aXZlU2VydmljZXNQcm9taXNlVG9FU1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL2xpYi9jcmVhdGVBZGFwdGVycy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbGliL2NyZWF0ZUVycm9yRXZlbnQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL2xpYi9jcmVhdGVUYXNrUXVldWUuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL2xpYi9jcmVhdGVXZWJTcGVlY2hQb255ZmlsbEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL2xpYi9leHRlcm5hbC9ldmVudC10YXJnZXQtc2hpbS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbGliL2luZGV4LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9saWIvcGF0Y2hEaWFsb2dTZXJ2aWNlQ29ubmVjdG9ySW5saW5lLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9saWIvcGxheUNvZ25pdGl2ZVNlcnZpY2VzU3RyZWFtLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9saWIvcGxheVdoaXRlTm9pc2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL2xpYi9zaGFyZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2Fib3J0LWNvbnRyb2xsZXIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1hcnJheWJ1ZmZlci9saWIvYmFzZTY0LWFycmF5YnVmZmVyLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mZWF0dXJlcy9vYnNlcnZhYmxlL2luZGV4LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2JpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGUuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93cmFwcGVkLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvZXZlbnQtYXMtcHJvbWlzZS9saWIvZXh0ZXJuYWwvcC1kZWZlci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2V2ZW50LWFzLXByb21pc2UvbGliL2luZGV4LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9taWNyb3NvZnQuY29nbml0aXZlc2VydmljZXMuc3BlZWNoLnNkay5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uYnJvd3Nlci9Db25zb2xlTG9nZ2luZ0xpc3RlbmVyLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5icm93c2VyL0V4cG9ydHMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLmJyb3dzZXIvRmlsZUF1ZGlvU291cmNlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5icm93c2VyL01pY0F1ZGlvU291cmNlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5icm93c2VyL1BDTVJlY29yZGVyLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5icm93c2VyL1Byb3h5SW5mby5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uYnJvd3Nlci9SZXBsYXlhYmxlQXVkaW9Ob2RlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5icm93c2VyL1dlYnNvY2tldENvbm5lY3Rpb24uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLmJyb3dzZXIvV2Vic29ja2V0TWVzc2FnZUFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9BZGRlZExtSW50ZW50LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5zcGVlY2gvQWdlbnRDb25maWcuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9Db2duaXRpdmVTdWJzY3JpcHRpb25LZXlBdXRoZW50aWNhdGlvbi5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL0NvZ25pdGl2ZVRva2VuQXV0aGVudGljYXRpb24uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9Db25uZWN0aW9uRmFjdG9yeUJhc2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9EaWFsb2dDb25uZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5zcGVlY2gvRGlhbG9nU2VydmljZUFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9EaWFsb2dTZXJ2aWNlVHVyblN0YXRlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5zcGVlY2gvRGlhbG9nU2VydmljZVR1cm5TdGF0ZU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9EeW5hbWljR3JhbW1hckJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9FbnVtVHJhbnNsYXRpb24uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9FeHBvcnRzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5zcGVlY2gvSUF1dGhlbnRpY2F0aW9uLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5zcGVlY2gvSW50ZW50Q29ubmVjdGlvbkZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9JbnRlbnRTZXJ2aWNlUmVjb2duaXplci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1F1ZXJ5UGFyYW1ldGVyTmFtZXMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9SZWNvZ25pdGlvbkV2ZW50cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1JlY29nbml6ZXJDb25maWcuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9SZXF1ZXN0U2Vzc2lvbi5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9BY3Rpdml0eVJlc3BvbnNlUGF5bG9hZC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9EZXRhaWxlZFNwZWVjaFBocmFzZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9FbnVtcy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9JbnRlbnRSZXNwb25zZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9TaW1wbGVTcGVlY2hQaHJhc2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9TZXJ2aWNlTWVzc2FnZXMvU3BlZWNoRGV0ZWN0ZWQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9TZXJ2aWNlTWVzc2FnZXMvU3BlZWNoSHlwb3RoZXNpcy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9UcmFuc2xhdGlvbkh5cG90aGVzaXMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9TZXJ2aWNlTWVzc2FnZXMvVHJhbnNsYXRpb25QaHJhc2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9TZXJ2aWNlTWVzc2FnZXMvVHJhbnNsYXRpb25TeW50aGVzaXNFbmQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9TZXJ2aWNlUmVjb2duaXplckJhc2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9TZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIuSW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9TcGVlY2hDb25uZWN0aW9uRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1NwZWVjaENvbm5lY3Rpb25NZXNzYWdlLkludGVybmFsLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5zcGVlY2gvU3BlZWNoQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1NwZWVjaFNlcnZpY2VSZWNvZ25pemVyLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi5zcGVlY2gvVHJhbnNsYXRpb25Db25uZWN0aW9uRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1RyYW5zbGF0aW9uU2VydmljZVJlY29nbml6ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uLnNwZWVjaC9UcmFuc2xhdGlvblN0YXR1cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24uc3BlZWNoL1dlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uL0F1ZGlvU291cmNlRXZlbnRzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi9DaHVua2VkQXJyYXlCdWZmZXJTdHJlYW0uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uL0Nvbm5lY3Rpb25FdmVudHMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uL0Nvbm5lY3Rpb25NZXNzYWdlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi9Db25uZWN0aW9uT3BlblJlc3BvbnNlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi9FcnJvci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24vRXZlbnRTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uL0V2ZW50cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24vRXhwb3J0cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24vR3VpZC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24vSUNvbm5lY3Rpb24uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uL0xpc3QuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uL1BsYXRmb3JtRXZlbnQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uL1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvY29tbW9uL1F1ZXVlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi9SYXdXZWJzb2NrZXRNZXNzYWdlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL2NvbW1vbi9SaWZmUGNtRW5jb2Rlci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9jb21tb24vU3RyZWFtLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9BY3Rpdml0eVJlY2VpdmVkRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9BdWRpby9BdWRpb0NvbmZpZy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvQXVkaW8vQXVkaW9JbnB1dFN0cmVhbS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvQXVkaW8vQXVkaW9PdXRwdXRTdHJlYW0uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL0F1ZGlvL0F1ZGlvU3RyZWFtRm9ybWF0LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9BdWRpby9CYXNlQXVkaW9QbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL0F1ZGlvL1B1bGxBdWRpb0lucHV0U3RyZWFtQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL0JvdEZyYW1ld29ya0NvbmZpZy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvQ2FuY2VsbGF0aW9uRGV0YWlscy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvQ2FuY2VsbGF0aW9uRXJyb3JDb2Rlcy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvQ2FuY2VsbGF0aW9uUmVhc29uLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9Db25uZWN0aW9uLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9Db25uZWN0aW9uRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9Db250cmFjdHMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL0RpYWxvZ1NlcnZpY2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL0RpYWxvZ1NlcnZpY2VDb25uZWN0b3IuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL0V4cG9ydHMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL0ludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL0ludGVudFJlY29nbml0aW9uRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9JbnRlbnRSZWNvZ25pdGlvblJlc3VsdC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvSW50ZW50UmVjb2duaXplci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvS2V5d29yZFJlY29nbml0aW9uTW9kZWwuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL0xhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9Ob01hdGNoRGV0YWlscy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvTm9NYXRjaFJlYXNvbi5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvT3V0cHV0Rm9ybWF0LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9QaHJhc2VMaXN0R3JhbW1hci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvUHJvZmFuaXR5T3B0aW9uLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9Qcm9wZXJ0eUNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL1Byb3BlcnR5SWQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL1JlY29nbml0aW9uRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9SZWNvZ25pdGlvblJlc3VsdC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvUmVjb2duaXplci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvUmVzdWx0UmVhc29uLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9TZXJ2aWNlUHJvcGVydHlDaGFubmVsLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9TZXNzaW9uRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9TcGVlY2hDb21tYW5kc0NvbmZpZy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvU3BlZWNoQ29uZmlnLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9TcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9TcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJncy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvU3BlZWNoUmVjb2duaXRpb25SZXN1bHQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL1NwZWVjaFJlY29nbml6ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL1NwZWVjaFRyYW5zbGF0aW9uQ29uZmlnLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9UcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL1RyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3MuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL1RyYW5zbGF0aW9uUmVjb2duaXRpb25SZXN1bHQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL1RyYW5zbGF0aW9uUmVjb2duaXplci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvZXMyMDE1L3NyYy9zZGsvVHJhbnNsYXRpb25TeW50aGVzaXNFdmVudEFyZ3MuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2VzMjAxNS9zcmMvc2RrL1RyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9lczIwMTUvc3JjL3Nkay9UcmFuc2xhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy9wLWRlZmVyL2luZGV4LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbGliL1NwZWVjaFNlcnZpY2VzL1NwZWVjaFNESy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL2xpYi9TcGVlY2hTZXJ2aWNlcy9TcGVlY2hUb1RleHQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9saWIvU3BlZWNoU2VydmljZXMvU3BlZWNoVG9UZXh0L1NwZWVjaEdyYW1tYXJMaXN0LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbGliL1NwZWVjaFNlcnZpY2VzL1NwZWVjaFRvVGV4dC9jb2duaXRpdmVTZXJ2aWNlRXZlbnRSZXN1bHRUb1dlYlNwZWVjaFJlY29nbml0aW9uUmVzdWx0TGlzdC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL2xpYi9TcGVlY2hTZXJ2aWNlcy9TcGVlY2hUb1RleHQvY3JlYXRlU3BlZWNoUmVjb2duaXRpb25Qb255ZmlsbC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL2xpYi9TcGVlY2hTZXJ2aWNlcy9wYXRjaE9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9saWIvU3BlZWNoU2VydmljZXMvcmVzb2x2ZUZ1bmN0aW9uT3JSZXR1cm5WYWx1ZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL2xpYi9VdGlsL2FycmF5VG9NYXAuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9saWIvVXRpbC9jcmVhdGVEZWZlcnJlZC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL2xpYi9VdGlsL2NyZWF0ZVByb21pc2VRdWV1ZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL2xpYi9leHRlcm5hbC9ldmVudC10YXJnZXQtc2hpbS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9taWNyb3NvZnQuY29nbml0aXZlc2VydmljZXMuc3BlZWNoLnNkay5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLmJyb3dzZXIvQ29uc29sZUxvZ2dpbmdMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLmJyb3dzZXIvRXhwb3J0cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLmJyb3dzZXIvRmlsZUF1ZGlvU291cmNlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uYnJvd3Nlci9NaWNBdWRpb1NvdXJjZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLmJyb3dzZXIvUENNUmVjb3JkZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5icm93c2VyL1Byb3h5SW5mby5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLmJyb3dzZXIvUmVwbGF5YWJsZUF1ZGlvTm9kZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLmJyb3dzZXIvV2Vic29ja2V0Q29ubmVjdGlvbi5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLmJyb3dzZXIvV2Vic29ja2V0TWVzc2FnZUFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvQWRkZWRMbUludGVudC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLnNwZWVjaC9Db2duaXRpdmVTdWJzY3JpcHRpb25LZXlBdXRoZW50aWNhdGlvbi5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLnNwZWVjaC9Db2duaXRpdmVUb2tlbkF1dGhlbnRpY2F0aW9uLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL0R5bmFtaWNHcmFtbWFyQnVpbGRlci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLnNwZWVjaC9FbnVtVHJhbnNsYXRpb24uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvRXhwb3J0cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLnNwZWVjaC9JQXV0aGVudGljYXRpb24uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvSW50ZW50Q29ubmVjdGlvbkZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvSW50ZW50U2VydmljZVJlY29nbml6ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvUXVlcnlQYXJhbWV0ZXJOYW1lcy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLnNwZWVjaC9SZWNvZ25pdGlvbkV2ZW50cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLnNwZWVjaC9SZWNvZ25pemVyQ29uZmlnLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1JlcXVlc3RTZXNzaW9uLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9EZXRhaWxlZFNwZWVjaFBocmFzZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLnNwZWVjaC9TZXJ2aWNlTWVzc2FnZXMvRW51bXMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvU2VydmljZU1lc3NhZ2VzL0ludGVudFJlc3BvbnNlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9TaW1wbGVTcGVlY2hQaHJhc2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvU2VydmljZU1lc3NhZ2VzL1NwZWVjaERldGVjdGVkLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9TcGVlY2hIeXBvdGhlc2lzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9UcmFuc2xhdGlvbkh5cG90aGVzaXMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvU2VydmljZU1lc3NhZ2VzL1RyYW5zbGF0aW9uUGhyYXNlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1NlcnZpY2VNZXNzYWdlcy9UcmFuc2xhdGlvblN5bnRoZXNpc0VuZC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLnNwZWVjaC9TZXJ2aWNlUmVjb2duaXplckJhc2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvU2VydmljZVRlbGVtZXRyeUxpc3RlbmVyLkludGVybmFsLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1NwZWVjaENvbm5lY3Rpb25GYWN0b3J5LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1NwZWVjaENvbm5lY3Rpb25NZXNzYWdlLkludGVybmFsLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1NwZWVjaENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvU3BlZWNoU2VydmljZVJlY29nbml6ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi5zcGVlY2gvVHJhbnNsYXRpb25Db25uZWN0aW9uRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uLnNwZWVjaC9UcmFuc2xhdGlvblNlcnZpY2VSZWNvZ25pemVyLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1RyYW5zbGF0aW9uU3RhdHVzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24uc3BlZWNoL1dlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi9BdWRpb1NvdXJjZUV2ZW50cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uL0NodW5rZWRBcnJheUJ1ZmZlclN0cmVhbS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uL0Nvbm5lY3Rpb25FdmVudHMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi9Db25uZWN0aW9uTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uL0Nvbm5lY3Rpb25PcGVuUmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi9FcnJvci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uL0V2ZW50U291cmNlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24vRXZlbnRzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24vRXhwb3J0cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uL0d1aWQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi9JQ29ubmVjdGlvbi5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uL0xpc3QuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL2NvbW1vbi9QbGF0Zm9ybUV2ZW50LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24vUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uL1F1ZXVlLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24vUmF3V2Vic29ja2V0TWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvY29tbW9uL1JpZmZQY21FbmNvZGVyLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9jb21tb24vU3RyZWFtLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvQXVkaW8vQXVkaW9Db25maWcuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9BdWRpby9BdWRpb0lucHV0U3RyZWFtLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvQXVkaW8vQXVkaW9TdHJlYW1Gb3JtYXQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9BdWRpby9QdWxsQXVkaW9JbnB1dFN0cmVhbUNhbGxiYWNrLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvQ2FuY2VsbGF0aW9uRGV0YWlscy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvc2RrL0NhbmNlbGxhdGlvbkVycm9yQ29kZXMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9DYW5jZWxsYXRpb25SZWFzb24uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9Db25uZWN0aW9uLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvQ29ubmVjdGlvbkV2ZW50QXJncy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvc2RrL0NvbnRyYWN0cy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvc2RrL0V4cG9ydHMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9JbnRlbnRSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvSW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9JbnRlbnRSZWNvZ25pdGlvblJlc3VsdC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvc2RrL0ludGVudFJlY29nbml6ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9LZXl3b3JkUmVjb2duaXRpb25Nb2RlbC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvc2RrL0xhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvTm9NYXRjaERldGFpbHMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9Ob01hdGNoUmVhc29uLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvT3V0cHV0Rm9ybWF0LmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvUGhyYXNlTGlzdEdyYW1tYXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9Qcm9wZXJ0eUNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9Qcm9wZXJ0eUlkLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvUmVjb2duaXRpb25FdmVudEFyZ3MuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9SZWNvZ25pdGlvblJlc3VsdC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvc2RrL1JlY29nbml6ZXIuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9SZXN1bHRSZWFzb24uanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9TZXNzaW9uRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvU3BlZWNoQ29uZmlnLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvc2RrL1NwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvU3BlZWNoUmVjb2duaXRpb25SZXN1bHQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9TcGVlY2hSZWNvZ25pemVyLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvU3BlZWNoVHJhbnNsYXRpb25Db25maWcuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9UcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9UcmFuc2xhdGlvblJlY29nbml0aW9uRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdC5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvc2RrL1RyYW5zbGF0aW9uUmVjb2duaXplci5qcyIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4vbm9kZV9tb2R1bGVzL3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL25vZGVfbW9kdWxlcy9taWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9zcmMvc2RrL1RyYW5zbGF0aW9uU3ludGhlc2lzRXZlbnRBcmdzLmpzIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvLi9ub2RlX21vZHVsZXMvd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbm9kZV9tb2R1bGVzL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL2Rpc3RyaWIvbGliL3NyYy9zZGsvVHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHQuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uL25vZGVfbW9kdWxlcy93ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsvZGlzdHJpYi9saWIvc3JjL3Nkay9UcmFuc2xhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC9odHRwcy1wcm94eS1hZ2VudCAoaWdub3JlZCkiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC93cyAoaWdub3JlZCkiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC8uLi8uLi9leHRlcm5hbC9vY3NwL29jc3AgKGlnbm9yZWQpIiwid2VicGFjazovL0RpcmVjdExpbmVTcGVlY2gvaHR0cHMtcHJveHktYWdlbnQgKGlnbm9yZWQpPzE4MmEiLCJ3ZWJwYWNrOi8vRGlyZWN0TGluZVNwZWVjaC93cyAoaWdub3JlZCk/ODNiZiIsIndlYnBhY2s6Ly9EaXJlY3RMaW5lU3BlZWNoLy4uLy4uL2V4dGVybmFsL29jc3Avb2NzcCAo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Q0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFVBQVU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSx1Q0FBdUMsU0FBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxFQUFFO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixlQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0EscUJBQXFCLGVBQWU7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsU0FBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxtQkFBbUIsY0FBYztBQUNqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELE9BQU87QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RCxPQUFPO0FBQzlEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixRQUFRO0FBQzdCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsWUFBWTtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFF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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0NBQWdDOztBQUVqQzs7Ozs7Ozs7Ozs7OztBQ3RQQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQzZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUNBQW1DLHlEQUFnQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDLFdBQVc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUNBQWlDLGtCQUFrQjtBQUNuRDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUEsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLDhDQUE4QyxRQUFRO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtB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QVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUN2TWE7QUFDYjtBQUNBO0FBQ0EsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUM1RGE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnQkFBZ0Isc0NBQXNDLGlCQUFpQixFQUFFO0FBQ3ZGLDZCQUE2Qix1REFBdUQ7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQThDLGNBQWM7QUFDNUQsZ0JBQWdCLG1CQUFPLENBQUMsNkpBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxzQ0FBc0M7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdIQUFnSDtBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEOztBQUVBOzs7Ozs7Ozs7Ozs7O0FDNU5hO0FBQ2I7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRFQUE0RTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMscUZBQXFGO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtRUFBbUU7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDJDQUEyQzs7QUFFNUM7Ozs7Ozs7Ozs7Ozs7QUMzS2E7QUFDYjtBQUNBO0FBQ0EsOENBQThDLGNBQWM7QUFDNUQsZ0JBQWdCLG1CQUFPLENBQUMsNkpBQW1CO0FBQzNDLDBCQUEwQixtQkFBTyxDQUFDLGdMQUFxQjtBQUN2RCwwQ0FBMEMsbUJBQU8sQ0FBQyxnTkFBcUM7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGdCQUFnQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUNoTmE7QUFDYjtBQUNBO0FBQ0EsOENBQThDLGNBQWM7QUFDNUQsZ0JBQWdCLG1CQUFPLENBQUMsNkpBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEOztBQUVBOzs7Ozs7Ozs7Ozs7O0FDN0NhO0FBQ2I7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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLGdCQUFnQjtBQUN6RjtB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QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQThDLGNBQWM7QUFDNUQsc0JBQXNCLG1CQUFPLENBQUMsaUtBQWlCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyw0Q0FBNEM7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx3QkFBd0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwyQkFBMkI7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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsT0FBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixhQUFhO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUMxUmE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnQkFBZ0Isc0NBQXNDLGlCQUFpQixFQUFFO0FBQ3ZGLDZCQUE2Qix1REFBdUQ7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQThDLGNBQWM7QUFDNUQsZ0JBQWdCLG1CQUFPLENBQUMsa0pBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwyQkFBMkI7QUFDMUMsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwyQkFBMkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUNyRGE7QUFDYjtBQUNBO0FBQ0EsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFlBQVk7QUFDakM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGFBQWE7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUNwRGE7QUFDYjtBQUNBO0FBQ0EsOENBQThDLGNBQWM7QUFDNUQsZ0JBQWdCLG1CQUFPLENBQUMsa0pBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTs7Ozs7Ozs7Ozs7O0FDM0NBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1Qzs7Ozs7Ozs7Ozs7O0FDbkJBLGU7Ozs7Ozs7Ozs7O0FDQUEsZTs7Ozs7Ozs7Ozs7QUNBQSxlOzs7Ozs7Ozs7OztBQ0FBLGU7Ozs7Ozs7Ozs7O0FDQUEsZTs7Ozs7Ozs7Ozs7QUNBQSxlIiwiZmlsZSI6ImRpcmVjdGxpbmVzcGVlY2guZGV2ZWxvcG1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL2xpYi9pbmRleC5qc1wiKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9vYnNlcnZhYmxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY29yZS1qcy9mZWF0dXJlcy9vYnNlcnZhYmxlXCIpKTtcblxudmFyIF9zaGFyZU9ic2VydmFibGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NoYXJlT2JzZXJ2YWJsZVwiKSk7XG5cbnZhciBfU3BlZWNoU3ludGhlc2lzQXVkaW9TdHJlYW1VdHRlcmFuY2UgPSByZXF1aXJlKFwiLi9TcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZVwiKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7ICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiByYW5kb21BY3Rpdml0eUlkKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIpO1xufVxuXG52YXIgRGlyZWN0TGluZVNwZWVjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERpcmVjdExpbmVTcGVlY2goX3JlZikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgZGlhbG9nU2VydmljZUNvbm5lY3RvciA9IF9yZWYuZGlhbG9nU2VydmljZUNvbm5lY3RvcjtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBEaXJlY3RMaW5lU3BlZWNoKTtcbiAgICB2YXIgY29ubmVjdGlvblN0YXR1c09ic2VydmVyO1xuICAgIHRoaXMuZGlhbG9nU2VydmljZUNvbm5lY3RvciA9IGRpYWxvZ1NlcnZpY2VDb25uZWN0b3I7XG4gICAgdGhpcy5hY3Rpdml0eSQgPSAoMCwgX3NoYXJlT2JzZXJ2YWJsZS5kZWZhdWx0KShuZXcgX29ic2VydmFibGUuZGVmYXVsdChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIF90aGlzLl9hY3Rpdml0eU9ic2VydmVyID0gb2JzZXJ2ZXI7XG4gICAgICBjb25uZWN0aW9uU3RhdHVzT2JzZXJ2ZXIubmV4dCgwKTtcbiAgICAgIGNvbm5lY3Rpb25TdGF0dXNPYnNlcnZlci5uZXh0KDEpO1xuICAgICAgY29ubmVjdGlvblN0YXR1c09ic2VydmVyLm5leHQoMik7IC8vIHJldHVybiAoKSA9PiB7fTtcbiAgICB9KSk7XG4gICAgdGhpcy5jb25uZWN0aW9uU3RhdHVzJCA9ICgwLCBfc2hhcmVPYnNlcnZhYmxlLmRlZmF1bHQpKG5ldyBfb2JzZXJ2YWJsZS5kZWZhdWx0KGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgY29ubmVjdGlvblN0YXR1c09ic2VydmVyID0gb2JzZXJ2ZXI7IC8vIHJldHVybiAoKSA9PiB7fTtcbiAgICB9KSk7XG5cbiAgICBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLmFjdGl2aXR5UmVjZWl2ZWQgPSBmdW5jdGlvbiAoXywgX3JlZjIpIHtcbiAgICAgIHZhciBhY3Rpdml0eSA9IF9yZWYyLmFjdGl2aXR5LFxuICAgICAgICAgIGF1ZGlvU3RyZWFtID0gX3JlZjIuYXVkaW9TdHJlYW07XG5cbiAgICAgIC8vIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoJ2RpYWxvZ1NlcnZpY2VDb25uZWN0b3IuYWN0aXZpdHlSZWNlaXZlZCcpO1xuICAgICAgLy8gY29uc29sZS5sb2coJ2FjdGl2aXR5JywgYWN0aXZpdHkpO1xuICAgICAgLy8gY29uc29sZS5sb2coJ2F1ZGlvU3RyZWFtJywgYXVkaW9TdHJlYW0pO1xuICAgICAgLy8gY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgX3RoaXMuX2FjdGl2aXR5T2JzZXJ2ZXIgJiYgX3RoaXMuX2FjdGl2aXR5T2JzZXJ2ZXIubmV4dChfb2JqZWN0U3ByZWFkKHt9LCBhY3Rpdml0eSwge1xuICAgICAgICAgIGNoYW5uZWxEYXRhOiBfb2JqZWN0U3ByZWFkKHt9LCBhY3Rpdml0eS5jaGFubmVsRGF0YSwge30sIGF1ZGlvU3RyZWFtID8ge1xuICAgICAgICAgICAgc3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlOiAoMCwgX1NwZWVjaFN5bnRoZXNpc0F1ZGlvU3RyZWFtVXR0ZXJhbmNlLmZyb21BdWRpb1N0cmVhbSkoYXVkaW9TdHJlYW0pXG4gICAgICAgICAgfSA6IHt9KSxcbiAgICAgICAgICBmcm9tOiBfb2JqZWN0U3ByZWFkKHt9LCBhY3Rpdml0eS5mcm9tLCB7XG4gICAgICAgICAgICAvLyBTaW5jZSBETFNwZWVjaCBzZXJ2aWNlIG5ldmVyIEFDSyBvdXIgb3V0Z29pbmcgYWN0aXZpdHksIHRoaXMgYWN0aXZpdHkgbXVzdCBiZSBmcm9tIGJvdC5cbiAgICAgICAgICAgIHJvbGU6ICdib3QnXG4gICAgICAgICAgfSksXG4gICAgICAgICAgLy8gRGlyZWN0IExpbmUgU3BlZWNoIHNlcnZlciBjdXJyZW50bHkgZG8gbm90IHRpbWVzdGFtcCBvdXRnb2luZyBhY3Rpdml0aWVzLlxuICAgICAgICAgIC8vIFRodXMsIGl0IHdpbGwgYmUgZWFzaWVyIHRvIGp1c3QgcmUtdGltZXN0YW1wIGV2ZXJ5IGluY29taW5nL291dGdvaW5nIGFjdGl2aXRpZXMgdXNpbmcgbG9jYWwgdGltZS5cbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoRGlyZWN0TGluZVNwZWVjaCwgW3tcbiAgICBrZXk6IFwiZW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuZCgpIHtcbiAgICAgIHRoaXMuZGlhbG9nU2VydmljZUNvbm5lY3Rvci5jbG9zZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwb3N0QWN0aXZpdHlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zdEFjdGl2aXR5KGFjdGl2aXR5KSB7XG4gICAgICAvLyBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKCdwb3N0QWN0aXZpdHknKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGFjdGl2aXR5KTtcbiAgICAgIC8vIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRPRE86IFtQMV0gRGlyZWN0IExpbmUgU3BlZWNoIHNlcnZlciBjdXJyZW50bHkgZG8gbm90IGFjayB0aGUgb3V0Z29pbmcgYWN0aXZpdGllcyB3aXRoIGFueSBhY3Rpdml0eSBJRCBvciB0aW1lc3RhbXAuXG4gICAgICAgIHZhciBwc2V1ZG9BY3Rpdml0eUlkID0gcmFuZG9tQWN0aXZpdHlJZCgpO1xuICAgICAgICB2YXIgaXNTcGVlY2ggPSAhIShhY3Rpdml0eS5jaGFubmVsRGF0YSAmJiBhY3Rpdml0eS5jaGFubmVsRGF0YS5zcGVlY2gpOyAvLyBEbyBub3Qgc2VuZCB0aGUgYWN0aXZpdHkgaWYgaXQgd2FzIGZyb20gc3BlZWNoXG5cbiAgICAgICAgaWYgKCFpc1NwZWVjaCkge1xuICAgICAgICAgIHRoaXMuZGlhbG9nU2VydmljZUNvbm5lY3Rvci5zZW5kQWN0aXZpdHlBc3luYyhhY3Rpdml0eSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hY3Rpdml0eU9ic2VydmVyICYmIHRoaXMuX2FjdGl2aXR5T2JzZXJ2ZXIubmV4dChfb2JqZWN0U3ByZWFkKHt9LCBhY3Rpdml0eSwge1xuICAgICAgICAgIGlkOiBwc2V1ZG9BY3Rpdml0eUlkLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fbGFzdFJlY29nbml6ZWRFdmVudFRpbWVzdGFtcCA9IG51bGw7XG4gICAgICAgIHJldHVybiBfb2JzZXJ2YWJsZS5kZWZhdWx0Lm9mKHBzZXVkb0FjdGl2aXR5SWQpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXcgX29ic2VydmFibGUuZGVmYXVsdChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBEaXJlY3RMaW5lU3BlZWNoO1xufSgpOyAvLyBJbnRlcmZhY2VzIHRoYXQgd2UgZGlkIG5vdCBpbXBsZW1lbnRlZC5cbi8vIHJlZmVyZW5jZUdyYW1tYXJJZD86IHN0cmluZyxcbi8vIGdldFNlc3Npb25JZD8gOiAoKSA9PiBPYnNlcnZhYmxlPHN0cmluZz5cblxuXG5leHBvcnRzLmRlZmF1bHQgPSBEaXJlY3RMaW5lU3BlZWNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlFYVhKbFkzUk1hVzVsVTNCbFpXTm9MbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmhibVJ2YlVGamRHbDJhWFI1U1dRaUxDSk5ZWFJvSWl3aWNtRnVaRzl0SWl3aWRHOVRkSEpwYm1jaUxDSnpkV0p6ZEhJaUxDSkVhWEpsWTNSTWFXNWxVM0JsWldOb0lpd2laR2xoYkc5blUyVnlkbWxqWlVOdmJtNWxZM1J2Y2lJc0ltTnZibTVsWTNScGIyNVRkR0YwZFhOUFluTmxjblpsY2lJc0ltRmpkR2wyYVhSNUpDSXNJazlpYzJWeWRtRmliR1VpTENKdlluTmxjblpsY2lJc0lsOWhZM1JwZG1sMGVVOWljMlZ5ZG1WeUlpd2libVY0ZENJc0ltTnZibTVsWTNScGIyNVRkR0YwZFhNa0lpd2lZV04wYVhacGRIbFNaV05sYVhabFpDSXNJbDhpTENKaFkzUnBkbWwwZVNJc0ltRjFaR2x2VTNSeVpXRnRJaXdpWTJoaGJtNWxiRVJoZEdFaUxDSnpjR1ZsWTJoVGVXNTBhR1Z6YVhOVmRIUmxjbUZ1WTJVaUxDSm1jbTl0SWl3aWNtOXNaU0lzSW5ScGJXVnpkR0Z0Y0NJc0lrUmhkR1VpTENKMGIwbFRUMU4wY21sdVp5SXNJbVZ5Y205eUlpd2lZMjl1YzI5c1pTSXNJbU5zYjNObElpd2ljSE5sZFdSdlFXTjBhWFpwZEhsSlpDSXNJbWx6VTNCbFpXTm9JaXdpYzNCbFpXTm9JaXdpYzJWdVpFRmpkR2wyYVhSNVFYTjVibU1pTENKcFpDSXNJbDlzWVhOMFVtVmpiMmR1YVhwbFpFVjJaVzUwVkdsdFpYTjBZVzF3SWl3aWIyWWlMQ0psY25JaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3pzN096dEJRVVZCT3p0QlFVVkJPenRCUVVOQk96czdPenM3UVVGRlFTeFRRVUZUUVN4blFrRkJWQ3hIUVVFMFFqdEJRVU14UWl4VFFVRlBReXhKUVVGSkxFTkJRVU5ETEUxQlFVd3NSMEZEU2tNc1VVRkVTU3hEUVVOTExFVkJSRXdzUlVGRlNrTXNUVUZHU1N4RFFVVkhMRU5CUmtnc1EwRkJVRHRCUVVkRU96dEpRVVZ2UWtNc1owSTdPenRCUVVOdVFpeHJRMEZCZDBNN1FVRkJRVHM3UVVGQlFTeFJRVUV4UWtNc2MwSkJRVEJDTEZGQlFURkNRU3h6UWtGQk1FSTdRVUZCUVR0QlFVTjBReXhSUVVGSlF5eDNRa0ZCU2p0QlFVVkJMRk5CUVV0RUxITkNRVUZNTEVkQlFUaENRU3h6UWtGQk9VSTdRVUZGUVN4VFFVRkxSU3hUUVVGTUxFZEJRV2xDTERoQ1FVTm1MRWxCUVVsRExHMUNRVUZLTEVOQlFXVXNWVUZCUVVNc1VVRkJVU3hGUVVGSk8wRkJRM3BDTEUxQlFVRXNTMEZCU1N4RFFVRkRReXhwUWtGQlRDeEhRVUY1UWtRc1VVRkJla0k3UVVGRlFVZ3NUVUZCUVVFc2QwSkJRWGRDTEVOQlFVTkxMRWxCUVhwQ0xFTkJRVGhDTEVOQlFUbENPMEZCUTBGTUxFMUJRVUZCTEhkQ1FVRjNRaXhEUVVGRFN5eEpRVUY2UWl4RFFVRTRRaXhEUVVFNVFqdEJRVU5CVEN4TlFVRkJRU3gzUWtGQmQwSXNRMEZCUTBzc1NVRkJla0lzUTBGQk9FSXNRMEZCT1VJc1JVRk1lVUlzUTBGUGVrSTdRVUZEUkN4TFFWSkVMRU5CUkdVc1EwRkJha0k3UVVGWlFTeFRRVUZMUXl4cFFrRkJUQ3hIUVVGNVFpdzRRa0ZEZGtJc1NVRkJTVW9zYlVKQlFVb3NRMEZCWlN4VlFVRkJReXhSUVVGUkxFVkJRVWs3UVVGRGVrSklMRTFCUVVGQkxIZENRVUYzUWl4SFFVRkhSeXhSUVVFelFpeERRVVI1UWl4RFFVZDZRanRCUVVORUxFdEJTa1FzUTBGRWRVSXNRMEZCZWtJN08wRkJVVUZLTEVsQlFVRkJMSE5DUVVGelFpeERRVUZEVVN4blFrRkJka0lzUjBGQk1FTXNWVUZCUTBNc1EwRkJSQ3hUUVVGclF6dEJRVUZCTEZWQlFUVkNReXhSUVVFMFFpeFRRVUUxUWtFc1VVRkJORUk3UVVGQlFTeFZRVUZzUWtNc1YwRkJhMElzVTBGQmJFSkJMRmRCUVd0Q096dEJRVU14UlR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQkxGVkJRVWs3UVVGRFJpeFJRVUZCTEV0QlFVa3NRMEZCUTA0c2FVSkJRVXdzU1VGRFJTeExRVUZKTEVOQlFVTkJMR2xDUVVGTUxFTkJRWFZDUXl4SlFVRjJRaXh0UWtGRFMwa3NVVUZFVER0QlFVVkZSU3hWUVVGQlFTeFhRVUZYTEc5Q1FVTk9SaXhSUVVGUkxFTkJRVU5GTEZkQlJFZ3NUVUZGVEVRc1YwRkJWeXhIUVVGSE8wRkJRVVZGTEZsQlFVRkJMSGRDUVVGM1FpeEZRVUZGTERCRVFVRXJRa1lzVjBGQkwwSTdRVUZCTlVJc1YwRkJTQ3hIUVVFclJTeEZRVVp5Uml4RFFVWmlPMEZCVFVWSExGVkJRVUZCTEVsQlFVa3NiMEpCUTBOS0xGRkJRVkVzUTBGQlEwa3NTVUZFVmp0QlFVVkdPMEZCUTBGRExGbEJRVUZCTEVsQlFVa3NSVUZCUlR0QlFVaEtMRmxCVGs0N1FVRlhSVHRCUVVOQk8wRkJRMEZETEZWQlFVRkJMRk5CUVZNc1JVRkJSU3hKUVVGSlF5eEpRVUZLTEVkQlFWZERMRmRCUVZnN1FVRmlZaXhYUVVSR08wRkJaMEpFTEU5QmFrSkVMRU5CYVVKRkxFOUJRVTlETEV0QlFWQXNSVUZCWXp0QlFVTmtReXhSUVVGQlFTeFBRVUZQTEVOQlFVTkVMRXRCUVZJc1EwRkJZMEVzUzBGQlpEdEJRVU5FTzBGQlEwWXNTMEV4UWtRN1FVRXlRa1E3T3pzN01FSkJSVXM3UVVGRFNpeFhRVUZMYmtJc2MwSkJRVXdzUTBGQk5FSnhRaXhMUVVFMVFqdEJRVU5FT3pzN2FVTkJSVmxZTEZFc1JVRkJWVHRCUVVOeVFqdEJRVU5CTzBGQlEwRTdRVUZGUVN4VlFVRkpPMEZCUTBZN1FVRkRRU3haUVVGTldTeG5Ra0ZCWjBJc1IwRkJSelZDTEdkQ1FVRm5RaXhGUVVGNlF6dEJRVU5CTEZsQlFVMDJRaXhSUVVGUkxFZEJRVWNzUTBGQlF5eEZRVUZGWWl4UlFVRlJMRU5CUVVORkxGZEJRVlFzU1VGQmQwSkdMRkZCUVZFc1EwRkJRMFVzVjBGQlZDeERRVUZ4UWxrc1RVRkJMME1zUTBGQmJFSXNRMEZJUlN4RFFVdEdPenRCUVVOQkxGbEJRVWtzUTBGQlEwUXNVVUZCVEN4RlFVRmxPMEZCUTJJc1pVRkJTM1pDTEhOQ1FVRk1MRU5CUVRSQ2VVSXNhVUpCUVRWQ0xFTkJRVGhEWml4UlFVRTVRenRCUVVORU96dEJRVVZFTEdGQlFVdE1MR2xDUVVGTUxFbEJRMFVzUzBGQlMwRXNhVUpCUVV3c1EwRkJkVUpETEVsQlFYWkNMRzFDUVVOTFNTeFJRVVJNTzBGQlJVVm5RaXhWUVVGQlFTeEZRVUZGTEVWQlFVVktMR2RDUVVaT08wRkJSMFZPTEZWQlFVRkJMRk5CUVZNc1JVRkJSU3hKUVVGSlF5eEpRVUZLTEVkQlFWZERMRmRCUVZnN1FVRklZaXhYUVVSR08wRkJUMEVzWVVGQlMxTXNOa0pCUVV3c1IwRkJjVU1zU1VGQmNrTTdRVUZGUVN4bFFVRlBlRUlzYjBKQlFWZDVRaXhGUVVGWUxFTkJRV05PTEdkQ1FVRmtMRU5CUVZBN1FVRkRSQ3hQUVhCQ1JDeERRVzlDUlN4UFFVRlBUeXhIUVVGUUxFVkJRVms3UVVGRFdpeGxRVUZQTEVsQlFVa3hRaXh0UWtGQlNpeERRVUZsTEZWQlFVRkRMRkZCUVZFN1FVRkJRU3hwUWtGQlNVRXNVVUZCVVN4RFFVRkRaU3hMUVVGVUxFTkJRV1ZWTEVkQlFXWXNRMEZCU2p0QlFVRkJMRk5CUVhaQ0xFTkJRVkE3UVVGRFJEdEJRVU5HT3pzN1MwRkhTRHRCUVVOQk8wRkJRMEVpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpQmxjMnhwYm5RZ2JtOHRiV0ZuYVdNdGJuVnRZbVZ5Y3pvZ1cxd2laWEp5YjNKY0lpd2dleUJjSW1sbmJtOXlaVndpT2lCYk1Dd2dNU3dnTWl3Z016WmRJSDFkSUNvdlhISmNibHh5WEc1cGJYQnZjblFnVDJKelpYSjJZV0pzWlNCbWNtOXRJQ2RqYjNKbExXcHpMMlpsWVhSMWNtVnpMMjlpYzJWeWRtRmliR1VuTzF4eVhHNWNjbHh1YVcxd2IzSjBJSE5vWVhKbFQySnpaWEoyWVdKc1pTQm1jbTl0SUNjdUwzTm9ZWEpsVDJKelpYSjJZV0pzWlNjN1hISmNibWx0Y0c5eWRDQjdJR1p5YjIxQmRXUnBiMU4wY21WaGJTQmhjeUJqY21WaGRHVlZkSFJsY21GdVkyVkdjbTl0UVhWa2FXOVRkSEpsWVcwZ2ZTQm1jbTl0SUNjdUwxTndaV1ZqYUZONWJuUm9aWE5wYzBGMVpHbHZVM1J5WldGdFZYUjBaWEpoYm1ObEp6dGNjbHh1WEhKY2JtWjFibU4wYVc5dUlISmhibVJ2YlVGamRHbDJhWFI1U1dRb0tTQjdYSEpjYmlBZ2NtVjBkWEp1SUUxaGRHZ3VjbUZ1Wkc5dEtDbGNjbHh1SUNBZ0lDNTBiMU4wY21sdVp5Z3pOaWxjY2x4dUlDQWdJQzV6ZFdKemRISW9NaWs3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRVJwY21WamRFeHBibVZUY0dWbFkyZ2dlMXh5WEc0Z0lHTnZibk4wY25WamRHOXlLSHNnWkdsaGJHOW5VMlZ5ZG1salpVTnZibTVsWTNSdmNpQjlLU0I3WEhKY2JpQWdJQ0JzWlhRZ1kyOXVibVZqZEdsdmJsTjBZWFIxYzA5aWMyVnlkbVZ5TzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WkdsaGJHOW5VMlZ5ZG1salpVTnZibTVsWTNSdmNpQTlJR1JwWVd4dloxTmxjblpwWTJWRGIyNXVaV04wYjNJN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1aFkzUnBkbWwwZVNRZ1BTQnphR0Z5WlU5aWMyVnlkbUZpYkdVb1hISmNiaUFnSUNBZ0lHNWxkeUJQWW5ObGNuWmhZbXhsS0c5aWMyVnlkbVZ5SUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhZM1JwZG1sMGVVOWljMlZ5ZG1WeUlEMGdiMkp6WlhKMlpYSTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHTnZibTVsWTNScGIyNVRkR0YwZFhOUFluTmxjblpsY2k1dVpYaDBLREFwTzF4eVhHNGdJQ0FnSUNBZ0lHTnZibTVsWTNScGIyNVRkR0YwZFhOUFluTmxjblpsY2k1dVpYaDBLREVwTzF4eVhHNGdJQ0FnSUNBZ0lHTnZibTVsWTNScGIyNVRkR0YwZFhOUFluTmxjblpsY2k1dVpYaDBLRElwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCeVpYUjFjbTRnS0NrZ1BUNGdlMzA3WEhKY2JpQWdJQ0FnSUgwcFhISmNiaUFnSUNBcE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVkyOXVibVZqZEdsdmJsTjBZWFIxY3lRZ1BTQnphR0Z5WlU5aWMyVnlkbUZpYkdVb1hISmNiaUFnSUNBZ0lHNWxkeUJQWW5ObGNuWmhZbXhsS0c5aWMyVnlkbVZ5SUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1dVpXTjBhVzl1VTNSaGRIVnpUMkp6WlhKMlpYSWdQU0J2WW5ObGNuWmxjanRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnY21WMGRYSnVJQ2dwSUQwK0lIdDlPMXh5WEc0Z0lDQWdJQ0I5S1Z4eVhHNGdJQ0FnS1R0Y2NseHVYSEpjYmlBZ0lDQmthV0ZzYjJkVFpYSjJhV05sUTI5dWJtVmpkRzl5TG1GamRHbDJhWFI1VW1WalpXbDJaV1FnUFNBb1h5d2dleUJoWTNScGRtbDBlU3dnWVhWa2FXOVRkSEpsWVcwZ2ZTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBdkx5QmpiMjV6YjJ4bExtZHliM1Z3UTI5c2JHRndjMlZrS0Nka2FXRnNiMmRUWlhKMmFXTmxRMjl1Ym1WamRHOXlMbUZqZEdsMmFYUjVVbVZqWldsMlpXUW5LVHRjY2x4dUlDQWdJQ0FnTHk4Z1kyOXVjMjlzWlM1c2IyY29KMkZqZEdsMmFYUjVKeXdnWVdOMGFYWnBkSGtwTzF4eVhHNGdJQ0FnSUNBdkx5QmpiMjV6YjJ4bExteHZaeWduWVhWa2FXOVRkSEpsWVcwbkxDQmhkV1JwYjFOMGNtVmhiU2s3WEhKY2JpQWdJQ0FnSUM4dklHTnZibk52YkdVdVozSnZkWEJGYm1Rb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUhSeWVTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV04wYVhacGRIbFBZbk5sY25abGNpQW1KbHh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOMGFYWnBkSGxQWW5ObGNuWmxjaTV1WlhoMEtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0xpNHVZV04wYVhacGRIa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZVzV1Wld4RVlYUmhPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTGk0dVlXTjBhWFpwZEhrdVkyaGhibTVsYkVSaGRHRXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMaTR1S0dGMVpHbHZVM1J5WldGdElEOGdleUJ6Y0dWbFkyaFRlVzUwYUdWemFYTlZkSFJsY21GdVkyVTZJR055WldGMFpWVjBkR1Z5WVc1alpVWnliMjFCZFdScGIxTjBjbVZoYlNoaGRXUnBiMU4wY21WaGJTa2dmU0E2SUh0OUtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTGk0dVlXTjBhWFpwZEhrdVpuSnZiU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVGFXNWpaU0JFVEZOd1pXVmphQ0J6WlhKMmFXTmxJRzVsZG1WeUlFRkRTeUJ2ZFhJZ2IzVjBaMjlwYm1jZ1lXTjBhWFpwZEhrc0lIUm9hWE1nWVdOMGFYWnBkSGtnYlhWemRDQmlaU0JtY205dElHSnZkQzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjJ4bE9pQW5ZbTkwSjF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCRWFYSmxZM1FnVEdsdVpTQlRjR1ZsWTJnZ2MyVnlkbVZ5SUdOMWNuSmxiblJzZVNCa2J5QnViM1FnZEdsdFpYTjBZVzF3SUc5MWRHZHZhVzVuSUdGamRHbDJhWFJwWlhNdVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGUm9kWE1zSUdsMElIZHBiR3dnWW1VZ1pXRnphV1Z5SUhSdklHcDFjM1FnY21VdGRHbHRaWE4wWVcxd0lHVjJaWEo1SUdsdVkyOXRhVzVuTDI5MWRHZHZhVzVuSUdGamRHbDJhWFJwWlhNZ2RYTnBibWNnYkc5allXd2dkR2x0WlM1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdsdFpYTjBZVzF3T2lCdVpYY2dSR0YwWlNncExuUnZTVk5QVTNSeWFXNW5LQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9aWEp5YjNJcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaVzVrS0NrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVrYVdGc2IyZFRaWEoyYVdObFEyOXVibVZqZEc5eUxtTnNiM05sS0NrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCd2IzTjBRV04wYVhacGRIa29ZV04wYVhacGRIa3BJSHRjY2x4dUlDQWdJQzh2SUdOdmJuTnZiR1V1WjNKdmRYQkRiMnhzWVhCelpXUW9KM0J2YzNSQlkzUnBkbWwwZVNjcE8xeHlYRzRnSUNBZ0x5OGdZMjl1YzI5c1pTNXNiMmNvWVdOMGFYWnBkSGtwTzF4eVhHNGdJQ0FnTHk4Z1kyOXVjMjlzWlM1bmNtOTFjRVZ1WkNncE8xeHlYRzVjY2x4dUlDQWdJSFJ5ZVNCN1hISmNiaUFnSUNBZ0lDOHZJRlJQUkU4NklGdFFNVjBnUkdseVpXTjBJRXhwYm1VZ1UzQmxaV05vSUhObGNuWmxjaUJqZFhKeVpXNTBiSGtnWkc4Z2JtOTBJR0ZqYXlCMGFHVWdiM1YwWjI5cGJtY2dZV04wYVhacGRHbGxjeUIzYVhSb0lHRnVlU0JoWTNScGRtbDBlU0JKUkNCdmNpQjBhVzFsYzNSaGJYQXVYSEpjYmlBZ0lDQWdJR052Ym5OMElIQnpaWFZrYjBGamRHbDJhWFI1U1dRZ1BTQnlZVzVrYjIxQlkzUnBkbWwwZVVsa0tDazdYSEpjYmlBZ0lDQWdJR052Ym5OMElHbHpVM0JsWldOb0lEMGdJU0VvWVdOMGFYWnBkSGt1WTJoaGJtNWxiRVJoZEdFZ0ppWWdZV04wYVhacGRIa3VZMmhoYm01bGJFUmhkR0V1YzNCbFpXTm9LVHRjY2x4dVhISmNiaUFnSUNBZ0lDOHZJRVJ2SUc1dmRDQnpaVzVrSUhSb1pTQmhZM1JwZG1sMGVTQnBaaUJwZENCM1lYTWdabkp2YlNCemNHVmxZMmhjY2x4dUlDQWdJQ0FnYVdZZ0tDRnBjMU53WldWamFDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR2xoYkc5blUyVnlkbWxqWlVOdmJtNWxZM1J2Y2k1elpXNWtRV04wYVhacGRIbEJjM2x1WXloaFkzUnBkbWwwZVNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUhSb2FYTXVYMkZqZEdsMmFYUjVUMkp6WlhKMlpYSWdKaVpjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWTNScGRtbDBlVTlpYzJWeWRtVnlMbTVsZUhRb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnTGk0dVlXTjBhWFpwZEhrc1hISmNiaUFnSUNBZ0lDQWdJQ0JwWkRvZ2NITmxkV1J2UVdOMGFYWnBkSGxKWkN4Y2NseHVJQ0FnSUNBZ0lDQWdJSFJwYldWemRHRnRjRG9nYm1WM0lFUmhkR1VvS1M1MGIwbFRUMU4wY21sdVp5Z3BYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0IwYUdsekxsOXNZWE4wVW1WamIyZHVhWHBsWkVWMlpXNTBWR2x0WlhOMFlXMXdJRDBnYm5Wc2JEdGNjbHh1WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJQWW5ObGNuWmhZbXhsTG05bUtIQnpaWFZrYjBGamRHbDJhWFI1U1dRcE8xeHlYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pYSnlLU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1QySnpaWEoyWVdKc1pTaHZZbk5sY25abGNpQTlQaUJ2WW5ObGNuWmxjaTVsY25KdmNpaGxjbklwS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JpOHZJRWx1ZEdWeVptRmpaWE1nZEdoaGRDQjNaU0JrYVdRZ2JtOTBJR2x0Y0d4bGJXVnVkR1ZrTGx4eVhHNHZMeUJ5WldabGNtVnVZMlZIY21GdGJXRnlTV1EvT2lCemRISnBibWNzWEhKY2JpOHZJR2RsZEZObGMzTnBiMjVKWkQ4Z09pQW9LU0E5UGlCUFluTmxjblpoWW14bFBITjBjbWx1Wno1Y2NseHVJbDE5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5mcm9tQXVkaW9TdHJlYW0gPSBmcm9tQXVkaW9TdHJlYW07XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX2V2ZW50VGFyZ2V0U2hpbSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2V4dGVybmFsL2V2ZW50LXRhcmdldC1zaGltXCIpKTtcblxudmFyIFNwZWVjaFN5bnRoZXNpc0F1ZGlvU3RyZWFtVXR0ZXJhbmNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfRXZlbnRUYXJnZXQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoU3BlZWNoU3ludGhlc2lzQXVkaW9TdHJlYW1VdHRlcmFuY2UsIF9FdmVudFRhcmdldCk7XG5cbiAgZnVuY3Rpb24gU3BlZWNoU3ludGhlc2lzQXVkaW9TdHJlYW1VdHRlcmFuY2UoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgU3BlZWNoU3ludGhlc2lzQXVkaW9TdHJlYW1VdHRlcmFuY2UpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFNwZWVjaFN5bnRoZXNpc0F1ZGlvU3RyZWFtVXR0ZXJhbmNlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBTcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZTtcbn0oX2V2ZW50VGFyZ2V0U2hpbS5kZWZhdWx0KTtcblxuKDAsIF9ldmVudFRhcmdldFNoaW0uZGVmaW5lRXZlbnRBdHRyaWJ1dGUpKFNwZWVjaFN5bnRoZXNpc0F1ZGlvU3RyZWFtVXR0ZXJhbmNlLCAnYm91bmRhcnknKTtcbigwLCBfZXZlbnRUYXJnZXRTaGltLmRlZmluZUV2ZW50QXR0cmlidXRlKShTcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZSwgJ2VuZCcpO1xuKDAsIF9ldmVudFRhcmdldFNoaW0uZGVmaW5lRXZlbnRBdHRyaWJ1dGUpKFNwZWVjaFN5bnRoZXNpc0F1ZGlvU3RyZWFtVXR0ZXJhbmNlLCAnZXJyb3InKTtcbigwLCBfZXZlbnRUYXJnZXRTaGltLmRlZmluZUV2ZW50QXR0cmlidXRlKShTcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZSwgJ3N0YXJ0Jyk7XG5cbmZ1bmN0aW9uIGZyb21BdWRpb1N0cmVhbShhdWRpb1N0cmVhbSkge1xuICB2YXIgdXR0ZXJhbmNlID0gbmV3IFNwZWVjaFN5bnRoZXNpc0F1ZGlvU3RyZWFtVXR0ZXJhbmNlKCk7XG4gIHV0dGVyYW5jZS5hdWRpb1N0cmVhbSA9IGF1ZGlvU3RyZWFtO1xuICByZXR1cm4gdXR0ZXJhbmNlO1xufVxuXG52YXIgX2RlZmF1bHQgPSBTcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlUY0dWbFkyaFRlVzUwYUdWemFYTkJkV1JwYjFOMGNtVmhiVlYwZEdWeVlXNWpaUzVxY3lKZExDSnVZVzFsY3lJNld5SlRjR1ZsWTJoVGVXNTBhR1Z6YVhOQmRXUnBiMU4wY21WaGJWVjBkR1Z5WVc1alpTSXNJa1YyWlc1MFZHRnlaMlYwSWl3aVpuSnZiVUYxWkdsdlUzUnlaV0Z0SWl3aVlYVmthVzlUZEhKbFlXMGlMQ0oxZEhSbGNtRnVZMlVpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCUVVFN08wbEJSVTFCTEcxRE96czdPenM3T3pzN096dEZRVUUwUTBNc2QwSTdPMEZCUld4RUxESkRRVUZ4UWtRc2JVTkJRWEpDTEVWQlFUQkVMRlZCUVRGRU8wRkJRMEVzTWtOQlFYRkNRU3h0UTBGQmNrSXNSVUZCTUVRc1MwRkJNVVE3UVVGRFFTd3lRMEZCY1VKQkxHMURRVUZ5UWl4RlFVRXdSQ3hQUVVFeFJEdEJRVU5CTERKRFFVRnhRa0VzYlVOQlFYSkNMRVZCUVRCRUxFOUJRVEZFT3p0QlFVVkJMRk5CUVZORkxHVkJRVlFzUTBGQmVVSkRMRmRCUVhwQ0xFVkJRWE5ETzBGQlEzQkRMRTFCUVUxRExGTkJRVk1zUjBGQlJ5eEpRVUZKU2l4dFEwRkJTaXhGUVVGc1FqdEJRVVZCU1N4RlFVRkJRU3hUUVVGVExFTkJRVU5FTEZkQlFWWXNSMEZCZDBKQkxGZEJRWGhDTzBGQlJVRXNVMEZCVDBNc1UwRkJVRHRCUVVORU96dGxRVVZqU2l4dFF5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQkZkbVZ1ZEZSaGNtZGxkQ3dnZXlCa1pXWnBibVZGZG1WdWRFRjBkSEpwWW5WMFpTQjlJR1p5YjIwZ0p5NHZaWGgwWlhKdVlXd3ZaWFpsYm5RdGRHRnlaMlYwTFhOb2FXMG5PMXh5WEc1Y2NseHVZMnhoYzNNZ1UzQmxaV05vVTNsdWRHaGxjMmx6UVhWa2FXOVRkSEpsWVcxVmRIUmxjbUZ1WTJVZ1pYaDBaVzVrY3lCRmRtVnVkRlJoY21kbGRDQjdmVnh5WEc1Y2NseHVaR1ZtYVc1bFJYWmxiblJCZEhSeWFXSjFkR1VvVTNCbFpXTm9VM2x1ZEdobGMybHpRWFZrYVc5VGRISmxZVzFWZEhSbGNtRnVZMlVzSUNkaWIzVnVaR0Z5ZVNjcE8xeHlYRzVrWldacGJtVkZkbVZ1ZEVGMGRISnBZblYwWlNoVGNHVmxZMmhUZVc1MGFHVnphWE5CZFdScGIxTjBjbVZoYlZWMGRHVnlZVzVqWlN3Z0oyVnVaQ2NwTzF4eVhHNWtaV1pwYm1WRmRtVnVkRUYwZEhKcFluVjBaU2hUY0dWbFkyaFRlVzUwYUdWemFYTkJkV1JwYjFOMGNtVmhiVlYwZEdWeVlXNWpaU3dnSjJWeWNtOXlKeWs3WEhKY2JtUmxabWx1WlVWMlpXNTBRWFIwY21saWRYUmxLRk53WldWamFGTjViblJvWlhOcGMwRjFaR2x2VTNSeVpXRnRWWFIwWlhKaGJtTmxMQ0FuYzNSaGNuUW5LVHRjY2x4dVhISmNibVoxYm1OMGFXOXVJR1p5YjIxQmRXUnBiMU4wY21WaGJTaGhkV1JwYjFOMGNtVmhiU2tnZTF4eVhHNGdJR052Ym5OMElIVjBkR1Z5WVc1alpTQTlJRzVsZHlCVGNHVmxZMmhUZVc1MGFHVnphWE5CZFdScGIxTjBjbVZoYlZWMGRHVnlZVzVqWlNncE8xeHlYRzVjY2x4dUlDQjFkSFJsY21GdVkyVXVZWFZrYVc5VGRISmxZVzBnUFNCaGRXUnBiMU4wY21WaGJUdGNjbHh1WEhKY2JpQWdjbVYwZFhKdUlIVjBkR1Z5WVc1alpUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVM0JsWldOb1UzbHVkR2hsYzJselFYVmthVzlUZEhKbFlXMVZkSFJsY21GdVkyVTdYSEpjYmx4eVhHNWxlSEJ2Y25RZ2V5Qm1jbTl0UVhWa2FXOVRkSEpsWVcwZ2ZUdGNjbHh1SWwxOSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY29nbml0aXZlU2VydmljZXNQcm9taXNlVG9FU1Byb21pc2U7XG5cbmZ1bmN0aW9uIGNvZ25pdGl2ZVNlcnZpY2VzUHJvbWlzZVRvRVNQcm9taXNlKHByb21pc2UpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXR1cm4gcHJvbWlzZS5vbihyZXNvbHZlLCByZWplY3QpO1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5amIyZHVhWFJwZG1WVFpYSjJhV05sYzFCeWIyMXBjMlZVYjBWVFVISnZiV2x6WlM1cWN5SmRMQ0p1WVcxbGN5STZXeUpqYjJkdWFYUnBkbVZUWlhKMmFXTmxjMUJ5YjIxcGMyVlViMFZUVUhKdmJXbHpaU0lzSW5CeWIyMXBjMlVpTENKUWNtOXRhWE5sSWl3aWNtVnpiMngyWlNJc0luSmxhbVZqZENJc0ltOXVJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzBGQlFXVXNVMEZCVTBFc2JVTkJRVlFzUTBGQk5rTkRMRTlCUVRkRExFVkJRWE5FTzBGQlEyNUZMRk5CUVU4c1NVRkJTVU1zVDBGQlNpeERRVUZaTEZWQlFVTkRMRTlCUVVRc1JVRkJWVU1zVFVGQlZqdEJRVUZCTEZkQlFYRkNTQ3hQUVVGUExFTkJRVU5KTEVWQlFWSXNRMEZCVjBZc1QwRkJXQ3hGUVVGdlFrTXNUVUZCY0VJc1EwRkJja0k3UVVGQlFTeEhRVUZhTEVOQlFWQTdRVUZEUkNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUdOdloyNXBkR2wyWlZObGNuWnBZMlZ6VUhKdmJXbHpaVlJ2UlZOUWNtOXRhWE5sS0hCeWIyMXBjMlVwSUh0Y2NseHVJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2NISnZiV2x6WlM1dmJpaHlaWE52YkhabExDQnlaV3BsWTNRcEtUdGNjbHh1ZlZ4eVhHNGlYWDA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlO1xuXG52YXIgX21pY3Jvc29mdENvZ25pdGl2ZXNlcnZpY2VzU3BlZWNoU2RrID0gcmVxdWlyZShcIm1pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrXCIpO1xuXG52YXIgX2NyZWF0ZVdlYlNwZWVjaFBvbnlmaWxsRmFjdG9yeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlV2ViU3BlZWNoUG9ueWZpbGxGYWN0b3J5XCIpKTtcblxudmFyIF9EaXJlY3RMaW5lU3BlZWNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EaXJlY3RMaW5lU3BlZWNoXCIpKTtcblxudmFyIF9wYXRjaERpYWxvZ1NlcnZpY2VDb25uZWN0b3JJbmxpbmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3BhdGNoRGlhbG9nU2VydmljZUNvbm5lY3RvcklubGluZVwiKSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZShfcmVmKSB7XG4gIHZhciBhdWRpb0NvbmZpZyA9IF9yZWYuYXVkaW9Db25maWcsXG4gICAgICBhdWRpb0NvbnRleHQgPSBfcmVmLmF1ZGlvQ29udGV4dCxcbiAgICAgIGVuYWJsZVRlbGVtZXRyeSA9IF9yZWYuZW5hYmxlVGVsZW1ldHJ5LFxuICAgICAgc3BlZWNoUmVjb2duaXRpb25FbmRwb2ludElkID0gX3JlZi5zcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQsXG4gICAgICBfcmVmJHNwZWVjaFJlY29nbml0aW8gPSBfcmVmLnNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UsXG4gICAgICBzcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlID0gX3JlZiRzcGVlY2hSZWNvZ25pdGlvID09PSB2b2lkIDAgPyB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93Lm5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZSB8fCAnZW4tVVMnIDogX3JlZiRzcGVlY2hSZWNvZ25pdGlvLFxuICAgICAgc3BlZWNoU2VydmljZXNBdXRob3JpemF0aW9uVG9rZW4gPSBfcmVmLnNwZWVjaFNlcnZpY2VzQXV0aG9yaXphdGlvblRva2VuLFxuICAgICAgc3BlZWNoU2VydmljZXNSZWdpb24gPSBfcmVmLnNwZWVjaFNlcnZpY2VzUmVnaW9uLFxuICAgICAgc3BlZWNoU2VydmljZXNTdWJzY3JpcHRpb25LZXkgPSBfcmVmLnNwZWVjaFNlcnZpY2VzU3Vic2NyaXB0aW9uS2V5LFxuICAgICAgc3BlZWNoU3ludGhlc2lzRGVwbG95bWVudElkID0gX3JlZi5zcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQsXG4gICAgICBzcGVlY2hTeW50aGVzaXNPdXRwdXRGb3JtYXQgPSBfcmVmLnNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdCxcbiAgICAgIHRleHROb3JtYWxpemF0aW9uID0gX3JlZi50ZXh0Tm9ybWFsaXphdGlvbixcbiAgICAgIHVzZXJJRCA9IF9yZWYudXNlcklELFxuICAgICAgdXNlcm5hbWUgPSBfcmVmLnVzZXJuYW1lO1xuXG4gIGlmICghc3BlZWNoU2VydmljZXNBdXRob3JpemF0aW9uVG9rZW4gJiYgIXNwZWVjaFNlcnZpY2VzU3Vic2NyaXB0aW9uS2V5IHx8IHNwZWVjaFNlcnZpY2VzQXV0aG9yaXphdGlvblRva2VuICYmIHNwZWVjaFNlcnZpY2VzU3Vic2NyaXB0aW9uS2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBzcGVjaWZ5IGVpdGhlciBcInNwZWVjaFNlcnZpY2VzQXV0aG9yaXphdGlvblRva2VuXCIgb3IgXCJzcGVlY2hTZXJ2aWNlc1N1YnNjcmlwdGlvbktleVwiIG9ubHkuJyk7XG4gIH1cblxuICBpZiAodGV4dE5vcm1hbGl6YXRpb24pIHtcbiAgICBjb25zb2xlLndhcm4oJ2JvdGZyYW1ld29yay1kaXJlY3RsaW5lc3BlZWNoOiBUZXh0IG5vcm1hbGl6YXRpb24gaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQsIGlnbm9yZWluZyBcInRleHROb3JtYWxpemF0aW9uXCIuJyk7XG4gIH1cblxuICBpZiAodXNlcklEIHx8IHVzZXJuYW1lKSB7XG4gICAgY29uc29sZS53YXJuKCdib3RmcmFtZXdvcmstZGlyZWN0bGluZXNwZWVjaDogQ3VzdG9tIFwidXNlcklkXCIgYW5kIFwidXNlcm5hbWVcIiBhcmUgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQsIGlnbm9yaW5nLicpO1xuICB9XG5cbiAgdmFyIGNvbmZpZztcblxuICBpZiAoc3BlZWNoU2VydmljZXNBdXRob3JpemF0aW9uVG9rZW4pIHtcbiAgICBjb25maWcgPSBfbWljcm9zb2Z0Q29nbml0aXZlc2VydmljZXNTcGVlY2hTZGsuQm90RnJhbWV3b3JrQ29uZmlnLmZyb21BdXRob3JpemF0aW9uVG9rZW4oc3BlZWNoU2VydmljZXNBdXRob3JpemF0aW9uVG9rZW4sIHNwZWVjaFNlcnZpY2VzUmVnaW9uKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBfbWljcm9zb2Z0Q29nbml0aXZlc2VydmljZXNTcGVlY2hTZGsuQm90RnJhbWV3b3JrQ29uZmlnLmZyb21TdWJzY3JpcHRpb24oc3BlZWNoU2VydmljZXNTdWJzY3JpcHRpb25LZXksIHNwZWVjaFNlcnZpY2VzUmVnaW9uKTtcbiAgfSAvLyBTdXBwb3J0ZWQgb3B0aW9ucyBjYW4gYmUgZm91bmQgaW4gRGlhbG9nQ29ubmVjdG9yRmFjdG9yeS5qcy5cblxuXG4gIGNvbmZpZy5zZXRQcm9wZXJ0eShfbWljcm9zb2Z0Q29nbml0aXZlc2VydmljZXNTcGVlY2hTZGsuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2UsIHNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UpOyAvLyBOb25lIG9mIHRoZSBmb2xsb3dpbmcgd29ya3MgZm9yIHNldHRpbmcgb3V0cHV0IGZvcm1hdC5cbiAgLy8gY29uZmlnLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX091dHB1dEZvcm1hdE9wdGlvbiwgT3V0cHV0Rm9ybWF0W091dHB1dEZvcm1hdC5EZXRhaWxlZF0pO1xuICAvLyBjb25maWcuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUmVxdWVzdERldGFpbGVkUmVzdWx0VHJ1ZUZhbHNlLCB0cnVlKTtcbiAgLy8gY29uZmlnLnNldFByb3BlcnR5KE91dHB1dEZvcm1hdFByb3BlcnR5TmFtZSwgT3V0cHV0Rm9ybWF0W091dHB1dEZvcm1hdC5EZXRhaWxlZF0pO1xuICAvLyBjb25maWcuc2V0U2VydmljZVByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX1JlcXVlc3REZXRhaWxlZFJlc3VsdFRydWVGYWxzZSwgXCJ0cnVlXCIsIFNlcnZpY2VQcm9wZXJ0eUNoYW5uZWwuVXJpUXVlcnlQYXJhbWV0ZXIpO1xuXG4gIHZhciBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yID0gKDAsIF9wYXRjaERpYWxvZ1NlcnZpY2VDb25uZWN0b3JJbmxpbmUuZGVmYXVsdCkobmV3IF9taWNyb3NvZnRDb2duaXRpdmVzZXJ2aWNlc1NwZWVjaFNkay5EaWFsb2dTZXJ2aWNlQ29ubmVjdG9yKGNvbmZpZywgYXVkaW9Db25maWcpKTtcbiAgZGlhbG9nU2VydmljZUNvbm5lY3Rvci5jb25uZWN0KCk7XG4gIHZhciBkaXJlY3RMaW5lID0gbmV3IF9EaXJlY3RMaW5lU3BlZWNoLmRlZmF1bHQoe1xuICAgIGRpYWxvZ1NlcnZpY2VDb25uZWN0b3I6IGRpYWxvZ1NlcnZpY2VDb25uZWN0b3JcbiAgfSk7XG4gIHZhciB3ZWJTcGVlY2hQb255ZmlsbEZhY3RvcnkgPSAoMCwgX2NyZWF0ZVdlYlNwZWVjaFBvbnlmaWxsRmFjdG9yeS5kZWZhdWx0KSh7XG4gICAgYXVkaW9Db25maWc6IGF1ZGlvQ29uZmlnLFxuICAgIGF1ZGlvQ29udGV4dDogYXVkaW9Db250ZXh0LFxuICAgIGVuYWJsZVRlbGVtZXRyeTogZW5hYmxlVGVsZW1ldHJ5LFxuICAgIHJlY29nbml6ZXI6IGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IsXG4gICAgc3BlZWNoUmVjb2duaXRpb25FbmRwb2ludElkOiBzcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQsXG4gICAgc3BlZWNoU3ludGhlc2lzRGVwbG95bWVudElkOiBzcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQsXG4gICAgc3BlZWNoU3ludGhlc2lzT3V0cHV0Rm9ybWF0OiBzcGVlY2hTeW50aGVzaXNPdXRwdXRGb3JtYXQsXG4gICAgdGV4dE5vcm1hbGl6YXRpb246IHRleHROb3JtYWxpemF0aW9uXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGRpcmVjdExpbmU6IGRpcmVjdExpbmUsXG4gICAgd2ViU3BlZWNoUG9ueWZpbGxGYWN0b3J5OiB3ZWJTcGVlY2hQb255ZmlsbEZhY3RvcnlcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5amNtVmhkR1ZCWkdGd2RHVnljeTVxY3lKZExDSnVZVzFsY3lJNld5SmpjbVZoZEdVaUxDSmhkV1JwYjBOdmJtWnBaeUlzSW1GMVpHbHZRMjl1ZEdWNGRDSXNJbVZ1WVdKc1pWUmxiR1Z0WlhSeWVTSXNJbk53WldWamFGSmxZMjluYm1sMGFXOXVSVzVrY0c5cGJuUkpaQ0lzSW5Od1pXVmphRkpsWTI5bmJtbDBhVzl1VEdGdVozVmhaMlVpTENKM2FXNWtiM2NpTENKdVlYWnBaMkYwYjNJaUxDSnNZVzVuZFdGblpTSXNJbk53WldWamFGTmxjblpwWTJWelFYVjBhRzl5YVhwaGRHbHZibFJ2YTJWdUlpd2ljM0JsWldOb1UyVnlkbWxqWlhOU1pXZHBiMjRpTENKemNHVmxZMmhUWlhKMmFXTmxjMU4xWW5OamNtbHdkR2x2Ymt0bGVTSXNJbk53WldWamFGTjViblJvWlhOcGMwUmxjR3h2ZVcxbGJuUkpaQ0lzSW5Od1pXVmphRk41Ym5Sb1pYTnBjMDkxZEhCMWRFWnZjbTFoZENJc0luUmxlSFJPYjNKdFlXeHBlbUYwYVc5dUlpd2lkWE5sY2tsRUlpd2lkWE5sY201aGJXVWlMQ0pGY25KdmNpSXNJbU52Ym5OdmJHVWlMQ0ozWVhKdUlpd2lZMjl1Wm1sbklpd2lRbTkwUm5KaGJXVjNiM0pyUTI5dVptbG5JaXdpWm5KdmJVRjFkR2h2Y21sNllYUnBiMjVVYjJ0bGJpSXNJbVp5YjIxVGRXSnpZM0pwY0hScGIyNGlMQ0p6WlhSUWNtOXdaWEowZVNJc0lsQnliM0JsY25SNVNXUWlMQ0pUY0dWbFkyaFRaWEoyYVdObFEyOXVibVZqZEdsdmJsOVNaV052VEdGdVozVmhaMlVpTENKa2FXRnNiMmRUWlhKMmFXTmxRMjl1Ym1WamRHOXlJaXdpUkdsaGJHOW5VMlZ5ZG1salpVTnZibTVsWTNSdmNpSXNJbU52Ym01bFkzUWlMQ0prYVhKbFkzUk1hVzVsSWl3aVJHbHlaV04wVEdsdVpWTndaV1ZqYUNJc0luZGxZbE53WldWamFGQnZibmxtYVd4c1JtRmpkRzl5ZVNJc0luSmxZMjluYm1sNlpYSWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3p0QlFVRkJPenRCUVVWQk96dEJRVU5CT3p0QlFVTkJPenRCUVVWbExGTkJRVk5CTEUxQlFWUXNUMEZwUWxvN1FVRkJRU3hOUVdoQ1JFTXNWMEZuUWtNc1VVRm9Ra1JCTEZkQlowSkRPMEZCUVVFc1RVRm1SRU1zV1VGbFF5eFJRV1pFUVN4WlFXVkRPMEZCUVVFc1RVRmtSRU1zWlVGalF5eFJRV1JFUVN4bFFXTkRPMEZCUVVFc1RVRmlSRU1zTWtKQllVTXNVVUZpUkVFc01rSkJZVU03UVVGQlFTeHRRMEZhUkVNc2VVSkJXVU03UVVGQlFTeE5RVnBFUVN4NVFrRlpReXh6UTBGYU5FSXNUMEZCVDBNc1RVRkJVQ3hMUVVGclFpeFhRVUZzUWl4SlFVTXpRaXhQUVVGUFFTeE5RVUZOTEVOQlFVTkRMRk5CUVdRc1MwRkJORUlzVjBGRVJDeEpRVVV6UWtRc1RVRkJUU3hEUVVGRFF5eFRRVUZRTEVOQlFXbENReXhSUVVaVExFbEJSekZDTEU5QlUwUTdRVUZCUVN4TlFWSkVReXhuUTBGUlF5eFJRVkpFUVN4blEwRlJRenRCUVVGQkxFMUJVRVJETEc5Q1FVOURMRkZCVUVSQkxHOUNRVTlETzBGQlFVRXNUVUZPUkVNc05rSkJUVU1zVVVGT1JFRXNOa0pCVFVNN1FVRkJRU3hOUVV4RVF5d3lRa0ZMUXl4UlFVeEVRU3d5UWtGTFF6dEJRVUZCTEUxQlNrUkRMREpDUVVsRExGRkJTa1JCTERKQ1FVbERPMEZCUVVFc1RVRklSRU1zYVVKQlIwTXNVVUZJUkVFc2FVSkJSME03UVVGQlFTeE5RVVpFUXl4TlFVVkRMRkZCUmtSQkxFMUJSVU03UVVGQlFTeE5RVVJFUXl4UlFVTkRMRkZCUkVSQkxGRkJRME03TzBGQlEwUXNUVUZEUnl4RFFVRkRVQ3huUTBGQlJDeEpRVUZ4UXl4RFFVRkRSU3cyUWtGQmRrTXNTVUZEUTBZc1owTkJRV2RETEVsQlFVbEZMRFpDUVVaMlF5eEZRVWRGTzBGQlEwRXNWVUZCVFN4SlFVRkpUU3hMUVVGS0xFTkJRMG9zY1VkQlJFa3NRMEZCVGp0QlFVZEVPenRCUVVWRUxFMUJRVWxJTEdsQ1FVRktMRVZCUVhWQ08wRkJRM0pDU1N4SlFVRkJRU3hQUVVGUExFTkJRVU5ETEVsQlFWSXNRMEZEUlN3NFIwRkVSanRCUVVkRU96dEJRVVZFTEUxQlFVbEtMRTFCUVUwc1NVRkJTVU1zVVVGQlpDeEZRVUYzUWp0QlFVTjBRa1VzU1VGQlFVRXNUMEZCVHl4RFFVRkRReXhKUVVGU0xFTkJRMFVzYzBkQlJFWTdRVUZIUkRzN1FVRkZSQ3hOUVVGSlF5eE5RVUZLT3p0QlFVVkJMRTFCUVVsWUxHZERRVUZLTEVWQlFYTkRPMEZCUTNCRFZ5eEpRVUZCUVN4TlFVRk5MRWRCUVVkRExIZEVRVUZ0UWtNc2MwSkJRVzVDTEVOQlFUQkRZaXhuUTBGQk1VTXNSVUZCTkVWRExHOUNRVUUxUlN4RFFVRlVPMEZCUTBRc1IwRkdSQ3hOUVVWUE8wRkJRMHhWTEVsQlFVRkJMRTFCUVUwc1IwRkJSME1zZDBSQlFXMUNSU3huUWtGQmJrSXNRMEZCYjBOYUxEWkNRVUZ3UXl4RlFVRnRSVVFzYjBKQlFXNUZMRU5CUVZRN1FVRkRSQ3hIUVRWQ1FTeERRVGhDUkRzN08wRkJSVUZWTEVWQlFVRkJMRTFCUVUwc1EwRkJRMGtzVjBGQlVDeERRVUZ0UWtNc1owUkJRVmRETEc5RFFVRTVRaXhGUVVGdlJYSkNMSGxDUVVGd1JTeEZRV2hEUXl4RFFXdERSRHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRTFCUVUxelFpeHpRa0ZCYzBJc1IwRkJSeXhuUkVGQmEwTXNTVUZCU1VNc01rUkJRVW9zUTBGQk1rSlNMRTFCUVROQ0xFVkJRVzFEYmtJc1YwRkJia01zUTBGQmJFTXNRMEZCTDBJN1FVRkZRVEJDTEVWQlFVRkJMSE5DUVVGelFpeERRVUZEUlN4UFFVRjJRanRCUVVWQkxFMUJRVTFETEZWQlFWVXNSMEZCUnl4SlFVRkpReXg1UWtGQlNpeERRVUZ4UWp0QlFVRkZTaXhKUVVGQlFTeHpRa0ZCYzBJc1JVRkJkRUpCTzBGQlFVWXNSMEZCY2tJc1EwRkJia0k3UVVGRlFTeE5RVUZOU3l4M1FrRkJkMElzUjBGQlJ5dzJRMEZCSzBJN1FVRkRPVVF2UWl4SlFVRkJRU3hYUVVGWExFVkJRVmhCTEZkQlJEaEVPMEZCUlRsRVF5eEpRVUZCUVN4WlFVRlpMRVZCUVZwQkxGbEJSamhFTzBGQlJ6bEVReXhKUVVGQlFTeGxRVUZsTEVWQlFXWkJMR1ZCU0RoRU8wRkJTVGxFT0VJc1NVRkJRVUVzVlVGQlZTeEZRVUZGVGl4elFrRkthMFE3UVVGTE9VUjJRaXhKUVVGQlFTd3lRa0ZCTWtJc1JVRkJNMEpCTERKQ1FVdzRSRHRCUVUwNVJGRXNTVUZCUVVFc01rSkJRVEpDTEVWQlFUTkNRU3d5UWtGT09FUTdRVUZQT1VSRExFbEJRVUZCTERKQ1FVRXlRaXhGUVVFelFrRXNNa0pCVURoRU8wRkJVVGxFUXl4SlFVRkJRU3hwUWtGQmFVSXNSVUZCYWtKQk8wRkJVamhFTEVkQlFTOUNMRU5CUVdwRE8wRkJWMEVzVTBGQlR6dEJRVU5NWjBJc1NVRkJRVUVzVlVGQlZTeEZRVUZXUVN4VlFVUkxPMEZCUlV4RkxFbEJRVUZCTEhkQ1FVRjNRaXhGUVVGNFFrRTdRVUZHU3l4SFFVRlFPMEZCU1VRaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2V5QkNiM1JHY21GdFpYZHZjbXREYjI1bWFXY3NJRVJwWVd4dloxTmxjblpwWTJWRGIyNXVaV04wYjNJc0lGQnliM0JsY25SNVNXUWdmU0JtY205dElDZHRhV055YjNOdlpuUXRZMjluYm1sMGFYWmxjMlZ5ZG1salpYTXRjM0JsWldOb0xYTmtheWM3WEhKY2JseHlYRzVwYlhCdmNuUWdZM0psWVhSbFYyVmlVM0JsWldOb1VHOXVlV1pwYkd4R1lXTjBiM0o1SUdaeWIyMGdKeTR2WTNKbFlYUmxWMlZpVTNCbFpXTm9VRzl1ZVdacGJHeEdZV04wYjNKNUp6dGNjbHh1YVcxd2IzSjBJRVJwY21WamRFeHBibVZUY0dWbFkyZ2dabkp2YlNBbkxpOUVhWEpsWTNSTWFXNWxVM0JsWldOb0p6dGNjbHh1YVcxd2IzSjBJSEJoZEdOb1JHbGhiRzluVTJWeWRtbGpaVU52Ym01bFkzUnZja2x1YkdsdVpTQm1jbTl0SUNjdUwzQmhkR05vUkdsaGJHOW5VMlZ5ZG1salpVTnZibTVsWTNSdmNrbHViR2x1WlNjN1hISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJqY21WaGRHVW9lMXh5WEc0Z0lHRjFaR2x2UTI5dVptbG5MRnh5WEc0Z0lHRjFaR2x2UTI5dWRHVjRkQ3hjY2x4dUlDQmxibUZpYkdWVVpXeGxiV1YwY25rc1hISmNiaUFnYzNCbFpXTm9VbVZqYjJkdWFYUnBiMjVGYm1Sd2IybHVkRWxrTEZ4eVhHNGdJSE53WldWamFGSmxZMjluYm1sMGFXOXVUR0Z1WjNWaFoyVWdQU0FvZEhsd1pXOW1JSGRwYm1SdmR5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWmNjbHh1SUNBZ0lIUjVjR1Z2WmlCM2FXNWtiM2N1Ym1GMmFXZGhkRzl5SUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmx4eVhHNGdJQ0FnZDJsdVpHOTNMbTVoZG1sbllYUnZjaTVzWVc1bmRXRm5aU2tnZkh4Y2NseHVJQ0FnSUNkbGJpMVZVeWNzWEhKY2JpQWdjM0JsWldOb1UyVnlkbWxqWlhOQmRYUm9iM0pwZW1GMGFXOXVWRzlyWlc0c1hISmNiaUFnYzNCbFpXTm9VMlZ5ZG1salpYTlNaV2RwYjI0c1hISmNiaUFnYzNCbFpXTm9VMlZ5ZG1salpYTlRkV0p6WTNKcGNIUnBiMjVMWlhrc1hISmNiaUFnYzNCbFpXTm9VM2x1ZEdobGMybHpSR1Z3Ykc5NWJXVnVkRWxrTEZ4eVhHNGdJSE53WldWamFGTjViblJvWlhOcGMwOTFkSEIxZEVadmNtMWhkQ3hjY2x4dUlDQjBaWGgwVG05eWJXRnNhWHBoZEdsdmJpeGNjbHh1SUNCMWMyVnlTVVFzWEhKY2JpQWdkWE5sY201aGJXVmNjbHh1ZlNrZ2UxeHlYRzRnSUdsbUlDaGNjbHh1SUNBZ0lDZ2hjM0JsWldOb1UyVnlkbWxqWlhOQmRYUm9iM0pwZW1GMGFXOXVWRzlyWlc0Z0ppWWdJWE53WldWamFGTmxjblpwWTJWelUzVmljMk55YVhCMGFXOXVTMlY1S1NCOGZGeHlYRzRnSUNBZ0tITndaV1ZqYUZObGNuWnBZMlZ6UVhWMGFHOXlhWHBoZEdsdmJsUnZhMlZ1SUNZbUlITndaV1ZqYUZObGNuWnBZMlZ6VTNWaWMyTnlhWEIwYVc5dVMyVjVLVnh5WEc0Z0lDa2dlMXh5WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHlYRzRnSUNBZ0lDQW5XVzkxSUcxMWMzUWdjM0JsWTJsbWVTQmxhWFJvWlhJZ1hDSnpjR1ZsWTJoVFpYSjJhV05sYzBGMWRHaHZjbWw2WVhScGIyNVViMnRsYmx3aUlHOXlJRndpYzNCbFpXTm9VMlZ5ZG1salpYTlRkV0p6WTNKcGNIUnBiMjVMWlhsY0lpQnZibXg1TGlkY2NseHVJQ0FnSUNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCcFppQW9kR1Y0ZEU1dmNtMWhiR2w2WVhScGIyNHBJSHRjY2x4dUlDQWdJR052Ym5OdmJHVXVkMkZ5YmloY2NseHVJQ0FnSUNBZ0oySnZkR1p5WVcxbGQyOXlheTFrYVhKbFkzUnNhVzVsYzNCbFpXTm9PaUJVWlhoMElHNXZjbTFoYkdsNllYUnBiMjRnYVhNZ1kzVnljbVZ1ZEd4NUlHNXZkQ0J6ZFhCd2IzSjBaV1FzSUdsbmJtOXlaV2x1WnlCY0luUmxlSFJPYjNKdFlXeHBlbUYwYVc5dVhDSXVKMXh5WEc0Z0lDQWdLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR2xtSUNoMWMyVnlTVVFnZkh3Z2RYTmxjbTVoYldVcElIdGNjbHh1SUNBZ0lHTnZibk52YkdVdWQyRnliaWhjY2x4dUlDQWdJQ0FnSjJKdmRHWnlZVzFsZDI5eWF5MWthWEpsWTNSc2FXNWxjM0JsWldOb09pQkRkWE4wYjIwZ1hDSjFjMlZ5U1dSY0lpQmhibVFnWENKMWMyVnlibUZ0WlZ3aUlHRnlaU0JqZFhKeVpXNTBiSGtnYm05MElITjFjSEJ2Y25SbFpDd2dhV2R1YjNKcGJtY3VKMXh5WEc0Z0lDQWdLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR3hsZENCamIyNW1hV2M3WEhKY2JseHlYRzRnSUdsbUlDaHpjR1ZsWTJoVFpYSjJhV05sYzBGMWRHaHZjbWw2WVhScGIyNVViMnRsYmlrZ2UxeHlYRzRnSUNBZ1kyOXVabWxuSUQwZ1FtOTBSbkpoYldWM2IzSnJRMjl1Wm1sbkxtWnliMjFCZFhSb2IzSnBlbUYwYVc5dVZHOXJaVzRvYzNCbFpXTm9VMlZ5ZG1salpYTkJkWFJvYjNKcGVtRjBhVzl1Vkc5clpXNHNJSE53WldWamFGTmxjblpwWTJWelVtVm5hVzl1S1R0Y2NseHVJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdZMjl1Wm1sbklEMGdRbTkwUm5KaGJXVjNiM0pyUTI5dVptbG5MbVp5YjIxVGRXSnpZM0pwY0hScGIyNG9jM0JsWldOb1UyVnlkbWxqWlhOVGRXSnpZM0pwY0hScGIyNUxaWGtzSUhOd1pXVmphRk5sY25acFkyVnpVbVZuYVc5dUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHZJRk4xY0hCdmNuUmxaQ0J2Y0hScGIyNXpJR05oYmlCaVpTQm1iM1Z1WkNCcGJpQkVhV0ZzYjJkRGIyNXVaV04wYjNKR1lXTjBiM0o1TG1wekxseHlYRzVjY2x4dUlDQmpiMjVtYVdjdWMyVjBVSEp2Y0dWeWRIa29VSEp2Y0dWeWRIbEpaQzVUY0dWbFkyaFRaWEoyYVdObFEyOXVibVZqZEdsdmJsOVNaV052VEdGdVozVmhaMlVzSUhOd1pXVmphRkpsWTI5bmJtbDBhVzl1VEdGdVozVmhaMlVwTzF4eVhHNWNjbHh1SUNBdkx5Qk9iMjVsSUc5bUlIUm9aU0JtYjJ4c2IzZHBibWNnZDI5eWEzTWdabTl5SUhObGRIUnBibWNnYjNWMGNIVjBJR1p2Y20xaGRDNWNjbHh1WEhKY2JpQWdMeThnWTI5dVptbG5Mbk5sZEZCeWIzQmxjblI1S0ZCeWIzQmxjblI1U1dRdVUzQmxaV05vVTJWeWRtbGpaVkpsYzNCdmJuTmxYMDkxZEhCMWRFWnZjbTFoZEU5d2RHbHZiaXdnVDNWMGNIVjBSbTl5YldGMFcwOTFkSEIxZEVadmNtMWhkQzVFWlhSaGFXeGxaRjBwTzF4eVhHNGdJQzh2SUdOdmJtWnBaeTV6WlhSUWNtOXdaWEowZVNoUWNtOXdaWEowZVVsa0xsTndaV1ZqYUZObGNuWnBZMlZTWlhOd2IyNXpaVjlTWlhGMVpYTjBSR1YwWVdsc1pXUlNaWE4xYkhSVWNuVmxSbUZzYzJVc0lIUnlkV1VwTzF4eVhHNGdJQzh2SUdOdmJtWnBaeTV6WlhSUWNtOXdaWEowZVNoUGRYUndkWFJHYjNKdFlYUlFjbTl3WlhKMGVVNWhiV1VzSUU5MWRIQjFkRVp2Y20xaGRGdFBkWFJ3ZFhSR2IzSnRZWFF1UkdWMFlXbHNaV1JkS1R0Y2NseHVJQ0F2THlCamIyNW1hV2N1YzJWMFUyVnlkbWxqWlZCeWIzQmxjblI1S0ZCeWIzQmxjblI1U1dRdVUzQmxaV05vVTJWeWRtbGpaVkpsYzNCdmJuTmxYMUpsY1hWbGMzUkVaWFJoYVd4bFpGSmxjM1ZzZEZSeWRXVkdZV3h6WlN3Z1hDSjBjblZsWENJc0lGTmxjblpwWTJWUWNtOXdaWEowZVVOb1lXNXVaV3d1VlhKcFVYVmxjbmxRWVhKaGJXVjBaWElwTzF4eVhHNWNjbHh1SUNCamIyNXpkQ0JrYVdGc2IyZFRaWEoyYVdObFEyOXVibVZqZEc5eUlEMGdjR0YwWTJoRWFXRnNiMmRUWlhKMmFXTmxRMjl1Ym1WamRHOXlTVzVzYVc1bEtHNWxkeUJFYVdGc2IyZFRaWEoyYVdObFEyOXVibVZqZEc5eUtHTnZibVpwWnl3Z1lYVmthVzlEYjI1bWFXY3BLVHRjY2x4dVhISmNiaUFnWkdsaGJHOW5VMlZ5ZG1salpVTnZibTVsWTNSdmNpNWpiMjV1WldOMEtDazdYSEpjYmx4eVhHNGdJR052Ym5OMElHUnBjbVZqZEV4cGJtVWdQU0J1WlhjZ1JHbHlaV04wVEdsdVpWTndaV1ZqYUNoN0lHUnBZV3h2WjFObGNuWnBZMlZEYjI1dVpXTjBiM0lnZlNrN1hISmNibHh5WEc0Z0lHTnZibk4wSUhkbFlsTndaV1ZqYUZCdmJubG1hV3hzUm1GamRHOXllU0E5SUdOeVpXRjBaVmRsWWxOd1pXVmphRkJ2Ym5sbWFXeHNSbUZqZEc5eWVTaDdYSEpjYmlBZ0lDQmhkV1JwYjBOdmJtWnBaeXhjY2x4dUlDQWdJR0YxWkdsdlEyOXVkR1Y0ZEN4Y2NseHVJQ0FnSUdWdVlXSnNaVlJsYkdWdFpYUnllU3hjY2x4dUlDQWdJSEpsWTI5bmJtbDZaWEk2SUdScFlXeHZaMU5sY25acFkyVkRiMjV1WldOMGIzSXNYSEpjYmlBZ0lDQnpjR1ZsWTJoU1pXTnZaMjVwZEdsdmJrVnVaSEJ2YVc1MFNXUXNYSEpjYmlBZ0lDQnpjR1ZsWTJoVGVXNTBhR1Z6YVhORVpYQnNiM2x0Wlc1MFNXUXNYSEpjYmlBZ0lDQnpjR1ZsWTJoVGVXNTBhR1Z6YVhOUGRYUndkWFJHYjNKdFlYUXNYSEpjYmlBZ0lDQjBaWGgwVG05eWJXRnNhWHBoZEdsdmJseHlYRzRnSUgwcE8xeHlYRzVjY2x4dUlDQnlaWFIxY200Z2UxeHlYRzRnSUNBZ1pHbHlaV04wVEdsdVpTeGNjbHh1SUNBZ0lIZGxZbE53WldWamFGQnZibmxtYVd4c1JtRmpkRzl5ZVZ4eVhHNGdJSDA3WEhKY2JuMWNjbHh1SWwxOSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlRXJyb3JFdmVudDtcblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JFdmVudChlcnJvcikge1xuICB2YXIgZXJyb3JFdmVudCA9IG5ldyBFdmVudCgnZXJyb3InKTtcbiAgZXJyb3JFdmVudC5lcnJvciA9IGVycm9yO1xuICByZXR1cm4gZXJyb3JFdmVudDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5amNtVmhkR1ZGY25KdmNrVjJaVzUwTG1weklsMHNJbTVoYldWeklqcGJJbU55WldGMFpVVnljbTl5UlhabGJuUWlMQ0psY25KdmNpSXNJbVZ5Y205eVJYWmxiblFpTENKRmRtVnVkQ0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3p0QlFVRmxMRk5CUVZOQkxHZENRVUZVTEVOQlFUQkNReXhMUVVFeFFpeEZRVUZwUXp0QlFVTTVReXhOUVVGTlF5eFZRVUZWTEVkQlFVY3NTVUZCU1VNc1MwRkJTaXhEUVVGVkxFOUJRVllzUTBGQmJrSTdRVUZGUVVRc1JVRkJRVUVzVlVGQlZTeERRVUZEUkN4TFFVRllMRWRCUVcxQ1FTeExRVUZ1UWp0QlFVVkJMRk5CUVU5RExGVkJRVkE3UVVGRFJDSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHTnlaV0YwWlVWeWNtOXlSWFpsYm5Rb1pYSnliM0lwSUh0Y2NseHVJQ0JqYjI1emRDQmxjbkp2Y2tWMlpXNTBJRDBnYm1WM0lFVjJaVzUwS0NkbGNuSnZjaWNwTzF4eVhHNWNjbHh1SUNCbGNuSnZja1YyWlc1MExtVnljbTl5SUQwZ1pYSnliM0k3WEhKY2JseHlYRzRnSUhKbGRIVnliaUJsY25KdmNrVjJaVzUwTzF4eVhHNTlYSEpjYmlKZGZRPT0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVUYXNrUXVldWU7XG5cbnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSk7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3JcIikpO1xuXG52YXIgX3BEZWZlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInAtZGVmZXJcIikpO1xuXG5mdW5jdGlvbiBjcmVhdGVUYXNrUXVldWUoKSB7XG4gIHZhciBxdWV1ZVdpdGhDdXJyZW50ID0gW107XG4gIHZhciBxdWV1ZSA9IHtcbiAgICBjYW5jZWxBbGw6IGZ1bmN0aW9uIGNhbmNlbEFsbCgpIHtcbiAgICAgIHF1ZXVlV2l0aEN1cnJlbnQuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgY2FuY2VsID0gX3JlZi5jYW5jZWw7XG4gICAgICAgIHJldHVybiBjYW5jZWwoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcHVzaDogZnVuY3Rpb24gcHVzaChmbikge1xuICAgICAgdmFyIGNhbmNlbERlZmVycmVkID0gKDAsIF9wRGVmZXIuZGVmYXVsdCkoKTtcbiAgICAgIHZhciByZXN1bHREZWZlcnJlZCA9ICgwLCBfcERlZmVyLmRlZmF1bHQpKCk7XG4gICAgICB2YXIgZW50cnkgPSB7XG4gICAgICAgIHByb21pc2U6IHJlc3VsdERlZmVycmVkLnByb21pc2VcbiAgICAgIH07XG4gICAgICB2YXIgYWJvcnQ7XG5cbiAgICAgIHZhciBjYW5jZWwgPSBlbnRyeS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIE92ZXJyaWRlIHRoZSBcImZuXCIgc28gd2UgZG9uJ3QgY2FsbCB0aGUgYWN0dWFsIFwiZm5cIiBsYXRlci5cbiAgICAgICAgLy8gSW4gdGhpcyBhcHByb2FjaCwgd2UgY2FuIHJldXNlIHRoZSBsb2dpYyBpbnNpZGUgXCJzdGFydFwiIHRvIGhhbmRsZSBwb3N0LWNhbmNlbGxhdGlvbi5cbiAgICAgICAgZm4gPSBmdW5jdGlvbiBmbigpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdWx0OiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ2NhbmNlbGxlZCBiZWZvcmUgc3RhcnQnKSlcbiAgICAgICAgICB9O1xuICAgICAgICB9OyAvLyBBYm9ydCB0aGUgdGFzayBpZiBpdCBpcyBjdXJyZW50bHkgcnVubmluZy5cblxuXG4gICAgICAgIGFib3J0ICYmIGFib3J0KCk7XG4gICAgICAgIGNhbmNlbERlZmVycmVkLnJlamVjdChuZXcgRXJyb3IoJ2NhbmNlbGxlZCBpbiB0aGUgbWlkd2F5JykpO1xuICAgICAgfTtcblxuICAgICAgdmFyIHN0YXJ0ID1cbiAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9yZWYyID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMi5kZWZhdWx0KShcbiAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICBfcmVnZW5lcmF0b3IuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgICAgdmFyIF9mbiwgYWJvcnRGbiwgcmVzdWx0O1xuXG4gICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvci5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBfZm4gPSBmbigpLCBhYm9ydEZuID0gX2ZuLmFib3J0LCByZXN1bHQgPSBfZm4ucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgYWJvcnQgPSBhYm9ydEZuO1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IHJlc3VsdERlZmVycmVkO1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtyZXN1bHQsIGNhbmNlbERlZmVycmVkLnByb21pc2VdKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHQuc2VudDtcblxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQudDAucmVzb2x2ZS5jYWxsKF9jb250ZXh0LnQwLCBfY29udGV4dC50MSk7XG5cbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMDtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQyID0gX2NvbnRleHRbXCJjYXRjaFwiXSgyKTtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdERlZmVycmVkLnJlamVjdChfY29udGV4dC50Mik7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgcXVldWVXaXRoQ3VycmVudCA9IHF1ZXVlV2l0aEN1cnJlbnQuZmlsdGVyKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlICE9PSBlbnRyeTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1syLCAxMF1dKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oKTtcblxuICAgICAgdmFyIGxhc3RFbnRyeSA9IHF1ZXVlV2l0aEN1cnJlbnRbcXVldWVXaXRoQ3VycmVudC5sZW5ndGggLSAxXTtcbiAgICAgIHZhciBsYXN0UHJvbWlzZSA9IGxhc3RFbnRyeSAmJiBsYXN0RW50cnkucHJvbWlzZSB8fCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIHF1ZXVlV2l0aEN1cnJlbnQucHVzaChlbnRyeSk7IC8vIEFmdGVyIHRoZSBsYXN0IHByb21pc2UgcmVzb2x2ZWQvcmVqZWN0ZWQsIHdlIHdpbGwgc3RhcnQgdGhpcyB0YXNrLlxuICAgICAgLy8gV2Ugd2lsbCBzdGFydCBldmVuIGlmIHRoZSBsYXN0IHByb21pc2UgcmVqZWN0ZWQuXG5cbiAgICAgIGxhc3RQcm9taXNlLnRoZW4oc3RhcnQsIHN0YXJ0KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNhbmNlbDogY2FuY2VsLFxuICAgICAgICByZXN1bHQ6IHJlc3VsdERlZmVycmVkLnByb21pc2VcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocXVldWUsICdsZW5ndGgnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gcXVldWVXaXRoQ3VycmVudC5sZW5ndGg7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHF1ZXVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlqY21WaGRHVlVZWE5yVVhWbGRXVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVkzSmxZWFJsVkdGemExRjFaWFZsSWl3aWNYVmxkV1ZYYVhSb1EzVnljbVZ1ZENJc0luRjFaWFZsSWl3aVkyRnVZMlZzUVd4c0lpd2labTl5UldGamFDSXNJbU5oYm1ObGJDSXNJbkIxYzJnaUxDSm1iaUlzSW1OaGJtTmxiRVJsWm1WeWNtVmtJaXdpY21WemRXeDBSR1ZtWlhKeVpXUWlMQ0psYm5SeWVTSXNJbkJ5YjIxcGMyVWlMQ0poWW05eWRDSXNJbkpsYzNWc2RDSXNJbEJ5YjIxcGMyVWlMQ0p5WldwbFkzUWlMQ0pGY25KdmNpSXNJbk4wWVhKMElpd2lZV0p2Y25SR2JpSXNJbkpoWTJVaUxDSnlaWE52YkhabElpd2labWxzZEdWeUlpd2laU0lzSW14aGMzUkZiblJ5ZVNJc0lteGxibWQwYUNJc0lteGhjM1JRY205dGFYTmxJaXdpZEdobGJpSXNJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2laMlYwSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3TzBGQlFVRTdPMEZCUldVc1UwRkJVMEVzWlVGQlZDeEhRVUV5UWp0QlFVTjRReXhOUVVGSlF5eG5Ra0ZCWjBJc1IwRkJSeXhGUVVGMlFqdEJRVVZCTEUxQlFVMURMRXRCUVVzc1IwRkJSenRCUVVOYVF5eEpRVUZCUVN4VFFVRlRMRVZCUVVVc2NVSkJRVTA3UVVGRFprWXNUVUZCUVVFc1owSkJRV2RDTEVOQlFVTkhMRTlCUVdwQ0xFTkJRWGxDTzBGQlFVRXNXVUZCUjBNc1RVRkJTQ3hSUVVGSFFTeE5RVUZJTzBGQlFVRXNaVUZCWjBKQkxFMUJRVTBzUlVGQmRFSTdRVUZCUVN4UFFVRjZRanRCUVVORUxFdEJTRmM3UVVGSldrTXNTVUZCUVVFc1NVRkJTU3hGUVVGRkxHTkJRVUZETEVWQlFVVXNSVUZCU1R0QlFVTldMRlZCUVUxRExHTkJRV01zUjBGQlJ5eHpRa0ZCZGtJN1FVRkRRU3hWUVVGTlF5eGpRVUZqTEVkQlFVY3NjMEpCUVhaQ08wRkJRMEVzVlVGQlRVTXNTMEZCU3l4SFFVRkhPMEZCUVVWRExGRkJRVUZCTEU5QlFVOHNSVUZCUlVZc1kwRkJZeXhEUVVGRFJUdEJRVUV4UWl4UFFVRmtPMEZCUTBFc1ZVRkJTVU1zUzBGQlNqczdRVUZGUVN4VlFVRk5VQ3hOUVVGTkxFZEJRVWxMTEV0QlFVc3NRMEZCUTB3c1RVRkJUaXhIUVVGbExGbEJRVTA3UVVGRGJrTTdRVUZEUVR0QlFVTkJSU3hSUVVGQlFTeEZRVUZGTEVkQlFVYzdRVUZCUVN4cFFrRkJUenRCUVVGRlRTeFpRVUZCUVN4TlFVRk5MRVZCUVVWRExFOUJRVThzUTBGQlEwTXNUVUZCVWl4RFFVRmxMRWxCUVVsRExFdEJRVW9zUTBGQlZTeDNRa0ZCVml4RFFVRm1PMEZCUVZZc1YwRkJVRHRCUVVGQkxGTkJRVXdzUTBGSWJVTXNRMEZMYmtNN096dEJRVU5CU2l4UlFVRkJRU3hMUVVGTExFbEJRVWxCTEV0QlFVc3NSVUZCWkR0QlFVTkJTaXhSUVVGQlFTeGpRVUZqTEVOQlFVTlBMRTFCUVdZc1EwRkJjMElzU1VGQlNVTXNTMEZCU2l4RFFVRlZMSGxDUVVGV0xFTkJRWFJDTzBGQlEwUXNUMEZTUkRzN1FVRlZRU3hWUVVGTlF5eExRVUZMTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRU3hyUTBGQlJ6dEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzZDBKQlEzVkNWaXhGUVVGRkxFVkJSSHBDTEVWQlEwZFhMRTlCUkVnc1QwRkRTazRzUzBGRVNTeEZRVU5aUXl4TlFVUmFMRTlCUTFsQkxFMUJSRm83UVVGSFdrUXNhMEpCUVVGQkxFdEJRVXNzUjBGQlIwMHNUMEZCVWp0QlFVaFpPMEZCUVVFc1owTkJUMVpVTEdOQlVGVTdRVUZCUVR0QlFVRkJMSGxDUVU5dFFrc3NUMEZCVHl4RFFVRkRTeXhKUVVGU0xFTkJRV0VzUTBGQlEwNHNUVUZCUkN4RlFVRlRUQ3hqUVVGakxFTkJRVU5ITEU5QlFYaENMRU5CUVdJc1EwRlFia0k3TzBGQlFVRTdRVUZCUVRzN1FVRkJRU3c0UWtGUFMxTXNUMEZRVERzN1FVRkJRVHRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFWTldXQ3hyUWtGQlFVRXNZMEZCWXl4RFFVRkRUU3hOUVVGbU96dEJRVlJWTzBGQldWcGtMR3RDUVVGQlFTeG5Ra0ZCWjBJc1IwRkJSMEVzWjBKQlFXZENMRU5CUVVOdlFpeE5RVUZxUWl4RFFVRjNRaXhWUVVGQlF5eERRVUZETzBGQlFVRXNNa0pCUVVsQkxFTkJRVU1zUzBGQlMxb3NTMEZCVmp0QlFVRkJMRzFDUVVGNlFpeERRVUZ1UWpzN1FVRmFXVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4VFFVRklPenRCUVVGQkxIZENRVUZNVHl4TFFVRkxPMEZCUVVFN1FVRkJRVHRCUVVGQkxGTkJRVmc3TzBGQlpVRXNWVUZCVFUwc1UwRkJVeXhIUVVGSGRFSXNaMEpCUVdkQ0xFTkJRVU5CTEdkQ1FVRm5RaXhEUVVGRGRVSXNUVUZCYWtJc1IwRkJNRUlzUTBGQk0wSXNRMEZCYkVNN1FVRkRRU3hWUVVGTlF5eFhRVUZYTEVkQlFVbEdMRk5CUVZNc1NVRkJTVUVzVTBGQlV5eERRVUZEV2l4UFFVRjRRaXhKUVVGdlEwY3NUMEZCVHl4RFFVRkRUU3hQUVVGU0xFVkJRWGhFTzBGQlJVRnVRaXhOUVVGQlFTeG5Ra0ZCWjBJc1EwRkJRMHNzU1VGQmFrSXNRMEZCYzBKSkxFdEJRWFJDTEVWQmJFTlZMRU5CYjBOV08wRkJRMEU3TzBGQlEwRmxMRTFCUVVGQkxGZEJRVmNzUTBGQlEwTXNTVUZCV2l4RFFVRnBRbFFzUzBGQmFrSXNSVUZCZDBKQkxFdEJRWGhDTzBGQlJVRXNZVUZCVHp0QlFVTk1XaXhSUVVGQlFTeE5RVUZOTEVWQlFVNUJMRTFCUkVzN1FVRkZURkVzVVVGQlFVRXNUVUZCVFN4RlFVRkZTaXhqUVVGakxFTkJRVU5GTzBGQlJteENMRTlCUVZBN1FVRkpSRHRCUVdoRVZ5eEhRVUZrTzBGQmJVUkJaMElzUlVGQlFVRXNUVUZCVFN4RFFVRkRReXhqUVVGUUxFTkJRWE5DTVVJc1MwRkJkRUlzUlVGQk5rSXNVVUZCTjBJc1JVRkJkVU03UVVGQlJUSkNMRWxCUVVGQkxFZEJRVWNzUlVGQlJUdEJRVUZCTEdGQlFVMDFRaXhuUWtGQlowSXNRMEZCUTNWQ0xFMUJRWFpDTzBGQlFVRTdRVUZCVUN4SFFVRjJRenRCUVVWQkxGTkJRVTkwUWl4TFFVRlFPMEZCUTBRaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1kzSmxZWFJsUkdWbVpYSnlaV1FnWm5KdmJTQW5jQzFrWldabGNpYzdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCamNtVmhkR1ZVWVhOclVYVmxkV1VvS1NCN1hISmNiaUFnYkdWMElIRjFaWFZsVjJsMGFFTjFjbkpsYm5RZ1BTQmJYVHRjY2x4dVhISmNiaUFnWTI5dWMzUWdjWFZsZFdVZ1BTQjdYSEpjYmlBZ0lDQmpZVzVqWld4QmJHdzZJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdjWFZsZFdWWGFYUm9RM1Z5Y21WdWRDNW1iM0pGWVdOb0tDaDdJR05oYm1ObGJDQjlLU0E5UGlCallXNWpaV3dvS1NrN1hISmNiaUFnSUNCOUxGeHlYRzRnSUNBZ2NIVnphRG9nWm00Z1BUNGdlMXh5WEc0Z0lDQWdJQ0JqYjI1emRDQmpZVzVqWld4RVpXWmxjbkpsWkNBOUlHTnlaV0YwWlVSbFptVnljbVZrS0NrN1hISmNiaUFnSUNBZ0lHTnZibk4wSUhKbGMzVnNkRVJsWm1WeWNtVmtJRDBnWTNKbFlYUmxSR1ZtWlhKeVpXUW9LVHRjY2x4dUlDQWdJQ0FnWTI5dWMzUWdaVzUwY25rZ1BTQjdJSEJ5YjIxcGMyVTZJSEpsYzNWc2RFUmxabVZ5Y21Wa0xuQnliMjFwYzJVZ2ZUdGNjbHh1SUNBZ0lDQWdiR1YwSUdGaWIzSjBPMXh5WEc1Y2NseHVJQ0FnSUNBZ1kyOXVjM1FnWTJGdVkyVnNJRDBnS0dWdWRISjVMbU5oYm1ObGJDQTlJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCUGRtVnljbWxrWlNCMGFHVWdYQ0ptYmx3aUlITnZJSGRsSUdSdmJpZDBJR05oYkd3Z2RHaGxJR0ZqZEhWaGJDQmNJbVp1WENJZ2JHRjBaWEl1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdTVzRnZEdocGN5QmhjSEJ5YjJGamFDd2dkMlVnWTJGdUlISmxkWE5sSUhSb1pTQnNiMmRwWXlCcGJuTnBaR1VnWENKemRHRnlkRndpSUhSdklHaGhibVJzWlNCd2IzTjBMV05oYm1ObGJHeGhkR2x2Ymk1Y2NseHVJQ0FnSUNBZ0lDQm1iaUE5SUNncElEMCtJQ2g3SUhKbGMzVnNkRG9nVUhKdmJXbHpaUzV5WldwbFkzUW9ibVYzSUVWeWNtOXlLQ2RqWVc1alpXeHNaV1FnWW1WbWIzSmxJSE4wWVhKMEp5a3BJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCQlltOXlkQ0IwYUdVZ2RHRnpheUJwWmlCcGRDQnBjeUJqZFhKeVpXNTBiSGtnY25WdWJtbHVaeTVjY2x4dUlDQWdJQ0FnSUNCaFltOXlkQ0FtSmlCaFltOXlkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lHTmhibU5sYkVSbFptVnljbVZrTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvSjJOaGJtTmxiR3hsWkNCcGJpQjBhR1VnYldsa2QyRjVKeWtwTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUdOdmJuTjBJSE4wWVhKMElEMGdZWE41Ym1NZ0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhzZ1lXSnZjblE2SUdGaWIzSjBSbTRzSUhKbGMzVnNkQ0I5SUQwZ1ptNG9LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZV0p2Y25RZ1BTQmhZbTl5ZEVadU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMGNua2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdSV2wwYUdWeUlIZGhhWFFnWm05eUlIUm9aU0JoWTNSMVlXd2djbVZ6ZFd4MExDQnZjaUIwYUdVZ2RHRnpheUJwY3lCaVpXbHVaeUJqWVc1alpXeHNaV1F1WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSRVpXWmxjbkpsWkM1eVpYTnZiSFpsS0dGM1lXbDBJRkJ5YjIxcGMyVXVjbUZqWlNoYmNtVnpkV3gwTENCallXNWpaV3hFWldabGNuSmxaQzV3Y205dGFYTmxYU2twTzF4eVhHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOMWJIUkVaV1psY25KbFpDNXlaV3BsWTNRb1pYSnliM0lwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2NYVmxkV1ZYYVhSb1EzVnljbVZ1ZENBOUlIRjFaWFZsVjJsMGFFTjFjbkpsYm5RdVptbHNkR1Z5S0dVZ1BUNGdaU0FoUFQwZ1pXNTBjbmtwTzF4eVhHNGdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnWTI5dWMzUWdiR0Z6ZEVWdWRISjVJRDBnY1hWbGRXVlhhWFJvUTNWeWNtVnVkRnR4ZFdWMVpWZHBkR2hEZFhKeVpXNTBMbXhsYm1kMGFDQXRJREZkTzF4eVhHNGdJQ0FnSUNCamIyNXpkQ0JzWVhOMFVISnZiV2x6WlNBOUlDaHNZWE4wUlc1MGNua2dKaVlnYkdGemRFVnVkSEo1TG5CeWIyMXBjMlVwSUh4OElGQnliMjFwYzJVdWNtVnpiMngyWlNncE8xeHlYRzVjY2x4dUlDQWdJQ0FnY1hWbGRXVlhhWFJvUTNWeWNtVnVkQzV3ZFhOb0tHVnVkSEo1S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2SUVGbWRHVnlJSFJvWlNCc1lYTjBJSEJ5YjIxcGMyVWdjbVZ6YjJ4MlpXUXZjbVZxWldOMFpXUXNJSGRsSUhkcGJHd2djM1JoY25RZ2RHaHBjeUIwWVhOckxseHlYRzRnSUNBZ0lDQXZMeUJYWlNCM2FXeHNJSE4wWVhKMElHVjJaVzRnYVdZZ2RHaGxJR3hoYzNRZ2NISnZiV2x6WlNCeVpXcGxZM1JsWkM1Y2NseHVJQ0FnSUNBZ2JHRnpkRkJ5YjIxcGMyVXVkR2hsYmloemRHRnlkQ3dnYzNSaGNuUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ0lDQmpZVzVqWld3c1hISmNiaUFnSUNBZ0lDQWdjbVZ6ZFd4ME9pQnlaWE4xYkhSRVpXWmxjbkpsWkM1d2NtOXRhWE5sWEhKY2JpQWdJQ0FnSUgwN1hISmNiaUFnSUNCOVhISmNiaUFnZlR0Y2NseHVYSEpjYmlBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSEYxWlhWbExDQW5iR1Z1WjNSb0p5d2dleUJuWlhRNklDZ3BJRDArSUhGMVpYVmxWMmwwYUVOMWNuSmxiblF1YkdWdVozUm9JSDBwTzF4eVhHNWNjbHh1SUNCeVpYUjFjbTRnY1hWbGRXVTdYSEpjYm4xY2NseHVJbDE5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSk7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3JcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9taWNyb3NvZnRDb2duaXRpdmVzZXJ2aWNlc1NwZWVjaFNkayA9IHJlcXVpcmUoXCJtaWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNka1wiKTtcblxudmFyIF9TcGVlY2hUb1RleHQgPSByZXF1aXJlKFwid2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXMvbGliL1NwZWVjaFNlcnZpY2VzL1NwZWVjaFRvVGV4dFwiKTtcblxudmFyIF9hYm9ydENvbnRyb2xsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJhYm9ydC1jb250cm9sbGVyXCIpKTtcblxudmFyIF9jcmVhdGVFcnJvckV2ZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVFcnJvckV2ZW50XCIpKTtcblxudmFyIF9jcmVhdGVUYXNrUXVldWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVUYXNrUXVldWVcIikpO1xuXG52YXIgX2V2ZW50VGFyZ2V0U2hpbSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL2V4dGVybmFsL2V2ZW50LXRhcmdldC1zaGltXCIpKTtcblxudmFyIF9wbGF5Q29nbml0aXZlU2VydmljZXNTdHJlYW0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3BsYXlDb2duaXRpdmVTZXJ2aWNlc1N0cmVhbVwiKSk7XG5cbnZhciBfcGxheVdoaXRlTm9pc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3BsYXlXaGl0ZU5vaXNlXCIpKTtcblxudmFyIF9TcGVlY2hTeW50aGVzaXNBdWRpb1N0cmVhbVV0dGVyYW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3BlZWNoU3ludGhlc2lzQXVkaW9TdHJlYW1VdHRlcmFuY2VcIikpO1xuXG4vKiBlc2xpbnQgY2xhc3MtbWV0aG9kcy11c2UtdGhpczogW1wiZXJyb3JcIiwgeyBcImV4Y2VwdE1ldGhvZHNcIjogW1wiY2FuY2VsXCIsIFwiZ2V0Vm9pY2VzXCIsIFwic3BlYWtcIl0gfV0gKi9cbmZ1bmN0aW9uIF9kZWZhdWx0KF9yZWYpIHtcbiAgdmFyIF9yZWYkYXVkaW9Db25maWcgPSBfcmVmLmF1ZGlvQ29uZmlnLFxuICAgICAgYXVkaW9Db25maWcgPSBfcmVmJGF1ZGlvQ29uZmlnID09PSB2b2lkIDAgPyBfbWljcm9zb2Z0Q29nbml0aXZlc2VydmljZXNTcGVlY2hTZGsuQXVkaW9Db25maWcuZnJvbURlZmF1bHRNaWNyb3Bob25lSW5wdXQoKSA6IF9yZWYkYXVkaW9Db25maWcsXG4gICAgICBlbmFibGVUZWxlbWV0cnkgPSBfcmVmLmVuYWJsZVRlbGVtZXRyeSxcbiAgICAgIHJlY29nbml6ZXIgPSBfcmVmLnJlY29nbml6ZXIsXG4gICAgICBzcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQgPSBfcmVmLnNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCxcbiAgICAgIHNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZCA9IF9yZWYuc3BlZWNoU3ludGhlc2lzRGVwbG95bWVudElkLFxuICAgICAgc3BlZWNoU3ludGhlc2lzT3V0cHV0Rm9ybWF0ID0gX3JlZi5zcGVlY2hTeW50aGVzaXNPdXRwdXRGb3JtYXQsXG4gICAgICB0ZXh0Tm9ybWFsaXphdGlvbiA9IF9yZWYudGV4dE5vcm1hbGl6YXRpb247XG5cbiAgaWYgKHNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCkge1xuICAgIGNvbnNvbGUud2FybignYm90ZnJhbWV3b3JrLWRpcmVjdGxpbmVzcGVlY2g6IEN1c3RvbSBTcGVlY2ggaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQsIGlnbm9yaW5nIHNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZC4nKTtcbiAgfVxuXG4gIGlmIChzcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ2JvdGZyYW1ld29yay1kaXJlY3RsaW5lc3BlZWNoOiBDdXN0b20gVm9pY2UgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQsIGlnbm9yaW5nIHNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZC4nKTtcbiAgfVxuXG4gIGlmIChzcGVlY2hTeW50aGVzaXNPdXRwdXRGb3JtYXQpIHtcbiAgICBjb25zb2xlLndhcm4oJ2JvdGZyYW1ld29yay1kaXJlY3RsaW5lc3BlZWNoOiBDdXN0b20gVm9pY2UgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQsIGlnbm9yaW5nIHNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdC4nKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9jcmVhdGVTcGVlY2hSZWNvZ25pdCA9ICgwLCBfU3BlZWNoVG9UZXh0LmNyZWF0ZVNwZWVjaFJlY29nbml0aW9uUG9ueWZpbGxGcm9tUmVjb2duaXplcikoe1xuICAgICAgYXVkaW9Db25maWc6IGF1ZGlvQ29uZmlnLFxuICAgICAgY3JlYXRlUmVjb2duaXplcjogZnVuY3Rpb24gY3JlYXRlUmVjb2duaXplcigpIHtcbiAgICAgICAgcmV0dXJuIHJlY29nbml6ZXI7XG4gICAgICB9LFxuICAgICAgZW5hYmxlVGVsZW1ldHJ5OiBlbmFibGVUZWxlbWV0cnksXG4gICAgICBsb29zZUV2ZW50czogdHJ1ZSxcbiAgICAgIHRleHROb3JtYWxpemF0aW9uOiB0ZXh0Tm9ybWFsaXphdGlvblxuICAgIH0pLFxuICAgICAgICBTcGVlY2hHcmFtbWFyTGlzdCA9IF9jcmVhdGVTcGVlY2hSZWNvZ25pdC5TcGVlY2hHcmFtbWFyTGlzdCxcbiAgICAgICAgU3BlZWNoUmVjb2duaXRpb24gPSBfY3JlYXRlU3BlZWNoUmVjb2duaXQuU3BlZWNoUmVjb2duaXRpb247XG5cbiAgICB2YXIgYXVkaW9Db250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuXG4gICAgdmFyIF9jcmVhdGVUYXNrUXVldWUgPSAoMCwgX2NyZWF0ZVRhc2tRdWV1ZTIuZGVmYXVsdCkoKSxcbiAgICAgICAgY2FuY2VsQWxsID0gX2NyZWF0ZVRhc2tRdWV1ZS5jYW5jZWxBbGwsXG4gICAgICAgIHB1c2ggPSBfY3JlYXRlVGFza1F1ZXVlLnB1c2g7XG5cbiAgICB2YXIgU3BlZWNoU3ludGhlc2lzID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9FdmVudFRhcmdldFNoaW0pIHtcbiAgICAgICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFNwZWVjaFN5bnRoZXNpcywgX0V2ZW50VGFyZ2V0U2hpbSk7XG5cbiAgICAgIGZ1bmN0aW9uIFNwZWVjaFN5bnRoZXNpcygpIHtcbiAgICAgICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgU3BlZWNoU3ludGhlc2lzKTtcbiAgICAgICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU3BlZWNoU3ludGhlc2lzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoU3BlZWNoU3ludGhlc2lzLCBbe1xuICAgICAgICBrZXk6IFwiY2FuY2VsXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgICAgY2FuY2VsQWxsKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldFZvaWNlc1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Vm9pY2VzKCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwic3BlYWtcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNwZWFrKHV0dGVyYW5jZSkge1xuICAgICAgICAgIHZhciBfcHVzaCA9IHB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBuZXcgX2Fib3J0Q29udHJvbGxlci5kZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgc2lnbmFsID0gY29udHJvbGxlci5zaWduYWw7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhYm9ydDogY29udHJvbGxlci5hYm9ydC5iaW5kKGNvbnRyb2xsZXIpLFxuICAgICAgICAgICAgICByZXN1bHQ6ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjIuZGVmYXVsdCkoXG4gICAgICAgICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgICAgICAgX3JlZ2VuZXJhdG9yLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xuICAgICAgICAgICAgICAgIHZhciBfdXR0ZXJhbmNlJGF1ZGlvU3RyZWEsIGZvcm1hdCwgc3RyZWFtUmVhZGVyO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvci5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICB1dHRlcmFuY2UuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3N0YXJ0JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXR0ZXJhbmNlLmF1ZGlvU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgX3V0dGVyYW5jZSRhdWRpb1N0cmVhID0gdXR0ZXJhbmNlLmF1ZGlvU3RyZWFtLCBmb3JtYXQgPSBfdXR0ZXJhbmNlJGF1ZGlvU3RyZWEuZm9ybWF0LCBzdHJlYW1SZWFkZXIgPSBfdXR0ZXJhbmNlJGF1ZGlvU3RyZWEuc3RyZWFtUmVhZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF9wbGF5Q29nbml0aXZlU2VydmljZXNTdHJlYW0uZGVmYXVsdCkoYXVkaW9Db250ZXh0LCBmb3JtYXQsIHN0cmVhbVJlYWRlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IHNpZ25hbFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX3BsYXlXaGl0ZU5vaXNlLmRlZmF1bHQpKGF1ZGlvQ29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE2O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFtcImNhdGNoXCJdKDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dC50MC5tZXNzYWdlICE9PSAnYWJvcnRlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgdXR0ZXJhbmNlLmRpc3BhdGNoRXZlbnQoKDAsIF9jcmVhdGVFcnJvckV2ZW50LmRlZmF1bHQpKF9jb250ZXh0LnQwKSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0dGVyYW5jZS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnZW5kJykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1sxLCAxMl1dKTtcbiAgICAgICAgICAgICAgfSkpKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHJlc3VsdCA9IF9wdXNoLnJlc3VsdDsgLy8gQ2F0Y2hpbmcgdGhlIGVycm9yIHRvIHByZXZlbnQgdW5jYXVnaHQgcHJvbWlzZSBlcnJvciBkdWUgdG8gY2FuY2VsbGF0aW9uLlxuXG5cbiAgICAgICAgICByZXN1bHQuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoIS9eY2FuY2VsbGVkL2kudGVzdChlcnJvci5tZXNzYWdlKSkge1xuICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuICAgICAgcmV0dXJuIFNwZWVjaFN5bnRoZXNpcztcbiAgICB9KF9ldmVudFRhcmdldFNoaW0uZGVmYXVsdCk7XG5cbiAgICAoMCwgX2V2ZW50VGFyZ2V0U2hpbS5kZWZpbmVFdmVudEF0dHJpYnV0ZSkoU3BlZWNoU3ludGhlc2lzLCAndm9pY2VzY2hhbmdlZCcpO1xuICAgIHJldHVybiB7XG4gICAgICBTcGVlY2hHcmFtbWFyTGlzdDogU3BlZWNoR3JhbW1hckxpc3QsXG4gICAgICBTcGVlY2hSZWNvZ25pdGlvbjogU3BlZWNoUmVjb2duaXRpb24sXG4gICAgICBzcGVlY2hTeW50aGVzaXM6IG5ldyBTcGVlY2hTeW50aGVzaXMoKSxcbiAgICAgIFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZTogX1NwZWVjaFN5bnRoZXNpc0F1ZGlvU3RyZWFtVXR0ZXJhbmNlLmRlZmF1bHRcbiAgICB9O1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlqY21WaGRHVlhaV0pUY0dWbFkyaFFiMjU1Wm1sc2JFWmhZM1J2Y25rdWFuTWlYU3dpYm1GdFpYTWlPbHNpWVhWa2FXOURiMjVtYVdjaUxDSkJkV1JwYjBOdmJtWnBaeUlzSW1aeWIyMUVaV1poZFd4MFRXbGpjbTl3YUc5dVpVbHVjSFYwSWl3aVpXNWhZbXhsVkdWc1pXMWxkSEo1SWl3aWNtVmpiMmR1YVhwbGNpSXNJbk53WldWamFGSmxZMjluYm1sMGFXOXVSVzVrY0c5cGJuUkpaQ0lzSW5Od1pXVmphRk41Ym5Sb1pYTnBjMFJsY0d4dmVXMWxiblJKWkNJc0luTndaV1ZqYUZONWJuUm9aWE5wYzA5MWRIQjFkRVp2Y20xaGRDSXNJblJsZUhST2IzSnRZV3hwZW1GMGFXOXVJaXdpWTI5dWMyOXNaU0lzSW5kaGNtNGlMQ0pqY21WaGRHVlNaV052WjI1cGVtVnlJaXdpYkc5dmMyVkZkbVZ1ZEhNaUxDSlRjR1ZsWTJoSGNtRnRiV0Z5VEdsemRDSXNJbE53WldWamFGSmxZMjluYm1sMGFXOXVJaXdpWVhWa2FXOURiMjUwWlhoMElpd2lRWFZrYVc5RGIyNTBaWGgwSWl3aVkyRnVZMlZzUVd4c0lpd2ljSFZ6YUNJc0lsTndaV1ZqYUZONWJuUm9aWE5wY3lJc0luVjBkR1Z5WVc1alpTSXNJbU52Ym5SeWIyeHNaWElpTENKQlltOXlkRU52Ym5SeWIyeHNaWElpTENKemFXZHVZV3dpTENKaFltOXlkQ0lzSW1KcGJtUWlMQ0p5WlhOMWJIUWlMQ0prYVhOd1lYUmphRVYyWlc1MElpd2lSWFpsYm5RaUxDSmhkV1JwYjFOMGNtVmhiU0lzSW1admNtMWhkQ0lzSW5OMGNtVmhiVkpsWVdSbGNpSXNJbTFsYzNOaFoyVWlMQ0pqWVhSamFDSXNJbVZ5Y205eUlpd2lkR1Z6ZENJc0lrVjJaVzUwVkdGeVoyVjBVMmhwYlNJc0luTndaV1ZqYUZONWJuUm9aWE5wY3lJc0lsTndaV1ZqYUZONWJuUm9aWE5wYzFWMGRHVnlZVzVqWlNJc0lsTndaV1ZqYUZONWJuUm9aWE5wYzBGMVpHbHZVM1J5WldGdFZYUjBaWEpoYm1ObElsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCUlVFN08wRkJRMEU3TzBGQlEwRTdPMEZCUlVFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCV0VFN1FVRmhaU3gzUWtGUldqdEJRVUZCTERoQ1FWQkVRU3hYUVU5RE8wRkJRVUVzVFVGUVJFRXNWMEZQUXl4cFEwRlFZVU1zYVVSQlFWbERMREJDUVVGYUxFVkJUMkk3UVVGQlFTeE5RVTVFUXl4bFFVMURMRkZCVGtSQkxHVkJUVU03UVVGQlFTeE5RVXhFUXl4VlFVdERMRkZCVEVSQkxGVkJTME03UVVGQlFTeE5RVXBFUXl3eVFrRkpReXhSUVVwRVFTd3lRa0ZKUXp0QlFVRkJMRTFCU0VSRExESkNRVWRETEZGQlNFUkJMREpDUVVkRE8wRkJRVUVzVFVGR1JFTXNNa0pCUlVNc1VVRkdSRUVzTWtKQlJVTTdRVUZCUVN4TlFVUkVReXhwUWtGRFF5eFJRVVJFUVN4cFFrRkRRenM3UVVGRFJDeE5RVUZKU0N3eVFrRkJTaXhGUVVGcFF6dEJRVU12UWtrc1NVRkJRVUVzVDBGQlR5eERRVUZEUXl4SlFVRlNMRU5CUTBVc1owaEJSRVk3UVVGSFJEczdRVUZGUkN4TlFVRkpTaXd5UWtGQlNpeEZRVUZwUXp0QlFVTXZRa2NzU1VGQlFVRXNUMEZCVHl4RFFVRkRReXhKUVVGU0xFTkJRMFVzSzBkQlJFWTdRVUZIUkRzN1FVRkZSQ3hOUVVGSlNDd3lRa0ZCU2l4RlFVRnBRenRCUVVNdlFrVXNTVUZCUVVFc1QwRkJUeXhEUVVGRFF5eEpRVUZTTEVOQlEwVXNLMGRCUkVZN1FVRkhSRHM3UVVGRlJDeFRRVUZQTEZsQlFVMDdRVUZCUVN4blEwRkRjME1zYVVWQlFUaERPMEZCUXpkR1ZpeE5RVUZCUVN4WFFVRlhMRVZCUVZoQkxGZEJSRFpHTzBGQlJUZEdWeXhOUVVGQlFTeG5Ra0ZCWjBJc1JVRkJSVHRCUVVGQkxHVkJRVTFRTEZWQlFVNDdRVUZCUVN4UFFVWXlSVHRCUVVjM1JrUXNUVUZCUVVFc1pVRkJaU3hGUVVGbVFTeGxRVWcyUmp0QlFVazNSbE1zVFVGQlFVRXNWMEZCVnl4RlFVRkZMRWxCU21kR08wRkJTemRHU2l4TlFVRkJRU3hwUWtGQmFVSXNSVUZCYWtKQk8wRkJURFpHTEV0QlFUbERMRU5CUkhSRE8wRkJRVUVzVVVGRFNFc3NhVUpCUkVjc2VVSkJRMGhCTEdsQ1FVUkhPMEZCUVVFc1VVRkRaMEpETEdsQ1FVUm9RaXg1UWtGRFowSkJMR2xDUVVSb1FqczdRVUZUV0N4UlFVRk5ReXhaUVVGWkxFZEJRVWNzU1VGQlNVTXNXVUZCU2l4RlFVRnlRanM3UVVGVVZ5d3lRa0ZYYVVJc1owTkJXR3BDTzBGQlFVRXNVVUZYU0VNc1UwRllSeXh2UWtGWFNFRXNVMEZZUnp0QlFVRkJMRkZCVjFGRExFbEJXRklzYjBKQlYxRkJMRWxCV0ZJN08wRkJRVUVzVVVGaFRFTXNaVUZpU3p0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUVzYVVOQlkwRTdRVUZEVUVZc1ZVRkJRVUVzVTBGQlV6dEJRVU5XTzBGQmFFSlJPMEZCUVVFN1FVRkJRU3h2UTBGclFrYzdRVUZEVml4cFFrRkJUeXhGUVVGUU8wRkJRMFE3UVVGd1FsRTdRVUZCUVR0QlFVRkJMRGhDUVhOQ1NFY3NVMEYwUWtjc1JVRnpRbEU3UVVGQlFTeHpRa0ZEU1VZc1NVRkJTU3hEUVVGRExGbEJRVTA3UVVGRE5VSXNaMEpCUVUxSExGVkJRVlVzUjBGQlJ5eEpRVUZKUXl4M1FrRkJTaXhGUVVGdVFqdEJRVVEwUWl4blFrRkZjRUpETEUxQlJtOUNMRWRCUlZSR0xGVkJSbE1zUTBGRmNFSkZMRTFCUm05Q08wRkJTVFZDTEcxQ1FVRlBPMEZCUTB4RExHTkJRVUZCTEV0QlFVc3NSVUZCUlVnc1ZVRkJWU3hEUVVGRFJ5eExRVUZZTEVOQlFXbENReXhKUVVGcVFpeERRVUZ6UWtvc1ZVRkJkRUlzUTBGRVJqdEJRVVZNU3l4alFVRkJRU3hOUVVGTkxFVkJRVVU3UVVGQlFUdEJRVUZCTEhkRFFVRkRPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZEVUU0c2QwSkJRVUZCTEZOQlFWTXNRMEZCUTA4c1lVRkJWaXhEUVVGM1FpeEpRVUZKUXl4TFFVRktMRU5CUVZVc1QwRkJWaXhEUVVGNFFqdEJRVVJQT3p0QlFVRkJMRFpDUVVsRVVpeFRRVUZUTEVOQlFVTlRMRmRCU2xRN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRXNaMFJCU3poQ1ZDeFRRVUZUTEVOQlFVTlRMRmRCVEhoRExFVkJTMHRETEUxQlRFd3NlVUpCUzB0QkxFMUJURXdzUlVGTFlVTXNXVUZNWWl4NVFrRkxZVUVzV1VGTVlqdEJRVUZCTzBGQlFVRXNLMEpCVDBjc01FTkJRVFJDYUVJc1dVRkJOVUlzUlVGQk1FTmxMRTFCUVRGRExFVkJRV3RFUXl4WlFVRnNSQ3hGUVVGblJUdEJRVUZGVWl3d1FrRkJRVUVzVFVGQlRTeEZRVUZPUVR0QlFVRkdMSGxDUVVGb1JTeERRVkJJT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRXNLMEpCVTBjc05rSkJRV1ZTTEZsQlFXWXNRMEZVU0RzN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQkxEaENRV0ZFTEZsQlFVMXBRaXhQUVVGT0xFdEJRV3RDTEZOQlltcENPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVUZCTEhsRVFXTkpXaXhUUVVGVExFTkJRVU5QTEdGQlFWWXNRMEZCZDBJc01rTkJRWGhDTEVOQlpFbzdPMEZCUVVFN1FVRnJRbEJRTEhkQ1FVRkJRU3hUUVVGVExFTkJRVU5QTEdGQlFWWXNRMEZCZDBJc1NVRkJTVU1zUzBGQlNpeERRVUZWTEV0QlFWWXNRMEZCZUVJN08wRkJiRUpQTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxHVkJRVVE3UVVGR1NDeGhRVUZRTzBGQmRVSkVMRmRCTTBKelFpeERRVVJTTzBGQlFVRXNZMEZEVUVZc1RVRkVUeXhUUVVOUVFTeE5RVVJQTEVWQk9FSm1PenM3UVVGRFFVRXNWVUZCUVVFc1RVRkJUU3hEUVVGRFR5eExRVUZRTEVOQlFXRXNWVUZCUVVNc1MwRkJTeXhGUVVGSk8wRkJRM0JDTEdkQ1FVRkpMRU5CUVVNc1kwRkJZME1zU1VGQlpDeERRVUZ0UWtRc1MwRkJTeXhEUVVGRFJpeFBRVUY2UWl4RFFVRk1MRVZCUVhkRE8wRkJRM1JETEc5Q1FVRk5SU3hMUVVGT08wRkJRMFE3UVVGRFJpeFhRVXBFTzBGQlMwUTdRVUV4UkZFN1FVRkJRVHRCUVVGQkxFMUJZVzFDUlN4M1FrRmlia0k3TzBGQk5rUllMQ3REUVVGeFFtcENMR1ZCUVhKQ0xFVkJRWE5ETEdWQlFYUkRPMEZCUlVFc1YwRkJUenRCUVVOTVRpeE5RVUZCUVN4cFFrRkJhVUlzUlVGQmFrSkJMR2xDUVVSTE8wRkJSVXhETEUxQlFVRkJMR2xDUVVGcFFpeEZRVUZxUWtFc2FVSkJSa3M3UVVGSFRIVkNMRTFCUVVGQkxHVkJRV1VzUlVGQlJTeEpRVUZKYkVJc1pVRkJTaXhGUVVoYU8wRkJTVXh0UWl4TlFVRkJRU3gzUWtGQmQwSXNSVUZCUlVNN1FVRktja0lzUzBGQlVEdEJRVTFFTEVkQmNrVkVPMEZCYzBWRUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9nWlhOc2FXNTBJR05zWVhOekxXMWxkR2h2WkhNdGRYTmxMWFJvYVhNNklGdGNJbVZ5Y205eVhDSXNJSHNnWENKbGVHTmxjSFJOWlhSb2IyUnpYQ0k2SUZ0Y0ltTmhibU5sYkZ3aUxDQmNJbWRsZEZadmFXTmxjMXdpTENCY0luTndaV0ZyWENKZElIMWRJQ292WEhKY2JseHlYRzVwYlhCdmNuUWdleUJCZFdScGIwTnZibVpwWnlCOUlHWnliMjBnSjIxcFkzSnZjMjltZEMxamIyZHVhWFJwZG1WelpYSjJhV05sY3kxemNHVmxZMmd0YzJSckp6dGNjbHh1YVcxd2IzSjBJSHNnWTNKbFlYUmxVM0JsWldOb1VtVmpiMmR1YVhScGIyNVFiMjU1Wm1sc2JFWnliMjFTWldOdloyNXBlbVZ5SUgwZ1puSnZiU0FuZDJWaUxYTndaV1ZqYUMxamIyZHVhWFJwZG1VdGMyVnlkbWxqWlhNdmJHbGlMMU53WldWamFGTmxjblpwWTJWekwxTndaV1ZqYUZSdlZHVjRkQ2M3WEhKY2JtbHRjRzl5ZENCQlltOXlkRU52Ym5SeWIyeHNaWElnWm5KdmJTQW5ZV0p2Y25RdFkyOXVkSEp2Ykd4bGNpYzdYSEpjYmx4eVhHNXBiWEJ2Y25RZ1kzSmxZWFJsUlhKeWIzSkZkbVZ1ZENCbWNtOXRJQ2N1TDJOeVpXRjBaVVZ5Y205eVJYWmxiblFuTzF4eVhHNXBiWEJ2Y25RZ1kzSmxZWFJsVkdGemExRjFaWFZsSUdaeWIyMGdKeTR2WTNKbFlYUmxWR0Z6YTFGMVpYVmxKenRjY2x4dWFXMXdiM0owSUVWMlpXNTBWR0Z5WjJWMFUyaHBiU3dnZXlCa1pXWnBibVZGZG1WdWRFRjBkSEpwWW5WMFpTQjlJR1p5YjIwZ0p5NHZaWGgwWlhKdVlXd3ZaWFpsYm5RdGRHRnlaMlYwTFhOb2FXMG5PMXh5WEc1cGJYQnZjblFnY0d4aGVVTnZaMjVwZEdsMlpWTmxjblpwWTJWelUzUnlaV0Z0SUdaeWIyMGdKeTR2Y0d4aGVVTnZaMjVwZEdsMlpWTmxjblpwWTJWelUzUnlaV0Z0Snp0Y2NseHVhVzF3YjNKMElIQnNZWGxYYUdsMFpVNXZhWE5sSUdaeWIyMGdKeTR2Y0d4aGVWZG9hWFJsVG05cGMyVW5PMXh5WEc1cGJYQnZjblFnVTNCbFpXTm9VM2x1ZEdobGMybHpRWFZrYVc5VGRISmxZVzFWZEhSbGNtRnVZMlVnWm5KdmJTQW5MaTlUY0dWbFkyaFRlVzUwYUdWemFYTkJkV1JwYjFOMGNtVmhiVlYwZEdWeVlXNWpaU2M3WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpaDdYSEpjYmlBZ1lYVmthVzlEYjI1bWFXY2dQU0JCZFdScGIwTnZibVpwWnk1bWNtOXRSR1ZtWVhWc2RFMXBZM0p2Y0dodmJtVkpibkIxZENncExGeHlYRzRnSUdWdVlXSnNaVlJsYkdWdFpYUnllU3hjY2x4dUlDQnlaV052WjI1cGVtVnlMRnh5WEc0Z0lITndaV1ZqYUZKbFkyOW5ibWwwYVc5dVJXNWtjRzlwYm5SSlpDeGNjbHh1SUNCemNHVmxZMmhUZVc1MGFHVnphWE5FWlhCc2IzbHRaVzUwU1dRc1hISmNiaUFnYzNCbFpXTm9VM2x1ZEdobGMybHpUM1YwY0hWMFJtOXliV0YwTEZ4eVhHNGdJSFJsZUhST2IzSnRZV3hwZW1GMGFXOXVYSEpjYm4wcElIdGNjbHh1SUNCcFppQW9jM0JsWldOb1VtVmpiMmR1YVhScGIyNUZibVJ3YjJsdWRFbGtLU0I3WEhKY2JpQWdJQ0JqYjI1emIyeGxMbmRoY200b1hISmNiaUFnSUNBZ0lDZGliM1JtY21GdFpYZHZjbXN0WkdseVpXTjBiR2x1WlhOd1pXVmphRG9nUTNWemRHOXRJRk53WldWamFDQnBjeUJqZFhKeVpXNTBiSGtnYm05MElITjFjSEJ2Y25SbFpDd2dhV2R1YjNKcGJtY2djM0JsWldOb1VtVmpiMmR1YVhScGIyNUZibVJ3YjJsdWRFbGtMaWRjY2x4dUlDQWdJQ2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JwWmlBb2MzQmxaV05vVTNsdWRHaGxjMmx6UkdWd2JHOTViV1Z1ZEVsa0tTQjdYSEpjYmlBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWEhKY2JpQWdJQ0FnSUNkaWIzUm1jbUZ0WlhkdmNtc3RaR2x5WldOMGJHbHVaWE53WldWamFEb2dRM1Z6ZEc5dElGWnZhV05sSUdseklHTjFjbkpsYm5Sc2VTQnViM1FnYzNWd2NHOXlkR1ZrTENCcFoyNXZjbWx1WnlCemNHVmxZMmhUZVc1MGFHVnphWE5FWlhCc2IzbHRaVzUwU1dRdUoxeHlYRzRnSUNBZ0tUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHbG1JQ2h6Y0dWbFkyaFRlVzUwYUdWemFYTlBkWFJ3ZFhSR2IzSnRZWFFwSUh0Y2NseHVJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNjbHh1SUNBZ0lDQWdKMkp2ZEdaeVlXMWxkMjl5YXkxa2FYSmxZM1JzYVc1bGMzQmxaV05vT2lCRGRYTjBiMjBnVm05cFkyVWdhWE1nWTNWeWNtVnVkR3g1SUc1dmRDQnpkWEJ3YjNKMFpXUXNJR2xuYm05eWFXNW5JSE53WldWamFGTjViblJvWlhOcGMwOTFkSEIxZEVadmNtMWhkQzRuWEhKY2JpQWdJQ0FwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnY21WMGRYSnVJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lHTnZibk4wSUhzZ1UzQmxaV05vUjNKaGJXMWhja3hwYzNRc0lGTndaV1ZqYUZKbFkyOW5ibWwwYVc5dUlIMGdQU0JqY21WaGRHVlRjR1ZsWTJoU1pXTnZaMjVwZEdsdmJsQnZibmxtYVd4c1JuSnZiVkpsWTI5bmJtbDZaWElvZTF4eVhHNGdJQ0FnSUNCaGRXUnBiME52Ym1acFp5eGNjbHh1SUNBZ0lDQWdZM0psWVhSbFVtVmpiMmR1YVhwbGNqb2dLQ2tnUFQ0Z2NtVmpiMmR1YVhwbGNpeGNjbHh1SUNBZ0lDQWdaVzVoWW14bFZHVnNaVzFsZEhKNUxGeHlYRzRnSUNBZ0lDQnNiMjl6WlVWMlpXNTBjem9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdkR1Y0ZEU1dmNtMWhiR2w2WVhScGIyNWNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJR0YxWkdsdlEyOXVkR1Y0ZENBOUlHNWxkeUJCZFdScGIwTnZiblJsZUhRb0tUdGNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQjdJR05oYm1ObGJFRnNiQ3dnY0hWemFDQjlJRDBnWTNKbFlYUmxWR0Z6YTFGMVpYVmxLQ2s3WEhKY2JseHlYRzRnSUNBZ1kyeGhjM01nVTNCbFpXTm9VM2x1ZEdobGMybHpJR1Y0ZEdWdVpITWdSWFpsYm5SVVlYSm5aWFJUYUdsdElIdGNjbHh1SUNBZ0lDQWdZMkZ1WTJWc0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdOaGJtTmxiRUZzYkNncE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCblpYUldiMmxqWlhNb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRkTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0J6Y0dWaGF5aDFkSFJsY21GdVkyVXBJSHRjY2x4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUhKbGMzVnNkQ0I5SUQwZ2NIVnphQ2dvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JqYjI1MGNtOXNiR1Z5SUQwZ2JtVjNJRUZpYjNKMFEyOXVkSEp2Ykd4bGNpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCemFXZHVZV3dnZlNBOUlHTnZiblJ5YjJ4c1pYSTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lXSnZjblE2SUdOdmJuUnliMnhzWlhJdVlXSnZjblF1WW1sdVpDaGpiMjUwY205c2JHVnlLU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4ME9pQW9ZWE41Ym1NZ0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhWMGRHVnlZVzVqWlM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRmRtVnVkQ2duYzNSaGNuUW5LU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kWFIwWlhKaGJtTmxMbUYxWkdsdlUzUnlaV0Z0S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIc2dabTl5YldGMExDQnpkSEpsWVcxU1pXRmtaWElnZlNBOUlIVjBkR1Z5WVc1alpTNWhkV1JwYjFOMGNtVmhiVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0YzWVdsMElIQnNZWGxEYjJkdWFYUnBkbVZUWlhKMmFXTmxjMU4wY21WaGJTaGhkV1JwYjBOdmJuUmxlSFFzSUdadmNtMWhkQ3dnYzNSeVpXRnRVbVZoWkdWeUxDQjdJSE5wWjI1aGJDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjNZV2wwSUhCc1lYbFhhR2wwWlU1dmFYTmxLR0YxWkdsdlEyOXVkR1Y0ZENrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVWcGRHaGxjaUJrYVhOd1lYUmphQ0JjSW1WdVpGd2lJRzl5SUZ3aVpYSnliM0pjSWlCbGRtVnVkQ3dnWW5WMElHNXZkQ0JpYjNSb1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhKeWIzSXViV1Z6YzJGblpTQWhQVDBnSjJGaWIzSjBaV1FuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjFkSFJsY21GdVkyVXVaR2x6Y0dGMFkyaEZkbVZ1ZENoamNtVmhkR1ZGY25KdmNrVjJaVzUwS0dWeWNtOXlLU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IxZEhSbGNtRnVZMlV1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUlhabGJuUW9KMlZ1WkNjcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa29LVnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1EyRjBZMmhwYm1jZ2RHaGxJR1Z5Y205eUlIUnZJSEJ5WlhabGJuUWdkVzVqWVhWbmFIUWdjSEp2YldselpTQmxjbkp2Y2lCa2RXVWdkRzhnWTJGdVkyVnNiR0YwYVc5dUxseHlYRzRnSUNBZ0lDQWdJSEpsYzNWc2RDNWpZWFJqYUNobGNuSnZjaUE5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lTOWVZMkZ1WTJWc2JHVmtMMmt1ZEdWemRDaGxjbkp2Y2k1dFpYTnpZV2RsS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJsY25KdmNqdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHUmxabWx1WlVWMlpXNTBRWFIwY21saWRYUmxLRk53WldWamFGTjViblJvWlhOcGN5d2dKM1p2YVdObGMyTm9ZVzVuWldRbktUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdlMXh5WEc0Z0lDQWdJQ0JUY0dWbFkyaEhjbUZ0YldGeVRHbHpkQ3hjY2x4dUlDQWdJQ0FnVTNCbFpXTm9VbVZqYjJkdWFYUnBiMjRzWEhKY2JpQWdJQ0FnSUhOd1pXVmphRk41Ym5Sb1pYTnBjem9nYm1WM0lGTndaV1ZqYUZONWJuUm9aWE5wY3lncExGeHlYRzRnSUNBZ0lDQlRjR1ZsWTJoVGVXNTBhR1Z6YVhOVmRIUmxjbUZ1WTJVNklGTndaV1ZqYUZONWJuUm9aWE5wYzBGMVpHbHZVM1J5WldGdFZYUjBaWEpoYm1ObFhISmNiaUFnSUNCOU8xeHlYRzRnSUgwN1hISmNibjFjY2x4dUlsMTkiLCIvLyBUaGlzIGlzIGFkb3B0ZWQgZnJvbSBldmVudC10YXJnZXQtc2hpbUA1LjAuMSB1bmRlciBNSVQgTGljZW5zZS5cbi8vIFRoZSBzb3VyY2UgY29kZSBpcyBjb3BpZWQgaGVyZSBiZWNhdXNlIHRoZSBvcmlnaW5hbCBwYWNrYWdlIGRvIG5vdCBzdXBwb3J0IEVTNSBicm93c2Vycy5cblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxuLyoqXHJcbiAqIEBhdXRob3IgVG9ydSBOYWdhc2hpbWEgPGh0dHBzOi8vZ2l0aHViLmNvbS9teXN0aWNhdGVhPlxyXG4gKiBAY29weXJpZ2h0IDIwMTUgVG9ydSBOYWdhc2hpbWEuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIFNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBkaXJlY3RvcnkgZm9yIGZ1bGwgbGljZW5zZS5cclxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX3R5cGVvZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLyoqXHJcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFByaXZhdGVEYXRhXHJcbiAqIEBwcm9wZXJ0eSB7RXZlbnRUYXJnZXR9IGV2ZW50VGFyZ2V0IFRoZSBldmVudCB0YXJnZXQuXHJcbiAqIEBwcm9wZXJ0eSB7e3R5cGU6c3RyaW5nfX0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdC5cclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50UGhhc2UgVGhlIGN1cnJlbnQgZXZlbnQgcGhhc2UuXHJcbiAqIEBwcm9wZXJ0eSB7RXZlbnRUYXJnZXR8bnVsbH0gY3VycmVudFRhcmdldCBUaGUgY3VycmVudCBldmVudCB0YXJnZXQuXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY2FuY2VsZWQgVGhlIGZsYWcgdG8gcHJldmVudCBkZWZhdWx0LlxyXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHN0b3BwZWQgVGhlIGZsYWcgdG8gc3RvcCBwcm9wYWdhdGlvbi5cclxuICogQHByb3BlcnR5IHtib29sZWFufSBpbW1lZGlhdGVTdG9wcGVkIFRoZSBmbGFnIHRvIHN0b3AgcHJvcGFnYXRpb24gaW1tZWRpYXRlbHkuXHJcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb258bnVsbH0gcGFzc2l2ZUxpc3RlbmVyIFRoZSBsaXN0ZW5lciBpZiB0aGUgY3VycmVudCBsaXN0ZW5lciBpcyBwYXNzaXZlLiBPdGhlcndpc2UgdGhpcyBpcyBudWxsLlxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gdGltZVN0YW1wIFRoZSB1bml4IHRpbWUuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xuXG4vKipcclxuICogUHJpdmF0ZSBkYXRhIGZvciBldmVudCB3cmFwcGVycy5cclxuICogQHR5cGUge1dlYWtNYXA8RXZlbnQsIFByaXZhdGVEYXRhPn1cclxuICogQHByaXZhdGVcclxuICovXG5cbnZhciBwcml2YXRlRGF0YSA9IG5ldyBXZWFrTWFwKCk7XG4vKipcclxuICogQ2FjaGUgZm9yIHdyYXBwZXIgY2xhc3Nlcy5cclxuICogQHR5cGUge1dlYWtNYXA8T2JqZWN0LCBGdW5jdGlvbj59XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xuXG52YXIgd3JhcHBlcnMgPSBuZXcgV2Vha01hcCgpO1xuLyoqXHJcbiAqIEdldCBwcml2YXRlIGRhdGEuXHJcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBldmVudCBvYmplY3QgdG8gZ2V0IHByaXZhdGUgZGF0YS5cclxuICogQHJldHVybnMge1ByaXZhdGVEYXRhfSBUaGUgcHJpdmF0ZSBkYXRhIG9mIHRoZSBldmVudC5cclxuICogQHByaXZhdGVcclxuICovXG5cbmZ1bmN0aW9uIHBkKGV2ZW50KSB7XG4gIHZhciByZXR2ID0gcHJpdmF0ZURhdGEuZ2V0KGV2ZW50KTtcbiAgY29uc29sZS5hc3NlcnQocmV0diAhPSBudWxsLCBcIid0aGlzJyBpcyBleHBlY3RlZCBhbiBFdmVudCBvYmplY3QsIGJ1dCBnb3RcIiwgZXZlbnQpO1xuICByZXR1cm4gcmV0djtcbn1cbi8qKlxyXG4gKiBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI3NldC10aGUtY2FuY2VsZWQtZmxhZ1xyXG4gKiBAcGFyYW0gZGF0YSB7UHJpdmF0ZURhdGF9IHByaXZhdGUgZGF0YS5cclxuICovXG5cblxuZnVuY3Rpb24gc2V0Q2FuY2VsRmxhZyhkYXRhKSB7XG4gIGlmIChkYXRhLnBhc3NpdmVMaXN0ZW5lciAhPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIHByZXZlbnREZWZhdWx0IGluc2lkZSBwYXNzaXZlIGV2ZW50IGxpc3RlbmVyIGludm9jYXRpb24uJywgZGF0YS5wYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghZGF0YS5ldmVudC5jYW5jZWxhYmxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZGF0YS5jYW5jZWxlZCA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBkYXRhLmV2ZW50LnByZXZlbnREZWZhdWx0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZGF0YS5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59XG4vKipcclxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS1ldmVudFxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cblxuLyoqXHJcbiAqIFRoZSBldmVudCB3cmFwcGVyLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZXZlbnRUYXJnZXQgVGhlIGV2ZW50IHRhcmdldCBvZiB0aGlzIGRpc3BhdGNoaW5nLlxyXG4gKiBAcGFyYW0ge0V2ZW50fHt0eXBlOnN0cmluZ319IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCB0byB3cmFwLlxyXG4gKi9cblxuXG5mdW5jdGlvbiBFdmVudChldmVudFRhcmdldCwgZXZlbnQpIHtcbiAgcHJpdmF0ZURhdGEuc2V0KHRoaXMsIHtcbiAgICBldmVudFRhcmdldDogZXZlbnRUYXJnZXQsXG4gICAgZXZlbnQ6IGV2ZW50LFxuICAgIGV2ZW50UGhhc2U6IDIsXG4gICAgY3VycmVudFRhcmdldDogZXZlbnRUYXJnZXQsXG4gICAgY2FuY2VsZWQ6IGZhbHNlLFxuICAgIHN0b3BwZWQ6IGZhbHNlLFxuICAgIGltbWVkaWF0ZVN0b3BwZWQ6IGZhbHNlLFxuICAgIHBhc3NpdmVMaXN0ZW5lcjogbnVsbCxcbiAgICB0aW1lU3RhbXA6IGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpXG4gIH0pOyAvLyBodHRwczovL2hleWNhbS5naXRodWIuaW8vd2ViaWRsLyNVbmZvcmdlYWJsZVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaXNUcnVzdGVkJywge1xuICAgIHZhbHVlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0pOyAvLyBEZWZpbmUgYWNjZXNzb3JzXG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICBpZiAoIShrZXkgaW4gdGhpcykpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIGRlZmluZVJlZGlyZWN0RGVzY3JpcHRvcihrZXkpKTtcbiAgICB9XG4gIH1cbn0gLy8gU2hvdWxkIGJlIGVudW1lcmFibGUsIGJ1dCBjbGFzcyBtZXRob2RzIGFyZSBub3QgZW51bWVyYWJsZS5cblxuXG5FdmVudC5wcm90b3R5cGUgPSB7XG4gIC8qKlxyXG4gICAqIFRoZSB0eXBlIG9mIHRoaXMgZXZlbnQuXHJcbiAgICogQHR5cGUge3N0cmluZ31cclxuICAgKi9cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIHBkKHRoaXMpLmV2ZW50LnR5cGU7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogVGhlIHRhcmdldCBvZiB0aGlzIGV2ZW50LlxyXG4gICAqIEB0eXBlIHtFdmVudFRhcmdldH1cclxuICAgKi9cbiAgZ2V0IHRhcmdldCgpIHtcbiAgICByZXR1cm4gcGQodGhpcykuZXZlbnRUYXJnZXQ7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogVGhlIHRhcmdldCBvZiB0aGlzIGV2ZW50LlxyXG4gICAqIEB0eXBlIHtFdmVudFRhcmdldH1cclxuICAgKi9cbiAgZ2V0IGN1cnJlbnRUYXJnZXQoKSB7XG4gICAgcmV0dXJuIHBkKHRoaXMpLmN1cnJlbnRUYXJnZXQ7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogQHJldHVybnMge0V2ZW50VGFyZ2V0W119IFRoZSBjb21wb3NlZCBwYXRoIG9mIHRoaXMgZXZlbnQuXHJcbiAgICovXG4gIGNvbXBvc2VkUGF0aDogZnVuY3Rpb24gY29tcG9zZWRQYXRoKCkge1xuICAgIHZhciBjdXJyZW50VGFyZ2V0ID0gcGQodGhpcykuY3VycmVudFRhcmdldDtcblxuICAgIGlmIChjdXJyZW50VGFyZ2V0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2N1cnJlbnRUYXJnZXRdO1xuICB9LFxuXG4gIC8qKlxyXG4gICAqIENvbnN0YW50IG9mIE5PTkUuXHJcbiAgICogQHR5cGUge251bWJlcn1cclxuICAgKi9cbiAgZ2V0IE5PTkUoKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogQ29uc3RhbnQgb2YgQ0FQVFVSSU5HX1BIQVNFLlxyXG4gICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICovXG4gIGdldCBDQVBUVVJJTkdfUEhBU0UoKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogQ29uc3RhbnQgb2YgQVRfVEFSR0VULlxyXG4gICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICovXG4gIGdldCBBVF9UQVJHRVQoKSB7XG4gICAgcmV0dXJuIDI7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogQ29uc3RhbnQgb2YgQlVCQkxJTkdfUEhBU0UuXHJcbiAgICogQHR5cGUge251bWJlcn1cclxuICAgKi9cbiAgZ2V0IEJVQkJMSU5HX1BIQVNFKCkge1xuICAgIHJldHVybiAzO1xuICB9LFxuXG4gIC8qKlxyXG4gICAqIFRoZSB0YXJnZXQgb2YgdGhpcyBldmVudC5cclxuICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAqL1xuICBnZXQgZXZlbnRQaGFzZSgpIHtcbiAgICByZXR1cm4gcGQodGhpcykuZXZlbnRQaGFzZTtcbiAgfSxcblxuICAvKipcclxuICAgKiBTdG9wIGV2ZW50IGJ1YmJsaW5nLlxyXG4gICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAqL1xuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbigpIHtcbiAgICB2YXIgZGF0YSA9IHBkKHRoaXMpO1xuICAgIGRhdGEuc3RvcHBlZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRhdGEuZXZlbnQuc3RvcFByb3BhZ2F0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkYXRhLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfSxcblxuICAvKipcclxuICAgKiBTdG9wIGV2ZW50IGJ1YmJsaW5nLlxyXG4gICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAqL1xuICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIHtcbiAgICB2YXIgZGF0YSA9IHBkKHRoaXMpO1xuICAgIGRhdGEuc3RvcHBlZCA9IHRydWU7XG4gICAgZGF0YS5pbW1lZGlhdGVTdG9wcGVkID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgZGF0YS5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRhdGEuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxyXG4gICAqIFRoZSBmbGFnIHRvIGJlIGJ1YmJsaW5nLlxyXG4gICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAqL1xuICBnZXQgYnViYmxlcygpIHtcbiAgICByZXR1cm4gQm9vbGVhbihwZCh0aGlzKS5ldmVudC5idWJibGVzKTtcbiAgfSxcblxuICAvKipcclxuICAgKiBUaGUgZmxhZyB0byBiZSBjYW5jZWxhYmxlLlxyXG4gICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAqL1xuICBnZXQgY2FuY2VsYWJsZSgpIHtcbiAgICByZXR1cm4gQm9vbGVhbihwZCh0aGlzKS5ldmVudC5jYW5jZWxhYmxlKTtcbiAgfSxcblxuICAvKipcclxuICAgKiBDYW5jZWwgdGhpcyBldmVudC5cclxuICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgKi9cbiAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KCkge1xuICAgIHNldENhbmNlbEZsYWcocGQodGhpcykpO1xuICB9LFxuXG4gIC8qKlxyXG4gICAqIFRoZSBmbGFnIHRvIGluZGljYXRlIGNhbmNlbGxhdGlvbiBzdGF0ZS5cclxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgKi9cbiAgZ2V0IGRlZmF1bHRQcmV2ZW50ZWQoKSB7XG4gICAgcmV0dXJuIHBkKHRoaXMpLmNhbmNlbGVkO1xuICB9LFxuXG4gIC8qKlxyXG4gICAqIFRoZSBmbGFnIHRvIGJlIGNvbXBvc2VkLlxyXG4gICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAqL1xuICBnZXQgY29tcG9zZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4ocGQodGhpcykuZXZlbnQuY29tcG9zZWQpO1xuICB9LFxuXG4gIC8qKlxyXG4gICAqIFRoZSB1bml4IHRpbWUgb2YgdGhpcyBldmVudC5cclxuICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAqL1xuICBnZXQgdGltZVN0YW1wKCkge1xuICAgIHJldHVybiBwZCh0aGlzKS50aW1lU3RhbXA7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogVGhlIHRhcmdldCBvZiB0aGlzIGV2ZW50LlxyXG4gICAqIEB0eXBlIHtFdmVudFRhcmdldH1cclxuICAgKiBAZGVwcmVjYXRlZFxyXG4gICAqL1xuICBnZXQgc3JjRWxlbWVudCgpIHtcbiAgICByZXR1cm4gcGQodGhpcykuZXZlbnRUYXJnZXQ7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogVGhlIGZsYWcgdG8gc3RvcCBldmVudCBidWJibGluZy5cclxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgKiBAZGVwcmVjYXRlZFxyXG4gICAqL1xuICBnZXQgY2FuY2VsQnViYmxlKCkge1xuICAgIHJldHVybiBwZCh0aGlzKS5zdG9wcGVkO1xuICB9LFxuXG4gIHNldCBjYW5jZWxCdWJibGUodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSBwZCh0aGlzKTtcbiAgICBkYXRhLnN0b3BwZWQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkYXRhLmV2ZW50LmNhbmNlbEJ1YmJsZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBkYXRhLmV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxyXG4gICAqIFRoZSBmbGFnIHRvIGluZGljYXRlIGNhbmNlbGxhdGlvbiBzdGF0ZS5cclxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgKiBAZGVwcmVjYXRlZFxyXG4gICAqL1xuICBnZXQgcmV0dXJuVmFsdWUoKSB7XG4gICAgcmV0dXJuICFwZCh0aGlzKS5jYW5jZWxlZDtcbiAgfSxcblxuICBzZXQgcmV0dXJuVmFsdWUodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBzZXRDYW5jZWxGbGFnKHBkKHRoaXMpKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGlzIGV2ZW50IG9iamVjdC4gQnV0IGRvIG5vdGhpbmcgdW5kZXIgZXZlbnQgZGlzcGF0Y2hpbmcuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUuXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBbYnViYmxlcz1mYWxzZV0gVGhlIGZsYWcgdG8gYmUgcG9zc2libGUgdG8gYnViYmxlIHVwLlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NhbmNlbGFibGU9ZmFsc2VdIFRoZSBmbGFnIHRvIGJlIHBvc3NpYmxlIHRvIGNhbmNlbC5cclxuICAgKiBAZGVwcmVjYXRlZFxyXG4gICAqL1xuICBpbml0RXZlbnQ6IGZ1bmN0aW9uIGluaXRFdmVudCgpIHsvLyBEbyBub3RoaW5nLlxuICB9XG59OyAvLyBgY29uc3RydWN0b3JgIGlzIG5vdCBlbnVtZXJhYmxlLlxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnQucHJvdG90eXBlLCAnY29uc3RydWN0b3InLCB7XG4gIHZhbHVlOiBFdmVudCxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB3cml0YWJsZTogdHJ1ZVxufSk7IC8vIEVuc3VyZSBgZXZlbnQgaW5zdGFuY2VvZiB3aW5kb3cuRXZlbnRgIGlzIGB0cnVlYC5cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuRXZlbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihFdmVudC5wcm90b3R5cGUsIHdpbmRvdy5FdmVudC5wcm90b3R5cGUpOyAvLyBNYWtlIGFzc29jaWF0aW9uIGZvciB3cmFwcGVycy5cblxuICB3cmFwcGVycy5zZXQod2luZG93LkV2ZW50LnByb3RvdHlwZSwgRXZlbnQpO1xufVxuLyoqXHJcbiAqIEdldCB0aGUgcHJvcGVydHkgZGVzY3JpcHRvciB0byByZWRpcmVjdCBhIGdpdmVuIHByb3BlcnR5LlxyXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFByb3BlcnR5IG5hbWUgdG8gZGVmaW5lIHByb3BlcnR5IGRlc2NyaXB0b3IuXHJcbiAqIEByZXR1cm5zIHtQcm9wZXJ0eURlc2NyaXB0b3J9IFRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIHRvIHJlZGlyZWN0IHRoZSBwcm9wZXJ0eS5cclxuICogQHByaXZhdGVcclxuICovXG5cblxuZnVuY3Rpb24gZGVmaW5lUmVkaXJlY3REZXNjcmlwdG9yKGtleSkge1xuICByZXR1cm4ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHBkKHRoaXMpLmV2ZW50W2tleV07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgcGQodGhpcykuZXZlbnRba2V5XSA9IHZhbHVlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfTtcbn1cbi8qKlxyXG4gKiBHZXQgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgdG8gY2FsbCBhIGdpdmVuIG1ldGhvZCBwcm9wZXJ0eS5cclxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBQcm9wZXJ0eSBuYW1lIHRvIGRlZmluZSBwcm9wZXJ0eSBkZXNjcmlwdG9yLlxyXG4gKiBAcmV0dXJucyB7UHJvcGVydHlEZXNjcmlwdG9yfSBUaGUgcHJvcGVydHkgZGVzY3JpcHRvciB0byBjYWxsIHRoZSBtZXRob2QgcHJvcGVydHkuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGRlZmluZUNhbGxEZXNjcmlwdG9yKGtleSkge1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgIHZhciBldmVudCA9IHBkKHRoaXMpLmV2ZW50O1xuICAgICAgcmV0dXJuIGV2ZW50W2tleV0uYXBwbHkoZXZlbnQsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9O1xufVxuLyoqXHJcbiAqIERlZmluZSBuZXcgd3JhcHBlciBjbGFzcy5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gQmFzZUV2ZW50IFRoZSBiYXNlIHdyYXBwZXIgY2xhc3MuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgcHJvdG90eXBlIG9mIHRoZSBvcmlnaW5hbCBldmVudC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBUaGUgZGVmaW5lZCB3cmFwcGVyIGNsYXNzLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cblxuXG5mdW5jdGlvbiBkZWZpbmVXcmFwcGVyKEJhc2VFdmVudCwgcHJvdG8pIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm90byk7XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJhc2VFdmVudDtcbiAgfVxuICAvKiogQ3VzdG9tRXZlbnQgKi9cblxuXG4gIGZ1bmN0aW9uIEN1c3RvbUV2ZW50KGV2ZW50VGFyZ2V0LCBldmVudCkge1xuICAgIEJhc2VFdmVudC5jYWxsKHRoaXMsIGV2ZW50VGFyZ2V0LCBldmVudCk7XG4gIH1cblxuICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJhc2VFdmVudC5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IEN1c3RvbUV2ZW50LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9XG4gIH0pOyAvLyBEZWZpbmUgYWNjZXNzb3JzLlxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgaWYgKCEoa2V5IGluIEJhc2VFdmVudC5wcm90b3R5cGUpKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIGtleSk7XG4gICAgICB2YXIgaXNGdW5jID0gdHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ3VzdG9tRXZlbnQucHJvdG90eXBlLCBrZXksIGlzRnVuYyA/IGRlZmluZUNhbGxEZXNjcmlwdG9yKGtleSkgOiBkZWZpbmVSZWRpcmVjdERlc2NyaXB0b3Ioa2V5KSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEN1c3RvbUV2ZW50O1xufVxuLyoqXHJcbiAqIEdldCB0aGUgd3JhcHBlciBjbGFzcyBvZiBhIGdpdmVuIHByb3RvdHlwZS5cclxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBwcm90b3R5cGUgb2YgdGhlIG9yaWdpbmFsIGV2ZW50IHRvIGdldCBpdHMgd3JhcHBlci5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBUaGUgd3JhcHBlciBjbGFzcy5cclxuICogQHByaXZhdGVcclxuICovXG5cblxuZnVuY3Rpb24gZ2V0V3JhcHBlcihwcm90bykge1xuICBpZiAocHJvdG8gPT0gbnVsbCB8fCBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIHJldHVybiBFdmVudDtcbiAgfVxuXG4gIHZhciB3cmFwcGVyID0gd3JhcHBlcnMuZ2V0KHByb3RvKTtcblxuICBpZiAod3JhcHBlciA9PSBudWxsKSB7XG4gICAgd3JhcHBlciA9IGRlZmluZVdyYXBwZXIoZ2V0V3JhcHBlcihPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pKSwgcHJvdG8pO1xuICAgIHdyYXBwZXJzLnNldChwcm90bywgd3JhcHBlcik7XG4gIH1cblxuICByZXR1cm4gd3JhcHBlcjtcbn1cbi8qKlxyXG4gKiBXcmFwIGEgZ2l2ZW4gZXZlbnQgdG8gbWFuYWdlbWVudCBhIGRpc3BhdGNoaW5nLlxyXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBldmVudFRhcmdldCBUaGUgZXZlbnQgdGFyZ2V0IG9mIHRoaXMgZGlzcGF0Y2hpbmcuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBUaGUgZXZlbnQgdG8gd3JhcC5cclxuICogQHJldHVybnMge0V2ZW50fSBUaGUgd3JhcHBlciBpbnN0YW5jZS5cclxuICogQHByaXZhdGVcclxuICovXG5cblxuZnVuY3Rpb24gd3JhcEV2ZW50KGV2ZW50VGFyZ2V0LCBldmVudCkge1xuICB2YXIgV3JhcHBlciA9IGdldFdyYXBwZXIoT2JqZWN0LmdldFByb3RvdHlwZU9mKGV2ZW50KSk7XG4gIHJldHVybiBuZXcgV3JhcHBlcihldmVudFRhcmdldCwgZXZlbnQpO1xufVxuLyoqXHJcbiAqIEdldCB0aGUgaW1tZWRpYXRlU3RvcHBlZCBmbGFnIG9mIGEgZ2l2ZW4gZXZlbnQuXHJcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBldmVudCB0byBnZXQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUaGUgZmxhZyB0byBzdG9wIHByb3BhZ2F0aW9uIGltbWVkaWF0ZWx5LlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cblxuXG5mdW5jdGlvbiBpc1N0b3BwZWQoZXZlbnQpIHtcbiAgcmV0dXJuIHBkKGV2ZW50KS5pbW1lZGlhdGVTdG9wcGVkO1xufVxuLyoqXHJcbiAqIFNldCB0aGUgY3VycmVudCBldmVudCBwaGFzZSBvZiBhIGdpdmVuIGV2ZW50LlxyXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZXZlbnQgdG8gc2V0IGN1cnJlbnQgdGFyZ2V0LlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZXZlbnRQaGFzZSBOZXcgZXZlbnQgcGhhc2UuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRFdmVudFBoYXNlKGV2ZW50LCBldmVudFBoYXNlKSB7XG4gIHBkKGV2ZW50KS5ldmVudFBoYXNlID0gZXZlbnRQaGFzZTtcbn1cbi8qKlxyXG4gKiBTZXQgdGhlIGN1cnJlbnQgdGFyZ2V0IG9mIGEgZ2l2ZW4gZXZlbnQuXHJcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBldmVudCB0byBzZXQgY3VycmVudCB0YXJnZXQuXHJcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8bnVsbH0gY3VycmVudFRhcmdldCBOZXcgY3VycmVudCB0YXJnZXQuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRDdXJyZW50VGFyZ2V0KGV2ZW50LCBjdXJyZW50VGFyZ2V0KSB7XG4gIHBkKGV2ZW50KS5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldDtcbn1cbi8qKlxyXG4gKiBTZXQgYSBwYXNzaXZlIGxpc3RlbmVyIG9mIGEgZ2l2ZW4gZXZlbnQuXHJcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBldmVudCB0byBzZXQgY3VycmVudCB0YXJnZXQuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb258bnVsbH0gcGFzc2l2ZUxpc3RlbmVyIE5ldyBwYXNzaXZlIGxpc3RlbmVyLlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICogQHByaXZhdGVcclxuICovXG5cblxuZnVuY3Rpb24gc2V0UGFzc2l2ZUxpc3RlbmVyKGV2ZW50LCBwYXNzaXZlTGlzdGVuZXIpIHtcbiAgcGQoZXZlbnQpLnBhc3NpdmVMaXN0ZW5lciA9IHBhc3NpdmVMaXN0ZW5lcjtcbn1cbi8qKlxyXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBMaXN0ZW5lck5vZGVcclxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gbGlzdGVuZXJcclxuICogQHByb3BlcnR5IHsxfDJ8M30gbGlzdGVuZXJUeXBlXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcGFzc2l2ZVxyXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IG9uY2VcclxuICogQHByb3BlcnR5IHtMaXN0ZW5lck5vZGV8bnVsbH0gbmV4dFxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cblxuLyoqXHJcbiAqIEB0eXBlIHtXZWFrTWFwPG9iamVjdCwgTWFwPHN0cmluZywgTGlzdGVuZXJOb2RlPj59XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xuXG5cbnZhciBsaXN0ZW5lcnNNYXAgPSBuZXcgV2Vha01hcCgpOyAvLyBMaXN0ZW5lciB0eXBlc1xuXG52YXIgQ0FQVFVSRSA9IDE7XG52YXIgQlVCQkxFID0gMjtcbnZhciBBVFRSSUJVVEUgPSAzO1xuLyoqXHJcbiAqIENoZWNrIHdoZXRoZXIgYSBnaXZlbiB2YWx1ZSBpcyBhbiBvYmplY3Qgb3Igbm90LlxyXG4gKiBAcGFyYW0ge2FueX0geCBUaGUgdmFsdWUgdG8gY2hlY2suXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdC5cclxuICovXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHgpIHtcbiAgcmV0dXJuIHggIT09IG51bGwgJiYgKDAsIF90eXBlb2YyLmRlZmF1bHQpKHgpID09PSAnb2JqZWN0JzsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG59XG4vKipcclxuICogR2V0IGxpc3RlbmVycy5cclxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZXZlbnRUYXJnZXQgVGhlIGV2ZW50IHRhcmdldCB0byBnZXQuXHJcbiAqIEByZXR1cm5zIHtNYXA8c3RyaW5nLCBMaXN0ZW5lck5vZGU+fSBUaGUgbGlzdGVuZXJzLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRMaXN0ZW5lcnMoZXZlbnRUYXJnZXQpIHtcbiAgdmFyIGxpc3RlbmVycyA9IGxpc3RlbmVyc01hcC5nZXQoZXZlbnRUYXJnZXQpO1xuXG4gIGlmIChsaXN0ZW5lcnMgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCIndGhpcycgaXMgZXhwZWN0ZWQgYW4gRXZlbnRUYXJnZXQgb2JqZWN0LCBidXQgZ290IGFub3RoZXIgdmFsdWUuXCIpO1xuICB9XG5cbiAgcmV0dXJuIGxpc3RlbmVycztcbn1cbi8qKlxyXG4gKiBHZXQgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIHRoZSBldmVudCBhdHRyaWJ1dGUgb2YgYSBnaXZlbiBldmVudC5cclxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgZXZlbnQgbmFtZSB0byBnZXQgcHJvcGVydHkgZGVzY3JpcHRvci5cclxuICogQHJldHVybnMge1Byb3BlcnR5RGVzY3JpcHRvcn0gVGhlIHByb3BlcnR5IGRlc2NyaXB0b3IuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGRlZmluZUV2ZW50QXR0cmlidXRlRGVzY3JpcHRvcihldmVudE5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBnZXRMaXN0ZW5lcnModGhpcyk7XG4gICAgICB2YXIgbm9kZSA9IGxpc3RlbmVycy5nZXQoZXZlbnROYW1lKTtcblxuICAgICAgd2hpbGUgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgICBpZiAobm9kZS5saXN0ZW5lclR5cGUgPT09IEFUVFJJQlVURSkge1xuICAgICAgICAgIHJldHVybiBub2RlLmxpc3RlbmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QobGlzdGVuZXIpKSB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgfVxuXG4gICAgICB2YXIgbGlzdGVuZXJzID0gZ2V0TGlzdGVuZXJzKHRoaXMpOyAvLyBUcmF2ZXJzZSB0byB0aGUgdGFpbCB3aGlsZSByZW1vdmluZyBvbGQgdmFsdWUuXG5cbiAgICAgIHZhciBwcmV2ID0gbnVsbDtcbiAgICAgIHZhciBub2RlID0gbGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xuXG4gICAgICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChub2RlLmxpc3RlbmVyVHlwZSA9PT0gQVRUUklCVVRFKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIG9sZCB2YWx1ZS5cbiAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5uZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbm9kZS5uZXh0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShldmVudE5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2ID0gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICB9IC8vIEFkZCBuZXcgdmFsdWUuXG5cblxuICAgICAgaWYgKGxpc3RlbmVyICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBuZXdOb2RlID0ge1xuICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICBsaXN0ZW5lclR5cGU6IEFUVFJJQlVURSxcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICBvbmNlOiBmYWxzZSxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbmV3Tm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldi5uZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfTtcbn1cbi8qKlxyXG4gKiBEZWZpbmUgYW4gZXZlbnQgYXR0cmlidXRlIChlLmcuIGBldmVudFRhcmdldC5vbmNsaWNrYCkuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFRhcmdldFByb3RvdHlwZSBUaGUgZXZlbnQgdGFyZ2V0IHByb3RvdHlwZSB0byBkZWZpbmUgYW4gZXZlbnQgYXR0cmJpdGUuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIGV2ZW50IG5hbWUgdG8gZGVmaW5lLlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5cblxuZnVuY3Rpb24gZGVmaW5lRXZlbnRBdHRyaWJ1dGUoZXZlbnRUYXJnZXRQcm90b3R5cGUsIGV2ZW50TmFtZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnRUYXJnZXRQcm90b3R5cGUsIFwib25cIi5jb25jYXQoZXZlbnROYW1lKSwgZGVmaW5lRXZlbnRBdHRyaWJ1dGVEZXNjcmlwdG9yKGV2ZW50TmFtZSkpO1xufVxuLyoqXHJcbiAqIERlZmluZSBhIGN1c3RvbSBFdmVudFRhcmdldCB3aXRoIGV2ZW50IGF0dHJpYnV0ZXMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nW119IGV2ZW50TmFtZXMgRXZlbnQgbmFtZXMgZm9yIGV2ZW50IGF0dHJpYnV0ZXMuXHJcbiAqIEByZXR1cm5zIHtFdmVudFRhcmdldH0gVGhlIGN1c3RvbSBFdmVudFRhcmdldC5cclxuICogQHByaXZhdGVcclxuICovXG5cblxuZnVuY3Rpb24gZGVmaW5lQ3VzdG9tRXZlbnRUYXJnZXQoZXZlbnROYW1lcykge1xuICAvKiogQ3VzdG9tRXZlbnRUYXJnZXQgKi9cbiAgZnVuY3Rpb24gQ3VzdG9tRXZlbnRUYXJnZXQoKSB7XG4gICAgRXZlbnRUYXJnZXQuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIEN1c3RvbUV2ZW50VGFyZ2V0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXZlbnRUYXJnZXQucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBDdXN0b21FdmVudFRhcmdldCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50TmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICBkZWZpbmVFdmVudEF0dHJpYnV0ZShDdXN0b21FdmVudFRhcmdldC5wcm90b3R5cGUsIGV2ZW50TmFtZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIEN1c3RvbUV2ZW50VGFyZ2V0O1xufVxuLyoqXHJcbiAqIEV2ZW50VGFyZ2V0LlxyXG4gKlxyXG4gKiAtIFRoaXMgaXMgY29uc3RydWN0b3IgaWYgbm8gYXJndW1lbnRzLlxyXG4gKiAtIFRoaXMgaXMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgQ3VzdG9tRXZlbnRUYXJnZXQgY29uc3RydWN0b3IgaWYgdGhlcmUgYXJlIGFyZ3VtZW50cy5cclxuICpcclxuICogRm9yIGV4YW1wbGU6XHJcbiAqXHJcbiAqICAgICBjbGFzcyBBIGV4dGVuZHMgRXZlbnRUYXJnZXQge31cclxuICogICAgIGNsYXNzIEIgZXh0ZW5kcyBFdmVudFRhcmdldChcIm1lc3NhZ2VcIikge31cclxuICogICAgIGNsYXNzIEMgZXh0ZW5kcyBFdmVudFRhcmdldChcIm1lc3NhZ2VcIiwgXCJlcnJvclwiKSB7fVxyXG4gKiAgICAgY2xhc3MgRCBleHRlbmRzIEV2ZW50VGFyZ2V0KFtcIm1lc3NhZ2VcIiwgXCJlcnJvclwiXSkge31cclxuICovXG5cblxuZnVuY3Rpb24gRXZlbnRUYXJnZXQoKSB7XG4gIC8qZXNsaW50LWRpc2FibGUgY29uc2lzdGVudC1yZXR1cm4gKi9cbiAgaWYgKHRoaXMgaW5zdGFuY2VvZiBFdmVudFRhcmdldCkge1xuICAgIGxpc3RlbmVyc01hcC5zZXQodGhpcywgbmV3IE1hcCgpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSkpIHtcbiAgICByZXR1cm4gZGVmaW5lQ3VzdG9tRXZlbnRUYXJnZXQoYXJndW1lbnRzWzBdKTtcbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgIHZhciB0eXBlcyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICB0eXBlc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmaW5lQ3VzdG9tRXZlbnRUYXJnZXQodHlwZXMpO1xuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7XG4gIC8qZXNsaW50LWVuYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xufSAvLyBTaG91bGQgYmUgZW51bWVyYWJsZSwgYnV0IGNsYXNzIG1ldGhvZHMgYXJlIG5vdCBlbnVtZXJhYmxlLlxuXG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZSA9IHtcbiAgLyoqXHJcbiAgICogQWRkIGEgZ2l2ZW4gbGlzdGVuZXIgdG8gdGhpcyBldmVudCB0YXJnZXQuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgZXZlbnQgbmFtZSB0byBhZGQuXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHRvIGFkZC5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW58e2NhcHR1cmU/OmJvb2xlYW4scGFzc2l2ZT86Ym9vbGVhbixvbmNlPzpib29sZWFufX0gW29wdGlvbnNdIFRoZSBvcHRpb25zIGZvciB0aGlzIGxpc3RlbmVyLlxyXG4gICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAobGlzdGVuZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KGxpc3RlbmVyKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIidsaXN0ZW5lcicgc2hvdWxkIGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0LlwiKTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gZ2V0TGlzdGVuZXJzKHRoaXMpO1xuICAgIHZhciBvcHRpb25zSXNPYmogPSBpc09iamVjdChvcHRpb25zKTtcbiAgICB2YXIgY2FwdHVyZSA9IG9wdGlvbnNJc09iaiA/IEJvb2xlYW4ob3B0aW9ucy5jYXB0dXJlKSA6IEJvb2xlYW4ob3B0aW9ucyk7XG4gICAgdmFyIGxpc3RlbmVyVHlwZSA9IGNhcHR1cmUgPyBDQVBUVVJFIDogQlVCQkxFO1xuICAgIHZhciBuZXdOb2RlID0ge1xuICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgbGlzdGVuZXJUeXBlOiBsaXN0ZW5lclR5cGUsXG4gICAgICBwYXNzaXZlOiBvcHRpb25zSXNPYmogJiYgQm9vbGVhbihvcHRpb25zLnBhc3NpdmUpLFxuICAgICAgb25jZTogb3B0aW9uc0lzT2JqICYmIEJvb2xlYW4ob3B0aW9ucy5vbmNlKSxcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9OyAvLyBTZXQgaXQgYXMgdGhlIGZpcnN0IG5vZGUgaWYgdGhlIGZpcnN0IG5vZGUgaXMgbnVsbC5cblxuICAgIHZhciBub2RlID0gbGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xuXG4gICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbGlzdGVuZXJzLnNldChldmVudE5hbWUsIG5ld05vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVHJhdmVyc2UgdG8gdGhlIHRhaWwgd2hpbGUgY2hlY2tpbmcgZHVwbGljYXRpb24uLlxuXG5cbiAgICB2YXIgcHJldiA9IG51bGw7XG5cbiAgICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XG4gICAgICBpZiAobm9kZS5saXN0ZW5lciA9PT0gbGlzdGVuZXIgJiYgbm9kZS5saXN0ZW5lclR5cGUgPT09IGxpc3RlbmVyVHlwZSkge1xuICAgICAgICAvLyBTaG91bGQgaWdub3JlIGR1cGxpY2F0aW9uLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHByZXYgPSBub2RlO1xuICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICB9IC8vIEFkZCBpdC5cblxuXG4gICAgcHJldi5uZXh0ID0gbmV3Tm9kZTtcbiAgfSxcblxuICAvKipcclxuICAgKiBSZW1vdmUgYSBnaXZlbiBsaXN0ZW5lciBmcm9tIHRoaXMgZXZlbnQgdGFyZ2V0LlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIGV2ZW50IG5hbWUgdG8gcmVtb3ZlLlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byByZW1vdmUuXHJcbiAgICogQHBhcmFtIHtib29sZWFufHtjYXB0dXJlPzpib29sZWFuLHBhc3NpdmU/OmJvb2xlYW4sb25jZT86Ym9vbGVhbn19IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBmb3IgdGhpcyBsaXN0ZW5lci5cclxuICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgKi9cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG4gICAgaWYgKGxpc3RlbmVyID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gZ2V0TGlzdGVuZXJzKHRoaXMpO1xuICAgIHZhciBjYXB0dXJlID0gaXNPYmplY3Qob3B0aW9ucykgPyBCb29sZWFuKG9wdGlvbnMuY2FwdHVyZSkgOiBCb29sZWFuKG9wdGlvbnMpO1xuICAgIHZhciBsaXN0ZW5lclR5cGUgPSBjYXB0dXJlID8gQ0FQVFVSRSA6IEJVQkJMRTtcbiAgICB2YXIgcHJldiA9IG51bGw7XG4gICAgdmFyIG5vZGUgPSBsaXN0ZW5lcnMuZ2V0KGV2ZW50TmFtZSk7XG5cbiAgICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XG4gICAgICBpZiAobm9kZS5saXN0ZW5lciA9PT0gbGlzdGVuZXIgJiYgbm9kZS5saXN0ZW5lclR5cGUgPT09IGxpc3RlbmVyVHlwZSkge1xuICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xuICAgICAgICAgIHByZXYubmV4dCA9IG5vZGUubmV4dDtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm5leHQgIT09IG51bGwpIHtcbiAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbm9kZS5uZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGV2ZW50TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHByZXYgPSBub2RlO1xuICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogRGlzcGF0Y2ggYSBnaXZlbiBldmVudC5cclxuICAgKiBAcGFyYW0ge0V2ZW50fHt0eXBlOnN0cmluZ319IGV2ZW50IFRoZSBldmVudCB0byBkaXNwYXRjaC5cclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYGZhbHNlYCBpZiBjYW5jZWxlZC5cclxuICAgKi9cbiAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChldmVudCkge1xuICAgIGlmIChldmVudCA9PSBudWxsIHx8IHR5cGVvZiBldmVudC50eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJldmVudC50eXBlXCIgc2hvdWxkIGJlIGEgc3RyaW5nLicpO1xuICAgIH0gLy8gSWYgbGlzdGVuZXJzIGFyZW4ndCByZWdpc3RlcmVkLCB0ZXJtaW5hdGUuXG5cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBnZXRMaXN0ZW5lcnModGhpcyk7XG4gICAgdmFyIGV2ZW50TmFtZSA9IGV2ZW50LnR5cGU7XG4gICAgdmFyIG5vZGUgPSBsaXN0ZW5lcnMuZ2V0KGV2ZW50TmFtZSk7XG5cbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIFNpbmNlIHdlIGNhbm5vdCByZXdyaXRlIHNldmVyYWwgcHJvcGVydGllcywgc28gd3JhcCBvYmplY3QuXG5cblxuICAgIHZhciB3cmFwcGVkRXZlbnQgPSB3cmFwRXZlbnQodGhpcywgZXZlbnQpOyAvLyBUaGlzIGRvZXNuJ3QgcHJvY2VzcyBjYXB0dXJpbmcgcGhhc2UgYW5kIGJ1YmJsaW5nIHBoYXNlLlxuICAgIC8vIFRoaXMgaXNuJ3QgcGFydGljaXBhdGluZyBpbiBhIHRyZWUuXG5cbiAgICB2YXIgcHJldiA9IG51bGw7XG5cbiAgICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XG4gICAgICAvLyBSZW1vdmUgdGhpcyBsaXN0ZW5lciBpZiBpdCdzIG9uY2VcbiAgICAgIGlmIChub2RlLm9uY2UpIHtcbiAgICAgICAgaWYgKHByZXYgIT09IG51bGwpIHtcbiAgICAgICAgICBwcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5uZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgbGlzdGVuZXJzLnNldChldmVudE5hbWUsIG5vZGUubmV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShldmVudE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2ID0gbm9kZTtcbiAgICAgIH0gLy8gQ2FsbCB0aGlzIGxpc3RlbmVyXG5cblxuICAgICAgc2V0UGFzc2l2ZUxpc3RlbmVyKHdyYXBwZWRFdmVudCwgbm9kZS5wYXNzaXZlID8gbm9kZS5saXN0ZW5lciA6IG51bGwpO1xuXG4gICAgICBpZiAodHlwZW9mIG5vZGUubGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBub2RlLmxpc3RlbmVyLmNhbGwodGhpcywgd3JhcHBlZEV2ZW50KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLmxpc3RlbmVyVHlwZSAhPT0gQVRUUklCVVRFICYmIHR5cGVvZiBub2RlLmxpc3RlbmVyLmhhbmRsZUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG5vZGUubGlzdGVuZXIuaGFuZGxlRXZlbnQod3JhcHBlZEV2ZW50KTtcbiAgICAgIH0gLy8gQnJlYWsgaWYgYGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbmAgd2FzIGNhbGxlZC5cblxuXG4gICAgICBpZiAoaXNTdG9wcGVkKHdyYXBwZWRFdmVudCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgfVxuXG4gICAgc2V0UGFzc2l2ZUxpc3RlbmVyKHdyYXBwZWRFdmVudCwgbnVsbCk7XG4gICAgc2V0RXZlbnRQaGFzZSh3cmFwcGVkRXZlbnQsIDApO1xuICAgIHNldEN1cnJlbnRUYXJnZXQod3JhcHBlZEV2ZW50LCBudWxsKTtcbiAgICByZXR1cm4gIXdyYXBwZWRFdmVudC5kZWZhdWx0UHJldmVudGVkO1xuICB9XG59OyAvLyBgY29uc3RydWN0b3JgIGlzIG5vdCBlbnVtZXJhYmxlLlxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRUYXJnZXQucHJvdG90eXBlLCAnY29uc3RydWN0b3InLCB7XG4gIHZhbHVlOiBFdmVudFRhcmdldCxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB3cml0YWJsZTogdHJ1ZVxufSk7IC8vIEVuc3VyZSBgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuRXZlbnRUYXJnZXRgIGlzIGB0cnVlYC5cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuRXZlbnRUYXJnZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihFdmVudFRhcmdldC5wcm90b3R5cGUsIHdpbmRvdy5FdmVudFRhcmdldC5wcm90b3R5cGUpO1xufVxuXG5leHBvcnRzLmRlZmluZUV2ZW50QXR0cmlidXRlID0gZGVmaW5lRXZlbnRBdHRyaWJ1dGU7XG5leHBvcnRzLkV2ZW50VGFyZ2V0ID0gRXZlbnRUYXJnZXQ7XG5leHBvcnRzLmRlZmF1bHQgPSBFdmVudFRhcmdldDtcbm1vZHVsZS5leHBvcnRzID0gRXZlbnRUYXJnZXQ7XG5tb2R1bGUuZXhwb3J0cy5FdmVudFRhcmdldCA9IG1vZHVsZS5leHBvcnRzWydkZWZhdWx0J10gPSBFdmVudFRhcmdldDtcbm1vZHVsZS5leHBvcnRzLmRlZmluZUV2ZW50QXR0cmlidXRlID0gZGVmaW5lRXZlbnRBdHRyaWJ1dGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTlsZUhSbGNtNWhiQzlsZG1WdWRDMTBZWEpuWlhRdGMyaHBiUzVxY3lKZExDSnVZVzFsY3lJNld5SlBZbXBsWTNRaUxDSmtaV1pwYm1WUWNtOXdaWEowZVNJc0ltVjRjRzl5ZEhNaUxDSjJZV3gxWlNJc0luQnlhWFpoZEdWRVlYUmhJaXdpVjJWaGEwMWhjQ0lzSW5keVlYQndaWEp6SWl3aWNHUWlMQ0psZG1WdWRDSXNJbkpsZEhZaUxDSm5aWFFpTENKamIyNXpiMnhsSWl3aVlYTnpaWEowSWl3aWMyVjBRMkZ1WTJWc1JteGhaeUlzSW1SaGRHRWlMQ0p3WVhOemFYWmxUR2x6ZEdWdVpYSWlMQ0psY25KdmNpSXNJbU5oYm1ObGJHRmliR1VpTENKallXNWpaV3hsWkNJc0luQnlaWFpsYm5SRVpXWmhkV3gwSWl3aVJYWmxiblFpTENKbGRtVnVkRlJoY21kbGRDSXNJbk5sZENJc0ltVjJaVzUwVUdoaGMyVWlMQ0pqZFhKeVpXNTBWR0Z5WjJWMElpd2ljM1J2Y0hCbFpDSXNJbWx0YldWa2FXRjBaVk4wYjNCd1pXUWlMQ0owYVcxbFUzUmhiWEFpTENKRVlYUmxJaXdpYm05M0lpd2laVzUxYldWeVlXSnNaU0lzSW10bGVYTWlMQ0pwSWl3aWJHVnVaM1JvSWl3aWEyVjVJaXdpWkdWbWFXNWxVbVZrYVhKbFkzUkVaWE5qY21sd2RHOXlJaXdpY0hKdmRHOTBlWEJsSWl3aWRIbHdaU0lzSW5SaGNtZGxkQ0lzSW1OdmJYQnZjMlZrVUdGMGFDSXNJazVQVGtVaUxDSkRRVkJVVlZKSlRrZGZVRWhCVTBVaUxDSkJWRjlVUVZKSFJWUWlMQ0pDVlVKQ1RFbE9SMTlRU0VGVFJTSXNJbk4wYjNCUWNtOXdZV2RoZEdsdmJpSXNJbk4wYjNCSmJXMWxaR2xoZEdWUWNtOXdZV2RoZEdsdmJpSXNJbUoxWW1Kc1pYTWlMQ0pDYjI5c1pXRnVJaXdpWkdWbVlYVnNkRkJ5WlhabGJuUmxaQ0lzSW1OdmJYQnZjMlZrSWl3aWMzSmpSV3hsYldWdWRDSXNJbU5oYm1ObGJFSjFZbUpzWlNJc0luSmxkSFZ5YmxaaGJIVmxJaXdpYVc1cGRFVjJaVzUwSWl3aVkyOXVabWxuZFhKaFlteGxJaXdpZDNKcGRHRmliR1VpTENKM2FXNWtiM2NpTENKelpYUlFjbTkwYjNSNWNHVlBaaUlzSW1SbFptbHVaVU5oYkd4RVpYTmpjbWx3ZEc5eUlpd2lZWEJ3YkhraUxDSmhjbWQxYldWdWRITWlMQ0prWldacGJtVlhjbUZ3Y0dWeUlpd2lRbUZ6WlVWMlpXNTBJaXdpY0hKdmRHOGlMQ0pEZFhOMGIyMUZkbVZ1ZENJc0ltTmhiR3dpTENKamNtVmhkR1VpTENKamIyNXpkSEoxWTNSdmNpSXNJbVJsYzJOeWFYQjBiM0lpTENKblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lpTENKcGMwWjFibU1pTENKblpYUlhjbUZ3Y0dWeUlpd2lkM0poY0hCbGNpSXNJbWRsZEZCeWIzUnZkSGx3WlU5bUlpd2lkM0poY0VWMlpXNTBJaXdpVjNKaGNIQmxjaUlzSW1selUzUnZjSEJsWkNJc0luTmxkRVYyWlc1MFVHaGhjMlVpTENKelpYUkRkWEp5Wlc1MFZHRnlaMlYwSWl3aWMyVjBVR0Z6YzJsMlpVeHBjM1JsYm1WeUlpd2liR2x6ZEdWdVpYSnpUV0Z3SWl3aVEwRlFWRlZTUlNJc0lrSlZRa0pNUlNJc0lrRlVWRkpKUWxWVVJTSXNJbWx6VDJKcVpXTjBJaXdpZUNJc0ltZGxkRXhwYzNSbGJtVnljeUlzSW14cGMzUmxibVZ5Y3lJc0lsUjVjR1ZGY25KdmNpSXNJbVJsWm1sdVpVVjJaVzUwUVhSMGNtbGlkWFJsUkdWelkzSnBjSFJ2Y2lJc0ltVjJaVzUwVG1GdFpTSXNJbTV2WkdVaUxDSnNhWE4wWlc1bGNsUjVjR1VpTENKc2FYTjBaVzVsY2lJc0ltNWxlSFFpTENKd2NtVjJJaXdpWkdWc1pYUmxJaXdpYm1WM1RtOWtaU0lzSW5CaGMzTnBkbVVpTENKdmJtTmxJaXdpWkdWbWFXNWxSWFpsYm5SQmRIUnlhV0oxZEdVaUxDSmxkbVZ1ZEZSaGNtZGxkRkJ5YjNSdmRIbHdaU0lzSW1SbFptbHVaVU4xYzNSdmJVVjJaVzUwVkdGeVoyVjBJaXdpWlhabGJuUk9ZVzFsY3lJc0lrTjFjM1J2YlVWMlpXNTBWR0Z5WjJWMElpd2lSWFpsYm5SVVlYSm5aWFFpTENKTllYQWlMQ0pCY25KaGVTSXNJbWx6UVhKeVlYa2lMQ0owZVhCbGN5SXNJbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0p2Y0hScGIyNXpJaXdpYjNCMGFXOXVjMGx6VDJKcUlpd2lZMkZ3ZEhWeVpTSXNJblZ1WkdWbWFXNWxaQ0lzSW5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJaUxDSmthWE53WVhSamFFVjJaVzUwSWl3aWQzSmhjSEJsWkVWMlpXNTBJaXdpWlhKeUlpd2lhR0Z1Wkd4bFJYWmxiblFpTENKa1pXWmhkV3gwSWl3aWJXOWtkV3hsSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCT3pzN096dEJRVXRCT3pzN096czdRVUZGUVVFc1RVRkJUU3hEUVVGRFF5eGpRVUZRTEVOQlFYTkNReXhQUVVGMFFpeEZRVUVyUWl4WlFVRXZRaXhGUVVFMlF6dEJRVUZGUXl4RlFVRkJRU3hMUVVGTExFVkJRVVU3UVVGQlZDeERRVUUzUXp0QlFVVkJPenM3T3pzN096czdPenM3T3p0QlFXTkJPenM3T3pzN1FVRkxRU3hKUVVGTlF5eFhRVUZYTEVkQlFVY3NTVUZCU1VNc1QwRkJTaXhGUVVGd1FqdEJRVVZCT3pzN096czdRVUZMUVN4SlFVRk5ReXhSUVVGUkxFZEJRVWNzU1VGQlNVUXNUMEZCU2l4RlFVRnFRanRCUVVWQk96czdPenM3TzBGQlRVRXNVMEZCVTBVc1JVRkJWQ3hEUVVGWlF5eExRVUZhTEVWQlFXMUNPMEZCUTJwQ0xFMUJRVTFETEVsQlFVa3NSMEZCUjB3c1YwRkJWeXhEUVVGRFRTeEhRVUZhTEVOQlFXZENSaXhMUVVGb1FpeERRVUZpTzBGQlEwRkhMRVZCUVVGQkxFOUJRVThzUTBGQlEwTXNUVUZCVWl4RFFVRmxTQ3hKUVVGSkxFbEJRVWtzU1VGQmRrSXNSVUZCTmtJc05rTkJRVGRDTEVWQlFUUkZSQ3hMUVVFMVJUdEJRVU5CTEZOQlFVOURMRWxCUVZBN1FVRkRSRHRCUVVWRU96czdPenM3UVVGSlFTeFRRVUZUU1N4aFFVRlVMRU5CUVhWQ1F5eEpRVUYyUWl4RlFVRTJRanRCUVVNelFpeE5RVUZKUVN4SlFVRkpMRU5CUVVORExHVkJRVXdzU1VGQmQwSXNTVUZCTlVJc1JVRkJhME03UVVGRGFFTXNVVUZCU1N4UFFVRlBTaXhQUVVGUUxFdEJRVzFDTEZkQlFXNUNMRWxCUVd0RExFOUJRVTlCTEU5QlFVOHNRMEZCUTBzc1MwRkJaaXhMUVVGNVFpeFZRVUV2UkN4RlFVRXlSVHRCUVVONlJVd3NUVUZCUVVFc1QwRkJUeXhEUVVGRFN5eExRVUZTTEVOQlFXTXNiMFZCUVdRc1JVRkJiMFpHTEVsQlFVa3NRMEZCUTBNc1pVRkJla1k3UVVGRFJEczdRVUZEUkR0QlFVTkVPenRCUVVORUxFMUJRVWtzUTBGQlEwUXNTVUZCU1N4RFFVRkRUaXhMUVVGTUxFTkJRVmRUTEZWQlFXaENMRVZCUVRSQ08wRkJRekZDTzBGQlEwUTdPMEZCUlVSSUxFVkJRVUZCTEVsQlFVa3NRMEZCUTBrc1VVRkJUQ3hIUVVGblFpeEpRVUZvUWpzN1FVRkRRU3hOUVVGSkxFOUJRVTlLTEVsQlFVa3NRMEZCUTA0c1MwRkJUQ3hEUVVGWFZ5eGpRVUZzUWl4TFFVRnhReXhWUVVGNlF5eEZRVUZ4UkR0QlFVTnVSRXdzU1VGQlFVRXNTVUZCU1N4RFFVRkRUaXhMUVVGTUxFTkJRVmRYTEdOQlFWZzdRVUZEUkR0QlFVTkdPMEZCUlVRN096czdPMEZCU1VFN096czdPenM3TzBGQlRVRXNVMEZCVTBNc1MwRkJWQ3hEUVVGbFF5eFhRVUZtTEVWQlFUUkNZaXhMUVVFMVFpeEZRVUZ0UXp0QlFVTnFRMG9zUlVGQlFVRXNWMEZCVnl4RFFVRkRhMElzUjBGQldpeERRVUZuUWl4SlFVRm9RaXhGUVVGelFqdEJRVU53UWtRc1NVRkJRVUVzVjBGQlZ5eEZRVUZZUVN4WFFVUnZRanRCUVVWd1FtSXNTVUZCUVVFc1MwRkJTeXhGUVVGTVFTeExRVVp2UWp0QlFVZHdRbVVzU1VGQlFVRXNWVUZCVlN4RlFVRkZMRU5CU0ZFN1FVRkpjRUpETEVsQlFVRkJMR0ZCUVdFc1JVRkJSVWdzVjBGS1N6dEJRVXR3UWtnc1NVRkJRVUVzVVVGQlVTeEZRVUZGTEV0QlRGVTdRVUZOY0VKUExFbEJRVUZCTEU5QlFVOHNSVUZCUlN4TFFVNVhPMEZCVDNCQ1F5eEpRVUZCUVN4blFrRkJaMElzUlVGQlJTeExRVkJGTzBGQlVYQkNXQ3hKUVVGQlFTeGxRVUZsTEVWQlFVVXNTVUZTUnp0QlFWTndRbGtzU1VGQlFVRXNVMEZCVXl4RlFVRkZia0lzUzBGQlN5eERRVUZEYlVJc1UwRkJUaXhKUVVGdFFrTXNTVUZCU1N4RFFVRkRReXhIUVVGTU8wRkJWRllzUjBGQmRFSXNSVUZFYVVNc1EwRmhha003TzBGQlEwRTNRaXhGUVVGQlFTeE5RVUZOTEVOQlFVTkRMR05CUVZBc1EwRkJjMElzU1VGQmRFSXNSVUZCTkVJc1YwRkJOVUlzUlVGQmVVTTdRVUZCUlVVc1NVRkJRVUVzUzBGQlN5eEZRVUZGTEV0QlFWUTdRVUZCWjBJeVFpeEpRVUZCUVN4VlFVRlZMRVZCUVVVN1FVRkJOVUlzUjBGQmVrTXNSVUZrYVVNc1EwRm5RbXBET3p0QlFVTkJMRTFCUVUxRExFbEJRVWtzUjBGQlJ5OUNMRTFCUVUwc1EwRkJReXRDTEVsQlFWQXNRMEZCV1haQ0xFdEJRVm9zUTBGQllqczdRVUZEUVN4UFFVRkxMRWxCUVVsM1FpeERRVUZETEVkQlFVY3NRMEZCWWl4RlFVRm5Ra0VzUTBGQlF5eEhRVUZIUkN4SlFVRkpMRU5CUVVORkxFMUJRWHBDTEVWQlFXbERMRVZCUVVWRUxFTkJRVzVETEVWQlFYTkRPMEZCUTNCRExGRkJRVTFGTEVkQlFVY3NSMEZCUjBnc1NVRkJTU3hEUVVGRFF5eERRVUZFTEVOQlFXaENPenRCUVVOQkxGRkJRVWtzUlVGQlJVVXNSMEZCUnl4SlFVRkpMRWxCUVZRc1EwRkJTaXhGUVVGdlFqdEJRVU5zUW14RExFMUJRVUZCTEUxQlFVMHNRMEZCUTBNc1kwRkJVQ3hEUVVGelFpeEpRVUYwUWl4RlFVRTBRbWxETEVkQlFUVkNMRVZCUVdsRFF5eDNRa0ZCZDBJc1EwRkJRMFFzUjBGQlJDeERRVUY2UkR0QlFVTkVPMEZCUTBZN1FVRkRSaXhETEVOQlJVUTdPenRCUVVOQlpDeExRVUZMTEVOQlFVTm5RaXhUUVVGT0xFZEJRV3RDTzBGQlEyaENPenM3TzBGQlNVRXNUVUZCU1VNc1NVRkJTaXhIUVVGWE8wRkJRMVFzVjBGQlR6bENMRVZCUVVVc1EwRkJReXhKUVVGRUxFTkJRVVlzUTBGQlUwTXNTMEZCVkN4RFFVRmxOa0lzU1VGQmRFSTdRVUZEUkN4SFFWQmxPenRCUVZOb1FqczdPenRCUVVsQkxFMUJRVWxETEUxQlFVb3NSMEZCWVR0QlFVTllMRmRCUVU4dlFpeEZRVUZGTEVOQlFVTXNTVUZCUkN4RFFVRkdMRU5CUVZOakxGZEJRV2hDTzBGQlEwUXNSMEZtWlRzN1FVRnBRbWhDT3pzN08wRkJTVUVzVFVGQlNVY3NZVUZCU2l4SFFVRnZRanRCUVVOc1FpeFhRVUZQYWtJc1JVRkJSU3hEUVVGRExFbEJRVVFzUTBGQlJpeERRVUZUYVVJc1lVRkJhRUk3UVVGRFJDeEhRWFpDWlRzN1FVRjVRbWhDT3pzN1FVRkhRV1VzUlVGQlFVRXNXVUUxUW1kQ0xEQkNRVFJDUkR0QlFVTmlMRkZCUVUxbUxHRkJRV0VzUjBGQlIycENMRVZCUVVVc1EwRkJReXhKUVVGRUxFTkJRVVlzUTBGQlUybENMR0ZCUVM5Q096dEJRVU5CTEZGQlFVbEJMR0ZCUVdFc1NVRkJTU3hKUVVGeVFpeEZRVUV5UWp0QlFVTjZRaXhoUVVGUExFVkJRVkE3UVVGRFJEczdRVUZEUkN4WFFVRlBMRU5CUVVOQkxHRkJRVVFzUTBGQlVEdEJRVU5FTEVkQmJFTmxPenRCUVc5RGFFSTdPenM3UVVGSlFTeE5RVUZKWjBJc1NVRkJTaXhIUVVGWE8wRkJRMVFzVjBGQlR5eERRVUZRTzBGQlEwUXNSMEV4UTJVN08wRkJORU5vUWpzN096dEJRVWxCTEUxQlFVbERMR1ZCUVVvc1IwRkJjMEk3UVVGRGNFSXNWMEZCVHl4RFFVRlFPMEZCUTBRc1IwRnNSR1U3TzBGQmIwUm9RanM3T3p0QlFVbEJMRTFCUVVsRExGTkJRVW9zUjBGQlowSTdRVUZEWkN4WFFVRlBMRU5CUVZBN1FVRkRSQ3hIUVRGRVpUczdRVUUwUkdoQ096czdPMEZCU1VFc1RVRkJTVU1zWTBGQlNpeEhRVUZ4UWp0QlFVTnVRaXhYUVVGUExFTkJRVkE3UVVGRFJDeEhRV3hGWlRzN1FVRnZSV2hDT3pzN08wRkJTVUVzVFVGQlNYQkNMRlZCUVVvc1IwRkJhVUk3UVVGRFppeFhRVUZQYUVJc1JVRkJSU3hEUVVGRExFbEJRVVFzUTBGQlJpeERRVUZUWjBJc1ZVRkJhRUk3UVVGRFJDeEhRVEZGWlRzN1FVRTBSV2hDT3pzN08wRkJTVUZ4UWl4RlFVRkJRU3hsUVdoR1owSXNOa0pCWjBaRk8wRkJRMmhDTEZGQlFVMDVRaXhKUVVGSkxFZEJRVWRRTEVWQlFVVXNRMEZCUXl4SlFVRkVMRU5CUVdZN1FVRkZRVThzU1VGQlFVRXNTVUZCU1N4RFFVRkRWeXhQUVVGTUxFZEJRV1VzU1VGQlpqczdRVUZEUVN4UlFVRkpMRTlCUVU5WUxFbEJRVWtzUTBGQlEwNHNTMEZCVEN4RFFVRlhiME1zWlVGQmJFSXNTMEZCYzBNc1ZVRkJNVU1zUlVGQmMwUTdRVUZEY0VRNVFpeE5RVUZCUVN4SlFVRkpMRU5CUVVOT0xFdEJRVXdzUTBGQlYyOURMR1ZCUVZnN1FVRkRSRHRCUVVOR0xFZEJka1psT3p0QlFYbEdhRUk3T3pzN1FVRkpRVU1zUlVGQlFVRXNkMEpCTjBablFpeHpRMEUyUmxjN1FVRkRla0lzVVVGQlRTOUNMRWxCUVVrc1IwRkJSMUFzUlVGQlJTeERRVUZETEVsQlFVUXNRMEZCWmp0QlFVVkJUeXhKUVVGQlFTeEpRVUZKTEVOQlFVTlhMRTlCUVV3c1IwRkJaU3hKUVVGbU8wRkJRMEZZTEVsQlFVRkJMRWxCUVVrc1EwRkJRMWtzWjBKQlFVd3NSMEZCZDBJc1NVRkJlRUk3TzBGQlEwRXNVVUZCU1N4UFFVRlBXaXhKUVVGSkxFTkJRVU5PTEV0QlFVd3NRMEZCVjNGRExIZENRVUZzUWl4TFFVRXJReXhWUVVGdVJDeEZRVUVyUkR0QlFVTTNSQzlDTEUxQlFVRkJMRWxCUVVrc1EwRkJRMDRzUzBGQlRDeERRVUZYY1VNc2QwSkJRVmc3UVVGRFJEdEJRVU5HTEVkQmNrZGxPenRCUVhWSGFFSTdPenM3UVVGSlFTeE5RVUZKUXl4UFFVRktMRWRCUVdNN1FVRkRXaXhYUVVGUFF5eFBRVUZQTEVOQlFVTjRReXhGUVVGRkxFTkJRVU1zU1VGQlJDeERRVUZHTEVOQlFWTkRMRXRCUVZRc1EwRkJaWE5ETEU5QlFXaENMRU5CUVdRN1FVRkRSQ3hIUVRkSFpUczdRVUVyUjJoQ096czdPMEZCU1VFc1RVRkJTVGRDTEZWQlFVb3NSMEZCYVVJN1FVRkRaaXhYUVVGUE9FSXNUMEZCVHl4RFFVRkRlRU1zUlVGQlJTeERRVUZETEVsQlFVUXNRMEZCUml4RFFVRlRReXhMUVVGVUxFTkJRV1ZUTEZWQlFXaENMRU5CUVdRN1FVRkRSQ3hIUVhKSVpUczdRVUYxU0doQ096czdPMEZCU1VGRkxFVkJRVUZCTEdOQk0waG5RaXcwUWtFeVNFTTdRVUZEWms0c1NVRkJRVUVzWVVGQllTeERRVUZEVGl4RlFVRkZMRU5CUVVNc1NVRkJSQ3hEUVVGSUxFTkJRV0k3UVVGRFJDeEhRVGRJWlRzN1FVRXJTR2hDT3pzN08wRkJTVUVzVFVGQlNYbERMR2RDUVVGS0xFZEJRWFZDTzBGQlEzSkNMRmRCUVU5NlF5eEZRVUZGTEVOQlFVTXNTVUZCUkN4RFFVRkdMRU5CUVZOWExGRkJRV2hDTzBGQlEwUXNSMEZ5U1dVN08wRkJkVWxvUWpzN096dEJRVWxCTEUxQlFVa3JRaXhSUVVGS0xFZEJRV1U3UVVGRFlpeFhRVUZQUml4UFFVRlBMRU5CUVVONFF5eEZRVUZGTEVOQlFVTXNTVUZCUkN4RFFVRkdMRU5CUVZORExFdEJRVlFzUTBGQlpYbERMRkZCUVdoQ0xFTkJRV1E3UVVGRFJDeEhRVGRKWlRzN1FVRXJTV2hDT3pzN08wRkJTVUVzVFVGQlNYUkNMRk5CUVVvc1IwRkJaMEk3UVVGRFpDeFhRVUZQY0VJc1JVRkJSU3hEUVVGRExFbEJRVVFzUTBGQlJpeERRVUZUYjBJc1UwRkJhRUk3UVVGRFJDeEhRWEpLWlRzN1FVRjFTbWhDT3pzN096dEJRVXRCTEUxQlFVbDFRaXhWUVVGS0xFZEJRV2xDTzBGQlEyWXNWMEZCVHpORExFVkJRVVVzUTBGQlF5eEpRVUZFTEVOQlFVWXNRMEZCVTJNc1YwRkJhRUk3UVVGRFJDeEhRVGxLWlRzN1FVRm5TMmhDT3pzN096dEJRVXRCTEUxQlFVazRRaXhaUVVGS0xFZEJRVzFDTzBGQlEycENMRmRCUVU4MVF5eEZRVUZGTEVOQlFVTXNTVUZCUkN4RFFVRkdMRU5CUVZOclFpeFBRVUZvUWp0QlFVTkVMRWRCZGt0bE96dEJRWGRMYUVJc1RVRkJTVEJDTEZsQlFVb3NRMEZCYVVKb1JDeExRVUZxUWl4RlFVRjNRanRCUVVOMFFpeFJRVUZKTEVOQlFVTkJMRXRCUVV3c1JVRkJXVHRCUVVOV08wRkJRMFE3TzBGQlEwUXNVVUZCVFZjc1NVRkJTU3hIUVVGSFVDeEZRVUZGTEVOQlFVTXNTVUZCUkN4RFFVRm1PMEZCUlVGUExFbEJRVUZCTEVsQlFVa3NRMEZCUTFjc1QwRkJUQ3hIUVVGbExFbEJRV1k3TzBGQlEwRXNVVUZCU1N4UFFVRlBXQ3hKUVVGSkxFTkJRVU5PTEV0QlFVd3NRMEZCVnpKRExGbEJRV3hDTEV0QlFXMURMRk5CUVhaRExFVkJRV3RFTzBGQlEyaEVja01zVFVGQlFVRXNTVUZCU1N4RFFVRkRUaXhMUVVGTUxFTkJRVmN5UXl4WlFVRllMRWRCUVRCQ0xFbEJRVEZDTzBGQlEwUTdRVUZEUml4SFFXeE1aVHM3UVVGdlRHaENPenM3T3p0QlFVdEJMRTFCUVVsRExGZEJRVW9zUjBGQmEwSTdRVUZEYUVJc1YwRkJUeXhEUVVGRE4wTXNSVUZCUlN4RFFVRkRMRWxCUVVRc1EwRkJSaXhEUVVGVFZ5eFJRVUZxUWp0QlFVTkVMRWRCTTB4bE96dEJRVFJNYUVJc1RVRkJTV3RETEZkQlFVb3NRMEZCWjBKcVJDeExRVUZvUWl4RlFVRjFRanRCUVVOeVFpeFJRVUZKTEVOQlFVTkJMRXRCUVV3c1JVRkJXVHRCUVVOV1ZTeE5RVUZCUVN4aFFVRmhMRU5CUVVOT0xFVkJRVVVzUTBGQlF5eEpRVUZFTEVOQlFVZ3NRMEZCWWp0QlFVTkVPMEZCUTBZc1IwRm9UV1U3TzBGQmEwMW9RanM3T3pzN096dEJRVTlCT0VNc1JVRkJRVUVzVTBGNlRXZENMSFZDUVhsTlNpeERRVU5XTzBGQlEwUTdRVUV6VFdVc1EwRkJiRUlzUXl4RFFUaE5RVHM3UVVGRFFYSkVMRTFCUVUwc1EwRkJRME1zWTBGQlVDeERRVUZ6UW0xQ0xFdEJRVXNzUTBGQlEyZENMRk5CUVRWQ0xFVkJRWFZETEdGQlFYWkRMRVZCUVhORU8wRkJRM0JFYWtNc1JVRkJRVUVzUzBGQlN5eEZRVUZGYVVJc1MwRkVOa003UVVGRmNFUnJReXhGUVVGQlFTeFpRVUZaTEVWQlFVVXNTVUZHYzBNN1FVRkhjRVJETEVWQlFVRkJMRkZCUVZFc1JVRkJSVHRCUVVnd1F5eERRVUYwUkN4RkxFTkJUVUU3TzBGQlEwRXNTVUZCU1N4UFFVRlBReXhOUVVGUUxFdEJRV3RDTEZkQlFXeENMRWxCUVdsRExFOUJRVTlCTEUxQlFVMHNRMEZCUTNCRExFdEJRV1FzUzBGQmQwSXNWMEZCTjBRc1JVRkJNRVU3UVVGRGVFVndRaXhGUVVGQlFTeE5RVUZOTEVOQlFVTjVSQ3hqUVVGUUxFTkJRWE5DY2tNc1MwRkJTeXhEUVVGRFowSXNVMEZCTlVJc1JVRkJkVU52UWl4TlFVRk5MRU5CUVVOd1F5eExRVUZRTEVOQlFXRm5RaXhUUVVGd1JDeEZRVVIzUlN4RFFVZDRSVHM3UVVGRFFUbENMRVZCUVVGQkxGRkJRVkVzUTBGQlEyZENMRWRCUVZRc1EwRkJZV3RETEUxQlFVMHNRMEZCUTNCRExFdEJRVkFzUTBGQllXZENMRk5CUVRGQ0xFVkJRWEZEYUVJc1MwRkJja003UVVGRFJEdEJRVVZFT3pzN096czdPenRCUVUxQkxGTkJRVk5sTEhkQ1FVRlVMRU5CUVd0RFJDeEhRVUZzUXl4RlFVRjFRenRCUVVOeVF5eFRRVUZQTzBGQlEweDRRaXhKUVVGQlFTeEhRVVJMTEdsQ1FVTkRPMEZCUTBvc1lVRkJUMGdzUlVGQlJTeERRVUZETEVsQlFVUXNRMEZCUml4RFFVRlRReXhMUVVGVUxFTkJRV1V3UWl4SFFVRm1MRU5CUVZBN1FVRkRSQ3hMUVVoSk8wRkJTVXhhTEVsQlFVRkJMRWRCU2tzc1pVRkpSRzVDTEV0QlNrTXNSVUZKVFR0QlFVTlVTU3hOUVVGQlFTeEZRVUZGTEVOQlFVTXNTVUZCUkN4RFFVRkdMRU5CUVZORExFdEJRVlFzUTBGQlpUQkNMRWRCUVdZc1NVRkJjMEl2UWl4TFFVRjBRanRCUVVORUxFdEJUa2s3UVVGUFRHMUVMRWxCUVVGQkxGbEJRVmtzUlVGQlJTeEpRVkJVTzBGQlVVeDRRaXhKUVVGQlFTeFZRVUZWTEVWQlFVVTdRVUZTVUN4SFFVRlFPMEZCVlVRN1FVRkZSRHM3T3pzN096czdRVUZOUVN4VFFVRlRORUlzYjBKQlFWUXNRMEZCT0VKNFFpeEhRVUU1UWl4RlFVRnRRenRCUVVOcVF5eFRRVUZQTzBGQlEwd3ZRaXhKUVVGQlFTeExRVVJMTEcxQ1FVTkhPMEZCUTA0c1ZVRkJUVXNzUzBGQlN5eEhRVUZIUkN4RlFVRkZMRU5CUVVNc1NVRkJSQ3hEUVVGR0xFTkJRVk5ETEV0QlFYWkNPMEZCUTBFc1lVRkJUMEVzUzBGQlN5eERRVUZETUVJc1IwRkJSQ3hEUVVGTUxFTkJRVmQ1UWl4TFFVRllMRU5CUVdsQ2JrUXNTMEZCYWtJc1JVRkJkMEp2UkN4VFFVRjRRaXhEUVVGUU8wRkJRMFFzUzBGS1NUdEJRVXRNVGl4SlFVRkJRU3haUVVGWkxFVkJRVVVzU1VGTVZEdEJRVTFNZUVJc1NVRkJRVUVzVlVGQlZTeEZRVUZGTzBGQlRsQXNSMEZCVUR0QlFWRkVPMEZCUlVRN096czdPenM3T3p0QlFVOUJMRk5CUVZNclFpeGhRVUZVTEVOQlFYVkNReXhUUVVGMlFpeEZRVUZyUTBNc1MwRkJiRU1zUlVGQmVVTTdRVUZEZGtNc1RVRkJUV2hETEVsQlFVa3NSMEZCUnk5Q0xFMUJRVTBzUTBGQlF5dENMRWxCUVZBc1EwRkJXV2RETEV0QlFWb3NRMEZCWWpzN1FVRkRRU3hOUVVGSmFFTXNTVUZCU1N4RFFVRkRSU3hOUVVGTUxFdEJRV2RDTEVOQlFYQkNMRVZCUVhWQ08wRkJRM0pDTEZkQlFVODJRaXhUUVVGUU8wRkJRMFE3UVVGRlJEczdPMEZCUTBFc1YwRkJVMFVzVjBGQlZDeERRVUZ4UWpORExGZEJRWEpDTEVWQlFXdERZaXhMUVVGc1F5eEZRVUY1UXp0QlFVTjJRM05FTEVsQlFVRkJMRk5CUVZNc1EwRkJRMGNzU1VGQlZpeERRVUZsTEVsQlFXWXNSVUZCY1VJMVF5eFhRVUZ5UWl4RlFVRnJRMklzUzBGQmJFTTdRVUZEUkRzN1FVRkZSSGRFTEVWQlFVRkJMRmRCUVZjc1EwRkJRelZDTEZOQlFWb3NSMEZCZDBKd1F5eE5RVUZOTEVOQlFVTnJSU3hOUVVGUUxFTkJRV05LTEZOQlFWTXNRMEZCUXpGQ0xGTkJRWGhDTEVWQlFXMURPMEZCUTNwRUswSXNTVUZCUVVFc1YwRkJWeXhGUVVGRk8wRkJRVVZvUlN4TlFVRkJRU3hMUVVGTExFVkJRVVUyUkN4WFFVRlVPMEZCUVhOQ1ZpeE5RVUZCUVN4WlFVRlpMRVZCUVVVc1NVRkJjRU03UVVGQk1FTkRMRTFCUVVGQkxGRkJRVkVzUlVGQlJUdEJRVUZ3UkR0QlFVUTBReXhIUVVGdVF5eERRVUY0UWl4RFFWaDFReXhEUVdWMlF6czdRVUZEUVN4UFFVRkxMRWxCUVVsMlFpeERRVUZETEVkQlFVY3NRMEZCWWl4RlFVRm5Ra0VzUTBGQlF5eEhRVUZIUkN4SlFVRkpMRU5CUVVORkxFMUJRWHBDTEVWQlFXbERMRVZCUVVWRUxFTkJRVzVETEVWQlFYTkRPMEZCUTNCRExGRkJRVTFGTEVkQlFVY3NSMEZCUjBnc1NVRkJTU3hEUVVGRFF5eERRVUZFTEVOQlFXaENPenRCUVVOQkxGRkJRVWtzUlVGQlJVVXNSMEZCUnl4SlFVRkpORUlzVTBGQlV5eERRVUZETVVJc1UwRkJia0lzUTBGQlNpeEZRVUZ0UXp0QlFVTnFReXhWUVVGTlowTXNWVUZCVlN4SFFVRkhjRVVzVFVGQlRTeERRVUZEY1VVc2QwSkJRVkFzUTBGQlowTk9MRXRCUVdoRExFVkJRWFZETjBJc1IwRkJka01zUTBGQmJrSTdRVUZEUVN4VlFVRk5iME1zVFVGQlRTeEhRVUZITEU5QlFVOUdMRlZCUVZVc1EwRkJRMnBGTEV0QlFXeENMRXRCUVRSQ0xGVkJRVE5ETzBGQlEwRklMRTFCUVVGQkxFMUJRVTBzUTBGQlEwTXNZMEZCVUN4RFFVTkZLMFFzVjBGQlZ5eERRVUZETlVJc1UwRkVaQ3hGUVVWRlJpeEhRVVpHTEVWQlIwVnZReXhOUVVGTkxFZEJRVWRhTEc5Q1FVRnZRaXhEUVVGRGVFSXNSMEZCUkN4RFFVRjJRaXhIUVVFclFrTXNkMEpCUVhkQ0xFTkJRVU5FTEVkQlFVUXNRMEZJTDBRN1FVRkxSRHRCUVVOR096dEJRVVZFTEZOQlFVODRRaXhYUVVGUU8wRkJRMFE3UVVGRlJEczdPenM3T3pzN1FVRk5RU3hUUVVGVFR5eFZRVUZVTEVOQlFXOUNVaXhMUVVGd1FpeEZRVUV5UWp0QlFVTjZRaXhOUVVGSlFTeExRVUZMTEVsQlFVa3NTVUZCVkN4SlFVRnBRa0VzUzBGQlN5eExRVUZMTDBRc1RVRkJUU3hEUVVGRGIwTXNVMEZCZEVNc1JVRkJhVVE3UVVGREwwTXNWMEZCVDJoQ0xFdEJRVkE3UVVGRFJEczdRVUZGUkN4TlFVRkpiMFFzVDBGQlR5eEhRVUZIYkVVc1VVRkJVU3hEUVVGRFNTeEhRVUZVTEVOQlFXRnhSQ3hMUVVGaUxFTkJRV1E3TzBGQlEwRXNUVUZCU1ZNc1QwRkJUeXhKUVVGSkxFbEJRV1lzUlVGQmNVSTdRVUZEYmtKQkxFbEJRVUZCTEU5QlFVOHNSMEZCUjFnc1lVRkJZU3hEUVVGRFZTeFZRVUZWTEVOQlFVTjJSU3hOUVVGTkxFTkJRVU41UlN4alFVRlFMRU5CUVhOQ1ZpeExRVUYwUWl4RFFVRkVMRU5CUVZnc1JVRkJNa05CTEV0QlFUTkRMRU5CUVhaQ08wRkJRMEY2UkN4SlFVRkJRU3hSUVVGUkxFTkJRVU5uUWl4SFFVRlVMRU5CUVdGNVF5eExRVUZpTEVWQlFXOUNVeXhQUVVGd1FqdEJRVU5FT3p0QlFVTkVMRk5CUVU5QkxFOUJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdPenM3UVVGUFFTeFRRVUZUUlN4VFFVRlVMRU5CUVcxQ2NrUXNWMEZCYmtJc1JVRkJaME5pTEV0QlFXaERMRVZCUVhWRE8wRkJRM0pETEUxQlFVMXRSU3hQUVVGUExFZEJRVWRLTEZWQlFWVXNRMEZCUTNaRkxFMUJRVTBzUTBGQlEzbEZMR05CUVZBc1EwRkJjMEpxUlN4TFFVRjBRaXhEUVVGRUxFTkJRVEZDTzBGQlEwRXNVMEZCVHl4SlFVRkpiVVVzVDBGQlNpeERRVUZaZEVRc1YwRkJXaXhGUVVGNVFtSXNTMEZCZWtJc1EwRkJVRHRCUVVORU8wRkJSVVE3T3pzN096czdPMEZCVFVFc1UwRkJVMjlGTEZOQlFWUXNRMEZCYlVKd1JTeExRVUZ1UWl4RlFVRXdRanRCUVVONFFpeFRRVUZQUkN4RlFVRkZMRU5CUVVORExFdEJRVVFzUTBGQlJpeERRVUZWYTBJc1owSkJRV3BDTzBGQlEwUTdRVUZGUkRzN096czdPenM3TzBGQlQwRXNVMEZCVTIxRUxHRkJRVlFzUTBGQmRVSnlSU3hMUVVGMlFpeEZRVUU0UW1Vc1ZVRkJPVUlzUlVGQk1FTTdRVUZEZUVOb1FpeEZRVUZCUVN4RlFVRkZMRU5CUVVORExFdEJRVVFzUTBGQlJpeERRVUZWWlN4VlFVRldMRWRCUVhWQ1FTeFZRVUYyUWp0QlFVTkVPMEZCUlVRN096czdPenM3T3p0QlFVOUJMRk5CUVZOMVJDeG5Ra0ZCVkN4RFFVRXdRblJGTEV0QlFURkNMRVZCUVdsRFowSXNZVUZCYWtNc1JVRkJaMFE3UVVGRE9VTnFRaXhGUVVGQlFTeEZRVUZGTEVOQlFVTkRMRXRCUVVRc1EwRkJSaXhEUVVGVlowSXNZVUZCVml4SFFVRXdRa0VzWVVGQk1VSTdRVUZEUkR0QlFVVkVPenM3T3pzN096czdRVUZQUVN4VFFVRlRkVVFzYTBKQlFWUXNRMEZCTkVKMlJTeExRVUUxUWl4RlFVRnRRMDhzWlVGQmJrTXNSVUZCYjBRN1FVRkRiRVJTTEVWQlFVRkJMRVZCUVVVc1EwRkJRME1zUzBGQlJDeERRVUZHTEVOQlFWVlBMR1ZCUVZZc1IwRkJORUpCTEdWQlFUVkNPMEZCUTBRN1FVRkZSRHM3T3pzN096czdPenRCUVZWQk96czdPenM3UVVGSlFTeEpRVUZOYVVVc1dVRkJXU3hIUVVGSExFbEJRVWt6UlN4UFFVRktMRVZCUVhKQ0xFTXNRMEZGUVRzN1FVRkRRU3hKUVVGTk5FVXNUMEZCVHl4SFFVRkhMRU5CUVdoQ08wRkJRMEVzU1VGQlRVTXNUVUZCVFN4SFFVRkhMRU5CUVdZN1FVRkRRU3hKUVVGTlF5eFRRVUZUTEVkQlFVY3NRMEZCYkVJN1FVRkZRVHM3T3pzN08wRkJTMEVzVTBGQlUwTXNVVUZCVkN4RFFVRnJRa01zUTBGQmJFSXNSVUZCY1VJN1FVRkRia0lzVTBGQlQwRXNRMEZCUXl4TFFVRkxMRWxCUVU0c1NVRkJZeXh6UWtGQlQwRXNRMEZCVUN4TlFVRmhMRkZCUVd4RExFTkJSRzFDTEVOQlEzbENPMEZCUXpkRE8wRkJSVVE3T3pzN096czdPMEZCVFVFc1UwRkJVME1zV1VGQlZDeERRVUZ6UW1wRkxGZEJRWFJDTEVWQlFXMURPMEZCUTJwRExFMUJRVTFyUlN4VFFVRlRMRWRCUVVkUUxGbEJRVmtzUTBGQlEzUkZMRWRCUVdJc1EwRkJhVUpYTEZkQlFXcENMRU5CUVd4Q096dEJRVU5CTEUxQlFVbHJSU3hUUVVGVExFbEJRVWtzU1VGQmFrSXNSVUZCZFVJN1FVRkRja0lzVlVGQlRTeEpRVUZKUXl4VFFVRktMRU5CUVdNc2EwVkJRV1FzUTBGQlRqdEJRVU5FT3p0QlFVTkVMRk5CUVU5RUxGTkJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdPenRCUVUxQkxGTkJRVk5GTERoQ1FVRlVMRU5CUVhkRFF5eFRRVUY0UXl4RlFVRnRSRHRCUVVOcVJDeFRRVUZQTzBGQlEweG9SaXhKUVVGQlFTeEhRVVJMTEdsQ1FVTkRPMEZCUTBvc1ZVRkJUVFpGTEZOQlFWTXNSMEZCUjBRc1dVRkJXU3hEUVVGRExFbEJRVVFzUTBGQk9VSTdRVUZEUVN4VlFVRkpTeXhKUVVGSkxFZEJRVWRLTEZOQlFWTXNRMEZCUXpkRkxFZEJRVllzUTBGQlkyZEdMRk5CUVdRc1EwRkJXRHM3UVVGRFFTeGhRVUZQUXl4SlFVRkpMRWxCUVVrc1NVRkJaaXhGUVVGeFFqdEJRVU51UWl4WlFVRkpRU3hKUVVGSkxFTkJRVU5ETEZsQlFVd3NTMEZCYzBKVUxGTkJRVEZDTEVWQlFYRkRPMEZCUTI1RExHbENRVUZQVVN4SlFVRkpMRU5CUVVORkxGRkJRVm83UVVGRFJEczdRVUZEUkVZc1VVRkJRVUVzU1VGQlNTeEhRVUZIUVN4SlFVRkpMRU5CUVVOSExFbEJRVm83UVVGRFJEczdRVUZEUkN4aFFVRlBMRWxCUVZBN1FVRkRSQ3hMUVZoSk8wRkJZVXg0UlN4SlFVRkJRU3hIUVdKTExHVkJZVVIxUlN4UlFXSkRMRVZCWVZNN1FVRkRXaXhWUVVGSkxFOUJRVTlCTEZGQlFWQXNTMEZCYjBJc1ZVRkJjRUlzU1VGQmEwTXNRMEZCUTFRc1VVRkJVU3hEUVVGRFV5eFJRVUZFTEVOQlFTOURMRVZCUVRKRU8wRkJRM3BFUVN4UlFVRkJRU3hSUVVGUkxFZEJRVWNzU1VGQldDeERRVVI1UkN4RFFVTjRRenRCUVVOc1FqczdRVUZEUkN4VlFVRk5UaXhUUVVGVExFZEJRVWRFTEZsQlFWa3NRMEZCUXl4SlFVRkVMRU5CUVRsQ0xFTkJTbGtzUTBGTldqczdRVUZEUVN4VlFVRkpVeXhKUVVGSkxFZEJRVWNzU1VGQldEdEJRVU5CTEZWQlFVbEtMRWxCUVVrc1IwRkJSMG9zVTBGQlV5eERRVUZETjBVc1IwRkJWaXhEUVVGalowWXNVMEZCWkN4RFFVRllPenRCUVVOQkxHRkJRVTlETEVsQlFVa3NTVUZCU1N4SlFVRm1MRVZCUVhGQ08wRkJRMjVDTEZsQlFVbEJMRWxCUVVrc1EwRkJRME1zV1VGQlRDeExRVUZ6UWxRc1UwRkJNVUlzUlVGQmNVTTdRVUZEYmtNN1FVRkRRU3hqUVVGSldTeEpRVUZKTEV0QlFVc3NTVUZCWWl4RlFVRnRRanRCUVVOcVFrRXNXVUZCUVVFc1NVRkJTU3hEUVVGRFJDeEpRVUZNTEVkQlFWbElMRWxCUVVrc1EwRkJRMGNzU1VGQmFrSTdRVUZEUkN4WFFVWkVMRTFCUlU4c1NVRkJTVWdzU1VGQlNTeERRVUZEUnl4SlFVRk1MRXRCUVdNc1NVRkJiRUlzUlVGQmQwSTdRVUZETjBKUUxGbEJRVUZCTEZOQlFWTXNRMEZCUTJwRkxFZEJRVllzUTBGQlkyOUZMRk5CUVdRc1JVRkJlVUpETEVsQlFVa3NRMEZCUTBjc1NVRkJPVUk3UVVGRFJDeFhRVVpOTEUxQlJVRTdRVUZEVEZBc1dVRkJRVUVzVTBGQlV5eERRVUZEVXl4TlFVRldMRU5CUVdsQ1RpeFRRVUZxUWp0QlFVTkVPMEZCUTBZc1UwRlVSQ3hOUVZOUE8wRkJRMHhMTEZWQlFVRkJMRWxCUVVrc1IwRkJSMG9zU1VGQlVEdEJRVU5FT3p0QlFVVkVRU3hSUVVGQlFTeEpRVUZKTEVkQlFVZEJMRWxCUVVrc1EwRkJRMGNzU1VGQldqdEJRVU5FTEU5QmVFSlhMRU5CTUVKYU96czdRVUZEUVN4VlFVRkpSQ3hSUVVGUkxFdEJRVXNzU1VGQmFrSXNSVUZCZFVJN1FVRkRja0lzV1VGQlRVa3NUMEZCVHl4SFFVRkhPMEZCUTJSS0xGVkJRVUZCTEZGQlFWRXNSVUZCVWtFc1VVRkVZenRCUVVWa1JDeFZRVUZCUVN4WlFVRlpMRVZCUVVWVUxGTkJSa0U3UVVGSFpHVXNWVUZCUVVFc1QwRkJUeXhGUVVGRkxFdEJTRXM3UVVGSlpFTXNWVUZCUVVFc1NVRkJTU3hGUVVGRkxFdEJTbEU3UVVGTFpFd3NWVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJURkVzVTBGQmFFSTdPMEZCVDBFc1dVRkJTVU1zU1VGQlNTeExRVUZMTEVsQlFXSXNSVUZCYlVJN1FVRkRha0pTTEZWQlFVRkJMRk5CUVZNc1EwRkJRMnBGTEVkQlFWWXNRMEZCWTI5RkxGTkJRV1FzUlVGQmVVSlBMRTlCUVhwQ08wRkJRMFFzVTBGR1JDeE5RVVZQTzBGQlEweEdMRlZCUVVGQkxFbEJRVWtzUTBGQlEwUXNTVUZCVEN4SFFVRlpSeXhQUVVGYU8wRkJRMFE3UVVGRFJqdEJRVU5HTEV0QmRFUkpPMEZCZFVSTU0wTXNTVUZCUVVFc1dVRkJXU3hGUVVGRkxFbEJka1JVTzBGQmQwUk1lRUlzU1VGQlFVRXNWVUZCVlN4RlFVRkZPMEZCZUVSUUxFZEJRVkE3UVVFd1JFUTdRVUZGUkRzN096czdPenM3UVVGTlFTeFRRVUZUYzBVc2IwSkJRVlFzUTBGQk9FSkRMRzlDUVVFNVFpeEZRVUZ2UkZnc1UwRkJjRVFzUlVGQkswUTdRVUZETjBReFJpeEZRVUZCUVN4TlFVRk5MRU5CUVVORExHTkJRVkFzUTBGQmMwSnZSeXh2UWtGQmRFSXNZMEZCYVVSWUxGTkJRV3BFTEVkQlFUaEVSQ3c0UWtGQk9FSXNRMEZCUTBNc1UwRkJSQ3hEUVVFMVJqdEJRVU5FTzBGQlJVUTdPenM3T3pzN08wRkJUVUVzVTBGQlUxa3NkVUpCUVZRc1EwRkJhVU5ETEZWQlFXcERMRVZCUVRaRE8wRkJRek5ETzBGQlEwRXNWMEZCVTBNc2FVSkJRVlFzUjBGQk5rSTdRVUZETTBKRExFbEJRVUZCTEZkQlFWY3NRMEZCUTNoRExFbEJRVm9zUTBGQmFVSXNTVUZCYWtJN1FVRkRSRHM3UVVGRlJIVkRMRVZCUVVGQkxHbENRVUZwUWl4RFFVRkRjRVVzVTBGQmJFSXNSMEZCT0VKd1F5eE5RVUZOTEVOQlFVTnJSU3hOUVVGUUxFTkJRV04xUXl4WFFVRlhMRU5CUVVOeVJTeFRRVUV4UWl4RlFVRnhRenRCUVVOcVJTdENMRWxCUVVGQkxGZEJRVmNzUlVGQlJUdEJRVU5ZYUVVc1RVRkJRVUVzUzBGQlN5eEZRVUZGY1Vjc2FVSkJSRWs3UVVGRldHeEVMRTFCUVVGQkxGbEJRVmtzUlVGQlJTeEpRVVpJTzBGQlIxaERMRTFCUVVGQkxGRkJRVkVzUlVGQlJUdEJRVWhETzBGQlJHOUVMRWRCUVhKRExFTkJRVGxDT3p0QlFWRkJMRTlCUVVzc1NVRkJTWFpDTEVOQlFVTXNSMEZCUnl4RFFVRmlMRVZCUVdkQ1FTeERRVUZETEVkQlFVZDFSU3hWUVVGVkxFTkJRVU4wUlN4TlFVRXZRaXhGUVVGMVF5eEZRVUZGUkN4RFFVRjZReXhGUVVFMFF6dEJRVU14UTI5RkxFbEJRVUZCTEc5Q1FVRnZRaXhEUVVGRFNTeHBRa0ZCYVVJc1EwRkJRM0JGTEZOQlFXNUNMRVZCUVRoQ2JVVXNWVUZCVlN4RFFVRkRka1VzUTBGQlJDeERRVUY0UXl4RFFVRndRanRCUVVORU96dEJRVVZFTEZOQlFVOTNSU3hwUWtGQlVEdEJRVU5FTzBGQlJVUTdPenM3T3pzN096czdPenM3T3p0QlFXRkJMRk5CUVZORExGZEJRVlFzUjBGQmRVSTdRVUZEY2tJN1FVRkRRU3hOUVVGSkxHZENRVUZuUWtFc1YwRkJjRUlzUlVGQmFVTTdRVUZETDBKNlFpeEpRVUZCUVN4WlFVRlpMRU5CUVVNeFJDeEhRVUZpTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEVsQlFVbHZSaXhIUVVGS0xFVkJRWFpDTzBGQlEwRTdRVUZEUkRzN1FVRkRSQ3hOUVVGSk9VTXNVMEZCVXl4RFFVRkRNMElzVFVGQlZpeExRVUZ4UWl4RFFVRnlRaXhKUVVFd1FqQkZMRXRCUVVzc1EwRkJRME1zVDBGQlRpeERRVUZqYUVRc1UwRkJVeXhEUVVGRExFTkJRVVFzUTBGQmRrSXNRMEZCT1VJc1JVRkJNa1E3UVVGRGVrUXNWMEZCVHpCRExIVkNRVUYxUWl4RFFVRkRNVU1zVTBGQlV5eERRVUZETEVOQlFVUXNRMEZCVml4RFFVRTVRanRCUVVORU96dEJRVU5FTEUxQlFVbEJMRk5CUVZNc1EwRkJRek5DTEUxQlFWWXNSMEZCYlVJc1EwRkJka0lzUlVGQk1FSTdRVUZEZUVJc1VVRkJUVFJGTEV0QlFVc3NSMEZCUnl4SlFVRkpSaXhMUVVGS0xFTkJRVlV2UXl4VFFVRlRMRU5CUVVNelFpeE5RVUZ3UWl4RFFVRmtPenRCUVVOQkxGTkJRVXNzU1VGQlNVUXNRMEZCUXl4SFFVRkhMRU5CUVdJc1JVRkJaMEpCTEVOQlFVTXNSMEZCUnpSQ0xGTkJRVk1zUTBGQlF6TkNMRTFCUVRsQ0xFVkJRWE5ETEVWQlFVVkVMRU5CUVhoRExFVkJRVEpETzBGQlEzcEROa1VzVFVGQlFVRXNTMEZCU3l4RFFVRkROMFVzUTBGQlJDeERRVUZNTEVkQlFWYzBRaXhUUVVGVExFTkJRVU0xUWl4RFFVRkVMRU5CUVhCQ08wRkJRMFE3TzBGQlEwUXNWMEZCVDNORkxIVkNRVUYxUWl4RFFVRkRUeXhMUVVGRUxFTkJRVGxDTzBGQlEwUTdPMEZCUTBRc1VVRkJUU3hKUVVGSmNrSXNVMEZCU2l4RFFVRmpMRzFEUVVGa0xFTkJRVTQ3UVVGRFFUdEJRVU5FTEVNc1EwRkZSRHM3TzBGQlEwRnBRaXhYUVVGWExFTkJRVU55UlN4VFFVRmFMRWRCUVhkQ08wRkJRM1JDT3pzN096czdPMEZCVDBFd1JTeEZRVUZCUVN4blFrRlNjMElzTkVKQlVVeHdRaXhUUVZKTExFVkJVVTFITEZGQlVrNHNSVUZSWjBKclFpeFBRVkpvUWl4RlFWRjVRanRCUVVNM1F5eFJRVUZKYkVJc1VVRkJVU3hKUVVGSkxFbEJRV2hDTEVWQlFYTkNPMEZCUTNCQ08wRkJRMFE3TzBGQlEwUXNVVUZCU1N4UFFVRlBRU3hSUVVGUUxFdEJRVzlDTEZWQlFYQkNMRWxCUVd0RExFTkJRVU5VTEZGQlFWRXNRMEZCUTFNc1VVRkJSQ3hEUVVFdlF5eEZRVUV5UkR0QlFVTjZSQ3haUVVGTkxFbEJRVWxNTEZOQlFVb3NRMEZCWXl3clEwRkJaQ3hEUVVGT08wRkJRMFE3TzBGQlJVUXNVVUZCVFVRc1UwRkJVeXhIUVVGSFJDeFpRVUZaTEVOQlFVTXNTVUZCUkN4RFFVRTVRanRCUVVOQkxGRkJRVTB3UWl4WlFVRlpMRWRCUVVjMVFpeFJRVUZSTEVOQlFVTXlRaXhQUVVGRUxFTkJRVGRDTzBGQlEwRXNVVUZCVFVVc1QwRkJUeXhIUVVGSFJDeFpRVUZaTEVkQlFVZHFSU3hQUVVGUExFTkJRVU5uUlN4UFFVRlBMRU5CUVVORkxFOUJRVlFzUTBGQlZpeEhRVUU0UW14RkxFOUJRVThzUTBGQlEyZEZMRTlCUVVRc1EwRkJha1U3UVVGRFFTeFJRVUZOYmtJc1dVRkJXU3hIUVVGSGNVSXNUMEZCVHl4SFFVRkhhRU1zVDBGQlNDeEhRVUZoUXl4TlFVRjZRenRCUVVOQkxGRkJRVTFsTEU5QlFVOHNSMEZCUnp0QlFVTmtTaXhOUVVGQlFTeFJRVUZSTEVWQlFWSkJMRkZCUkdNN1FVRkZaRVFzVFVGQlFVRXNXVUZCV1N4RlFVRmFRU3haUVVaak8wRkJSMlJOTEUxQlFVRkJMRTlCUVU4c1JVRkJSV01zV1VGQldTeEpRVUZKYWtVc1QwRkJUeXhEUVVGRFowVXNUMEZCVHl4RFFVRkRZaXhQUVVGVUxFTkJTR3hDTzBGQlNXUkRMRTFCUVVGQkxFbEJRVWtzUlVGQlJXRXNXVUZCV1N4SlFVRkpha1VzVDBGQlR5eERRVUZEWjBVc1QwRkJUeXhEUVVGRFdpeEpRVUZVTEVOQlNtWTdRVUZMWkV3c1RVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQlRGRXNTMEZCYUVJc1EwRmFOa01zUTBGdlFqZERPenRCUVVOQkxGRkJRVWxJTEVsQlFVa3NSMEZCUjBvc1UwRkJVeXhEUVVGRE4wVXNSMEZCVml4RFFVRmpaMFlzVTBGQlpDeERRVUZZT3p0QlFVTkJMRkZCUVVsRExFbEJRVWtzUzBGQlMzVkNMRk5CUVdJc1JVRkJkMEk3UVVGRGRFSXpRaXhOUVVGQlFTeFRRVUZUTEVOQlFVTnFSU3hIUVVGV0xFTkJRV052UlN4VFFVRmtMRVZCUVhsQ1R5eFBRVUY2UWp0QlFVTkJPMEZCUTBRc1MwRjZRalJETEVOQk1rSTNRenM3TzBGQlEwRXNVVUZCU1VZc1NVRkJTU3hIUVVGSExFbEJRVmc3TzBGQlEwRXNWMEZCVDBvc1NVRkJTU3hKUVVGSkxFbEJRV1lzUlVGQmNVSTdRVUZEYmtJc1ZVRkJTVUVzU1VGQlNTeERRVUZEUlN4UlFVRk1MRXRCUVd0Q1FTeFJRVUZzUWl4SlFVRTRRa1lzU1VGQlNTeERRVUZEUXl4WlFVRk1MRXRCUVhOQ1FTeFpRVUY0UkN4RlFVRnpSVHRCUVVOd1JUdEJRVU5CTzBGQlEwUTdPMEZCUTBSSExFMUJRVUZCTEVsQlFVa3NSMEZCUjBvc1NVRkJVRHRCUVVOQlFTeE5RVUZCUVN4SlFVRkpMRWRCUVVkQkxFbEJRVWtzUTBGQlEwY3NTVUZCV2p0QlFVTkVMRXRCY0VNMFF5eERRWE5ETjBNN096dEJRVU5CUXl4SlFVRkJRU3hKUVVGSkxFTkJRVU5FTEVsQlFVd3NSMEZCV1Vjc1QwRkJXanRCUVVORUxFZEJhRVJ4UWpzN1FVRnJSSFJDT3pzN096czdPMEZCVDBGclFpeEZRVUZCUVN4dFFrRjZSSE5DTEN0Q1FYbEVSbnBDTEZOQmVrUkZMRVZCZVVSVFJ5eFJRWHBFVkN4RlFYbEViVUpyUWl4UFFYcEVia0lzUlVGNVJEUkNPMEZCUTJoRUxGRkJRVWxzUWl4UlFVRlJMRWxCUVVrc1NVRkJhRUlzUlVGQmMwSTdRVUZEY0VJN1FVRkRSRHM3UVVGRlJDeFJRVUZOVGl4VFFVRlRMRWRCUVVkRUxGbEJRVmtzUTBGQlF5eEpRVUZFTEVOQlFUbENPMEZCUTBFc1VVRkJUVEpDTEU5QlFVOHNSMEZCUnpkQ0xGRkJRVkVzUTBGQlF6SkNMRTlCUVVRc1EwRkJVaXhIUVVGdlFtaEZMRTlCUVU4c1EwRkJRMmRGTEU5QlFVOHNRMEZCUTBVc1QwRkJWQ3hEUVVFelFpeEhRVUVyUTJ4RkxFOUJRVThzUTBGQlEyZEZMRTlCUVVRc1EwRkJkRVU3UVVGRFFTeFJRVUZOYmtJc1dVRkJXU3hIUVVGSGNVSXNUMEZCVHl4SFFVRkhhRU1zVDBGQlNDeEhRVUZoUXl4TlFVRjZRenRCUVVWQkxGRkJRVWxoTEVsQlFVa3NSMEZCUnl4SlFVRllPMEZCUTBFc1VVRkJTVW9zU1VGQlNTeEhRVUZIU2l4VFFVRlRMRU5CUVVNM1JTeEhRVUZXTEVOQlFXTm5SaXhUUVVGa0xFTkJRVmc3TzBGQlEwRXNWMEZCVDBNc1NVRkJTU3hKUVVGSkxFbEJRV1lzUlVGQmNVSTdRVUZEYmtJc1ZVRkJTVUVzU1VGQlNTeERRVUZEUlN4UlFVRk1MRXRCUVd0Q1FTeFJRVUZzUWl4SlFVRTRRa1lzU1VGQlNTeERRVUZEUXl4WlFVRk1MRXRCUVhOQ1FTeFpRVUY0UkN4RlFVRnpSVHRCUVVOd1JTeFpRVUZKUnl4SlFVRkpMRXRCUVVzc1NVRkJZaXhGUVVGdFFqdEJRVU5xUWtFc1ZVRkJRVUVzU1VGQlNTeERRVUZEUkN4SlFVRk1MRWRCUVZsSUxFbEJRVWtzUTBGQlEwY3NTVUZCYWtJN1FVRkRSQ3hUUVVaRUxFMUJSVThzU1VGQlNVZ3NTVUZCU1N4RFFVRkRSeXhKUVVGTUxFdEJRV01zU1VGQmJFSXNSVUZCZDBJN1FVRkROMEpRTEZWQlFVRkJMRk5CUVZNc1EwRkJRMnBGTEVkQlFWWXNRMEZCWTI5RkxGTkJRV1FzUlVGQmVVSkRMRWxCUVVrc1EwRkJRMGNzU1VGQk9VSTdRVUZEUkN4VFFVWk5MRTFCUlVFN1FVRkRURkFzVlVGQlFVRXNVMEZCVXl4RFFVRkRVeXhOUVVGV0xFTkJRV2xDVGl4VFFVRnFRanRCUVVORU96dEJRVU5FTzBGQlEwUTdPMEZCUlVSTExFMUJRVUZCTEVsQlFVa3NSMEZCUjBvc1NVRkJVRHRCUVVOQlFTeE5RVUZCUVN4SlFVRkpMRWRCUVVkQkxFbEJRVWtzUTBGQlEwY3NTVUZCV2p0QlFVTkVPMEZCUTBZc1IwRnVSbkZDT3p0QlFYRkdkRUk3T3pzN08wRkJTMEZ6UWl4RlFVRkJRU3hoUVRGR2MwSXNlVUpCTUVaU05VY3NTMEV4UmxFc1JVRXdSa1E3UVVGRGJrSXNVVUZCU1VFc1MwRkJTeXhKUVVGSkxFbEJRVlFzU1VGQmFVSXNUMEZCVDBFc1MwRkJTeXhEUVVGRE5rSXNTVUZCWWl4TFFVRnpRaXhSUVVFelF5eEZRVUZ4UkR0QlFVTnVSQ3haUVVGTkxFbEJRVWx0UkN4VFFVRktMRU5CUVdNc2EwTkJRV1FzUTBGQlRqdEJRVU5FTEV0QlNHdENMRU5CUzI1Q096czdRVUZEUVN4UlFVRk5SQ3hUUVVGVExFZEJRVWRFTEZsQlFWa3NRMEZCUXl4SlFVRkVMRU5CUVRsQ08wRkJRMEVzVVVGQlRVa3NVMEZCVXl4SFFVRkhiRVlzUzBGQlN5eERRVUZETmtJc1NVRkJlRUk3UVVGRFFTeFJRVUZKYzBRc1NVRkJTU3hIUVVGSFNpeFRRVUZUTEVOQlFVTTNSU3hIUVVGV0xFTkJRV05uUml4VFFVRmtMRU5CUVZnN08wRkJRMEVzVVVGQlNVTXNTVUZCU1N4SlFVRkpMRWxCUVZvc1JVRkJhMEk3UVVGRGFFSXNZVUZCVHl4SlFVRlFPMEZCUTBRc1MwRllhMElzUTBGaGJrSTdPenRCUVVOQkxGRkJRVTB3UWl4WlFVRlpMRWRCUVVjelF5eFRRVUZUTEVOQlFVTXNTVUZCUkN4RlFVRlBiRVVzUzBGQlVDeERRVUU1UWl4RFFXUnRRaXhEUVdkQ2JrSTdRVUZEUVRzN1FVRkRRU3hSUVVGSmRVWXNTVUZCU1N4SFFVRkhMRWxCUVZnN08wRkJRMEVzVjBGQlQwb3NTVUZCU1N4SlFVRkpMRWxCUVdZc1JVRkJjVUk3UVVGRGJrSTdRVUZEUVN4VlFVRkpRU3hKUVVGSkxFTkJRVU5STEVsQlFWUXNSVUZCWlR0QlFVTmlMRmxCUVVsS0xFbEJRVWtzUzBGQlN5eEpRVUZpTEVWQlFXMUNPMEZCUTJwQ1FTeFZRVUZCUVN4SlFVRkpMRU5CUVVORUxFbEJRVXdzUjBGQldVZ3NTVUZCU1N4RFFVRkRSeXhKUVVGcVFqdEJRVU5FTEZOQlJrUXNUVUZGVHl4SlFVRkpTQ3hKUVVGSkxFTkJRVU5ITEVsQlFVd3NTMEZCWXl4SlFVRnNRaXhGUVVGM1FqdEJRVU0zUWxBc1ZVRkJRVUVzVTBGQlV5eERRVUZEYWtVc1IwRkJWaXhEUVVGamIwVXNVMEZCWkN4RlFVRjVRa01zU1VGQlNTeERRVUZEUnl4SlFVRTVRanRCUVVORUxGTkJSazBzVFVGRlFUdEJRVU5NVUN4VlFVRkJRU3hUUVVGVExFTkJRVU5UTEUxQlFWWXNRMEZCYVVKT0xGTkJRV3BDTzBGQlEwUTdRVUZEUml4UFFWSkVMRTFCVVU4N1FVRkRURXNzVVVGQlFVRXNTVUZCU1N4SFFVRkhTaXhKUVVGUU8wRkJRMFFzVDBGYWEwSXNRMEZqYmtJN096dEJRVU5CV2l4TlFVRkJRU3hyUWtGQmEwSXNRMEZCUTNORExGbEJRVVFzUlVGQlpURkNMRWxCUVVrc1EwRkJRMDhzVDBGQlRDeEhRVUZsVUN4SlFVRkpMRU5CUVVORkxGRkJRWEJDTEVkQlFTdENMRWxCUVRsRExFTkJRV3hDT3p0QlFVTkJMRlZCUVVrc1QwRkJUMFlzU1VGQlNTeERRVUZEUlN4UlFVRmFMRXRCUVhsQ0xGVkJRVGRDTEVWQlFYbERPMEZCUTNaRExGbEJRVWs3UVVGRFJrWXNWVUZCUVVFc1NVRkJTU3hEUVVGRFJTeFJRVUZNTEVOQlFXTTFRaXhKUVVGa0xFTkJRVzFDTEVsQlFXNUNMRVZCUVhsQ2IwUXNXVUZCZWtJN1FVRkRSQ3hUUVVaRUxFTkJSVVVzVDBGQlQwTXNSMEZCVUN4RlFVRlpPMEZCUTFvc1kwRkJTU3hQUVVGUE0wY3NUMEZCVUN4TFFVRnRRaXhYUVVGdVFpeEpRVUZyUXl4UFFVRlBRU3hQUVVGUExFTkJRVU5MTEV0QlFXWXNTMEZCZVVJc1ZVRkJMMFFzUlVGQk1rVTdRVUZEZWtWTUxGbEJRVUZCTEU5QlFVOHNRMEZCUTBzc1MwRkJVaXhEUVVGamMwY3NSMEZCWkR0QlFVTkVPMEZCUTBZN1FVRkRSaXhQUVZKRUxFMUJVVThzU1VGQlNUTkNMRWxCUVVrc1EwRkJRME1zV1VGQlRDeExRVUZ6UWxRc1UwRkJkRUlzU1VGQmJVTXNUMEZCVDFFc1NVRkJTU3hEUVVGRFJTeFJRVUZNTEVOQlFXTXdRaXhYUVVGeVFpeExRVUZ4UXl4VlFVRTFSU3hGUVVGM1JqdEJRVU0zUmpWQ0xGRkJRVUZCTEVsQlFVa3NRMEZCUTBVc1VVRkJUQ3hEUVVGak1FSXNWMEZCWkN4RFFVRXdRa1lzV1VGQk1VSTdRVUZEUkN4UFFURkNhMElzUTBFMFFtNUNPenM3UVVGRFFTeFZRVUZKZWtNc1UwRkJVeXhEUVVGRGVVTXNXVUZCUkN4RFFVRmlMRVZCUVRaQ08wRkJRek5DTzBGQlEwUTdPMEZCUlVReFFpeE5RVUZCUVN4SlFVRkpMRWRCUVVkQkxFbEJRVWtzUTBGQlEwY3NTVUZCV2p0QlFVTkVPenRCUVVORVppeEpRVUZCUVN4clFrRkJhMElzUTBGQlEzTkRMRmxCUVVRc1JVRkJaU3hKUVVGbUxFTkJRV3hDTzBGQlEwRjRReXhKUVVGQlFTeGhRVUZoTEVOQlFVTjNReXhaUVVGRUxFVkJRV1VzUTBGQlppeERRVUZpTzBGQlEwRjJReXhKUVVGQlFTeG5Ra0ZCWjBJc1EwRkJRM1ZETEZsQlFVUXNSVUZCWlN4SlFVRm1MRU5CUVdoQ08wRkJSVUVzVjBGQlR5eERRVUZEUVN4WlFVRlpMRU5CUVVOeVJTeG5Ra0ZCY2tJN1FVRkRSRHRCUVhKS2NVSXNRMEZCZUVJc1F5eERRWGRLUVRzN1FVRkRRV2hFTEUxQlFVMHNRMEZCUTBNc1kwRkJVQ3hEUVVGelFuZEhMRmRCUVZjc1EwRkJRM0pGTEZOQlFXeERMRVZCUVRaRExHRkJRVGRETEVWQlFUUkVPMEZCUXpGRWFrTXNSVUZCUVVFc1MwRkJTeXhGUVVGRmMwY3NWMEZFYlVRN1FVRkZNVVJ1UkN4RlFVRkJRU3haUVVGWkxFVkJRVVVzU1VGR05FTTdRVUZITVVSRExFVkJRVUZCTEZGQlFWRXNSVUZCUlR0QlFVaG5SQ3hEUVVFMVJDeEZMRU5CVFVFN08wRkJRMEVzU1VGQlNTeFBRVUZQUXl4TlFVRlFMRXRCUVd0Q0xGZEJRV3hDTEVsQlFXbERMRTlCUVU5QkxFMUJRVTBzUTBGQlEybEVMRmRCUVdRc1MwRkJPRUlzVjBGQmJrVXNSVUZCWjBZN1FVRkRPVVY2Unl4RlFVRkJRU3hOUVVGTkxFTkJRVU41UkN4alFVRlFMRU5CUVhOQ1owUXNWMEZCVnl4RFFVRkRja1VzVTBGQmJFTXNSVUZCTmtOdlFpeE5RVUZOTEVOQlFVTnBSQ3hYUVVGUUxFTkJRVzFDY2tVc1UwRkJhRVU3UVVGRFJEczdRVUZGUkd4RExFOUJRVThzUTBGQlEydEhMRzlDUVVGU0xFZEJRU3RDUVN4dlFrRkJMMEk3UVVGRFFXeEhMRTlCUVU4c1EwRkJRM1ZITEZkQlFWSXNSMEZCYzBKQkxGZEJRWFJDTzBGQlEwRjJSeXhQUVVGUExFTkJRVU56U0N4UFFVRlNMRWRCUVd0Q1ppeFhRVUZzUWp0QlFVVkJaMElzVFVGQlRTeERRVUZEZGtnc1QwRkJVQ3hIUVVGcFFuVkhMRmRCUVdwQ08wRkJRMEZuUWl4TlFVRk5MRU5CUVVOMlNDeFBRVUZRTEVOQlFXVjFSeXhYUVVGbUxFZEJRVFpDWjBJc1RVRkJUU3hEUVVGRGRrZ3NUMEZCVUN4RFFVRmxMRk5CUVdZc1NVRkJORUoxUnl4WFFVRjZSRHRCUVVOQlowSXNUVUZCVFN4RFFVRkRka2dzVDBGQlVDeERRVUZsYTBjc2IwSkJRV1lzUjBGQmMwTkJMRzlDUVVGMFF5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUZSb2FYTWdhWE1nWVdSdmNIUmxaQ0JtY205dElHVjJaVzUwTFhSaGNtZGxkQzF6YUdsdFFEVXVNQzR4SUhWdVpHVnlJRTFKVkNCTWFXTmxibk5sTGx4eVhHNHZMeUJVYUdVZ2MyOTFjbU5sSUdOdlpHVWdhWE1nWTI5d2FXVmtJR2hsY21VZ1ltVmpZWFZ6WlNCMGFHVWdiM0pwWjJsdVlXd2djR0ZqYTJGblpTQmtieUJ1YjNRZ2MzVndjRzl5ZENCRlV6VWdZbkp2ZDNObGNuTXVYSEpjYmx4eVhHNHZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQXFMMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRUJoZFhSb2IzSWdWRzl5ZFNCT1lXZGhjMmhwYldFZ1BHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXRlWE4wYVdOaGRHVmhQbHh5WEc0Z0tpQkFZMjl3ZVhKcFoyaDBJREl3TVRVZ1ZHOXlkU0JPWVdkaGMyaHBiV0V1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhISmNiaUFxSUZObFpTQk1TVU5GVGxORklHWnBiR1VnYVc0Z2NtOXZkQ0JrYVhKbFkzUnZjbmtnWm05eUlHWjFiR3dnYkdsalpXNXpaUzVjY2x4dUlDb3ZYSEpjYmlkMWMyVWdjM1J5YVdOMEp6dGNjbHh1WEhKY2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0FuWDE5bGMwMXZaSFZzWlNjc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1FIUjVjR1ZrWldZZ2UyOWlhbVZqZEgwZ1VISnBkbUYwWlVSaGRHRmNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdEZkbVZ1ZEZSaGNtZGxkSDBnWlhabGJuUlVZWEpuWlhRZ1ZHaGxJR1YyWlc1MElIUmhjbWRsZEM1Y2NseHVJQ29nUUhCeWIzQmxjblI1SUh0N2RIbHdaVHB6ZEhKcGJtZDlmU0JsZG1WdWRDQlVhR1VnYjNKcFoybHVZV3dnWlhabGJuUWdiMkpxWldOMExseHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UyNTFiV0psY24wZ1pYWmxiblJRYUdGelpTQlVhR1VnWTNWeWNtVnVkQ0JsZG1WdWRDQndhR0Z6WlM1Y2NseHVJQ29nUUhCeWIzQmxjblI1SUh0RmRtVnVkRlJoY21kbGRIeHVkV3hzZlNCamRYSnlaVzUwVkdGeVoyVjBJRlJvWlNCamRYSnlaVzUwSUdWMlpXNTBJSFJoY21kbGRDNWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdGliMjlzWldGdWZTQmpZVzVqWld4bFpDQlVhR1VnWm14aFp5QjBieUJ3Y21WMlpXNTBJR1JsWm1GMWJIUXVYSEpjYmlBcUlFQndjbTl3WlhKMGVTQjdZbTl2YkdWaGJuMGdjM1J2Y0hCbFpDQlVhR1VnWm14aFp5QjBieUJ6ZEc5d0lIQnliM0JoWjJGMGFXOXVMbHh5WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMkp2YjJ4bFlXNTlJR2x0YldWa2FXRjBaVk4wYjNCd1pXUWdWR2hsSUdac1lXY2dkRzhnYzNSdmNDQndjbTl3WVdkaGRHbHZiaUJwYlcxbFpHbGhkR1ZzZVM1Y2NseHVJQ29nUUhCeWIzQmxjblI1SUh0R2RXNWpkR2x2Ym54dWRXeHNmU0J3WVhOemFYWmxUR2x6ZEdWdVpYSWdWR2hsSUd4cGMzUmxibVZ5SUdsbUlIUm9aU0JqZFhKeVpXNTBJR3hwYzNSbGJtVnlJR2x6SUhCaGMzTnBkbVV1SUU5MGFHVnlkMmx6WlNCMGFHbHpJR2x6SUc1MWJHd3VYSEpjYmlBcUlFQndjbTl3WlhKMGVTQjdiblZ0WW1WeWZTQjBhVzFsVTNSaGJYQWdWR2hsSUhWdWFYZ2dkR2x0WlM1Y2NseHVJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDb3ZYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dVSEpwZG1GMFpTQmtZWFJoSUdadmNpQmxkbVZ1ZENCM2NtRndjR1Z5Y3k1Y2NseHVJQ29nUUhSNWNHVWdlMWRsWVd0TllYQThSWFpsYm5Rc0lGQnlhWFpoZEdWRVlYUmhQbjFjY2x4dUlDb2dRSEJ5YVhaaGRHVmNjbHh1SUNvdlhISmNibU52Ym5OMElIQnlhWFpoZEdWRVlYUmhJRDBnYm1WM0lGZGxZV3ROWVhBb0tUdGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkRZV05vWlNCbWIzSWdkM0poY0hCbGNpQmpiR0Z6YzJWekxseHlYRzRnS2lCQWRIbHdaU0I3VjJWaGEwMWhjRHhQWW1wbFkzUXNJRVoxYm1OMGFXOXVQbjFjY2x4dUlDb2dRSEJ5YVhaaGRHVmNjbHh1SUNvdlhISmNibU52Ym5OMElIZHlZWEJ3WlhKeklEMGdibVYzSUZkbFlXdE5ZWEFvS1R0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCSFpYUWdjSEpwZG1GMFpTQmtZWFJoTGx4eVhHNGdLaUJBY0dGeVlXMGdlMFYyWlc1MGZTQmxkbVZ1ZENCVWFHVWdaWFpsYm5RZ2IySnFaV04wSUhSdklHZGxkQ0J3Y21sMllYUmxJR1JoZEdFdVhISmNiaUFxSUVCeVpYUjFjbTV6SUh0UWNtbDJZWFJsUkdGMFlYMGdWR2hsSUhCeWFYWmhkR1VnWkdGMFlTQnZaaUIwYUdVZ1pYWmxiblF1WEhKY2JpQXFJRUJ3Y21sMllYUmxYSEpjYmlBcUwxeHlYRzVtZFc1amRHbHZiaUJ3WkNobGRtVnVkQ2tnZTF4eVhHNGdJR052Ym5OMElISmxkSFlnUFNCd2NtbDJZWFJsUkdGMFlTNW5aWFFvWlhabGJuUXBPMXh5WEc0Z0lHTnZibk52YkdVdVlYTnpaWEowS0hKbGRIWWdJVDBnYm5Wc2JDd2dYQ0luZEdocGN5Y2dhWE1nWlhod1pXTjBaV1FnWVc0Z1JYWmxiblFnYjJKcVpXTjBMQ0JpZFhRZ1oyOTBYQ0lzSUdWMlpXNTBLVHRjY2x4dUlDQnlaWFIxY200Z2NtVjBkanRjY2x4dWZWeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlHaDBkSEJ6T2k4dlpHOXRMbk53WldNdWQyaGhkSGRuTG05eVp5OGpjMlYwTFhSb1pTMWpZVzVqWld4bFpDMW1iR0ZuWEhKY2JpQXFJRUJ3WVhKaGJTQmtZWFJoSUh0UWNtbDJZWFJsUkdGMFlYMGdjSEpwZG1GMFpTQmtZWFJoTGx4eVhHNGdLaTljY2x4dVpuVnVZM1JwYjI0Z2MyVjBRMkZ1WTJWc1JteGhaeWhrWVhSaEtTQjdYSEpjYmlBZ2FXWWdLR1JoZEdFdWNHRnpjMmwyWlV4cGMzUmxibVZ5SUNFOUlHNTFiR3dwSUh0Y2NseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyOXVjMjlzWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2RIbHdaVzltSUdOdmJuTnZiR1V1WlhKeWIzSWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNjbHh1SUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnblZXNWhZbXhsSUhSdklIQnlaWFpsYm5SRVpXWmhkV3gwSUdsdWMybGtaU0J3WVhOemFYWmxJR1YyWlc1MElHeHBjM1JsYm1WeUlHbHVkbTlqWVhScGIyNHVKeXdnWkdGMFlTNXdZWE56YVhabFRHbHpkR1Z1WlhJcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJSDFjY2x4dUlDQnBaaUFvSVdSaGRHRXVaWFpsYm5RdVkyRnVZMlZzWVdKc1pTa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdU8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1pHRjBZUzVqWVc1alpXeGxaQ0E5SUhSeWRXVTdYSEpjYmlBZ2FXWWdLSFI1Y0dWdlppQmtZWFJoTG1WMlpXNTBMbkJ5WlhabGJuUkVaV1poZFd4MElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hISmNiaUFnSUNCa1lYUmhMbVYyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dRSE5sWlNCb2RIUndjem92TDJSdmJTNXpjR1ZqTG5kb1lYUjNaeTV2Y21jdkkybHVkR1Z5Wm1GalpTMWxkbVZ1ZEZ4eVhHNGdLaUJBY0hKcGRtRjBaVnh5WEc0Z0tpOWNjbHh1THlvcVhISmNiaUFxSUZSb1pTQmxkbVZ1ZENCM2NtRndjR1Z5TGx4eVhHNGdLaUJBWTI5dWMzUnlkV04wYjNKY2NseHVJQ29nUUhCaGNtRnRJSHRGZG1WdWRGUmhjbWRsZEgwZ1pYWmxiblJVWVhKblpYUWdWR2hsSUdWMlpXNTBJSFJoY21kbGRDQnZaaUIwYUdseklHUnBjM0JoZEdOb2FXNW5MbHh5WEc0Z0tpQkFjR0Z5WVcwZ2UwVjJaVzUwZkh0MGVYQmxPbk4wY21sdVozMTlJR1YyWlc1MElGUm9aU0J2Y21sbmFXNWhiQ0JsZG1WdWRDQjBieUIzY21Gd0xseHlYRzRnS2k5Y2NseHVablZ1WTNScGIyNGdSWFpsYm5Rb1pYWmxiblJVWVhKblpYUXNJR1YyWlc1MEtTQjdYSEpjYmlBZ2NISnBkbUYwWlVSaGRHRXVjMlYwS0hSb2FYTXNJSHRjY2x4dUlDQWdJR1YyWlc1MFZHRnlaMlYwTEZ4eVhHNGdJQ0FnWlhabGJuUXNYSEpjYmlBZ0lDQmxkbVZ1ZEZCb1lYTmxPaUF5TEZ4eVhHNGdJQ0FnWTNWeWNtVnVkRlJoY21kbGREb2daWFpsYm5SVVlYSm5aWFFzWEhKY2JpQWdJQ0JqWVc1alpXeGxaRG9nWm1Gc2MyVXNYSEpjYmlBZ0lDQnpkRzl3Y0dWa09pQm1ZV3h6WlN4Y2NseHVJQ0FnSUdsdGJXVmthV0YwWlZOMGIzQndaV1E2SUdaaGJITmxMRnh5WEc0Z0lDQWdjR0Z6YzJsMlpVeHBjM1JsYm1WeU9pQnVkV3hzTEZ4eVhHNGdJQ0FnZEdsdFpWTjBZVzF3T2lCbGRtVnVkQzUwYVcxbFUzUmhiWEFnZkh3Z1JHRjBaUzV1YjNjb0tWeHlYRzRnSUgwcE8xeHlYRzVjY2x4dUlDQXZMeUJvZEhSd2N6b3ZMMmhsZVdOaGJTNW5hWFJvZFdJdWFXOHZkMlZpYVdSc0x5TlZibVp2Y21kbFlXSnNaVnh5WEc0Z0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwYUdsekxDQW5hWE5VY25WemRHVmtKeXdnZXlCMllXeDFaVG9nWm1Gc2MyVXNJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVWdmU2s3WEhKY2JseHlYRzRnSUM4dklFUmxabWx1WlNCaFkyTmxjM052Y25OY2NseHVJQ0JqYjI1emRDQnJaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9aWFpsYm5RcE8xeHlYRzRnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2EyVjVjeTVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnYTJWNUlEMGdhMlY1YzF0cFhUdGNjbHh1SUNBZ0lHbG1JQ2doS0d0bGVTQnBiaUIwYUdsektTa2dlMXh5WEc0Z0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHaHBjeXdnYTJWNUxDQmtaV1pwYm1WU1pXUnBjbVZqZEVSbGMyTnlhWEIwYjNJb2EyVjVLU2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc0dkx5QlRhRzkxYkdRZ1ltVWdaVzUxYldWeVlXSnNaU3dnWW5WMElHTnNZWE56SUcxbGRHaHZaSE1nWVhKbElHNXZkQ0JsYm5WdFpYSmhZbXhsTGx4eVhHNUZkbVZ1ZEM1d2NtOTBiM1I1Y0dVZ1BTQjdYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dWR2hsSUhSNWNHVWdiMllnZEdocGN5QmxkbVZ1ZEM1Y2NseHVJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkQ0IwZVhCbEtDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIQmtLSFJvYVhNcExtVjJaVzUwTG5SNWNHVTdYSEpjYmlBZ2ZTeGNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVkdobElIUmhjbWRsZENCdlppQjBhR2x6SUdWMlpXNTBMbHh5WEc0Z0lDQXFJRUIwZVhCbElIdEZkbVZ1ZEZSaGNtZGxkSDFjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnZEdGeVoyVjBLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSEJrS0hSb2FYTXBMbVYyWlc1MFZHRnlaMlYwTzF4eVhHNGdJSDBzWEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGUm9aU0IwWVhKblpYUWdiMllnZEdocGN5QmxkbVZ1ZEM1Y2NseHVJQ0FnS2lCQWRIbHdaU0I3UlhabGJuUlVZWEpuWlhSOVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMElHTjFjbkpsYm5SVVlYSm5aWFFvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnY0dRb2RHaHBjeWt1WTNWeWNtVnVkRlJoY21kbGREdGNjbHh1SUNCOUxGeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UlhabGJuUlVZWEpuWlhSYlhYMGdWR2hsSUdOdmJYQnZjMlZrSUhCaGRHZ2diMllnZEdocGN5QmxkbVZ1ZEM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JqYjIxd2IzTmxaRkJoZEdnb0tTQjdYSEpjYmlBZ0lDQmpiMjV6ZENCamRYSnlaVzUwVkdGeVoyVjBJRDBnY0dRb2RHaHBjeWt1WTNWeWNtVnVkRlJoY21kbGREdGNjbHh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBWR0Z5WjJWMElEMDlJRzUxYkd3cElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlGdGRPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlGdGpkWEp5Wlc1MFZHRnlaMlYwWFR0Y2NseHVJQ0I5TEZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkRiMjV6ZEdGdWRDQnZaaUJPVDA1RkxseHlYRzRnSUNBcUlFQjBlWEJsSUh0dWRXMWlaWEo5WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUU1UFRrVW9LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdNRHRjY2x4dUlDQjlMRnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRGIyNXpkR0Z1ZENCdlppQkRRVkJVVlZKSlRrZGZVRWhCVTBVdVhISmNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnUTBGUVZGVlNTVTVIWDFCSVFWTkZLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJREU3WEhKY2JpQWdmU3hjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1EyOXVjM1JoYm5RZ2IyWWdRVlJmVkVGU1IwVlVMbHh5WEc0Z0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMElFRlVYMVJCVWtkRlZDZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQXlPMXh5WEc0Z0lIMHNYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOdmJuTjBZVzUwSUc5bUlFSlZRa0pNU1U1SFgxQklRVk5GTGx4eVhHNGdJQ0FxSUVCMGVYQmxJSHR1ZFcxaVpYSjlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1oyVjBJRUpWUWtKTVNVNUhYMUJJUVZORktDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlETTdYSEpjYmlBZ2ZTeGNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVkdobElIUmhjbWRsZENCdlppQjBhR2x6SUdWMlpXNTBMbHh5WEc0Z0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMElHVjJaVzUwVUdoaGMyVW9LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdjR1FvZEdocGN5a3VaWFpsYm5SUWFHRnpaVHRjY2x4dUlDQjlMRnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCVGRHOXdJR1YyWlc1MElHSjFZbUpzYVc1bkxseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdDJiMmxrZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wYjNCUWNtOXdZV2RoZEdsdmJpZ3BJSHRjY2x4dUlDQWdJR052Ym5OMElHUmhkR0VnUFNCd1pDaDBhR2x6S1R0Y2NseHVYSEpjYmlBZ0lDQmtZWFJoTG5OMGIzQndaV1FnUFNCMGNuVmxPMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJrWVhSaExtVjJaVzUwTG5OMGIzQlFjbTl3WVdkaGRHbHZiaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh5WEc0Z0lDQWdJQ0JrWVhSaExtVjJaVzUwTG5OMGIzQlFjbTl3WVdkaGRHbHZiaWdwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDBzWEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGTjBiM0FnWlhabGJuUWdZblZpWW14cGJtY3VYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlM1p2YVdSOVhISmNiaUFnSUNvdlhISmNiaUFnYzNSdmNFbHRiV1ZrYVdGMFpWQnliM0JoWjJGMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnWTI5dWMzUWdaR0YwWVNBOUlIQmtLSFJvYVhNcE8xeHlYRzVjY2x4dUlDQWdJR1JoZEdFdWMzUnZjSEJsWkNBOUlIUnlkV1U3WEhKY2JpQWdJQ0JrWVhSaExtbHRiV1ZrYVdGMFpWTjBiM0J3WldRZ1BTQjBjblZsTzF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCa1lYUmhMbVYyWlc1MExuTjBiM0JKYlcxbFpHbGhkR1ZRY205d1lXZGhkR2x2YmlBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4eVhHNGdJQ0FnSUNCa1lYUmhMbVYyWlc1MExuTjBiM0JKYlcxbFpHbGhkR1ZRY205d1lXZGhkR2x2YmlncE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgwc1hISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRlJvWlNCbWJHRm5JSFJ2SUdKbElHSjFZbUpzYVc1bkxseHlYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZENCaWRXSmliR1Z6S0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUVKdmIyeGxZVzRvY0dRb2RHaHBjeWt1WlhabGJuUXVZblZpWW14bGN5azdYSEpjYmlBZ2ZTeGNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVkdobElHWnNZV2NnZEc4Z1ltVWdZMkZ1WTJWc1lXSnNaUzVjY2x4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNjbHh1SUNBZ0tpOWNjbHh1SUNCblpYUWdZMkZ1WTJWc1lXSnNaU2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJDYjI5c1pXRnVLSEJrS0hSb2FYTXBMbVYyWlc1MExtTmhibU5sYkdGaWJHVXBPMXh5WEc0Z0lIMHNYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOaGJtTmxiQ0IwYUdseklHVjJaVzUwTGx4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0MmIybGtmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lIQnlaWFpsYm5SRVpXWmhkV3gwS0NrZ2UxeHlYRzRnSUNBZ2MyVjBRMkZ1WTJWc1JteGhaeWh3WkNoMGFHbHpLU2s3WEhKY2JpQWdmU3hjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ZHaGxJR1pzWVdjZ2RHOGdhVzVrYVdOaGRHVWdZMkZ1WTJWc2JHRjBhVzl1SUhOMFlYUmxMbHh5WEc0Z0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHlYRzRnSUNBcUwxeHlYRzRnSUdkbGRDQmtaV1poZFd4MFVISmxkbVZ1ZEdWa0tDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIQmtLSFJvYVhNcExtTmhibU5sYkdWa08xeHlYRzRnSUgwc1hISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRlJvWlNCbWJHRm5JSFJ2SUdKbElHTnZiWEJ2YzJWa0xseHlYRzRnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZENCamIyMXdiM05sWkNncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCQ2IyOXNaV0Z1S0hCa0tIUm9hWE1wTG1WMlpXNTBMbU52YlhCdmMyVmtLVHRjY2x4dUlDQjlMRnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCVWFHVWdkVzVwZUNCMGFXMWxJRzltSUhSb2FYTWdaWFpsYm5RdVhISmNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnZEdsdFpWTjBZVzF3S0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhCa0tIUm9hWE1wTG5ScGJXVlRkR0Z0Y0R0Y2NseHVJQ0I5TEZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlVhR1VnZEdGeVoyVjBJRzltSUhSb2FYTWdaWFpsYm5RdVhISmNiaUFnSUNvZ1FIUjVjR1VnZTBWMlpXNTBWR0Z5WjJWMGZWeHlYRzRnSUNBcUlFQmtaWEJ5WldOaGRHVmtYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1oyVjBJSE55WTBWc1pXMWxiblFvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnY0dRb2RHaHBjeWt1WlhabGJuUlVZWEpuWlhRN1hISmNiaUFnZlN4Y2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dWR2hsSUdac1lXY2dkRzhnYzNSdmNDQmxkbVZ1ZENCaWRXSmliR2x1Wnk1Y2NseHVJQ0FnS2lCQWRIbHdaU0I3WW05dmJHVmhibjFjY2x4dUlDQWdLaUJBWkdWd2NtVmpZWFJsWkZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZENCallXNWpaV3hDZFdKaWJHVW9LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdjR1FvZEdocGN5a3VjM1J2Y0hCbFpEdGNjbHh1SUNCOUxGeHlYRzRnSUhObGRDQmpZVzVqWld4Q2RXSmliR1VvZG1Gc2RXVXBJSHRjY2x4dUlDQWdJR2xtSUNnaGRtRnNkV1VwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnWTI5dWMzUWdaR0YwWVNBOUlIQmtLSFJvYVhNcE8xeHlYRzVjY2x4dUlDQWdJR1JoZEdFdWMzUnZjSEJsWkNBOUlIUnlkV1U3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdSaGRHRXVaWFpsYm5RdVkyRnVZMlZzUW5WaVlteGxJRDA5UFNBblltOXZiR1ZoYmljcElIdGNjbHh1SUNBZ0lDQWdaR0YwWVM1bGRtVnVkQzVqWVc1alpXeENkV0ppYkdVZ1BTQjBjblZsTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDBzWEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGUm9aU0JtYkdGbklIUnZJR2x1WkdsallYUmxJR05oYm1ObGJHeGhkR2x2YmlCemRHRjBaUzVjY2x4dUlDQWdLaUJBZEhsd1pTQjdZbTl2YkdWaGJuMWNjbHh1SUNBZ0tpQkFaR1Z3Y21WallYUmxaRnh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkQ0J5WlhSMWNtNVdZV3gxWlNncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlBaGNHUW9kR2hwY3lrdVkyRnVZMlZzWldRN1hISmNiaUFnZlN4Y2NseHVJQ0J6WlhRZ2NtVjBkWEp1Vm1Gc2RXVW9kbUZzZFdVcElIdGNjbHh1SUNBZ0lHbG1JQ2doZG1Gc2RXVXBJSHRjY2x4dUlDQWdJQ0FnYzJWMFEyRnVZMlZzUm14aFp5aHdaQ2gwYUdsektTazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZTeGNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nU1c1cGRHbGhiR2w2WlNCMGFHbHpJR1YyWlc1MElHOWlhbVZqZEM0Z1FuVjBJR1J2SUc1dmRHaHBibWNnZFc1a1pYSWdaWFpsYm5RZ1pHbHpjR0YwWTJocGJtY3VYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUjVjR1VnVkdobElHVjJaVzUwSUhSNWNHVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQmJZblZpWW14bGN6MW1ZV3h6WlYwZ1ZHaGxJR1pzWVdjZ2RHOGdZbVVnY0c5emMybGliR1VnZEc4Z1luVmlZbXhsSUhWd0xseHlYRzRnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ1cyTmhibU5sYkdGaWJHVTlabUZzYzJWZElGUm9aU0JtYkdGbklIUnZJR0psSUhCdmMzTnBZbXhsSUhSdklHTmhibU5sYkM1Y2NseHVJQ0FnS2lCQVpHVndjbVZqWVhSbFpGeHlYRzRnSUNBcUwxeHlYRzRnSUdsdWFYUkZkbVZ1ZENncElIdGNjbHh1SUNBZ0lDOHZJRVJ2SUc1dmRHaHBibWN1WEhKY2JpQWdmVnh5WEc1OU8xeHlYRzVjY2x4dUx5OGdZR052Ym5OMGNuVmpkRzl5WUNCcGN5QnViM1FnWlc1MWJXVnlZV0pzWlM1Y2NseHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0VWMlpXNTBMbkJ5YjNSdmRIbHdaU3dnSjJOdmJuTjBjblZqZEc5eUp5d2dlMXh5WEc0Z0lIWmhiSFZsT2lCRmRtVnVkQ3hjY2x4dUlDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNYSEpjYmlBZ2QzSnBkR0ZpYkdVNklIUnlkV1ZjY2x4dWZTazdYSEpjYmx4eVhHNHZMeUJGYm5OMWNtVWdZR1YyWlc1MElHbHVjM1JoYm1ObGIyWWdkMmx1Wkc5M0xrVjJaVzUwWUNCcGN5QmdkSEoxWldBdVhISmNibWxtSUNoMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUIwZVhCbGIyWWdkMmx1Wkc5M0xrVjJaVzUwSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4eVhHNGdJRTlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWmloRmRtVnVkQzV3Y205MGIzUjVjR1VzSUhkcGJtUnZkeTVGZG1WdWRDNXdjbTkwYjNSNWNHVXBPMXh5WEc1Y2NseHVJQ0F2THlCTllXdGxJR0Z6YzI5amFXRjBhVzl1SUdadmNpQjNjbUZ3Y0dWeWN5NWNjbHh1SUNCM2NtRndjR1Z5Y3k1elpYUW9kMmx1Wkc5M0xrVjJaVzUwTG5CeWIzUnZkSGx3WlN3Z1JYWmxiblFwTzF4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dSMlYwSUhSb1pTQndjbTl3WlhKMGVTQmtaWE5qY21sd2RHOXlJSFJ2SUhKbFpHbHlaV04wSUdFZ1oybDJaVzRnY0hKdmNHVnlkSGt1WEhKY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnJaWGtnVUhKdmNHVnlkSGtnYm1GdFpTQjBieUJrWldacGJtVWdjSEp2Y0dWeWRIa2daR1Z6WTNKcGNIUnZjaTVjY2x4dUlDb2dRSEpsZEhWeWJuTWdlMUJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjbjBnVkdobElIQnliM0JsY25SNUlHUmxjMk55YVhCMGIzSWdkRzhnY21Wa2FYSmxZM1FnZEdobElIQnliM0JsY25SNUxseHlYRzRnS2lCQWNISnBkbUYwWlZ4eVhHNGdLaTljY2x4dVpuVnVZM1JwYjI0Z1pHVm1hVzVsVW1Wa2FYSmxZM1JFWlhOamNtbHdkRzl5S0d0bGVTa2dlMXh5WEc0Z0lISmxkSFZ5YmlCN1hISmNiaUFnSUNCblpYUW9LU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJ3WkNoMGFHbHpLUzVsZG1WdWRGdHJaWGxkTzF4eVhHNGdJQ0FnZlN4Y2NseHVJQ0FnSUhObGRDaDJZV3gxWlNrZ2UxeHlYRzRnSUNBZ0lDQndaQ2gwYUdsektTNWxkbVZ1ZEZ0clpYbGRJRDBnZG1Gc2RXVTdYSEpjYmlBZ0lDQjlMRnh5WEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh5WEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpWeHlYRzRnSUgwN1hISmNibjFjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJIWlhRZ2RHaGxJSEJ5YjNCbGNuUjVJR1JsYzJOeWFYQjBiM0lnZEc4Z1kyRnNiQ0JoSUdkcGRtVnVJRzFsZEdodlpDQndjbTl3WlhKMGVTNWNjbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd0bGVTQlFjbTl3WlhKMGVTQnVZVzFsSUhSdklHUmxabWx1WlNCd2NtOXdaWEowZVNCa1pYTmpjbWx3ZEc5eUxseHlYRzRnS2lCQWNtVjBkWEp1Y3lCN1VISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eWZTQlVhR1VnY0hKdmNHVnlkSGtnWkdWelkzSnBjSFJ2Y2lCMGJ5QmpZV3hzSUhSb1pTQnRaWFJvYjJRZ2NISnZjR1Z5ZEhrdVhISmNiaUFxSUVCd2NtbDJZWFJsWEhKY2JpQXFMMXh5WEc1bWRXNWpkR2x2YmlCa1pXWnBibVZEWVd4c1JHVnpZM0pwY0hSdmNpaHJaWGtwSUh0Y2NseHVJQ0J5WlhSMWNtNGdlMXh5WEc0Z0lDQWdkbUZzZFdVb0tTQjdYSEpjYmlBZ0lDQWdJR052Ym5OMElHVjJaVzUwSUQwZ2NHUW9kR2hwY3lrdVpYWmxiblE3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJsZG1WdWRGdHJaWGxkTG1Gd2NHeDVLR1YyWlc1MExDQmhjbWQxYldWdWRITXBPMXh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjY2x4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVmNjbHh1SUNCOU8xeHlYRzU5WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUkdWbWFXNWxJRzVsZHlCM2NtRndjR1Z5SUdOc1lYTnpMbHh5WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQkNZWE5sUlhabGJuUWdWR2hsSUdKaGMyVWdkM0poY0hCbGNpQmpiR0Z6Y3k1Y2NseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSEJ5YjNSdklGUm9aU0J3Y205MGIzUjVjR1VnYjJZZ2RHaGxJRzl5YVdkcGJtRnNJR1YyWlc1MExseHlYRzRnS2lCQWNtVjBkWEp1Y3lCN1JuVnVZM1JwYjI1OUlGUm9aU0JrWldacGJtVmtJSGR5WVhCd1pYSWdZMnhoYzNNdVhISmNiaUFxSUVCd2NtbDJZWFJsWEhKY2JpQXFMMXh5WEc1bWRXNWpkR2x2YmlCa1pXWnBibVZYY21Gd2NHVnlLRUpoYzJWRmRtVnVkQ3dnY0hKdmRHOHBJSHRjY2x4dUlDQmpiMjV6ZENCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb2NISnZkRzhwTzF4eVhHNGdJR2xtSUNoclpYbHpMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUVKaGMyVkZkbVZ1ZER0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtpQkRkWE4wYjIxRmRtVnVkQ0FxTDF4eVhHNGdJR1oxYm1OMGFXOXVJRU4xYzNSdmJVVjJaVzUwS0dWMlpXNTBWR0Z5WjJWMExDQmxkbVZ1ZENrZ2UxeHlYRzRnSUNBZ1FtRnpaVVYyWlc1MExtTmhiR3dvZEdocGN5d2daWFpsYm5SVVlYSm5aWFFzSUdWMlpXNTBLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRU4xYzNSdmJVVjJaVzUwTG5CeWIzUnZkSGx3WlNBOUlFOWlhbVZqZEM1amNtVmhkR1VvUW1GelpVVjJaVzUwTG5CeWIzUnZkSGx3WlN3Z2UxeHlYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSTZJSHNnZG1Gc2RXVTZJRU4xYzNSdmJVVjJaVzUwTENCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc0lIZHlhWFJoWW14bE9pQjBjblZsSUgxY2NseHVJQ0I5S1R0Y2NseHVYSEpjYmlBZ0x5OGdSR1ZtYVc1bElHRmpZMlZ6YzI5eWN5NWNjbHh1SUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHdGxlWE11YkdWdVozUm9PeUFySzJrcElIdGNjbHh1SUNBZ0lHTnZibk4wSUd0bGVTQTlJR3RsZVhOYmFWMDdYSEpjYmlBZ0lDQnBaaUFvSVNoclpYa2dhVzRnUW1GelpVVjJaVzUwTG5CeWIzUnZkSGx3WlNrcElIdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ1pHVnpZM0pwY0hSdmNpQTlJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2NISnZkRzhzSUd0bGVTazdYSEpjYmlBZ0lDQWdJR052Ym5OMElHbHpSblZ1WXlBOUlIUjVjR1Z2WmlCa1pYTmpjbWx3ZEc5eUxuWmhiSFZsSUQwOVBTQW5ablZ1WTNScGIyNG5PMXh5WEc0Z0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1hISmNiaUFnSUNBZ0lDQWdRM1Z6ZEc5dFJYWmxiblF1Y0hKdmRHOTBlWEJsTEZ4eVhHNGdJQ0FnSUNBZ0lHdGxlU3hjY2x4dUlDQWdJQ0FnSUNCcGMwWjFibU1nUHlCa1pXWnBibVZEWVd4c1JHVnpZM0pwY0hSdmNpaHJaWGtwSURvZ1pHVm1hVzVsVW1Wa2FYSmxZM1JFWlhOamNtbHdkRzl5S0d0bGVTbGNjbHh1SUNBZ0lDQWdLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSEpsZEhWeWJpQkRkWE4wYjIxRmRtVnVkRHRjY2x4dWZWeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFZGxkQ0IwYUdVZ2QzSmhjSEJsY2lCamJHRnpjeUJ2WmlCaElHZHBkbVZ1SUhCeWIzUnZkSGx3WlM1Y2NseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSEJ5YjNSdklGUm9aU0J3Y205MGIzUjVjR1VnYjJZZ2RHaGxJRzl5YVdkcGJtRnNJR1YyWlc1MElIUnZJR2RsZENCcGRITWdkM0poY0hCbGNpNWNjbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZTQlVhR1VnZDNKaGNIQmxjaUJqYkdGemN5NWNjbHh1SUNvZ1FIQnlhWFpoZEdWY2NseHVJQ292WEhKY2JtWjFibU4wYVc5dUlHZGxkRmR5WVhCd1pYSW9jSEp2ZEc4cElIdGNjbHh1SUNCcFppQW9jSEp2ZEc4Z1BUMGdiblZzYkNCOGZDQndjbTkwYnlBOVBUMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlFVjJaVzUwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnYkdWMElIZHlZWEJ3WlhJZ1BTQjNjbUZ3Y0dWeWN5NW5aWFFvY0hKdmRHOHBPMXh5WEc0Z0lHbG1JQ2gzY21Gd2NHVnlJRDA5SUc1MWJHd3BJSHRjY2x4dUlDQWdJSGR5WVhCd1pYSWdQU0JrWldacGJtVlhjbUZ3Y0dWeUtHZGxkRmR5WVhCd1pYSW9UMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0hCeWIzUnZLU2tzSUhCeWIzUnZLVHRjY2x4dUlDQWdJSGR5WVhCd1pYSnpMbk5sZENod2NtOTBieXdnZDNKaGNIQmxjaWs3WEhKY2JpQWdmVnh5WEc0Z0lISmxkSFZ5YmlCM2NtRndjR1Z5TzF4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dWM0poY0NCaElHZHBkbVZ1SUdWMlpXNTBJSFJ2SUcxaGJtRm5aVzFsYm5RZ1lTQmthWE53WVhSamFHbHVaeTVjY2x4dUlDb2dRSEJoY21GdElIdEZkbVZ1ZEZSaGNtZGxkSDBnWlhabGJuUlVZWEpuWlhRZ1ZHaGxJR1YyWlc1MElIUmhjbWRsZENCdlppQjBhR2x6SUdScGMzQmhkR05vYVc1bkxseHlYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnWlhabGJuUWdWR2hsSUdWMlpXNTBJSFJ2SUhkeVlYQXVYSEpjYmlBcUlFQnlaWFIxY201eklIdEZkbVZ1ZEgwZ1ZHaGxJSGR5WVhCd1pYSWdhVzV6ZEdGdVkyVXVYSEpjYmlBcUlFQndjbWwyWVhSbFhISmNiaUFxTDF4eVhHNW1kVzVqZEdsdmJpQjNjbUZ3UlhabGJuUW9aWFpsYm5SVVlYSm5aWFFzSUdWMlpXNTBLU0I3WEhKY2JpQWdZMjl1YzNRZ1YzSmhjSEJsY2lBOUlHZGxkRmR5WVhCd1pYSW9UMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0dWMlpXNTBLU2s3WEhKY2JpQWdjbVYwZFhKdUlHNWxkeUJYY21Gd2NHVnlLR1YyWlc1MFZHRnlaMlYwTENCbGRtVnVkQ2s3WEhKY2JuMWNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkhaWFFnZEdobElHbHRiV1ZrYVdGMFpWTjBiM0J3WldRZ1pteGhaeUJ2WmlCaElHZHBkbVZ1SUdWMlpXNTBMbHh5WEc0Z0tpQkFjR0Z5WVcwZ2UwVjJaVzUwZlNCbGRtVnVkQ0JVYUdVZ1pYWmxiblFnZEc4Z1oyVjBMbHh5WEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdWR2hsSUdac1lXY2dkRzhnYzNSdmNDQndjbTl3WVdkaGRHbHZiaUJwYlcxbFpHbGhkR1ZzZVM1Y2NseHVJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDb3ZYSEpjYm1aMWJtTjBhVzl1SUdselUzUnZjSEJsWkNobGRtVnVkQ2tnZTF4eVhHNGdJSEpsZEhWeWJpQndaQ2hsZG1WdWRDa3VhVzF0WldScFlYUmxVM1J2Y0hCbFpEdGNjbHh1ZlZ4eVhHNWNjbHh1THlvcVhISmNiaUFxSUZObGRDQjBhR1VnWTNWeWNtVnVkQ0JsZG1WdWRDQndhR0Z6WlNCdlppQmhJR2RwZG1WdUlHVjJaVzUwTGx4eVhHNGdLaUJBY0dGeVlXMGdlMFYyWlc1MGZTQmxkbVZ1ZENCVWFHVWdaWFpsYm5RZ2RHOGdjMlYwSUdOMWNuSmxiblFnZEdGeVoyVjBMbHh5WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1pYWmxiblJRYUdGelpTQk9aWGNnWlhabGJuUWdjR2hoYzJVdVhISmNiaUFxSUVCeVpYUjFjbTV6SUh0MmIybGtmVnh5WEc0Z0tpQkFjSEpwZG1GMFpWeHlYRzRnS2k5Y2NseHVablZ1WTNScGIyNGdjMlYwUlhabGJuUlFhR0Z6WlNobGRtVnVkQ3dnWlhabGJuUlFhR0Z6WlNrZ2UxeHlYRzRnSUhCa0tHVjJaVzUwS1M1bGRtVnVkRkJvWVhObElEMGdaWFpsYm5SUWFHRnpaVHRjY2x4dWZWeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlGTmxkQ0IwYUdVZ1kzVnljbVZ1ZENCMFlYSm5aWFFnYjJZZ1lTQm5hWFpsYmlCbGRtVnVkQzVjY2x4dUlDb2dRSEJoY21GdElIdEZkbVZ1ZEgwZ1pYWmxiblFnVkdobElHVjJaVzUwSUhSdklITmxkQ0JqZFhKeVpXNTBJSFJoY21kbGRDNWNjbHh1SUNvZ1FIQmhjbUZ0SUh0RmRtVnVkRlJoY21kbGRIeHVkV3hzZlNCamRYSnlaVzUwVkdGeVoyVjBJRTVsZHlCamRYSnlaVzUwSUhSaGNtZGxkQzVjY2x4dUlDb2dRSEpsZEhWeWJuTWdlM1p2YVdSOVhISmNiaUFxSUVCd2NtbDJZWFJsWEhKY2JpQXFMMXh5WEc1bWRXNWpkR2x2YmlCelpYUkRkWEp5Wlc1MFZHRnlaMlYwS0dWMlpXNTBMQ0JqZFhKeVpXNTBWR0Z5WjJWMEtTQjdYSEpjYmlBZ2NHUW9aWFpsYm5RcExtTjFjbkpsYm5SVVlYSm5aWFFnUFNCamRYSnlaVzUwVkdGeVoyVjBPMXh5WEc1OVhISmNibHh5WEc0dktpcGNjbHh1SUNvZ1UyVjBJR0VnY0dGemMybDJaU0JzYVhOMFpXNWxjaUJ2WmlCaElHZHBkbVZ1SUdWMlpXNTBMbHh5WEc0Z0tpQkFjR0Z5WVcwZ2UwVjJaVzUwZlNCbGRtVnVkQ0JVYUdVZ1pYWmxiblFnZEc4Z2MyVjBJR04xY25KbGJuUWdkR0Z5WjJWMExseHlYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1Zkc1MWJHeDlJSEJoYzNOcGRtVk1hWE4wWlc1bGNpQk9aWGNnY0dGemMybDJaU0JzYVhOMFpXNWxjaTVjY2x4dUlDb2dRSEpsZEhWeWJuTWdlM1p2YVdSOVhISmNiaUFxSUVCd2NtbDJZWFJsWEhKY2JpQXFMMXh5WEc1bWRXNWpkR2x2YmlCelpYUlFZWE56YVhabFRHbHpkR1Z1WlhJb1pYWmxiblFzSUhCaGMzTnBkbVZNYVhOMFpXNWxjaWtnZTF4eVhHNGdJSEJrS0dWMlpXNTBLUzV3WVhOemFYWmxUR2x6ZEdWdVpYSWdQU0J3WVhOemFYWmxUR2x6ZEdWdVpYSTdYSEpjYm4xY2NseHVYSEpjYmk4cUtseHlYRzRnS2lCQWRIbHdaV1JsWmlCN2IySnFaV04wZlNCTWFYTjBaVzVsY2s1dlpHVmNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdEdkVzVqZEdsdmJuMGdiR2x6ZEdWdVpYSmNjbHh1SUNvZ1FIQnliM0JsY25SNUlIc3hmREo4TTMwZ2JHbHpkR1Z1WlhKVWVYQmxYSEpjYmlBcUlFQndjbTl3WlhKMGVTQjdZbTl2YkdWaGJuMGdjR0Z6YzJsMlpWeHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UySnZiMnhsWVc1OUlHOXVZMlZjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHRNYVhOMFpXNWxjazV2WkdWOGJuVnNiSDBnYm1WNGRGeHlYRzRnS2lCQWNISnBkbUYwWlZ4eVhHNGdLaTljY2x4dVhISmNiaThxS2x4eVhHNGdLaUJBZEhsd1pTQjdWMlZoYTAxaGNEeHZZbXBsWTNRc0lFMWhjRHh6ZEhKcGJtY3NJRXhwYzNSbGJtVnlUbTlrWlQ0K2ZWeHlYRzRnS2lCQWNISnBkbUYwWlZ4eVhHNGdLaTljY2x4dVkyOXVjM1FnYkdsemRHVnVaWEp6VFdGd0lEMGdibVYzSUZkbFlXdE5ZWEFvS1R0Y2NseHVYSEpjYmk4dklFeHBjM1JsYm1WeUlIUjVjR1Z6WEhKY2JtTnZibk4wSUVOQlVGUlZVa1VnUFNBeE8xeHlYRzVqYjI1emRDQkNWVUpDVEVVZ1BTQXlPMXh5WEc1amIyNXpkQ0JCVkZSU1NVSlZWRVVnUFNBek8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFTm9aV05ySUhkb1pYUm9aWElnWVNCbmFYWmxiaUIyWVd4MVpTQnBjeUJoYmlCdlltcGxZM1FnYjNJZ2JtOTBMbHh5WEc0Z0tpQkFjR0Z5WVcwZ2UyRnVlWDBnZUNCVWFHVWdkbUZzZFdVZ2RHOGdZMmhsWTJzdVhISmNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCZ2RISjFaV0FnYVdZZ2RHaGxJSFpoYkhWbElHbHpJR0Z1SUc5aWFtVmpkQzVjY2x4dUlDb3ZYSEpjYm1aMWJtTjBhVzl1SUdselQySnFaV04wS0hncElIdGNjbHh1SUNCeVpYUjFjbTRnZUNBaFBUMGdiblZzYkNBbUppQjBlWEJsYjJZZ2VDQTlQVDBnSjI5aWFtVmpkQ2M3SUM4dlpYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTF5WlhOMGNtbGpkR1ZrTFhONWJuUmhlRnh5WEc1OVhISmNibHh5WEc0dktpcGNjbHh1SUNvZ1IyVjBJR3hwYzNSbGJtVnljeTVjY2x4dUlDb2dRSEJoY21GdElIdEZkbVZ1ZEZSaGNtZGxkSDBnWlhabGJuUlVZWEpuWlhRZ1ZHaGxJR1YyWlc1MElIUmhjbWRsZENCMGJ5Qm5aWFF1WEhKY2JpQXFJRUJ5WlhSMWNtNXpJSHROWVhBOGMzUnlhVzVuTENCTWFYTjBaVzVsY2s1dlpHVStmU0JVYUdVZ2JHbHpkR1Z1WlhKekxseHlYRzRnS2lCQWNISnBkbUYwWlZ4eVhHNGdLaTljY2x4dVpuVnVZM1JwYjI0Z1oyVjBUR2x6ZEdWdVpYSnpLR1YyWlc1MFZHRnlaMlYwS1NCN1hISmNiaUFnWTI5dWMzUWdiR2x6ZEdWdVpYSnpJRDBnYkdsemRHVnVaWEp6VFdGd0xtZGxkQ2hsZG1WdWRGUmhjbWRsZENrN1hISmNiaUFnYVdZZ0tHeHBjM1JsYm1WeWN5QTlQU0J1ZFd4c0tTQjdYSEpjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpSjNSb2FYTW5JR2x6SUdWNGNHVmpkR1ZrSUdGdUlFVjJaVzUwVkdGeVoyVjBJRzlpYW1WamRDd2dZblYwSUdkdmRDQmhibTkwYUdWeUlIWmhiSFZsTGx3aUtUdGNjbHh1SUNCOVhISmNiaUFnY21WMGRYSnVJR3hwYzNSbGJtVnljenRjY2x4dWZWeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFZGxkQ0IwYUdVZ2NISnZjR1Z5ZEhrZ1pHVnpZM0pwY0hSdmNpQm1iM0lnZEdobElHVjJaVzUwSUdGMGRISnBZblYwWlNCdlppQmhJR2RwZG1WdUlHVjJaVzUwTGx4eVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdaWFpsYm5ST1lXMWxJRlJvWlNCbGRtVnVkQ0J1WVcxbElIUnZJR2RsZENCd2NtOXdaWEowZVNCa1pYTmpjbWx3ZEc5eUxseHlYRzRnS2lCQWNtVjBkWEp1Y3lCN1VISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eWZTQlVhR1VnY0hKdmNHVnlkSGtnWkdWelkzSnBjSFJ2Y2k1Y2NseHVJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDb3ZYSEpjYm1aMWJtTjBhVzl1SUdSbFptbHVaVVYyWlc1MFFYUjBjbWxpZFhSbFJHVnpZM0pwY0hSdmNpaGxkbVZ1ZEU1aGJXVXBJSHRjY2x4dUlDQnlaWFIxY200Z2UxeHlYRzRnSUNBZ1oyVjBLQ2tnZTF4eVhHNGdJQ0FnSUNCamIyNXpkQ0JzYVhOMFpXNWxjbk1nUFNCblpYUk1hWE4wWlc1bGNuTW9kR2hwY3lrN1hISmNiaUFnSUNBZ0lHeGxkQ0J1YjJSbElEMGdiR2x6ZEdWdVpYSnpMbWRsZENobGRtVnVkRTVoYldVcE8xeHlYRzRnSUNBZ0lDQjNhR2xzWlNBb2JtOWtaU0FoUFNCdWRXeHNLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLRzV2WkdVdWJHbHpkR1Z1WlhKVWVYQmxJRDA5UFNCQlZGUlNTVUpWVkVVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1YjJSbExteHBjM1JsYm1WeU8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCdWIyUmxJRDBnYm05a1pTNXVaWGgwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNCelpYUW9iR2x6ZEdWdVpYSXBJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCc2FYTjBaVzVsY2lBaFBUMGdKMloxYm1OMGFXOXVKeUFtSmlBaGFYTlBZbXBsWTNRb2JHbHpkR1Z1WlhJcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYkdsemRHVnVaWElnUFNCdWRXeHNPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWEJoY21GdExYSmxZWE56YVdkdVhISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2JHbHpkR1Z1WlhKeklEMGdaMlYwVEdsemRHVnVaWEp6S0hSb2FYTXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdWSEpoZG1WeWMyVWdkRzhnZEdobElIUmhhV3dnZDJocGJHVWdjbVZ0YjNacGJtY2diMnhrSUhaaGJIVmxMbHh5WEc0Z0lDQWdJQ0JzWlhRZ2NISmxkaUE5SUc1MWJHdzdYSEpjYmlBZ0lDQWdJR3hsZENCdWIyUmxJRDBnYkdsemRHVnVaWEp6TG1kbGRDaGxkbVZ1ZEU1aGJXVXBPMXh5WEc0Z0lDQWdJQ0IzYUdsc1pTQW9ibTlrWlNBaFBTQnVkV3hzS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0c1dlpHVXViR2x6ZEdWdVpYSlVlWEJsSUQwOVBTQkJWRlJTU1VKVlZFVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJRkpsYlc5MlpTQnZiR1FnZG1Gc2RXVXVYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jSEpsZGlBaFBUMGdiblZzYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtVjJMbTVsZUhRZ1BTQnViMlJsTG01bGVIUTdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHNXZaR1V1Ym1WNGRDQWhQVDBnYm5Wc2JDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNhWE4wWlc1bGNuTXVjMlYwS0dWMlpXNTBUbUZ0WlN3Z2JtOWtaUzV1WlhoMEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hwYzNSbGJtVnljeTVrWld4bGRHVW9aWFpsYm5ST1lXMWxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NISmxkaUE5SUc1dlpHVTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J1YjJSbElEMGdibTlrWlM1dVpYaDBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQXZMeUJCWkdRZ2JtVjNJSFpoYkhWbExseHlYRzRnSUNBZ0lDQnBaaUFvYkdsemRHVnVaWElnSVQwOUlHNTFiR3dwSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdVpYZE9iMlJsSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYkdsemRHVnVaWElzWEhKY2JpQWdJQ0FnSUNBZ0lDQnNhWE4wWlc1bGNsUjVjR1U2SUVGVVZGSkpRbFZVUlN4Y2NseHVJQ0FnSUNBZ0lDQWdJSEJoYzNOcGRtVTZJR1poYkhObExGeHlYRzRnSUNBZ0lDQWdJQ0FnYjI1alpUb2dabUZzYzJVc1hISmNiaUFnSUNBZ0lDQWdJQ0J1WlhoME9pQnVkV3hzWEhKY2JpQWdJQ0FnSUNBZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2NISmxkaUE5UFQwZ2JuVnNiQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdiR2x6ZEdWdVpYSnpMbk5sZENobGRtVnVkRTVoYldVc0lHNWxkMDV2WkdVcE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCd2NtVjJMbTVsZUhRZ1BTQnVaWGRPYjJSbE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlN4Y2NseHVJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2NseHVJQ0FnSUdWdWRXMWxjbUZpYkdVNklIUnlkV1ZjY2x4dUlDQjlPMXh5WEc1OVhISmNibHh5WEc0dktpcGNjbHh1SUNvZ1JHVm1hVzVsSUdGdUlHVjJaVzUwSUdGMGRISnBZblYwWlNBb1pTNW5MaUJnWlhabGJuUlVZWEpuWlhRdWIyNWpiR2xqYTJBcExseHlYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnWlhabGJuUlVZWEpuWlhSUWNtOTBiM1I1Y0dVZ1ZHaGxJR1YyWlc1MElIUmhjbWRsZENCd2NtOTBiM1I1Y0dVZ2RHOGdaR1ZtYVc1bElHRnVJR1YyWlc1MElHRjBkSEppYVhSbExseHlYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWlhabGJuUk9ZVzFsSUZSb1pTQmxkbVZ1ZENCdVlXMWxJSFJ2SUdSbFptbHVaUzVjY2x4dUlDb2dRSEpsZEhWeWJuTWdlM1p2YVdSOVhISmNiaUFxTDF4eVhHNW1kVzVqZEdsdmJpQmtaV1pwYm1WRmRtVnVkRUYwZEhKcFluVjBaU2hsZG1WdWRGUmhjbWRsZEZCeWIzUnZkSGx3WlN3Z1pYWmxiblJPWVcxbEtTQjdYSEpjYmlBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1YyWlc1MFZHRnlaMlYwVUhKdmRHOTBlWEJsTENCZ2IyNGtlMlYyWlc1MFRtRnRaWDFnTENCa1pXWnBibVZGZG1WdWRFRjBkSEpwWW5WMFpVUmxjMk55YVhCMGIzSW9aWFpsYm5ST1lXMWxLU2s3WEhKY2JuMWNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkVaV1pwYm1VZ1lTQmpkWE4wYjIwZ1JYWmxiblJVWVhKblpYUWdkMmwwYUNCbGRtVnVkQ0JoZEhSeWFXSjFkR1Z6TGx4eVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVoxdGRmU0JsZG1WdWRFNWhiV1Z6SUVWMlpXNTBJRzVoYldWeklHWnZjaUJsZG1WdWRDQmhkSFJ5YVdKMWRHVnpMbHh5WEc0Z0tpQkFjbVYwZFhKdWN5QjdSWFpsYm5SVVlYSm5aWFI5SUZSb1pTQmpkWE4wYjIwZ1JYWmxiblJVWVhKblpYUXVYSEpjYmlBcUlFQndjbWwyWVhSbFhISmNiaUFxTDF4eVhHNW1kVzVqZEdsdmJpQmtaV1pwYm1WRGRYTjBiMjFGZG1WdWRGUmhjbWRsZENobGRtVnVkRTVoYldWektTQjdYSEpjYmlBZ0x5b3FJRU4xYzNSdmJVVjJaVzUwVkdGeVoyVjBJQ292WEhKY2JpQWdablZ1WTNScGIyNGdRM1Z6ZEc5dFJYWmxiblJVWVhKblpYUW9LU0I3WEhKY2JpQWdJQ0JGZG1WdWRGUmhjbWRsZEM1allXeHNLSFJvYVhNcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1EzVnpkRzl0UlhabGJuUlVZWEpuWlhRdWNISnZkRzkwZVhCbElEMGdUMkpxWldOMExtTnlaV0YwWlNoRmRtVnVkRlJoY21kbGRDNXdjbTkwYjNSNWNHVXNJSHRjY2x4dUlDQWdJR052Ym5OMGNuVmpkRzl5T2lCN1hISmNiaUFnSUNBZ0lIWmhiSFZsT2lCRGRYTjBiMjFGZG1WdWRGUmhjbWRsZEN4Y2NseHVJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHlYRzRnSUNBZ0lDQjNjbWwwWVdKc1pUb2dkSEoxWlZ4eVhHNGdJQ0FnZlZ4eVhHNGdJSDBwTzF4eVhHNWNjbHh1SUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHVjJaVzUwVG1GdFpYTXViR1Z1WjNSb095QXJLMmtwSUh0Y2NseHVJQ0FnSUdSbFptbHVaVVYyWlc1MFFYUjBjbWxpZFhSbEtFTjFjM1J2YlVWMlpXNTBWR0Z5WjJWMExuQnliM1J2ZEhsd1pTd2daWFpsYm5ST1lXMWxjMXRwWFNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCeVpYUjFjbTRnUTNWemRHOXRSWFpsYm5SVVlYSm5aWFE3WEhKY2JuMWNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkZkbVZ1ZEZSaGNtZGxkQzVjY2x4dUlDcGNjbHh1SUNvZ0xTQlVhR2x6SUdseklHTnZibk4wY25WamRHOXlJR2xtSUc1dklHRnlaM1Z0Wlc1MGN5NWNjbHh1SUNvZ0xTQlVhR2x6SUdseklHRWdablZ1WTNScGIyNGdkMmhwWTJnZ2NtVjBkWEp1Y3lCaElFTjFjM1J2YlVWMlpXNTBWR0Z5WjJWMElHTnZibk4wY25WamRHOXlJR2xtSUhSb1pYSmxJR0Z5WlNCaGNtZDFiV1Z1ZEhNdVhISmNiaUFxWEhKY2JpQXFJRVp2Y2lCbGVHRnRjR3hsT2x4eVhHNGdLbHh5WEc0Z0tpQWdJQ0FnWTJ4aGMzTWdRU0JsZUhSbGJtUnpJRVYyWlc1MFZHRnlaMlYwSUh0OVhISmNiaUFxSUNBZ0lDQmpiR0Z6Y3lCQ0lHVjRkR1Z1WkhNZ1JYWmxiblJVWVhKblpYUW9YQ0p0WlhOellXZGxYQ0lwSUh0OVhISmNiaUFxSUNBZ0lDQmpiR0Z6Y3lCRElHVjRkR1Z1WkhNZ1JYWmxiblJVWVhKblpYUW9YQ0p0WlhOellXZGxYQ0lzSUZ3aVpYSnliM0pjSWlrZ2UzMWNjbHh1SUNvZ0lDQWdJR05zWVhOeklFUWdaWGgwWlc1a2N5QkZkbVZ1ZEZSaGNtZGxkQ2hiWENKdFpYTnpZV2RsWENJc0lGd2laWEp5YjNKY0lsMHBJSHQ5WEhKY2JpQXFMMXh5WEc1bWRXNWpkR2x2YmlCRmRtVnVkRlJoY21kbGRDZ3BJSHRjY2x4dUlDQXZLbVZ6YkdsdWRDMWthWE5oWW14bElHTnZibk5wYzNSbGJuUXRjbVYwZFhKdUlDb3ZYSEpjYmlBZ2FXWWdLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkZkbVZ1ZEZSaGNtZGxkQ2tnZTF4eVhHNGdJQ0FnYkdsemRHVnVaWEp6VFdGd0xuTmxkQ2gwYUdsekxDQnVaWGNnVFdGd0tDa3BPMXh5WEc0Z0lDQWdjbVYwZFhKdU8xeHlYRzRnSUgxY2NseHVJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBOVBUMGdNU0FtSmlCQmNuSmhlUzVwYzBGeWNtRjVLR0Z5WjNWdFpXNTBjMXN3WFNrcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCa1pXWnBibVZEZFhOMGIyMUZkbVZ1ZEZSaGNtZGxkQ2hoY21kMWJXVnVkSE5iTUYwcE8xeHlYRzRnSUgxY2NseHVJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lEQXBJSHRjY2x4dUlDQWdJR052Ym5OMElIUjVjR1Z6SUQwZ2JtVjNJRUZ5Y21GNUtHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdncE8xeHlYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQmhjbWQxYldWdWRITXViR1Z1WjNSb095QXJLMmtwSUh0Y2NseHVJQ0FnSUNBZ2RIbHdaWE5iYVYwZ1BTQmhjbWQxYldWdWRITmJhVjA3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdaR1ZtYVc1bFEzVnpkRzl0UlhabGJuUlVZWEpuWlhRb2RIbHdaWE1wTzF4eVhHNGdJSDFjY2x4dUlDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2REWVc1dWIzUWdZMkZzYkNCaElHTnNZWE56SUdGeklHRWdablZ1WTNScGIyNG5LVHRjY2x4dUlDQXZLbVZ6YkdsdWRDMWxibUZpYkdVZ1kyOXVjMmx6ZEdWdWRDMXlaWFIxY200Z0tpOWNjbHh1ZlZ4eVhHNWNjbHh1THk4Z1UyaHZkV3hrSUdKbElHVnVkVzFsY21GaWJHVXNJR0oxZENCamJHRnpjeUJ0WlhSb2IyUnpJR0Z5WlNCdWIzUWdaVzUxYldWeVlXSnNaUzVjY2x4dVJYWmxiblJVWVhKblpYUXVjSEp2ZEc5MGVYQmxJRDBnZTF4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVGa1pDQmhJR2RwZG1WdUlHeHBjM1JsYm1WeUlIUnZJSFJvYVhNZ1pYWmxiblFnZEdGeVoyVjBMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmxkbVZ1ZEU1aGJXVWdWR2hsSUdWMlpXNTBJRzVoYldVZ2RHOGdZV1JrTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUd4cGMzUmxibVZ5SUZSb1pTQnNhWE4wWlc1bGNpQjBieUJoWkdRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1Zkh0allYQjBkWEpsUHpwaWIyOXNaV0Z1TEhCaGMzTnBkbVUvT21KdmIyeGxZVzRzYjI1alpUODZZbTl2YkdWaGJuMTlJRnR2Y0hScGIyNXpYU0JVYUdVZ2IzQjBhVzl1Y3lCbWIzSWdkR2hwY3lCc2FYTjBaVzVsY2k1Y2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2RtOXBaSDFjY2x4dUlDQWdLaTljY2x4dUlDQmhaR1JGZG1WdWRFeHBjM1JsYm1WeUtHVjJaVzUwVG1GdFpTd2diR2x6ZEdWdVpYSXNJRzl3ZEdsdmJuTXBJSHRjY2x4dUlDQWdJR2xtSUNoc2FYTjBaVzVsY2lBOVBTQnVkV3hzS1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JHbHpkR1Z1WlhJZ0lUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0lXbHpUMkpxWldOMEtHeHBjM1JsYm1WeUtTa2dlMXh5WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aUoyeHBjM1JsYm1WeUp5QnphRzkxYkdRZ1ltVWdZU0JtZFc1amRHbHZiaUJ2Y2lCaGJpQnZZbXBsWTNRdVhDSXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJR3hwYzNSbGJtVnljeUE5SUdkbGRFeHBjM1JsYm1WeWN5aDBhR2x6S1R0Y2NseHVJQ0FnSUdOdmJuTjBJRzl3ZEdsdmJuTkpjMDlpYWlBOUlHbHpUMkpxWldOMEtHOXdkR2x2Ym5NcE8xeHlYRzRnSUNBZ1kyOXVjM1FnWTJGd2RIVnlaU0E5SUc5d2RHbHZibk5KYzA5aWFpQS9JRUp2YjJ4bFlXNG9iM0IwYVc5dWN5NWpZWEIwZFhKbEtTQTZJRUp2YjJ4bFlXNG9iM0IwYVc5dWN5azdYSEpjYmlBZ0lDQmpiMjV6ZENCc2FYTjBaVzVsY2xSNWNHVWdQU0JqWVhCMGRYSmxJRDhnUTBGUVZGVlNSU0E2SUVKVlFrSk1SVHRjY2x4dUlDQWdJR052Ym5OMElHNWxkMDV2WkdVZ1BTQjdYSEpjYmlBZ0lDQWdJR3hwYzNSbGJtVnlMRnh5WEc0Z0lDQWdJQ0JzYVhOMFpXNWxjbFI1Y0dVc1hISmNiaUFnSUNBZ0lIQmhjM05wZG1VNklHOXdkR2x2Ym5OSmMwOWlhaUFtSmlCQ2IyOXNaV0Z1S0c5d2RHbHZibk11Y0dGemMybDJaU2tzWEhKY2JpQWdJQ0FnSUc5dVkyVTZJRzl3ZEdsdmJuTkpjMDlpYWlBbUppQkNiMjlzWldGdUtHOXdkR2x2Ym5NdWIyNWpaU2tzWEhKY2JpQWdJQ0FnSUc1bGVIUTZJRzUxYkd4Y2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdMeThnVTJWMElHbDBJR0Z6SUhSb1pTQm1hWEp6ZENCdWIyUmxJR2xtSUhSb1pTQm1hWEp6ZENCdWIyUmxJR2x6SUc1MWJHd3VYSEpjYmlBZ0lDQnNaWFFnYm05a1pTQTlJR3hwYzNSbGJtVnljeTVuWlhRb1pYWmxiblJPWVcxbEtUdGNjbHh1SUNBZ0lHbG1JQ2h1YjJSbElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ2JHbHpkR1Z1WlhKekxuTmxkQ2hsZG1WdWRFNWhiV1VzSUc1bGQwNXZaR1VwTzF4eVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5OGdWSEpoZG1WeWMyVWdkRzhnZEdobElIUmhhV3dnZDJocGJHVWdZMmhsWTJ0cGJtY2daSFZ3YkdsallYUnBiMjR1TGx4eVhHNGdJQ0FnYkdWMElIQnlaWFlnUFNCdWRXeHNPMXh5WEc0Z0lDQWdkMmhwYkdVZ0tHNXZaR1VnSVQwZ2JuVnNiQ2tnZTF4eVhHNGdJQ0FnSUNCcFppQW9ibTlrWlM1c2FYTjBaVzVsY2lBOVBUMGdiR2x6ZEdWdVpYSWdKaVlnYm05a1pTNXNhWE4wWlc1bGNsUjVjR1VnUFQwOUlHeHBjM1JsYm1WeVZIbHdaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRk5vYjNWc1pDQnBaMjV2Y21VZ1pIVndiR2xqWVhScGIyNHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUhCeVpYWWdQU0J1YjJSbE8xeHlYRzRnSUNBZ0lDQnViMlJsSUQwZ2JtOWtaUzV1WlhoME8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzh2SUVGa1pDQnBkQzVjY2x4dUlDQWdJSEJ5WlhZdWJtVjRkQ0E5SUc1bGQwNXZaR1U3WEhKY2JpQWdmU3hjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VtVnRiM1psSUdFZ1oybDJaVzRnYkdsemRHVnVaWElnWm5KdmJTQjBhR2x6SUdWMlpXNTBJSFJoY21kbGRDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1pYWmxiblJPWVcxbElGUm9aU0JsZG1WdWRDQnVZVzFsSUhSdklISmxiVzkyWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCc2FYTjBaVzVsY2lCVWFHVWdiR2x6ZEdWdVpYSWdkRzhnY21WdGIzWmxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJueDdZMkZ3ZEhWeVpUODZZbTl2YkdWaGJpeHdZWE56YVhabFB6cGliMjlzWldGdUxHOXVZMlUvT21KdmIyeGxZVzU5ZlNCYmIzQjBhVzl1YzEwZ1ZHaGxJRzl3ZEdsdmJuTWdabTl5SUhSb2FYTWdiR2x6ZEdWdVpYSXVYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlM1p2YVdSOVhISmNiaUFnSUNvdlhISmNiaUFnY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lobGRtVnVkRTVoYldVc0lHeHBjM1JsYm1WeUxDQnZjSFJwYjI1ektTQjdYSEpjYmlBZ0lDQnBaaUFvYkdsemRHVnVaWElnUFQwZ2JuVnNiQ2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1kyOXVjM1FnYkdsemRHVnVaWEp6SUQwZ1oyVjBUR2x6ZEdWdVpYSnpLSFJvYVhNcE8xeHlYRzRnSUNBZ1kyOXVjM1FnWTJGd2RIVnlaU0E5SUdselQySnFaV04wS0c5d2RHbHZibk1wSUQ4Z1FtOXZiR1ZoYmlodmNIUnBiMjV6TG1OaGNIUjFjbVVwSURvZ1FtOXZiR1ZoYmlodmNIUnBiMjV6S1R0Y2NseHVJQ0FnSUdOdmJuTjBJR3hwYzNSbGJtVnlWSGx3WlNBOUlHTmhjSFIxY21VZ1B5QkRRVkJVVlZKRklEb2dRbFZDUWt4Rk8xeHlYRzVjY2x4dUlDQWdJR3hsZENCd2NtVjJJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lHeGxkQ0J1YjJSbElEMGdiR2x6ZEdWdVpYSnpMbWRsZENobGRtVnVkRTVoYldVcE8xeHlYRzRnSUNBZ2QyaHBiR1VnS0c1dlpHVWdJVDBnYm5Wc2JDa2dlMXh5WEc0Z0lDQWdJQ0JwWmlBb2JtOWtaUzVzYVhOMFpXNWxjaUE5UFQwZ2JHbHpkR1Z1WlhJZ0ppWWdibTlrWlM1c2FYTjBaVzVsY2xSNWNHVWdQVDA5SUd4cGMzUmxibVZ5Vkhsd1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHdjbVYySUNFOVBTQnVkV3hzS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0J3Y21WMkxtNWxlSFFnUFNCdWIyUmxMbTVsZUhRN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h1YjJSbExtNWxlSFFnSVQwOUlHNTFiR3dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR3hwYzNSbGJtVnljeTV6WlhRb1pYWmxiblJPWVcxbExDQnViMlJsTG01bGVIUXBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnNhWE4wWlc1bGNuTXVaR1ZzWlhSbEtHVjJaVzUwVG1GdFpTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnY0hKbGRpQTlJRzV2WkdVN1hISmNiaUFnSUNBZ0lHNXZaR1VnUFNCdWIyUmxMbTVsZUhRN1hISmNiaUFnSUNCOVhISmNiaUFnZlN4Y2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSR2x6Y0dGMFkyZ2dZU0JuYVhabGJpQmxkbVZ1ZEM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBWMlpXNTBmSHQwZVhCbE9uTjBjbWx1WjMxOUlHVjJaVzUwSUZSb1pTQmxkbVZ1ZENCMGJ5QmthWE53WVhSamFDNWNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdZR1poYkhObFlDQnBaaUJqWVc1alpXeGxaQzVjY2x4dUlDQWdLaTljY2x4dUlDQmthWE53WVhSamFFVjJaVzUwS0dWMlpXNTBLU0I3WEhKY2JpQWdJQ0JwWmlBb1pYWmxiblFnUFQwZ2JuVnNiQ0I4ZkNCMGVYQmxiMllnWlhabGJuUXVkSGx3WlNBaFBUMGdKM04wY21sdVp5Y3BJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblhDSmxkbVZ1ZEM1MGVYQmxYQ0lnYzJodmRXeGtJR0psSUdFZ2MzUnlhVzVuTGljcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzh2SUVsbUlHeHBjM1JsYm1WeWN5QmhjbVZ1SjNRZ2NtVm5hWE4wWlhKbFpDd2dkR1Z5YldsdVlYUmxMbHh5WEc0Z0lDQWdZMjl1YzNRZ2JHbHpkR1Z1WlhKeklEMGdaMlYwVEdsemRHVnVaWEp6S0hSb2FYTXBPMXh5WEc0Z0lDQWdZMjl1YzNRZ1pYWmxiblJPWVcxbElEMGdaWFpsYm5RdWRIbHdaVHRjY2x4dUlDQWdJR3hsZENCdWIyUmxJRDBnYkdsemRHVnVaWEp6TG1kbGRDaGxkbVZ1ZEU1aGJXVXBPMXh5WEc0Z0lDQWdhV1lnS0c1dlpHVWdQVDBnYm5Wc2JDa2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZMeUJUYVc1alpTQjNaU0JqWVc1dWIzUWdjbVYzY21sMFpTQnpaWFpsY21Gc0lIQnliM0JsY25ScFpYTXNJSE52SUhkeVlYQWdiMkpxWldOMExseHlYRzRnSUNBZ1kyOXVjM1FnZDNKaGNIQmxaRVYyWlc1MElEMGdkM0poY0VWMlpXNTBLSFJvYVhNc0lHVjJaVzUwS1R0Y2NseHVYSEpjYmlBZ0lDQXZMeUJVYUdseklHUnZaWE51SjNRZ2NISnZZMlZ6Y3lCallYQjBkWEpwYm1jZ2NHaGhjMlVnWVc1a0lHSjFZbUpzYVc1bklIQm9ZWE5sTGx4eVhHNGdJQ0FnTHk4Z1ZHaHBjeUJwYzI0bmRDQndZWEowYVdOcGNHRjBhVzVuSUdsdUlHRWdkSEpsWlM1Y2NseHVJQ0FnSUd4bGRDQndjbVYySUQwZ2JuVnNiRHRjY2x4dUlDQWdJSGRvYVd4bElDaHViMlJsSUNFOUlHNTFiR3dwSUh0Y2NseHVJQ0FnSUNBZ0x5OGdVbVZ0YjNabElIUm9hWE1nYkdsemRHVnVaWElnYVdZZ2FYUW5jeUJ2Ym1ObFhISmNiaUFnSUNBZ0lHbG1JQ2h1YjJSbExtOXVZMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvY0hKbGRpQWhQVDBnYm5Wc2JDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NISmxkaTV1WlhoMElEMGdibTlrWlM1dVpYaDBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JtOWtaUzV1WlhoMElDRTlQU0J1ZFd4c0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCc2FYTjBaVzVsY25NdWMyVjBLR1YyWlc1MFRtRnRaU3dnYm05a1pTNXVaWGgwS1R0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYkdsemRHVnVaWEp6TG1SbGJHVjBaU2hsZG1WdWRFNWhiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0J3Y21WMklEMGdibTlrWlR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnTHk4Z1EyRnNiQ0IwYUdseklHeHBjM1JsYm1WeVhISmNiaUFnSUNBZ0lITmxkRkJoYzNOcGRtVk1hWE4wWlc1bGNpaDNjbUZ3Y0dWa1JYWmxiblFzSUc1dlpHVXVjR0Z6YzJsMlpTQS9JRzV2WkdVdWJHbHpkR1Z1WlhJZ09pQnVkV3hzS1R0Y2NseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnViMlJsTG14cGMzUmxibVZ5SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RISjVJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHNXZaR1V1YkdsemRHVnVaWEl1WTJGc2JDaDBhR2x6TENCM2NtRndjR1ZrUlhabGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmpiMjV6YjJ4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBlWEJsYjJZZ1kyOXVjMjlzWlM1bGNuSnZjaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0dWeWNpazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVXViR2x6ZEdWdVpYSlVlWEJsSUNFOVBTQkJWRlJTU1VKVlZFVWdKaVlnZEhsd1pXOW1JRzV2WkdVdWJHbHpkR1Z1WlhJdWFHRnVaR3hsUlhabGJuUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNjbHh1SUNBZ0lDQWdJQ0J1YjJSbExteHBjM1JsYm1WeUxtaGhibVJzWlVWMlpXNTBLSGR5WVhCd1pXUkZkbVZ1ZENrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUM4dklFSnlaV0ZySUdsbUlHQmxkbVZ1ZEM1emRHOXdTVzF0WldScFlYUmxVSEp2Y0dGbllYUnBiMjVnSUhkaGN5QmpZV3hzWldRdVhISmNiaUFnSUNBZ0lHbG1JQ2hwYzFOMGIzQndaV1FvZDNKaGNIQmxaRVYyWlc1MEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQnViMlJsSUQwZ2JtOWtaUzV1WlhoME8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2MyVjBVR0Z6YzJsMlpVeHBjM1JsYm1WeUtIZHlZWEJ3WldSRmRtVnVkQ3dnYm5Wc2JDazdYSEpjYmlBZ0lDQnpaWFJGZG1WdWRGQm9ZWE5sS0hkeVlYQndaV1JGZG1WdWRDd2dNQ2s3WEhKY2JpQWdJQ0J6WlhSRGRYSnlaVzUwVkdGeVoyVjBLSGR5WVhCd1pXUkZkbVZ1ZEN3Z2JuVnNiQ2s3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUNGM2NtRndjR1ZrUlhabGJuUXVaR1ZtWVhWc2RGQnlaWFpsYm5SbFpEdGNjbHh1SUNCOVhISmNibjA3WEhKY2JseHlYRzR2THlCZ1kyOXVjM1J5ZFdOMGIzSmdJR2x6SUc1dmRDQmxiblZ0WlhKaFlteGxMbHh5WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29SWFpsYm5SVVlYSm5aWFF1Y0hKdmRHOTBlWEJsTENBblkyOXVjM1J5ZFdOMGIzSW5MQ0I3WEhKY2JpQWdkbUZzZFdVNklFVjJaVzUwVkdGeVoyVjBMRnh5WEc0Z0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNjbHh1SUNCM2NtbDBZV0pzWlRvZ2RISjFaVnh5WEc1OUtUdGNjbHh1WEhKY2JpOHZJRVZ1YzNWeVpTQmdaWFpsYm5SVVlYSm5aWFFnYVc1emRHRnVZMlZ2WmlCM2FXNWtiM2N1UlhabGJuUlVZWEpuWlhSZ0lHbHpJR0IwY25WbFlDNWNjbHh1YVdZZ0tIUjVjR1Z2WmlCM2FXNWtiM2NnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUhSNWNHVnZaaUIzYVc1a2IzY3VSWFpsYm5SVVlYSm5aWFFnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEhKY2JpQWdUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltS0VWMlpXNTBWR0Z5WjJWMExuQnliM1J2ZEhsd1pTd2dkMmx1Wkc5M0xrVjJaVzUwVkdGeVoyVjBMbkJ5YjNSdmRIbHdaU2s3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZEhNdVpHVm1hVzVsUlhabGJuUkJkSFJ5YVdKMWRHVWdQU0JrWldacGJtVkZkbVZ1ZEVGMGRISnBZblYwWlR0Y2NseHVaWGh3YjNKMGN5NUZkbVZ1ZEZSaGNtZGxkQ0E5SUVWMlpXNTBWR0Z5WjJWME8xeHlYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JGZG1WdWRGUmhjbWRsZER0Y2NseHVYSEpjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUlhabGJuUlVZWEpuWlhRN1hISmNibTF2WkhWc1pTNWxlSEJ2Y25SekxrVjJaVzUwVkdGeVoyVjBJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITmJKMlJsWm1GMWJIUW5YU0E5SUVWMlpXNTBWR0Z5WjJWME8xeHlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5NWtaV1pwYm1WRmRtVnVkRUYwZEhKcFluVjBaU0E5SUdSbFptbHVaVVYyWlc1MFFYUjBjbWxpZFhSbE8xeHlYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxbGRtVnVkQzEwWVhKblpYUXRjMmhwYlM1cWN5NXRZWEJjY2x4dUlsMTkiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVBZGFwdGVyc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY3JlYXRlQWRhcHRlcnMuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfY3JlYXRlQWRhcHRlcnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUFkYXB0ZXJzXCIpKTtcblxuLyogZ2xvYmFsIHByb2Nlc3MgKi9cbmlmICh0eXBlb2YgSFRNTERvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50IGluc3RhbmNlb2YgSFRNTERvY3VtZW50KSB7XG4gIHZhciBtZXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbWV0YScpO1xuICBtZXRhLnNldEF0dHJpYnV0ZSgnbmFtZScsICdib3RmcmFtZXdvcmstZGlyZWN0bGluZXNwZWVjaDp2ZXJzaW9uJyk7XG4gIG1ldGEuc2V0QXR0cmlidXRlKCdjb250ZW50JywgXCIwLjAuMC0wXCIpO1xuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG1ldGEpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2V3lKSVZFMU1SRzlqZFcxbGJuUWlMQ0prYjJOMWJXVnVkQ0lzSW0xbGRHRWlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2ljMlYwUVhSMGNtbGlkWFJsSWl3aWFHVmhaQ0lzSW1Gd2NHVnVaRU5vYVd4a0lsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096dEJRVVZCT3p0QlFVWkJPMEZCVFVFc1NVRkJTU3hQUVVGUFFTeFpRVUZRTEV0QlFYZENMRmRCUVhoQ0xFbEJRWFZETEU5QlFVOURMRkZCUVZBc1MwRkJiMElzVjBGQk0wUXNTVUZCTUVWQkxGRkJRVkVzV1VGQldVUXNXVUZCYkVjc1JVRkJaMGc3UVVGRE9VY3NUVUZCVFVVc1NVRkJTU3hIUVVGSFJDeFJRVUZSTEVOQlFVTkZMR0ZCUVZRc1EwRkJkVUlzVFVGQmRrSXNRMEZCWWp0QlFVVkJSQ3hGUVVGQlFTeEpRVUZKTEVOQlFVTkZMRmxCUVV3c1EwRkJhMElzVFVGQmJFSXNSVUZCTUVJc2RVTkJRVEZDTzBGQlEwRkdMRVZCUVVGQkxFbEJRVWtzUTBGQlEwVXNXVUZCVEN4RFFVRnJRaXhUUVVGc1FqdEJRVVZCU0N4RlFVRkJRU3hSUVVGUkxFTkJRVU5KTEVsQlFWUXNRMEZCWTBNc1YwRkJaQ3hEUVVFd1Frb3NTVUZCTVVJN1FVRkRSQ0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUlHZHNiMkpoYkNCd2NtOWpaWE56SUNvdlhISmNibHh5WEc1cGJYQnZjblFnWTNKbFlYUmxRV1JoY0hSbGNuTWdabkp2YlNBbkxpOWpjbVZoZEdWQlpHRndkR1Z5Y3ljN1hISmNibHh5WEc1bGVIQnZjblFnZXlCamNtVmhkR1ZCWkdGd2RHVnljeUI5TzF4eVhHNWNjbHh1YVdZZ0tIUjVjR1Z2WmlCSVZFMU1SRzlqZFcxbGJuUWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSFI1Y0dWdlppQmtiMk4xYldWdWRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdaRzlqZFcxbGJuUWdhVzV6ZEdGdVkyVnZaaUJJVkUxTVJHOWpkVzFsYm5RcElIdGNjbHh1SUNCamIyNXpkQ0J0WlhSaElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmJXVjBZU2NwTzF4eVhHNWNjbHh1SUNCdFpYUmhMbk5sZEVGMGRISnBZblYwWlNnbmJtRnRaU2NzSUNkaWIzUm1jbUZ0WlhkdmNtc3RaR2x5WldOMGJHbHVaWE53WldWamFEcDJaWEp6YVc5dUp5azdYSEpjYmlBZ2JXVjBZUzV6WlhSQmRIUnlhV0oxZEdVb0oyTnZiblJsYm5RbkxDQndjbTlqWlhOekxtVnVkaTVPVUUxZlVFRkRTMEZIUlY5V1JWSlRTVTlPS1R0Y2NseHVYSEpjYmlBZ1pHOWpkVzFsYm5RdWFHVmhaQzVoY0hCbGJtUkRhR2xzWkNodFpYUmhLVHRjY2x4dWZWeHlYRzRpWFgwPSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBhdGNoRGlhbG9nU2VydmljZUNvbm5lY3RvcklubGluZTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcblxudmFyIF9wRGVmZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwLWRlZmVyXCIpKTtcblxuLy8gUGF0Y2hpbmcgYSBmdW5jdGlvbiB0byBhZGQgcHJlLXByb2Nlc3Npbmcgb2YgYXJndW1lbnRzIGFuZCBwb3N0LXByb2Nlc3Npbmcgb2YgcmVzdWx0LlxuZnVuY3Rpb24gcGF0Y2hGdW5jdGlvbihmbiwgcHJlLCBwb3N0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGFyZ3MgPSBwcmUgPyBwcmUuYXBwbHkodm9pZCAwLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShhcmdzKSkgOiBhcmdzO1xuICAgIHZhciByZXN1bHQgPSBmbi5hcHBseSh2b2lkIDAsICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKGFyZ3MpKTtcbiAgICByZXR1cm4gcG9zdCA/IHBvc3QocmVzdWx0KSA6IHJlc3VsdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGF0Y2hEaWFsb2dTZXJ2aWNlQ29ubmVjdG9ySW5saW5lKGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IpIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIHBhdGNoIERpYWxvZ1NlcnZpY2VDb25uZWN0b3IgYnkgbW9kaWZ5aW5nIHRoZSBvYmplY3QuXG4gIC8vIFRoZSBwYXRjaGVzIGFyZSBpbnRlbmRlZCB0byBmaWxsLWluIGZlYXR1cmVzIHRvIG1ha2UgRGlhbG9nU2VydmljZUNvbm5lY3RvciBvYmplY3Qgd29ya3MgbGlrZSB0aGUgZnVsbC1mbGVkZ2VkIFJlY29nbml6ZXIgb2JqZWN0LlxuICB2YXIgbGFzdFJlY29nbml0aW9uRGVmZXJyZWQ7XG4gIGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IubGlzdGVuT25jZUFzeW5jID0gcGF0Y2hGdW5jdGlvbihkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLmxpc3Rlbk9uY2VBc3luYy5iaW5kKGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IpLCBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgbGFzdFJlY29nbml0aW9uRGVmZXJyZWQgPSAoMCwgX3BEZWZlci5kZWZhdWx0KSgpO1xuXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIFtwYXRjaEZ1bmN0aW9uKHJlc29sdmUsIG51bGwsIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIGxhc3RSZWNvZ25pdGlvbkRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSksIHBhdGNoRnVuY3Rpb24ocmVqZWN0LCBudWxsLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGxhc3RSZWNvZ25pdGlvbkRlZmVycmVkLnJlamVjdChlcnJvcik7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfSldLmNvbmNhdChhcmdzKTtcbiAgfSk7IC8vIFRPRE86IHN0YXJ0Q29udGludW91c1JlY29nbml0aW9uQXN5bmMgaXMgbm90IHdvcmtpbmcgeWV0LCB1c2UgbGlzdGVuT25jZUFzeW5jIGluc3RlYWQuXG5cbiAgZGlhbG9nU2VydmljZUNvbm5lY3Rvci5zdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jID0gZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IubGlzdGVuT25jZUFzeW5jKGZ1bmN0aW9uICgpIHsvLyBXZSB3aWxsIHJlc29sdmUgdGhlIFByb21pc2UgaW4gYSBzZXRUaW1lb3V0LlxuICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHJlc29sdmUgPSBudWxsO1xuICAgICAgcmVqZWN0ICYmIHJlamVjdChlcnIpO1xuICAgIH0pO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmVqZWN0ID0gbnVsbDtcbiAgICAgIHJlc29sdmUgJiYgcmVzb2x2ZSgpO1xuICAgIH0sIDApO1xuICB9OyAvLyBUT0RPOiBzdG9wQ29udGludW91c1JlY29nbml0aW9uQXN5bmMgaXMgbm90IHdvcmtpbmcgeWV0LCBzbyB3ZSByZXNvbHZlIHdoZW4gdGhlIHJlY29nbml0aW9uIGNvbXBsZXRlZC5cblxuXG4gIGRpYWxvZ1NlcnZpY2VDb25uZWN0b3Iuc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jID0gZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAvLyB3ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlcyBhbHdheXMgb3BlcmF0ZSBpbiBjb250aW51b3VzIG1vZGUgZm9yIGNvbXBhdGliaWxpdHkgcmVhc29uLlxuICAgIC8vIFdoZW4gaW4gbm9uLWNvbnRpbnVvdXMgbW9kZSwgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciB0aGUgZmlyc3QgcmVjb2duaXRpb24uXG4gICAgLy8gY29uc29sZS5ncm91cENvbGxhcHNlZCgnc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jJyk7XG4gICAgLy8gY29uc29sZS5sb2coZGlhbG9nU2VydmljZUNvbm5lY3Rvcik7XG4gICAgLy8gY29uc29sZS5ncm91cEVuZCgpO1xuICAgIHJlc29sdmUgJiYgbGFzdFJlY29nbml0aW9uRGVmZXJyZWQgJiYgbGFzdFJlY29nbml0aW9uRGVmZXJyZWQucHJvbWlzZS50aGVuKHJlc29sdmUsIHJlc29sdmUpO1xuICB9O1xuXG4gIHJldHVybiBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTl3WVhSamFFUnBZV3h2WjFObGNuWnBZMlZEYjI1dVpXTjBiM0pKYm14cGJtVXVhbk1pWFN3aWJtRnRaWE1pT2xzaWNHRjBZMmhHZFc1amRHbHZiaUlzSW1adUlpd2ljSEpsSWl3aWNHOXpkQ0lzSW1GeVozTWlMQ0p5WlhOMWJIUWlMQ0p3WVhSamFFUnBZV3h2WjFObGNuWnBZMlZEYjI1dVpXTjBiM0pKYm14cGJtVWlMQ0prYVdGc2IyZFRaWEoyYVdObFEyOXVibVZqZEc5eUlpd2liR0Z6ZEZKbFkyOW5ibWwwYVc5dVJHVm1aWEp5WldRaUxDSnNhWE4wWlc1UGJtTmxRWE41Ym1NaUxDSmlhVzVrSWl3aWNtVnpiMngyWlNJc0luSmxhbVZqZENJc0ltVnljbTl5SWl3aWMzUmhjblJEYjI1MGFXNTFiM1Z6VW1WamIyZHVhWFJwYjI1QmMzbHVZeUlzSW1WeWNpSXNJbk5sZEZScGJXVnZkWFFpTENKemRHOXdRMjl1ZEdsdWRXOTFjMUpsWTI5bmJtbDBhVzl1UVhONWJtTWlMQ0p3Y205dGFYTmxJaXdpZEdobGJpSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN1FVRkJRVHM3UVVGRlFUdEJRVU5CTEZOQlFWTkJMR0ZCUVZRc1EwRkJkVUpETEVWQlFYWkNMRVZCUVRKQ1F5eEhRVUV6UWl4RlFVRm5RME1zU1VGQmFFTXNSVUZCYzBNN1FVRkRjRU1zVTBGQlR5eFpRVUZoTzBGQlFVRXNjME5CUVZSRExFbEJRVk03UVVGQlZFRXNUVUZCUVVFc1NVRkJVenRCUVVGQk96dEJRVU5zUWtFc1NVRkJRVUVzU1VGQlNTeEhRVUZIUml4SFFVRkhMRWRCUVVkQkxFZEJRVWNzVFVGQlNDd3dRMEZCVDBVc1NVRkJVQ3hGUVVGSUxFZEJRV3RDUVN4SlFVRTFRanRCUVVWQkxGRkJRVTFETEUxQlFVMHNSMEZCUjBvc1JVRkJSU3hOUVVGR0xEQkRRVUZOUnl4SlFVRk9MRVZCUVdZN1FVRkZRU3hYUVVGUFJDeEpRVUZKTEVkQlFVZEJMRWxCUVVrc1EwRkJRMFVzVFVGQlJDeERRVUZRTEVkQlFXdENRU3hOUVVFM1FqdEJRVU5FTEVkQlRrUTdRVUZQUkRzN1FVRkZZeXhUUVVGVFF5eHBRMEZCVkN4RFFVRXlRME1zYzBKQlFUTkRMRVZCUVcxRk8wRkJRMmhHTzBGQlEwRTdRVUZGUVN4TlFVRkpReXgxUWtGQlNqdEJRVVZCUkN4RlFVRkJRU3h6UWtGQmMwSXNRMEZCUTBVc1pVRkJka0lzUjBGQmVVTlVMR0ZCUVdFc1EwRkRjRVJQTEhOQ1FVRnpRaXhEUVVGRFJTeGxRVUYyUWl4RFFVRjFRME1zU1VGQmRrTXNRMEZCTkVOSUxITkNRVUUxUXl4RFFVUnZSQ3hGUVVWd1JDeFZRVUZEU1N4UFFVRkVMRVZCUVZWRExFMUJRVllzUlVGQk9FSTdRVUZETlVKS0xFbEJRVUZCTEhWQ1FVRjFRaXhIUVVGSExITkNRVUV4UWpzN1FVRkVORUlzZFVOQlFWUktMRWxCUVZNN1FVRkJWRUVzVFVGQlFVRXNTVUZCVXp0QlFVRkJPenRCUVVjMVFpeFpRVU5GU2l4aFFVRmhMRU5CUVVOWExFOUJRVVFzUlVGQlZTeEpRVUZXTEVWQlFXZENMRlZCUVVGT0xFMUJRVTBzUlVGQlNUdEJRVU55UTBjc1RVRkJRVUVzZFVKQlFYVkNMRU5CUVVOSExFOUJRWGhDTEVOQlFXZERUaXhOUVVGb1F6dEJRVVZCTEdGQlFVOUJMRTFCUVZBN1FVRkRSQ3hMUVVwWkxFTkJSR1lzUlVGTlJVd3NZVUZCWVN4RFFVRkRXU3hOUVVGRUxFVkJRVk1zU1VGQlZDeEZRVUZsTEZWQlFVRkRMRXRCUVVzc1JVRkJTVHRCUVVOdVEwd3NUVUZCUVVFc2RVSkJRWFZDTEVOQlFVTkpMRTFCUVhoQ0xFTkJRU3RDUXl4TFFVRXZRanRCUVVWQkxHRkJRVTlCTEV0QlFWQTdRVUZEUkN4TFFVcFpMRU5CVG1Zc1UwRlhTMVFzU1VGWVREdEJRV0ZFTEVkQmJFSnRSQ3hEUVVGMFJDeERRVTVuUml4RFFUSkNhRVk3TzBGQlEwRkhMRVZCUVVGQkxITkNRVUZ6UWl4RFFVRkRUeXdyUWtGQmRrSXNSMEZCZVVRc1ZVRkJRMGdzVDBGQlJDeEZRVUZWUXl4TlFVRldMRVZCUVhGQ08wRkJRelZGVEN4SlFVRkJRU3h6UWtGQmMwSXNRMEZCUTBVc1pVRkJka0lzUTBGRFJTeFpRVUZOTEVOQlEwbzdRVUZEUkN4TFFVaElMRVZCU1VVc1ZVRkJRVTBzUjBGQlJ5eEZRVUZKTzBGQlEweEtMRTFCUVVGQkxFOUJRVThzUjBGQlJ5eEpRVUZXTzBGQlEwRkRMRTFCUVVGQkxFMUJRVTBzU1VGQlNVRXNUVUZCVFN4RFFVRkRSeXhIUVVGRUxFTkJRV2hDTzBGQlEwUXNTMEZRU0R0QlFWVkJReXhKUVVGQlFTeFZRVUZWTEVOQlFVTXNXVUZCVFR0QlFVTm1TaXhOUVVGQlFTeE5RVUZOTEVkQlFVY3NTVUZCVkR0QlFVTkJSQ3hOUVVGQlFTeFBRVUZQTEVsQlFVbEJMRTlCUVU4c1JVRkJiRUk3UVVGRFJDeExRVWhUTEVWQlIxQXNRMEZJVHl4RFFVRldPMEZCU1VRc1IwRm1SQ3hEUVRWQ1owWXNRMEUyUTJoR096czdRVUZEUVVvc1JVRkJRVUVzYzBKQlFYTkNMRU5CUVVOVkxEaENRVUYyUWl4SFFVRjNSQ3hWUVVGQlRpeFBRVUZQTEVWQlFVazdRVUZEYWtVN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVZCUVN4SlFVRkJRU3hQUVVGUExFbEJRVWxJTEhWQ1FVRllMRWxCUVhORFFTeDFRa0ZCZFVJc1EwRkJRMVVzVDBGQmVFSXNRMEZCWjBORExFbEJRV2hETEVOQlFYRkRVaXhQUVVGeVF5eEZRVUU0UTBFc1QwRkJPVU1zUTBGQmRFTTdRVUZEUkN4SFFWUkVPenRCUVZkQkxGTkJRVTlLTEhOQ1FVRlFPMEZCUTBRaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1kzSmxZWFJsUkdWbVpYSnlaV1FnWm5KdmJTQW5jQzFrWldabGNpYzdYSEpjYmx4eVhHNHZMeUJRWVhSamFHbHVaeUJoSUdaMWJtTjBhVzl1SUhSdklHRmtaQ0J3Y21VdGNISnZZMlZ6YzJsdVp5QnZaaUJoY21kMWJXVnVkSE1nWVc1a0lIQnZjM1F0Y0hKdlkyVnpjMmx1WnlCdlppQnlaWE4xYkhRdVhISmNibVoxYm1OMGFXOXVJSEJoZEdOb1JuVnVZM1JwYjI0b1ptNHNJSEJ5WlN3Z2NHOXpkQ2tnZTF4eVhHNGdJSEpsZEhWeWJpQW9MaTR1WVhKbmN5a2dQVDRnZTF4eVhHNGdJQ0FnWVhKbmN5QTlJSEJ5WlNBL0lIQnlaU2d1TGk1aGNtZHpLU0E2SUdGeVozTTdYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdjbVZ6ZFd4MElEMGdabTRvTGk0dVlYSm5jeWs3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUhCdmMzUWdQeUJ3YjNOMEtISmxjM1ZzZENrZ09pQnlaWE4xYkhRN1hISmNiaUFnZlR0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z2NHRjBZMmhFYVdGc2IyZFRaWEoyYVdObFEyOXVibVZqZEc5eVNXNXNhVzVsS0dScFlXeHZaMU5sY25acFkyVkRiMjV1WldOMGIzSXBJSHRjY2x4dUlDQXZMeUJVYUdseklHWjFibU4wYVc5dUlIZHBiR3dnY0dGMFkyZ2dSR2xoYkc5blUyVnlkbWxqWlVOdmJtNWxZM1J2Y2lCaWVTQnRiMlJwWm5scGJtY2dkR2hsSUc5aWFtVmpkQzVjY2x4dUlDQXZMeUJVYUdVZ2NHRjBZMmhsY3lCaGNtVWdhVzUwWlc1a1pXUWdkRzhnWm1sc2JDMXBiaUJtWldGMGRYSmxjeUIwYnlCdFlXdGxJRVJwWVd4dloxTmxjblpwWTJWRGIyNXVaV04wYjNJZ2IySnFaV04wSUhkdmNtdHpJR3hwYTJVZ2RHaGxJR1oxYkd3dFpteGxaR2RsWkNCU1pXTnZaMjVwZW1WeUlHOWlhbVZqZEM1Y2NseHVYSEpjYmlBZ2JHVjBJR3hoYzNSU1pXTnZaMjVwZEdsdmJrUmxabVZ5Y21Wa08xeHlYRzVjY2x4dUlDQmthV0ZzYjJkVFpYSjJhV05sUTI5dWJtVmpkRzl5TG14cGMzUmxiazl1WTJWQmMzbHVZeUE5SUhCaGRHTm9SblZ1WTNScGIyNG9YSEpjYmlBZ0lDQmthV0ZzYjJkVFpYSjJhV05sUTI5dWJtVmpkRzl5TG14cGMzUmxiazl1WTJWQmMzbHVZeTVpYVc1a0tHUnBZV3h2WjFObGNuWnBZMlZEYjI1dVpXTjBiM0lwTEZ4eVhHNGdJQ0FnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ3dnTGk0dVlYSm5jeWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnNZWE4wVW1WamIyZHVhWFJwYjI1RVpXWmxjbkpsWkNBOUlHTnlaV0YwWlVSbFptVnljbVZrS0NrN1hISmNibHh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdXMXh5WEc0Z0lDQWdJQ0FnSUhCaGRHTm9SblZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2diblZzYkN3Z2NtVnpkV3gwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUd4aGMzUlNaV052WjI1cGRHbHZia1JsWm1WeWNtVmtMbkpsYzI5c2RtVW9jbVZ6ZFd4MEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBMRnh5WEc0Z0lDQWdJQ0FnSUhCaGRHTm9SblZ1WTNScGIyNG9jbVZxWldOMExDQnVkV3hzTENCbGNuSnZjaUE5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWVhOMFVtVmpiMmR1YVhScGIyNUVaV1psY25KbFpDNXlaV3BsWTNRb1pYSnliM0lwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNjbHh1SUNBZ0lDQWdJQ0I5S1N4Y2NseHVJQ0FnSUNBZ0lDQXVMaTVoY21kelhISmNiaUFnSUNBZ0lGMDdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0tUdGNjbHh1WEhKY2JpQWdMeThnVkU5RVR6b2djM1JoY25SRGIyNTBhVzUxYjNWelVtVmpiMmR1YVhScGIyNUJjM2x1WXlCcGN5QnViM1FnZDI5eWEybHVaeUI1WlhRc0lIVnpaU0JzYVhOMFpXNVBibU5sUVhONWJtTWdhVzV6ZEdWaFpDNWNjbHh1SUNCa2FXRnNiMmRUWlhKMmFXTmxRMjl1Ym1WamRHOXlMbk4wWVhKMFEyOXVkR2x1ZFc5MWMxSmxZMjluYm1sMGFXOXVRWE41Ym1NZ1BTQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEhKY2JpQWdJQ0JrYVdGc2IyZFRaWEoyYVdObFEyOXVibVZqZEc5eUxteHBjM1JsYms5dVkyVkJjM2x1WXloY2NseHVJQ0FnSUNBZ0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRmRsSUhkcGJHd2djbVZ6YjJ4MlpTQjBhR1VnVUhKdmJXbHpaU0JwYmlCaElITmxkRlJwYldWdmRYUXVYSEpjYmlBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUdWeWNpQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNBOUlHNTFiR3c3WEhKY2JpQWdJQ0FnSUNBZ2NtVnFaV04wSUNZbUlISmxhbVZqZENobGNuSXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FwTzF4eVhHNWNjbHh1SUNBZ0lITmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnlaV3BsWTNRZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnSUNCeVpYTnZiSFpsSUNZbUlISmxjMjlzZG1Vb0tUdGNjbHh1SUNBZ0lIMHNJREFwTzF4eVhHNGdJSDA3WEhKY2JseHlYRzRnSUM4dklGUlBSRTg2SUhOMGIzQkRiMjUwYVc1MWIzVnpVbVZqYjJkdWFYUnBiMjVCYzNsdVl5QnBjeUJ1YjNRZ2QyOXlhMmx1WnlCNVpYUXNJSE52SUhkbElISmxjMjlzZG1VZ2QyaGxiaUIwYUdVZ2NtVmpiMmR1YVhScGIyNGdZMjl0Y0d4bGRHVmtMbHh5WEc0Z0lHUnBZV3h2WjFObGNuWnBZMlZEYjI1dVpXTjBiM0l1YzNSdmNFTnZiblJwYm5WdmRYTlNaV052WjI1cGRHbHZia0Z6ZVc1aklEMGdjbVZ6YjJ4MlpTQTlQaUI3WEhKY2JpQWdJQ0F2THlCM1pXSXRjM0JsWldOb0xXTnZaMjVwZEdsMlpTMXpaWEoyYVdObGN5QmhiSGRoZVhNZ2IzQmxjbUYwWlNCcGJpQmpiMjUwYVc1MWIzVnpJRzF2WkdVZ1ptOXlJR052YlhCaGRHbGlhV3hwZEhrZ2NtVmhjMjl1TGx4eVhHNGdJQ0FnTHk4Z1YyaGxiaUJwYmlCdWIyNHRZMjl1ZEdsdWRXOTFjeUJ0YjJSbExDQjBhR2x6SUdaMWJtTjBhVzl1SUhkcGJHd2dZbVVnWTJGc2JHVmtJR0ZtZEdWeUlIUm9aU0JtYVhKemRDQnlaV052WjI1cGRHbHZiaTVjY2x4dVhISmNiaUFnSUNBdkx5QmpiMjV6YjJ4bExtZHliM1Z3UTI5c2JHRndjMlZrS0NkemRHOXdRMjl1ZEdsdWRXOTFjMUpsWTI5bmJtbDBhVzl1UVhONWJtTW5LVHRjY2x4dUlDQWdJQzh2SUdOdmJuTnZiR1V1Ykc5bktHUnBZV3h2WjFObGNuWnBZMlZEYjI1dVpXTjBiM0lwTzF4eVhHNGdJQ0FnTHk4Z1kyOXVjMjlzWlM1bmNtOTFjRVZ1WkNncE8xeHlYRzVjY2x4dUlDQWdJSEpsYzI5c2RtVWdKaVlnYkdGemRGSmxZMjluYm1sMGFXOXVSR1ZtWlhKeVpXUWdKaVlnYkdGemRGSmxZMjluYm1sMGFXOXVSR1ZtWlhKeVpXUXVjSEp2YldselpTNTBhR1Z1S0hKbGMyOXNkbVVzSUhKbGMyOXNkbVVwTzF4eVhHNGdJSDA3WEhKY2JseHlYRzRnSUhKbGRIVnliaUJrYVdGc2IyZFRaWEoyYVdObFEyOXVibVZqZEc5eU8xeHlYRzU5WEhKY2JpSmRmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcGxheUNvZ25pdGl2ZVNlcnZpY2VzU3RyZWFtO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yXCIpKTtcblxudmFyIF9jb2duaXRpdmVTZXJ2aWNlc1Byb21pc2VUb0VTUHJvbWlzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29nbml0aXZlU2VydmljZXNQcm9taXNlVG9FU1Byb21pc2VcIikpO1xuXG52YXIgX3BEZWZlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInAtZGVmZXJcIikpO1xuXG4vKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVwiOiBbOCwgMTYsIDMyLCAxMjgsIDEwMDAsIDMyNzY4LCAyMTQ3NDgzNjQ4XSB9XSAqL1xuXG4vKiBlc2xpbnQgbm8tYXdhaXQtaW4tbG9vcDogXCJvZmZcIiAqL1xuXG4vKiBlc2xpbnQgcHJlZmVyLWRlc3RydWN0dXJpbmc6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlclNvdXJjZShhdWRpb0NvbnRleHQsIF9yZWYsIGNoYW5uZWxJbnRlcmxlYXZlZEF1ZGlvRGF0YSkge1xuICB2YXIgY2hhbm5lbHMgPSBfcmVmLmNoYW5uZWxzLFxuICAgICAgc2FtcGxlc1BlclNlYyA9IF9yZWYuc2FtcGxlc1BlclNlYztcbiAgdmFyIGJ1ZmZlclNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgdmFyIGZyYW1lcyA9IGNoYW5uZWxJbnRlcmxlYXZlZEF1ZGlvRGF0YS5sZW5ndGggLyBjaGFubmVscztcbiAgdmFyIGF1ZGlvQnVmZmVyID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlcihjaGFubmVscywgZnJhbWVzLCBzYW1wbGVzUGVyU2VjKTtcblxuICBmb3IgKHZhciBjaGFubmVsID0gMDsgY2hhbm5lbCA8IGNoYW5uZWxzOyBjaGFubmVsKyspIHtcbiAgICB2YXIgcGVyQ2hhbm5lbEF1ZGlvRGF0YSA9IGF1ZGlvQnVmZmVyLmdldENoYW5uZWxEYXRhKGNoYW5uZWwpOyAvLyBXZSBhcmUgY29weWluZyBjaGFubmVsLWludGVybGVhdmVkIGF1ZGlvIGRhdGEsIGludG8gcGVyLWNoYW5uZWwgYXVkaW8gZGF0YVxuXG4gICAgZm9yICh2YXIgcGVyQ2hhbm5lbEluZGV4ID0gMDsgcGVyQ2hhbm5lbEluZGV4IDwgY2hhbm5lbEludGVybGVhdmVkQXVkaW9EYXRhLmxlbmd0aDsgcGVyQ2hhbm5lbEluZGV4KyspIHtcbiAgICAgIHBlckNoYW5uZWxBdWRpb0RhdGFbcGVyQ2hhbm5lbEluZGV4XSA9IGNoYW5uZWxJbnRlcmxlYXZlZEF1ZGlvRGF0YVtwZXJDaGFubmVsSW5kZXggKiBjaGFubmVscyArIGNoYW5uZWxdO1xuICAgIH1cbiAgfVxuXG4gIGJ1ZmZlclNvdXJjZS5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcbiAgcmV0dXJuIGJ1ZmZlclNvdXJjZTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VHlwZWRCaXRBcnJheVRvRmxvYXRBcnJheShhdWRpb0RhdGEsIG1heFZhbHVlKSB7XG4gIHZhciBmbG9hdDMyRGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoYXVkaW9EYXRhLmxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdWRpb0RhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBmbG9hdDMyRGF0YVtpXSA9IGF1ZGlvRGF0YVtpXSAvIG1heFZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGZsb2F0MzJEYXRhO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRBdWRpb0RhdGFBcnJheUJ1ZmZlclRvRmxvYXRBcnJheShfcmVmMiwgYXJyYXlCdWZmZXIpIHtcbiAgdmFyIGJpdHNQZXJTYW1wbGUgPSBfcmVmMi5iaXRzUGVyU2FtcGxlO1xuXG4gIHN3aXRjaCAoYml0c1BlclNhbXBsZSkge1xuICAgIGNhc2UgODpcbiAgICAgIHJldHVybiBmb3JtYXRUeXBlZEJpdEFycmF5VG9GbG9hdEFycmF5KG5ldyBJbnQ4QXJyYXkoYXJyYXlCdWZmZXIpLCAxMjgpO1xuXG4gICAgY2FzZSAxNjpcbiAgICAgIHJldHVybiBmb3JtYXRUeXBlZEJpdEFycmF5VG9GbG9hdEFycmF5KG5ldyBJbnQxNkFycmF5KGFycmF5QnVmZmVyKSwgMzI3NjgpO1xuXG4gICAgY2FzZSAzMjpcbiAgICAgIHJldHVybiBmb3JtYXRUeXBlZEJpdEFycmF5VG9GbG9hdEFycmF5KG5ldyBJbnQzMkFycmF5KGFycmF5QnVmZmVyKSwgMjE0NzQ4MzY0OCk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IFdBVkVfRk9STUFUX1BDTSAoOC8xNi8zMiBicHMpIGZvcm1hdCBzdXBwb3J0ZWQgYXQgdGhpcyB0aW1lJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWJvcnRUb1JlamVjdChzaWduYWwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICBzaWduYWwub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdhYm9ydGVkJykpO1xuICAgIH07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwbGF5Q29nbml0aXZlU2VydmljZXNTdHJlYW0oX3gsIF94MiwgX3gzKSB7XG4gIHJldHVybiBfcGxheUNvZ25pdGl2ZVNlcnZpY2VzU3RyZWFtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9wbGF5Q29nbml0aXZlU2VydmljZXNTdHJlYW0oKSB7XG4gIF9wbGF5Q29nbml0aXZlU2VydmljZXNTdHJlYW0gPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IyLmRlZmF1bHQpKFxuICAvKiNfX1BVUkVfXyovXG4gIF9yZWdlbmVyYXRvci5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZShhdWRpb0NvbnRleHQsIGF1ZGlvRm9ybWF0LCBzdHJlYW1SZWFkZXIpIHtcbiAgICB2YXIgX3JlZjMsXG4gICAgICAgIF9yZWYzJHNpZ25hbCxcbiAgICAgICAgc2lnbmFsLFxuICAgICAgICBxdWV1ZWRCdWZmZXJTb3VyY2VOb2RlcyxcbiAgICAgICAgYWJvcnRQcm9taXNlLFxuICAgICAgICBsYXN0QnVmZmVyU291cmNlLFxuICAgICAgICByZWFkLFxuICAgICAgICBjaHVuayxcbiAgICAgICAgY3VycmVudFRpbWUsXG4gICAgICAgIG1heENodW5rcyxcbiAgICAgICAgYXVkaW9EYXRhLFxuICAgICAgICBidWZmZXJTb3VyY2UsXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBfY3JlYXRlRGVmZXJyZWQsXG4gICAgICAgIHByb21pc2UsXG4gICAgICAgIHJlc29sdmUsXG4gICAgICAgIF9hcmdzID0gYXJndW1lbnRzO1xuXG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvci5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBfcmVmMyA9IF9hcmdzLmxlbmd0aCA+IDMgJiYgX2FyZ3NbM10gIT09IHVuZGVmaW5lZCA/IF9hcmdzWzNdIDoge30sIF9yZWYzJHNpZ25hbCA9IF9yZWYzLnNpZ25hbCwgc2lnbmFsID0gX3JlZjMkc2lnbmFsID09PSB2b2lkIDAgPyB7fSA6IF9yZWYzJHNpZ25hbDtcbiAgICAgICAgICAgIHF1ZXVlZEJ1ZmZlclNvdXJjZU5vZGVzID0gW107XG4gICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjtcbiAgICAgICAgICAgIGFib3J0UHJvbWlzZSA9IGFib3J0VG9SZWplY3Qoc2lnbmFsKTtcblxuICAgICAgICAgICAgcmVhZCA9IGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJhY2UoWy8vIEFib3J0IHdpbGwgZ3JhY2VmdWxseSBlbmQgdGhlIHF1ZXVlLCB3ZSB3aWxsIGNoZWNrIHNpZ25hbC5hYm9ydGVkIGxhdGVyIHRvIHRocm93IGFib3J0IGV4Y2VwdGlvbi5cbiAgICAgICAgICAgICAgYWJvcnRQcm9taXNlLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgaXNFbmQ6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KSwgKDAsIF9jb2duaXRpdmVTZXJ2aWNlc1Byb21pc2VUb0VTUHJvbWlzZS5kZWZhdWx0KShzdHJlYW1SZWFkZXIucmVhZCgpKV0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKCFzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWJvcnRlZCcpO1xuXG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7XG4gICAgICAgICAgICByZXR1cm4gcmVhZCgpO1xuXG4gICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2h1bmsgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgbWF4Q2h1bmtzID0gMDtcblxuICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICBpZiAoISghY2h1bmsuaXNFbmQgJiYgbWF4Q2h1bmtzIDwgMTAwMCAmJiAhc2lnbmFsLmFib3J0ZWQpKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcImJyZWFrXCIsIDI5KTtcblxuICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICBhdWRpb0RhdGEgPSBmb3JtYXRBdWRpb0RhdGFBcnJheUJ1ZmZlclRvRmxvYXRBcnJheShhdWRpb0Zvcm1hdCwgY2h1bmsuYnVmZmVyKTtcbiAgICAgICAgICAgIGJ1ZmZlclNvdXJjZSA9IGNyZWF0ZUJ1ZmZlclNvdXJjZShhdWRpb0NvbnRleHQsIGF1ZGlvRm9ybWF0LCBhdWRpb0RhdGEpO1xuICAgICAgICAgICAgZHVyYXRpb24gPSBidWZmZXJTb3VyY2UuYnVmZmVyLmR1cmF0aW9uO1xuXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRUaW1lKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBidWZmZXJTb3VyY2UuY29ubmVjdChhdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgYnVmZmVyU291cmNlLnN0YXJ0KGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIHF1ZXVlZEJ1ZmZlclNvdXJjZU5vZGVzLnB1c2goYnVmZmVyU291cmNlKTtcbiAgICAgICAgICAgIGxhc3RCdWZmZXJTb3VyY2UgPSBidWZmZXJTb3VyY2U7XG4gICAgICAgICAgICBjdXJyZW50VGltZSArPSBkdXJhdGlvbjtcblxuICAgICAgICAgIGNhc2UgMjM6XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjU7XG4gICAgICAgICAgICByZXR1cm4gcmVhZCgpO1xuXG4gICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgIGNodW5rID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgIG1heENodW5rcysrO1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDI5OlxuICAgICAgICAgICAgaWYgKCFzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fib3J0ZWQnKTtcblxuICAgICAgICAgIGNhc2UgMzE6XG4gICAgICAgICAgICBpZiAoIWxhc3RCdWZmZXJTb3VyY2UpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM2O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NyZWF0ZURlZmVycmVkID0gKDAsIF9wRGVmZXIuZGVmYXVsdCkoKSwgcHJvbWlzZSA9IF9jcmVhdGVEZWZlcnJlZC5wcm9taXNlLCByZXNvbHZlID0gX2NyZWF0ZURlZmVycmVkLnJlc29sdmU7XG4gICAgICAgICAgICBsYXN0QnVmZmVyU291cmNlLm9uZW5kZWQgPSByZXNvbHZlO1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM2O1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmFjZShbYWJvcnRQcm9taXNlLCBwcm9taXNlXSk7XG5cbiAgICAgICAgICBjYXNlIDM2OlxuICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDM2O1xuICAgICAgICAgICAgcXVldWVkQnVmZmVyU291cmNlTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICByZXR1cm4gbm9kZS5zdG9wKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMzYpO1xuXG4gICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZSwgbnVsbCwgW1syLCwgMzYsIDM5XV0pO1xuICB9KSk7XG4gIHJldHVybiBfcGxheUNvZ25pdGl2ZVNlcnZpY2VzU3RyZWFtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXdiR0Y1UTI5bmJtbDBhWFpsVTJWeWRtbGpaWE5UZEhKbFlXMHVhbk1pWFN3aWJtRnRaWE1pT2xzaVkzSmxZWFJsUW5WbVptVnlVMjkxY21ObElpd2lZWFZrYVc5RGIyNTBaWGgwSWl3aVkyaGhibTVsYkVsdWRHVnliR1ZoZG1Wa1FYVmthVzlFWVhSaElpd2lZMmhoYm01bGJITWlMQ0p6WVcxd2JHVnpVR1Z5VTJWaklpd2lZblZtWm1WeVUyOTFjbU5sSWl3aVpuSmhiV1Z6SWl3aWJHVnVaM1JvSWl3aVlYVmthVzlDZFdabVpYSWlMQ0pqY21WaGRHVkNkV1ptWlhJaUxDSmphR0Z1Ym1Wc0lpd2ljR1Z5UTJoaGJtNWxiRUYxWkdsdlJHRjBZU0lzSW1kbGRFTm9ZVzV1Wld4RVlYUmhJaXdpY0dWeVEyaGhibTVsYkVsdVpHVjRJaXdpWW5WbVptVnlJaXdpWm05eWJXRjBWSGx3WldSQ2FYUkJjbkpoZVZSdlJteHZZWFJCY25KaGVTSXNJbUYxWkdsdlJHRjBZU0lzSW0xaGVGWmhiSFZsSWl3aVpteHZZWFF6TWtSaGRHRWlMQ0pHYkc5aGRETXlRWEp5WVhraUxDSnBJaXdpWm05eWJXRjBRWFZrYVc5RVlYUmhRWEp5WVhsQ2RXWm1aWEpVYjBac2IyRjBRWEp5WVhraUxDSmhjbkpoZVVKMVptWmxjaUlzSW1KcGRITlFaWEpUWVcxd2JHVWlMQ0pKYm5RNFFYSnlZWGtpTENKSmJuUXhOa0Z5Y21GNUlpd2lTVzUwTXpKQmNuSmhlU0lzSWtWeWNtOXlJaXdpWVdKdmNuUlViMUpsYW1WamRDSXNJbk5wWjI1aGJDSXNJbEJ5YjIxcGMyVWlMQ0pmSWl3aWNtVnFaV04wSWl3aWIyNWhZbTl5ZENJc0luQnNZWGxEYjJkdWFYUnBkbVZUWlhKMmFXTmxjMU4wY21WaGJTSXNJbUYxWkdsdlJtOXliV0YwSWl3aWMzUnlaV0Z0VW1WaFpHVnlJaXdpY1hWbGRXVmtRblZtWm1WeVUyOTFjbU5sVG05a1pYTWlMQ0poWW05eWRGQnliMjFwYzJVaUxDSnlaV0ZrSWl3aWNtRmpaU0lzSW1OaGRHTm9JaXdpYVhORmJtUWlMQ0poWW05eWRHVmtJaXdpWTJoMWJtc2lMQ0p0WVhoRGFIVnVhM01pTENKa2RYSmhkR2x2YmlJc0ltTjFjbkpsYm5SVWFXMWxJaXdpWTI5dWJtVmpkQ0lzSW1SbGMzUnBibUYwYVc5dUlpd2ljM1JoY25RaUxDSndkWE5vSWl3aWJHRnpkRUoxWm1abGNsTnZkWEpqWlNJc0luQnliMjFwYzJVaUxDSnlaWE52YkhabElpd2liMjVsYm1SbFpDSXNJbVp2Y2tWaFkyZ2lMQ0p1YjJSbElpd2ljM1J2Y0NKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3p0QlFVbEJPenRCUVVOQk96dEJRVXhCT3p0QlFVTkJPenRCUVVOQk8wRkJTMEVzVTBGQlUwRXNhMEpCUVZRc1EwRkJORUpETEZsQlFUVkNMRkZCUVhWRlF5d3lRa0ZCZGtVc1JVRkJiMGM3UVVGQlFTeE5RVUY0UkVNc1VVRkJkMFFzVVVGQmVFUkJMRkZCUVhkRU8wRkJRVUVzVFVGQk9VTkRMR0ZCUVRoRExGRkJRVGxEUVN4aFFVRTRRenRCUVVOc1J5eE5RVUZOUXl4WlFVRlpMRWRCUVVkS0xGbEJRVmtzUTBGQlEwUXNhMEpCUVdJc1JVRkJja0k3UVVGRFFTeE5RVUZOVFN4TlFVRk5MRWRCUVVkS0xESkNRVUV5UWl4RFFVRkRTeXhOUVVFMVFpeEhRVUZ4UTBvc1VVRkJjRVE3UVVGRFFTeE5RVUZOU3l4WFFVRlhMRWRCUVVkUUxGbEJRVmtzUTBGQlExRXNXVUZCWWl4RFFVRXdRazRzVVVGQk1VSXNSVUZCYjBOSExFMUJRWEJETEVWQlFUUkRSaXhoUVVFMVF5eERRVUZ3UWpzN1FVRkZRU3hQUVVGTExFbEJRVWxOTEU5QlFVOHNSMEZCUnl4RFFVRnVRaXhGUVVGelFrRXNUMEZCVHl4SFFVRkhVQ3hSUVVGb1F5eEZRVUV3UTA4c1QwRkJUeXhGUVVGcVJDeEZRVUZ4UkR0QlFVTnVSQ3hSUVVGTlF5eHRRa0ZCYlVJc1IwRkJSMGdzVjBGQlZ5eERRVUZEU1N4alFVRmFMRU5CUVRKQ1JpeFBRVUV6UWl4RFFVRTFRaXhEUVVSdFJDeERRVWR1UkRzN1FVRkRRU3hUUVVGTExFbEJRVWxITEdWQlFXVXNSMEZCUnl4RFFVRXpRaXhGUVVFNFFrRXNaVUZCWlN4SFFVRkhXQ3d5UWtGQk1rSXNRMEZCUTBzc1RVRkJOVVVzUlVGQmIwWk5MR1ZCUVdVc1JVRkJia2NzUlVGQmRVYzdRVUZEY2tkR0xFMUJRVUZCTEcxQ1FVRnRRaXhEUVVGRFJTeGxRVUZFTEVOQlFXNUNMRWRCUVhWRFdDd3lRa0ZCTWtJc1EwRkJRMWNzWlVGQlpTeEhRVUZIVml4UlFVRnNRaXhIUVVFMlFrOHNUMEZCT1VJc1EwRkJiRVU3UVVGRFJEdEJRVU5HT3p0QlFVVkVUQ3hGUVVGQlFTeFpRVUZaTEVOQlFVTlRMRTFCUVdJc1IwRkJjMEpPTEZkQlFYUkNPMEZCUlVFc1UwRkJUMGdzV1VGQlVEdEJRVU5FT3p0QlFVVkVMRk5CUVZOVkxDdENRVUZVTEVOQlFYbERReXhUUVVGNlF5eEZRVUZ2UkVNc1VVRkJjRVFzUlVGQk9FUTdRVUZETlVRc1RVRkJUVU1zVjBGQlZ5eEhRVUZITEVsQlFVbERMRmxCUVVvc1EwRkJhVUpJTEZOQlFWTXNRMEZCUTFRc1RVRkJNMElzUTBGQmNFSTdPMEZCUlVFc1QwRkJTeXhKUVVGSllTeERRVUZETEVkQlFVY3NRMEZCWWl4RlFVRm5Ra0VzUTBGQlF5eEhRVUZIU2l4VFFVRlRMRU5CUVVOVUxFMUJRVGxDTEVWQlFYTkRZU3hEUVVGRExFVkJRWFpETEVWQlFUSkRPMEZCUTNwRFJpeEpRVUZCUVN4WFFVRlhMRU5CUVVORkxFTkJRVVFzUTBGQldDeEhRVUZwUWtvc1UwRkJVeXhEUVVGRFNTeERRVUZFTEVOQlFWUXNSMEZCWlVnc1VVRkJhRU03UVVGRFJEczdRVUZGUkN4VFFVRlBReXhYUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTBjc2MwTkJRVlFzVVVGQmJVVkRMRmRCUVc1RkxFVkJRV2RHTzBGQlFVRXNUVUZCT1VKRExHRkJRVGhDTEZOQlFUbENRU3hoUVVFNFFqczdRVUZET1VVc1ZVRkJVVUVzWVVGQlVqdEJRVU5GTEZOQlFVc3NRMEZCVER0QlFVTkZMR0ZCUVU5U0xDdENRVUVyUWl4RFFVRkRMRWxCUVVsVExGTkJRVW9zUTBGQlkwWXNWMEZCWkN4RFFVRkVMRVZCUVRaQ0xFZEJRVGRDTEVOQlFYUkRPenRCUVVWR0xGTkJRVXNzUlVGQlREdEJRVU5GTEdGQlFVOVFMQ3RDUVVFclFpeERRVUZETEVsQlFVbFZMRlZCUVVvc1EwRkJaVWdzVjBGQlppeERRVUZFTEVWQlFUaENMRXRCUVRsQ0xFTkJRWFJET3p0QlFVVkdMRk5CUVVzc1JVRkJURHRCUVVORkxHRkJRVTlRTEN0Q1FVRXJRaXhEUVVGRExFbEJRVWxYTEZWQlFVb3NRMEZCWlVvc1YwRkJaaXhEUVVGRUxFVkJRVGhDTEZWQlFUbENMRU5CUVhSRE96dEJRVVZHTzBGQlEwVXNXVUZCVFN4SlFVRkpTeXhMUVVGS0xFTkJRVlVzYTBWQlFWWXNRMEZCVGp0QlFWaEtPMEZCWVVRN08wRkJSVVFzVTBGQlUwTXNZVUZCVkN4RFFVRjFRa01zVFVGQmRrSXNSVUZCSzBJN1FVRkROMElzVTBGQlR5eEpRVUZKUXl4UFFVRktMRU5CUVZrc1ZVRkJRME1zUTBGQlJDeEZRVUZKUXl4TlFVRktMRVZCUVdVN1FVRkRhRU5JTEVsQlFVRkJMRTFCUVUwc1EwRkJRMGtzVDBGQlVDeEhRVUZwUWp0QlFVRkJMR0ZCUVUxRUxFMUJRVTBzUTBGQlF5eEpRVUZKVEN4TFFVRktMRU5CUVZVc1UwRkJWaXhEUVVGRUxFTkJRVm83UVVGQlFTeExRVUZxUWp0QlFVTkVMRWRCUmswc1EwRkJVRHRCUVVkRU96dFRRVVUyUWs4c01rSTdPenM3T3pzN05FSkJRV1lzYVVKQlEySnFReXhaUVVSaExFVkJSV0pyUXl4WFFVWmhMRVZCUjJKRExGbEJTR0U3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc05FVkJTVXNzUlVGS1RDeDFRa0ZKV0ZBc1RVRktWeXhGUVVsWVFTeE5RVXBYTERaQ1FVbEdMRVZCU2tVN1FVRk5VRkVzV1VGQlFVRXNkVUpCVGs4c1IwRk5iVUlzUlVGT2JrSTdRVUZCUVR0QlFWTk1ReXhaUVVGQlFTeFpRVlJMTEVkQlUxVldMR0ZCUVdFc1EwRkJRME1zVFVGQlJDeERRVlIyUWpzN1FVRlpURlVzV1VGQlFVRXNTVUZhU3l4SFFWbEZMRk5CUVZCQkxFbEJRVTg3UVVGQlFTeHhRa0ZEV0ZRc1QwRkJUeXhEUVVGRFZTeEpRVUZTTEVOQlFXRXNRMEZEV0R0QlFVTkJSaXhqUVVGQlFTeFpRVUZaTEVOQlFVTkhMRXRCUVdJc1EwRkJiVUk3UVVGQlFTeDFRa0ZCVHp0QlFVRkZReXhyUWtGQlFVRXNTMEZCU3l4RlFVRkZPMEZCUVZRc2FVSkJRVkE3UVVGQlFTeGxRVUZ1UWl4RFFVWlhMRVZCUjFnc2EwUkJRVzlEVGl4WlFVRlpMRU5CUVVOSExFbEJRV0lzUlVGQmNFTXNRMEZJVnl4RFFVRmlMRU5CUkZjN1FVRkJRU3hoUVZwR096dEJRVUZCTEdsQ1FXMUNVRllzVFVGQlRTeERRVUZEWXl4UFFXNUNRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVN4clFrRnZRa2dzU1VGQlNXaENMRXRCUVVvc1EwRkJWU3hUUVVGV0xFTkJjRUpIT3p0QlFVRkJPMEZCUVVFN1FVRkJRU3h0UWtGM1FsTlpMRWxCUVVrc1JVRjRRbUk3TzBGQlFVRTdRVUYzUWt4TExGbEJRVUZCTEV0QmVFSkxPMEZCZDBJNFFrTXNXVUZCUVVFc1UwRjRRamxDTEVkQmQwSXdReXhEUVhoQ01VTTdPMEZCUVVFN1FVRkJRU3hyUWtGNVFsUXNRMEZCUTBRc1MwRkJTeXhEUVVGRFJpeExRVUZRTEVsQlFXZENSeXhUUVVGVExFZEJRVWNzU1VGQk5VSXNTVUZCYjBNc1EwRkJRMmhDTEUxQlFVMHNRMEZCUTJNc1QwRjZRbTVETzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQkxHbENRVFJDVEdRc1RVRkJUU3hEUVVGRFl5eFBRVFZDUmp0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUczdRVUZCUVR0QlFXZERTRE5DTEZsQlFVRkJMRk5CYUVOSExFZEJaME5UU3l4elEwRkJjME1zUTBGQlEyTXNWMEZCUkN4RlFVRmpVeXhMUVVGTExFTkJRVU01UWl4TlFVRndRaXhEUVdoREwwTTdRVUZwUTBoVUxGbEJRVUZCTEZsQmFrTkhMRWRCYVVOWlRDeHJRa0ZCYTBJc1EwRkJRME1zV1VGQlJDeEZRVUZsYTBNc1YwRkJaaXhGUVVFMFFtNUNMRk5CUVRWQ0xFTkJha001UWp0QlFXdERSRGhDTEZsQlFVRkJMRkZCYkVORExFZEJhME5aZWtNc1dVRkJXU3hEUVVGRFV5eE5RV3hEZWtJc1EwRnJRMFJuUXl4UlFXeERRenM3UVVGdlExUXNaMEpCUVVrc1EwRkJRME1zVjBGQlRDeEZRVUZyUWp0QlFVTm9Ra0VzWTBGQlFVRXNWMEZCVnl4SFFVRkhPVU1zV1VGQldTeERRVUZET0VNc1YwRkJNMEk3UVVGRFJEczdRVUZGUkRGRExGbEJRVUZCTEZsQlFWa3NRMEZCUXpKRExFOUJRV0lzUTBGQmNVSXZReXhaUVVGWkxFTkJRVU5uUkN4WFFVRnNRenRCUVVOQk5VTXNXVUZCUVVFc1dVRkJXU3hEUVVGRE5rTXNTMEZCWWl4RFFVRnRRa2dzVjBGQmJrSTdRVUZGUVZZc1dVRkJRVUVzZFVKQlFYVkNMRU5CUVVOakxFbEJRWGhDTEVOQlFUWkNPVU1zV1VGQk4wSTdRVUZGUVN0RExGbEJRVUZCTEdkQ1FVRm5RaXhIUVVGSEwwTXNXVUZCYmtJN1FVRkRRVEJETEZsQlFVRkJMRmRCUVZjc1NVRkJTVVFzVVVGQlpqczdRVUU1UTFNN1FVRkJRVHRCUVVGQkxHMUNRVEJDUzFBc1NVRkJTU3hGUVRGQ1ZEczdRVUZCUVR0QlFUQkNWRXNzV1VGQlFVRXNTMEV4UWxNN1FVRXdRbUZETEZsQlFVRkJMRk5CUVZNc1JVRXhRblJDTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVVGQkxHbENRV2xFVUdoQ0xFMUJRVTBzUTBGQlEyTXNUMEZxUkVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRXNhMEpCYTBSSUxFbEJRVWxvUWl4TFFVRktMRU5CUVZVc1UwRkJWaXhEUVd4RVJ6czdRVUZCUVR0QlFVRkJMR2xDUVhGRVVIbENMR2RDUVhKRVR6dEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRU3c0UWtGelJHOUNMSE5DUVhSRWNFSXNSVUZ6UkVSRExFOUJkRVJETEcxQ1FYTkVSRUVzVDBGMFJFTXNSVUZ6UkZGRExFOUJkRVJTTEcxQ1FYTkVVVUVzVDBGMFJGSTdRVUYzUkZSR0xGbEJRVUZCTEdkQ1FVRm5RaXhEUVVGRFJ5eFBRVUZxUWl4SFFVRXlRa1FzVDBGQk0wSTdRVUY0UkZNN1FVRkJRU3h0UWtFd1JFaDRRaXhQUVVGUExFTkJRVU5WTEVsQlFWSXNRMEZCWVN4RFFVRkRSaXhaUVVGRUxFVkJRV1ZsTEU5QlFXWXNRMEZCWWl4RFFURkVSenM3UVVGQlFUdEJRVUZCTzBGQk5rUllhRUlzV1VGQlFVRXNkVUpCUVhWQ0xFTkJRVU50UWl4UFFVRjRRaXhEUVVGblF5eFZRVUZCUXl4SlFVRkpPMEZCUVVFc2NVSkJRVWxCTEVsQlFVa3NRMEZCUTBNc1NVRkJUQ3hGUVVGS08wRkJRVUVzWVVGQmNFTTdRVUUzUkZjN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFc1J5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxSUdWemJHbHVkQ0J1YnkxdFlXZHBZeTF1ZFcxaVpYSnpPaUJiWENKbGNuSnZjbHdpTENCN0lGd2lhV2R1YjNKbFhDSTZJRnM0TENBeE5pd2dNeklzSURFeU9Dd2dNVEF3TUN3Z016STNOamdzSURJeE5EYzBPRE0yTkRoZElIMWRJQ292WEhKY2JpOHFJR1Z6YkdsdWRDQnVieTFoZDJGcGRDMXBiaTFzYjI5d09pQmNJbTltWmx3aUlDb3ZYSEpjYmk4cUlHVnpiR2x1ZENCd2NtVm1aWEl0WkdWemRISjFZM1IxY21sdVp6b2dYQ0p2Wm1aY0lpQXFMMXh5WEc1Y2NseHVhVzF3YjNKMElHTnZaMjVwZEdsMlpWTmxjblpwWTJWelVISnZiV2x6WlZSdlJWTlFjbTl0YVhObElHWnliMjBnSnk0dlkyOW5ibWwwYVhabFUyVnlkbWxqWlhOUWNtOXRhWE5sVkc5RlUxQnliMjFwYzJVbk8xeHlYRzVwYlhCdmNuUWdZM0psWVhSbFJHVm1aWEp5WldRZ1puSnZiU0FuY0Mxa1pXWmxjaWM3WEhKY2JseHlYRzVtZFc1amRHbHZiaUJqY21WaGRHVkNkV1ptWlhKVGIzVnlZMlVvWVhWa2FXOURiMjUwWlhoMExDQjdJR05vWVc1dVpXeHpMQ0J6WVcxd2JHVnpVR1Z5VTJWaklIMHNJR05vWVc1dVpXeEpiblJsY214bFlYWmxaRUYxWkdsdlJHRjBZU2tnZTF4eVhHNGdJR052Ym5OMElHSjFabVpsY2xOdmRYSmpaU0E5SUdGMVpHbHZRMjl1ZEdWNGRDNWpjbVZoZEdWQ2RXWm1aWEpUYjNWeVkyVW9LVHRjY2x4dUlDQmpiMjV6ZENCbWNtRnRaWE1nUFNCamFHRnVibVZzU1c1MFpYSnNaV0YyWldSQmRXUnBiMFJoZEdFdWJHVnVaM1JvSUM4Z1kyaGhibTVsYkhNN1hISmNiaUFnWTI5dWMzUWdZWFZrYVc5Q2RXWm1aWElnUFNCaGRXUnBiME52Ym5SbGVIUXVZM0psWVhSbFFuVm1abVZ5S0dOb1lXNXVaV3h6TENCbWNtRnRaWE1zSUhOaGJYQnNaWE5RWlhKVFpXTXBPMXh5WEc1Y2NseHVJQ0JtYjNJZ0tHeGxkQ0JqYUdGdWJtVnNJRDBnTURzZ1kyaGhibTVsYkNBOElHTm9ZVzV1Wld4ek95QmphR0Z1Ym1Wc0t5c3BJSHRjY2x4dUlDQWdJR052Ym5OMElIQmxja05vWVc1dVpXeEJkV1JwYjBSaGRHRWdQU0JoZFdScGIwSjFabVpsY2k1blpYUkRhR0Z1Ym1Wc1JHRjBZU2hqYUdGdWJtVnNLVHRjY2x4dVhISmNiaUFnSUNBdkx5QlhaU0JoY21VZ1kyOXdlV2x1WnlCamFHRnVibVZzTFdsdWRHVnliR1ZoZG1Wa0lHRjFaR2x2SUdSaGRHRXNJR2x1ZEc4Z2NHVnlMV05vWVc1dVpXd2dZWFZrYVc4Z1pHRjBZVnh5WEc0Z0lDQWdabTl5SUNoc1pYUWdjR1Z5UTJoaGJtNWxiRWx1WkdWNElEMGdNRHNnY0dWeVEyaGhibTVsYkVsdVpHVjRJRHdnWTJoaGJtNWxiRWx1ZEdWeWJHVmhkbVZrUVhWa2FXOUVZWFJoTG14bGJtZDBhRHNnY0dWeVEyaGhibTVsYkVsdVpHVjRLeXNwSUh0Y2NseHVJQ0FnSUNBZ2NHVnlRMmhoYm01bGJFRjFaR2x2UkdGMFlWdHdaWEpEYUdGdWJtVnNTVzVrWlhoZElEMGdZMmhoYm01bGJFbHVkR1Z5YkdWaGRtVmtRWFZrYVc5RVlYUmhXM0JsY2tOb1lXNXVaV3hKYm1SbGVDQXFJR05vWVc1dVpXeHpJQ3NnWTJoaGJtNWxiRjA3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JpZFdabVpYSlRiM1Z5WTJVdVluVm1abVZ5SUQwZ1lYVmthVzlDZFdabVpYSTdYSEpjYmx4eVhHNGdJSEpsZEhWeWJpQmlkV1ptWlhKVGIzVnlZMlU3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHWnZjbTFoZEZSNWNHVmtRbWwwUVhKeVlYbFViMFpzYjJGMFFYSnlZWGtvWVhWa2FXOUVZWFJoTENCdFlYaFdZV3gxWlNrZ2UxeHlYRzRnSUdOdmJuTjBJR1pzYjJGME16SkVZWFJoSUQwZ2JtVjNJRVpzYjJGME16SkJjbkpoZVNoaGRXUnBiMFJoZEdFdWJHVnVaM1JvS1R0Y2NseHVYSEpjYmlBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQmhkV1JwYjBSaGRHRXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUdac2IyRjBNekpFWVhSaFcybGRJRDBnWVhWa2FXOUVZWFJoVzJsZElDOGdiV0Y0Vm1Gc2RXVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnlaWFIxY200Z1pteHZZWFF6TWtSaGRHRTdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUdadmNtMWhkRUYxWkdsdlJHRjBZVUZ5Y21GNVFuVm1abVZ5Vkc5R2JHOWhkRUZ5Y21GNUtIc2dZbWwwYzFCbGNsTmhiWEJzWlNCOUxDQmhjbkpoZVVKMVptWmxjaWtnZTF4eVhHNGdJSE4zYVhSamFDQW9ZbWwwYzFCbGNsTmhiWEJzWlNrZ2UxeHlYRzRnSUNBZ1kyRnpaU0E0T2x4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm05eWJXRjBWSGx3WldSQ2FYUkJjbkpoZVZSdlJteHZZWFJCY25KaGVTaHVaWGNnU1c1ME9FRnljbUY1S0dGeWNtRjVRblZtWm1WeUtTd2dNVEk0S1R0Y2NseHVYSEpjYmlBZ0lDQmpZWE5sSURFMk9seHlYRzRnSUNBZ0lDQnlaWFIxY200Z1ptOXliV0YwVkhsd1pXUkNhWFJCY25KaGVWUnZSbXh2WVhSQmNuSmhlU2h1WlhjZ1NXNTBNVFpCY25KaGVTaGhjbkpoZVVKMVptWmxjaWtzSURNeU56WTRLVHRjY2x4dVhISmNiaUFnSUNCallYTmxJRE15T2x4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm05eWJXRjBWSGx3WldSQ2FYUkJjbkpoZVZSdlJteHZZWFJCY25KaGVTaHVaWGNnU1c1ME16SkJjbkpoZVNoaGNuSmhlVUoxWm1abGNpa3NJREl4TkRjME9ETTJORGdwTzF4eVhHNWNjbHh1SUNBZ0lHUmxabUYxYkhRNlhISmNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblQyNXNlU0JYUVZaRlgwWlBVazFCVkY5UVEwMGdLRGd2TVRZdk16SWdZbkJ6S1NCbWIzSnRZWFFnYzNWd2NHOXlkR1ZrSUdGMElIUm9hWE1nZEdsdFpTY3BPMXh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnWVdKdmNuUlViMUpsYW1WamRDaHphV2R1WVd3cElIdGNjbHh1SUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tGOHNJSEpsYW1WamRDa2dQVDRnZTF4eVhHNGdJQ0FnYzJsbmJtRnNMbTl1WVdKdmNuUWdQU0FvS1NBOVBpQnlaV3BsWTNRb2JtVjNJRVZ5Y205eUtDZGhZbTl5ZEdWa0p5a3BPMXh5WEc0Z0lIMHBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JoYzNsdVl5Qm1kVzVqZEdsdmJpQndiR0Y1UTI5bmJtbDBhWFpsVTJWeWRtbGpaWE5UZEhKbFlXMG9YSEpjYmlBZ1lYVmthVzlEYjI1MFpYaDBMRnh5WEc0Z0lHRjFaR2x2Um05eWJXRjBMRnh5WEc0Z0lITjBjbVZoYlZKbFlXUmxjaXhjY2x4dUlDQjdJSE5wWjI1aGJDQTlJSHQ5SUgwZ1BTQjdmVnh5WEc0cElIdGNjbHh1SUNCamIyNXpkQ0J4ZFdWMVpXUkNkV1ptWlhKVGIzVnlZMlZPYjJSbGN5QTlJRnRkTzF4eVhHNWNjbHh1SUNCMGNua2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ1lXSnZjblJRY205dGFYTmxJRDBnWVdKdmNuUlViMUpsYW1WamRDaHphV2R1WVd3cE8xeHlYRzRnSUNBZ2JHVjBJR3hoYzNSQ2RXWm1aWEpUYjNWeVkyVTdYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdjbVZoWkNBOUlDZ3BJRDArWEhKY2JpQWdJQ0FnSUZCeWIyMXBjMlV1Y21GalpTaGJYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1FXSnZjblFnZDJsc2JDQm5jbUZqWldaMWJHeDVJR1Z1WkNCMGFHVWdjWFZsZFdVc0lIZGxJSGRwYkd3Z1kyaGxZMnNnYzJsbmJtRnNMbUZpYjNKMFpXUWdiR0YwWlhJZ2RHOGdkR2h5YjNjZ1lXSnZjblFnWlhoalpYQjBhVzl1TGx4eVhHNGdJQ0FnSUNBZ0lHRmliM0owVUhKdmJXbHpaUzVqWVhSamFDZ29LU0E5UGlBb2V5QnBjMFZ1WkRvZ2RISjFaU0I5S1Nrc1hISmNiaUFnSUNBZ0lDQWdZMjluYm1sMGFYWmxVMlZ5ZG1salpYTlFjbTl0YVhObFZHOUZVMUJ5YjIxcGMyVW9jM1J5WldGdFVtVmhaR1Z5TG5KbFlXUW9LU2xjY2x4dUlDQWdJQ0FnWFNrN1hISmNibHh5WEc0Z0lDQWdhV1lnS0hOcFoyNWhiQzVoWW05eWRHVmtLU0I3WEhKY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWVdKdmNuUmxaQ2NwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHWnZjaUFvWEhKY2JpQWdJQ0FnSUd4bGRDQmphSFZ1YXlBOUlHRjNZV2wwSUhKbFlXUW9LU3dnWTNWeWNtVnVkRlJwYldVc0lHMWhlRU5vZFc1cmN5QTlJREE3WEhKY2JpQWdJQ0FnSUNGamFIVnVheTVwYzBWdVpDQW1KaUJ0WVhoRGFIVnVhM01nUENBeE1EQXdJQ1ltSUNGemFXZHVZV3d1WVdKdmNuUmxaRHRjY2x4dUlDQWdJQ0FnWTJoMWJtc2dQU0JoZDJGcGRDQnlaV0ZrS0Nrc0lHMWhlRU5vZFc1cmN5c3JYSEpjYmlBZ0lDQXBJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tITnBaMjVoYkM1aFltOXlkR1ZrS1NCN1hISmNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdOdmJuTjBJR0YxWkdsdlJHRjBZU0E5SUdadmNtMWhkRUYxWkdsdlJHRjBZVUZ5Y21GNVFuVm1abVZ5Vkc5R2JHOWhkRUZ5Y21GNUtHRjFaR2x2Um05eWJXRjBMQ0JqYUhWdWF5NWlkV1ptWlhJcE8xeHlYRzRnSUNBZ0lDQmpiMjV6ZENCaWRXWm1aWEpUYjNWeVkyVWdQU0JqY21WaGRHVkNkV1ptWlhKVGIzVnlZMlVvWVhWa2FXOURiMjUwWlhoMExDQmhkV1JwYjBadmNtMWhkQ3dnWVhWa2FXOUVZWFJoS1R0Y2NseHVJQ0FnSUNBZ1kyOXVjM1FnZXlCa2RYSmhkR2x2YmlCOUlEMGdZblZtWm1WeVUyOTFjbU5sTG1KMVptWmxjanRjY2x4dVhISmNiaUFnSUNBZ0lHbG1JQ2doWTNWeWNtVnVkRlJwYldVcElIdGNjbHh1SUNBZ0lDQWdJQ0JqZFhKeVpXNTBWR2x0WlNBOUlHRjFaR2x2UTI5dWRHVjRkQzVqZFhKeVpXNTBWR2x0WlR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnWW5WbVptVnlVMjkxY21ObExtTnZibTVsWTNRb1lYVmthVzlEYjI1MFpYaDBMbVJsYzNScGJtRjBhVzl1S1R0Y2NseHVJQ0FnSUNBZ1luVm1abVZ5VTI5MWNtTmxMbk4wWVhKMEtHTjFjbkpsYm5SVWFXMWxLVHRjY2x4dVhISmNiaUFnSUNBZ0lIRjFaWFZsWkVKMVptWmxjbE52ZFhKalpVNXZaR1Z6TG5CMWMyZ29ZblZtWm1WeVUyOTFjbU5sS1R0Y2NseHVYSEpjYmlBZ0lDQWdJR3hoYzNSQ2RXWm1aWEpUYjNWeVkyVWdQU0JpZFdabVpYSlRiM1Z5WTJVN1hISmNiaUFnSUNBZ0lHTjFjbkpsYm5SVWFXMWxJQ3M5SUdSMWNtRjBhVzl1TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2h6YVdkdVlXd3VZV0p2Y25SbFpDa2dlMXh5WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMkZpYjNKMFpXUW5LVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCcFppQW9iR0Z6ZEVKMVptWmxjbE52ZFhKalpTa2dlMXh5WEc0Z0lDQWdJQ0JqYjI1emRDQjdJSEJ5YjIxcGMyVXNJSEpsYzI5c2RtVWdmU0E5SUdOeVpXRjBaVVJsWm1WeWNtVmtLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQnNZWE4wUW5WbVptVnlVMjkxY21ObExtOXVaVzVrWldRZ1BTQnlaWE52YkhabE8xeHlYRzVjY2x4dUlDQWdJQ0FnWVhkaGFYUWdVSEp2YldselpTNXlZV05sS0Z0aFltOXlkRkJ5YjIxcGMyVXNJSEJ5YjIxcGMyVmRLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlJR1pwYm1Gc2JIa2dlMXh5WEc0Z0lDQWdjWFZsZFdWa1FuVm1abVZ5VTI5MWNtTmxUbTlrWlhNdVptOXlSV0ZqYUNodWIyUmxJRDArSUc1dlpHVXVjM1J2Y0NncEtUdGNjbHh1SUNCOVhISmNibjFjY2x4dUlsMTkiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwbGF5V2hpdGVOb2lzZTtcblxudmFyIF9yZWdlbmVyYXRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCIpKTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvclwiKSk7XG5cbnZhciBfYmFzZTY0QXJyYXlidWZmZXIgPSByZXF1aXJlKFwiYmFzZTY0LWFycmF5YnVmZmVyXCIpO1xuXG52YXIgX2V2ZW50QXNQcm9taXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZXZlbnQtYXMtcHJvbWlzZVwiKSk7XG5cbnZhciBFTVBUWV9NUDNfQkFTRTY0ID0gJ1NVUXpCQUFBQUFBQUkxUlRVMFVBQUFBUEFBQURUR0YyWmpVM0xqVTJMakV3TVFBQUFBQUFBQUFBQUFBQS8vdEF3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFTVzVtYndBQUFBOEFBQUFDQUFBQmhnQzd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vOEFBQUFBVEdGMll6VTNMalkwQUFBQUFBQUFBQUFBQUFBQUpBVUhBQUFBQUFBQUFZWW9SQnFwQUFBQUFBRC8reERFQUFQQUFBR2tBQUFBSUFBQU5JQUFBQVJNUVUxRk15NDVPUzQxVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVmYvN0VNUXBnOEFBQWFRQUFBQWdBQUEwZ0FBQUJGVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlYnO1xuXG5mdW5jdGlvbiBzdWJzY3JpYmVFdmVudCh0YXJnZXQsIG5hbWUsIGhhbmRsZXIpIHtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgaGFuZGxlcik7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhc3luY0RlY29kZUF1ZGlvRGF0YShhdWRpb0NvbnRleHQsIGFycmF5QnVmZmVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHByb21pc2UgPSBhdWRpb0NvbnRleHQuZGVjb2RlQXVkaW9EYXRhKGFycmF5QnVmZmVyLCByZXNvbHZlLCByZWplY3QpOyAvLyBOZXdlciBpbXBsZW1lbnRhdGlvbiBvZiBcImRlY29kZUF1ZGlvRGF0YVwiIHdpbGwgcmV0dXJuIGEgUHJvbWlzZVxuXG4gICAgcHJvbWlzZSAmJiB0eXBlb2YgcHJvbWlzZS50aGVuID09PSAnZnVuY3Rpb24nICYmIHJlc29sdmUocHJvbWlzZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwbGF5RGVjb2RlZChhdWRpb0NvbnRleHQsIGF1ZGlvQnVmZmVyLCBzb3VyY2UpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgYXVkaW9Db250ZXh0Q2xvc2VkID0gbmV3IF9ldmVudEFzUHJvbWlzZS5kZWZhdWx0KCk7XG4gICAgdmFyIHNvdXJjZUVuZGVkID0gbmV3IF9ldmVudEFzUHJvbWlzZS5kZWZhdWx0KCk7XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gc3Vic2NyaWJlRXZlbnQoYXVkaW9Db250ZXh0LCAnc3RhdGVjaGFuZ2UnLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHN0YXRlID0gX3JlZi50YXJnZXQuc3RhdGU7XG4gICAgICByZXR1cm4gc3RhdGUgPT09ICdjbG9zZWQnICYmIGF1ZGlvQ29udGV4dENsb3NlZC5ldmVudExpc3RlbmVyKCk7XG4gICAgfSk7XG5cbiAgICB0cnkge1xuICAgICAgc291cmNlLmJ1ZmZlciA9IGF1ZGlvQnVmZmVyOyAvLyBcImVuZGVkXCIgbWF5IG5vdCBmaXJlIGlmIHRoZSB1bmRlcmx5aW5nIEF1ZGlvQ29udGV4dCBpcyBjbG9zZWQgcHJlbWF0dXJlbHlcblxuICAgICAgc291cmNlLm9uZW5kZWQgPSBzb3VyY2VFbmRlZC5ldmVudExpc3RlbmVyO1xuICAgICAgc291cmNlLmNvbm5lY3QoYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICAgIHNvdXJjZS5zdGFydCgwKTtcbiAgICAgIFByb21pc2UucmFjZShbYXVkaW9Db250ZXh0Q2xvc2VkLnVwY29taW5nKCksIHNvdXJjZUVuZGVkLnVwY29taW5nKCldKS50aGVuKHJlc29sdmUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcGxheVdoaXRlTm9pc2UoX3gpIHtcbiAgcmV0dXJuIF9wbGF5V2hpdGVOb2lzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfcGxheVdoaXRlTm9pc2UoKSB7XG4gIF9wbGF5V2hpdGVOb2lzZSA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjIuZGVmYXVsdCkoXG4gIC8qI19fUFVSRV9fKi9cbiAgX3JlZ2VuZXJhdG9yLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlKGF1ZGlvQ29udGV4dCkge1xuICAgIHZhciBzb3VyY2UsIGF1ZGlvQnVmZmVyO1xuICAgIHJldHVybiBfcmVnZW5lcmF0b3IuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgc291cmNlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7XG4gICAgICAgICAgICByZXR1cm4gYXN5bmNEZWNvZGVBdWRpb0RhdGEoYXVkaW9Db250ZXh0LCAoMCwgX2Jhc2U2NEFycmF5YnVmZmVyLmRlY29kZSkoRU1QVFlfTVAzX0JBU0U2NCkpO1xuXG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgYXVkaW9CdWZmZXIgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7XG4gICAgICAgICAgICByZXR1cm4gcGxheURlY29kZWQoYXVkaW9Db250ZXh0LCBhdWRpb0J1ZmZlciwgc291cmNlKTtcblxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX2NhbGxlZSk7XG4gIH0pKTtcbiAgcmV0dXJuIF9wbGF5V2hpdGVOb2lzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTl3YkdGNVYyaHBkR1ZPYjJselpTNXFjeUpkTENKdVlXMWxjeUk2V3lKRlRWQlVXVjlOVUROZlFrRlRSVFkwSWl3aWMzVmljMk55YVdKbFJYWmxiblFpTENKMFlYSm5aWFFpTENKdVlXMWxJaXdpYUdGdVpHeGxjaUlzSW1Ga1pFVjJaVzUwVEdsemRHVnVaWElpTENKeVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUlpd2lZWE41Ym1ORVpXTnZaR1ZCZFdScGIwUmhkR0VpTENKaGRXUnBiME52Ym5SbGVIUWlMQ0poY25KaGVVSjFabVpsY2lJc0lsQnliMjFwYzJVaUxDSnlaWE52YkhabElpd2ljbVZxWldOMElpd2ljSEp2YldselpTSXNJbVJsWTI5a1pVRjFaR2x2UkdGMFlTSXNJblJvWlc0aUxDSndiR0Y1UkdWamIyUmxaQ0lzSW1GMVpHbHZRblZtWm1WeUlpd2ljMjkxY21ObElpd2lZWFZrYVc5RGIyNTBaWGgwUTJ4dmMyVmtJaXdpUlhabGJuUkJjMUJ5YjIxcGMyVWlMQ0p6YjNWeVkyVkZibVJsWkNJc0luVnVjM1ZpYzJOeWFXSmxJaXdpYzNSaGRHVWlMQ0psZG1WdWRFeHBjM1JsYm1WeUlpd2lZblZtWm1WeUlpd2liMjVsYm1SbFpDSXNJbU52Ym01bFkzUWlMQ0prWlhOMGFXNWhkR2x2YmlJc0luTjBZWEowSWl3aWNtRmpaU0lzSW5Wd1kyOXRhVzVuSWl3aVpYSnlJaXdpY0d4aGVWZG9hWFJsVG05cGMyVWlMQ0pqY21WaGRHVkNkV1ptWlhKVGIzVnlZMlVpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3UVVGQlFUczdRVUZEUVRzN1FVRkZRU3hKUVVGTlFTeG5Ra0ZCWjBJc1IwRkRjRUlzYzJ0Q1FVUkdPenRCUVVkQkxGTkJRVk5ETEdOQlFWUXNRMEZCZDBKRExFMUJRWGhDTEVWQlFXZERReXhKUVVGb1F5eEZRVUZ6UTBNc1QwRkJkRU1zUlVGQkswTTdRVUZETjBOR0xFVkJRVUZCTEUxQlFVMHNRMEZCUTBjc1owSkJRVkFzUTBGQmQwSkdMRWxCUVhoQ0xFVkJRVGhDUXl4UFFVRTVRanRCUVVWQkxGTkJRVTg3UVVGQlFTeFhRVUZOUml4TlFVRk5MRU5CUVVOSkxHMUNRVUZRTEVOQlFUSkNTQ3hKUVVFelFpeEZRVUZwUTBNc1QwRkJha01zUTBGQlRqdEJRVUZCTEVkQlFWQTdRVUZEUkRzN1FVRkZSQ3hUUVVGVFJ5eHZRa0ZCVkN4RFFVRTRRa01zV1VGQk9VSXNSVUZCTkVORExGZEJRVFZETEVWQlFYbEVPMEZCUTNaRUxGTkJRVThzU1VGQlNVTXNUMEZCU2l4RFFVRlpMRlZCUVVORExFOUJRVVFzUlVGQlZVTXNUVUZCVml4RlFVRnhRanRCUVVOMFF5eFJRVUZOUXl4UFFVRlBMRWRCUVVkTUxGbEJRVmtzUTBGQlEwMHNaVUZCWWl4RFFVRTJRa3dzVjBGQk4wSXNSVUZCTUVORkxFOUJRVEZETEVWQlFXMUVReXhOUVVGdVJDeERRVUZvUWl4RFFVUnpReXhEUVVkMFF6czdRVUZEUVVNc1NVRkJRVUVzVDBGQlR5eEpRVUZKTEU5QlFVOUJMRTlCUVU4c1EwRkJRMFVzU1VGQlppeExRVUYzUWl4VlFVRnVReXhKUVVGcFJFb3NUMEZCVHl4RFFVRkRSU3hQUVVGRUxFTkJRWGhFTzBGQlEwUXNSMEZNVFN4RFFVRlFPMEZCVFVRN08wRkJSVVFzVTBGQlUwY3NWMEZCVkN4RFFVRnhRbElzV1VGQmNrSXNSVUZCYlVOVExGZEJRVzVETEVWQlFXZEVReXhOUVVGb1JDeEZRVUYzUkR0QlFVTjBSQ3hUUVVGUExFbEJRVWxTTEU5QlFVb3NRMEZCV1N4VlFVRkRReXhQUVVGRUxFVkJRVlZETEUxQlFWWXNSVUZCY1VJN1FVRkRkRU1zVVVGQlRVOHNhMEpCUVd0Q0xFZEJRVWNzU1VGQlNVTXNkVUpCUVVvc1JVRkJNMEk3UVVGRFFTeFJRVUZOUXl4WFFVRlhMRWRCUVVjc1NVRkJTVVFzZFVKQlFVb3NSVUZCY0VJN1FVRkRRU3hSUVVGTlJTeFhRVUZYTEVkQlFVZHlRaXhqUVVGakxFTkJRMmhEVHl4WlFVUm5ReXhGUVVWb1F5eGhRVVpuUXl4RlFVZG9RenRCUVVGQkxGVkJRV0ZsTEV0QlFXSXNVVUZCUjNKQ0xFMUJRVWdzUTBGQllYRkNMRXRCUVdJN1FVRkJRU3hoUVVFeVFrRXNTMEZCU3l4TFFVRkxMRkZCUVZZc1NVRkJjMEpLTEd0Q1FVRnJRaXhEUVVGRFN5eGhRVUZ1UWl4RlFVRnFSRHRCUVVGQkxFdEJTR2RETEVOQlFXeERPenRCUVUxQkxGRkJRVWs3UVVGRFJrNHNUVUZCUVVFc1RVRkJUU3hEUVVGRFR5eE5RVUZRTEVkQlFXZENVaXhYUVVGb1FpeERRVVJGTEVOQlJVWTdPMEZCUTBGRExFMUJRVUZCTEUxQlFVMHNRMEZCUTFFc1QwRkJVQ3hIUVVGcFFrd3NWMEZCVnl4RFFVRkRSeXhoUVVFM1FqdEJRVVZCVGl4TlFVRkJRU3hOUVVGTkxFTkJRVU5UTEU5QlFWQXNRMEZCWlc1Q0xGbEJRVmtzUTBGQlEyOUNMRmRCUVRWQ08wRkJRMEZXTEUxQlFVRkJMRTFCUVUwc1EwRkJRMWNzUzBGQlVDeERRVUZoTEVOQlFXSTdRVUZGUVc1Q0xFMUJRVUZCTEU5QlFVOHNRMEZCUTI5Q0xFbEJRVklzUTBGQllTeERRVUZEV0N4clFrRkJhMElzUTBGQlExa3NVVUZCYmtJc1JVRkJSQ3hGUVVGblExWXNWMEZCVnl4RFFVRkRWU3hSUVVGYUxFVkJRV2hETEVOQlFXSXNSVUZCYzBWb1FpeEpRVUYwUlN4RFFVRXlSVW9zVDBGQk0wVTdRVUZEUkN4TFFWUkVMRU5CVTBVc1QwRkJUM0ZDTEVkQlFWQXNSVUZCV1R0QlFVTmFjRUlzVFVGQlFVRXNUVUZCVFN4RFFVRkRiMElzUjBGQlJDeERRVUZPTzBGQlEwUXNTMEZZUkN4VFFWZFZPMEZCUTFKV0xFMUJRVUZCTEZkQlFWYzdRVUZEV2p0QlFVTkdMRWRCZGtKTkxFTkJRVkE3UVVGM1FrUTdPMU5CUlRaQ1Z5eGpPenM3T3pzN096UkNRVUZtTEdsQ1FVRTRRbnBDTEZsQlFUbENPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5RVlN4WlFVRkJRU3hOUVVSUExFZEJRMFZXTEZsQlFWa3NRMEZCUXpCQ0xHdENRVUZpTEVWQlJFWTdRVUZCUVR0QlFVRkJMRzFDUVVWaE0wSXNiMEpCUVc5Q0xFTkJRVU5ETEZsQlFVUXNSVUZCWlN3clFrRkJUMUlzWjBKQlFWQXNRMEZCWml4RFFVWnFRenM3UVVGQlFUdEJRVVZRYVVJc1dVRkJRVUVzVjBGR1R6dEJRVUZCTzBGQlFVRXNiVUpCU1ZCRUxGZEJRVmNzUTBGQlExSXNXVUZCUkN4RlFVRmxVeXhYUVVGbUxFVkJRVFJDUXl4TlFVRTFRaXhEUVVwS096dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxFY2lMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdleUJrWldOdlpHVWdmU0JtY205dElDZGlZWE5sTmpRdFlYSnlZWGxpZFdabVpYSW5PMXh5WEc1cGJYQnZjblFnUlhabGJuUkJjMUJ5YjIxcGMyVWdabkp2YlNBblpYWmxiblF0WVhNdGNISnZiV2x6WlNjN1hISmNibHh5WEc1amIyNXpkQ0JGVFZCVVdWOU5VRE5mUWtGVFJUWTBJRDFjY2x4dUlDQW5VMVZSZWtKQlFVRkJRVUZCU1RGU1ZGVXdWVUZCUVVGUVFVRkJSRlJIUmpKYWFsVXpUR3BWTWt4cVJYZE5VVUZCUVVGQlFVRkJRVUZCUVVGQkx5OTBRWGRCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFWTlhOVzFpZDBGQlFVRTRRVUZCUVVOQlFVRkNhR2RETjNVM2RUZDFOM1UzZFRkMU4zVTNkVGQxTjNVM2RUZDFOM1UzZFRkMU4zVTNkVGQxTjNVM2RUZDFOM1UzZFRkMU4zVTNkVGQxTjNVM2RUZDFOM1UzZFRjdkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5ODRRVUZCUVVGVVIwWXlXWHBWTTB4cVdUQkJRVUZCUVVGQlFVRkJRVUZCUVVGQlNrRlZTRUZCUVVGQlFVRkJRVmxaYjFKQ2NYQkJRVUZCUVVGRUx5dDRSRVZCUVZCQlFVRkhhMEZCUVVGSlFVRkJUa2xCUVVGQlVrMVJWVEZHVFhrME5VOVROREZXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldaaTgzUlUxUmNHYzRRVUZCWVZGQlFVRkJaMEZCUVRCblFVRkJRa1pXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmxaV1ZsWldWbFpXVmljN1hISmNibHh5WEc1bWRXNWpkR2x2YmlCemRXSnpZM0pwWW1WRmRtVnVkQ2gwWVhKblpYUXNJRzVoYldVc0lHaGhibVJzWlhJcElIdGNjbHh1SUNCMFlYSm5aWFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWh1WVcxbExDQm9ZVzVrYkdWeUtUdGNjbHh1WEhKY2JpQWdjbVYwZFhKdUlDZ3BJRDArSUhSaGNtZGxkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0c1aGJXVXNJR2hoYm1Sc1pYSXBPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCaGMzbHVZMFJsWTI5a1pVRjFaR2x2UkdGMFlTaGhkV1JwYjBOdmJuUmxlSFFzSUdGeWNtRjVRblZtWm1WeUtTQjdYSEpjYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjY2x4dUlDQWdJR052Ym5OMElIQnliMjFwYzJVZ1BTQmhkV1JwYjBOdmJuUmxlSFF1WkdWamIyUmxRWFZrYVc5RVlYUmhLR0Z5Y21GNVFuVm1abVZ5TENCeVpYTnZiSFpsTENCeVpXcGxZM1FwTzF4eVhHNWNjbHh1SUNBZ0lDOHZJRTVsZDJWeUlHbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlGd2laR1ZqYjJSbFFYVmthVzlFWVhSaFhDSWdkMmxzYkNCeVpYUjFjbTRnWVNCUWNtOXRhWE5sWEhKY2JpQWdJQ0J3Y205dGFYTmxJQ1ltSUhSNWNHVnZaaUJ3Y205dGFYTmxMblJvWlc0Z1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ2NtVnpiMngyWlNod2NtOXRhWE5sS1R0Y2NseHVJQ0I5S1R0Y2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdjR3hoZVVSbFkyOWtaV1FvWVhWa2FXOURiMjUwWlhoMExDQmhkV1JwYjBKMVptWmxjaXdnYzI5MWNtTmxLU0I3WEhKY2JpQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2NseHVJQ0FnSUdOdmJuTjBJR0YxWkdsdlEyOXVkR1Y0ZEVOc2IzTmxaQ0E5SUc1bGR5QkZkbVZ1ZEVGelVISnZiV2x6WlNncE8xeHlYRzRnSUNBZ1kyOXVjM1FnYzI5MWNtTmxSVzVrWldRZ1BTQnVaWGNnUlhabGJuUkJjMUJ5YjIxcGMyVW9LVHRjY2x4dUlDQWdJR052Ym5OMElIVnVjM1ZpYzJOeWFXSmxJRDBnYzNWaWMyTnlhV0psUlhabGJuUW9YSEpjYmlBZ0lDQWdJR0YxWkdsdlEyOXVkR1Y0ZEN4Y2NseHVJQ0FnSUNBZ0ozTjBZWFJsWTJoaGJtZGxKeXhjY2x4dUlDQWdJQ0FnS0hzZ2RHRnlaMlYwT2lCN0lITjBZWFJsSUgwZ2ZTa2dQVDRnYzNSaGRHVWdQVDA5SUNkamJHOXpaV1FuSUNZbUlHRjFaR2x2UTI5dWRHVjRkRU5zYjNObFpDNWxkbVZ1ZEV4cGMzUmxibVZ5S0NsY2NseHVJQ0FnSUNrN1hISmNibHh5WEc0Z0lDQWdkSEo1SUh0Y2NseHVJQ0FnSUNBZ2MyOTFjbU5sTG1KMVptWmxjaUE5SUdGMVpHbHZRblZtWm1WeU8xeHlYRzRnSUNBZ0lDQXZMeUJjSW1WdVpHVmtYQ0lnYldGNUlHNXZkQ0JtYVhKbElHbG1JSFJvWlNCMWJtUmxjbXg1YVc1bklFRjFaR2x2UTI5dWRHVjRkQ0JwY3lCamJHOXpaV1FnY0hKbGJXRjBkWEpsYkhsY2NseHVJQ0FnSUNBZ2MyOTFjbU5sTG05dVpXNWtaV1FnUFNCemIzVnlZMlZGYm1SbFpDNWxkbVZ1ZEV4cGMzUmxibVZ5TzF4eVhHNWNjbHh1SUNBZ0lDQWdjMjkxY21ObExtTnZibTVsWTNRb1lYVmthVzlEYjI1MFpYaDBMbVJsYzNScGJtRjBhVzl1S1R0Y2NseHVJQ0FnSUNBZ2MyOTFjbU5sTG5OMFlYSjBLREFwTzF4eVhHNWNjbHh1SUNBZ0lDQWdVSEp2YldselpTNXlZV05sS0Z0aGRXUnBiME52Ym5SbGVIUkRiRzl6WldRdWRYQmpiMjFwYm1jb0tTd2djMjkxY21ObFJXNWtaV1F1ZFhCamIyMXBibWNvS1YwcExuUm9aVzRvY21WemIyeDJaU2s3WEhKY2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNjbHh1SUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEhKY2JpQWdJQ0I5SUdacGJtRnNiSGtnZTF4eVhHNGdJQ0FnSUNCMWJuTjFZbk5qY21saVpTZ3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMHBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JoYzNsdVl5Qm1kVzVqZEdsdmJpQndiR0Y1VjJocGRHVk9iMmx6WlNoaGRXUnBiME52Ym5SbGVIUXBJSHRjY2x4dUlDQmpiMjV6ZENCemIzVnlZMlVnUFNCaGRXUnBiME52Ym5SbGVIUXVZM0psWVhSbFFuVm1abVZ5VTI5MWNtTmxLQ2s3WEhKY2JpQWdZMjl1YzNRZ1lYVmthVzlDZFdabVpYSWdQU0JoZDJGcGRDQmhjM2x1WTBSbFkyOWtaVUYxWkdsdlJHRjBZU2hoZFdScGIwTnZiblJsZUhRc0lHUmxZMjlrWlNoRlRWQlVXVjlOVUROZlFrRlRSVFkwS1NrN1hISmNibHh5WEc0Z0lHRjNZV2wwSUhCc1lYbEVaV052WkdWa0tHRjFaR2x2UTI5dWRHVjRkQ3dnWVhWa2FXOUNkV1ptWlhJc0lITnZkWEpqWlNrN1hISmNibjFjY2x4dUlsMTkiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNoYXJlT2JzZXJ2YWJsZTtcblxuLyogZ2xvYmFsIE9ic2VydmFibGUgKi9cbmZ1bmN0aW9uIHNoYXJlT2JzZXJ2YWJsZShvYnNlcnZhYmxlKSB7XG4gIHZhciBvYnNlcnZlcnMgPSBbXTtcbiAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XG4gICAgICBzdWJzY3JpcHRpb24gPSBvYnNlcnZhYmxlLnN1YnNjcmliZSh7XG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBvYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoZXJyKSB7XG4gICAgICAgICAgb2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgICAgICAgIG9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBvYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9ic2VydmVycyA9IG9ic2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIG8gIT09IG9ic2VydmVyO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghb2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5emFHRnlaVTlpYzJWeWRtRmliR1V1YW5NaVhTd2libUZ0WlhNaU9sc2ljMmhoY21WUFluTmxjblpoWW14bElpd2liMkp6WlhKMllXSnNaU0lzSW05aWMyVnlkbVZ5Y3lJc0luTjFZbk5qY21sd2RHbHZiaUlzSWs5aWMyVnlkbUZpYkdVaUxDSnZZbk5sY25abGNpSXNJbk4xWW5OamNtbGlaU0lzSW1OdmJYQnNaWFJsSWl3aVptOXlSV0ZqYUNJc0ltVnljbTl5SWl3aVpYSnlJaXdpYm1WNGRDSXNJblpoYkhWbElpd2ljSFZ6YUNJc0ltWnBiSFJsY2lJc0ltOGlMQ0pzWlc1bmRHZ2lMQ0oxYm5OMVluTmpjbWxpWlNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dEJRVUZCTzBGQlJXVXNVMEZCVTBFc1pVRkJWQ3hEUVVGNVFrTXNWVUZCZWtJc1JVRkJjVU03UVVGRGJFUXNUVUZCU1VNc1UwRkJVeXhIUVVGSExFVkJRV2hDTzBGQlEwRXNUVUZCU1VNc1dVRkJTanRCUVVWQkxGTkJRVThzU1VGQlNVTXNWVUZCU2l4RFFVRmxMRlZCUVVGRExGRkJRVkVzUlVGQlNUdEJRVU5vUXl4UlFVRkpMRU5CUVVOR0xGbEJRVXdzUlVGQmJVSTdRVUZEYWtKQkxFMUJRVUZCTEZsQlFWa3NSMEZCUjBZc1ZVRkJWU3hEUVVGRFN5eFRRVUZZTEVOQlFYRkNPMEZCUTJ4RFF5eFJRVUZCUVN4UlFVUnJReXh6UWtGRGRrSTdRVUZEVkV3c1ZVRkJRVUVzVTBGQlV5eERRVUZEVFN4UFFVRldMRU5CUVd0Q0xGVkJRVUZJTEZGQlFWRTdRVUZCUVN4dFFrRkJTVUVzVVVGQlVTeERRVUZEUlN4UlFVRlVMRVZCUVVvN1FVRkJRU3hYUVVFeFFqdEJRVU5FTEZOQlNHbERPMEZCUzJ4RFJTeFJRVUZCUVN4TFFVeHJReXhwUWtGTE5VSkRMRWRCVERSQ0xFVkJTM1pDTzBGQlExUlNMRlZCUVVGQkxGTkJRVk1zUTBGQlEwMHNUMEZCVml4RFFVRnJRaXhWUVVGQlNDeFJRVUZSTzBGQlFVRXNiVUpCUVVsQkxGRkJRVkVzUTBGQlEwa3NTMEZCVkN4RFFVRmxReXhIUVVGbUxFTkJRVW83UVVGQlFTeFhRVUV4UWp0QlFVTkVMRk5CVUdsRE8wRkJVMnhEUXl4UlFVRkJRU3hKUVZSclF5eG5Ra0ZUTjBKRExFdEJWRFpDTEVWQlUzUkNPMEZCUTFaV0xGVkJRVUZCTEZOQlFWTXNRMEZCUTAwc1QwRkJWaXhEUVVGclFpeFZRVUZCU0N4UlFVRlJPMEZCUVVFc2JVSkJRVWxCTEZGQlFWRXNRMEZCUTAwc1NVRkJWQ3hEUVVGalF5eExRVUZrTEVOQlFVbzdRVUZCUVN4WFFVRXhRanRCUVVORU8wRkJXR2xETEU5QlFYSkNMRU5CUVdZN1FVRmhSRHM3UVVGRlJGWXNTVUZCUVVFc1UwRkJVeXhEUVVGRFZ5eEpRVUZXTEVOQlFXVlNMRkZCUVdZN1FVRkZRU3hYUVVGUExGbEJRVTA3UVVGRFdFZ3NUVUZCUVVFc1UwRkJVeXhIUVVGSFFTeFRRVUZUTEVOQlFVTlpMRTFCUVZZc1EwRkJhVUlzVlVGQlFVTXNRMEZCUXp0QlFVRkJMR1ZCUVVsQkxFTkJRVU1zUzBGQlMxWXNVVUZCVmp0QlFVRkJMRTlCUVd4Q0xFTkJRVm83TzBGQlJVRXNWVUZCU1N4RFFVRkRTQ3hUUVVGVExFTkJRVU5qTEUxQlFXWXNSVUZCZFVJN1FVRkRja0ppTEZGQlFVRkJMRmxCUVZrc1EwRkJRMk1zVjBGQllqdEJRVU5CWkN4UlFVRkJRU3haUVVGWkxFZEJRVWNzU1VGQlpqdEJRVU5FTzBGQlEwWXNTMEZRUkR0QlFWRkVMRWRCTTBKTkxFTkJRVkE3UVVFMFFrUWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lCbmJHOWlZV3dnVDJKelpYSjJZV0pzWlNBcUwxeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnYzJoaGNtVlBZbk5sY25aaFlteGxLRzlpYzJWeWRtRmliR1VwSUh0Y2NseHVJQ0JzWlhRZ2IySnpaWEoyWlhKeklEMGdXMTA3WEhKY2JpQWdiR1YwSUhOMVluTmpjbWx3ZEdsdmJqdGNjbHh1WEhKY2JpQWdjbVYwZFhKdUlHNWxkeUJQWW5ObGNuWmhZbXhsS0c5aWMyVnlkbVZ5SUQwK0lIdGNjbHh1SUNBZ0lHbG1JQ2doYzNWaWMyTnlhWEIwYVc5dUtTQjdYSEpjYmlBZ0lDQWdJSE4xWW5OamNtbHdkR2x2YmlBOUlHOWljMlZ5ZG1GaWJHVXVjM1ZpYzJOeWFXSmxLSHRjY2x4dUlDQWdJQ0FnSUNCamIyMXdiR1YwWlNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUc5aWMyVnlkbVZ5Y3k1bWIzSkZZV05vS0c5aWMyVnlkbVZ5SUQwK0lHOWljMlZ5ZG1WeUxtTnZiWEJzWlhSbEtDa3BPMXh5WEc0Z0lDQWdJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdWeWNtOXlLR1Z5Y2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYjJKelpYSjJaWEp6TG1admNrVmhZMmdvYjJKelpYSjJaWElnUFQ0Z2IySnpaWEoyWlhJdVpYSnliM0lvWlhKeUtTazdYSEpjYmlBZ0lDQWdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYm1WNGRDaDJZV3gxWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYjJKelpYSjJaWEp6TG1admNrVmhZMmdvYjJKelpYSjJaWElnUFQ0Z2IySnpaWEoyWlhJdWJtVjRkQ2gyWVd4MVpTa3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYjJKelpYSjJaWEp6TG5CMWMyZ29iMkp6WlhKMlpYSXBPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUFvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJRzlpYzJWeWRtVnljeUE5SUc5aWMyVnlkbVZ5Y3k1bWFXeDBaWElvYnlBOVBpQnZJQ0U5UFNCdlluTmxjblpsY2lrN1hISmNibHh5WEc0Z0lDQWdJQ0JwWmlBb0lXOWljMlZ5ZG1WeWN5NXNaVzVuZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0J6ZFdKelkzSnBjSFJwYjI0dWRXNXpkV0p6WTNKcFltVW9LVHRjY2x4dUlDQWdJQ0FnSUNCemRXSnpZM0pwY0hScGIyNGdQU0J1ZFd4c08xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lIMHBPMXh5WEc1OVhISmNiaUpkZlE9PSIsImZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjazsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eTsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCJmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7XG4gIGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDtcbiAgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTtcblxuICBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7XG4gICAgcmV0dXJuIGNhY2hlO1xuICB9O1xuXG4gIHJldHVybiBjYWNoZTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7XG5cbiAgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICB9XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuXG4gIGlmIChvYmogIT0gbnVsbCkge1xuICAgIHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsO1xuXG4gICAgICAgIGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqO1xuXG4gIGlmIChjYWNoZSkge1xuICAgIGNhY2hlLnNldChvYmosIG5ld09iaik7XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsInZhciBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlID0gcmVxdWlyZShcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllczsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCJ2YXIgYXJyYXlXaXRob3V0SG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIG5vbkl0ZXJhYmxlU3ByZWFkID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVTcHJlYWRcIik7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9Db25zdW1hYmxlQXJyYXk7IiwiZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YyKG9iaik7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8qZ2xvYmFscyBzZWxmLCB3aW5kb3cgKi9cblwidXNlIHN0cmljdFwiXG5cbi8qZXNsaW50LWRpc2FibGUgQG15c3RpY2F0ZWEvcHJldHRpZXIgKi9cbmNvbnN0IHsgQWJvcnRDb250cm9sbGVyLCBBYm9ydFNpZ25hbCB9ID1cbiAgICB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOlxuICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOlxuICAgIC8qIG90aGVyd2lzZSAqLyB1bmRlZmluZWRcbi8qZXNsaW50LWVuYWJsZSBAbXlzdGljYXRlYS9wcmV0dGllciAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFib3J0Q29udHJvbGxlclxubW9kdWxlLmV4cG9ydHMuQWJvcnRTaWduYWwgPSBBYm9ydFNpZ25hbFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IEFib3J0Q29udHJvbGxlclxuIiwiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKCl7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBjaGFycyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuXG4gIC8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbiAgdmFyIGxvb2t1cCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xuICB9XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkpXTtcbiAgICAgIGVuY29kZWQyID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMSldO1xuICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsyKV07XG4gICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzMpXTtcblxuICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlidWZmZXI7XG4gIH07XG59KSgpO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXNuZXh0LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3InKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL3BhdGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXRoLk9ic2VydmFibGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSAmJiBpdCAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGhpZGUoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCBjcmVhdGUobnVsbCkpO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0dXJuTWV0aG9kLmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGhpZGUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgaGlkZShJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IsIGRlZmF1bHRJdGVyYXRvcik7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93cmFwcGVkLXdlbGwta25vd24tc3ltYm9sJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXMoU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgaGlkZShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzaGFyZWQoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoaXQpO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yTWV0aG9kICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gIH0gcmV0dXJuIGFuT2JqZWN0KGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXQpKTtcbn07XG4iLCJ2YXIgTyA9ICdvYmplY3QnO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gTyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09IE8gJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSBPICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gTyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaGlkZShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgaXRlcmF0ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBmbiwgdGhhdCwgQVNfRU5UUklFUywgSVNfSVRFUkFUT1IpIHtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGZuLCB0aGF0LCBBU19FTlRSSUVTID8gMiA6IDEpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBzdGVwO1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gQVNfRU5UUklFU1xuICAgICAgICAgID8gYm91bmRGdW5jdGlvbihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSlcbiAgICAgICAgICA6IGJvdW5kRnVuY3Rpb24oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgcmVzdWx0ID0gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgYm91bmRGdW5jdGlvbiwgc3RlcC52YWx1ZSwgQVNfRU5UUklFUyk7XG4gICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcblxuaXRlcmF0ZS5zdG9wID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICByZXR1cm4gbmV3IFJlc3VsdCh0cnVlLCByZXN1bHQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxuaWYgKEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbmlmICghSVNfUFVSRSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBuYXRpdmVGdW5jdGlvblRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwoV2Vha01hcCkpO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgc2NyaXB0ID0gJ3NjcmlwdCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGpzID0gJ2phdmEnICsgc2NyaXB0ICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoanMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgc2NyaXB0ICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnLycgKyBzY3JpcHQgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICBzZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQ7XG4gICAgc2V0dGVyLmNhbGwodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIuY2FsbChPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSAhPT0gJ1tvYmplY3Qgel0nID8gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn0gOiB0ZXN0LnRvU3RyaW5nO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBuYXRpdmVGdW5jdGlvblRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhuYXRpdmVGdW5jdGlvblRvU3RyaW5nKS5zcGxpdCgndG9TdHJpbmcnKTtcblxuc2hhcmVkKCdpbnNwZWN0U291cmNlJywgZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xufSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgaGlkZSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBoaWRlKE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGhpZGUoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy4yLjEnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgY29kZVBvaW50QXQsIGF0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklORyA/IFMuY2hhckF0KHBvc2l0aW9uKSA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkcgPyBTLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGxlbmd0aCwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgc3RvcmUgPSBzaGFyZWQoJ3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPSBOQVRJVkVfU1lNQk9MICYmIFN5bWJvbFtuYW1lXVxuICAgIHx8IChOQVRJVkVfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogaW5kZXgsIGRvbmU6IGZhbHNlIH07XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4geyB2YWx1ZTogdGFyZ2V0W2luZGV4XSwgZG9uZTogZmFsc2UgfTtcbiAgcmV0dXJuIHsgdmFsdWU6IFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGRvbmU6IGZhbHNlIH07XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKHRvU3RyaW5nICE9PSBPYmplY3RQcm90b3R5cGUudG9TdHJpbmcpIHtcbiAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBPQlNFUlZBQkxFID0gd2VsbEtub3duU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb25TdGF0ZSkge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvblN0YXRlLmNsZWFudXA7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uU3RhdGUuY2xlYW51cCA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgY2xlYW51cCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBob3N0UmVwb3J0RXJyb3JzKGVycm9yKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBzdWJzY3JpcHRpb25DbG9zZWQgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uU3RhdGUpIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvblN0YXRlLm9ic2VydmVyID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2UgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uLCBzdWJzY3JpcHRpb25TdGF0ZSkge1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgc3Vic2NyaXB0aW9uLmNsb3NlZCA9IHRydWU7XG4gICAgdmFyIHN1YnNjcmlwdGlvbk9ic2VydmVyID0gc3Vic2NyaXB0aW9uU3RhdGUuc3Vic2NyaXB0aW9uT2JzZXJ2ZXI7XG4gICAgaWYgKHN1YnNjcmlwdGlvbk9ic2VydmVyKSBzdWJzY3JpcHRpb25PYnNlcnZlci5jbG9zZWQgPSB0cnVlO1xuICB9IHN1YnNjcmlwdGlvblN0YXRlLm9ic2VydmVyID0gdW5kZWZpbmVkO1xufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICB2YXIgc3Vic2NyaXB0aW9uU3RhdGUgPSBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICBjbGVhbnVwOiB1bmRlZmluZWQsXG4gICAgb2JzZXJ2ZXI6IGFuT2JqZWN0KG9ic2VydmVyKSxcbiAgICBzdWJzY3JpcHRpb25PYnNlcnZlcjogdW5kZWZpbmVkXG4gIH0pO1xuICB2YXIgc3RhcnQ7XG4gIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXJ0ID0gZ2V0TWV0aG9kKG9ic2VydmVyLnN0YXJ0KSkgc3RhcnQuY2FsbChvYnNlcnZlciwgdGhpcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaG9zdFJlcG9ydEVycm9ycyhlcnJvcik7XG4gIH1cbiAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb25TdGF0ZSkpIHJldHVybjtcbiAgdmFyIHN1YnNjcmlwdGlvbk9ic2VydmVyID0gc3Vic2NyaXB0aW9uU3RhdGUuc3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKHN1YnNjcmlwdGlvbk9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSBzdWJzY3JpcHRpb25TdGF0ZS5jbGVhbnVwID0gdHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gZnVuY3Rpb24gKCkgeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfVxuICAgICAgOiBhRnVuY3Rpb24oY2xlYW51cCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgc3Vic2NyaXB0aW9uT2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvblN0YXRlKSkgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25TdGF0ZSk7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb25TdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uU3RhdGUpKSB7XG4gICAgICBjbG9zZSh0aGlzLCBzdWJzY3JpcHRpb25TdGF0ZSk7XG4gICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvblN0YXRlKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5pZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KFN1YnNjcmlwdGlvbi5wcm90b3R5cGUsICdjbG9zZWQnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbkNsb3NlZChnZXRJbnRlcm5hbFN0YXRlKHRoaXMpKTtcbiAgfVxufSk7XG5cbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7IHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSB0aGlzLmNsb3NlZCA9IGZhbHNlO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb25TdGF0ZSA9IGdldEludGVybmFsU3RhdGUoZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdWJzY3JpcHRpb24pO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvblN0YXRlKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uU3RhdGUub2JzZXJ2ZXI7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV4dE1ldGhvZCA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgaWYgKG5leHRNZXRob2QpIG5leHRNZXRob2QuY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaG9zdFJlcG9ydEVycm9ycyhlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdWJzY3JpcHRpb247XG4gICAgdmFyIHN1YnNjcmlwdGlvblN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShzdWJzY3JpcHRpb24pO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvblN0YXRlKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uU3RhdGUub2JzZXJ2ZXI7XG4gICAgICBjbG9zZShzdWJzY3JpcHRpb24sIHN1YnNjcmlwdGlvblN0YXRlKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBlcnJvck1ldGhvZCA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICAgIGlmIChlcnJvck1ldGhvZCkgZXJyb3JNZXRob2QuY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgICBlbHNlIGhvc3RSZXBvcnRFcnJvcnModmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGhvc3RSZXBvcnRFcnJvcnMoZXJyKTtcbiAgICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25TdGF0ZSk7XG4gICAgfVxuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGdldEludGVybmFsU3RhdGUodGhpcykuc3Vic2NyaXB0aW9uO1xuICAgIHZhciBzdWJzY3JpcHRpb25TdGF0ZSA9IGdldEludGVybmFsU3RhdGUoc3Vic2NyaXB0aW9uKTtcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb25TdGF0ZSkpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvblN0YXRlLm9ic2VydmVyO1xuICAgICAgY2xvc2Uoc3Vic2NyaXB0aW9uLCBzdWJzY3JpcHRpb25TdGF0ZSk7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgY29tcGxldGVNZXRob2QgPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICBpZiAoY29tcGxldGVNZXRob2QpIGNvbXBsZXRlTWV0aG9kLmNhbGwob2JzZXJ2ZXIpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaG9zdFJlcG9ydEVycm9ycyhlcnJvcik7XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uU3RhdGUpO1xuICAgIH1cbiAgfVxufSk7XG5cbmlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkoU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLCAnY2xvc2VkJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdWJzY3JpcHRpb25DbG9zZWQoZ2V0SW50ZXJuYWxTdGF0ZShnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnN1YnNjcmlwdGlvbikpO1xuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJyk7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywgeyBzdWJzY3JpYmVyOiBhRnVuY3Rpb24oc3Vic2NyaWJlcikgfSk7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbih0eXBlb2Ygb2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicgPyB7XG4gICAgICBuZXh0OiBvYnNlcnZlcixcbiAgICAgIGVycm9yOiBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLFxuICAgICAgY29tcGxldGU6IGxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgICB9IDogaXNPYmplY3Qob2JzZXJ2ZXIpID8gb2JzZXJ2ZXIgOiB7fSwgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdWJzY3JpYmVyKTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG9ic2VydmFibGVNZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChvYnNlcnZhYmxlTWV0aG9kKSB7XG4gICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFuT2JqZWN0KG9ic2VydmFibGVNZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcih4KTtcbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICBpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChpdCk7XG4gICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpIHJldHVybiBpdGVyYXRlLnN0b3AoKTtcbiAgICAgIH0sIHVuZGVmaW5lZCwgZmFsc2UsIHRydWUpO1xuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGl0ZW1zID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGl0ZW1zW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbaV0pO1xuICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKSByZXR1cm47XG4gICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbiQoeyBnbG9iYWw6IHRydWUgfSwge1xuICBPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZVxufSk7XG5cbnNldFNwZWNpZXMoJ09ic2VydmFibGUnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wub2JzZXJ2YWJsZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGhpZGUoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSBoaWRlKENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgaGlkZShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSBTaW5kcmUgU29yaHVzIDxzaW5kcmVzb3JodXNAZ21haWwuY29tPiAoc2luZHJlc29yaHVzLmNvbSlcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy8gVGhpcyBwaWVjZSBvZiBjb2RlIGlzIGFkb3B0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3AtZGVmZXJcbi8vIFRoZSByZWFzb24gd2h5IHdlIG5lZWQgdG8gZm9yayBpdCBpcyBiZWNhdXNlOlxuLy8gLSBUaGUgb3JpZ2luYWwgcGFja2FnZSBwdWJsaXNoZWQgdG8gTlBNIGlzIG5vdCBFUzUtY29tcGxpYW50XG4vLyAgICAtIER1ZSB0byB0aGUgdXNlIG9mIGFycm93IGZ1bmN0aW9uc1xuLy8gLSBjcmVhdGUtcmVhY3QtYXBwQDEgZG9lcyBub3QgcGxheSBuaWNlIHdpdGggcGFja2FnZXMgdGhhdCBhcmUgbm90IEVTNS1jb21wbGlhbnRcbi8vICAgIC0gY3JlYXRlLXJlYWN0LWFwcEAyIGRvIHBsYXkgbmljZSwgYnV0IGl0IHdhcyBzbyBuZXcgdGhhdCBtb3N0IG9mIHRoZSBwZW9wbGUgYXJlIHN0aWxsIG9uIEAxXG4vLyBDcml0ZXJpYSB0byByZW1vdmUgdGhpcyBwYWNrYWdlOlxuLy8gLSBXaGVuIGNyZWF0ZS1yZWFjdC1hcHBAMiBiZWNvbWUgbWFpbnN0cmVhbSwgb3IsXG4vLyAtIFdoZW4gcC1kZWZlciBzdGFydCBwdWJsaXNoaW5nIGEgRVM1LWNvbXBsaWFudCB2ZXJzaW9uIG9uIE5QTVxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJldCA9IHt9O1xuICByZXQucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXQucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgcmV0LnJlamVjdCA9IHJlamVjdDtcbiAgfSk7XG4gIHJldHVybiByZXQ7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5bGVIUmxjbTVoYkM5d0xXUmxabVZ5TG1weklsMHNJbTVoYldWeklqcGJJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0p5WlhRaUxDSndjbTl0YVhObElpd2lVSEp2YldselpTSXNJbkpsYzI5c2RtVWlMQ0p5WldwbFkzUWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVWQk96dEJRVVZCUVN4TlFVRk5MRU5CUVVORExFOUJRVkFzUjBGQmFVSXNXVUZCV1R0QlFVTXpRaXhOUVVGTlF5eEhRVUZITEVkQlFVY3NSVUZCV2p0QlFVVkJRU3hGUVVGQlFTeEhRVUZITEVOQlFVTkRMRTlCUVVvc1IwRkJZeXhKUVVGSlF5eFBRVUZLTEVOQlFWa3NWVUZCVlVNc1QwRkJWaXhGUVVGdFFrTXNUVUZCYmtJc1JVRkJNa0k3UVVGRGJrUktMRWxCUVVGQkxFZEJRVWNzUTBGQlEwY3NUMEZCU2l4SFFVRmpRU3hQUVVGa08wRkJRMEZJTEVsQlFVRkJMRWRCUVVjc1EwRkJRMGtzVFVGQlNpeEhRVUZoUVN4TlFVRmlPMEZCUTBRc1IwRklZU3hEUVVGa08wRkJTMEVzVTBGQlQwb3NSMEZCVUR0QlFVTkVMRU5CVkVRaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZMeUJVYUdVZ1RVbFVJRXhwWTJWdWMyVWdLRTFKVkNsY2JpOHZYRzR2THlCRGIzQjVjbWxuYUhRZ0tHTXBJRk5wYm1SeVpTQlRiM0pvZFhNZ1BITnBibVJ5WlhOdmNtaDFjMEJuYldGcGJDNWpiMjArSUNoemFXNWtjbVZ6YjNKb2RYTXVZMjl0S1Z4dUx5OWNiaTh2SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNiaTh2SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaRzlqZFcxbGJuUmhkR2x2YmlCbWFXeGxjeUFvZEdobElGd2lVMjltZEhkaGNtVmNJaWtzSUhSdklHUmxZV3hjYmk4dklHbHVJSFJvWlNCVGIyWjBkMkZ5WlNCM2FYUm9iM1YwSUhKbGMzUnlhV04wYVc5dUxDQnBibU5zZFdScGJtY2dkMmwwYUc5MWRDQnNhVzFwZEdGMGFXOXVJSFJvWlNCeWFXZG9kSE5jYmk4dklIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0J0WlhKblpTd2djSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3dnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHeGNiaTh2SUdOdmNHbGxjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXNJR0Z1WkNCMGJ5QndaWEp0YVhRZ2NHVnljMjl1Y3lCMGJ5QjNhRzl0SUhSb1pTQlRiMlowZDJGeVpTQnBjMXh1THk4Z1puVnlibWx6YUdWa0lIUnZJR1J2SUhOdkxDQnpkV0pxWldOMElIUnZJSFJvWlNCbWIyeHNiM2RwYm1jZ1kyOXVaR2wwYVc5dWN6cGNiaTh2WEc0dkx5QlVhR1VnWVdKdmRtVWdZMjl3ZVhKcFoyaDBJRzV2ZEdsalpTQmhibVFnZEdocGN5QndaWEp0YVhOemFXOXVJRzV2ZEdsalpTQnphR0ZzYkNCaVpTQnBibU5zZFdSbFpDQnBibHh1THk4Z1lXeHNJR052Y0dsbGN5QnZjaUJ6ZFdKemRHRnVkR2xoYkNCd2IzSjBhVzl1Y3lCdlppQjBhR1VnVTI5bWRIZGhjbVV1WEc0dkwxeHVMeThnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVXlCUFVseHVMeThnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzWEc0dkx5QkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjYmk4dklFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2JpOHZJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSWdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc1hHNHZMeUJQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPWEc0dkx5QlVTRVVnVTA5R1ZGZEJVa1V1WEc1Y2JpOHZJRlJvYVhNZ2NHbGxZMlVnYjJZZ1kyOWtaU0JwY3lCaFpHOXdkR1ZrSUdaeWIyMGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM05wYm1SeVpYTnZjbWgxY3k5d0xXUmxabVZ5WEc1Y2JpOHZJRlJvWlNCeVpXRnpiMjRnZDJoNUlIZGxJRzVsWldRZ2RHOGdabTl5YXlCcGRDQnBjeUJpWldOaGRYTmxPbHh1THk4Z0xTQlVhR1VnYjNKcFoybHVZV3dnY0dGamEyRm5aU0J3ZFdKc2FYTm9aV1FnZEc4Z1RsQk5JR2x6SUc1dmRDQkZVelV0WTI5dGNHeHBZVzUwWEc0dkx5QWdJQ0F0SUVSMVpTQjBieUIwYUdVZ2RYTmxJRzltSUdGeWNtOTNJR1oxYm1OMGFXOXVjMXh1THk4Z0xTQmpjbVZoZEdVdGNtVmhZM1F0WVhCd1FERWdaRzlsY3lCdWIzUWdjR3hoZVNCdWFXTmxJSGRwZEdnZ2NHRmphMkZuWlhNZ2RHaGhkQ0JoY21VZ2JtOTBJRVZUTlMxamIyMXdiR2xoYm5SY2JpOHZJQ0FnSUMwZ1kzSmxZWFJsTFhKbFlXTjBMV0Z3Y0VBeUlHUnZJSEJzWVhrZ2JtbGpaU3dnWW5WMElHbDBJSGRoY3lCemJ5QnVaWGNnZEdoaGRDQnRiM04wSUc5bUlIUm9aU0J3Wlc5d2JHVWdZWEpsSUhOMGFXeHNJRzl1SUVBeFhHNWNiaTh2SUVOeWFYUmxjbWxoSUhSdklISmxiVzkyWlNCMGFHbHpJSEJoWTJ0aFoyVTZYRzR2THlBdElGZG9aVzRnWTNKbFlYUmxMWEpsWVdOMExXRndjRUF5SUdKbFkyOXRaU0J0WVdsdWMzUnlaV0Z0TENCdmNpeGNiaTh2SUMwZ1YyaGxiaUJ3TFdSbFptVnlJSE4wWVhKMElIQjFZbXhwYzJocGJtY2dZU0JGVXpVdFkyOXRjR3hwWVc1MElIWmxjbk5wYjI0Z2IyNGdUbEJOWEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUdOdmJuTjBJSEpsZENBOUlIdDlPMXh1WEc0Z0lISmxkQzV3Y205dGFYTmxJRDBnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0Z0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUhKbGRDNXlaWE52YkhabElEMGdjbVZ6YjJ4MlpUdGNiaUFnSUNCeVpYUXVjbVZxWldOMElEMGdjbVZxWldOME8xeHVJQ0I5S1R0Y2JseHVJQ0J5WlhSMWNtNGdjbVYwTzF4dWZUdGNiaUpkZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3BEZWZlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZXh0ZXJuYWwvcC1kZWZlclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIEV2ZW50QXNQcm9taXNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRXZlbnRBc1Byb21pc2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFdmVudEFzUHJvbWlzZSk7XG5cbiAgICB0aGlzLmRlZmVycyA9IFtdO1xuICAgIHRoaXMudXBjb21pbmdEZWZlcnJlZCA9IG51bGw7XG4gICAgdGhpcy5ldmVudExpc3RlbmVyID0gdGhpcy5ldmVudExpc3RlbmVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLm9uZSA9IHRoaXMub25lLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGNvbWluZyA9IHRoaXMudXBjb21pbmcuYmluZCh0aGlzKTtcblxuICAgIHRoaXNbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IF90aGlzLnVwY29taW5nKClcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRXZlbnRBc1Byb21pc2UsIFt7XG4gICAga2V5OiBcImV2ZW50TGlzdGVuZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXZlbnRMaXN0ZW5lcihldmVudCkge1xuICAgICAgdmFyIGRlZmVycmVkID0gdGhpcy5kZWZlcnMuc2hpZnQoKTtcbiAgICAgIHZhciBhcmdzID0gdGhpcy5vcHRpb25zLmFycmF5ID8gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpIDogZXZlbnQ7XG4gICAgICBkZWZlcnJlZCAmJiBkZWZlcnJlZC5yZXNvbHZlKGFyZ3MpO1xuXG4gICAgICBpZiAodGhpcy51cGNvbWluZ0RlZmVycmVkKSB7XG4gICAgICAgIHRoaXMudXBjb21pbmdEZWZlcnJlZC5yZXNvbHZlKGFyZ3MpO1xuICAgICAgICB0aGlzLnVwY29taW5nRGVmZXJyZWQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25lKCkge1xuICAgICAgdmFyIGRlZmVycmVkID0gKDAsIF9wRGVmZXIuZGVmYXVsdCkoKTtcbiAgICAgIHRoaXMuZGVmZXJzLnB1c2goZGVmZXJyZWQpO1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwY29taW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwY29taW5nKCkge1xuICAgICAgaWYgKCF0aGlzLnVwY29taW5nRGVmZXJyZWQpIHtcbiAgICAgICAgdGhpcy51cGNvbWluZ0RlZmVycmVkID0gKDAsIF9wRGVmZXIuZGVmYXVsdCkoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMudXBjb21pbmdEZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFdmVudEFzUHJvbWlzZTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRBc1Byb21pc2U7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXeUpGZG1WdWRFRnpVSEp2YldselpTSXNJbTl3ZEdsdmJuTWlMQ0prWldabGNuTWlMQ0oxY0dOdmJXbHVaMFJsWm1WeWNtVmtJaXdpWlhabGJuUk1hWE4wWlc1bGNpSXNJbUpwYm1RaUxDSnZibVVpTENKMWNHTnZiV2x1WnlJc0lsTjViV0p2YkNJc0ltbDBaWEpoZEc5eUlpd2libVY0ZENJc0ltUnZibVVpTENKMllXeDFaU0lzSW1WMlpXNTBJaXdpWkdWbVpYSnlaV1FpTENKemFHbG1kQ0lzSW1GeVozTWlMQ0poY25KaGVTSXNJbk5zYVdObElpd2lZMkZzYkNJc0ltRnlaM1Z0Wlc1MGN5SXNJbkpsYzI5c2RtVWlMQ0p3ZFhOb0lpd2ljSEp2YldselpTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenRCUVVGQk96czdPenM3T3pzN08wbEJSWEZDUVN4ak96czdRVUZEYmtJc05FSkJRVEJDTzBGQlFVRTdPMEZCUVVFc1VVRkJaRU1zVDBGQll5eDFSVUZCU2l4RlFVRkpPenRCUVVGQk96dEJRVU40UWl4VFFVRkxReXhOUVVGTUxFZEJRV01zUlVGQlpEdEJRVU5CTEZOQlFVdERMR2RDUVVGTUxFZEJRWGRDTEVsQlFYaENPMEZCUTBFc1UwRkJTME1zWVVGQlRDeEhRVUZ4UWl4TFFVRkxRU3hoUVVGTUxFTkJRVzFDUXl4SlFVRnVRaXhEUVVGM1FpeEpRVUY0UWl4RFFVRnlRanRCUVVOQkxGTkJRVXRLTEU5QlFVd3NSMEZCWlVFc1QwRkJaanRCUVVWQkxGTkJRVXRMTEVkQlFVd3NSMEZCVnl4TFFVRkxRU3hIUVVGTUxFTkJRVk5FTEVsQlFWUXNRMEZCWXl4SlFVRmtMRU5CUVZnN1FVRkRRU3hUUVVGTFJTeFJRVUZNTEVkQlFXZENMRXRCUVV0QkxGRkJRVXdzUTBGQlkwWXNTVUZCWkN4RFFVRnRRaXhKUVVGdVFpeERRVUZvUWpzN1FVRkZRU3hUUVVGTFJ5eE5RVUZOTEVOQlFVTkRMRkZCUVZvc1NVRkJkMEk3UVVGQlFTeGhRVUZQTzBGQlF6ZENReXhSUVVGQlFTeEpRVUZKTEVWQlFVVTdRVUZCUVN4cFFrRkJUenRCUVVOWVF5eFpRVUZCUVN4SlFVRkpMRVZCUVVVc1MwRkVTenRCUVVWWVF5eFpRVUZCUVN4TFFVRkxMRVZCUVVVc1MwRkJTU3hEUVVGRFRDeFJRVUZNTzBGQlJra3NWMEZCVUR0QlFVRkJPMEZCUkhWQ0xFOUJRVkE3UVVGQlFTeExRVUY0UWp0QlFVMUVPenM3TzJ0RFFVVmhUU3hMTEVWQlFVODdRVUZEYmtJc1ZVRkJUVU1zVVVGQlVTeEhRVUZITEV0QlFVdGFMRTFCUVV3c1EwRkJXV0VzUzBGQldpeEZRVUZxUWp0QlFVTkJMRlZCUVUxRExFbEJRVWtzUjBGQlJ5eExRVUZMWml4UFFVRk1MRU5CUVdGblFpeExRVUZpTEVkQlFYRkNMRWRCUVVkRExFdEJRVWdzUTBGQlUwTXNTVUZCVkN4RFFVRmpReXhUUVVGa0xFTkJRWEpDTEVkQlFXZEVVQ3hMUVVFM1JEdEJRVVZCUXl4TlFVRkJRU3hSUVVGUkxFbEJRVWxCTEZGQlFWRXNRMEZCUTA4c1QwRkJWQ3hEUVVGcFFrd3NTVUZCYWtJc1EwRkJXanM3UVVGRlFTeFZRVUZKTEV0QlFVdGlMR2RDUVVGVUxFVkJRVEpDTzBGQlEzcENMR0ZCUVV0QkxHZENRVUZNTEVOQlFYTkNhMElzVDBGQmRFSXNRMEZCT0VKTUxFbEJRVGxDTzBGQlEwRXNZVUZCUzJJc1owSkJRVXdzUjBGQmQwSXNTVUZCZUVJN1FVRkRSRHRCUVVOR096czdNRUpCUlVzN1FVRkRTaXhWUVVGTlZ5eFJRVUZSTEVkQlFVY3NjMEpCUVdwQ08wRkJSVUVzVjBGQlMxb3NUVUZCVEN4RFFVRlpiMElzU1VGQldpeERRVUZwUWxJc1VVRkJha0k3UVVGRlFTeGhRVUZQUVN4UlFVRlJMRU5CUVVOVExFOUJRV2hDTzBGQlEwUTdPenNyUWtGRlZUdEJRVU5VTEZWQlFVa3NRMEZCUXl4TFFVRkxjRUlzWjBKQlFWWXNSVUZCTkVJN1FVRkRNVUlzWVVGQlMwRXNaMEpCUVV3c1IwRkJkMElzYzBKQlFYaENPMEZCUTBRN08wRkJSVVFzWVVGQlR5eExRVUZMUVN4blFrRkJUQ3hEUVVGelFtOUNMRTlCUVRkQ08wRkJRMFFpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnWTNKbFlYUmxSR1ZtWlhKeVpXUWdabkp2YlNBbkxpOWxlSFJsY201aGJDOXdMV1JsWm1WeUp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1JYWmxiblJCYzFCeWIyMXBjMlVnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh2Y0hScGIyNXpJRDBnZTMwcElIdGNiaUFnSUNCMGFHbHpMbVJsWm1WeWN5QTlJRnRkTzF4dUlDQWdJSFJvYVhNdWRYQmpiMjFwYm1kRVpXWmxjbkpsWkNBOUlHNTFiR3c3WEc0Z0lDQWdkR2hwY3k1bGRtVnVkRXhwYzNSbGJtVnlJRDBnZEdocGN5NWxkbVZ1ZEV4cGMzUmxibVZ5TG1KcGJtUW9kR2hwY3lrN1hHNGdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdiM0IwYVc5dWN6dGNibHh1SUNBZ0lIUm9hWE11YjI1bElEMGdkR2hwY3k1dmJtVXVZbWx1WkNoMGFHbHpLVHRjYmlBZ0lDQjBhR2x6TG5Wd1kyOXRhVzVuSUQwZ2RHaHBjeTUxY0dOdmJXbHVaeTVpYVc1a0tIUm9hWE1wTzF4dVhHNGdJQ0FnZEdocGMxdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZElEMGdLQ2tnUFQ0Z0tIdGNiaUFnSUNBZ0lHNWxlSFE2SUNncElEMCtJQ2g3WEc0Z0lDQWdJQ0FnSUdSdmJtVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2RHaHBjeTUxY0dOdmJXbHVaeWdwWEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1pYWmxiblJNYVhOMFpXNWxjaWhsZG1WdWRDa2dlMXh1SUNBZ0lHTnZibk4wSUdSbFptVnljbVZrSUQwZ2RHaHBjeTVrWldabGNuTXVjMmhwWm5Rb0tUdGNiaUFnSUNCamIyNXpkQ0JoY21keklEMGdkR2hwY3k1dmNIUnBiMjV6TG1GeWNtRjVJRDhnVzEwdWMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXBJRG9nWlhabGJuUTdYRzVjYmlBZ0lDQmtaV1psY25KbFpDQW1KaUJrWldabGNuSmxaQzV5WlhOdmJIWmxLR0Z5WjNNcE8xeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdWRYQmpiMjFwYm1kRVpXWmxjbkpsWkNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUxY0dOdmJXbHVaMFJsWm1WeWNtVmtMbkpsYzI5c2RtVW9ZWEpuY3lrN1hHNGdJQ0FnSUNCMGFHbHpMblZ3WTI5dGFXNW5SR1ZtWlhKeVpXUWdQU0J1ZFd4c08xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHOXVaU2dwSUh0Y2JpQWdJQ0JqYjI1emRDQmtaV1psY25KbFpDQTlJR055WldGMFpVUmxabVZ5Y21Wa0tDazdYRzVjYmlBZ0lDQjBhR2x6TG1SbFptVnljeTV3ZFhOb0tHUmxabVZ5Y21Wa0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlCa1pXWmxjbkpsWkM1d2NtOXRhWE5sTzF4dUlDQjlYRzVjYmlBZ2RYQmpiMjFwYm1jb0tTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxuVndZMjl0YVc1blJHVm1aWEp5WldRcElIdGNiaUFnSUNBZ0lIUm9hWE11ZFhCamIyMXBibWRFWldabGNuSmxaQ0E5SUdOeVpXRjBaVVJsWm1WeWNtVmtLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZFhCamIyMXBibWRFWldabGNuSmxaQzV3Y205dGFYTmxPMXh1SUNCOVhHNTlYRzRpWFgwPSIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBDb25zb2xlTG9nZ2luZ0xpc3RlbmVyIH0gZnJvbSBcIi4vc3JjL2NvbW1vbi5icm93c2VyL0V4cG9ydHNcIjtcbmltcG9ydCB7IEV2ZW50cyB9IGZyb20gXCIuL3NyYy9jb21tb24vRXhwb3J0c1wiO1xuLy8gQ29tbW9uLlN0b3JhZ2UuU2V0TG9jYWxTdG9yYWdlKG5ldyBDb21tb24uQnJvd3Nlci5Mb2NhbFN0b3JhZ2UoKSk7XG4vLyBDb21tb24uU3RvcmFnZS5TZXRTZXNzaW9uU3RvcmFnZShuZXcgQ29tbW9uLkJyb3dzZXIuU2Vzc2lvblN0b3JhZ2UoKSk7XG5FdmVudHMuaW5zdGFuY2UuYXR0YWNoTGlzdGVuZXIobmV3IENvbnNvbGVMb2dnaW5nTGlzdGVuZXIoKSk7XG4vLyBTcGVlY2ggU0RLIEFQSVxuZXhwb3J0ICogZnJvbSBcIi4vc3JjL3Nkay9FeHBvcnRzXCI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pY3Jvc29mdC5jb2duaXRpdmVzZXJ2aWNlcy5zcGVlY2guc2RrLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBFdmVudFR5cGUgfSBmcm9tIFwiLi4vY29tbW9uL0V4cG9ydHNcIjtcbmV4cG9ydCBjbGFzcyBDb25zb2xlTG9nZ2luZ0xpc3RlbmVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2dMZXZlbEZpbHRlciA9IEV2ZW50VHlwZS5XYXJuaW5nKSB7XG4gICAgICAgIHRoaXMub25FdmVudCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmV2ZW50VHlwZSA+PSB0aGlzLnByaXZMb2dMZXZlbEZpbHRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvZyA9IHRoaXMudG9TdHJpbmcoZXZlbnQpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuZXZlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRXZlbnRUeXBlLkRlYnVnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcobG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEV2ZW50VHlwZS5JbmZvOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhsb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRXZlbnRUeXBlLldhcm5pbmc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFdmVudFR5cGUuRXJyb3I6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihsb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50b1N0cmluZyA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9nRnJhZ21lbnRzID0gW1xuICAgICAgICAgICAgICAgIGAke2V2ZW50LkV2ZW50VGltZX1gLFxuICAgICAgICAgICAgICAgIGAke2V2ZW50Lk5hbWV9YCxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcCAmJiBldmVudC5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJlxuICAgICAgICAgICAgICAgICAgICBwcm9wICE9PSBcImV2ZW50VGltZVwiICYmIHByb3AgIT09IFwiZXZlbnRUeXBlXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJvcCAhPT0gXCJldmVudElkXCIgJiYgcHJvcCAhPT0gXCJuYW1lXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJvcCAhPT0gXCJjb25zdHJ1Y3RvclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZXZlbnRbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZVRvTG9nID0gXCI8TlVMTD5cIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlVG9Mb2cgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVUb0xvZyA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb2dGcmFnbWVudHMucHVzaChgJHtwcm9wfTogJHt2YWx1ZVRvTG9nfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsb2dGcmFnbWVudHMuam9pbihcIiB8IFwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcml2TG9nTGV2ZWxGaWx0ZXIgPSBsb2dMZXZlbEZpbHRlcjtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnNvbGVMb2dnaW5nTGlzdGVuZXIuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCAqIGZyb20gXCIuL0NvbnNvbGVMb2dnaW5nTGlzdGVuZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL01pY0F1ZGlvU291cmNlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9GaWxlQXVkaW9Tb3VyY2VcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1BDTVJlY29yZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9XZWJzb2NrZXRDb25uZWN0aW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9XZWJzb2NrZXRNZXNzYWdlQWRhcHRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vUmVwbGF5YWJsZUF1ZGlvTm9kZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vUHJveHlJbmZvXCI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4cG9ydHMuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEF1ZGlvU3RyZWFtRm9ybWF0IH0gZnJvbSBcIi4uLy4uL3NyYy9zZGsvQXVkaW8vQXVkaW9TdHJlYW1Gb3JtYXRcIjtcbmltcG9ydCB7IGNvbm5lY3Rpdml0eSwgdHlwZSwgfSBmcm9tIFwiLi4vY29tbW9uLnNwZWVjaC9FeHBvcnRzXCI7XG5pbXBvcnQgeyBBdWRpb1NvdXJjZUVycm9yRXZlbnQsIEF1ZGlvU291cmNlSW5pdGlhbGl6aW5nRXZlbnQsIEF1ZGlvU291cmNlT2ZmRXZlbnQsIEF1ZGlvU291cmNlUmVhZHlFdmVudCwgQXVkaW9TdHJlYW1Ob2RlQXR0YWNoZWRFdmVudCwgQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnQsIEF1ZGlvU3RyZWFtTm9kZURldGFjaGVkRXZlbnQsIEF1ZGlvU3RyZWFtTm9kZUVycm9yRXZlbnQsIGNyZWF0ZU5vRGFzaEd1aWQsIEV2ZW50cywgRXZlbnRTb3VyY2UsIFByb21pc2VIZWxwZXIsIFN0cmVhbSwgfSBmcm9tIFwiLi4vY29tbW9uL0V4cG9ydHNcIjtcbmV4cG9ydCBjbGFzcyBGaWxlQXVkaW9Tb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKGZpbGUsIGF1ZGlvU291cmNlSWQpIHtcbiAgICAgICAgdGhpcy5wcml2U3RyZWFtcyA9IHt9O1xuICAgICAgICB0aGlzLnR1cm5PbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgRmlsZVJlYWRlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTXNnID0gXCJCcm93c2VyIGRvZXMgbm90IHN1cHBvcnQgRmlsZVJlYWRlci5cIjtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEF1ZGlvU291cmNlRXJyb3JFdmVudChlcnJvck1zZywgXCJcIikpOyAvLyBpbml0aWFsaXphdGlvbiBlcnJvciAtIG5vIHN0cmVhbWlkIGF0IHRoaXMgcG9pbnRcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5wcml2RmlsZS5uYW1lLmxhc3RJbmRleE9mKFwiLndhdlwiKSAhPT0gdGhpcy5wcml2RmlsZS5uYW1lLmxlbmd0aCAtIDQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1zZyA9IHRoaXMucHJpdkZpbGUubmFtZSArIFwiIGlzIG5vdCBzdXBwb3J0ZWQuIE9ubHkgV0FWRSBmaWxlcyBhcmUgYWxsb3dlZCBhdCB0aGUgbW9tZW50LlwiO1xuICAgICAgICAgICAgICAgIHRoaXMub25FdmVudChuZXcgQXVkaW9Tb3VyY2VFcnJvckV2ZW50KGVycm9yTXNnLCBcIlwiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbUVycm9yKGVycm9yTXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucHJpdkZpbGUuc2l6ZSA+IEZpbGVBdWRpb1NvdXJjZS5NQVhfU0laRSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTXNnID0gdGhpcy5wcml2RmlsZS5uYW1lICsgXCIgZXhjZWVkcyB0aGUgbWF4aW11bSBhbGxvd2VkIGZpbGUgc2l6ZSAoXCIgKyBGaWxlQXVkaW9Tb3VyY2UuTUFYX1NJWkUgKyBcIikuXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1NvdXJjZUVycm9yRXZlbnQoZXJyb3JNc2csIFwiXCIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1NvdXJjZUluaXRpYWxpemluZ0V2ZW50KHRoaXMucHJpdklkKSk7IC8vIG5vIHN0cmVhbSBpZFxuICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1NvdXJjZVJlYWR5RXZlbnQodGhpcy5wcml2SWQpKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQodHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaWQgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYXR0YWNoID0gKGF1ZGlvTm9kZUlkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEF1ZGlvU3RyZWFtTm9kZUF0dGFjaGluZ0V2ZW50KHRoaXMucHJpdklkLCBhdWRpb05vZGVJZCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBsb2FkKGF1ZGlvTm9kZUlkKS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKHN0cmVhbVJlYWRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25FdmVudChuZXcgQXVkaW9TdHJlYW1Ob2RlQXR0YWNoZWRFdmVudCh0aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkZXRhY2g6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVJlYWRlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucHJpdlN0cmVhbXNbYXVkaW9Ob2RlSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50KHRoaXMucHJpdklkLCBhdWRpb05vZGVJZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50dXJuT2ZmKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlkOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXVkaW9Ob2RlSWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlYWQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW1SZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kZXRhY2ggPSAoYXVkaW9Ob2RlSWQpID0+IHtcbiAgICAgICAgICAgIGlmIChhdWRpb05vZGVJZCAmJiB0aGlzLnByaXZTdHJlYW1zW2F1ZGlvTm9kZUlkXSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlN0cmVhbXNbYXVkaW9Ob2RlSWRdLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucHJpdlN0cmVhbXNbYXVkaW9Ob2RlSWRdO1xuICAgICAgICAgICAgICAgIHRoaXMub25FdmVudChuZXcgQXVkaW9TdHJlYW1Ob2RlRGV0YWNoZWRFdmVudCh0aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50dXJuT2ZmID0gKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBzdHJlYW1JZCBpbiB0aGlzLnByaXZTdHJlYW1zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMucHJpdlN0cmVhbXNbc3RyZWFtSWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyZWFtICYmICFzdHJlYW0uaXNDbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1NvdXJjZU9mZkV2ZW50KHRoaXMucHJpdklkKSk7IC8vIG5vIHN0cmVhbSBub3dcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQodHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBsb2FkID0gKGF1ZGlvTm9kZUlkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50dXJuT24oKVxuICAgICAgICAgICAgICAgIC5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKF8pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJlYW0gPSBuZXcgU3RyZWFtKGF1ZGlvTm9kZUlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZTdHJlYW1zW2F1ZGlvTm9kZUlkXSA9IHN0cmVhbTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgIGxldCBzdGFydE9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IGVuZE9mZnNldCA9IEZpbGVBdWRpb1NvdXJjZS5DSFVOS19TSVpFO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NOZXh0Q2h1bmsgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmVhbS5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBvdXRwdXQgc3RyZWFtIHdhcyBjbG9zZWQgKHNvbWVib2R5IGNhbGxlZCBUdXJuT2ZmKS4gV2UncmUgZG9uZSBoZXJlLlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbS53cml0ZVN0cmVhbUNodW5rKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogcmVhZGVyLnJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVSZWNlaXZlZDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmRPZmZzZXQgPCB0aGlzLnByaXZGaWxlLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gZW5kT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kT2Zmc2V0ID0gTWF0aC5taW4oZW5kT2Zmc2V0ICsgRmlsZUF1ZGlvU291cmNlLkNIVU5LX1NJWkUsIHRoaXMucHJpdkZpbGUuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMucHJpdkZpbGUuc2xpY2Uoc3RhcnRPZmZzZXQsIGVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoY2h1bmspO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UndmUgd3JpdHRlbiB0aGUgZW50aXJlIGZpbGUgdG8gdGhlIG91dHB1dCBzdHJlYW0sIGNhbiBjbG9zZSBpdCBub3cuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IHByb2Nlc3NOZXh0Q2h1bms7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNc2cgPSBgRXJyb3Igb2NjdXJyZWQgd2hpbGUgcHJvY2Vzc2luZyAnJHt0aGlzLnByaXZGaWxlLm5hbWV9Jy4gJHtldmVudH1gO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEF1ZGlvU3RyZWFtTm9kZUVycm9yRXZlbnQodGhpcy5wcml2SWQsIGF1ZGlvTm9kZUlkLCBlcnJvck1zZykpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLnByaXZGaWxlLnNsaWNlKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihjaHVuayk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJpdkV2ZW50cy5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIEV2ZW50cy5pbnN0YW5jZS5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcml2SWQgPSBhdWRpb1NvdXJjZUlkID8gYXVkaW9Tb3VyY2VJZCA6IGNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgdGhpcy5wcml2RXZlbnRzID0gbmV3IEV2ZW50U291cmNlKCk7XG4gICAgICAgIHRoaXMucHJpdkZpbGUgPSBmaWxlO1xuICAgIH1cbiAgICBnZXQgZm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gRmlsZUF1ZGlvU291cmNlLkZJTEVGT1JNQVQ7XG4gICAgfVxuICAgIGdldCBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZFdmVudHM7XG4gICAgfVxuICAgIGdldCBkZXZpY2VJbmZvKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHtcbiAgICAgICAgICAgIGJpdHNwZXJzYW1wbGU6IEZpbGVBdWRpb1NvdXJjZS5GSUxFRk9STUFULmJpdHNQZXJTYW1wbGUsXG4gICAgICAgICAgICBjaGFubmVsY291bnQ6IEZpbGVBdWRpb1NvdXJjZS5GSUxFRk9STUFULmNoYW5uZWxzLFxuICAgICAgICAgICAgY29ubmVjdGl2aXR5OiBjb25uZWN0aXZpdHkuVW5rbm93bixcbiAgICAgICAgICAgIG1hbnVmYWN0dXJlcjogXCJTcGVlY2ggU0RLXCIsXG4gICAgICAgICAgICBtb2RlbDogXCJGaWxlXCIsXG4gICAgICAgICAgICBzYW1wbGVyYXRlOiBGaWxlQXVkaW9Tb3VyY2UuRklMRUZPUk1BVC5zYW1wbGVzUGVyU2VjLFxuICAgICAgICAgICAgdHlwZTogdHlwZS5GaWxlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyBSZWNvbW1lbmRlZCBzYW1wbGUgcmF0ZSAoYnl0ZXMvc2Vjb25kKS5cbkZpbGVBdWRpb1NvdXJjZS5TQU1QTEVfUkFURSA9IDE2MDAwICogMjsgLy8gMTYga0h6ICogMTYgYml0c1xuLy8gV2Ugc2hvdWxkIHN0cmVhbSBhdWRpbyBhdCBubyBmYXN0ZXIgdGhhbiAyeCByZWFsLXRpbWUgKGkuZS4sIHNlbmQgZml2ZSBjaHVua3Ncbi8vIHBlciBzZWNvbmQsIHdpdGggdGhlIGNodW5rIHNpemUgPT0gc2FtcGxlIHJhdGUgaW4gYnl0ZXMgcGVyIHNlY29uZCAqIDIgLyA1KS5cbkZpbGVBdWRpb1NvdXJjZS5DSFVOS19TSVpFID0gRmlsZUF1ZGlvU291cmNlLlNBTVBMRV9SQVRFICogMiAvIDU7XG4vLyAxMCBzZWNvbmRzIG9mIGF1ZGlvIGluIGJ5dGVzID1cbi8vIHNhbXBsZSByYXRlIChieXRlcy9zZWNvbmQpICogNjAwIChzZWNvbmRzKSArIDQ0IChzaXplIG9mIHRoZSB3YXZlIGhlYWRlcikuXG5GaWxlQXVkaW9Tb3VyY2UuTUFYX1NJWkUgPSBGaWxlQXVkaW9Tb3VyY2UuU0FNUExFX1JBVEUgKiA2MDAgKyA0NDtcbkZpbGVBdWRpb1NvdXJjZS5GSUxFRk9STUFUID0gQXVkaW9TdHJlYW1Gb3JtYXQuZ2V0V2F2ZUZvcm1hdFBDTSgxNjAwMCwgMTYsIDEpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWxlQXVkaW9Tb3VyY2UuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEF1ZGlvU3RyZWFtRm9ybWF0LCB9IGZyb20gXCIuLi8uLi9zcmMvc2RrL0F1ZGlvL0F1ZGlvU3RyZWFtRm9ybWF0XCI7XG5pbXBvcnQgeyBjb25uZWN0aXZpdHksIHR5cGUgfSBmcm9tIFwiLi4vY29tbW9uLnNwZWVjaC9FeHBvcnRzXCI7XG5pbXBvcnQgeyBBdWRpb1NvdXJjZUVycm9yRXZlbnQsIEF1ZGlvU291cmNlSW5pdGlhbGl6aW5nRXZlbnQsIEF1ZGlvU291cmNlT2ZmRXZlbnQsIEF1ZGlvU291cmNlUmVhZHlFdmVudCwgQXVkaW9TdHJlYW1Ob2RlQXR0YWNoZWRFdmVudCwgQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnQsIEF1ZGlvU3RyZWFtTm9kZURldGFjaGVkRXZlbnQsIEF1ZGlvU3RyZWFtTm9kZUVycm9yRXZlbnQsIENodW5rZWRBcnJheUJ1ZmZlclN0cmVhbSwgY3JlYXRlTm9EYXNoR3VpZCwgRGVmZXJyZWQsIEV2ZW50cywgRXZlbnRTb3VyY2UsIFByb21pc2VIZWxwZXIsIH0gZnJvbSBcIi4uL2NvbW1vbi9FeHBvcnRzXCI7XG5leHBvcnQgY29uc3QgQXVkaW9Xb3JrbGV0U291cmNlVVJMUHJvcGVydHlOYW1lID0gXCJNSUNST1BIT05FLVdvcmtsZXRTb3VyY2VVcmxcIjtcbmV4cG9ydCBjbGFzcyBNaWNBdWRpb1NvdXJjZSB7XG4gICAgY29uc3RydWN0b3IocHJpdlJlY29yZGVyLCBvdXRwdXRDaHVua1NpemUsIGF1ZGlvU291cmNlSWQsIGRldmljZUlkKSB7XG4gICAgICAgIHRoaXMucHJpdlJlY29yZGVyID0gcHJpdlJlY29yZGVyO1xuICAgICAgICB0aGlzLmRldmljZUlkID0gZGV2aWNlSWQ7XG4gICAgICAgIHRoaXMucHJpdlN0cmVhbXMgPSB7fTtcbiAgICAgICAgdGhpcy50dXJuT24gPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2SW5pdGlhbGl6ZURlZmVycmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkluaXRpYWxpemVEZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnByaXZJbml0aWFsaXplRGVmZXJyYWwgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQXVkaW9Db250ZXh0KCk7XG4gICAgICAgICAgICBjb25zdCBuYXYgPSB3aW5kb3cubmF2aWdhdG9yO1xuICAgICAgICAgICAgbGV0IGdldFVzZXJNZWRpYSA9IChuYXYuZ2V0VXNlck1lZGlhIHx8XG4gICAgICAgICAgICAgICAgbmF2LndlYmtpdEdldFVzZXJNZWRpYSB8fFxuICAgICAgICAgICAgICAgIG5hdi5tb3pHZXRVc2VyTWVkaWEgfHxcbiAgICAgICAgICAgICAgICBuYXYubXNHZXRVc2VyTWVkaWEpO1xuICAgICAgICAgICAgaWYgKCEhbmF2Lm1lZGlhRGV2aWNlcykge1xuICAgICAgICAgICAgICAgIGdldFVzZXJNZWRpYSA9IChjb25zdHJhaW50cywgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG5hdi5tZWRpYURldmljZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihzdWNjZXNzQ2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3JDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZ2V0VXNlck1lZGlhKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNc2cgPSBcIkJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBnZXRVc2VyTWVkaWEuXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2SW5pdGlhbGl6ZURlZmVycmFsLnJlamVjdChlcnJvck1zZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1NvdXJjZUVycm9yRXZlbnQoZXJyb3JNc2csIFwiXCIpKTsgLy8gbWljIGluaXRpYWxpemVkIGVycm9yIC0gbm8gc3RyZWFtaWQgYXQgdGhpcyBwb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1NvdXJjZUluaXRpYWxpemluZ0V2ZW50KHRoaXMucHJpdklkKSk7IC8vIG5vIHN0cmVhbSBpZFxuICAgICAgICAgICAgICAgICAgICBnZXRVc2VyTWVkaWEoeyBhdWRpbzogdGhpcy5kZXZpY2VJZCA/IHsgZGV2aWNlSWQ6IHRoaXMuZGV2aWNlSWQgfSA6IHRydWUsIHZpZGVvOiBmYWxzZSB9LCAobWVkaWFTdHJlYW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdk1lZGlhU3RyZWFtID0gbWVkaWFTdHJlYW07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEF1ZGlvU291cmNlUmVhZHlFdmVudCh0aGlzLnByaXZJZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2SW5pdGlhbGl6ZURlZmVycmFsLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNc2cgPSBgRXJyb3Igb2NjdXJyZWQgZHVyaW5nIG1pY3JvcGhvbmUgaW5pdGlhbGl6YXRpb246ICR7ZXJyb3J9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IHRoaXMucHJpdkluaXRpYWxpemVEZWZlcnJhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhBQ0s6IHRoaXMgc2hvdWxkIGJlIGhhbmRsZWQgdGhyb3VnaCBvbkVycm9yIGNhbGxiYWNrcyBvZiBhbGwgcHJvbWlzZXMgdXAgdGhlIHN0YWNrLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgdGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbiBlYXN5IHdheSB0byByZWplY3QgcHJvbWlzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpdGhvdXQgYSBsb3Qgb2YgY29kZSByZXBsaWNhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGZpeCBwcm9taXNlIGltcGxlbWVudGF0aW9uLCBhbGxvdyBmb3IgYSBncmFjZWZ1bCByZWplY3QgY2hhaW5pbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZJbml0aWFsaXplRGVmZXJyYWwgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG1wLnJlamVjdChlcnJvck1zZyk7IC8vIHRoaXMgd2lsbCBidWJibGUgdXAgdGhyb3VnaCB0aGUgd2hvbGUgY2hhaW4gb2YgcHJvbWlzZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIGVhY2ggbmV3IGxldmVsIGFkZGluZyBleHRyYSBcIlVuaGFuZGxlZCBjYWxsYmFjayBlcnJvclwiIHByZWZpeCB0byB0aGUgZXJyb3IgbWVzc2FnZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbGluZSBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSBleGVjdXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25FdmVudChuZXcgQXVkaW9Tb3VyY2VFcnJvckV2ZW50KHRoaXMucHJpdklkLCBlcnJvck1zZykpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByaXZDb250ZXh0LnN0YXRlID09PSBcInN1c3BlbmRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IE9uIGlPUywgdGhlIFdlYiBBdWRpbyBBUEkgcmVxdWlyZXMgc291bmRzIHRvIGJlIHRyaWdnZXJlZCBmcm9tIGFuIGV4cGxpY2l0IHVzZXIgYWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vV2ViQXVkaW8vd2ViLWF1ZGlvLWFwaS9pc3N1ZXMvNzkwXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkNvbnRleHQucmVzdW1lKCkudGhlbihuZXh0LCAocmVhc29uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZJbml0aWFsaXplRGVmZXJyYWwucmVqZWN0KGBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBhdWRpbyBjb250ZXh0OiAke3JlYXNvbn1gKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkluaXRpYWxpemVEZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaWQgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYXR0YWNoID0gKGF1ZGlvTm9kZUlkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEF1ZGlvU3RyZWFtTm9kZUF0dGFjaGluZ0V2ZW50KHRoaXMucHJpdklkLCBhdWRpb05vZGVJZCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuKGF1ZGlvTm9kZUlkKS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKHN0cmVhbVJlYWRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25FdmVudChuZXcgQXVkaW9TdHJlYW1Ob2RlQXR0YWNoZWRFdmVudCh0aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkZXRhY2g6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVJlYWRlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50dXJuT2ZmKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5wcml2U3RyZWFtc1thdWRpb05vZGVJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEF1ZGlvU3RyZWFtTm9kZURldGFjaGVkRXZlbnQodGhpcy5wcml2SWQsIGF1ZGlvTm9kZUlkKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlkOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXVkaW9Ob2RlSWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlYWQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW1SZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kZXRhY2ggPSAoYXVkaW9Ob2RlSWQpID0+IHtcbiAgICAgICAgICAgIGlmIChhdWRpb05vZGVJZCAmJiB0aGlzLnByaXZTdHJlYW1zW2F1ZGlvTm9kZUlkXSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlN0cmVhbXNbYXVkaW9Ob2RlSWRdLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucHJpdlN0cmVhbXNbYXVkaW9Ob2RlSWRdO1xuICAgICAgICAgICAgICAgIHRoaXMub25FdmVudChuZXcgQXVkaW9TdHJlYW1Ob2RlRGV0YWNoZWRFdmVudCh0aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50dXJuT2ZmID0gKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBzdHJlYW1JZCBpbiB0aGlzLnByaXZTdHJlYW1zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMucHJpdlN0cmVhbXNbc3RyZWFtSWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub25FdmVudChuZXcgQXVkaW9Tb3VyY2VPZmZFdmVudCh0aGlzLnByaXZJZCkpOyAvLyBubyBzdHJlYW0gbm93XG4gICAgICAgICAgICB0aGlzLnByaXZJbml0aWFsaXplRGVmZXJyYWwgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5kZXN0cm95QXVkaW9Db250ZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxpc3RlbiA9IChhdWRpb05vZGVJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHVybk9uKClcbiAgICAgICAgICAgICAgICAub25TdWNjZXNzQ29udGludWVXaXRoKChfKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gbmV3IENodW5rZWRBcnJheUJ1ZmZlclN0cmVhbSh0aGlzLnByaXZPdXRwdXRDaHVua1NpemUsIGF1ZGlvTm9kZUlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZTdHJlYW1zW2F1ZGlvTm9kZUlkXSA9IHN0cmVhbTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWNvcmRlci5yZWNvcmQodGhpcy5wcml2Q29udGV4dCwgdGhpcy5wcml2TWVkaWFTdHJlYW0sIHN0cmVhbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEF1ZGlvU3RyZWFtTm9kZUVycm9yRXZlbnQodGhpcy5wcml2SWQsIGF1ZGlvTm9kZUlkLCBlcnJvcikpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJpdkV2ZW50cy5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIEV2ZW50cy5pbnN0YW5jZS5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jcmVhdGVBdWRpb0NvbnRleHQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoISF0aGlzLnByaXZDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0F1ZGlvQ29udGV4dFxuICAgICAgICAgICAgY29uc3QgQXVkaW9Db250ZXh0ID0gKHdpbmRvdy5BdWRpb0NvbnRleHQpXG4gICAgICAgICAgICAgICAgfHwgKHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQpXG4gICAgICAgICAgICAgICAgfHwgZmFsc2U7XG4gICAgICAgICAgICBpZiAoIUF1ZGlvQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBXZWIgQXVkaW8gQVBJIChBdWRpb0NvbnRleHQgaXMgbm90IGF2YWlsYWJsZSkuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wcml2Q29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kZXN0cm95QXVkaW9Db250ZXh0ID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByaXZDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wcml2UmVjb3JkZXIucmVsZWFzZU1lZGlhUmVzb3VyY2VzKHRoaXMucHJpdkNvbnRleHQpO1xuICAgICAgICAgICAgLy8gVGhpcyBwYXR0ZXJuIGJyb3VnaHQgdG8geW91IGJ5IGEgYnVnIGluIHRoZSBUeXBlU2NyaXB0IGNvbXBpbGVyIHdoZXJlIGl0XG4gICAgICAgICAgICAvLyBjb25mdXNlcyB0aGUgKFwiY2xvc2VcIiBpbiB0aGlzLnByaXZDb250ZXh0KSB3aXRoIHRoaXMucHJpdkNvbnRleHQgYWx3YXlzIGJlaW5nIG51bGwgYXMgdGhlIGFsdGVybmF0ZS5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTE0OThcbiAgICAgICAgICAgIGxldCBoYXNDbG9zZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKFwiY2xvc2VcIiBpbiB0aGlzLnByaXZDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgaGFzQ2xvc2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0Nsb3NlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2Q29udGV4dC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobnVsbCAhPT0gdGhpcy5wcml2Q29udGV4dCAmJiB0aGlzLnByaXZDb250ZXh0LnN0YXRlID09PSBcInJ1bm5pbmdcIikge1xuICAgICAgICAgICAgICAgIC8vIFN1c3BlbmQgYWN0dWFsbHkgdGFrZXMgYSBjYWxsYmFjaywgYnV0IGFuYWxvZ291cyB0byB0aGVcbiAgICAgICAgICAgICAgICAvLyByZXN1bWUgbWV0aG9kLCBpdCdsbCBiZSBvbmx5IGZpcmVkIGlmIHN1c3BlbmQgaXMgY2FsbGVkXG4gICAgICAgICAgICAgICAgLy8gaW4gYSBkaXJlY3QgcmVzcG9uc2UgdG8gYSB1c2VyIGFjdGlvbi4gVGhlIGxhdGVyIGlzIG5vdCBhbHdheXNcbiAgICAgICAgICAgICAgICAvLyB0aGUgY2FzZSwgYXMgVHVybk9mZiBpcyBhbHNvIGNhbGxlZCwgd2hlbiB3ZSByZWNlaXZlIGFuXG4gICAgICAgICAgICAgICAgLy8gZW5kLW9mLXNwZWVjaCBtZXNzYWdlIGZyb20gdGhlIHNlcnZpY2UuIFNvLCBkb2luZyBhIGJlc3QgZWZmb3J0XG4gICAgICAgICAgICAgICAgLy8gZmlyZS1hbmQtZm9yZ2V0IGhlcmUuXG4gICAgICAgICAgICAgICAgdGhpcy5wcml2Q29udGV4dC5zdXNwZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdk91dHB1dENodW5rU2l6ZSA9IG91dHB1dENodW5rU2l6ZTtcbiAgICAgICAgdGhpcy5wcml2SWQgPSBhdWRpb1NvdXJjZUlkID8gYXVkaW9Tb3VyY2VJZCA6IGNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgdGhpcy5wcml2RXZlbnRzID0gbmV3IEV2ZW50U291cmNlKCk7XG4gICAgfVxuICAgIGdldCBmb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiBNaWNBdWRpb1NvdXJjZS5BVURJT0ZPUk1BVDtcbiAgICB9XG4gICAgZ2V0IGV2ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkV2ZW50cztcbiAgICB9XG4gICAgZ2V0IGRldmljZUluZm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1pY3JvcGhvbmVMYWJlbCgpLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aCgobGFiZWwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYml0c3BlcnNhbXBsZTogTWljQXVkaW9Tb3VyY2UuQVVESU9GT1JNQVQuYml0c1BlclNhbXBsZSxcbiAgICAgICAgICAgICAgICBjaGFubmVsY291bnQ6IE1pY0F1ZGlvU291cmNlLkFVRElPRk9STUFULmNoYW5uZWxzLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpdml0eTogY29ubmVjdGl2aXR5LlVua25vd24sXG4gICAgICAgICAgICAgICAgbWFudWZhY3R1cmVyOiBcIlNwZWVjaCBTREtcIixcbiAgICAgICAgICAgICAgICBtb2RlbDogbGFiZWwsXG4gICAgICAgICAgICAgICAgc2FtcGxlcmF0ZTogTWljQXVkaW9Tb3VyY2UuQVVESU9GT1JNQVQuc2FtcGxlc1BlclNlYyxcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLk1pY3JvcGhvbmVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldFByb3BlcnR5KG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChuYW1lID09PSBBdWRpb1dvcmtsZXRTb3VyY2VVUkxQcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdlJlY29yZGVyLnNldFdvcmtsZXRVcmwodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvcGVydHkgJ1wiICsgbmFtZSArIFwiJyBpcyBub3Qgc3VwcG9ydGVkIG9uIE1pY3JvcGhvbmUuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldE1pY3JvcGhvbmVMYWJlbCgpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdE1pY3JvcGhvbmVOYW1lID0gXCJtaWNyb3Bob25lXCI7XG4gICAgICAgIC8vIElmIHdlIGRpZCB0aGlzIGFscmVhZHksIHJldHVybiB0aGUgdmFsdWUuXG4gICAgICAgIGlmICh0aGlzLnByaXZNaWNyb3Bob25lTGFiZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh0aGlzLnByaXZNaWNyb3Bob25lTGFiZWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBzdHJlYW0gaXNuJ3QgY3VycmVudGx5IHJ1bm5pbmcsIHdlIGNhbid0IHF1ZXJ5IGRldmljZXMgYmVjYXVzZSBzZWN1cml0eS5cbiAgICAgICAgaWYgKHRoaXMucHJpdk1lZGlhU3RyZWFtID09PSB1bmRlZmluZWQgfHwgIXRoaXMucHJpdk1lZGlhU3RyZWFtLmFjdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdChkZWZhdWx0TWljcm9waG9uZU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldHVwIGEgZGVmYXVsdFxuICAgICAgICB0aGlzLnByaXZNaWNyb3Bob25lTGFiZWwgPSBkZWZhdWx0TWljcm9waG9uZU5hbWU7XG4gICAgICAgIC8vIEdldCB0aGUgaWQgb2YgdGhlIGRldmljZSBydW5uaW5nIHRoZSBhdWRpbyB0cmFjay5cbiAgICAgICAgY29uc3QgbWljcm9waG9uZURldmljZUlkID0gdGhpcy5wcml2TWVkaWFTdHJlYW0uZ2V0VHJhY2tzKClbMF0uZ2V0U2V0dGluZ3MoKS5kZXZpY2VJZDtcbiAgICAgICAgLy8gSWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGdldHRpbmcgdGhlIGRldmljZSBJRCwgc2V0IGEgZGVmYXVsdCBhbmQgcmV0dXJuLlxuICAgICAgICBpZiAodW5kZWZpbmVkID09PSBtaWNyb3Bob25lRGV2aWNlSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQodGhpcy5wcml2TWljcm9waG9uZUxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICAvLyBFbnVtZXJhdGUgdGhlIG1lZGlhIGRldmljZXMuXG4gICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpLnRoZW4oKGRldmljZXMpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGV2aWNlIG9mIGRldmljZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV2aWNlLmRldmljZUlkID09PSBtaWNyb3Bob25lRGV2aWNlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm91bmQgdGhlIGRldmljZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZNaWNyb3Bob25lTGFiZWwgPSBkZXZpY2UubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodGhpcy5wcml2TWljcm9waG9uZUxhYmVsKTtcbiAgICAgICAgfSwgKCkgPT4gZGVmZXJyZWQucmVzb2x2ZSh0aGlzLnByaXZNaWNyb3Bob25lTGFiZWwpKTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICB9XG59XG5NaWNBdWRpb1NvdXJjZS5BVURJT0ZPUk1BVCA9IEF1ZGlvU3RyZWFtRm9ybWF0LmdldERlZmF1bHRJbnB1dEZvcm1hdCgpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1NaWNBdWRpb1NvdXJjZS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUmlmZlBjbUVuY29kZXIgfSBmcm9tIFwiLi4vY29tbW9uL0V4cG9ydHNcIjtcbmV4cG9ydCBjbGFzcyBQY21SZWNvcmRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucmVjb3JkID0gKGNvbnRleHQsIG1lZGlhU3RyZWFtLCBvdXRwdXRTdHJlYW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRlc2lyZWRTYW1wbGVSYXRlID0gMTYwMDA7XG4gICAgICAgICAgICBjb25zdCBzY3JpcHROb2RlID0gKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYnVmZmVyU2l6ZSA9IDA7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY3JlYXRlU2NyaXB0UHJvY2Vzc29yKGJ1ZmZlclNpemUsIDEsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2Via2l0ICg8PSB2ZXJzaW9uIDMxKSByZXF1aXJlcyBhIHZhbGlkIGJ1ZmZlclNpemUuXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlclNpemUgPSAyMDQ4O1xuICAgICAgICAgICAgICAgICAgICBsZXQgYXVkaW9TYW1wbGVSYXRlID0gY29udGV4dC5zYW1wbGVSYXRlO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnVmZmVyU2l6ZSA8IDE2Mzg0ICYmIGF1ZGlvU2FtcGxlUmF0ZSA+PSAoMiAqIGRlc2lyZWRTYW1wbGVSYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyU2l6ZSA8PD0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvU2FtcGxlUmF0ZSA+Pj0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5jcmVhdGVTY3JpcHRQcm9jZXNzb3IoYnVmZmVyU2l6ZSwgMSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIGNvbnN0IHdhdmVTdHJlYW1FbmNvZGVyID0gbmV3IFJpZmZQY21FbmNvZGVyKGNvbnRleHQuc2FtcGxlUmF0ZSwgZGVzaXJlZFNhbXBsZVJhdGUpO1xuICAgICAgICAgICAgbGV0IG5lZWRIZWFkZXIgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBzY3JpcHROb2RlLm9uYXVkaW9wcm9jZXNzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXRGcmFtZSA9IGV2ZW50LmlucHV0QnVmZmVyLmdldENoYW5uZWxEYXRhKDApO1xuICAgICAgICAgICAgICAgIGlmIChvdXRwdXRTdHJlYW0gJiYgIW91dHB1dFN0cmVhbS5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YXZlRnJhbWUgPSB3YXZlU3RyZWFtRW5jb2Rlci5lbmNvZGUobmVlZEhlYWRlciwgaW5wdXRGcmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIXdhdmVGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0U3RyZWFtLndyaXRlU3RyZWFtQ2h1bmsoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogd2F2ZUZyYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lUmVjZWl2ZWQ6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRIZWFkZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBtaWNJbnB1dCA9IGNvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UobWVkaWFTdHJlYW0pO1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly93ZWJhdWRpby5naXRodWIuaW8vd2ViLWF1ZGlvLWFwaS8jYXVkaW93b3JrbGV0XG4gICAgICAgICAgICAvLyBVc2luZyBBdWRpb1dvcmtsZXQgdG8gaW1wcm92ZSBhdWRpbyBxdWFsaXR5IGFuZCBhdm9pZCBhdWRpbyBnbGl0Y2hlcyBkdWUgdG8gYmxvY2tpbmcgdGhlIFVJIHRocmVhZFxuICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2U3BlZWNoUHJvY2Vzc29yU2NyaXB0ICYmICEhY29udGV4dC5hdWRpb1dvcmtsZXQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmF1ZGlvV29ya2xldFxuICAgICAgICAgICAgICAgICAgICAuYWRkTW9kdWxlKHRoaXMucHJpdlNwZWVjaFByb2Nlc3NvclNjcmlwdClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JrbGV0Tm9kZSA9IG5ldyBBdWRpb1dvcmtsZXROb2RlKGNvbnRleHQsIFwic3BlZWNoLXByb2Nlc3NvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgd29ya2xldE5vZGUucG9ydC5vbm1lc3NhZ2UgPSAoZXYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0RnJhbWUgPSBldi5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG91dHB1dFN0cmVhbSAmJiAhb3V0cHV0U3RyZWFtLmlzQ2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2F2ZUZyYW1lID0gd2F2ZVN0cmVhbUVuY29kZXIuZW5jb2RlKG5lZWRIZWFkZXIsIGlucHV0RnJhbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIXdhdmVGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRTdHJlYW0ud3JpdGVTdHJlYW1DaHVuayh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHdhdmVGcmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVSZWNlaXZlZDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRIZWFkZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIG1pY0lucHV0LmNvbm5lY3Qod29ya2xldE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB3b3JrbGV0Tm9kZS5jb25uZWN0KGNvbnRleHQuZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZNZWRpYVJlc291cmNlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdFByb2Nlc3Nvck5vZGU6IHdvcmtsZXROb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBtaWNJbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbTogbWVkaWFTdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbWljSW5wdXQuY29ubmVjdChzY3JpcHROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0Tm9kZS5jb25uZWN0KGNvbnRleHQuZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZNZWRpYVJlc291cmNlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdFByb2Nlc3Nvck5vZGU6IHNjcmlwdE5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG1pY0lucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBtZWRpYVN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pY0lucHV0LmNvbm5lY3Qoc2NyaXB0Tm9kZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Tm9kZS5jb25uZWN0KGNvbnRleHQuZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdk1lZGlhUmVzb3VyY2VzID0ge1xuICAgICAgICAgICAgICAgICAgICBzY3JpcHRQcm9jZXNzb3JOb2RlOiBzY3JpcHROb2RlLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG1pY0lucHV0LFxuICAgICAgICAgICAgICAgICAgICBzdHJlYW06IG1lZGlhU3RyZWFtLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVsZWFzZU1lZGlhUmVzb3VyY2VzID0gKGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZNZWRpYVJlc291cmNlcykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByaXZNZWRpYVJlc291cmNlcy5zY3JpcHRQcm9jZXNzb3JOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdk1lZGlhUmVzb3VyY2VzLnNjcmlwdFByb2Nlc3Nvck5vZGUuZGlzY29ubmVjdChjb250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2TWVkaWFSZXNvdXJjZXMuc2NyaXB0UHJvY2Vzc29yTm9kZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByaXZNZWRpYVJlc291cmNlcy5zb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2TWVkaWFSZXNvdXJjZXMuc291cmNlLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2TWVkaWFSZXNvdXJjZXMuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB0cmFjay5zdG9wKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZNZWRpYVJlc291cmNlcy5zb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0V29ya2xldFVybCh1cmwpIHtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoUHJvY2Vzc29yU2NyaXB0ID0gdXJsO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UENNUmVjb3JkZXIuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFByb3BlcnR5SWQgfSBmcm9tIFwiLi4vc2RrL0V4cG9ydHNcIjtcbmV4cG9ydCBjbGFzcyBQcm94eUluZm8ge1xuICAgIGNvbnN0cnVjdG9yKHByb3h5SG9zdE5hbWUsIHByb3h5UG9ydCwgcHJveHlVc2VyTmFtZSwgcHJveHlQYXNzd29yZCkge1xuICAgICAgICB0aGlzLnByaXZQcm94eUhvc3ROYW1lID0gcHJveHlIb3N0TmFtZTtcbiAgICAgICAgdGhpcy5wcml2UHJveHlQb3J0ID0gcHJveHlQb3J0O1xuICAgICAgICB0aGlzLnByaXZQcm94eVVzZXJOYW1lID0gcHJveHlVc2VyTmFtZTtcbiAgICAgICAgdGhpcy5wcml2UHJveHlQYXNzd29yZCA9IHByb3h5UGFzc3dvcmQ7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tUmVjb2duaXplckNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eUluZm8oY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eUhvc3ROYW1lKSwgcGFyc2VJbnQoY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBvcnQpLCAxMCksIGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlVc2VyTmFtZSksIGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlQYXNzd29yZCkpO1xuICAgIH1cbiAgICBnZXQgSG9zdE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZQcm94eUhvc3ROYW1lO1xuICAgIH1cbiAgICBnZXQgUG9ydCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb3h5UG9ydDtcbiAgICB9XG4gICAgZ2V0IFVzZXJOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJveHlVc2VyTmFtZTtcbiAgICB9XG4gICAgZ2V0IFBhc3N3b3JkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJveHlQYXNzd29yZDtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb3h5SW5mby5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUHJvbWlzZUhlbHBlciwgfSBmcm9tIFwiLi4vY29tbW9uL0V4cG9ydHNcIjtcbmV4cG9ydCBjbGFzcyBSZXBsYXlhYmxlQXVkaW9Ob2RlIHtcbiAgICBjb25zdHJ1Y3RvcihhdWRpb1NvdXJjZSwgZm9ybWF0KSB7XG4gICAgICAgIHRoaXMucHJpdkJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5wcml2UmVwbGF5T2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5wcml2TGFzdFNocmlua09mZnNldCA9IDA7XG4gICAgICAgIHRoaXMucHJpdkJ1ZmZlclN0YXJ0T2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5wcml2QnVmZmVyU2VyaWFsID0gMDtcbiAgICAgICAgdGhpcy5wcml2QnVmZmVyZWRCeXRlcyA9IDA7XG4gICAgICAgIHRoaXMucHJpdlJlcGxheSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZMYXN0Q2h1bmtBY3F1aXJlZFRpbWUgPSAwO1xuICAgICAgICB0aGlzLmlkID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkF1ZGlvTm9kZS5pZCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByaXZBdWRpb05vZGUgPSBhdWRpb1NvdXJjZTtcbiAgICAgICAgdGhpcy5wcml2Rm9ybWF0ID0gZm9ybWF0O1xuICAgIH1cbiAgICAvLyBSZWFkcyBhbmQgcmV0dXJucyB0aGUgbmV4dCBjaHVuayBvZiBhdWRpbyBidWZmZXIuXG4gICAgLy8gSWYgcmVwbGF5IG9mIGV4aXN0aW5nIGJ1ZmZlcnMgYXJlIG5lZWRlZCwgcmVhZCgpIHdpbGwgZmlyc3Qgc2VlayBhbmQgcmVwbGF5XG4gICAgLy8gZXhpc3RpbmcgY29udGVudCwgYW5kIHVwb2luIGNvbXBsZXRpb24gaXQgd2lsbCByZWFkIG5ldyBjb250ZW50IGZyb20gdGhlIHVuZGVybHlpbmdcbiAgICAvLyBhdWRpbyBub2RlLCBzYXZpbmcgdGhhdCBjb250ZW50IGludG8gdGhlIHJlcGxheWFibGUgYnVmZmVycy5cbiAgICByZWFkKCkge1xuICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIHJlcGxheSByZXF1ZXN0IHRvIGhvbm9yLlxuICAgICAgICBpZiAoISF0aGlzLnByaXZSZXBsYXkgJiYgdGhpcy5wcml2QnVmZmVycy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIHN0YXJ0IHBvaW50IGluIHRoZSBidWZmZXJzLlxuICAgICAgICAgICAgLy8gT2Zmc2V0cyBhcmUgaW4gMTAwbnMgaW5jcmVtZW50cy5cbiAgICAgICAgICAgIC8vIFNvIGhvdyBtYW55IGJ5dGVzIGRvIHdlIG5lZWQgdG8gc2VlayB0byBnZXQgdGhlIHJpZ2h0IG9mZnNldD9cbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFRvU2VlayA9IHRoaXMucHJpdlJlcGxheU9mZnNldCAtIHRoaXMucHJpdkJ1ZmZlclN0YXJ0T2Zmc2V0O1xuICAgICAgICAgICAgbGV0IGJ5dGVzVG9TZWVrID0gTWF0aC5yb3VuZChvZmZzZXRUb1NlZWsgKiB0aGlzLnByaXZGb3JtYXQuYXZnQnl0ZXNQZXJTZWMgKiAxZS03KTtcbiAgICAgICAgICAgIGlmICgwICE9PSAoYnl0ZXNUb1NlZWsgJSAyKSkge1xuICAgICAgICAgICAgICAgIGJ5dGVzVG9TZWVrKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IHRoaXMucHJpdkJ1ZmZlcnMubGVuZ3RoICYmIGJ5dGVzVG9TZWVrID49IHRoaXMucHJpdkJ1ZmZlcnNbaV0uY2h1bmsuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBieXRlc1RvU2VlayAtPSB0aGlzLnByaXZCdWZmZXJzW2krK10uY2h1bmsuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXRWYWwgPSB0aGlzLnByaXZCdWZmZXJzW2ldLmNodW5rLmJ1ZmZlci5zbGljZShieXRlc1RvU2Vlayk7XG4gICAgICAgICAgICB0aGlzLnByaXZSZXBsYXlPZmZzZXQgKz0gKHJldFZhbC5ieXRlTGVuZ3RoIC8gdGhpcy5wcml2Rm9ybWF0LmF2Z0J5dGVzUGVyU2VjKSAqIDFlKzc7XG4gICAgICAgICAgICAvLyBJZiB3ZSd2ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlcnMsIHN0b3AgcmVwbGF5aW5nLlxuICAgICAgICAgICAgaWYgKGkgPT09IHRoaXMucHJpdkJ1ZmZlcnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcGxheSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh7XG4gICAgICAgICAgICAgICAgYnVmZmVyOiByZXRWYWwsXG4gICAgICAgICAgICAgICAgaXNFbmQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRpbWVSZWNlaXZlZDogdGhpcy5wcml2QnVmZmVyc1tpXS5jaHVuay50aW1lUmVjZWl2ZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Ob2RlLnJlYWQoKVxuICAgICAgICAgICAgLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aCgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5idWZmZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZCdWZmZXJzLnB1c2gobmV3IEJ1ZmZlckVudHJ5KHJlc3VsdCwgdGhpcy5wcml2QnVmZmVyU2VyaWFsKyssIHRoaXMucHJpdkJ1ZmZlcmVkQnl0ZXMpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZCdWZmZXJlZEJ5dGVzICs9IHJlc3VsdC5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZXRhY2goKSB7XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvTm9kZS5kZXRhY2goKTtcbiAgICAgICAgdGhpcy5wcml2QnVmZmVycyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmVwbGF5KCkge1xuICAgICAgICBpZiAodGhpcy5wcml2QnVmZmVycyAmJiAwICE9PSB0aGlzLnByaXZCdWZmZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5wcml2UmVwbGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucHJpdlJlcGxheU9mZnNldCA9IHRoaXMucHJpdkxhc3RTaHJpbmtPZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2hyaW5rcyB0aGUgZXhpc3RpbmcgYXVkaW8gYnVmZmVycyB0byBzdGFydCBhdCB0aGUgbmV3IG9mZnNldCwgb3IgYXQgdGhlXG4gICAgLy8gYmVnaW5uaW5nIG9mIHRoZSBidWZmZXIgY2xvc2VzdCB0byB0aGUgcmVxdWVzdGVkIG9mZnNldC5cbiAgICAvLyBBIHJlcGxheSByZXF1ZXN0IHdpbGwgc3RhcnQgZnJvbSB0aGUgbGFzdCBzaHJpbmsgcG9pbnQuXG4gICAgc2hyaW5rQnVmZmVycyhvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5wcml2TGFzdFNocmlua09mZnNldCA9IG9mZnNldDtcbiAgICAgICAgLy8gRmluZCB0aGUgc3RhcnQgcG9pbnQgaW4gdGhlIGJ1ZmZlcnMuXG4gICAgICAgIC8vIE9mZnNldHMgYXJlIGluIDEwMG5zIGluY3JlbWVudHMuXG4gICAgICAgIC8vIFNvIGhvdyBtYW55IGJ5dGVzIGRvIHdlIG5lZWQgdG8gc2VlayB0byBnZXQgdGhlIHJpZ2h0IG9mZnNldD9cbiAgICAgICAgY29uc3Qgb2Zmc2V0VG9TZWVrID0gb2Zmc2V0IC0gdGhpcy5wcml2QnVmZmVyU3RhcnRPZmZzZXQ7XG4gICAgICAgIGxldCBieXRlc1RvU2VlayA9IE1hdGgucm91bmQob2Zmc2V0VG9TZWVrICogdGhpcy5wcml2Rm9ybWF0LmF2Z0J5dGVzUGVyU2VjICogMWUtNyk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnByaXZCdWZmZXJzLmxlbmd0aCAmJiBieXRlc1RvU2VlayA+PSB0aGlzLnByaXZCdWZmZXJzW2ldLmNodW5rLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICBieXRlc1RvU2VlayAtPSB0aGlzLnByaXZCdWZmZXJzW2krK10uY2h1bmsuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcml2QnVmZmVyU3RhcnRPZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCAtICgoYnl0ZXNUb1NlZWsgLyB0aGlzLnByaXZGb3JtYXQuYXZnQnl0ZXNQZXJTZWMpICogMWUrNykpO1xuICAgICAgICB0aGlzLnByaXZCdWZmZXJzID0gdGhpcy5wcml2QnVmZmVycy5zbGljZShpKTtcbiAgICB9XG4gICAgLy8gRmluZHMgdGhlIHRpbWUgYSBidWZmZXIgb2YgYXVkaW8gd2FzIGZpcnN0IHNlZW4gYnkgb2Zmc2V0LlxuICAgIGZpbmRUaW1lQXRPZmZzZXQob2Zmc2V0KSB7XG4gICAgICAgIGlmIChvZmZzZXQgPCB0aGlzLnByaXZCdWZmZXJTdGFydE9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLnByaXZCdWZmZXJzKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydE9mZnNldCA9ICh2YWx1ZS5ieXRlT2Zmc2V0IC8gdGhpcy5wcml2Rm9ybWF0LmF2Z0J5dGVzUGVyU2VjKSAqIDFlNztcbiAgICAgICAgICAgIGNvbnN0IGVuZE9mZnNldCA9IHN0YXJ0T2Zmc2V0ICsgKCh2YWx1ZS5jaHVuay5idWZmZXIuYnl0ZUxlbmd0aCAvIHRoaXMucHJpdkZvcm1hdC5hdmdCeXRlc1BlclNlYykgKiAxZTcpO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA+PSBzdGFydE9mZnNldCAmJiBvZmZzZXQgPD0gZW5kT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmNodW5rLnRpbWVSZWNlaXZlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG4vLyBQcmltYXJ5IHVzZSBvZiB0aGlzIGNsYXNzIGlzIHRvIGhlbHAgZGVidWdnaW5nIHByb2JsZW1zIHdpdGggdGhlIHJlcGxheVxuLy8gY29kZS4gSWYgdGhlIG1lbW9yeSBjb3N0IG9mIGFsbG9jIC8gZGVhbGxvYyBnZXRzIHRvbyBtdWNoLCBkcm9wIGl0IGFuZCBqdXN0IHVzZVxuLy8gdGhlIEFycmF5QnVmZmVyIGRpcmVjdGx5LlxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5jbGFzcyBCdWZmZXJFbnRyeSB7XG4gICAgY29uc3RydWN0b3IoY2h1bmssIHNlcmlhbCwgYnl0ZU9mZnNldCkge1xuICAgICAgICB0aGlzLmNodW5rID0gY2h1bms7XG4gICAgICAgIHRoaXMuc2VyaWFsID0gc2VyaWFsO1xuICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgPSBieXRlT2Zmc2V0O1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVwbGF5YWJsZUF1ZGlvTm9kZS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQXJndW1lbnROdWxsRXJyb3IsIGNyZWF0ZU5vRGFzaEd1aWQsIH0gZnJvbSBcIi4uL2NvbW1vbi9FeHBvcnRzXCI7XG5pbXBvcnQgeyBXZWJzb2NrZXRNZXNzYWdlQWRhcHRlciB9IGZyb20gXCIuL1dlYnNvY2tldE1lc3NhZ2VBZGFwdGVyXCI7XG5leHBvcnQgY2xhc3MgV2Vic29ja2V0Q29ubmVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IodXJpLCBxdWVyeVBhcmFtZXRlcnMsIGhlYWRlcnMsIG1lc3NhZ2VGb3JtYXR0ZXIsIHByb3h5SW5mbywgY29ubmVjdGlvbklkKSB7XG4gICAgICAgIHRoaXMucHJpdklzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXNwb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcml2SXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2Q29ubmVjdGlvbk1lc3NhZ2VBZGFwdGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbk1lc3NhZ2VBZGFwdGVyLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZJc0Rpc3Bvc2VkO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0YXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkNvbm5lY3Rpb25NZXNzYWdlQWRhcHRlci5zdGF0ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vcGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkNvbm5lY3Rpb25NZXNzYWdlQWRhcHRlci5vcGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VuZCA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2Q29ubmVjdGlvbk1lc3NhZ2VBZGFwdGVyLnNlbmQobWVzc2FnZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVhZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uTWVzc2FnZUFkYXB0ZXIucmVhZCgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoIXVyaSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEVycm9yKFwidXJpXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWVzc2FnZUZvcm1hdHRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEVycm9yKFwibWVzc2FnZUZvcm1hdHRlclwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZNZXNzYWdlRm9ybWF0dGVyID0gbWVzc2FnZUZvcm1hdHRlcjtcbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1zID0gXCJcIjtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBpZiAocXVlcnlQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhcmFtTmFtZSBpbiBxdWVyeVBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zICs9ICgoaSA9PT0gMCkgJiYgKHVyaS5pbmRleE9mKFwiP1wiKSA9PT0gLTEpKSA/IFwiP1wiIDogXCImXCI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGVuY29kZVVSSUNvbXBvbmVudChxdWVyeVBhcmFtZXRlcnNbcGFyYW1OYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zICs9IGAke3BhcmFtTmFtZX09JHt2YWx9YDtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVhZGVycykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBoZWFkZXJOYW1lIGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtcyArPSBpID09PSAwID8gXCI/XCIgOiBcIiZcIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gZW5jb2RlVVJJQ29tcG9uZW50KGhlYWRlcnNbaGVhZGVyTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtcyArPSBgJHtoZWFkZXJOYW1lfT0ke3ZhbH1gO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdlVyaSA9IHVyaSArIHF1ZXJ5UGFyYW1zO1xuICAgICAgICB0aGlzLnByaXZJZCA9IGNvbm5lY3Rpb25JZCA/IGNvbm5lY3Rpb25JZCA6IGNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbk1lc3NhZ2VBZGFwdGVyID0gbmV3IFdlYnNvY2tldE1lc3NhZ2VBZGFwdGVyKHRoaXMucHJpdlVyaSwgdGhpcy5pZCwgdGhpcy5wcml2TWVzc2FnZUZvcm1hdHRlciwgcHJveHlJbmZvLCBoZWFkZXJzKTtcbiAgICB9XG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgfVxuICAgIGdldCBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uTWVzc2FnZUFkYXB0ZXIuZXZlbnRzO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9V2Vic29ja2V0Q29ubmVjdGlvbi5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQXJndW1lbnROdWxsRXJyb3IsIENvbm5lY3Rpb25DbG9zZWRFdmVudCwgQ29ubmVjdGlvbkVzdGFibGlzaGVkRXZlbnQsIENvbm5lY3Rpb25NZXNzYWdlUmVjZWl2ZWRFdmVudCwgQ29ubmVjdGlvbk1lc3NhZ2VTZW50RXZlbnQsIENvbm5lY3Rpb25PcGVuUmVzcG9uc2UsIENvbm5lY3Rpb25TdGFydEV2ZW50LCBDb25uZWN0aW9uU3RhdGUsIERlZmVycmVkLCBFdmVudHMsIEV2ZW50U291cmNlLCBNZXNzYWdlVHlwZSwgUHJvbWlzZUhlbHBlciwgUXVldWUsIFJhd1dlYnNvY2tldE1lc3NhZ2UsIH0gZnJvbSBcIi4uL2NvbW1vbi9FeHBvcnRzXCI7XG5pbXBvcnQgKiBhcyBIdHRwc1Byb3h5QWdlbnQgZnJvbSBcImh0dHBzLXByb3h5LWFnZW50XCI7XG5pbXBvcnQgKiBhcyB3cyBmcm9tIFwid3NcIjtcbmltcG9ydCAqIGFzIG9jc3AgZnJvbSBcIi4uLy4uL2V4dGVybmFsL29jc3Avb2NzcFwiO1xuZXhwb3J0IGNsYXNzIFdlYnNvY2tldE1lc3NhZ2VBZGFwdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmksIGNvbm5lY3Rpb25JZCwgbWVzc2FnZUZvcm1hdHRlciwgcHJveHlJbmZvLCBoZWFkZXJzKSB7XG4gICAgICAgIHRoaXMub3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZDb25uZWN0aW9uU3RhdGUgPT09IENvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tRXJyb3IoYENhbm5vdCBvcGVuIGEgY29ubmVjdGlvbiB0aGF0IGlzIGluICR7dGhpcy5wcml2Q29ubmVjdGlvblN0YXRlfSBzdGF0ZWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hEZWZlcnJhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoRGVmZXJyYWwucHJvbWlzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaERlZmVycmFsID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgICAgICB0aGlzLnByaXZDZXJ0aWZpY2F0ZVZhbGlkYXRlZERlZmVycmFsID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uU3RhdGUgPSBDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGluZztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBXZWJTb2NrZXQgIT09IFwidW5kZWZpbmVkXCIgJiYgIVdlYnNvY2tldE1lc3NhZ2VBZGFwdGVyLmZvcmNlTnBtV2ViU29ja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJyb3dzZXIgaGFuZGxlcyBjZXJ0IGNoZWNrcy5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2Q2VydGlmaWNhdGVWYWxpZGF0ZWREZWZlcnJhbC5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZXZWJzb2NrZXRDbGllbnQgPSBuZXcgV2ViU29ja2V0KHRoaXMucHJpdlVyaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm94eUluZm8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm94eUluZm8uSG9zdE5hbWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm94eUluZm8uUG9ydCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGh0dHBQcm94eU9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdDogdGhpcy5wcm94eUluZm8uSG9zdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9ydDogdGhpcy5wcm94eUluZm8uUG9ydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5kZWZpbmVkICE9PSB0aGlzLnByb3h5SW5mby5Vc2VyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBQcm94eU9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJQcm94eS1BdXRoZW50aWNhdGlvblwiOiBcIkJhc2ljIFwiICsgbmV3IEJ1ZmZlcih0aGlzLnByb3h5SW5mby5Vc2VyTmFtZSArIFwiOlwiICsgKHRoaXMucHJveHlJbmZvLlBhc3N3b3JkID09PSB1bmRlZmluZWQpID8gXCJcIiA6IHRoaXMucHJveHlJbmZvLlBhc3N3b3JkKS50b1N0cmluZyhcImJhc2U2NFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXF1ZXN0T0NTUFwiOiBcInRydWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaHR0cFByb3h5QWdlbnQgPSBuZXcgSHR0cHNQcm94eUFnZW50KGh0dHBQcm94eU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaHR0cHNPcHRpb25zID0geyBhZ2VudDogaHR0cFByb3h5QWdlbnQsIGhlYWRlcnM6IHRoaXMucHJpdkhlYWRlcnMgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdldlYnNvY2tldENsaWVudCA9IG5ldyB3cyh0aGlzLnByaXZVcmksIGh0dHBzT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWdpc3RlciB0byBiZSBub3RpZmllZCB3aGVuIFdlYlNvY2tldCB1cGdyYWRlIGhhcHBlbnMgc28gd2UgY2FuIGNoZWNrIHRoZSB2YWxpZGl0eSBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENlcnRpZmljYXRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2V2Vic29ja2V0Q2xpZW50LmFkZExpc3RlbmVyKFwidXBncmFkZVwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRsc1NvY2tldCA9IGUuc29ja2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBlZXIgPSB0bHNTb2NrZXQuZ2V0UGVlckNlcnRpZmljYXRlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvcmsgdGhlIHNvY2tldCB1bnRpbCB3ZSBrbm93IGlmIHRoZSBjZXJ0IGlzIGdvb2QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGxzU29ja2V0LmNvcmsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvY3NwLmNoZWNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VydDogcGVlci5yYXcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBPcHRpb25zOiBodHRwc09wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlcjogcGVlci5pc3N1ZXJDZXJ0aWZpY2F0ZS5yYXcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZDZXJ0aWZpY2F0ZVZhbGlkYXRlZERlZmVycmFsLnJlamVjdChlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRsc1NvY2tldC5kZXN0cm95KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkNlcnRpZmljYXRlVmFsaWRhdGVkRGVmZXJyYWwucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRsc1NvY2tldC51bmNvcmsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgb2NzcCBsaWJyYXJ5IHdpbGwgaGFuZGxlIHZhbGlkYXRpb24gZm9yIHVzIGFuZCBmYWlsIHRoZSBjb25uZWN0aW9uIGlmIG5lZWRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkNlcnRpZmljYXRlVmFsaWRhdGVkRGVmZXJyYWwucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9jc3BBZ2VudCA9IG5ldyBvY3NwLkFnZW50KHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7IGFnZW50OiBvY3NwQWdlbnQsIGhlYWRlcnM6IHRoaXMucHJpdkhlYWRlcnMgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdldlYnNvY2tldENsaWVudCA9IG5ldyB3cyh0aGlzLnByaXZVcmksIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucHJpdldlYnNvY2tldENsaWVudC5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlY2VpdmluZ01lc3NhZ2VRdWV1ZSA9IG5ldyBRdWV1ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkRpc2Nvbm5lY3REZWZlcnJhbCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlNlbmRNZXNzYWdlUXVldWUgPSBuZXcgUXVldWUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NTZW5kUXVldWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hEZWZlcnJhbC5yZXNvbHZlKG5ldyBDb25uZWN0aW9uT3BlblJlc3BvbnNlKDUwMCwgZXJyb3IpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaERlZmVycmFsLnByb21pc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub25FdmVudChuZXcgQ29ubmVjdGlvblN0YXJ0RXZlbnQodGhpcy5wcml2Q29ubmVjdGlvbklkLCB0aGlzLnByaXZVcmkpKTtcbiAgICAgICAgICAgIHRoaXMucHJpdldlYnNvY2tldENsaWVudC5vbm9wZW4gPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkNlcnRpZmljYXRlVmFsaWRhdGVkRGVmZXJyYWwucHJvbWlzZSgpLm9uKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvblN0YXRlID0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBDb25uZWN0aW9uRXN0YWJsaXNoZWRFdmVudCh0aGlzLnByaXZDb25uZWN0aW9uSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaERlZmVycmFsLnJlc29sdmUobmV3IENvbm5lY3Rpb25PcGVuUmVzcG9uc2UoMjAwLCBcIlwiKSk7XG4gICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hEZWZlcnJhbC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMucHJpdldlYnNvY2tldENsaWVudC5vbmVycm9yID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBVbmRlcnN0YW5kIHdoYXQgdGhpcyBpcyBlcnJvciBpcy4gV2lsbCB3ZSBzdGlsbCBnZXQgb25DbG9zZSA/XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSAhPT0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogSXMgdGhpcyByZXF1aXJlZCA/XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMub25FdmVudChuZXcgQ29ubmVjdGlvbkVycm9yRXZlbnQoZXJyb3JNc2csIGNvbm5lY3Rpb25JZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnByaXZXZWJzb2NrZXRDbGllbnQub25jbG9zZSA9IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvblN0YXRlID0gQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZDtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5vbkV2ZW50KG5ldyBDb25uZWN0aW9uRXN0YWJsaXNoRXJyb3JFdmVudCh0aGlzLmNvbm5lY3Rpb25JZCwgZS5jb2RlLCBlLnJlYXNvbikpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoRGVmZXJyYWwucmVzb2x2ZShuZXcgQ29ubmVjdGlvbk9wZW5SZXNwb25zZShlLmNvZGUsIGUucmVhc29uKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IENvbm5lY3Rpb25DbG9zZWRFdmVudCh0aGlzLnByaXZDb25uZWN0aW9uSWQsIGUuY29kZSwgZS5yZWFzb24pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsb3NlKGUuY29kZSwgZS5yZWFzb24pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMucHJpdldlYnNvY2tldENsaWVudC5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ldHdvcmtSZWNlaXZlZFRpbWUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBsZXQgaWQgPSArK3RoaXMuaWRDb3VudGVyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWNlaXZpbmdNZXNzYWdlUXVldWUuZW5xdWV1ZUZyb21Qcm9taXNlKGRlZmVycmVkLnByb21pc2UoKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF3TWVzc2FnZSA9IG5ldyBSYXdXZWJzb2NrZXRNZXNzYWdlKE1lc3NhZ2VUeXBlLkJpbmFyeSwgZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdk1lc3NhZ2VGb3JtYXR0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9Db25uZWN0aW9uTWVzc2FnZShyYXdNZXNzYWdlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbigoY29ubmVjdGlvbk1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IENvbm5lY3Rpb25NZXNzYWdlUmVjZWl2ZWRFdmVudCh0aGlzLnByaXZDb25uZWN0aW9uSWQsIG5ldHdvcmtSZWNlaXZlZFRpbWUsIGNvbm5lY3Rpb25NZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShjb25uZWN0aW9uTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBFdmVudHMgZm9yIHRoZXNlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoYEludmFsaWQgYmluYXJ5IG1lc3NhZ2UgZm9ybWF0LiBFcnJvcjogJHtlcnJvcn1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF3TWVzc2FnZSA9IG5ldyBSYXdXZWJzb2NrZXRNZXNzYWdlKE1lc3NhZ2VUeXBlLlRleHQsIGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZNZXNzYWdlRm9ybWF0dGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvQ29ubmVjdGlvbk1lc3NhZ2UocmF3TWVzc2FnZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oKGNvbm5lY3Rpb25NZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBDb25uZWN0aW9uTWVzc2FnZVJlY2VpdmVkRXZlbnQodGhpcy5wcml2Q29ubmVjdGlvbklkLCBuZXR3b3JrUmVjZWl2ZWRUaW1lLCBjb25uZWN0aW9uTWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoY29ubmVjdGlvbk1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogRXZlbnRzIGZvciB0aGVzZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGBJbnZhbGlkIHRleHQgbWVzc2FnZSBmb3JtYXQuIEVycm9yOiAke2Vycm9yfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hEZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VuZCA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2Q29ubmVjdGlvblN0YXRlICE9PSBDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbUVycm9yKGBDYW5ub3Qgc2VuZCBvbiBjb25uZWN0aW9uIHRoYXQgaXMgaW4gJHt0aGlzLnByaXZDb25uZWN0aW9uU3RhdGV9IHN0YXRlYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlU2VuZFN0YXR1c0RlZmVycmFsID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlU2VuZERlZmVycmFsID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgICAgICB0aGlzLnByaXZTZW5kTWVzc2FnZVF1ZXVlLmVucXVldWVGcm9tUHJvbWlzZShtZXNzYWdlU2VuZERlZmVycmFsLnByb21pc2UoKSk7XG4gICAgICAgICAgICB0aGlzLnByaXZNZXNzYWdlRm9ybWF0dGVyXG4gICAgICAgICAgICAgICAgLmZyb21Db25uZWN0aW9uTWVzc2FnZShtZXNzYWdlKVxuICAgICAgICAgICAgICAgIC5vbigocmF3TWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VTZW5kRGVmZXJyYWwucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIFJhd1dlYnNvY2tldE1lc3NhZ2U6IHJhd01lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHNlbmRTdGF0dXNEZWZlcnJhbDogbWVzc2FnZVNlbmRTdGF0dXNEZWZlcnJhbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VTZW5kRGVmZXJyYWwucmVqZWN0KGBFcnJvciBmb3JtYXR0aW5nIHRoZSBtZXNzYWdlLiAke2Vycm9yfWApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZVNlbmRTdGF0dXNEZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVhZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZDb25uZWN0aW9uU3RhdGUgIT09IENvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tRXJyb3IoYENhbm5vdCByZWFkIG9uIGNvbm5lY3Rpb24gdGhhdCBpcyBpbiAke3RoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZX0gc3RhdGVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZSZWNlaXZpbmdNZXNzYWdlUXVldWUuZGVxdWV1ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsb3NlID0gKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpdldlYnNvY2tldENsaWVudCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByaXZDb25uZWN0aW9uU3RhdGUgIT09IENvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2V2Vic29ja2V0Q2xpZW50LmNsb3NlKDEwMDAsIHJlYXNvbiA/IHJlYXNvbiA6IFwiTm9ybWFsIGNsb3N1cmUgYnkgY2xpZW50XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmVycmFsID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgICAgICAgICAgZGVmZXJyYWwucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyYWwucHJvbWlzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkRpc2Nvbm5lY3REZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VuZFJhd01lc3NhZ2UgPSAoc2VuZEl0ZW0pID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gaW5kaWNhdGVzIHdlIGFyZSBkcmFpbmluZyB0aGUgcXVldWUgYW5kIGl0IGNhbWUgd2l0aCBubyBtZXNzYWdlO1xuICAgICAgICAgICAgICAgIGlmICghc2VuZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBDb25uZWN0aW9uTWVzc2FnZVNlbnRFdmVudCh0aGlzLnByaXZDb25uZWN0aW9uSWQsIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSwgc2VuZEl0ZW0uTWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdldlYnNvY2tldENsaWVudC5zZW5kKHNlbmRJdGVtLlJhd1dlYnNvY2tldE1lc3NhZ2UucGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbUVycm9yKGB3ZWJzb2NrZXQgc2VuZCBlcnJvcjogJHtlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uQ2xvc2UgPSAoY29kZSwgcmVhc29uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjbG9zZVJlYXNvbiA9IGBDb25uZWN0aW9uIGNsb3NlZC4gJHtjb2RlfTogJHtyZWFzb259YDtcbiAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQ7XG4gICAgICAgICAgICB0aGlzLnByaXZEaXNjb25uZWN0RGVmZXJyYWwucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMucHJpdlJlY2VpdmluZ01lc3NhZ2VRdWV1ZS5kaXNwb3NlKHJlYXNvbik7XG4gICAgICAgICAgICB0aGlzLnByaXZSZWNlaXZpbmdNZXNzYWdlUXVldWUuZHJhaW5BbmREaXNwb3NlKChwZW5kaW5nUmVjZWl2ZUl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBFdmVudHMgZm9yIHRoZXNlID9cbiAgICAgICAgICAgICAgICAvLyBMb2dnZXIuaW5zdGFuY2Uub25FdmVudChuZXcgTG9nZ2luZ0V2ZW50KExvZ1R5cGUuV2FybmluZywgbnVsbCwgYEZhaWxlZCB0byBwcm9jZXNzIHJlY2VpdmVkIG1lc3NhZ2UuIFJlYXNvbjogJHtjbG9zZVJlYXNvbn0sIE1lc3NhZ2U6ICR7SlNPTi5zdHJpbmdpZnkocGVuZGluZ1JlY2VpdmVJdGVtKX1gKSk7XG4gICAgICAgICAgICB9LCBjbG9zZVJlYXNvbik7XG4gICAgICAgICAgICB0aGlzLnByaXZTZW5kTWVzc2FnZVF1ZXVlLmRyYWluQW5kRGlzcG9zZSgocGVuZGluZ1NlbmRJdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgcGVuZGluZ1NlbmRJdGVtLnNlbmRTdGF0dXNEZWZlcnJhbC5yZWplY3QoY2xvc2VSZWFzb24pO1xuICAgICAgICAgICAgfSwgY2xvc2VSZWFzb24pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByb2Nlc3NTZW5kUXVldWUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnByaXZTZW5kTWVzc2FnZVF1ZXVlXG4gICAgICAgICAgICAgICAgLmRlcXVldWUoKVxuICAgICAgICAgICAgICAgIC5vbigoc2VuZEl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAvLyBpbmRpY2F0ZXMgd2UgYXJlIGRyYWluaW5nIHRoZSBxdWV1ZSBhbmQgaXQgY2FtZSB3aXRoIG5vIG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgaWYgKCFzZW5kSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFJhd01lc3NhZ2Uoc2VuZEl0ZW0pXG4gICAgICAgICAgICAgICAgICAgIC5vbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRJdGVtLnNlbmRTdGF0dXNEZWZlcnJhbC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc1NlbmRRdWV1ZSgpO1xuICAgICAgICAgICAgICAgIH0sIChzZW5kRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZEl0ZW0uc2VuZFN0YXR1c0RlZmVycmFsLnJlamVjdChzZW5kRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NTZW5kUXVldWUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25FdmVudHMub25FdmVudChldmVudCk7XG4gICAgICAgICAgICBFdmVudHMuaW5zdGFuY2Uub25FdmVudChldmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghdXJpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXJyb3IoXCJ1cmlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZXNzYWdlRm9ybWF0dGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXJyb3IoXCJtZXNzYWdlRm9ybWF0dGVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJveHlJbmZvID0gcHJveHlJbmZvO1xuICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uRXZlbnRzID0gbmV3IEV2ZW50U291cmNlKCk7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcbiAgICAgICAgdGhpcy5wcml2TWVzc2FnZUZvcm1hdHRlciA9IG1lc3NhZ2VGb3JtYXR0ZXI7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5Ob25lO1xuICAgICAgICB0aGlzLnByaXZVcmkgPSB1cmk7XG4gICAgICAgIHRoaXMucHJpdkhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIH1cbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uU3RhdGU7XG4gICAgfVxuICAgIGdldCBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uRXZlbnRzO1xuICAgIH1cbn1cbldlYnNvY2tldE1lc3NhZ2VBZGFwdGVyLmZvcmNlTnBtV2ViU29ja2V0ID0gZmFsc2U7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdlYnNvY2tldE1lc3NhZ2VBZGFwdGVyLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIEBjbGFzcyBBZGRlZExtSW50ZW50XG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIEFkZGVkTG1JbnRlbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIG1vZGVsSW1wbCAtIFRoZSBtb2RlbC5cbiAgICAgKiBAcGFyYW0gaW50ZW50TmFtZSAtIFRoZSBpbnRlbnQgbmFtZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihtb2RlbEltcGwsIGludGVudE5hbWUpIHtcbiAgICAgICAgdGhpcy5tb2RlbEltcGwgPSBtb2RlbEltcGw7XG4gICAgICAgIHRoaXMuaW50ZW50TmFtZSA9IGludGVudE5hbWU7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BZGRlZExtSW50ZW50LmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIEpTT04gdXNlZCBpbiB0aGUgYWdlbnQuY29uZmlnIG1lc3NhZ2Ugc2VudCB0byB0aGUgc3BlZWNoIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBBZ2VudENvbmZpZyB7XG4gICAgdG9Kc29uU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5pUHJpdkNvbmZpZyk7XG4gICAgfVxuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaVByaXZDb25maWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHRlciBmb3IgdGhlIGFnZW50LmNvbmZpZyBvYmplY3QuXG4gICAgICogQHBhcmFtIHZhbHVlIGEgSlNPTiBzZXJpYWxpemFibGUgb2JqZWN0LlxuICAgICAqL1xuICAgIHNldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmlQcml2Q29uZmlnID0gdmFsdWU7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BZ2VudENvbmZpZy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQXJndW1lbnROdWxsRXJyb3IsIFByb21pc2VIZWxwZXIgfSBmcm9tIFwiLi4vY29tbW9uL0V4cG9ydHNcIjtcbmltcG9ydCB7IEF1dGhJbmZvIH0gZnJvbSBcIi4vSUF1dGhlbnRpY2F0aW9uXCI7XG5jb25zdCBBdXRoSGVhZGVyID0gXCJPY3AtQXBpbS1TdWJzY3JpcHRpb24tS2V5XCI7XG4vKipcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgQ29nbml0aXZlU3Vic2NyaXB0aW9uS2V5QXV0aGVudGljYXRpb24ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoZSBDb2duaXRpdmVTdWJzY3JpcHRpb25LZXlBdXRoZW50aWNhdGlvbiBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3Vic2NyaXB0aW9uS2V5IC0gVGhlIHN1YnNjcmlwdGlvbiBrZXlcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzdWJzY3JpcHRpb25LZXkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZldGNoZXMgdGhlIHN1YnNjcmlwdGlvbiBrZXkuXG4gICAgICAgICAqIEBtZW1iZXJcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGF1dGhGZXRjaEV2ZW50SWQgLSBUaGUgaWQgdG8gZmV0Y2guXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZldGNoID0gKGF1dGhGZXRjaEV2ZW50SWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQodGhpcy5wcml2QXV0aEluZm8pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRmV0Y2hlcyB0aGUgc3Vic2NyaXB0aW9uIGtleS5cbiAgICAgICAgICogQG1lbWJlclxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXV0aEZldGNoRXZlbnRJZCAtIFRoZSBpZCB0byBmZXRjaC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmV0Y2hPbkV4cGlyeSA9IChhdXRoRmV0Y2hFdmVudElkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRoaXMucHJpdkF1dGhJbmZvKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFzdWJzY3JpcHRpb25LZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFcnJvcihcInN1YnNjcmlwdGlvbktleVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZBdXRoSW5mbyA9IG5ldyBBdXRoSW5mbyhBdXRoSGVhZGVyLCBzdWJzY3JpcHRpb25LZXkpO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29nbml0aXZlU3Vic2NyaXB0aW9uS2V5QXV0aGVudGljYXRpb24uanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEFyZ3VtZW50TnVsbEVycm9yIH0gZnJvbSBcIi4uL2NvbW1vbi9FeHBvcnRzXCI7XG5pbXBvcnQgeyBBdXRoSW5mbyB9IGZyb20gXCIuL0lBdXRoZW50aWNhdGlvblwiO1xuY29uc3QgQXV0aEhlYWRlciA9IFwiQXV0aG9yaXphdGlvblwiO1xuZXhwb3J0IGNsYXNzIENvZ25pdGl2ZVRva2VuQXV0aGVudGljYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGZldGNoQ2FsbGJhY2ssIGZldGNoT25FeHBpcnlDYWxsYmFjaykge1xuICAgICAgICB0aGlzLmZldGNoID0gKGF1dGhGZXRjaEV2ZW50SWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZGZXRjaENhbGxiYWNrKGF1dGhGZXRjaEV2ZW50SWQpLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aCgodG9rZW4pID0+IG5ldyBBdXRoSW5mbyhBdXRoSGVhZGVyLCB0b2tlbikpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZldGNoT25FeHBpcnkgPSAoYXV0aEZldGNoRXZlbnRJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkZldGNoT25FeHBpcnlDYWxsYmFjayhhdXRoRmV0Y2hFdmVudElkKS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKHRva2VuKSA9PiBuZXcgQXV0aEluZm8oQXV0aEhlYWRlciwgdG9rZW4pKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFmZXRjaENhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXJyb3IoXCJmZXRjaENhbGxiYWNrXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZmV0Y2hPbkV4cGlyeUNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXJyb3IoXCJmZXRjaE9uRXhwaXJ5Q2FsbGJhY2tcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcml2RmV0Y2hDYWxsYmFjayA9IGZldGNoQ2FsbGJhY2s7XG4gICAgICAgIHRoaXMucHJpdkZldGNoT25FeHBpcnlDYWxsYmFjayA9IGZldGNoT25FeHBpcnlDYWxsYmFjaztcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvZ25pdGl2ZVRva2VuQXV0aGVudGljYXRpb24uanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFNlcnZpY2VQcm9wZXJ0aWVzUHJvcGVydHlOYW1lLCB9IGZyb20gXCIuLi9jb21tb24uc3BlZWNoL0V4cG9ydHNcIjtcbmltcG9ydCB7IFByb3BlcnR5SWQgfSBmcm9tIFwiLi4vc2RrL0V4cG9ydHNcIjtcbmltcG9ydCB7IFF1ZXJ5UGFyYW1ldGVyTmFtZXMgfSBmcm9tIFwiLi9RdWVyeVBhcmFtZXRlck5hbWVzXCI7XG5leHBvcnQgY2xhc3MgQ29ubmVjdGlvbkZhY3RvcnlCYXNlIHtcbiAgICBzZXRDb21tb25VcmxQYXJhbXMoY29uZmlnLCBxdWVyeVBhcmFtcywgZW5kcG9pbnQpIHtcbiAgICAgICAgdGhpcy5zZXRVcmxQYXJhbWV0ZXIoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmFibGVBdWRpb0xvZ2dpbmcsIFF1ZXJ5UGFyYW1ldGVyTmFtZXMuRW5hYmxlQXVkaW9Mb2dnaW5nLCBjb25maWcsIHF1ZXJ5UGFyYW1zLCBlbmRwb2ludCk7XG4gICAgICAgIHRoaXMuc2V0VXJsUGFyYW1ldGVyKFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX1JlcXVlc3RXb3JkTGV2ZWxUaW1lc3RhbXBzLCBRdWVyeVBhcmFtZXRlck5hbWVzLkVuYWJsZVdvcmRMZXZlbFRpbWVzdGFtcHMsIGNvbmZpZywgcXVlcnlQYXJhbXMsIGVuZHBvaW50KTtcbiAgICAgICAgdGhpcy5zZXRVcmxQYXJhbWV0ZXIoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUHJvZmFuaXR5T3B0aW9uLCBRdWVyeVBhcmFtZXRlck5hbWVzLlByb2ZhbmlmeSwgY29uZmlnLCBxdWVyeVBhcmFtcywgZW5kcG9pbnQpO1xuICAgICAgICB0aGlzLnNldFVybFBhcmFtZXRlcihQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0luaXRpYWxTaWxlbmNlVGltZW91dE1zLCBRdWVyeVBhcmFtZXRlck5hbWVzLkluaXRpYWxTaWxlbmNlVGltZW91dE1zLCBjb25maWcsIHF1ZXJ5UGFyYW1zLCBlbmRwb2ludCk7XG4gICAgICAgIHRoaXMuc2V0VXJsUGFyYW1ldGVyKFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kU2lsZW5jZVRpbWVvdXRNcywgUXVlcnlQYXJhbWV0ZXJOYW1lcy5FbmRTaWxlbmNlVGltZW91dE1zLCBjb25maWcsIHF1ZXJ5UGFyYW1zLCBlbmRwb2ludCk7XG4gICAgICAgIHRoaXMuc2V0VXJsUGFyYW1ldGVyKFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX1N0YWJsZVBhcnRpYWxSZXN1bHRUaHJlc2hvbGQsIFF1ZXJ5UGFyYW1ldGVyTmFtZXMuU3RhYmxlSW50ZXJtZWRpYXRlVGhyZXNob2xkLCBjb25maWcsIHF1ZXJ5UGFyYW1zLCBlbmRwb2ludCk7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VQcm9wZXJ0aWVzID0gSlNPTi5wYXJzZShjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShTZXJ2aWNlUHJvcGVydGllc1Byb3BlcnR5TmFtZSwgXCJ7fVwiKSk7XG4gICAgICAgIE9iamVjdC5rZXlzKHNlcnZpY2VQcm9wZXJ0aWVzKS5mb3JFYWNoKCh2YWx1ZSwgbnVtLCBhcnJheSkgPT4ge1xuICAgICAgICAgICAgcXVlcnlQYXJhbXNbdmFsdWVdID0gc2VydmljZVByb3BlcnRpZXNbdmFsdWVdO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0VXJsUGFyYW1ldGVyKHByb3BJZCwgcGFyYW1ldGVyTmFtZSwgY29uZmlnLCBxdWVyeVBhcmFtcywgZW5kcG9pbnQpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShwcm9wSWQsIHVuZGVmaW5lZCk7XG4gICAgICAgIGlmICh2YWx1ZSAmJiAoIWVuZHBvaW50IHx8IGVuZHBvaW50LnNlYXJjaChwYXJhbWV0ZXJOYW1lKSA9PT0gLTEpKSB7XG4gICAgICAgICAgICBxdWVyeVBhcmFtc1twYXJhbWV0ZXJOYW1lXSA9IHZhbHVlLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbm5lY3Rpb25GYWN0b3J5QmFzZS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUHJveHlJbmZvLCBXZWJzb2NrZXRDb25uZWN0aW9uLCB9IGZyb20gXCIuLi9jb21tb24uYnJvd3Nlci9FeHBvcnRzXCI7XG5pbXBvcnQgeyBQcm9wZXJ0eUlkIH0gZnJvbSBcIi4uL3Nkay9FeHBvcnRzXCI7XG5pbXBvcnQgeyBDb25uZWN0aW9uRmFjdG9yeUJhc2UgfSBmcm9tIFwiLi9Db25uZWN0aW9uRmFjdG9yeUJhc2VcIjtcbmltcG9ydCB7IFdlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG5pbXBvcnQgeyBRdWVyeVBhcmFtZXRlck5hbWVzIH0gZnJvbSBcIi4vUXVlcnlQYXJhbWV0ZXJOYW1lc1wiO1xuY29uc3QgYmFzZVVybCA9IFwiY29udmFpLnNwZWVjaC5taWNyb3NvZnQuY29tXCI7XG5jb25zdCBib3RGcmFtZXdvcmsgPSB7XG4gICAgYXV0aEhlYWRlcjogXCJYLURMUy1TZWNyZXRcIixcbiAgICByZXNvdXJjZVBhdGg6IFwiXCIsXG4gICAgdmVyc2lvbjogXCJ2M1wiXG59O1xuY29uc3Qgc3BlZWNoQ29tbWFuZHMgPSB7XG4gICAgYXV0aEhlYWRlcjogXCJYLUNvbW1hbmRzQXBwSWRcIixcbiAgICByZXNvdXJjZVBhdGg6IFwiY29tbWFuZHNcIixcbiAgICB2ZXJzaW9uOiBcInYxXCJcbn07XG5jb25zdCBwYXRoU3VmZml4ID0gXCJhcGlcIjtcbmZ1bmN0aW9uIGdldERpYWxvZ1NwZWNpZmljVmFsdWVzKGRpYWxvZ1R5cGUpIHtcbiAgICBzd2l0Y2ggKGRpYWxvZ1R5cGUpIHtcbiAgICAgICAgY2FzZSBcInNwZWVjaF9jb21tYW5kc1wiOiB7XG4gICAgICAgICAgICByZXR1cm4gc3BlZWNoQ29tbWFuZHM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImJvdF9mcmFtZXdvcmtcIjoge1xuICAgICAgICAgICAgcmV0dXJuIGJvdEZyYW1ld29yaztcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGlhbG9nIHR5cGUgJyR7ZGlhbG9nVHlwZX0nYCk7XG59XG5leHBvcnQgY2xhc3MgRGlhbG9nQ29ubmVjdGlvbkZhY3RvcnkgZXh0ZW5kcyBDb25uZWN0aW9uRmFjdG9yeUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNyZWF0ZSA9IChjb25maWcsIGF1dGhJbmZvLCBjb25uZWN0aW9uSWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFwcGxpY2F0aW9uSWQgPSBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLkNvbnZlcnNhdGlvbl9BcHBsaWNhdGlvbklkLCBcIlwiKTtcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZ1R5cGUgPSBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLkNvbnZlcnNhdGlvbl9EaWFsb2dUeXBlKTtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2lvbiA9IGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVnaW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGxhbmd1YWdlID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2UsIFwiZW4tVVNcIik7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgcXVlcnlQYXJhbXNbUXVlcnlQYXJhbWV0ZXJOYW1lcy5MYW5ndWFnZVBhcmFtTmFtZV0gPSBsYW5ndWFnZTtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVzb3VyY2VQYXRoLCB2ZXJzaW9uLCBhdXRoSGVhZGVyIH0gPSBnZXREaWFsb2dTcGVjaWZpY1ZhbHVlcyhkaWFsb2dUeXBlKTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgIGhlYWRlcnNbYXV0aEluZm8uaGVhZGVyTmFtZV0gPSBhdXRoSW5mby50b2tlbjtcbiAgICAgICAgICAgIGhlYWRlcnNbUXVlcnlQYXJhbWV0ZXJOYW1lcy5Db25uZWN0aW9uSWRIZWFkZXJdID0gY29ubmVjdGlvbklkO1xuICAgICAgICAgICAgbGV0IGVuZHBvaW50O1xuICAgICAgICAgICAgLy8gQXBwbGljYXRpb25JZCBpcyBvbmx5IHJlcXVpcmVkIGZvciBDdXN0b21Db21tYW5kc1xuICAgICAgICAgICAgaWYgKGFwcGxpY2F0aW9uSWQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBlbmRwb2ludCA9IGB3c3M6Ly8ke3JlZ2lvbn0uJHtiYXNlVXJsfS8ke3BhdGhTdWZmaXh9LyR7dmVyc2lvbn1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5kcG9pbnQgPSBgd3NzOi8vJHtyZWdpb259LiR7YmFzZVVybH0vJHtyZXNvdXJjZVBhdGh9LyR7cGF0aFN1ZmZpeH0vJHt2ZXJzaW9ufWA7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1thdXRoSGVhZGVyXSA9IGFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdlYnNvY2tldENvbm5lY3Rpb24oZW5kcG9pbnQsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJzLCBuZXcgV2Vic29ja2V0TWVzc2FnZUZvcm1hdHRlcigpLCBQcm94eUluZm8uZnJvbVJlY29nbml6ZXJDb25maWcoY29uZmlnKSwgY29ubmVjdGlvbklkKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURpYWxvZ0Nvbm5lY3RvckZhY3RvcnkuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFJlcGxheWFibGVBdWRpb05vZGUgfSBmcm9tIFwiLi4vY29tbW9uLmJyb3dzZXIvRXhwb3J0c1wiO1xuaW1wb3J0IHsgQ29ubmVjdGlvblN0YXRlLCBjcmVhdGVHdWlkLCBjcmVhdGVOb0Rhc2hHdWlkLCBEZWZlcnJlZCwgTWVzc2FnZVR5cGUsIFByb21pc2VIZWxwZXIsIH0gZnJvbSBcIi4uL2NvbW1vbi9FeHBvcnRzXCI7XG5pbXBvcnQgeyBBY3Rpdml0eVJlY2VpdmVkRXZlbnRBcmdzLCBDYW5jZWxsYXRpb25FcnJvckNvZGUsIENhbmNlbGxhdGlvblJlYXNvbiwgUHJvcGVydHlDb2xsZWN0aW9uLCBQcm9wZXJ0eUlkLCBSZWNvZ25pdGlvbkV2ZW50QXJncywgUmVzdWx0UmVhc29uLCBTZXNzaW9uRXZlbnRBcmdzLCBTcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLCBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJncywgU3BlZWNoUmVjb2duaXRpb25SZXN1bHQsIH0gZnJvbSBcIi4uL3Nkay9FeHBvcnRzXCI7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlVHVyblN0YXRlTWFuYWdlciB9IGZyb20gXCIuL0RpYWxvZ1NlcnZpY2VUdXJuU3RhdGVNYW5hZ2VyXCI7XG5pbXBvcnQgeyBDYW5jZWxsYXRpb25FcnJvckNvZGVQcm9wZXJ0eU5hbWUsIEVudW1UcmFuc2xhdGlvbiwgUmVjb2duaXRpb25TdGF0dXMsIFJlcXVlc3RTZXNzaW9uLCBTZXJ2aWNlUmVjb2duaXplckJhc2UsIFNpbXBsZVNwZWVjaFBocmFzZSwgU3BlZWNoRGV0ZWN0ZWQsIFNwZWVjaEh5cG90aGVzaXMsIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuaW1wb3J0IHsgQWN0aXZpdHlQYXlsb2FkUmVzcG9uc2UgfSBmcm9tIFwiLi9TZXJ2aWNlTWVzc2FnZXMvQWN0aXZpdHlSZXNwb25zZVBheWxvYWRcIjtcbmltcG9ydCB7IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlIH0gZnJvbSBcIi4vU3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2UuSW50ZXJuYWxcIjtcbmV4cG9ydCBjbGFzcyBEaWFsb2dTZXJ2aWNlQWRhcHRlciBleHRlbmRzIFNlcnZpY2VSZWNvZ25pemVyQmFzZSB7XG4gICAgY29uc3RydWN0b3IoYXV0aGVudGljYXRpb24sIGNvbm5lY3Rpb25GYWN0b3J5LCBhdWRpb1NvdXJjZSwgcmVjb2duaXplckNvbmZpZywgZGlhbG9nU2VydmljZUNvbm5lY3Rvcikge1xuICAgICAgICBzdXBlcihhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvU291cmNlLCByZWNvZ25pemVyQ29uZmlnLCBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yKTtcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnRlcmFjdGlvbkd1aWQgPSBjcmVhdGVHdWlkKCk7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0SWQgPSBjcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgICAgICBjb25zdCBhZ2VudE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbklkOiBpbnRlcmFjdGlvbkd1aWRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXlsb2FkOiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHZlcnNpb246IDAuNVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGFnZW50TWVzc2FnZUpzb24gPSBKU09OLnN0cmluZ2lmeShhZ2VudE1lc3NhZ2UpO1xuICAgICAgICAgICAgdGhpcy5mZXRjaERpYWxvZ0Nvbm5lY3Rpb24oKS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKGNvbm5lY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQobmV3IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlKE1lc3NhZ2VUeXBlLlRleHQsIFwiYWdlbnRcIiwgcmVxdWVzdElkLCBcImFwcGxpY2F0aW9uL2pzb25cIiwgYWdlbnRNZXNzYWdlSnNvbikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubGlzdGVuT25jZSA9IChyZWNvTW9kZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnByaXZSZWNvZ25pemVyQ29uZmlnLnJlY29nbml0aW9uTW9kZSA9IHJlY29Nb2RlO1xuICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uc3RhcnROZXdSZWNvZ25pdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ubGlzdGVuRm9yU2VydmljZVRlbGVtZXRyeSh0aGlzLnByaXZEaWFsb2dBdWRpb1NvdXJjZS5ldmVudHMpO1xuICAgICAgICAgICAgLy8gU3RhcnQgdGhlIGNvbm5lY3Rpb24gdG8gdGhlIHNlcnZpY2UuIFRoZSBwcm9taXNlIHRoaXMgd2lsbCBjcmVhdGUgaXMgc3RvcmVkIGFuZCB3aWxsIGJlIHVzZWQgYnkgY29uZmlndXJlQ29ubmVjdGlvbigpLlxuICAgICAgICAgICAgdGhpcy5kaWFsb2dDb25uZWN0SW1wbCgpO1xuICAgICAgICAgICAgdGhpcy5zZW5kUHJlQXVkaW9NZXNzYWdlcygpO1xuICAgICAgICAgICAgdGhpcy5wcml2U3VjY2Vzc0NhbGxiYWNrID0gc3VjY2Vzc0NhbGxiYWNrO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkRpYWxvZ0F1ZGlvU291cmNlXG4gICAgICAgICAgICAgICAgLmF0dGFjaCh0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5hdWRpb05vZGVJZClcbiAgICAgICAgICAgICAgICAuY29udGludWVXaXRoUHJvbWlzZSgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGF1ZGlvTm9kZTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxSZWNvZ25pdGlvbih0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQsIHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgQ2FuY2VsbGF0aW9uUmVhc29uLkVycm9yLCBDYW5jZWxsYXRpb25FcnJvckNvZGUuQ29ubmVjdGlvbkZhaWx1cmUsIHJlc3VsdC5lcnJvciwgc3VjY2Vzc0NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbUVycm9yKHJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhdWRpb05vZGUgPSBuZXcgUmVwbGF5YWJsZUF1ZGlvTm9kZShyZXN1bHQucmVzdWx0LCB0aGlzLnByaXZEaWFsb2dBdWRpb1NvdXJjZS5mb3JtYXQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5vbkF1ZGlvU291cmNlQXR0YWNoQ29tcGxldGVkKGF1ZGlvTm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2RGlhbG9nQXVkaW9Tb3VyY2UuZGV2aWNlSW5mby5vblN1Y2Nlc3NDb250aW51ZVdpdGhQcm9taXNlKChkZXZpY2VJbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlY29nbml6ZXJDb25maWcuU3BlZWNoU2VydmljZUNvbmZpZy5Db250ZXh0LmF1ZGlvID0geyBzb3VyY2U6IGRldmljZUluZm8gfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnQ29ubmVjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oKF8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb25TdGFydEV2ZW50QXJncyA9IG5ldyBTZXNzaW9uRXZlbnRBcmdzKHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZSZWNvZ25pemVyLnNlc3Npb25TdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2UmVjb2duaXplci5zZXNzaW9uU3RhcnRlZCh0aGlzLnByaXZSZWNvZ25pemVyLCBzZXNzaW9uU3RhcnRFdmVudEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXVkaW9TZW5kUHJvbWlzZSA9IHRoaXMuc2VuZEF1ZGlvKGF1ZGlvTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9TZW5kUHJvbWlzZS5vbigoXykgPT4geyB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbFJlY29nbml0aW9uKHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCwgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBDYW5jZWxsYXRpb25SZWFzb24uRXJyb3IsIENhbmNlbGxhdGlvbkVycm9yQ29kZS5SdW50aW1lRXJyb3IsIGVycm9yLCBzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxSZWNvZ25pdGlvbih0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQsIHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgQ2FuY2VsbGF0aW9uUmVhc29uLkVycm9yLCBDYW5jZWxsYXRpb25FcnJvckNvZGUuQ29ubmVjdGlvbkZhaWx1cmUsIGVycm9yLCBzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9KS5jb250aW51ZVdpdGhQcm9taXNlKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaXNFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21FcnJvcihyZXN1bHQuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZW5kQXVkaW8gPSAoYXVkaW9TdHJlYW1Ob2RlKSA9PiB7XG4gICAgICAgICAgICAvLyBOT1RFOiBIb21lLWJha2VkIHByb21pc2VzIGNyYXNoIGlvcyBzYWZhcmkgZHVyaW5nIHRoZSBpbnZvY2F0aW9uXG4gICAgICAgICAgICAvLyBvZiB0aGUgZXJyb3IgY2FsbGJhY2sgY2hhaW4gKGxvb2tzIGxpa2UgdGhlIHJlY3Vyc2lvbiBpcyB3YXkgdG9vIGRlZXAsIGFuZFxuICAgICAgICAgICAgLy8gaXQgYmxvd3MgdXAgdGhlIHN0YWNrKS4gVGhlIGZvbGxvd2luZyBjb25zdHJ1Y3QgaXMgYSBzdG9wLWdhcCB0aGF0IGRvZXMgbm90XG4gICAgICAgICAgICAvLyBidWJibGUgdGhlIGVycm9yIHVwIHRoZSBjYWxsYmFjayBjaGFpbiBhbmQgaGVuY2UgY2lyY3VtdmVudHMgdGhpcyBwcm9ibGVtLlxuICAgICAgICAgICAgLy8gVE9ETzogcmV3cml0ZSB3aXRoIEVTNiBwcm9taXNlcy5cbiAgICAgICAgICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgICAgICAvLyBUaGUgdGltZSB3ZSBsYXN0IHNlbnQgZGF0YSB0byB0aGUgc2VydmljZS5cbiAgICAgICAgICAgIGxldCBuZXh0U2VuZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgY29uc3QgYXVkaW9Gb3JtYXQgPSB0aGlzLnByaXZEaWFsb2dBdWRpb1NvdXJjZS5mb3JtYXQ7XG4gICAgICAgICAgICAvLyBNYXggYW1vdW50IHRvIHNlbmQgYmVmb3JlIHdlIHN0YXJ0IHRvIHRocm90dGxlXG4gICAgICAgICAgICBjb25zdCBmYXN0TGFuZVNpemVNcyA9IHRoaXMucHJpdlJlY29nbml6ZXJDb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShcIlNQRUVDSC1UcmFuc21pdExlbmd0aEJlZm9yVGhyb3R0bGVNc1wiLCBcIjUwMDBcIik7XG4gICAgICAgICAgICBjb25zdCBtYXhTZW5kVW50aHJvdHRsZWRCeXRlcyA9IGF1ZGlvRm9ybWF0LmF2Z0J5dGVzUGVyU2VjIC8gMTAwMCAqIHBhcnNlSW50KGZhc3RMYW5lU2l6ZU1zLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBzdGFydFJlY29nTnVtYmVyID0gdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ucmVjb2dOdW1iZXI7XG4gICAgICAgICAgICBjb25zdCByZWFkQW5kVXBsb2FkQ3ljbGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gSWYgc3BlZWNoIGlzIGRvbmUsIHN0b3Agc2VuZGluZyBhdWRpby5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHJpdkRpYWxvZ0lzRGlzcG9zZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgIXRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLmlzU3BlZWNoRW5kZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uaXNSZWNvZ25pemluZyAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5yZWNvZ051bWJlciA9PT0gc3RhcnRSZWNvZ051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZldGNoRGlhbG9nQ29ubmVjdGlvbigpLm9uKChjb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpb1N0cmVhbU5vZGUucmVhZCgpLm9uKChhdWRpb1N0cmVhbUNodW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgaGF2ZSBhIG5ldyBhdWRpbyBjaHVuayB0byB1cGxvYWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLmlzU3BlZWNoRW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgc2VydmljZSBhbHJlYWR5IHJlY29nbml6ZWQgYXVkaW8gZW5kIHRoZW4gZG9uJ3Qgc2VuZCBhbnkgbW9yZSBhdWRpb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXlsb2FkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZW5kRGVsYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhdWRpb1N0cmVhbUNodW5rIHx8IGF1ZGlvU3RyZWFtQ2h1bmsuaXNFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmREZWxheSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkID0gYXVkaW9TdHJlYW1DaHVuay5idWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLm9uQXVkaW9TZW50KHBheWxvYWQuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXhTZW5kVW50aHJvdHRsZWRCeXRlcyA+PSB0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5ieXRlc1NlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmREZWxheSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kRGVsYXkgPSBNYXRoLm1heCgwLCBuZXh0U2VuZFRpbWUgLSBEYXRlLm5vdygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcmUgd2UgcmVhZHkgdG8gc2VuZCwgb3IgbmVlZCB3ZSBkZWxheSBtb3JlP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF5bG9hZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFNlbmRUaW1lID0gRGF0ZS5ub3coKSArIChwYXlsb2FkLmJ5dGVMZW5ndGggKiAxMDAwIC8gKGF1ZGlvRm9ybWF0LmF2Z0J5dGVzUGVyU2VjICogMikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwbG9hZGVkID0gY29ubmVjdGlvbi5zZW5kKG5ldyBTcGVlY2hDb25uZWN0aW9uTWVzc2FnZShNZXNzYWdlVHlwZS5CaW5hcnksIFwiYXVkaW9cIiwgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBudWxsLCBwYXlsb2FkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdWRpb1N0cmVhbUNodW5rICYmICFhdWRpb1N0cmVhbUNodW5rLmlzRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRlZC5jb250aW51ZVdpdGgoKF8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWdhcmRsZXNzIG9mIHN1Y2Nlc3Mgb3IgZmFpbHVyZSwgc2NoZWR1bGUgdGhlIG5leHQgdXBsb2FkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSB1bmRlcmx5aW5nIGNvbm5lY3Rpb24gd2FzIGJyb2tlbiwgdGhlIG5leHQgY3ljbGUgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCBhIG5ldyBjb25uZWN0aW9uIGFuZCByZS10cmFuc21pdCBtaXNzaW5nIGF1ZGlvIGF1dG9tYXRpY2FsbHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZEFuZFVwbG9hZEN5Y2xlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBhdWRpbyBzdHJlYW0gaGFzIGJlZW4gY2xvc2VkLCBubyBuZWVkIHRvIHNjaGVkdWxlIG5leHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlYWQtdXBsb2FkIGN5Y2xlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ub25TcGVlY2hFbmRlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHNlbmREZWxheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uaXNTcGVlY2hFbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3Igd2hhdGV2ZXIgcmVhc29uLCBSZWplY3QgaXMgdXNlZCB0byByZW1vdmUgcXVldWUgc3Vic2NyaWJlcnMgaW5zaWRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBRdWV1ZS5EcmFpbkFuZERpc3Bvc2UgaW52b2tlZCBmcm9tIERldGFjaEF1ZGlvTm9kZSBkb3duIGJlbG93LCB3aGljaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtZWFucyB0aGF0IHNvbWV0aW1lcyB0aGluZ3MgY2FuIGJlIHJlamVjdGVkIGluIG5vcm1hbCBjaXJjdW1zdGFuY2VzLCB3aXRob3V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFueSBlcnJvcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodHJ1ZSk7IC8vIFRPRE86IHJlbW92ZSB0aGUgYXJndW1lbnQsIGl0J3MgaXMgY29tcGxldGVseSBtZWFuaW5nbGVzcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgcmVqZWN0LCBpZiB0aGVyZSB3YXMgYSBwcm9wZXIgZXJyb3IuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlYWRBbmRVcGxvYWRDeWNsZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZWNlaXZlRGlhbG9nTWVzc2FnZU92ZXJyaWRlID0gKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsQmFjaykgPT4ge1xuICAgICAgICAgICAgLy8gd2Ugd29uJ3QgcmVseSBvbiB0aGUgY2FzY2FkaW5nIHByb21pc2VzIG9mIHRoZSBjb25uZWN0aW9uIHNpbmNlIHdlIHdhbnQgdG8gY29udGludWFsbHkgYmUgYXZhaWxhYmxlIHRvIHJlY2VpdmUgbWVzc2FnZXNcbiAgICAgICAgICAgIGNvbnN0IGNvbW11bmljYXRpb25DdXN0b2RpYW4gPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hEaWFsb2dDb25uZWN0aW9uKCkub24oKGNvbm5lY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbi5yZWFkKClcbiAgICAgICAgICAgICAgICAgICAgLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aFByb21pc2UoKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNEaXNwb3NlZCA9IHRoaXMuaXNEaXNwb3NlZCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXJtaW5hdGVNZXNzYWdlTG9vcCA9ICghdGhpcy5pc0Rpc3Bvc2VkKCkgJiYgdGhpcy50ZXJtaW5hdGVNZXNzYWdlTG9vcCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Rpc3Bvc2VkIHx8IHRlcm1pbmF0ZU1lc3NhZ2VMb29wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSdyZSBkb25lLlxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbXVuaWNhdGlvbkN1c3RvZGlhbi5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWNlaXZlRGlhbG9nTWVzc2FnZU92ZXJyaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29ubmVjdGlvbk1lc3NhZ2UgPSBTcGVlY2hDb25uZWN0aW9uTWVzc2FnZS5mcm9tQ29ubmVjdGlvbk1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY29ubmVjdGlvbk1lc3NhZ2UucGF0aC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwidHVybi5zdGFydFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHVyblJlcXVlc3RJZCA9IGNvbm5lY3Rpb25NZXNzYWdlLnJlcXVlc3RJZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdWRpb1Nlc3Npb25SZXFJZCA9IHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0dXJuIHN0YXJ0ZWQgYnkgdGhlIHNlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR1cm5SZXF1ZXN0SWQgIT09IGF1ZGlvU2Vzc2lvblJlcUlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZUdXJuU3RhdGVNYW5hZ2VyLlN0YXJ0VHVybih0dXJuUmVxdWVzdElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzcGVlY2guc3RhcnRkZXRlY3RlZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwZWVjaFN0YXJ0RGV0ZWN0ZWQgPSBTcGVlY2hEZXRlY3RlZC5mcm9tSlNPTihjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BlZWNoU3RhcnRFdmVudEFyZ3MgPSBuZXcgUmVjb2duaXRpb25FdmVudEFyZ3Moc3BlZWNoU3RhcnREZXRlY3RlZC5PZmZzZXQsIHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2UmVjb2duaXplci5zcGVlY2hTdGFydERldGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlY29nbml6ZXIuc3BlZWNoU3RhcnREZXRlY3RlZCh0aGlzLnByaXZSZWNvZ25pemVyLCBzcGVlY2hTdGFydEV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNwZWVjaC5lbmRkZXRlY3RlZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24gPSBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXF1ZXN0IHdhcyBlbXB0eSwgdGhlIEpTT04gcmV0dXJuZWQgaXMgZW1wdHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24gPSBcInsgT2Zmc2V0OiAwIH1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BlZWNoU3RvcERldGVjdGVkID0gU3BlZWNoRGV0ZWN0ZWQuZnJvbUpTT04oanNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ub25TZXJ2aWNlUmVjb2duaXplZChzcGVlY2hTdG9wRGV0ZWN0ZWQuT2Zmc2V0ICsgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uY3VycmVudFR1cm5BdWRpb09mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BlZWNoU3RvcEV2ZW50QXJncyA9IG5ldyBSZWNvZ25pdGlvbkV2ZW50QXJncyhzcGVlY2hTdG9wRGV0ZWN0ZWQuT2Zmc2V0ICsgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uY3VycmVudFR1cm5BdWRpb09mZnNldCwgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZSZWNvZ25pemVyLnNwZWVjaEVuZERldGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlY29nbml6ZXIuc3BlZWNoRW5kRGV0ZWN0ZWQodGhpcy5wcml2UmVjb2duaXplciwgc3BlZWNoU3RvcEV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInR1cm4uZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0dXJuRW5kUmVxdWVzdElkID0gY29ubmVjdGlvbk1lc3NhZ2UucmVxdWVzdElkLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGlvU2Vzc2lvblJlcUlkID0gdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHR1cm4gc3RhcnRlZCBieSB0aGUgc2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHVybkVuZFJlcXVlc3RJZCAhPT0gYXVkaW9TZXNzaW9uUmVxSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlR1cm5TdGF0ZU1hbmFnZXIuQ29tcGxldGVUdXJuKHR1cm5FbmRSZXF1ZXN0SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXVkaW8gc2Vzc2lvbiB0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXNzaW9uU3RvcEV2ZW50QXJncyA9IG5ldyBTZXNzaW9uRXZlbnRBcmdzKHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5vblNlcnZpY2VUdXJuRW5kUmVzcG9uc2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLmlzU3BlZWNoRW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZSZWNvZ25pemVyLnNlc3Npb25TdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlY29nbml6ZXIuc2Vzc2lvblN0b3BwZWQodGhpcy5wcml2UmVjb2duaXplciwgc2Vzc2lvblN0b3BFdmVudEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzVHlwZVNwZWNpZmljTWVzc2FnZXMoY29ubmVjdGlvbk1lc3NhZ2UsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsQmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVjZWl2ZURpYWxvZ01lc3NhZ2VPdmVycmlkZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXJtaW5hdGVNZXNzYWdlTG9vcCA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb21tdW5pY2F0aW9uQ3VzdG9kaWFuLnByb21pc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mZXRjaERpYWxvZ0Nvbm5lY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWdDb25uZWN0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VuZEFnZW50Q29uZmlnID0gKGNvbm5lY3Rpb24pID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFnZW50Q29uZmlnICYmICF0aGlzLmFnZW50Q29uZmlnU2VudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFnZW50Q29uZmlnSnNvbiA9IHRoaXMuYWdlbnRDb25maWcudG9Kc29uU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hZ2VudENvbmZpZ1NlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLnNlbmQobmV3IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlKE1lc3NhZ2VUeXBlLlRleHQsIFwiYWdlbnQuY29uZmlnXCIsIHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIGFnZW50Q29uZmlnSnNvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZW5kQWdlbnRDb250ZXh0ID0gKGNvbm5lY3Rpb24pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGd1aWQgPSBjcmVhdGVHdWlkKCk7XG4gICAgICAgICAgICBjb25zdCBhZ2VudENvbnRleHQgPSB7XG4gICAgICAgICAgICAgICAgY2hhbm5lbERhdGE6IFwiXCIsXG4gICAgICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbklkOiBndWlkXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiAwLjVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBhZ2VudENvbnRleHRKc29uID0gSlNPTi5zdHJpbmdpZnkoYWdlbnRDb250ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLnNlbmQobmV3IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlKE1lc3NhZ2VUeXBlLlRleHQsIFwic3BlZWNoLmFnZW50LmNvbnRleHRcIiwgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBcImFwcGxpY2F0aW9uL2pzb25cIiwgYWdlbnRDb250ZXh0SnNvbikpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByaXZEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yID0gZGlhbG9nU2VydmljZUNvbm5lY3RvcjtcbiAgICAgICAgdGhpcy5wcml2RGlhbG9nQXV0aGVudGljYXRpb24gPSBhdXRoZW50aWNhdGlvbjtcbiAgICAgICAgdGhpcy5yZWNlaXZlTWVzc2FnZU92ZXJyaWRlID0gdGhpcy5yZWNlaXZlRGlhbG9nTWVzc2FnZU92ZXJyaWRlO1xuICAgICAgICB0aGlzLnByaXZUdXJuU3RhdGVNYW5hZ2VyID0gbmV3IERpYWxvZ1NlcnZpY2VUdXJuU3RhdGVNYW5hZ2VyKCk7XG4gICAgICAgIHRoaXMucmVjb2duaXplT3ZlcnJpZGUgPSB0aGlzLmxpc3Rlbk9uY2U7XG4gICAgICAgIHRoaXMuY29ubmVjdEltcGxPdmVycmlkZSA9IHRoaXMuZGlhbG9nQ29ubmVjdEltcGw7XG4gICAgICAgIHRoaXMuY29uZmlnQ29ubmVjdGlvbk92ZXJyaWRlID0gdGhpcy5jb25maWdDb25uZWN0aW9uO1xuICAgICAgICB0aGlzLmZldGNoQ29ubmVjdGlvbk92ZXJyaWRlID0gdGhpcy5mZXRjaERpYWxvZ0Nvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdE92ZXJyaWRlID0gdGhpcy5wcml2RGlzY29ubmVjdDtcbiAgICAgICAgdGhpcy5wcml2RGlhbG9nQXVkaW9Tb3VyY2UgPSBhdWRpb1NvdXJjZTtcbiAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24gPSBuZXcgUmVxdWVzdFNlc3Npb24oYXVkaW9Tb3VyY2UuaWQoKSk7XG4gICAgICAgIHRoaXMucHJpdkRpYWxvZ0Nvbm5lY3Rpb25GYWN0b3J5ID0gY29ubmVjdGlvbkZhY3Rvcnk7XG4gICAgICAgIHRoaXMucHJpdkRpYWxvZ0lzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZ2VudENvbmZpZ1NlbnQgPSBmYWxzZTtcbiAgICB9XG4gICAgaXNEaXNwb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkRpYWxvZ0lzRGlzcG9zZWQ7XG4gICAgfVxuICAgIGRpc3Bvc2UocmVhc29uKSB7XG4gICAgICAgIHRoaXMucHJpdkRpYWxvZ0lzRGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ1Byb21pc2UpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWdQcm9taXNlLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aCgoY29ubmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZGlzcG9zZShyZWFzb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdkRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsUmVjb2duaXRpb24odGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkLCB0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5yZXF1ZXN0SWQsIENhbmNlbGxhdGlvblJlYXNvbi5FcnJvciwgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlLk5vRXJyb3IsIFwiRGlzY29ubmVjdGluZ1wiLCB1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLnRlcm1pbmF0ZU1lc3NhZ2VMb29wID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hZ2VudENvbmZpZ1NlbnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMucHJpdkRpYWxvZ0Nvbm5lY3Rpb25Qcm9taXNlLnJlc3VsdCgpLmlzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJpdkRpYWxvZ0Nvbm5lY3Rpb25Qcm9taXNlLnJlc3VsdCgpLmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZEaWFsb2dDb25uZWN0aW9uUHJvbWlzZS5yZXN1bHQoKS5yZXN1bHQuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkRpYWxvZ0Nvbm5lY3Rpb25Qcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkRpYWxvZ0Nvbm5lY3Rpb25Qcm9taXNlLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aCgoY29ubmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc1R5cGVTcGVjaWZpY01lc3NhZ2VzKGNvbm5lY3Rpb25NZXNzYWdlLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbEJhY2spIHtcbiAgICAgICAgY29uc3QgcmVzdWx0UHJvcHMgPSBuZXcgUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgICAgIGlmIChjb25uZWN0aW9uTWVzc2FnZS5tZXNzYWdlVHlwZSA9PT0gTWVzc2FnZVR5cGUuVGV4dCkge1xuICAgICAgICAgICAgcmVzdWx0UHJvcHMuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlUmVzcG9uc2VfSnNvblJlc3VsdCwgY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIHN3aXRjaCAoY29ubmVjdGlvbk1lc3NhZ2UucGF0aC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBjYXNlIFwic3BlZWNoLnBocmFzZVwiOlxuICAgICAgICAgICAgICAgIGNvbnN0IHNwZWVjaFBocmFzZSA9IFNpbXBsZVNwZWVjaFBocmFzZS5mcm9tSlNPTihjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ub25QaHJhc2VSZWNvZ25pemVkKHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLmN1cnJlbnRUdXJuQXVkaW9PZmZzZXQgKyBzcGVlY2hQaHJhc2UuT2Zmc2V0ICsgc3BlZWNoUGhyYXNlLkR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoc3BlZWNoUGhyYXNlLlJlY29nbml0aW9uU3RhdHVzID09PSBSZWNvZ25pdGlvblN0YXR1cy5TdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLmZpcmVFdmVudEZvclJlc3VsdChzcGVlY2hQaHJhc2UsIHJlc3VsdFByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2RGlhbG9nU2VydmljZUNvbm5lY3Rvci5yZWNvZ25pemVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkRpYWxvZ1NlcnZpY2VDb25uZWN0b3IucmVjb2duaXplZCh0aGlzLnByaXZEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90IGdvaW5nIHRvIGxldCBlcnJvcnMgaW4gdGhlIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyByZXBvcnQgcmVzdWx0IHRvIHByb21pc2UuXG4gICAgICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdlN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZTdWNjZXNzQ2FsbGJhY2soYXJncy5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnJvckNhbGxCYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbEJhY2soZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBpbnZva2UgdGhlIGNhbGwgYmFjayBvbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGlmIGl0J3Mgc3VjY2Vzc2Z1bCBkb24ndCBpbnZva2UgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlcnJvciBhZnRlciB0aGF0LlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2U3VjY2Vzc0NhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsQmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzcGVlY2guaHlwb3RoZXNpc1wiOlxuICAgICAgICAgICAgICAgIGNvbnN0IGh5cG90aGVzaXMgPSBTcGVlY2hIeXBvdGhlc2lzLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBoeXBvdGhlc2lzLk9mZnNldCArIHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLmN1cnJlbnRUdXJuQXVkaW9PZmZzZXQ7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFNwZWVjaFJlY29nbml0aW9uUmVzdWx0KHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgUmVzdWx0UmVhc29uLlJlY29nbml6aW5nU3BlZWNoLCBoeXBvdGhlc2lzLlRleHQsIGh5cG90aGVzaXMuRHVyYXRpb24sIG9mZnNldCwgdW5kZWZpbmVkLCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSwgcmVzdWx0UHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLm9uSHlwb3RoZXNpcyhvZmZzZXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ID0gbmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzKHJlc3VsdCwgaHlwb3RoZXNpcy5EdXJhdGlvbiwgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLnJlY29nbml6aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLnJlY29nbml6aW5nKHRoaXMucHJpdkRpYWxvZ1NlcnZpY2VDb25uZWN0b3IsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpcCB0aGluZ3MgdXAuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYXVkaW9cIjpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGlvUmVxdWVzdElkID0gY29ubmVjdGlvbk1lc3NhZ2UucmVxdWVzdElkLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR1cm4gPSB0aGlzLnByaXZUdXJuU3RhdGVNYW5hZ2VyLkdldFR1cm4oYXVkaW9SZXF1ZXN0SWQpO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW1wdHkgYmluYXJ5IG1lc3NhZ2Ugc2lnbmFscyBlbmQgb2Ygc3RyZWFtLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0aW9uTWVzc2FnZS5iaW5hcnlCb2R5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHVybi5lbmRBdWRpb1N0cmVhbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHVybi5hdWRpb1N0cmVhbS53cml0ZShjb25uZWN0aW9uTWVzc2FnZS5iaW5hcnlCb2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBnb2luZyB0byBsZXQgZXJyb3JzIGluIHRoZSBldmVudCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyZXNwb25zZVwiOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VSZXF1ZXN0SWQgPSBjb25uZWN0aW9uTWVzc2FnZS5yZXF1ZXN0SWQudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aXZpdHlQYXlsb2FkID0gQWN0aXZpdHlQYXlsb2FkUmVzcG9uc2UuZnJvbUpTT04oY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0dXJuID0gdGhpcy5wcml2VHVyblN0YXRlTWFuYWdlci5HZXRUdXJuKHJlc3BvbnNlUmVxdWVzdElkKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBjb252ZXJzYXRpb24gSWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2aXR5UGF5bG9hZC5jb252ZXJzYXRpb25JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlQWdlbnRDb25maWcgPSB0aGlzLmFnZW50Q29uZmlnLmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQWdlbnRDb25maWcuYm90SW5mby5jb252ZXJzYXRpb25JZCA9IGFjdGl2aXR5UGF5bG9hZC5jb252ZXJzYXRpb25JZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWdlbnRDb25maWcuc2V0KHVwZGF0ZUFnZW50Q29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwdWxsQXVkaW9PdXRwdXRTdHJlYW0gPSB0dXJuLnByb2Nlc3NBY3Rpdml0eVBheWxvYWQoYWN0aXZpdHlQYXlsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aXZpdHkgPSBuZXcgQWN0aXZpdHlSZWNlaXZlZEV2ZW50QXJncyhhY3Rpdml0eVBheWxvYWQubWVzc2FnZVBheWxvYWQsIHB1bGxBdWRpb091dHB1dFN0cmVhbSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdkRpYWxvZ1NlcnZpY2VDb25uZWN0b3IuYWN0aXZpdHlSZWNlaXZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLmFjdGl2aXR5UmVjZWl2ZWQodGhpcy5wcml2RGlhbG9nU2VydmljZUNvbm5lY3RvciwgYWN0aXZpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaXAgdGhpbmdzIHVwLlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDYW5jZWxzIHJlY29nbml0aW9uLlxuICAgIGNhbmNlbFJlY29nbml0aW9uKHNlc3Npb25JZCwgcmVxdWVzdElkLCBjYW5jZWxsYXRpb25SZWFzb24sIGVycm9yQ29kZSwgZXJyb3IsIGNhbmNlbFJlY29DYWxsYmFjaykge1xuICAgICAgICB0aGlzLnRlcm1pbmF0ZU1lc3NhZ2VMb29wID0gdHJ1ZTtcbiAgICAgICAgaWYgKCEhdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uaXNSZWNvZ25pemluZykge1xuICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ub25TdG9wUmVjb2duaXppbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISF0aGlzLnByaXZEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLmNhbmNlbGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnR5Q29sbGVjdGlvbigpO1xuICAgICAgICAgICAgcHJvcGVydGllcy5zZXRQcm9wZXJ0eShDYW5jZWxsYXRpb25FcnJvckNvZGVQcm9wZXJ0eU5hbWUsIENhbmNlbGxhdGlvbkVycm9yQ29kZVtlcnJvckNvZGVdKTtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbEV2ZW50ID0gbmV3IFNwZWVjaFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MoY2FuY2VsbGF0aW9uUmVhc29uLCBlcnJvciwgZXJyb3JDb2RlLCB1bmRlZmluZWQsIHNlc3Npb25JZCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkRpYWxvZ1NlcnZpY2VDb25uZWN0b3IuY2FuY2VsZWQodGhpcy5wcml2RGlhbG9nU2VydmljZUNvbm5lY3RvciwgY2FuY2VsRXZlbnQpO1xuICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxuICAgICAgICAgICAgaWYgKCEhY2FuY2VsUmVjb0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFNwZWVjaFJlY29nbml0aW9uUmVzdWx0KHVuZGVmaW5lZCwgLy8gUmVzdWx0SWRcbiAgICAgICAgICAgICAgICBSZXN1bHRSZWFzb24uQ2FuY2VsZWQsIHVuZGVmaW5lZCwgLy8gVGV4dFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCwgLy8gRHJ1YXRpb25cbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsIC8vIE9mZnNldFxuICAgICAgICAgICAgICAgIGVycm9yLCB1bmRlZmluZWQsIC8vIEpzb25cbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxSZWNvQ2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKF9iKSB7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBFc3RhYmxpc2hlcyBhIHdlYnNvY2tldCBjb25uZWN0aW9uIHRvIHRoZSBlbmQgcG9pbnQuXG4gICAgZGlhbG9nQ29ubmVjdEltcGwoaXNVbkF1dGhvcml6ZWQgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5wcml2RGlhbG9nQ29ubmVjdGlvblByb21pc2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZEaWFsb2dDb25uZWN0aW9uUHJvbWlzZS5yZXN1bHQoKS5pc0NvbXBsZXRlZCAmJlxuICAgICAgICAgICAgICAgICh0aGlzLnByaXZEaWFsb2dDb25uZWN0aW9uUHJvbWlzZS5yZXN1bHQoKS5pc0Vycm9yXG4gICAgICAgICAgICAgICAgICAgIHx8IHRoaXMucHJpdkRpYWxvZ0Nvbm5lY3Rpb25Qcm9taXNlLnJlc3VsdCgpLnJlc3VsdC5zdGF0ZSgpID09PSBDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWdlbnRDb25maWdTZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nQ29ubmVjdGlvblByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkRpYWxvZ0Nvbm5lY3Rpb25Qcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdkRpYWxvZ0F1dGhGZXRjaEV2ZW50SWQgPSBjcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgIC8vIGtlZXAgdGhlIGNvbm5lY3Rpb25JZCBmb3IgcmVjb25uZWN0IGV2ZW50c1xuICAgICAgICBpZiAodGhpcy5wcml2Q29ubmVjdGlvbklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25JZCA9IGNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5vblByZUNvbm5lY3Rpb25TdGFydCh0aGlzLnByaXZEaWFsb2dBdXRoRmV0Y2hFdmVudElkLCB0aGlzLnByaXZDb25uZWN0aW9uSWQpO1xuICAgICAgICBjb25zdCBhdXRoUHJvbWlzZSA9IGlzVW5BdXRob3JpemVkID8gdGhpcy5wcml2RGlhbG9nQXV0aGVudGljYXRpb24uZmV0Y2hPbkV4cGlyeSh0aGlzLnByaXZEaWFsb2dBdXRoRmV0Y2hFdmVudElkKSA6IHRoaXMucHJpdkRpYWxvZ0F1dGhlbnRpY2F0aW9uLmZldGNoKHRoaXMucHJpdkRpYWxvZ0F1dGhGZXRjaEV2ZW50SWQpO1xuICAgICAgICB0aGlzLnByaXZEaWFsb2dDb25uZWN0aW9uUHJvbWlzZSA9IGF1dGhQcm9taXNlXG4gICAgICAgICAgICAuY29udGludWVXaXRoUHJvbWlzZSgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5vbkF1dGhDb21wbGV0ZWQodHJ1ZSwgcmVzdWx0LmVycm9yKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLm9uQXV0aENvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gdGhpcy5wcml2RGlhbG9nQ29ubmVjdGlvbkZhY3RvcnkuY3JlYXRlKHRoaXMucHJpdlJlY29nbml6ZXJDb25maWcsIHJlc3VsdC5yZXN1bHQsIHRoaXMucHJpdkNvbm5lY3Rpb25JZCk7XG4gICAgICAgICAgICB0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5saXN0ZW5Gb3JTZXJ2aWNlVGVsZW1ldHJ5KGNvbm5lY3Rpb24uZXZlbnRzKTtcbiAgICAgICAgICAgIC8vIEF0dGFjaCB0byB0aGUgdW5kZXJseWluZyBldmVudC4gTm8gbmVlZCB0byBob2xkIG9udG8gdGhlIGRldGFjaCBwb2ludGVycyBhcyBpbiB0aGUgZXZlbnQgdGhlIGNvbm5lY3Rpb24gZ29lcyBhd2F5LFxuICAgICAgICAgICAgLy8gaXQnbGwgc3RvcCBzZW5kaW5nIGV2ZW50cy5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24uZXZlbnRzLmF0dGFjaCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25FdmVudHMub25FdmVudChldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLm9wZW4oKS5vblN1Y2Nlc3NDb250aW51ZVdpdGhQcm9taXNlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ub25QcmVDb25uZWN0aW9uU3RhcnQodGhpcy5wcml2RGlhbG9nQXV0aEZldGNoRXZlbnRJZCwgdGhpcy5wcml2Q29ubmVjdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ub25Db25uZWN0aW9uRXN0YWJsaXNoQ29tcGxldGVkKHJlc3BvbnNlLnN0YXR1c0NvZGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MDMgJiYgIWlzVW5BdXRob3JpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpYWxvZ0Nvbm5lY3RJbXBsKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24ub25Db25uZWN0aW9uRXN0YWJsaXNoQ29tcGxldGVkKHJlc3BvbnNlLnN0YXR1c0NvZGUsIHJlc3BvbnNlLnJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21FcnJvcihgVW5hYmxlIHRvIGNvbnRhY3Qgc2VydmVyLiBTdGF0dXNDb2RlOiAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9LCAke3RoaXMucHJpdlJlY29nbml6ZXJDb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50KX0gUmVhc29uOiAke3Jlc3BvbnNlLnJlYXNvbn1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Mb29wID0gdGhpcy5zdGFydE1lc3NhZ2VMb29wKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZEaWFsb2dDb25uZWN0aW9uUHJvbWlzZTtcbiAgICB9XG4gICAgc3RhcnRNZXNzYWdlTG9vcCgpIHtcbiAgICAgICAgdGhpcy50ZXJtaW5hdGVNZXNzYWdlTG9vcCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBtZXNzYWdlUmV0cmlldmFsUHJvbWlzZSA9IHRoaXMucmVjZWl2ZURpYWxvZ01lc3NhZ2VPdmVycmlkZSgpO1xuICAgICAgICByZXR1cm4gbWVzc2FnZVJldHJpZXZhbFByb21pc2Uub24oKHIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsUmVjb2duaXRpb24odGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkLCB0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbi5yZXF1ZXN0SWQsIENhbmNlbGxhdGlvblJlYXNvbi5FcnJvciwgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlLlJ1bnRpbWVFcnJvciwgZXJyb3IsIHRoaXMucHJpdlN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBUYWtlcyBhbiBlc3RhYmxpc2hlZCB3ZWJzb2NrZXQgY29ubmVjdGlvbiB0byB0aGUgZW5kcG9pbnQgYW5kIHNlbmRzIHNwZWVjaCBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLlxuICAgIGNvbmZpZ0Nvbm5lY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZDb25uZWN0aW9uQ29uZmlnUHJvbWlzZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWdQcm9taXNlLnJlc3VsdCgpLmlzQ29tcGxldGVkICYmXG4gICAgICAgICAgICAgICAgKHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWdQcm9taXNlLnJlc3VsdCgpLmlzRXJyb3JcbiAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ1Byb21pc2UucmVzdWx0KCkucmVzdWx0LnN0YXRlKCkgPT09IENvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ1Byb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZ0Nvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uQ29uZmlnUHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uQ29uZmlnUHJvbWlzZSA9IHRoaXMuZGlhbG9nQ29ubmVjdEltcGwoKS5vblN1Y2Nlc3NDb250aW51ZVdpdGhQcm9taXNlKChjb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kU3BlZWNoU2VydmljZUNvbmZpZyhjb25uZWN0aW9uLCB0aGlzLnByaXZEaWFsb2dSZXF1ZXN0U2Vzc2lvbiwgdGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5TcGVlY2hTZXJ2aWNlQ29uZmlnLnNlcmlhbGl6ZSgpKVxuICAgICAgICAgICAgICAgIC5vblN1Y2Nlc3NDb250aW51ZVdpdGhQcm9taXNlKChfKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZEFnZW50Q29uZmlnKGNvbm5lY3Rpb24pLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aCgoXykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWdQcm9taXNlO1xuICAgIH1cbiAgICBzZW5kUHJlQXVkaW9NZXNzYWdlcygpIHtcbiAgICAgICAgdGhpcy5mZXRjaERpYWxvZ0Nvbm5lY3Rpb24oKS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKGNvbm5lY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEFnZW50Q29udGV4dChjb25uZWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZpcmVFdmVudEZvclJlc3VsdChzZXJ2aWNlUmVzdWx0LCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdFJlYXNvbiA9IEVudW1UcmFuc2xhdGlvbi5pbXBsVHJhbnNsYXRlUmVjb2duaXRpb25SZXN1bHQoc2VydmljZVJlc3VsdC5SZWNvZ25pdGlvblN0YXR1cyk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHNlcnZpY2VSZXN1bHQuT2Zmc2V0ICsgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uY3VycmVudFR1cm5BdWRpb09mZnNldDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFNwZWVjaFJlY29nbml0aW9uUmVzdWx0KHRoaXMucHJpdkRpYWxvZ1JlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgcmVzdWx0UmVhc29uLCBzZXJ2aWNlUmVzdWx0LkRpc3BsYXlUZXh0LCBzZXJ2aWNlUmVzdWx0LkR1cmF0aW9uLCBvZmZzZXQsIHVuZGVmaW5lZCwgSlNPTi5zdHJpbmdpZnkoc2VydmljZVJlc3VsdCksIHByb3BlcnRpZXMpO1xuICAgICAgICBjb25zdCBldiA9IG5ldyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJncyhyZXN1bHQsIG9mZnNldCwgdGhpcy5wcml2RGlhbG9nUmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgcmV0dXJuIGV2O1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGlhbG9nU2VydmljZUFkYXB0ZXIuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEF1ZGlvT3V0cHV0U3RyZWFtIH0gZnJvbSBcIi4uL3Nkay9BdWRpby9BdWRpb091dHB1dFN0cmVhbVwiO1xuaW1wb3J0IHsgTWVzc2FnZURhdGFTdHJlYW1UeXBlIH0gZnJvbSBcIi4vU2VydmljZU1lc3NhZ2VzL0FjdGl2aXR5UmVzcG9uc2VQYXlsb2FkXCI7XG5leHBvcnQgY2xhc3MgRGlhbG9nU2VydmljZVR1cm5TdGF0ZSB7XG4gICAgY29uc3RydWN0b3IobWFuYWdlciwgcmVxdWVzdElkKSB7XG4gICAgICAgIHRoaXMucHJpdlJlcXVlc3RJZCA9IHJlcXVlc3RJZDtcbiAgICAgICAgdGhpcy5wcml2SXNDb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcml2QXVkaW9TdHJlYW0gPSBudWxsO1xuICAgICAgICB0aGlzLnByaXZUdXJuTWFuYWdlciA9IG1hbmFnZXI7XG4gICAgICAgIHRoaXMucmVzZXRUdXJuRW5kVGltZW91dCgpO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICAvLyBjb25zb2xlLmluZm8oXCJEaWFsb2dTZXJ2aWNlVHVyblN0YXRlIGRlYnVndHVybiBzdGFydDpcIiArIHRoaXMucHJpdlJlcXVlc3RJZCk7XG4gICAgfVxuICAgIGdldCBhdWRpb1N0cmVhbSgpIHtcbiAgICAgICAgLy8gQ2FsbGVkIHdoZW4gaXMgbmVlZGVkIHRvIHN0cmVhbS5cbiAgICAgICAgdGhpcy5yZXNldFR1cm5FbmRUaW1lb3V0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZBdWRpb1N0cmVhbTtcbiAgICB9XG4gICAgcHJvY2Vzc0FjdGl2aXR5UGF5bG9hZChwYXlsb2FkKSB7XG4gICAgICAgIGlmIChwYXlsb2FkLm1lc3NhZ2VEYXRhU3RyZWFtVHlwZSA9PT0gTWVzc2FnZURhdGFTdHJlYW1UeXBlLlRleHRUb1NwZWVjaEF1ZGlvKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZBdWRpb1N0cmVhbSA9IEF1ZGlvT3V0cHV0U3RyZWFtLmNyZWF0ZVB1bGxTdHJlYW0oKTtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgICAgICAvLyBjb25zb2xlLmluZm8oXCJBdWRpbyBzdGFydCBkZWJ1Z3R1cm46XCIgKyB0aGlzLnByaXZSZXF1ZXN0SWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZBdWRpb1N0cmVhbTtcbiAgICB9XG4gICAgZW5kQXVkaW9TdHJlYW0oKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZBdWRpb1N0cmVhbSAhPT0gbnVsbCAmJiAhdGhpcy5wcml2QXVkaW9TdHJlYW0uaXNDbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkF1ZGlvU3RyZWFtLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29tcGxldGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZUaW1lb3V0VG9rZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucHJpdlRpbWVvdXRUb2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmRBdWRpb1N0cmVhbSgpO1xuICAgIH1cbiAgICByZXNldFR1cm5FbmRUaW1lb3V0KCkge1xuICAgICAgICBpZiAodGhpcy5wcml2VGltZW91dFRva2VuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnByaXZUaW1lb3V0VG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgIC8vIGNvbnNvbGUuaW5mbyhcIlRpbWVvdXQgcmVzZXQgZGVidWd0dXJuOlwiICsgdGhpcy5wcml2UmVxdWVzdElkKTtcbiAgICAgICAgdGhpcy5wcml2VGltZW91dFRva2VuID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICAgICAgLy8gY29uc29sZS5pbmZvKFwiVGltZW91dCBjb21wbGV0ZSBkZWJ1Z3R1cm46XCIgKyB0aGlzLnByaXZSZXF1ZXN0SWQpO1xuICAgICAgICAgICAgdGhpcy5wcml2VHVybk1hbmFnZXIuQ29tcGxldGVUdXJuKHRoaXMucHJpdlJlcXVlc3RJZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0sIDIwMDApO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGlhbG9nU2VydmljZVR1cm5TdGF0ZS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgSW52YWxpZE9wZXJhdGlvbkVycm9yIH0gZnJvbSBcIi4uL2NvbW1vbi9FcnJvclwiO1xuaW1wb3J0IHsgRGlhbG9nU2VydmljZVR1cm5TdGF0ZSB9IGZyb20gXCIuL0RpYWxvZ1NlcnZpY2VUdXJuU3RhdGVcIjtcbmV4cG9ydCBjbGFzcyBEaWFsb2dTZXJ2aWNlVHVyblN0YXRlTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucHJpdlR1cm5NYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgU3RhcnRUdXJuKGlkKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZUdXJuTWFwLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJTZXJ2aWNlIGVycm9yOiBUaGVyZSBpcyBhbHJlYWR5IGEgdHVybiB3aXRoIGlkOlwiICsgaWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHR1cm5TdGF0ZSA9IG5ldyBEaWFsb2dTZXJ2aWNlVHVyblN0YXRlKHRoaXMsIGlkKTtcbiAgICAgICAgdGhpcy5wcml2VHVybk1hcC5zZXQoaWQsIHR1cm5TdGF0ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZUdXJuTWFwLmdldChpZCk7XG4gICAgfVxuICAgIEdldFR1cm4oaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlR1cm5NYXAuZ2V0KGlkKTtcbiAgICB9XG4gICAgQ29tcGxldGVUdXJuKGlkKSB7XG4gICAgICAgIGlmICghdGhpcy5wcml2VHVybk1hcC5oYXMoaWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wZXJhdGlvbkVycm9yKFwiU2VydmljZSBlcnJvcjogUmVjZWl2ZWQgdHVybiBlbmQgZm9yIGFuIHVua25vd24gdHVybiBpZDpcIiArIGlkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0dXJuU3RhdGUgPSB0aGlzLnByaXZUdXJuTWFwLmdldChpZCk7XG4gICAgICAgIHR1cm5TdGF0ZS5jb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLnByaXZUdXJuTWFwLmRlbGV0ZShpZCk7XG4gICAgICAgIHJldHVybiB0dXJuU3RhdGU7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EaWFsb2dTZXJ2aWNlVHVyblN0YXRlTWFuYWdlci5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBSZXNwb25zaWJsZSBmb3IgYnVpbGRpbmcgdGhlIG9iamVjdCB0byBiZSBzZW50IHRvIHRoZSBzcGVlY2ggc2VydmljZSB0byBzdXBwb3J0IGR5bmFtaWMgZ3JhbW1hcnMuXG4gKiBAY2xhc3MgRHluYW1pY0dyYW1tYXJCdWlsZGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBEeW5hbWljR3JhbW1hckJ1aWxkZXIge1xuICAgIC8vIEFkZHMgb25lIG1vcmUgcmVmZXJlbmNlIHBocmFzZXMgdG8gdGhlIGR5bmFtaWMgZ3JhbW1hciB0byBzZW5kLlxuICAgIC8vIEFsbCBhZGRlZCBwaHJhc2VzIGFyZSBnZW5lcmljIHBocmFzZXMuXG4gICAgYWRkUGhyYXNlKHBocmFzZSkge1xuICAgICAgICBpZiAoIXRoaXMucHJpdlBocmFzZXMpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdlBocmFzZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGhyYXNlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdlBocmFzZXMgPSB0aGlzLnByaXZQaHJhc2VzLmNvbmNhdChwaHJhc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcml2UGhyYXNlcy5wdXNoKHBocmFzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ2xlYXJzIGFsbCBwaHJhc2VzIHN0b3JlZCBpbiB0aGUgY3VycmVudCBvYmplY3QuXG4gICAgY2xlYXJQaHJhc2VzKCkge1xuICAgICAgICB0aGlzLnByaXZQaHJhc2VzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBBZGRzIG9uZSBvciBtb3JlIHJlZmVyZW5jZSBncmFtbWFycyB0byB0aGUgY3VycmVudCBncmFtbWFyLlxuICAgIGFkZFJlZmVyZW5jZUdyYW1tYXIoZ3JhbW1hcikge1xuICAgICAgICBpZiAoIXRoaXMucHJpdkdyYW1tYXJzKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZHcmFtbWFycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncmFtbWFyIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkdyYW1tYXJzID0gdGhpcy5wcml2R3JhbW1hcnMuY29uY2F0KGdyYW1tYXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcml2R3JhbW1hcnMucHVzaChncmFtbWFyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBjbGVhcnMgYWxsIGdyYW1tYXJzIHN0b3JlZCBvbiB0aGUgcmVjb2duaXplci5cbiAgICBjbGVhckdyYW1tYXJzKCkge1xuICAgICAgICB0aGlzLnByaXZHcmFtbWFycyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gR2VuZXJhdGVzIGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGR5bmFtaWMgZ3JhbW1hciB1c2VkIGJ5IHRoZSBTcGVlY2ggU2VydmljZS5cbiAgICAvLyBUaGlzIGlzIGRvbmUgYnkgYnVpbGRpbmcgYW4gb2JqZWN0IHdpdGggdGhlIGNvcnJlY3QgbGF5b3V0IGJhc2VkIG9uIHRoZSBwaHJhc2VzIGFuZCByZWZlcmVuY2UgZ3JhbW1hcnMgYWRkZWQgdG8gdGhpcyBpbnN0YW5jZVxuICAgIC8vIG9mIGEgRHluYW1pY0dyYW1tYXJCdWlsZGVyXG4gICAgZ2VuZXJhdGVHcmFtbWFyT2JqZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5wcml2R3JhbW1hcnMgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnByaXZQaHJhc2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmV0T2JqID0ge307XG4gICAgICAgIHJldE9iai5SZWZlcmVuY2VHcmFtbWFycyA9IHRoaXMucHJpdkdyYW1tYXJzO1xuICAgICAgICBpZiAodW5kZWZpbmVkICE9PSB0aGlzLnByaXZQaHJhc2VzICYmIDAgIT09IHRoaXMucHJpdlBocmFzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCByZXRQaHJhc2VzID0gW107XG4gICAgICAgICAgICB0aGlzLnByaXZQaHJhc2VzLmZvckVhY2goKHZhbHVlLCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgICAgICAgICByZXRQaHJhc2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBUZXh0OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0T2JqLkdyb3VwcyA9IFt7IFR5cGU6IFwiR2VuZXJpY1wiLCBJdGVtczogcmV0UGhyYXNlcyB9XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0T2JqO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHluYW1pY0dyYW1tYXJCdWlsZGVyLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBDYW5jZWxsYXRpb25FcnJvckNvZGUsIENhbmNlbGxhdGlvblJlYXNvbiwgUmVzdWx0UmVhc29uIH0gZnJvbSBcIi4uL3Nkay9FeHBvcnRzXCI7XG5pbXBvcnQgeyBSZWNvZ25pdGlvblN0YXR1cyB9IGZyb20gXCIuL0V4cG9ydHNcIjtcbmV4cG9ydCBjbGFzcyBFbnVtVHJhbnNsYXRpb24ge1xuICAgIHN0YXRpYyBpbXBsVHJhbnNsYXRlUmVjb2duaXRpb25SZXN1bHQocmVjb2duaXRpb25TdGF0dXMpIHtcbiAgICAgICAgbGV0IHJlYXNvbiA9IFJlc3VsdFJlYXNvbi5DYW5jZWxlZDtcbiAgICAgICAgc3dpdGNoIChyZWNvZ25pdGlvblN0YXR1cykge1xuICAgICAgICAgICAgY2FzZSBSZWNvZ25pdGlvblN0YXR1cy5TdWNjZXNzOlxuICAgICAgICAgICAgICAgIHJlYXNvbiA9IFJlc3VsdFJlYXNvbi5SZWNvZ25pemVkU3BlZWNoO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBSZWNvZ25pdGlvblN0YXR1cy5Ob01hdGNoOlxuICAgICAgICAgICAgY2FzZSBSZWNvZ25pdGlvblN0YXR1cy5Jbml0aWFsU2lsZW5jZVRpbWVvdXQ6XG4gICAgICAgICAgICBjYXNlIFJlY29nbml0aW9uU3RhdHVzLkJhYmJsZVRpbWVvdXQ6XG4gICAgICAgICAgICBjYXNlIFJlY29nbml0aW9uU3RhdHVzLkVuZE9mRGljdGF0aW9uOlxuICAgICAgICAgICAgICAgIHJlYXNvbiA9IFJlc3VsdFJlYXNvbi5Ob01hdGNoO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBSZWNvZ25pdGlvblN0YXR1cy5FcnJvcjpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVhc29uID0gUmVzdWx0UmVhc29uLkNhbmNlbGVkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWFzb247XG4gICAgfVxuICAgIHN0YXRpYyBpbXBsVHJhbnNsYXRlQ2FuY2VsUmVzdWx0KHJlY29nbml0aW9uU3RhdHVzKSB7XG4gICAgICAgIGxldCByZWFzb24gPSBDYW5jZWxsYXRpb25SZWFzb24uRW5kT2ZTdHJlYW07XG4gICAgICAgIHN3aXRjaCAocmVjb2duaXRpb25TdGF0dXMpIHtcbiAgICAgICAgICAgIGNhc2UgUmVjb2duaXRpb25TdGF0dXMuU3VjY2VzczpcbiAgICAgICAgICAgIGNhc2UgUmVjb2duaXRpb25TdGF0dXMuRW5kT2ZEaWN0YXRpb246XG4gICAgICAgICAgICBjYXNlIFJlY29nbml0aW9uU3RhdHVzLk5vTWF0Y2g6XG4gICAgICAgICAgICAgICAgcmVhc29uID0gQ2FuY2VsbGF0aW9uUmVhc29uLkVuZE9mU3RyZWFtO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBSZWNvZ25pdGlvblN0YXR1cy5Jbml0aWFsU2lsZW5jZVRpbWVvdXQ6XG4gICAgICAgICAgICBjYXNlIFJlY29nbml0aW9uU3RhdHVzLkJhYmJsZVRpbWVvdXQ6XG4gICAgICAgICAgICBjYXNlIFJlY29nbml0aW9uU3RhdHVzLkVycm9yOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZWFzb24gPSBDYW5jZWxsYXRpb25SZWFzb24uRXJyb3I7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlYXNvbjtcbiAgICB9XG4gICAgc3RhdGljIGltcGxUcmFuc2xhdGVDYW5jZWxFcnJvckNvZGUocmVjb2duaXRpb25TdGF0dXMpIHtcbiAgICAgICAgbGV0IHJlYXNvbiA9IENhbmNlbGxhdGlvbkVycm9yQ29kZS5Ob0Vycm9yO1xuICAgICAgICBzd2l0Y2ggKHJlY29nbml0aW9uU3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIFJlY29nbml0aW9uU3RhdHVzLkVycm9yOlxuICAgICAgICAgICAgICAgIHJlYXNvbiA9IENhbmNlbGxhdGlvbkVycm9yQ29kZS5TZXJ2aWNlRXJyb3I7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFJlY29nbml0aW9uU3RhdHVzLlRvb01hbnlSZXF1ZXN0czpcbiAgICAgICAgICAgICAgICByZWFzb24gPSBDYW5jZWxsYXRpb25FcnJvckNvZGUuVG9vTWFueVJlcXVlc3RzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZWFzb24gPSBDYW5jZWxsYXRpb25FcnJvckNvZGUuTm9FcnJvcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVhc29uO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW51bVRyYW5zbGF0aW9uLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLyBNYWtlIHN1cmUgbm90IHRvIGV4cG9ydCBpbnRlcm5hbCBtb2R1bGVzLlxuLy9cbmV4cG9ydCAqIGZyb20gXCIuL0NvZ25pdGl2ZVN1YnNjcmlwdGlvbktleUF1dGhlbnRpY2F0aW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9Db2duaXRpdmVUb2tlbkF1dGhlbnRpY2F0aW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9JQXV0aGVudGljYXRpb25cIjtcbmV4cG9ydCAqIGZyb20gXCIuL0ludGVudENvbm5lY3Rpb25GYWN0b3J5XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9SZWNvZ25pdGlvbkV2ZW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2VydmljZVJlY29nbml6ZXJCYXNlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9SZWNvZ25pemVyQ29uZmlnXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9XZWJzb2NrZXRNZXNzYWdlRm9ybWF0dGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TcGVlY2hDb25uZWN0aW9uRmFjdG9yeVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vVHJhbnNsYXRpb25Db25uZWN0aW9uRmFjdG9yeVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vRW51bVRyYW5zbGF0aW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TZXJ2aWNlTWVzc2FnZXMvRW51bXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1NlcnZpY2VNZXNzYWdlcy9UcmFuc2xhdGlvblN5bnRoZXNpc0VuZFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2VydmljZU1lc3NhZ2VzL1RyYW5zbGF0aW9uSHlwb3RoZXNpc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2VydmljZU1lc3NhZ2VzL1RyYW5zbGF0aW9uUGhyYXNlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9UcmFuc2xhdGlvblNlcnZpY2VSZWNvZ25pemVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TZXJ2aWNlTWVzc2FnZXMvU3BlZWNoRGV0ZWN0ZWRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1NlcnZpY2VNZXNzYWdlcy9TcGVlY2hIeXBvdGhlc2lzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TcGVlY2hTZXJ2aWNlUmVjb2duaXplclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2VydmljZU1lc3NhZ2VzL0RldGFpbGVkU3BlZWNoUGhyYXNlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TZXJ2aWNlTWVzc2FnZXMvU2ltcGxlU3BlZWNoUGhyYXNlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9BZGRlZExtSW50ZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9JbnRlbnRTZXJ2aWNlUmVjb2duaXplclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2VydmljZU1lc3NhZ2VzL0ludGVudFJlc3BvbnNlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9SZXF1ZXN0U2Vzc2lvblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU3BlZWNoQ29udGV4dFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vRHluYW1pY0dyYW1tYXJCdWlsZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9EaWFsb2dTZXJ2aWNlQWRhcHRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vQWdlbnRDb25maWdcIjtcbmV4cG9ydCBjb25zdCBPdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUgPSBcIk91dHB1dEZvcm1hdFwiO1xuZXhwb3J0IGNvbnN0IENhbmNlbGxhdGlvbkVycm9yQ29kZVByb3BlcnR5TmFtZSA9IFwiQ2FuY2VsbGF0aW9uRXJyb3JDb2RlXCI7XG5leHBvcnQgY29uc3QgU2VydmljZVByb3BlcnRpZXNQcm9wZXJ0eU5hbWUgPSBcIlNlcnZpY2VQcm9wZXJ0aWVzXCI7XG5leHBvcnQgY29uc3QgRm9yY2VEaWN0YXRpb25Qcm9wZXJ0eU5hbWUgPSBcIkZvcmNlRGljYXRpb25cIjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXhwb3J0cy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IGNsYXNzIEF1dGhJbmZvIHtcbiAgICBjb25zdHJ1Y3RvcihoZWFkZXJOYW1lLCB0b2tlbikge1xuICAgICAgICB0aGlzLnByaXZIZWFkZXJOYW1lID0gaGVhZGVyTmFtZTtcbiAgICAgICAgdGhpcy5wcml2VG9rZW4gPSB0b2tlbjtcbiAgICB9XG4gICAgZ2V0IGhlYWRlck5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZIZWFkZXJOYW1lO1xuICAgIH1cbiAgICBnZXQgdG9rZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZUb2tlbjtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlBdXRoZW50aWNhdGlvbi5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUHJveHlJbmZvLCBXZWJzb2NrZXRDb25uZWN0aW9uLCB9IGZyb20gXCIuLi9jb21tb24uYnJvd3Nlci9FeHBvcnRzXCI7XG5pbXBvcnQgeyBQcm9wZXJ0eUlkIH0gZnJvbSBcIi4uL3Nkay9FeHBvcnRzXCI7XG5pbXBvcnQgeyBDb25uZWN0aW9uRmFjdG9yeUJhc2UgfSBmcm9tIFwiLi9Db25uZWN0aW9uRmFjdG9yeUJhc2VcIjtcbmltcG9ydCB7IFdlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIsIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuY29uc3QgVGVzdEhvb2tzUGFyYW1OYW1lID0gXCJ0ZXN0aG9va3NcIjtcbmNvbnN0IENvbm5lY3Rpb25JZEhlYWRlciA9IFwiWC1Db25uZWN0aW9uSWRcIjtcbmV4cG9ydCBjbGFzcyBJbnRlbnRDb25uZWN0aW9uRmFjdG9yeSBleHRlbmRzIENvbm5lY3Rpb25GYWN0b3J5QmFzZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY3JlYXRlID0gKGNvbmZpZywgYXV0aEluZm8sIGNvbm5lY3Rpb25JZCkgPT4ge1xuICAgICAgICAgICAgbGV0IGVuZHBvaW50ID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludCk7XG4gICAgICAgICAgICBpZiAoIWVuZHBvaW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVnaW9uID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9JbnRlbnRSZWdpb24pO1xuICAgICAgICAgICAgICAgIGVuZHBvaW50ID0gXCJ3c3M6Ly9zcGVlY2gucGxhdGZvcm0uYmluZy5jb20vc3BlZWNoL1wiICsgdGhpcy5nZXRTcGVlY2hSZWdpb25Gcm9tSW50ZW50UmVnaW9uKHJlZ2lvbikgKyBcIi9yZWNvZ25pdGlvbi9pbnRlcmFjdGl2ZS9jb2duaXRpdmVzZXJ2aWNlcy92MVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcInNpbXBsZVwiLFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zZXRDb21tb25VcmxQYXJhbXMoY29uZmlnLCBxdWVyeVBhcmFtcywgZW5kcG9pbnQpO1xuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgaGVhZGVyc1thdXRoSW5mby5oZWFkZXJOYW1lXSA9IGF1dGhJbmZvLnRva2VuO1xuICAgICAgICAgICAgaGVhZGVyc1tDb25uZWN0aW9uSWRIZWFkZXJdID0gY29ubmVjdGlvbklkO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXZWJzb2NrZXRDb25uZWN0aW9uKGVuZHBvaW50LCBxdWVyeVBhcmFtcywgaGVhZGVycywgbmV3IFdlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIoKSwgUHJveHlJbmZvLmZyb21SZWNvZ25pemVyQ29uZmlnKGNvbmZpZyksIGNvbm5lY3Rpb25JZCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFNwZWVjaFJlZ2lvbkZyb21JbnRlbnRSZWdpb24oaW50ZW50UmVnaW9uKSB7XG4gICAgICAgIHN3aXRjaCAoaW50ZW50UmVnaW9uKSB7XG4gICAgICAgICAgICBjYXNlIFwiV2VzdCBVU1wiOlxuICAgICAgICAgICAgY2FzZSBcIlVTIFdlc3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ3ZXN0dXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1c3dlc3RcIjtcbiAgICAgICAgICAgIGNhc2UgXCJXZXN0IFVTIDJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJVUyBXZXN0IDJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ3ZXN0dXMyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidXN3ZXN0MlwiO1xuICAgICAgICAgICAgY2FzZSBcIlNvdXRoIENlbnRyYWwgVVNcIjpcbiAgICAgICAgICAgIGNhc2UgXCJVUyBTb3V0aCBDZW50cmFsXCI6XG4gICAgICAgICAgICBjYXNlIFwic291dGhjZW50cmFsdXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1c3NvdXRoY2VudHJhbFwiO1xuICAgICAgICAgICAgY2FzZSBcIldlc3QgQ2VudHJhbCBVU1wiOlxuICAgICAgICAgICAgY2FzZSBcIlVTIFdlc3QgQ2VudHJhbFwiOlxuICAgICAgICAgICAgY2FzZSBcIndlc3RjZW50cmFsdXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1c3dlc3RjZW50cmFsXCI7XG4gICAgICAgICAgICBjYXNlIFwiRWFzdCBVU1wiOlxuICAgICAgICAgICAgY2FzZSBcIlVTIEVhc3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJlYXN0dXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1c2Vhc3RcIjtcbiAgICAgICAgICAgIGNhc2UgXCJFYXN0IFVTIDJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJVUyBFYXN0IDJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJlYXN0dXMyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidXNlYXN0MlwiO1xuICAgICAgICAgICAgY2FzZSBcIldlc3QgRXVyb3BlXCI6XG4gICAgICAgICAgICBjYXNlIFwiRXVyb3BlIFdlc3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ3ZXN0ZXVyb3BlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZXVyb3Bld2VzdFwiO1xuICAgICAgICAgICAgY2FzZSBcIk5vcnRoIEV1cm9wZVwiOlxuICAgICAgICAgICAgY2FzZSBcIkV1cm9wZSBOb3J0aFwiOlxuICAgICAgICAgICAgY2FzZSBcIm5vcnRoZXVyb3BlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZXVyb3Blbm9ydGhcIjtcbiAgICAgICAgICAgIGNhc2UgXCJCcmF6aWwgU291dGhcIjpcbiAgICAgICAgICAgIGNhc2UgXCJTb3V0aCBCcmF6aWxcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzb3V0aGJyYXppbFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImJyYXppbHNvdXRoXCI7XG4gICAgICAgICAgICBjYXNlIFwiQXVzdHJhbGlhIEVhc3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJFYXN0IEF1c3RyYWxpYVwiOlxuICAgICAgICAgICAgY2FzZSBcImVhc3RhdXN0cmFsaWFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhdXN0cmFsaWFlYXN0XCI7XG4gICAgICAgICAgICBjYXNlIFwiU291dGhlYXN0IEFzaWFcIjpcbiAgICAgICAgICAgIGNhc2UgXCJBc2lhIFNvdXRoZWFzdFwiOlxuICAgICAgICAgICAgY2FzZSBcInNvdXRoZWFzdGFzaWFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhc2lhc291dGhlYXN0XCI7XG4gICAgICAgICAgICBjYXNlIFwiRWFzdCBBc2lhXCI6XG4gICAgICAgICAgICBjYXNlIFwiQXNpYSBFYXN0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZWFzdGFzaWFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhc2lhZWFzdFwiO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gaW50ZW50UmVnaW9uO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbnRlbnRDb25uZWN0aW9uRmFjdG9yeS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgTWVzc2FnZVR5cGUsIH0gZnJvbSBcIi4uL2NvbW1vbi9FeHBvcnRzXCI7XG5pbXBvcnQgeyBDYW5jZWxsYXRpb25FcnJvckNvZGUsIEludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MsIEludGVudFJlY29nbml0aW9uRXZlbnRBcmdzLCBJbnRlbnRSZWNvZ25pdGlvblJlc3VsdCwgUHJvcGVydHlDb2xsZWN0aW9uLCBQcm9wZXJ0eUlkLCBSZXN1bHRSZWFzb24sIH0gZnJvbSBcIi4uL3Nkay9FeHBvcnRzXCI7XG5pbXBvcnQgeyBDYW5jZWxsYXRpb25FcnJvckNvZGVQcm9wZXJ0eU5hbWUsIEVudW1UcmFuc2xhdGlvbiwgSW50ZW50UmVzcG9uc2UsIFNlcnZpY2VSZWNvZ25pemVyQmFzZSwgU2ltcGxlU3BlZWNoUGhyYXNlLCBTcGVlY2hIeXBvdGhlc2lzLCB9IGZyb20gXCIuL0V4cG9ydHNcIjtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIEludGVudFNlcnZpY2VSZWNvZ25pemVyIGV4dGVuZHMgU2VydmljZVJlY29nbml6ZXJCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcihhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvU291cmNlLCByZWNvZ25pemVyQ29uZmlnLCByZWNvZ25pemVyKSB7XG4gICAgICAgIHN1cGVyKGF1dGhlbnRpY2F0aW9uLCBjb25uZWN0aW9uRmFjdG9yeSwgYXVkaW9Tb3VyY2UsIHJlY29nbml6ZXJDb25maWcsIHJlY29nbml6ZXIpO1xuICAgICAgICB0aGlzLnByaXZJbnRlbnRSZWNvZ25pemVyID0gcmVjb2duaXplcjtcbiAgICAgICAgdGhpcy5wcml2SW50ZW50RGF0YVNlbnQgPSBmYWxzZTtcbiAgICB9XG4gICAgc2V0SW50ZW50cyhhZGRlZEludGVudHMsIHVtYnJlbGxhSW50ZW50KSB7XG4gICAgICAgIHRoaXMucHJpdkFkZGVkTG1JbnRlbnRzID0gYWRkZWRJbnRlbnRzO1xuICAgICAgICB0aGlzLnByaXZVbWJyZWxsYUludGVudCA9IHVtYnJlbGxhSW50ZW50O1xuICAgICAgICB0aGlzLnByaXZJbnRlbnREYXRhU2VudCA9IHRydWU7XG4gICAgfVxuICAgIHByb2Nlc3NUeXBlU3BlY2lmaWNNZXNzYWdlcyhjb25uZWN0aW9uTWVzc2FnZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxCYWNrKSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGxldCBldjtcbiAgICAgICAgY29uc3QgcmVzdWx0UHJvcHMgPSBuZXcgUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgICAgIGlmIChjb25uZWN0aW9uTWVzc2FnZS5tZXNzYWdlVHlwZSA9PT0gTWVzc2FnZVR5cGUuVGV4dCkge1xuICAgICAgICAgICAgcmVzdWx0UHJvcHMuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlUmVzcG9uc2VfSnNvblJlc3VsdCwgY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoY29ubmVjdGlvbk1lc3NhZ2UucGF0aC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBjYXNlIFwic3BlZWNoLmh5cG90aGVzaXNcIjpcbiAgICAgICAgICAgICAgICBjb25zdCBzcGVlY2hIeXBvdGhlc2lzID0gU3BlZWNoSHlwb3RoZXNpcy5mcm9tSlNPTihjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEludGVudFJlY29nbml0aW9uUmVzdWx0KHVuZGVmaW5lZCwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBSZXN1bHRSZWFzb24uUmVjb2duaXppbmdJbnRlbnQsIHNwZWVjaEh5cG90aGVzaXMuVGV4dCwgc3BlZWNoSHlwb3RoZXNpcy5EdXJhdGlvbiwgc3BlZWNoSHlwb3RoZXNpcy5PZmZzZXQgKyB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0LCB1bmRlZmluZWQsIGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5LCByZXN1bHRQcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ub25IeXBvdGhlc2lzKHJlc3VsdC5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIGV2ID0gbmV3IEludGVudFJlY29nbml0aW9uRXZlbnRBcmdzKHJlc3VsdCwgc3BlZWNoSHlwb3RoZXNpcy5PZmZzZXQgKyB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0LCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdkludGVudFJlY29nbml6ZXIucmVjb2duaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkludGVudFJlY29nbml6ZXIucmVjb2duaXppbmcodGhpcy5wcml2SW50ZW50UmVjb2duaXplciwgZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBnb2luZyB0byBsZXQgZXJyb3JzIGluIHRoZSBldmVudCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzcGVlY2gucGhyYXNlXCI6XG4gICAgICAgICAgICAgICAgY29uc3Qgc2ltcGxlID0gU2ltcGxlU3BlZWNoUGhyYXNlLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgSW50ZW50UmVjb2duaXRpb25SZXN1bHQodW5kZWZpbmVkLCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5yZXF1ZXN0SWQsIEVudW1UcmFuc2xhdGlvbi5pbXBsVHJhbnNsYXRlUmVjb2duaXRpb25SZXN1bHQoc2ltcGxlLlJlY29nbml0aW9uU3RhdHVzKSwgc2ltcGxlLkRpc3BsYXlUZXh0LCBzaW1wbGUuRHVyYXRpb24sIHNpbXBsZS5PZmZzZXQgKyB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0LCB1bmRlZmluZWQsIGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5LCByZXN1bHRQcm9wcyk7XG4gICAgICAgICAgICAgICAgZXYgPSBuZXcgSW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MocmVzdWx0LCByZXN1bHQub2Zmc2V0LCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbmRFdmVudCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2SW50ZW50UmVjb2duaXplci5yZWNvZ25pemVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkludGVudFJlY29nbml6ZXIucmVjb2duaXplZCh0aGlzLnByaXZJbnRlbnRSZWNvZ25pemVyLCBldik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBnb2luZyB0byBsZXQgZXJyb3JzIGluIHRoZSBldmVudCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpcCB0aGluZ3MgdXAuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVwb3J0IHJlc3VsdCB0byBwcm9taXNlLlxuICAgICAgICAgICAgICAgICAgICBpZiAoISFzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIWVycm9yQ2FsbEJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsQmFjayhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGludm9rZSB0aGUgY2FsbCBiYWNrIG9uY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaWYgaXQncyBzdWNjZXNzZnVsIGRvbid0IGludm9rZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVycm9yIGFmdGVyIHRoYXQuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxCYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBJZiBpbnRlbnQgZGF0YSB3YXMgc2VudCwgdGhlIHRlcm1pbmFsIHJlc3VsdCBmb3IgdGhpcyByZWNvZ25pemVyIGlzIGFuIGludGVudCBiZWluZyBmb3VuZC5cbiAgICAgICAgICAgICAgICAvLyBJZiBubyBpbnRlbnQgZGF0YSB3YXMgc2VudCwgdGhlIHRlcm1pbmFsIGV2ZW50IGlzIHNwZWVjaCByZWNvZ25pdGlvbiBiZWluZyBzdWNjZXNzZnVsLlxuICAgICAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gdGhpcy5wcml2SW50ZW50RGF0YVNlbnQgfHwgUmVzdWx0UmVhc29uLk5vTWF0Y2ggPT09IGV2LnJlc3VsdC5yZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW5jZSB0aGUgYnVmZmVycy5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ub25QaHJhc2VSZWNvZ25pemVkKGV2Lm9mZnNldCArIGV2LnJlc3VsdC5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRFdmVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3F1aXJyZWwgYXdheSB0aGUgYXJncywgd2hlbiB0aGUgcmVzcG9uc2UgZXZlbnQgYXJyaXZlcyBpdCB3aWxsIGJ1aWxkIHVwb24gdGhlbVxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgdGhlbiByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2UGVuZGluZ0ludGVudEFyZ3MgPSBldjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicmVzcG9uc2VcIjpcbiAgICAgICAgICAgICAgICAvLyBSZXNwb25zZSBmcm9tIExVSVNcbiAgICAgICAgICAgICAgICBldiA9IHRoaXMucHJpdlBlbmRpbmdJbnRlbnRBcmdzO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlBlbmRpbmdJbnRlbnRBcmdzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmICh1bmRlZmluZWQgPT09IGV2KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcIlwiID09PSBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBjb25kaXRpb24gaGFwcGVucyBpZiB0aGVyZSBpcyBub3RoaW5nIGJ1dCBzaWxlbmNlIGluIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXVkaW8gc2VudCB0byB0aGUgc2VydmljZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBPZGQuLi4gTm90IHN1cmUgdGhpcyBjYW4gaGFwcGVuXG4gICAgICAgICAgICAgICAgICAgIGV2ID0gbmV3IEludGVudFJlY29nbml0aW9uRXZlbnRBcmdzKG5ldyBJbnRlbnRSZWNvZ25pdGlvblJlc3VsdCgpLCAwIC8qVE9ETyovLCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlbnRSZXNwb25zZSA9IEludGVudFJlc3BvbnNlLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICAvLyBJZiBMVUlTIGRpZG4ndCByZXR1cm4gYW55dGhpbmcsIHNlbmQgdGhlIGV4aXN0aW5nIGV2ZW50LCBlbHNlXG4gICAgICAgICAgICAgICAgLy8gbW9kaWZ5IGl0IHRvIHNob3cgdGhlIG1hdGNoLlxuICAgICAgICAgICAgICAgIC8vIFNlZSBpZiB0aGUgaW50ZW50IGZvdW5kIGlzIGluIHRoZSBsaXN0IG9mIGludGVudHMgYXNrZWQgZm9yLlxuICAgICAgICAgICAgICAgIGxldCBhZGRlZEludGVudCA9IHRoaXMucHJpdkFkZGVkTG1JbnRlbnRzW2ludGVudFJlc3BvbnNlLnRvcFNjb3JpbmdJbnRlbnQuaW50ZW50XTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcml2VW1icmVsbGFJbnRlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRlZEludGVudCA9IHRoaXMucHJpdlVtYnJlbGxhSW50ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gaW50ZW50UmVzcG9uc2UgJiYgYWRkZWRJbnRlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlbnRJZCA9IGFkZGVkSW50ZW50LmludGVudE5hbWUgPT09IHVuZGVmaW5lZCA/IGludGVudFJlc3BvbnNlLnRvcFNjb3JpbmdJbnRlbnQuaW50ZW50IDogYWRkZWRJbnRlbnQuaW50ZW50TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlYXNvbiA9IGV2LnJlc3VsdC5yZWFzb247XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bmRlZmluZWQgIT09IGludGVudElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb24gPSBSZXN1bHRSZWFzb24uUmVjb2duaXplZEludGVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUsIHByb3BlcnRpZXMgaXMgc2V0LlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gKHVuZGVmaW5lZCAhPT0gZXYucmVzdWx0LnByb3BlcnRpZXMpID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnJlc3VsdC5wcm9wZXJ0aWVzIDogbmV3IFByb3BlcnR5Q29sbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nU2VydmljZVJlc3BvbnNlX0pzb25SZXN1bHQsIGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICAgICAgZXYgPSBuZXcgSW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MobmV3IEludGVudFJlY29nbml0aW9uUmVzdWx0KGludGVudElkLCBldi5yZXN1bHQucmVzdWx0SWQsIHJlYXNvbiwgZXYucmVzdWx0LnRleHQsIGV2LnJlc3VsdC5kdXJhdGlvbiwgZXYucmVzdWx0Lm9mZnNldCwgZXYucmVzdWx0LmVycm9yRGV0YWlscywgZXYucmVzdWx0Lmpzb24sIHByb3BlcnRpZXMpLCBldi5vZmZzZXQsIGV2LnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uUGhyYXNlUmVjb2duaXplZChldi5vZmZzZXQgKyBldi5yZXN1bHQuZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdkludGVudFJlY29nbml6ZXIucmVjb2duaXplZCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2SW50ZW50UmVjb2duaXplci5yZWNvZ25pemVkKHRoaXMucHJpdkludGVudFJlY29nbml6ZXIsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpcCB0aGluZ3MgdXAuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcmVwb3J0IHJlc3VsdCB0byBwcm9taXNlLlxuICAgICAgICAgICAgICAgIGlmICghIXN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKGV2LnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIWVycm9yQ2FsbEJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxCYWNrKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgaW52b2tlIHRoZSBjYWxsIGJhY2sgb25jZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGlmIGl0J3Mgc3VjY2Vzc2Z1bCBkb24ndCBpbnZva2UgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVycm9yIGFmdGVyIHRoYXQuXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsQmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENhbmNlbHMgcmVjb2duaXRpb24uXG4gICAgY2FuY2VsUmVjb2duaXRpb24oc2Vzc2lvbklkLCByZXF1ZXN0SWQsIGNhbmNlbGxhdGlvblJlYXNvbiwgZXJyb3JDb2RlLCBlcnJvciwgY2FuY2VsUmVjb0NhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgICAgIHByb3BlcnRpZXMuc2V0UHJvcGVydHkoQ2FuY2VsbGF0aW9uRXJyb3JDb2RlUHJvcGVydHlOYW1lLCBDYW5jZWxsYXRpb25FcnJvckNvZGVbZXJyb3JDb2RlXSk7XG4gICAgICAgIGlmICghIXRoaXMucHJpdkludGVudFJlY29nbml6ZXIuY2FuY2VsZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbEV2ZW50ID0gbmV3IEludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MoY2FuY2VsbGF0aW9uUmVhc29uLCBlcnJvciwgZXJyb3JDb2RlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgc2Vzc2lvbklkKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2SW50ZW50UmVjb2duaXplci5jYW5jZWxlZCh0aGlzLnByaXZJbnRlbnRSZWNvZ25pemVyLCBjYW5jZWxFdmVudCk7XG4gICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfYSkgeyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEhY2FuY2VsUmVjb0NhbGxiYWNrKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgSW50ZW50UmVjb2duaXRpb25SZXN1bHQodW5kZWZpbmVkLCAvLyBJbnRlbnQgSWRcbiAgICAgICAgICAgIHJlcXVlc3RJZCwgUmVzdWx0UmVhc29uLkNhbmNlbGVkLCB1bmRlZmluZWQsIC8vIFRleHRcbiAgICAgICAgICAgIHVuZGVmaW5lZCwgLy8gRHJ1YXRpb25cbiAgICAgICAgICAgIHVuZGVmaW5lZCwgLy8gT2Zmc2V0XG4gICAgICAgICAgICBlcnJvciwgdW5kZWZpbmVkLCAvLyBKc29uXG4gICAgICAgICAgICBwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsUmVjb0NhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfYikgeyB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUludGVudFNlcnZpY2VSZWNvZ25pemVyLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQgY2xhc3MgUXVlcnlQYXJhbWV0ZXJOYW1lcyB7XG4gICAgc3RhdGljIGdldCBUZXN0SG9va3NQYXJhbU5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcInRlc3Rob29rc1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IENvbm5lY3Rpb25JZEhlYWRlcigpIHtcbiAgICAgICAgcmV0dXJuIFwiWC1Db25uZWN0aW9uSWRcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldCBEZXBsb3ltZW50SWRQYXJhbU5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcImNpZFwiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IEZvcm1hdFBhcmFtTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiZm9ybWF0XCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTGFuZ3VhZ2VQYXJhbU5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcImxhbmd1YWdlXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgVHJhbnNsYXRpb25Gcm9tUGFyYW1OYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJmcm9tXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgVHJhbnNsYXRpb25Ub1BhcmFtTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwidG9cIjtcbiAgICB9XG4gICAgc3RhdGljIGdldCBQcm9mYW5pZnkoKSB7XG4gICAgICAgIHJldHVybiBcInByb2Zhbml0eVwiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IEVuYWJsZUF1ZGlvTG9nZ2luZygpIHtcbiAgICAgICAgcmV0dXJuIFwic3RvcmVBdWRpb1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IEVuYWJsZVdvcmRMZXZlbFRpbWVzdGFtcHMoKSB7XG4gICAgICAgIHJldHVybiBcIndvcmRMZXZlbFRpbWVzdGFtcHNcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldCBJbml0aWFsU2lsZW5jZVRpbWVvdXRNcygpIHtcbiAgICAgICAgcmV0dXJuIFwiaW5pdGlhbFNpbGVuY2VUaW1lb3V0TXNcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldCBFbmRTaWxlbmNlVGltZW91dE1zKCkge1xuICAgICAgICByZXR1cm4gXCJlbmRTaWxlbmNlVGltZW91dE1zXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgU3RhYmxlSW50ZXJtZWRpYXRlVGhyZXNob2xkKCkge1xuICAgICAgICByZXR1cm4gXCJzdGFibGVJbnRlcm1lZGlhdGVUaHJlc2hvbGRcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldCBTdGFibGVUcmFuc2xhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwic3RhYmxlVHJhbnNsYXRpb25cIjtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1ZXJ5UGFyYW1ldGVyTmFtZXMuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEV2ZW50VHlwZSwgUGxhdGZvcm1FdmVudCB9IGZyb20gXCIuLi9jb21tb24vRXhwb3J0c1wiO1xuZXhwb3J0IGNsYXNzIFNwZWVjaFJlY29nbml0aW9uRXZlbnQgZXh0ZW5kcyBQbGF0Zm9ybUV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihldmVudE5hbWUsIHJlcXVlc3RJZCwgc2Vzc2lvbklkLCBldmVudFR5cGUgPSBFdmVudFR5cGUuSW5mbykge1xuICAgICAgICBzdXBlcihldmVudE5hbWUsIGV2ZW50VHlwZSk7XG4gICAgICAgIHRoaXMucHJpdlJlcXVlc3RJZCA9IHJlcXVlc3RJZDtcbiAgICAgICAgdGhpcy5wcml2U2Vzc2lvbklkID0gc2Vzc2lvbklkO1xuICAgIH1cbiAgICBnZXQgcmVxdWVzdElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVxdWVzdElkO1xuICAgIH1cbiAgICBnZXQgc2Vzc2lvbklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U2Vzc2lvbklkO1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIFJlY29nbml0aW9uVHJpZ2dlcmVkRXZlbnQgZXh0ZW5kcyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihyZXF1ZXN0SWQsIHNlc3Npb25JZCwgYXVkaW9Tb3VyY2VJZCwgYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgc3VwZXIoXCJSZWNvZ25pdGlvblRyaWdnZXJlZEV2ZW50XCIsIHJlcXVlc3RJZCwgc2Vzc2lvbklkKTtcbiAgICAgICAgdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCA9IGF1ZGlvU291cmNlSWQ7XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvTm9kZUlkID0gYXVkaW9Ob2RlSWQ7XG4gICAgfVxuICAgIGdldCBhdWRpb1NvdXJjZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Tb3VyY2VJZDtcbiAgICB9XG4gICAgZ2V0IGF1ZGlvTm9kZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Ob2RlSWQ7XG4gICAgfVxufVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgTGlzdGVuaW5nU3RhcnRlZEV2ZW50IGV4dGVuZHMgU3BlZWNoUmVjb2duaXRpb25FdmVudCB7XG4gICAgY29uc3RydWN0b3IocmVxdWVzdElkLCBzZXNzaW9uSWQsIGF1ZGlvU291cmNlSWQsIGF1ZGlvTm9kZUlkKSB7XG4gICAgICAgIHN1cGVyKFwiTGlzdGVuaW5nU3RhcnRlZEV2ZW50XCIsIHJlcXVlc3RJZCwgc2Vzc2lvbklkKTtcbiAgICAgICAgdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCA9IGF1ZGlvU291cmNlSWQ7XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvTm9kZUlkID0gYXVkaW9Ob2RlSWQ7XG4gICAgfVxuICAgIGdldCBhdWRpb1NvdXJjZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Tb3VyY2VJZDtcbiAgICB9XG4gICAgZ2V0IGF1ZGlvTm9kZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Ob2RlSWQ7XG4gICAgfVxufVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgQ29ubmVjdGluZ1RvU2VydmljZUV2ZW50IGV4dGVuZHMgU3BlZWNoUmVjb2duaXRpb25FdmVudCB7XG4gICAgY29uc3RydWN0b3IocmVxdWVzdElkLCBhdXRoRmV0Y2hFdmVudGlkLCBzZXNzaW9uSWQpIHtcbiAgICAgICAgc3VwZXIoXCJDb25uZWN0aW5nVG9TZXJ2aWNlRXZlbnRcIiwgcmVxdWVzdElkLCBzZXNzaW9uSWQpO1xuICAgICAgICB0aGlzLnByaXZBdXRoRmV0Y2hFdmVudGlkID0gYXV0aEZldGNoRXZlbnRpZDtcbiAgICB9XG4gICAgZ2V0IGF1dGhGZXRjaEV2ZW50aWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZBdXRoRmV0Y2hFdmVudGlkO1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIFJlY29nbml0aW9uU3RhcnRlZEV2ZW50IGV4dGVuZHMgU3BlZWNoUmVjb2duaXRpb25FdmVudCB7XG4gICAgY29uc3RydWN0b3IocmVxdWVzdElkLCBhdWRpb1NvdXJjZUlkLCBhdWRpb05vZGVJZCwgYXV0aEZldGNoRXZlbnRJZCwgc2Vzc2lvbklkKSB7XG4gICAgICAgIHN1cGVyKFwiUmVjb2duaXRpb25TdGFydGVkRXZlbnRcIiwgcmVxdWVzdElkLCBzZXNzaW9uSWQpO1xuICAgICAgICB0aGlzLnByaXZBdWRpb1NvdXJjZUlkID0gYXVkaW9Tb3VyY2VJZDtcbiAgICAgICAgdGhpcy5wcml2QXVkaW9Ob2RlSWQgPSBhdWRpb05vZGVJZDtcbiAgICAgICAgdGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCA9IGF1dGhGZXRjaEV2ZW50SWQ7XG4gICAgfVxuICAgIGdldCBhdWRpb1NvdXJjZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Tb3VyY2VJZDtcbiAgICB9XG4gICAgZ2V0IGF1ZGlvTm9kZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Ob2RlSWQ7XG4gICAgfVxuICAgIGdldCBhdXRoRmV0Y2hFdmVudElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZDtcbiAgICB9XG59XG5leHBvcnQgdmFyIFJlY29nbml0aW9uQ29tcGxldGlvblN0YXR1cztcbihmdW5jdGlvbiAoUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzKSB7XG4gICAgUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1JlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tcIlN1Y2Nlc3NcIl0gPSAwXSA9IFwiU3VjY2Vzc1wiO1xuICAgIFJlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbXCJBdWRpb1NvdXJjZUVycm9yXCJdID0gMV0gPSBcIkF1ZGlvU291cmNlRXJyb3JcIjtcbiAgICBSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1wiQXVkaW9Tb3VyY2VUaW1lb3V0XCJdID0gMl0gPSBcIkF1ZGlvU291cmNlVGltZW91dFwiO1xuICAgIFJlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbXCJBdXRoVG9rZW5GZXRjaEVycm9yXCJdID0gM10gPSBcIkF1dGhUb2tlbkZldGNoRXJyb3JcIjtcbiAgICBSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1wiQXV0aFRva2VuRmV0Y2hUaW1lb3V0XCJdID0gNF0gPSBcIkF1dGhUb2tlbkZldGNoVGltZW91dFwiO1xuICAgIFJlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbXCJVbkF1dGhvcml6ZWRcIl0gPSA1XSA9IFwiVW5BdXRob3JpemVkXCI7XG4gICAgUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1JlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tcIkNvbm5lY3RUaW1lb3V0XCJdID0gNl0gPSBcIkNvbm5lY3RUaW1lb3V0XCI7XG4gICAgUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1JlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tcIkNvbm5lY3RFcnJvclwiXSA9IDddID0gXCJDb25uZWN0RXJyb3JcIjtcbiAgICBSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1wiQ2xpZW50UmVjb2duaXRpb25BY3Rpdml0eVRpbWVvdXRcIl0gPSA4XSA9IFwiQ2xpZW50UmVjb2duaXRpb25BY3Rpdml0eVRpbWVvdXRcIjtcbiAgICBSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1wiVW5rbm93bkVycm9yXCJdID0gOV0gPSBcIlVua25vd25FcnJvclwiO1xufSkoUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzIHx8IChSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXMgPSB7fSkpO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgUmVjb2duaXRpb25FbmRlZEV2ZW50IGV4dGVuZHMgU3BlZWNoUmVjb2duaXRpb25FdmVudCB7XG4gICAgY29uc3RydWN0b3IocmVxdWVzdElkLCBhdWRpb1NvdXJjZUlkLCBhdWRpb05vZGVJZCwgYXV0aEZldGNoRXZlbnRJZCwgc2Vzc2lvbklkLCBzZXJ2aWNlVGFnLCBzdGF0dXMsIGVycm9yKSB7XG4gICAgICAgIHN1cGVyKFwiUmVjb2duaXRpb25FbmRlZEV2ZW50XCIsIHJlcXVlc3RJZCwgc2Vzc2lvbklkLCBzdGF0dXMgPT09IFJlY29nbml0aW9uQ29tcGxldGlvblN0YXR1cy5TdWNjZXNzID8gRXZlbnRUeXBlLkluZm8gOiBFdmVudFR5cGUuRXJyb3IpO1xuICAgICAgICB0aGlzLnByaXZBdWRpb1NvdXJjZUlkID0gYXVkaW9Tb3VyY2VJZDtcbiAgICAgICAgdGhpcy5wcml2QXVkaW9Ob2RlSWQgPSBhdWRpb05vZGVJZDtcbiAgICAgICAgdGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCA9IGF1dGhGZXRjaEV2ZW50SWQ7XG4gICAgICAgIHRoaXMucHJpdlN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgdGhpcy5wcml2RXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5wcml2U2VydmljZVRhZyA9IHNlcnZpY2VUYWc7XG4gICAgfVxuICAgIGdldCBhdWRpb1NvdXJjZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Tb3VyY2VJZDtcbiAgICB9XG4gICAgZ2V0IGF1ZGlvTm9kZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Ob2RlSWQ7XG4gICAgfVxuICAgIGdldCBhdXRoRmV0Y2hFdmVudElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZDtcbiAgICB9XG4gICAgZ2V0IHNlcnZpY2VUYWcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTZXJ2aWNlVGFnO1xuICAgIH1cbiAgICBnZXQgc3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U3RhdHVzO1xuICAgIH1cbiAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZFcnJvcjtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlY29nbml0aW9uRXZlbnRzLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQgdmFyIFJlY29nbml0aW9uTW9kZTtcbihmdW5jdGlvbiAoUmVjb2duaXRpb25Nb2RlKSB7XG4gICAgUmVjb2duaXRpb25Nb2RlW1JlY29nbml0aW9uTW9kZVtcIkludGVyYWN0aXZlXCJdID0gMF0gPSBcIkludGVyYWN0aXZlXCI7XG4gICAgUmVjb2duaXRpb25Nb2RlW1JlY29nbml0aW9uTW9kZVtcIkNvbnZlcnNhdGlvblwiXSA9IDFdID0gXCJDb252ZXJzYXRpb25cIjtcbiAgICBSZWNvZ25pdGlvbk1vZGVbUmVjb2duaXRpb25Nb2RlW1wiRGljdGF0aW9uXCJdID0gMl0gPSBcIkRpY3RhdGlvblwiO1xufSkoUmVjb2duaXRpb25Nb2RlIHx8IChSZWNvZ25pdGlvbk1vZGUgPSB7fSkpO1xuZXhwb3J0IHZhciBTcGVlY2hSZXN1bHRGb3JtYXQ7XG4oZnVuY3Rpb24gKFNwZWVjaFJlc3VsdEZvcm1hdCkge1xuICAgIFNwZWVjaFJlc3VsdEZvcm1hdFtTcGVlY2hSZXN1bHRGb3JtYXRbXCJTaW1wbGVcIl0gPSAwXSA9IFwiU2ltcGxlXCI7XG4gICAgU3BlZWNoUmVzdWx0Rm9ybWF0W1NwZWVjaFJlc3VsdEZvcm1hdFtcIkRldGFpbGVkXCJdID0gMV0gPSBcIkRldGFpbGVkXCI7XG59KShTcGVlY2hSZXN1bHRGb3JtYXQgfHwgKFNwZWVjaFJlc3VsdEZvcm1hdCA9IHt9KSk7XG5leHBvcnQgY2xhc3MgUmVjb2duaXplckNvbmZpZyB7XG4gICAgY29uc3RydWN0b3Ioc3BlZWNoU2VydmljZUNvbmZpZywgcGFyYW1ldGVycykge1xuICAgICAgICB0aGlzLnByaXZSZWNvZ25pdGlvbk1vZGUgPSBSZWNvZ25pdGlvbk1vZGUuSW50ZXJhY3RpdmU7XG4gICAgICAgIHRoaXMucHJpdlNwZWVjaFNlcnZpY2VDb25maWcgPSBzcGVlY2hTZXJ2aWNlQ29uZmlnID8gc3BlZWNoU2VydmljZUNvbmZpZyA6IG5ldyBTcGVlY2hTZXJ2aWNlQ29uZmlnKG5ldyBDb250ZXh0KG51bGwpKTtcbiAgICAgICAgdGhpcy5wcml2UGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgfVxuICAgIGdldCBwYXJhbWV0ZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UGFyYW1ldGVycztcbiAgICB9XG4gICAgZ2V0IHJlY29nbml0aW9uTW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlY29nbml0aW9uTW9kZTtcbiAgICB9XG4gICAgc2V0IHJlY29nbml0aW9uTW9kZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnByaXZSZWNvZ25pdGlvbk1vZGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5wcml2UmVjb2duaXRpb25BY3Rpdml0eVRpbWVvdXQgPSB2YWx1ZSA9PT0gUmVjb2duaXRpb25Nb2RlLkludGVyYWN0aXZlID8gODAwMCA6IDI1MDAwO1xuICAgICAgICB0aGlzLnByaXZTcGVlY2hTZXJ2aWNlQ29uZmlnLlJlY29nbml0aW9uID0gUmVjb2duaXRpb25Nb2RlW3ZhbHVlXTtcbiAgICB9XG4gICAgZ2V0IFNwZWVjaFNlcnZpY2VDb25maWcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hTZXJ2aWNlQ29uZmlnO1xuICAgIH1cbiAgICBnZXQgcmVjb2duaXRpb25BY3Rpdml0eVRpbWVvdXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZWNvZ25pdGlvbkFjdGl2aXR5VGltZW91dDtcbiAgICB9XG4gICAgZ2V0IGlzQ29udGludW91c1JlY29nbml0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVjb2duaXRpb25Nb2RlICE9PSBSZWNvZ25pdGlvbk1vZGUuSW50ZXJhY3RpdmU7XG4gICAgfVxufVxuLy8gVGhlIGNvbmZpZyBpcyBzZXJpYWxpemVkIGFuZCBzZW50IGFzIHRoZSBTcGVlY2guQ29uZmlnXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBTcGVlY2hTZXJ2aWNlQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuc2VyaWFsaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGsgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudFtrICYmIGsuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBrLnN1YnN0cmluZygxKV0gPSB2YWx1ZVtrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbiAgICBnZXQgQ29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dDtcbiAgICB9XG4gICAgZ2V0IFJlY29nbml0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWNvZ25pdGlvbjtcbiAgICB9XG4gICAgc2V0IFJlY29nbml0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucmVjb2duaXRpb24gPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKG9zKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtID0gbmV3IFN5c3RlbSgpO1xuICAgICAgICB0aGlzLm9zID0gb3M7XG4gICAgfVxufVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgU3lzdGVtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gTm90ZTogYmVsb3cgd2lsbCBiZSBwYXRjaGVkIGZvciBvZmZpY2lhbCBidWlsZHMuXG4gICAgICAgIGNvbnN0IFNQRUVDSFNES19DTElFTlRTREtfVkVSU0lPTiA9IFwiMS42LjAtYWxwaGEuMC4xXCI7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiU3BlZWNoU0RLXCI7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IFNQRUVDSFNES19DTElFTlRTREtfVkVSU0lPTjtcbiAgICAgICAgdGhpcy5idWlsZCA9IFwiSmF2YVNjcmlwdFwiO1xuICAgICAgICB0aGlzLmxhbmcgPSBcIkphdmFTY3JpcHRcIjtcbiAgICB9XG59XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBPUyB7XG4gICAgY29uc3RydWN0b3IocGxhdGZvcm0sIG5hbWUsIHZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybSA9IHBsYXRmb3JtO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIERldmljZSB7XG4gICAgY29uc3RydWN0b3IobWFudWZhY3R1cmVyLCBtb2RlbCwgdmVyc2lvbikge1xuICAgICAgICB0aGlzLm1hbnVmYWN0dXJlciA9IG1hbnVmYWN0dXJlcjtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIH1cbn1cbmV4cG9ydCB2YXIgY29ubmVjdGl2aXR5O1xuKGZ1bmN0aW9uIChjb25uZWN0aXZpdHkpIHtcbiAgICBjb25uZWN0aXZpdHlbXCJCbHVldG9vdGhcIl0gPSBcIkJsdWV0b290aFwiO1xuICAgIGNvbm5lY3Rpdml0eVtcIldpcmVkXCJdID0gXCJXaXJlZFwiO1xuICAgIGNvbm5lY3Rpdml0eVtcIldpRmlcIl0gPSBcIldpRmlcIjtcbiAgICBjb25uZWN0aXZpdHlbXCJDZWxsdWxhclwiXSA9IFwiQ2VsbHVsYXJcIjtcbiAgICBjb25uZWN0aXZpdHlbXCJJbkJ1aWx0XCJdID0gXCJJbkJ1aWx0XCI7XG4gICAgY29ubmVjdGl2aXR5W1wiVW5rbm93blwiXSA9IFwiVW5rbm93blwiO1xufSkoY29ubmVjdGl2aXR5IHx8IChjb25uZWN0aXZpdHkgPSB7fSkpO1xuZXhwb3J0IHZhciB0eXBlO1xuKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdHlwZVtcIlBob25lXCJdID0gXCJQaG9uZVwiO1xuICAgIHR5cGVbXCJTcGVha2VyXCJdID0gXCJTcGVha2VyXCI7XG4gICAgdHlwZVtcIkNhclwiXSA9IFwiQ2FyXCI7XG4gICAgdHlwZVtcIkhlYWRzZXRcIl0gPSBcIkhlYWRzZXRcIjtcbiAgICB0eXBlW1wiVGhlcm1vc3RhdFwiXSA9IFwiVGhlcm1vc3RhdFwiO1xuICAgIHR5cGVbXCJNaWNyb3Bob25lc1wiXSA9IFwiTWljcm9waG9uZXNcIjtcbiAgICB0eXBlW1wiRGVza3Bob25lXCJdID0gXCJEZXNrcGhvbmVcIjtcbiAgICB0eXBlW1wiUmVtb3RlQ29udHJvbFwiXSA9IFwiUmVtb3RlQ29udHJvbFwiO1xuICAgIHR5cGVbXCJVbmtub3duXCJdID0gXCJVbmtub3duXCI7XG4gICAgdHlwZVtcIkZpbGVcIl0gPSBcIkZpbGVcIjtcbiAgICB0eXBlW1wiU3RyZWFtXCJdID0gXCJTdHJlYW1cIjtcbn0pKHR5cGUgfHwgKHR5cGUgPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWNvZ25pemVyQ29uZmlnLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVOb0Rhc2hHdWlkLCBEZWZlcnJlZCwgRXZlbnRzLCB9IGZyb20gXCIuLi9jb21tb24vRXhwb3J0c1wiO1xuaW1wb3J0IHsgQ29ubmVjdGluZ1RvU2VydmljZUV2ZW50LCBMaXN0ZW5pbmdTdGFydGVkRXZlbnQsIFJlY29nbml0aW9uU3RhcnRlZEV2ZW50LCBSZWNvZ25pdGlvblRyaWdnZXJlZEV2ZW50LCB9IGZyb20gXCIuL1JlY29nbml0aW9uRXZlbnRzXCI7XG5pbXBvcnQgeyBTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIgfSBmcm9tIFwiLi9TZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIuSW50ZXJuYWxcIjtcbmV4cG9ydCBjbGFzcyBSZXF1ZXN0U2Vzc2lvbiB7XG4gICAgY29uc3RydWN0b3IoYXVkaW9Tb3VyY2VJZCkge1xuICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdkRldGFjaGFibGVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMucHJpdklzQXVkaW9Ob2RlRGV0YWNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcml2SXNSZWNvZ25pemluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZJc1NwZWVjaEVuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdlR1cm5TdGFydEF1ZGlvT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5wcml2TGFzdFJlY29PZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLnByaXZIeXBvdGhlc2lzUmVjZWl2ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcml2Qnl0ZXNTZW50ID0gMDtcbiAgICAgICAgdGhpcy5wcml2UmVjb2dOdW1iZXIgPSAwO1xuICAgICAgICB0aGlzLm9uQXVkaW9Tb3VyY2VBdHRhY2hDb21wbGV0ZWQgPSAoYXVkaW9Ob2RlLCBpc0Vycm9yLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcml2QXVkaW9Ob2RlID0gYXVkaW9Ob2RlO1xuICAgICAgICAgICAgdGhpcy5wcml2SXNBdWRpb05vZGVEZXRhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25FdmVudChuZXcgTGlzdGVuaW5nU3RhcnRlZEV2ZW50KHRoaXMucHJpdlJlcXVlc3RJZCwgdGhpcy5wcml2U2Vzc2lvbklkLCB0aGlzLnByaXZBdWRpb1NvdXJjZUlkLCB0aGlzLnByaXZBdWRpb05vZGVJZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uUHJlQ29ubmVjdGlvblN0YXJ0ID0gKGF1dGhGZXRjaEV2ZW50SWQsIGNvbm5lY3Rpb25JZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCA9IGF1dGhGZXRjaEV2ZW50SWQ7XG4gICAgICAgICAgICB0aGlzLnByaXZTZXNzaW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IENvbm5lY3RpbmdUb1NlcnZpY2VFdmVudCh0aGlzLnByaXZSZXF1ZXN0SWQsIHRoaXMucHJpdkF1dGhGZXRjaEV2ZW50SWQsIHRoaXMucHJpdlNlc3Npb25JZCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uQXV0aENvbXBsZXRlZCA9IChpc0Vycm9yLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgaWYgKGlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25Fc3RhYmxpc2hDb21wbGV0ZWQgPSAoc3RhdHVzQ29kZSwgcmVhc29uKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBSZWNvZ25pdGlvblN0YXJ0ZWRFdmVudCh0aGlzLnJlcXVlc3RJZCwgdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCwgdGhpcy5wcml2QXVkaW9Ob2RlSWQsIHRoaXMucHJpdkF1dGhGZXRjaEV2ZW50SWQsIHRoaXMucHJpdlNlc3Npb25JZCkpO1xuICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdkF1ZGlvTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZBdWRpb05vZGUucmVwbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucHJpdlR1cm5TdGFydEF1ZGlvT2Zmc2V0ID0gdGhpcy5wcml2TGFzdFJlY29PZmZzZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2Qnl0ZXNTZW50ID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGF0dXNDb2RlID09PSA0MDMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblNlcnZpY2VUdXJuRW5kUmVzcG9uc2UgPSAoY29udGludW91c1JlY29nbml0aW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNvbnRpbnVvdXNSZWNvZ25pdGlvbiB8fCB0aGlzLmlzU3BlZWNoRW5kZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFN0YXJ0IGEgbmV3IHJlcXVlc3Qgc2V0LlxuICAgICAgICAgICAgICAgIHRoaXMucHJpdlR1cm5TdGFydEF1ZGlvT2Zmc2V0ID0gdGhpcy5wcml2TGFzdFJlY29PZmZzZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVxdWVzdElkID0gY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkF1ZGlvTm9kZS5yZXBsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kaXNwb3NlID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJpdklzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBzaG91bGQgaGF2ZSBjb21wbGV0ZWQgYnkgbm93LiBJZiB3ZSBkaWQgbm90IGl0cyBhbiB1bmtub3duIGVycm9yLlxuICAgICAgICAgICAgICAgIHRoaXMucHJpdklzRGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGV0YWNoYWJsZSBvZiB0aGlzLnByaXZEZXRhY2hhYmxlcykge1xuICAgICAgICAgICAgICAgICAgICBkZXRhY2hhYmxlLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnByaXZTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldFRlbGVtZXRyeSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIuaGFzVGVsZW1ldHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lci5nZXRUZWxlbWV0cnkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICghIXRoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lci5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEV2ZW50cy5pbnN0YW5jZS5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2SXNSZWNvZ25pemluZykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdklzUmVjb2duaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRldGFjaEF1ZGlvTm9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRldGFjaEF1ZGlvTm9kZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wcml2SXNBdWRpb05vZGVEZXRhY2hlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdklzQXVkaW9Ob2RlRGV0YWNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByaXZBdWRpb05vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2QXVkaW9Ob2RlLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCA9IGF1ZGlvU291cmNlSWQ7XG4gICAgICAgIHRoaXMucHJpdlJlcXVlc3RJZCA9IGNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgdGhpcy5wcml2QXVkaW9Ob2RlSWQgPSBjcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgIHRoaXMucHJpdlJlcXVlc3RDb21wbGV0aW9uRGVmZXJyYWwgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICB9XG4gICAgZ2V0IHNlc3Npb25JZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNlc3Npb25JZDtcbiAgICB9XG4gICAgZ2V0IHJlcXVlc3RJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlcXVlc3RJZDtcbiAgICB9XG4gICAgZ2V0IGF1ZGlvTm9kZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Ob2RlSWQ7XG4gICAgfVxuICAgIGdldCBjb21wbGV0aW9uUHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlcXVlc3RDb21wbGV0aW9uRGVmZXJyYWwucHJvbWlzZSgpO1xuICAgIH1cbiAgICBnZXQgaXNTcGVlY2hFbmRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdklzU3BlZWNoRW5kZWQ7XG4gICAgfVxuICAgIGdldCBpc1JlY29nbml6aW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2SXNSZWNvZ25pemluZztcbiAgICB9XG4gICAgZ2V0IGN1cnJlbnRUdXJuQXVkaW9PZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZUdXJuU3RhcnRBdWRpb09mZnNldDtcbiAgICB9XG4gICAgZ2V0IHJlY29nTnVtYmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVjb2dOdW1iZXI7XG4gICAgfVxuICAgIC8vIFRoZSBudW1iZXIgb2YgYnl0ZXMgc2VudCBmb3IgdGhlIGN1cnJlbnQgY29ubmVjdGlvbi5cbiAgICAvLyBDb3VudGVyIGlzIHJlc2V0IHRvIDAgZWFjaCB0aW1lIGEgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZC5cbiAgICBnZXQgYnl0ZXNTZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2Qnl0ZXNTZW50O1xuICAgIH1cbiAgICBsaXN0ZW5Gb3JTZXJ2aWNlVGVsZW1ldHJ5KGV2ZW50U291cmNlKSB7XG4gICAgICAgIGlmICghIXRoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5wcml2RGV0YWNoYWJsZXMucHVzaChldmVudFNvdXJjZS5hdHRhY2hMaXN0ZW5lcih0aGlzLnByaXZTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGFydE5ld1JlY29nbml0aW9uKCkge1xuICAgICAgICB0aGlzLnByaXZJc1NwZWVjaEVuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdklzUmVjb2duaXppbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnByaXZUdXJuU3RhcnRBdWRpb09mZnNldCA9IDA7XG4gICAgICAgIHRoaXMucHJpdkxhc3RSZWNvT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5wcml2UmVxdWVzdElkID0gY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgICAgICB0aGlzLnByaXZSZWNvZ051bWJlcisrO1xuICAgICAgICB0aGlzLnByaXZTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIgPSBuZXcgU2VydmljZVRlbGVtZXRyeUxpc3RlbmVyKHRoaXMucHJpdlJlcXVlc3RJZCwgdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCwgdGhpcy5wcml2QXVkaW9Ob2RlSWQpO1xuICAgICAgICB0aGlzLm9uRXZlbnQobmV3IFJlY29nbml0aW9uVHJpZ2dlcmVkRXZlbnQodGhpcy5yZXF1ZXN0SWQsIHRoaXMucHJpdlNlc3Npb25JZCwgdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCwgdGhpcy5wcml2QXVkaW9Ob2RlSWQpKTtcbiAgICB9XG4gICAgb25IeXBvdGhlc2lzKG9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMucHJpdkh5cG90aGVzaXNSZWNlaXZlZCkge1xuICAgICAgICAgICAgdGhpcy5wcml2SHlwb3RoZXNpc1JlY2VpdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lci5oeXBvdGhlc2lzUmVjZWl2ZWQodGhpcy5wcml2QXVkaW9Ob2RlLmZpbmRUaW1lQXRPZmZzZXQob2Zmc2V0KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25QaHJhc2VSZWNvZ25pemVkKG9mZnNldCkge1xuICAgICAgICB0aGlzLnByaXZTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIucGhyYXNlUmVjZWl2ZWQodGhpcy5wcml2QXVkaW9Ob2RlLmZpbmRUaW1lQXRPZmZzZXQob2Zmc2V0KSk7XG4gICAgICAgIHRoaXMub25TZXJ2aWNlUmVjb2duaXplZChvZmZzZXQpO1xuICAgIH1cbiAgICBvblNlcnZpY2VSZWNvZ25pemVkKG9mZnNldCkge1xuICAgICAgICB0aGlzLnByaXZMYXN0UmVjb09mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy5wcml2SHlwb3RoZXNpc1JlY2VpdmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvTm9kZS5zaHJpbmtCdWZmZXJzKG9mZnNldCk7XG4gICAgfVxuICAgIG9uQXVkaW9TZW50KGJ5dGVzU2VudCkge1xuICAgICAgICB0aGlzLnByaXZCeXRlc1NlbnQgKz0gYnl0ZXNTZW50O1xuICAgIH1cbiAgICBvblN0b3BSZWNvZ25pemluZygpIHtcbiAgICAgICAgdGhpcy5vbkNvbXBsZXRlKCk7XG4gICAgfVxuICAgIC8vIFNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYXVkaW9Ob2RlIGZvciB0aGlzIHNlc3Npb24gaGFzIGluZGljYXRlZCB0aGF0IGl0IGlzIG91dCBvZiBzcGVlY2guXG4gICAgb25TcGVlY2hFbmRlZCgpIHtcbiAgICAgICAgdGhpcy5wcml2SXNTcGVlY2hFbmRlZCA9IHRydWU7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXF1ZXN0U2Vzc2lvbi5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLy8gcmVzcG9uc2VcbmV4cG9ydCBjbGFzcyBBY3Rpdml0eVBheWxvYWRSZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IoanNvbikge1xuICAgICAgICB0aGlzLnByaXZBY3Rpdml0eVJlc3BvbnNlID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBY3Rpdml0eVBheWxvYWRSZXNwb25zZShqc29uKTtcbiAgICB9XG4gICAgZ2V0IGNvbnZlcnNhdGlvbklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QWN0aXZpdHlSZXNwb25zZS5jb252ZXJzYXRpb25JZDtcbiAgICB9XG4gICAgZ2V0IG1lc3NhZ2VEYXRhU3RyZWFtVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkFjdGl2aXR5UmVzcG9uc2UubWVzc2FnZURhdGFTdHJlYW1UeXBlO1xuICAgIH1cbiAgICBnZXQgbWVzc2FnZVBheWxvYWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZBY3Rpdml0eVJlc3BvbnNlLm1lc3NhZ2VQYXlsb2FkO1xuICAgIH1cbiAgICBnZXQgdmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkFjdGl2aXR5UmVzcG9uc2UudmVyc2lvbjtcbiAgICB9XG59XG5leHBvcnQgdmFyIE1lc3NhZ2VEYXRhU3RyZWFtVHlwZTtcbihmdW5jdGlvbiAoTWVzc2FnZURhdGFTdHJlYW1UeXBlKSB7XG4gICAgTWVzc2FnZURhdGFTdHJlYW1UeXBlW01lc3NhZ2VEYXRhU3RyZWFtVHlwZVtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIE1lc3NhZ2VEYXRhU3RyZWFtVHlwZVtNZXNzYWdlRGF0YVN0cmVhbVR5cGVbXCJUZXh0VG9TcGVlY2hBdWRpb1wiXSA9IDFdID0gXCJUZXh0VG9TcGVlY2hBdWRpb1wiO1xufSkoTWVzc2FnZURhdGFTdHJlYW1UeXBlIHx8IChNZXNzYWdlRGF0YVN0cmVhbVR5cGUgPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpdml0eVJlc3BvbnNlUGF5bG9hZC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUmVjb2duaXRpb25TdGF0dXMgfSBmcm9tIFwiLi4vRXhwb3J0c1wiO1xuZXhwb3J0IGNsYXNzIERldGFpbGVkU3BlZWNoUGhyYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihqc29uKSB7XG4gICAgICAgIHRoaXMucHJpdkRldGFpbGVkU3BlZWNoUGhyYXNlID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgdGhpcy5wcml2RGV0YWlsZWRTcGVlY2hQaHJhc2UuUmVjb2duaXRpb25TdGF0dXMgPSBSZWNvZ25pdGlvblN0YXR1c1t0aGlzLnByaXZEZXRhaWxlZFNwZWVjaFBocmFzZS5SZWNvZ25pdGlvblN0YXR1c107XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSlNPTihqc29uKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGV0YWlsZWRTcGVlY2hQaHJhc2UoanNvbik7XG4gICAgfVxuICAgIGdldCBSZWNvZ25pdGlvblN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkRldGFpbGVkU3BlZWNoUGhyYXNlLlJlY29nbml0aW9uU3RhdHVzO1xuICAgIH1cbiAgICBnZXQgTkJlc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZEZXRhaWxlZFNwZWVjaFBocmFzZS5OQmVzdDtcbiAgICB9XG4gICAgZ2V0IER1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2RGV0YWlsZWRTcGVlY2hQaHJhc2UuRHVyYXRpb247XG4gICAgfVxuICAgIGdldCBPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZEZXRhaWxlZFNwZWVjaFBocmFzZS5PZmZzZXQ7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZXRhaWxlZFNwZWVjaFBocmFzZS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBAY2xhc3MgU3ludGhlc2lzU3RhdHVzXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgdmFyIFN5bnRoZXNpc1N0YXR1cztcbihmdW5jdGlvbiAoU3ludGhlc2lzU3RhdHVzKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHJlc3BvbnNlIGNvbnRhaW5zIHZhbGlkIGF1ZGlvIGRhdGEuXG4gICAgICogQG1lbWJlciBTeW50aGVzaXNTdGF0dXMuU3VjY2Vzc1xuICAgICAqL1xuICAgIFN5bnRoZXNpc1N0YXR1c1tTeW50aGVzaXNTdGF0dXNbXCJTdWNjZXNzXCJdID0gMF0gPSBcIlN1Y2Nlc3NcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhlIGVuZCBvZiBhdWRpbyBkYXRhLiBObyB2YWxpZCBhdWRpbyBkYXRhIGlzIGluY2x1ZGVkIGluIHRoZSBtZXNzYWdlLlxuICAgICAqIEBtZW1iZXIgU3ludGhlc2lzU3RhdHVzLlN5bnRoZXNpc0VuZFxuICAgICAqL1xuICAgIFN5bnRoZXNpc1N0YXR1c1tTeW50aGVzaXNTdGF0dXNbXCJTeW50aGVzaXNFbmRcIl0gPSAxXSA9IFwiU3ludGhlc2lzRW5kXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyBzeW50aGVzaXMgZGF0YSBwcm9jZXNzaW5nLlxuICAgICAqIEBtZW1iZXIgU3ludGhlc2lzU3RhdHVzLkVycm9yXG4gICAgICovXG4gICAgU3ludGhlc2lzU3RhdHVzW1N5bnRoZXNpc1N0YXR1c1tcIkVycm9yXCJdID0gMl0gPSBcIkVycm9yXCI7XG59KShTeW50aGVzaXNTdGF0dXMgfHwgKFN5bnRoZXNpc1N0YXR1cyA9IHt9KSk7XG5leHBvcnQgdmFyIFJlY29nbml0aW9uU3RhdHVzO1xuKGZ1bmN0aW9uIChSZWNvZ25pdGlvblN0YXR1cykge1xuICAgIFJlY29nbml0aW9uU3RhdHVzW1JlY29nbml0aW9uU3RhdHVzW1wiU3VjY2Vzc1wiXSA9IDBdID0gXCJTdWNjZXNzXCI7XG4gICAgUmVjb2duaXRpb25TdGF0dXNbUmVjb2duaXRpb25TdGF0dXNbXCJOb01hdGNoXCJdID0gMV0gPSBcIk5vTWF0Y2hcIjtcbiAgICBSZWNvZ25pdGlvblN0YXR1c1tSZWNvZ25pdGlvblN0YXR1c1tcIkluaXRpYWxTaWxlbmNlVGltZW91dFwiXSA9IDJdID0gXCJJbml0aWFsU2lsZW5jZVRpbWVvdXRcIjtcbiAgICBSZWNvZ25pdGlvblN0YXR1c1tSZWNvZ25pdGlvblN0YXR1c1tcIkJhYmJsZVRpbWVvdXRcIl0gPSAzXSA9IFwiQmFiYmxlVGltZW91dFwiO1xuICAgIFJlY29nbml0aW9uU3RhdHVzW1JlY29nbml0aW9uU3RhdHVzW1wiRXJyb3JcIl0gPSA0XSA9IFwiRXJyb3JcIjtcbiAgICBSZWNvZ25pdGlvblN0YXR1c1tSZWNvZ25pdGlvblN0YXR1c1tcIkVuZE9mRGljdGF0aW9uXCJdID0gNV0gPSBcIkVuZE9mRGljdGF0aW9uXCI7XG4gICAgUmVjb2duaXRpb25TdGF0dXNbUmVjb2duaXRpb25TdGF0dXNbXCJUb29NYW55UmVxdWVzdHNcIl0gPSA2XSA9IFwiVG9vTWFueVJlcXVlc3RzXCI7XG59KShSZWNvZ25pdGlvblN0YXR1cyB8fCAoUmVjb2duaXRpb25TdGF0dXMgPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1FbnVtcy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLy8gcmVzcG9uc2VcbmV4cG9ydCBjbGFzcyBJbnRlbnRSZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IoanNvbikge1xuICAgICAgICB0aGlzLnByaXZJbnRlbnRSZXNwb25zZSA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSlNPTihqc29uKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW50ZW50UmVzcG9uc2UoanNvbik7XG4gICAgfVxuICAgIGdldCBxdWVyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkludGVudFJlc3BvbnNlLnF1ZXJ5O1xuICAgIH1cbiAgICBnZXQgdG9wU2NvcmluZ0ludGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkludGVudFJlc3BvbnNlLnRvcFNjb3JpbmdJbnRlbnQ7XG4gICAgfVxuICAgIGdldCBlbnRpdGllcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkludGVudFJlc3BvbnNlLmVudGl0aWVzO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW50ZW50UmVzcG9uc2UuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFJlY29nbml0aW9uU3RhdHVzIH0gZnJvbSBcIi4uL0V4cG9ydHNcIjtcbmV4cG9ydCBjbGFzcyBTaW1wbGVTcGVlY2hQaHJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGpzb24pIHtcbiAgICAgICAgdGhpcy5wcml2U2ltcGxlU3BlZWNoUGhyYXNlID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgdGhpcy5wcml2U2ltcGxlU3BlZWNoUGhyYXNlLlJlY29nbml0aW9uU3RhdHVzID0gUmVjb2duaXRpb25TdGF0dXNbdGhpcy5wcml2U2ltcGxlU3BlZWNoUGhyYXNlLlJlY29nbml0aW9uU3RhdHVzXTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW1wbGVTcGVlY2hQaHJhc2UoanNvbik7XG4gICAgfVxuICAgIGdldCBSZWNvZ25pdGlvblN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNpbXBsZVNwZWVjaFBocmFzZS5SZWNvZ25pdGlvblN0YXR1cztcbiAgICB9XG4gICAgZ2V0IERpc3BsYXlUZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U2ltcGxlU3BlZWNoUGhyYXNlLkRpc3BsYXlUZXh0O1xuICAgIH1cbiAgICBnZXQgT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U2ltcGxlU3BlZWNoUGhyYXNlLk9mZnNldDtcbiAgICB9XG4gICAgZ2V0IER1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U2ltcGxlU3BlZWNoUGhyYXNlLkR1cmF0aW9uO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2ltcGxlU3BlZWNoUGhyYXNlLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQgY2xhc3MgU3BlZWNoRGV0ZWN0ZWQge1xuICAgIGNvbnN0cnVjdG9yKGpzb24pIHtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoU3RhcnREZXRlY3RlZCA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSlNPTihqc29uKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3BlZWNoRGV0ZWN0ZWQoanNvbik7XG4gICAgfVxuICAgIGdldCBPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hTdGFydERldGVjdGVkLk9mZnNldDtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwZWVjaERldGVjdGVkLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQgY2xhc3MgU3BlZWNoSHlwb3RoZXNpcyB7XG4gICAgY29uc3RydWN0b3IoanNvbikge1xuICAgICAgICB0aGlzLnByaXZTcGVlY2hIeXBvdGhlc2lzID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTcGVlY2hIeXBvdGhlc2lzKGpzb24pO1xuICAgIH1cbiAgICBnZXQgVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNwZWVjaEh5cG90aGVzaXMuVGV4dDtcbiAgICB9XG4gICAgZ2V0IE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNwZWVjaEh5cG90aGVzaXMuT2Zmc2V0O1xuICAgIH1cbiAgICBnZXQgRHVyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hIeXBvdGhlc2lzLkR1cmF0aW9uO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoSHlwb3RoZXNpcy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgVHJhbnNsYXRpb25TdGF0dXMgfSBmcm9tIFwiLi4vVHJhbnNsYXRpb25TdGF0dXNcIjtcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvbkh5cG90aGVzaXMge1xuICAgIGNvbnN0cnVjdG9yKGpzb24pIHtcbiAgICAgICAgdGhpcy5wcml2VHJhbnNsYXRpb25IeXBvdGhlc2lzID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgdGhpcy5wcml2VHJhbnNsYXRpb25IeXBvdGhlc2lzLlRyYW5zbGF0aW9uLlRyYW5zbGF0aW9uU3RhdHVzID0gVHJhbnNsYXRpb25TdGF0dXNbdGhpcy5wcml2VHJhbnNsYXRpb25IeXBvdGhlc2lzLlRyYW5zbGF0aW9uLlRyYW5zbGF0aW9uU3RhdHVzXTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2xhdGlvbkh5cG90aGVzaXMoanNvbik7XG4gICAgfVxuICAgIGdldCBEdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlRyYW5zbGF0aW9uSHlwb3RoZXNpcy5EdXJhdGlvbjtcbiAgICB9XG4gICAgZ2V0IE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlRyYW5zbGF0aW9uSHlwb3RoZXNpcy5PZmZzZXQ7XG4gICAgfVxuICAgIGdldCBUZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2VHJhbnNsYXRpb25IeXBvdGhlc2lzLlRleHQ7XG4gICAgfVxuICAgIGdldCBUcmFuc2xhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlRyYW5zbGF0aW9uSHlwb3RoZXNpcy5UcmFuc2xhdGlvbjtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYW5zbGF0aW9uSHlwb3RoZXNpcy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUmVjb2duaXRpb25TdGF0dXMgfSBmcm9tIFwiLi4vRXhwb3J0c1wiO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25TdGF0dXMgfSBmcm9tIFwiLi4vVHJhbnNsYXRpb25TdGF0dXNcIjtcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvblBocmFzZSB7XG4gICAgY29uc3RydWN0b3IoanNvbikge1xuICAgICAgICB0aGlzLnByaXZUcmFuc2xhdGlvblBocmFzZSA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIHRoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLlJlY29nbml0aW9uU3RhdHVzID0gUmVjb2duaXRpb25TdGF0dXNbdGhpcy5wcml2VHJhbnNsYXRpb25QaHJhc2UuUmVjb2duaXRpb25TdGF0dXNdO1xuICAgICAgICBpZiAodGhpcy5wcml2VHJhbnNsYXRpb25QaHJhc2UuVHJhbnNsYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5wcml2VHJhbnNsYXRpb25QaHJhc2UuVHJhbnNsYXRpb24uVHJhbnNsYXRpb25TdGF0dXMgPSBUcmFuc2xhdGlvblN0YXR1c1t0aGlzLnByaXZUcmFuc2xhdGlvblBocmFzZS5UcmFuc2xhdGlvbi5UcmFuc2xhdGlvblN0YXR1c107XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2xhdGlvblBocmFzZShqc29uKTtcbiAgICB9XG4gICAgZ2V0IFJlY29nbml0aW9uU3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2VHJhbnNsYXRpb25QaHJhc2UuUmVjb2duaXRpb25TdGF0dXM7XG4gICAgfVxuICAgIGdldCBPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZUcmFuc2xhdGlvblBocmFzZS5PZmZzZXQ7XG4gICAgfVxuICAgIGdldCBEdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLkR1cmF0aW9uO1xuICAgIH1cbiAgICBnZXQgVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLlRleHQ7XG4gICAgfVxuICAgIGdldCBUcmFuc2xhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLlRyYW5zbGF0aW9uO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRpb25QaHJhc2UuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFN5bnRoZXNpc1N0YXR1cyB9IGZyb20gXCIuLi9FeHBvcnRzXCI7XG5leHBvcnQgY2xhc3MgVHJhbnNsYXRpb25TeW50aGVzaXNFbmQge1xuICAgIGNvbnN0cnVjdG9yKGpzb24pIHtcbiAgICAgICAgdGhpcy5wcml2U3ludGhlc2lzRW5kID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgdGhpcy5wcml2U3ludGhlc2lzRW5kLlN5bnRoZXNpc1N0YXR1cyA9IFN5bnRoZXNpc1N0YXR1c1t0aGlzLnByaXZTeW50aGVzaXNFbmQuU3ludGhlc2lzU3RhdHVzXTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2xhdGlvblN5bnRoZXNpc0VuZChqc29uKTtcbiAgICB9XG4gICAgZ2V0IFN5bnRoZXNpc1N0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlN5bnRoZXNpc0VuZC5TeW50aGVzaXNTdGF0dXM7XG4gICAgfVxuICAgIGdldCBGYWlsdXJlUmVhc29uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U3ludGhlc2lzRW5kLkZhaWx1cmVSZWFzb247XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvblN5bnRoZXNpc0VuZC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUmVwbGF5YWJsZUF1ZGlvTm9kZSB9IGZyb20gXCIuLi9jb21tb24uYnJvd3Nlci9FeHBvcnRzXCI7XG5pbXBvcnQgeyBBcmd1bWVudE51bGxFcnJvciwgQ29ubmVjdGlvblN0YXRlLCBjcmVhdGVOb0Rhc2hHdWlkLCBEZWZlcnJlZCwgRXZlbnRTb3VyY2UsIE1lc3NhZ2VUeXBlLCBQcm9taXNlSGVscGVyLCB9IGZyb20gXCIuLi9jb21tb24vRXhwb3J0c1wiO1xuaW1wb3J0IHsgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlLCBDYW5jZWxsYXRpb25SZWFzb24sIFByb3BlcnR5SWQsIFJlY29nbml0aW9uRXZlbnRBcmdzLCBTZXNzaW9uRXZlbnRBcmdzLCB9IGZyb20gXCIuLi9zZGsvRXhwb3J0c1wiO1xuaW1wb3J0IHsgQWdlbnRDb25maWcsIER5bmFtaWNHcmFtbWFyQnVpbGRlciwgUmVxdWVzdFNlc3Npb24sIFNwZWVjaENvbnRleHQsIFNwZWVjaERldGVjdGVkLCB9IGZyb20gXCIuL0V4cG9ydHNcIjtcbmltcG9ydCB7IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlIH0gZnJvbSBcIi4vU3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2UuSW50ZXJuYWxcIjtcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlUmVjb2duaXplckJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKGF1dGhlbnRpY2F0aW9uLCBjb25uZWN0aW9uRmFjdG9yeSwgYXVkaW9Tb3VyY2UsIHJlY29nbml6ZXJDb25maWcsIHJlY29nbml6ZXIpIHtcbiAgICAgICAgdGhpcy5yZWNvZ25pemVPdmVycmlkZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0T3ZlcnJpZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2VuZFRlbGVtZXRyeURhdGEgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ZWxlbWV0cnlEYXRhID0gdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uZ2V0VGVsZW1ldHJ5KCk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJUZWxlbTogXCIgKyB0ZWxlbWV0cnlEYXRhKTtcbiAgICAgICAgICAgIGlmIChTZXJ2aWNlUmVjb2duaXplckJhc2UudGVsZW1ldHJ5RGF0YUVuYWJsZWQgIT09IHRydWUgfHxcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2VkIHx8XG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gdGVsZW1ldHJ5RGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISFTZXJ2aWNlUmVjb2duaXplckJhc2UudGVsZW1ldHJ5RGF0YSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIFNlcnZpY2VSZWNvZ25pemVyQmFzZS50ZWxlbWV0cnlEYXRhKHRlbGVtZXRyeURhdGEpO1xuICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hDb25uZWN0aW9uKCkub25TdWNjZXNzQ29udGludWVXaXRoKChjb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24uc2VuZChuZXcgU3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2UoTWVzc2FnZVR5cGUuVGV4dCwgXCJ0ZWxlbWV0cnlcIiwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBcImFwcGxpY2F0aW9uL2pzb25cIiwgdGVsZW1ldHJ5RGF0YSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVjZWl2ZU1lc3NhZ2VPdmVycmlkZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZWNlaXZlTWVzc2FnZSA9IChzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbEJhY2spID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoQ29ubmVjdGlvbigpLm9uKChjb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24ucmVhZCgpXG4gICAgICAgICAgICAgICAgICAgIC5vblN1Y2Nlc3NDb250aW51ZVdpdGhQcm9taXNlKChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlY2VpdmVNZXNzYWdlT3ZlcnJpZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVjZWl2ZU1lc3NhZ2VPdmVycmlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByaXZJc0Rpc3Bvc2VkIHx8ICF0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1JlY29nbml6aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSdyZSBkb25lLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGluZGljYXRlcyB3ZSBhcmUgZHJhaW5pbmcgdGhlIHF1ZXVlIGFuZCBpdCBjYW1lIHdpdGggbm8gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzUmVjb2duaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVjZWl2ZU1lc3NhZ2Uoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxCYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uTWVzc2FnZSA9IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlLmZyb21Db25uZWN0aW9uTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25NZXNzYWdlLnJlcXVlc3RJZC50b0xvd2VyQ2FzZSgpID09PSB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5yZXF1ZXN0SWQudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjb25uZWN0aW9uTWVzc2FnZS5wYXRoLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwidHVybi5zdGFydFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZNdXN0UmVwb3J0RW5kT2ZTdHJlYW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic3BlZWNoLnN0YXJ0ZGV0ZWN0ZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BlZWNoU3RhcnREZXRlY3RlZCA9IFNwZWVjaERldGVjdGVkLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BlZWNoU3RhcnRFdmVudEFyZ3MgPSBuZXcgUmVjb2duaXRpb25FdmVudEFyZ3Moc3BlZWNoU3RhcnREZXRlY3RlZC5PZmZzZXQsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdlJlY29nbml6ZXIuc3BlZWNoU3RhcnREZXRlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2UmVjb2duaXplci5zcGVlY2hTdGFydERldGVjdGVkKHRoaXMucHJpdlJlY29nbml6ZXIsIHNwZWVjaFN0YXJ0RXZlbnRBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic3BlZWNoLmVuZGRldGVjdGVkXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbiA9IGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHJlcXVlc3Qgd2FzIGVtcHR5LCB0aGUgSlNPTiByZXR1cm5lZCBpcyBlbXB0eS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24gPSBcInsgT2Zmc2V0OiAwIH1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcGVlY2hTdG9wRGV0ZWN0ZWQgPSBTcGVlY2hEZXRlY3RlZC5mcm9tSlNPTihqc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBzaHJpbmsgdGhlIGJ1ZmZlcnMgZm9yIGNvbnRpbnVvdXMgcmVjb2duaXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBzaW5nbGUgc2hvdCwgdGhlIHNwZWVjaC5waHJhc2UgbWVzc2FnZSB3aWxsIGNvbWUgYWZ0ZXIgdGhlIHNwZWVjaC5lbmQgYW5kIGl0IHNob3VsZCBvd24gYnVmZmVyIHNocmluay5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpdlJlY29nbml6ZXJDb25maWcuaXNDb250aW51b3VzUmVjb2duaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uU2VydmljZVJlY29nbml6ZWQoc3BlZWNoU3RvcERldGVjdGVkLk9mZnNldCArIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmN1cnJlbnRUdXJuQXVkaW9PZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwZWVjaFN0b3BFdmVudEFyZ3MgPSBuZXcgUmVjb2duaXRpb25FdmVudEFyZ3Moc3BlZWNoU3RvcERldGVjdGVkLk9mZnNldCArIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmN1cnJlbnRUdXJuQXVkaW9PZmZzZXQsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdlJlY29nbml6ZXIuc3BlZWNoRW5kRGV0ZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlY29nbml6ZXIuc3BlZWNoRW5kRGV0ZWN0ZWQodGhpcy5wcml2UmVjb2duaXplciwgc3BlZWNoU3RvcEV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInR1cm4uZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFRlbGVtZXRyeURhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzU3BlZWNoRW5kZWQgJiYgdGhpcy5wcml2TXVzdFJlcG9ydEVuZE9mU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZNdXN0UmVwb3J0RW5kT2ZTdHJlYW0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsUmVjb2duaXRpb25Mb2NhbChDYW5jZWxsYXRpb25SZWFzb24uRW5kT2ZTdHJlYW0sIENhbmNlbGxhdGlvbkVycm9yQ29kZS5Ob0Vycm9yLCB1bmRlZmluZWQsIHN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvblN0b3BFdmVudEFyZ3MgPSBuZXcgU2Vzc2lvbkV2ZW50QXJncyh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vblNlcnZpY2VUdXJuRW5kUmVzcG9uc2UodGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5pc0NvbnRpbnVvdXNSZWNvZ25pdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5pc0NvbnRpbnVvdXNSZWNvZ25pdGlvbiB8fCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1NwZWVjaEVuZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZSZWNvZ25pemVyLnNlc3Npb25TdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2UmVjb2duaXplci5zZXNzaW9uU3RvcHBlZCh0aGlzLnByaXZSZWNvZ25pemVyLCBzZXNzaW9uU3RvcEV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mZXRjaENvbm5lY3Rpb24oKS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKGNvbm5lY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRTcGVlY2hDb250ZXh0KGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NUeXBlU3BlY2lmaWNNZXNzYWdlcyhjb25uZWN0aW9uTWVzc2FnZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxCYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWNlaXZlTWVzc2FnZShzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbEJhY2spO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZW5kU3BlZWNoQ29udGV4dCA9IChjb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzcGVlY2hDb250ZXh0SnNvbiA9IHRoaXMuc3BlZWNoQ29udGV4dC50b0pTT04oKTtcbiAgICAgICAgICAgIGlmIChzcGVlY2hDb250ZXh0SnNvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLnNlbmQobmV3IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlKE1lc3NhZ2VUeXBlLlRleHQsIFwic3BlZWNoLmNvbnRleHRcIiwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBcImFwcGxpY2F0aW9uL2pzb25cIiwgc3BlZWNoQ29udGV4dEpzb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQodHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29ubmVjdEltcGxPdmVycmlkZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb25maWdDb25uZWN0aW9uT3ZlcnJpZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZmV0Y2hDb25uZWN0aW9uT3ZlcnJpZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2VuZFNwZWVjaFNlcnZpY2VDb25maWcgPSAoY29ubmVjdGlvbiwgcmVxdWVzdFNlc3Npb24sIFNwZWVjaFNlcnZpY2VDb25maWdKc29uKSA9PiB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IGFueXRoaW5nIHRoYXQgaXMgbm90IHJlcXVpcmVkIGZvciB0aGUgc2VydmljZSB0byB3b3JrLlxuICAgICAgICAgICAgaWYgKFNlcnZpY2VSZWNvZ25pemVyQmFzZS50ZWxlbWV0cnlEYXRhRW5hYmxlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdpdGhUZWxlbWV0cnkgPSBKU09OLnBhcnNlKFNwZWVjaFNlcnZpY2VDb25maWdKc29uKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtOiB3aXRoVGVsZW1ldHJ5LmNvbnRleHQuc3lzdGVtLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgU3BlZWNoU2VydmljZUNvbmZpZ0pzb24gPSBKU09OLnN0cmluZ2lmeShyZXBsYWNlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoU3BlZWNoU2VydmljZUNvbmZpZ0pzb24pIHsgLy8gJiYgdGhpcy5wcml2Q29ubmVjdGlvbklkICE9PSB0aGlzLnByaXZTcGVlY2hTZXJ2aWNlQ29uZmlnQ29ubmVjdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2U3BlZWNoU2VydmljZUNvbmZpZ0Nvbm5lY3Rpb25JZCA9IHRoaXMucHJpdkNvbm5lY3Rpb25JZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbi5zZW5kKG5ldyBTcGVlY2hDb25uZWN0aW9uTWVzc2FnZShNZXNzYWdlVHlwZS5UZXh0LCBcInNwZWVjaC5jb25maWdcIiwgcmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBcImFwcGxpY2F0aW9uL2pzb25cIiwgU3BlZWNoU2VydmljZUNvbmZpZ0pzb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQodHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VuZEF1ZGlvID0gKGF1ZGlvU3RyZWFtTm9kZSkgPT4ge1xuICAgICAgICAgICAgLy8gTk9URTogSG9tZS1iYWtlZCBwcm9taXNlcyBjcmFzaCBpb3Mgc2FmYXJpIGR1cmluZyB0aGUgaW52b2NhdGlvblxuICAgICAgICAgICAgLy8gb2YgdGhlIGVycm9yIGNhbGxiYWNrIGNoYWluIChsb29rcyBsaWtlIHRoZSByZWN1cnNpb24gaXMgd2F5IHRvbyBkZWVwLCBhbmRcbiAgICAgICAgICAgIC8vIGl0IGJsb3dzIHVwIHRoZSBzdGFjaykuIFRoZSBmb2xsb3dpbmcgY29uc3RydWN0IGlzIGEgc3RvcC1nYXAgdGhhdCBkb2VzIG5vdFxuICAgICAgICAgICAgLy8gYnViYmxlIHRoZSBlcnJvciB1cCB0aGUgY2FsbGJhY2sgY2hhaW4gYW5kIGhlbmNlIGNpcmN1bXZlbnRzIHRoaXMgcHJvYmxlbS5cbiAgICAgICAgICAgIC8vIFRPRE86IHJld3JpdGUgd2l0aCBFUzYgcHJvbWlzZXMuXG4gICAgICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICAgICAgLy8gVGhlIHRpbWUgd2UgbGFzdCBzZW50IGRhdGEgdG8gdGhlIHNlcnZpY2UuXG4gICAgICAgICAgICBsZXQgbmV4dFNlbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IGF1ZGlvRm9ybWF0ID0gdGhpcy5wcml2QXVkaW9Tb3VyY2UuZm9ybWF0O1xuICAgICAgICAgICAgLy8gTWF4IGFtb3VudCB0byBzZW5kIGJlZm9yZSB3ZSBzdGFydCB0byB0aHJvdHRsZVxuICAgICAgICAgICAgY29uc3QgZmFzdExhbmVTaXplTXMgPSB0aGlzLnByaXZSZWNvZ25pemVyQ29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoXCJTUEVFQ0gtVHJhbnNtaXRMZW5ndGhCZWZvclRocm90dGxlTXNcIiwgXCI1MDAwXCIpO1xuICAgICAgICAgICAgY29uc3QgbWF4U2VuZFVudGhyb3R0bGVkQnl0ZXMgPSBhdWRpb0Zvcm1hdC5hdmdCeXRlc1BlclNlYyAvIDEwMDAgKiBwYXJzZUludChmYXN0TGFuZVNpemVNcywgMTApO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRSZWNvZ051bWJlciA9IHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnJlY29nTnVtYmVyO1xuICAgICAgICAgICAgY29uc3QgcmVhZEFuZFVwbG9hZEN5Y2xlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIElmIHNwZWVjaCBpcyBkb25lLCBzdG9wIHNlbmRpbmcgYXVkaW8uXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnByaXZJc0Rpc3Bvc2VkICYmXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1NwZWVjaEVuZGVkICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzUmVjb2duaXppbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVjb2dOdW1iZXIgPT09IHN0YXJ0UmVjb2dOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mZXRjaENvbm5lY3Rpb24oKS5vbigoY29ubmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9TdHJlYW1Ob2RlLnJlYWQoKS5vbigoYXVkaW9TdHJlYW1DaHVuaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGhhdmUgYSBuZXcgYXVkaW8gY2h1bmsgdG8gdXBsb2FkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1NwZWVjaEVuZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHNlcnZpY2UgYWxyZWFkeSByZWNvZ25pemVkIGF1ZGlvIGVuZCB0aGVuIGRvbid0IHNlbmQgYW55IG1vcmUgYXVkaW9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGF5bG9hZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VuZERlbGF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdWRpb1N0cmVhbUNodW5rLmlzRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kRGVsYXkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZCA9IGF1ZGlvU3RyZWFtQ2h1bmsuYnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vbkF1ZGlvU2VudChwYXlsb2FkLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF4U2VuZFVudGhyb3R0bGVkQnl0ZXMgPj0gdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uYnl0ZXNTZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kRGVsYXkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZERlbGF5ID0gTWF0aC5tYXgoMCwgbmV4dFNlbmRUaW1lIC0gRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJlIHdlIHJlYWR5IHRvIHNlbmQsIG9yIG5lZWQgd2UgZGVsYXkgbW9yZT9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBheWxvYWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRTZW5kVGltZSA9IERhdGUubm93KCkgKyAocGF5bG9hZC5ieXRlTGVuZ3RoICogMTAwMCAvIChhdWRpb0Zvcm1hdC5hdmdCeXRlc1BlclNlYyAqIDIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGxvYWRlZCA9IGNvbm5lY3Rpb24uc2VuZChuZXcgU3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2UoTWVzc2FnZVR5cGUuQmluYXJ5LCBcImF1ZGlvXCIsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgbnVsbCwgcGF5bG9hZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWF1ZGlvU3RyZWFtQ2h1bmsuaXNFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZGVkLmNvbnRpbnVlV2l0aCgoXykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZ2FyZGxlc3Mgb2Ygc3VjY2VzcyBvciBmYWlsdXJlLCBzY2hlZHVsZSB0aGUgbmV4dCB1cGxvYWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHVuZGVybHlpbmcgY29ubmVjdGlvbiB3YXMgYnJva2VuLCB0aGUgbmV4dCBjeWNsZSB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGEgbmV3IGNvbm5lY3Rpb24gYW5kIHJlLXRyYW5zbWl0IG1pc3NpbmcgYXVkaW8gYXV0b21hdGljYWxseS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkQW5kVXBsb2FkQ3ljbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGF1ZGlvIHN0cmVhbSBoYXMgYmVlbiBjbG9zZWQsIG5vIG5lZWQgdG8gc2NoZWR1bGUgbmV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVhZC11cGxvYWQgY3ljbGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vblNwZWVjaEVuZGVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgc2VuZERlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1NwZWVjaEVuZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciB3aGF0ZXZlciByZWFzb24sIFJlamVjdCBpcyB1c2VkIHRvIHJlbW92ZSBxdWV1ZSBzdWJzY3JpYmVycyBpbnNpZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIFF1ZXVlLkRyYWluQW5kRGlzcG9zZSBpbnZva2VkIGZyb20gRGV0YWNoQXVkaW9Ob2RlIGRvd24gYmVsb3csIHdoaWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lYW5zIHRoYXQgc29tZXRpbWVzIHRoaW5ncyBjYW4gYmUgcmVqZWN0ZWQgaW4gbm9ybWFsIGNpcmN1bXN0YW5jZXMsIHdpdGhvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55IGVycm9ycy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cnVlKTsgLy8gVE9ETzogcmVtb3ZlIHRoZSBhcmd1bWVudCwgaXQncyBpcyBjb21wbGV0ZWx5IG1lYW5pbmdsZXNzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSByZWplY3QsIGlmIHRoZXJlIHdhcyBhIHByb3BlciBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVhZEFuZFVwbG9hZEN5Y2xlKCk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZldGNoQ29ubmVjdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZldGNoQ29ubmVjdGlvbk92ZXJyaWRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaENvbm5lY3Rpb25PdmVycmlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlndXJlQ29ubmVjdGlvbigpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoIWF1dGhlbnRpY2F0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXJyb3IoXCJhdXRoZW50aWNhdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbm5lY3Rpb25GYWN0b3J5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXJyb3IoXCJjb25uZWN0aW9uRmFjdG9yeVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWF1ZGlvU291cmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXJyb3IoXCJhdWRpb1NvdXJjZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlY29nbml6ZXJDb25maWcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFcnJvcihcInJlY29nbml6ZXJDb25maWdcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcml2TXVzdFJlcG9ydEVuZE9mU3RyZWFtID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdkF1dGhlbnRpY2F0aW9uID0gYXV0aGVudGljYXRpb247XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25GYWN0b3J5ID0gY29ubmVjdGlvbkZhY3Rvcnk7XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvU291cmNlID0gYXVkaW9Tb3VyY2U7XG4gICAgICAgIHRoaXMucHJpdlJlY29nbml6ZXJDb25maWcgPSByZWNvZ25pemVyQ29uZmlnO1xuICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdlJlY29nbml6ZXIgPSByZWNvZ25pemVyO1xuICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbiA9IG5ldyBSZXF1ZXN0U2Vzc2lvbih0aGlzLnByaXZBdWRpb1NvdXJjZS5pZCgpKTtcbiAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkV2ZW50cyA9IG5ldyBFdmVudFNvdXJjZSgpO1xuICAgICAgICB0aGlzLnByaXZEeW5hbWljR3JhbW1hciA9IG5ldyBEeW5hbWljR3JhbW1hckJ1aWxkZXIoKTtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoQ29udGV4dCA9IG5ldyBTcGVlY2hDb250ZXh0KHRoaXMucHJpdkR5bmFtaWNHcmFtbWFyKTtcbiAgICAgICAgdGhpcy5wcml2QWdlbnRDb25maWcgPSBuZXcgQWdlbnRDb25maWcoKTtcbiAgICB9XG4gICAgZ2V0IGF1ZGlvU291cmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Tb3VyY2U7XG4gICAgfVxuICAgIGdldCBzcGVlY2hDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U3BlZWNoQ29udGV4dDtcbiAgICB9XG4gICAgZ2V0IGR5bmFtaWNHcmFtbWFyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2RHluYW1pY0dyYW1tYXI7XG4gICAgfVxuICAgIGdldCBhZ2VudENvbmZpZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkFnZW50Q29uZmlnO1xuICAgIH1cbiAgICBpc0Rpc3Bvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2SXNEaXNwb3NlZDtcbiAgICB9XG4gICAgZGlzcG9zZShyZWFzb24pIHtcbiAgICAgICAgdGhpcy5wcml2SXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnByaXZDb25uZWN0aW9uQ29uZmlndXJhdGlvblByb21pc2UpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWd1cmF0aW9uUHJvbWlzZS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKGNvbm5lY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmRpc3Bvc2UocmVhc29uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjb25uZWN0aW9uRXZlbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2Q29ubmVjdGlvbkV2ZW50cztcbiAgICB9XG4gICAgZ2V0IHJlY29nbml0aW9uTW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlY29nbml6ZXJDb25maWcucmVjb2duaXRpb25Nb2RlO1xuICAgIH1cbiAgICByZWNvZ25pemUocmVjb01vZGUsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsQmFjaykge1xuICAgICAgICBpZiAodGhpcy5yZWNvZ25pemVPdmVycmlkZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWNvZ25pemVPdmVycmlkZShyZWNvTW9kZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxCYWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbGVhciB0aGUgZXhpc3RpbmcgY29uZmlndXJhdGlvbiBwcm9taXNlIHRvIGZvcmNlIGEgcmUtdHJhbnNtaXNzaW9uIG9mIGNvbmZpZyBhbmQgY29udGV4dC5cbiAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ3VyYXRpb25Qcm9taXNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5yZWNvZ25pdGlvbk1vZGUgPSByZWNvTW9kZTtcbiAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc3RhcnROZXdSZWNvZ25pdGlvbigpO1xuICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5saXN0ZW5Gb3JTZXJ2aWNlVGVsZW1ldHJ5KHRoaXMucHJpdkF1ZGlvU291cmNlLmV2ZW50cyk7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2aWNlLiBUaGUgcHJvbWlzZSB0aGlzIHdpbGwgY3JlYXRlIGlzIHN0b3JlZCBhbmQgd2lsbCBiZSB1c2VkIGJ5IGNvbmZpZ3VyZUNvbm5lY3Rpb24oKS5cbiAgICAgICAgdGhpcy5jb25uZWN0SW1wbCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5hdWRpb1NvdXJjZVxuICAgICAgICAgICAgLmF0dGFjaCh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5hdWRpb05vZGVJZClcbiAgICAgICAgICAgIC5jb250aW51ZVdpdGhQcm9taXNlKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGxldCBhdWRpb05vZGU7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbFJlY29nbml0aW9uTG9jYWwoQ2FuY2VsbGF0aW9uUmVhc29uLkVycm9yLCBDYW5jZWxsYXRpb25FcnJvckNvZGUuQ29ubmVjdGlvbkZhaWx1cmUsIHJlc3VsdC5lcnJvciwgc3VjY2Vzc0NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tRXJyb3IocmVzdWx0LmVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF1ZGlvTm9kZSA9IG5ldyBSZXBsYXlhYmxlQXVkaW9Ob2RlKHJlc3VsdC5yZXN1bHQsIHRoaXMuYXVkaW9Tb3VyY2UuZm9ybWF0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vbkF1ZGlvU291cmNlQXR0YWNoQ29tcGxldGVkKGF1ZGlvTm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW9Tb3VyY2UuZGV2aWNlSW5mby5vblN1Y2Nlc3NDb250aW51ZVdpdGhQcm9taXNlKChkZXZpY2VJbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5TcGVlY2hTZXJ2aWNlQ29uZmlnLkNvbnRleHQuYXVkaW8gPSB7IHNvdXJjZTogZGV2aWNlSW5mbyB9O1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZUNvbm5lY3Rpb24oKVxuICAgICAgICAgICAgICAgICAgICAub24oKF8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvblN0YXJ0RXZlbnRBcmdzID0gbmV3IFNlc3Npb25FdmVudEFyZ3ModGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2UmVjb2duaXplci5zZXNzaW9uU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2UmVjb2duaXplci5zZXNzaW9uU3RhcnRlZCh0aGlzLnByaXZSZWNvZ25pemVyLCBzZXNzaW9uU3RhcnRFdmVudEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VSZXRyaWV2YWxQcm9taXNlID0gdGhpcy5yZWNlaXZlTWVzc2FnZShzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbEJhY2spO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdWRpb1NlbmRQcm9taXNlID0gdGhpcy5zZW5kQXVkaW8oYXVkaW9Ob2RlKTtcbiAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICAgICAgYXVkaW9TZW5kUHJvbWlzZS5vbigoXykgPT4geyB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsUmVjb2duaXRpb25Mb2NhbChDYW5jZWxsYXRpb25SZWFzb24uRXJyb3IsIENhbmNlbGxhdGlvbkVycm9yQ29kZS5SdW50aW1lRXJyb3IsIGVycm9yLCBzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcGxldGlvblByb21pc2UgPSBQcm9taXNlSGVscGVyLndoZW5BbGwoW21lc3NhZ2VSZXRyaWV2YWxQcm9taXNlLCBhdWRpb1NlbmRQcm9taXNlXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wbGV0aW9uUHJvbWlzZS5vbigocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxSZWNvZ25pdGlvbkxvY2FsKENhbmNlbGxhdGlvblJlYXNvbi5FcnJvciwgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlLlJ1bnRpbWVFcnJvciwgZXJyb3IsIHN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbFJlY29nbml0aW9uTG9jYWwoQ2FuY2VsbGF0aW9uUmVhc29uLkVycm9yLCBDYW5jZWxsYXRpb25FcnJvckNvZGUuQ29ubmVjdGlvbkZhaWx1cmUsIGVycm9yLCBzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0pLmNvbnRpbnVlV2l0aFByb21pc2UoKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21FcnJvcihyZXN1bHQuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdG9wUmVjb2duaXppbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1JlY29nbml6aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vblN0b3BSZWNvZ25pemluZygpO1xuICAgICAgICAgICAgdGhpcy5zZW5kVGVsZW1ldHJ5RGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5hdWRpb1NvdXJjZS50dXJuT2ZmKCk7XG4gICAgICAgICAgICB0aGlzLnNlbmRGaW5hbEF1ZGlvKCk7XG4gICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0SW1wbCgpLnJlc3VsdCgpO1xuICAgIH1cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5kaXNjb25uZWN0T3ZlcnJpZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0T3ZlcnJpZGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbmNlbFJlY29nbml0aW9uTG9jYWwoQ2FuY2VsbGF0aW9uUmVhc29uLkVycm9yLCBDYW5jZWxsYXRpb25FcnJvckNvZGUuTm9FcnJvciwgXCJEaXNjb25uZWN0aW5nXCIsIHVuZGVmaW5lZCk7XG4gICAgICAgIGlmICh0aGlzLnByaXZDb25uZWN0aW9uUHJvbWlzZS5yZXN1bHQoKS5pc0NvbXBsZXRlZCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByaXZDb25uZWN0aW9uUHJvbWlzZS5yZXN1bHQoKS5pc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvblByb21pc2UucmVzdWx0KCkucmVzdWx0LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uUHJvbWlzZS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKGNvbm5lY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHsgfVxuICAgIC8vIENhbmNlbHMgcmVjb2duaXRpb24uXG4gICAgY2FuY2VsUmVjb2duaXRpb25Mb2NhbChjYW5jZWxsYXRpb25SZWFzb24sIGVycm9yQ29kZSwgZXJyb3IsIGNhbmNlbFJlY29DYWxsYmFjaykge1xuICAgICAgICBpZiAoISF0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1JlY29nbml6aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vblN0b3BSZWNvZ25pemluZygpO1xuICAgICAgICAgICAgdGhpcy5zZW5kVGVsZW1ldHJ5RGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5jYW5jZWxSZWNvZ25pdGlvbih0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgY2FuY2VsbGF0aW9uUmVhc29uLCBlcnJvckNvZGUsIGVycm9yLCBjYW5jZWxSZWNvQ2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEVzdGFibGlzaGVzIGEgd2Vic29ja2V0IGNvbm5lY3Rpb24gdG8gdGhlIGVuZCBwb2ludC5cbiAgICBjb25uZWN0SW1wbChpc1VuQXV0aG9yaXplZCA9IGZhbHNlKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RJbXBsT3ZlcnJpZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdEltcGxPdmVycmlkZShpc1VuQXV0aG9yaXplZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJpdkNvbm5lY3Rpb25Qcm9taXNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2Q29ubmVjdGlvblByb21pc2UucmVzdWx0KCkuaXNDb21wbGV0ZWQgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5wcml2Q29ubmVjdGlvblByb21pc2UucmVzdWx0KCkuaXNFcnJvclxuICAgICAgICAgICAgICAgICAgICB8fCB0aGlzLnByaXZDb25uZWN0aW9uUHJvbWlzZS5yZXN1bHQoKS5yZXN1bHQuc3RhdGUoKSA9PT0gQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uSWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Qcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0SW1wbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkNvbm5lY3Rpb25Qcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdkF1dGhGZXRjaEV2ZW50SWQgPSBjcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25JZCA9IGNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ub25QcmVDb25uZWN0aW9uU3RhcnQodGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCwgdGhpcy5wcml2Q29ubmVjdGlvbklkKTtcbiAgICAgICAgY29uc3QgYXV0aFByb21pc2UgPSBpc1VuQXV0aG9yaXplZCA/IHRoaXMucHJpdkF1dGhlbnRpY2F0aW9uLmZldGNoT25FeHBpcnkodGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCkgOiB0aGlzLnByaXZBdXRoZW50aWNhdGlvbi5mZXRjaCh0aGlzLnByaXZBdXRoRmV0Y2hFdmVudElkKTtcbiAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvblByb21pc2UgPSBhdXRoUHJvbWlzZVxuICAgICAgICAgICAgLmNvbnRpbnVlV2l0aFByb21pc2UoKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ub25BdXRoQ29tcGxldGVkKHRydWUsIHJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vbkF1dGhDb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IHRoaXMucHJpdkNvbm5lY3Rpb25GYWN0b3J5LmNyZWF0ZSh0aGlzLnByaXZSZWNvZ25pemVyQ29uZmlnLCByZXN1bHQucmVzdWx0LCB0aGlzLnByaXZDb25uZWN0aW9uSWQpO1xuICAgICAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ubGlzdGVuRm9yU2VydmljZVRlbGVtZXRyeShjb25uZWN0aW9uLmV2ZW50cyk7XG4gICAgICAgICAgICAvLyBBdHRhY2ggdG8gdGhlIHVuZGVybHlpbmcgZXZlbnQuIE5vIG5lZWQgdG8gaG9sZCBvbnRvIHRoZSBkZXRhY2ggcG9pbnRlcnMgYXMgaW4gdGhlIGV2ZW50IHRoZSBjb25uZWN0aW9uIGdvZXMgYXdheSxcbiAgICAgICAgICAgIC8vIGl0J2xsIHN0b3Agc2VuZGluZyBldmVudHMuXG4gICAgICAgICAgICBjb25uZWN0aW9uLmV2ZW50cy5hdHRhY2goKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uRXZlbnRzLm9uRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbi5vcGVuKCkub25TdWNjZXNzQ29udGludWVXaXRoUHJvbWlzZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uUHJlQ29ubmVjdGlvblN0YXJ0KHRoaXMucHJpdkF1dGhGZXRjaEV2ZW50SWQsIHRoaXMucHJpdkNvbm5lY3Rpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uQ29ubmVjdGlvbkVzdGFibGlzaENvbXBsZXRlZChyZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdChjb25uZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDAzICYmICFpc1VuQXV0aG9yaXplZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0SW1wbCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uQ29ubmVjdGlvbkVzdGFibGlzaENvbXBsZXRlZChyZXNwb25zZS5zdGF0dXNDb2RlLCByZXNwb25zZS5yZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tRXJyb3IoYFVuYWJsZSB0byBjb250YWN0IHNlcnZlci4gU3RhdHVzQ29kZTogJHtyZXNwb25zZS5zdGF0dXNDb2RlfSwgJHt0aGlzLnByaXZSZWNvZ25pemVyQ29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludCl9IFJlYXNvbjogJHtyZXNwb25zZS5yZWFzb259YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2Q29ubmVjdGlvblByb21pc2U7XG4gICAgfVxuICAgIHNlbmRGaW5hbEF1ZGlvKCkge1xuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICB0aGlzLmZldGNoQ29ubmVjdGlvbigpLm9uKChjb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQobmV3IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlKE1lc3NhZ2VUeXBlLkJpbmFyeSwgXCJhdWRpb1wiLCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5yZXF1ZXN0SWQsIG51bGwsIG51bGwpKS5vbigoXykgPT4ge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gICAgfVxuICAgIC8vIFRha2VzIGFuIGVzdGFibGlzaGVkIHdlYnNvY2tldCBjb25uZWN0aW9uIHRvIHRoZSBlbmRwb2ludCBhbmQgc2VuZHMgc3BlZWNoIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uXG4gICAgY29uZmlndXJlQ29ubmVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnQ29ubmVjdGlvbk92ZXJyaWRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZ0Nvbm5lY3Rpb25PdmVycmlkZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByaXZDb25uZWN0aW9uQ29uZmlndXJhdGlvblByb21pc2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZDb25uZWN0aW9uQ29uZmlndXJhdGlvblByb21pc2UucmVzdWx0KCkuaXNDb21wbGV0ZWQgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ3VyYXRpb25Qcm9taXNlLnJlc3VsdCgpLmlzRXJyb3JcbiAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ3VyYXRpb25Qcm9taXNlLnJlc3VsdCgpLnJlc3VsdC5zdGF0ZSgpID09PSBDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWd1cmF0aW9uUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlndXJlQ29ubmVjdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWd1cmF0aW9uUHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uQ29uZmlndXJhdGlvblByb21pc2UgPSB0aGlzLmNvbm5lY3RJbXBsKCkub25TdWNjZXNzQ29udGludWVXaXRoUHJvbWlzZSgoY29ubmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFNwZWVjaFNlcnZpY2VDb25maWcoY29ubmVjdGlvbiwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24sIHRoaXMucHJpdlJlY29nbml6ZXJDb25maWcuU3BlZWNoU2VydmljZUNvbmZpZy5zZXJpYWxpemUoKSlcbiAgICAgICAgICAgICAgICAub25TdWNjZXNzQ29udGludWVXaXRoUHJvbWlzZSgoXykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRTcGVlY2hDb250ZXh0KGNvbm5lY3Rpb24pLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aCgoXykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWd1cmF0aW9uUHJvbWlzZTtcbiAgICB9XG59XG5TZXJ2aWNlUmVjb2duaXplckJhc2UudGVsZW1ldHJ5RGF0YUVuYWJsZWQgPSB0cnVlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXJ2aWNlUmVjb2duaXplckJhc2UuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEF1ZGlvU291cmNlRXJyb3JFdmVudCwgQXVkaW9TdHJlYW1Ob2RlQXR0YWNoZWRFdmVudCwgQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnQsIEF1ZGlvU3RyZWFtTm9kZURldGFjaGVkRXZlbnQsIEF1ZGlvU3RyZWFtTm9kZUVycm9yRXZlbnQsIENvbm5lY3Rpb25Fc3RhYmxpc2hlZEV2ZW50LCBDb25uZWN0aW9uRXN0YWJsaXNoRXJyb3JFdmVudCwgQ29ubmVjdGlvbk1lc3NhZ2VSZWNlaXZlZEV2ZW50LCBDb25uZWN0aW9uU3RhcnRFdmVudCwgfSBmcm9tIFwiLi4vY29tbW9uL0V4cG9ydHNcIjtcbmltcG9ydCB7IENvbm5lY3RpbmdUb1NlcnZpY2VFdmVudCwgUmVjb2duaXRpb25UcmlnZ2VyZWRFdmVudCB9IGZyb20gXCIuL1JlY29nbml0aW9uRXZlbnRzXCI7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIge1xuICAgIGNvbnN0cnVjdG9yKHJlcXVlc3RJZCwgYXVkaW9Tb3VyY2VJZCwgYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgdGhpcy5wcml2SXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZMaXN0ZW5pbmdUcmlnZ2VyTWV0cmljID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcml2TWljTWV0cmljID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaE1ldHJpYyA9IG51bGw7XG4gICAgICAgIHRoaXMub25FdmVudCA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2SXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgUmVjb2duaXRpb25UcmlnZ2VyZWRFdmVudCAmJiBlLnJlcXVlc3RJZCA9PT0gdGhpcy5wcml2UmVxdWVzdElkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2TGlzdGVuaW5nVHJpZ2dlck1ldHJpYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgRW5kOiBlLmV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICAgICAgTmFtZTogXCJMaXN0ZW5pbmdUcmlnZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIFN0YXJ0OiBlLmV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBBdWRpb1N0cmVhbU5vZGVBdHRhY2hpbmdFdmVudCAmJiBlLmF1ZGlvU291cmNlSWQgPT09IHRoaXMucHJpdkF1ZGlvU291cmNlSWQgJiYgZS5hdWRpb05vZGVJZCA9PT0gdGhpcy5wcml2QXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZNaWNTdGFydFRpbWUgPSBlLmV2ZW50VGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgQXVkaW9TdHJlYW1Ob2RlQXR0YWNoZWRFdmVudCAmJiBlLmF1ZGlvU291cmNlSWQgPT09IHRoaXMucHJpdkF1ZGlvU291cmNlSWQgJiYgZS5hdWRpb05vZGVJZCA9PT0gdGhpcy5wcml2QXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZNaWNTdGFydFRpbWUgPSBlLmV2ZW50VGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgQXVkaW9Tb3VyY2VFcnJvckV2ZW50ICYmIGUuYXVkaW9Tb3VyY2VJZCA9PT0gdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wcml2TWljTWV0cmljKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdk1pY01ldHJpYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEVuZDogZS5ldmVudFRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBFcnJvcjogZS5lcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIE5hbWU6IFwiTWljcm9waG9uZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnQ6IHRoaXMucHJpdk1pY1N0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEF1ZGlvU3RyZWFtTm9kZUVycm9yRXZlbnQgJiYgZS5hdWRpb1NvdXJjZUlkID09PSB0aGlzLnByaXZBdWRpb1NvdXJjZUlkICYmIGUuYXVkaW9Ob2RlSWQgPT09IHRoaXMucHJpdkF1ZGlvTm9kZUlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnByaXZNaWNNZXRyaWMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2TWljTWV0cmljID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgRW5kOiBlLmV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEVycm9yOiBlLmVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgTmFtZTogXCJNaWNyb3Bob25lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGFydDogdGhpcy5wcml2TWljU3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgQXVkaW9TdHJlYW1Ob2RlRGV0YWNoZWRFdmVudCAmJiBlLmF1ZGlvU291cmNlSWQgPT09IHRoaXMucHJpdkF1ZGlvU291cmNlSWQgJiYgZS5hdWRpb05vZGVJZCA9PT0gdGhpcy5wcml2QXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHJpdk1pY01ldHJpYykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZNaWNNZXRyaWMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBFbmQ6IGUuZXZlbnRUaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgTmFtZTogXCJNaWNyb3Bob25lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGFydDogdGhpcy5wcml2TWljU3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgQ29ubmVjdGluZ1RvU2VydmljZUV2ZW50ICYmIGUucmVxdWVzdElkID09PSB0aGlzLnByaXZSZXF1ZXN0SWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uSWQgPSBlLnNlc3Npb25JZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgQ29ubmVjdGlvblN0YXJ0RXZlbnQgJiYgZS5jb25uZWN0aW9uSWQgPT09IHRoaXMucHJpdkNvbm5lY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25TdGFydFRpbWUgPSBlLmV2ZW50VGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgQ29ubmVjdGlvbkVzdGFibGlzaGVkRXZlbnQgJiYgZS5jb25uZWN0aW9uSWQgPT09IHRoaXMucHJpdkNvbm5lY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaE1ldHJpYykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoTWV0cmljID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgRW5kOiBlLmV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIElkOiB0aGlzLnByaXZDb25uZWN0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBOYW1lOiBcIkNvbm5lY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXJ0OiB0aGlzLnByaXZDb25uZWN0aW9uU3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgQ29ubmVjdGlvbkVzdGFibGlzaEVycm9yRXZlbnQgJiYgZS5jb25uZWN0aW9uSWQgPT09IHRoaXMucHJpdkNvbm5lY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaE1ldHJpYykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoTWV0cmljID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgRW5kOiBlLmV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEVycm9yOiB0aGlzLmdldENvbm5lY3Rpb25FcnJvcihlLnN0YXR1c0NvZGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgSWQ6IHRoaXMucHJpdkNvbm5lY3Rpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIE5hbWU6IFwiQ29ubmVjdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnQ6IHRoaXMucHJpdkNvbm5lY3Rpb25TdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBDb25uZWN0aW9uTWVzc2FnZVJlY2VpdmVkRXZlbnQgJiYgZS5jb25uZWN0aW9uSWQgPT09IHRoaXMucHJpdkNvbm5lY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgIGlmIChlLm1lc3NhZ2UgJiYgZS5tZXNzYWdlLmhlYWRlcnMgJiYgZS5tZXNzYWdlLmhlYWRlcnMucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHJpdlJlY2VpdmVkTWVzc2FnZXNbZS5tZXNzYWdlLmhlYWRlcnMucGF0aF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlY2VpdmVkTWVzc2FnZXNbZS5tZXNzYWdlLmhlYWRlcnMucGF0aF0gPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWNlaXZlZE1lc3NhZ2VzW2UubWVzc2FnZS5oZWFkZXJzLnBhdGhdLnB1c2goZS5uZXR3b3JrUmVjZWl2ZWRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0VGVsZW1ldHJ5ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWV0cmljcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpdkxpc3RlbmluZ1RyaWdnZXJNZXRyaWMpIHtcbiAgICAgICAgICAgICAgICBtZXRyaWNzLnB1c2godGhpcy5wcml2TGlzdGVuaW5nVHJpZ2dlck1ldHJpYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2TWljTWV0cmljKSB7XG4gICAgICAgICAgICAgICAgbWV0cmljcy5wdXNoKHRoaXMucHJpdk1pY01ldHJpYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaE1ldHJpYykge1xuICAgICAgICAgICAgICAgIG1ldHJpY3MucHVzaCh0aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoTWV0cmljKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZQaHJhc2VMYXRlbmNpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG1ldHJpY3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIFBocmFzZUxhdGVuY3lNczogdGhpcy5wcml2UGhyYXNlTGF0ZW5jaWVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucHJpdkh5cG90aGVzaXNMYXRlbmNpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG1ldHJpY3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIEZpcnN0SHlwb3RoZXNpc0xhdGVuY3lNczogdGhpcy5wcml2SHlwb3RoZXNpc0xhdGVuY2llcyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRlbGVtZXRyeSA9IHtcbiAgICAgICAgICAgICAgICBNZXRyaWNzOiBtZXRyaWNzLFxuICAgICAgICAgICAgICAgIFJlY2VpdmVkTWVzc2FnZXM6IHRoaXMucHJpdlJlY2VpdmVkTWVzc2FnZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KHRlbGVtZXRyeSk7XG4gICAgICAgICAgICAvLyBXZSBkb250IHdhbnQgdG8gc2VuZCB0aGUgc2FtZSB0ZWxlbWV0cnkgYWdhaW4uIFNvIGNsZWFuIHRob3NlIG91dC5cbiAgICAgICAgICAgIHRoaXMucHJpdlJlY2VpdmVkTWVzc2FnZXMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMucHJpdkxpc3RlbmluZ1RyaWdnZXJNZXRyaWMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wcml2TWljTWV0cmljID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hNZXRyaWMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wcml2UGhyYXNlTGF0ZW5jaWVzID0gW107XG4gICAgICAgICAgICB0aGlzLnByaXZIeXBvdGhlc2lzTGF0ZW5jaWVzID0gW107XG4gICAgICAgICAgICByZXR1cm4ganNvbjtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kaXNwb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcml2SXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0Q29ubmVjdGlvbkVycm9yID0gKHN0YXR1c0NvZGUpID0+IHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAtLSBXZWJzb2NrZXQgc3RhdHVzIGNvZGVzIC0tXG4gICAgICAgICAgICBOb3JtYWxDbG9zdXJlID0gMTAwMCxcbiAgICAgICAgICAgIEVuZHBvaW50VW5hdmFpbGFibGUgPSAxMDAxLFxuICAgICAgICAgICAgUHJvdG9jb2xFcnJvciA9IDEwMDIsXG4gICAgICAgICAgICBJbnZhbGlkTWVzc2FnZVR5cGUgPSAxMDAzLFxuICAgICAgICAgICAgRW1wdHkgPSAxMDA1LFxuICAgICAgICAgICAgSW52YWxpZFBheWxvYWREYXRhID0gMTAwNyxcbiAgICAgICAgICAgIFBvbGljeVZpb2xhdGlvbiA9IDEwMDgsXG4gICAgICAgICAgICBNZXNzYWdlVG9vQmlnID0gMTAwOSxcbiAgICAgICAgICAgIE1hbmRhdG9yeUV4dGVuc2lvbiA9IDEwMTAsXG4gICAgICAgICAgICBJbnRlcm5hbFNlcnZlckVycm9yID0gMTAxMVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHN3aXRjaCAoc3RhdHVzQ29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDAwOlxuICAgICAgICAgICAgICAgIGNhc2UgMTAwMjpcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDM6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDA1OlxuICAgICAgICAgICAgICAgIGNhc2UgMTAwNzpcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDg6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDA5OiByZXR1cm4gXCJCYWRSZXF1ZXN0XCI7XG4gICAgICAgICAgICAgICAgY2FzZSA0MDE6IHJldHVybiBcIlVuYXV0aG9yaXplZFwiO1xuICAgICAgICAgICAgICAgIGNhc2UgNDAzOiByZXR1cm4gXCJGb3JiaWRkZW5cIjtcbiAgICAgICAgICAgICAgICBjYXNlIDUwMzpcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDE6IHJldHVybiBcIlNlcnZlclVuYXZhaWxhYmxlXCI7XG4gICAgICAgICAgICAgICAgY2FzZSA1MDA6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDExOiByZXR1cm4gXCJTZXJ2ZXJFcnJvclwiO1xuICAgICAgICAgICAgICAgIGNhc2UgNDA4OlxuICAgICAgICAgICAgICAgIGNhc2UgNTA0OiByZXR1cm4gXCJUaW1lb3V0XCI7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIFwic3RhdHVzY29kZTpcIiArIHN0YXR1c0NvZGUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcml2UmVxdWVzdElkID0gcmVxdWVzdElkO1xuICAgICAgICB0aGlzLnByaXZBdWRpb1NvdXJjZUlkID0gYXVkaW9Tb3VyY2VJZDtcbiAgICAgICAgdGhpcy5wcml2QXVkaW9Ob2RlSWQgPSBhdWRpb05vZGVJZDtcbiAgICAgICAgdGhpcy5wcml2UmVjZWl2ZWRNZXNzYWdlcyA9IHt9O1xuICAgICAgICB0aGlzLnByaXZQaHJhc2VMYXRlbmNpZXMgPSBbXTtcbiAgICAgICAgdGhpcy5wcml2SHlwb3RoZXNpc0xhdGVuY2llcyA9IFtdO1xuICAgIH1cbiAgICBwaHJhc2VSZWNlaXZlZChhdWRpb1JlY2VpdmVkVGltZSkge1xuICAgICAgICBpZiAoYXVkaW9SZWNlaXZlZFRpbWUgPiAwKSB7IC8vIDAgaW5kaWNhdGVzIHRoZSB0aW1lIGlzIHVua25vd24uIERyb3AgaXQuXG4gICAgICAgICAgICB0aGlzLnByaXZQaHJhc2VMYXRlbmNpZXMucHVzaChEYXRlLm5vdygpIC0gYXVkaW9SZWNlaXZlZFRpbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGh5cG90aGVzaXNSZWNlaXZlZChhdWRpb1JlY2VpdmVkVGltZSkge1xuICAgICAgICBpZiAoYXVkaW9SZWNlaXZlZFRpbWUgPiAwKSB7IC8vIDAgaW5kaWNhdGVzIHRoZSB0aW1lIGlzIHVua25vd24uIERyb3AgaXQuXG4gICAgICAgICAgICB0aGlzLnByaXZIeXBvdGhlc2lzTGF0ZW5jaWVzLnB1c2goRGF0ZS5ub3coKSAtIGF1ZGlvUmVjZWl2ZWRUaW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBEZXRlcm1pbmVzIGlmIHRoZXJlIGFyZSBhbnkgdGVsZW1ldHJ5IGV2ZW50cyB0byBzZW5kIHRvIHRoZSBzZXJ2aWNlLlxuICAgIGdldCBoYXNUZWxlbWV0cnkoKSB7XG4gICAgICAgIHJldHVybiAoT2JqZWN0LmtleXModGhpcy5wcml2UmVjZWl2ZWRNZXNzYWdlcykubGVuZ3RoICE9PSAwIHx8XG4gICAgICAgICAgICB0aGlzLnByaXZMaXN0ZW5pbmdUcmlnZ2VyTWV0cmljICE9PSBudWxsIHx8XG4gICAgICAgICAgICB0aGlzLnByaXZNaWNNZXRyaWMgIT09IG51bGwgfHxcbiAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hNZXRyaWMgIT09IG51bGwgfHxcbiAgICAgICAgICAgIHRoaXMucHJpdlBocmFzZUxhdGVuY2llcy5sZW5ndGggIT09IDAgfHxcbiAgICAgICAgICAgIHRoaXMucHJpdkh5cG90aGVzaXNMYXRlbmNpZXMubGVuZ3RoICE9PSAwKTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lci5JbnRlcm5hbC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUHJveHlJbmZvLCBXZWJzb2NrZXRDb25uZWN0aW9uLCB9IGZyb20gXCIuLi9jb21tb24uYnJvd3Nlci9FeHBvcnRzXCI7XG5pbXBvcnQgeyBGb3JjZURpY3RhdGlvblByb3BlcnR5TmFtZSwgT3V0cHV0Rm9ybWF0UHJvcGVydHlOYW1lLCB9IGZyb20gXCIuLi9jb21tb24uc3BlZWNoL0V4cG9ydHNcIjtcbmltcG9ydCB7IE91dHB1dEZvcm1hdCwgUHJvcGVydHlJZCB9IGZyb20gXCIuLi9zZGsvRXhwb3J0c1wiO1xuaW1wb3J0IHsgQ29ubmVjdGlvbkZhY3RvcnlCYXNlIH0gZnJvbSBcIi4vQ29ubmVjdGlvbkZhY3RvcnlCYXNlXCI7XG5pbXBvcnQgeyBSZWNvZ25pdGlvbk1vZGUsIFdlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG5pbXBvcnQgeyBRdWVyeVBhcmFtZXRlck5hbWVzIH0gZnJvbSBcIi4vUXVlcnlQYXJhbWV0ZXJOYW1lc1wiO1xuZXhwb3J0IGNsYXNzIFNwZWVjaENvbm5lY3Rpb25GYWN0b3J5IGV4dGVuZHMgQ29ubmVjdGlvbkZhY3RvcnlCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGl2ZVJlbGF0aXZlVXJpID0gXCIvc3BlZWNoL3JlY29nbml0aW9uL2ludGVyYWN0aXZlL2NvZ25pdGl2ZXNlcnZpY2VzL3YxXCI7XG4gICAgICAgIHRoaXMuY29udmVyc2F0aW9uUmVsYXRpdmVVcmkgPSBcIi9zcGVlY2gvcmVjb2duaXRpb24vY29udmVyc2F0aW9uL2NvZ25pdGl2ZXNlcnZpY2VzL3YxXCI7XG4gICAgICAgIHRoaXMuZGljdGF0aW9uUmVsYXRpdmVVcmkgPSBcIi9zcGVlY2gvcmVjb2duaXRpb24vZGljdGF0aW9uL2NvZ25pdGl2ZXNlcnZpY2VzL3YxXCI7XG4gICAgICAgIHRoaXMuY3JlYXRlID0gKGNvbmZpZywgYXV0aEluZm8sIGNvbm5lY3Rpb25JZCkgPT4ge1xuICAgICAgICAgICAgbGV0IGVuZHBvaW50ID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge307XG4gICAgICAgICAgICBjb25zdCBlbmRwb2ludElkID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludElkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgY29uc3QgbGFuZ3VhZ2UgPSBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGlmIChlbmRwb2ludElkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlbmRwb2ludCB8fCBlbmRwb2ludC5zZWFyY2goUXVlcnlQYXJhbWV0ZXJOYW1lcy5EZXBsb3ltZW50SWRQYXJhbU5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtc1tRdWVyeVBhcmFtZXRlck5hbWVzLkRlcGxveW1lbnRJZFBhcmFtTmFtZV0gPSBlbmRwb2ludElkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlbmRwb2ludCB8fCBlbmRwb2ludC5zZWFyY2goUXVlcnlQYXJhbWV0ZXJOYW1lcy5MYW5ndWFnZVBhcmFtTmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zW1F1ZXJ5UGFyYW1ldGVyTmFtZXMuTGFuZ3VhZ2VQYXJhbU5hbWVdID0gbGFuZ3VhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFlbmRwb2ludCB8fCBlbmRwb2ludC5zZWFyY2goUXVlcnlQYXJhbWV0ZXJOYW1lcy5Gb3JtYXRQYXJhbU5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zW1F1ZXJ5UGFyYW1ldGVyTmFtZXMuRm9ybWF0UGFyYW1OYW1lXSA9IGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KE91dHB1dEZvcm1hdFByb3BlcnR5TmFtZSwgT3V0cHV0Rm9ybWF0W091dHB1dEZvcm1hdC5TaW1wbGVdKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRDb21tb25VcmxQYXJhbXMoY29uZmlnLCBxdWVyeVBhcmFtcywgZW5kcG9pbnQpO1xuICAgICAgICAgICAgaWYgKCFlbmRwb2ludCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lvbiA9IGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVnaW9uLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3QgPSBcIndzczovL1wiICsgcmVnaW9uICsgXCIuc3R0LnNwZWVjaC5taWNyb3NvZnQuY29tXCI7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChjb25maWcucmVjb2duaXRpb25Nb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUmVjb2duaXRpb25Nb2RlLkNvbnZlcnNhdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShGb3JjZURpY3RhdGlvblByb3BlcnR5TmFtZSwgXCJmYWxzZVwiKSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludCA9IGhvc3QgKyB0aGlzLmRpY3RhdGlvblJlbGF0aXZlVXJpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQgPSBob3N0ICsgdGhpcy5jb252ZXJzYXRpb25SZWxhdGl2ZVVyaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFJlY29nbml0aW9uTW9kZS5EaWN0YXRpb246XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludCA9IGhvc3QgKyB0aGlzLmRpY3RhdGlvblJlbGF0aXZlVXJpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludCA9IGhvc3QgKyB0aGlzLmludGVyYWN0aXZlUmVsYXRpdmVVcmk7IC8vIGRlZmF1bHQgaXMgaW50ZXJhY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgIGhlYWRlcnNbYXV0aEluZm8uaGVhZGVyTmFtZV0gPSBhdXRoSW5mby50b2tlbjtcbiAgICAgICAgICAgIGhlYWRlcnNbUXVlcnlQYXJhbWV0ZXJOYW1lcy5Db25uZWN0aW9uSWRIZWFkZXJdID0gY29ubmVjdGlvbklkO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXZWJzb2NrZXRDb25uZWN0aW9uKGVuZHBvaW50LCBxdWVyeVBhcmFtcywgaGVhZGVycywgbmV3IFdlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIoKSwgUHJveHlJbmZvLmZyb21SZWNvZ25pemVyQ29uZmlnKGNvbmZpZyksIGNvbm5lY3Rpb25JZCk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGVlY2hDb25uZWN0aW9uRmFjdG9yeS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQXJndW1lbnROdWxsRXJyb3IsIENvbm5lY3Rpb25NZXNzYWdlIH0gZnJvbSBcIi4uL2NvbW1vbi9FeHBvcnRzXCI7XG5jb25zdCBQYXRoSGVhZGVyTmFtZSA9IFwicGF0aFwiO1xuY29uc3QgQ29udGVudFR5cGVIZWFkZXJOYW1lID0gXCJjb250ZW50LXR5cGVcIjtcbmNvbnN0IFJlcXVlc3RJZEhlYWRlck5hbWUgPSBcIngtcmVxdWVzdGlkXCI7XG5jb25zdCBSZXF1ZXN0VGltZXN0YW1wSGVhZGVyTmFtZSA9IFwieC10aW1lc3RhbXBcIjtcbmV4cG9ydCBjbGFzcyBTcGVlY2hDb25uZWN0aW9uTWVzc2FnZSBleHRlbmRzIENvbm5lY3Rpb25NZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlVHlwZSwgcGF0aCwgcmVxdWVzdElkLCBjb250ZW50VHlwZSwgYm9keSwgYWRkaXRpb25hbEhlYWRlcnMsIGlkKSB7XG4gICAgICAgIGlmICghcGF0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEVycm9yKFwicGF0aFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlcXVlc3RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEVycm9yKFwicmVxdWVzdElkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgICAgaGVhZGVyc1tQYXRoSGVhZGVyTmFtZV0gPSBwYXRoO1xuICAgICAgICBoZWFkZXJzW1JlcXVlc3RJZEhlYWRlck5hbWVdID0gcmVxdWVzdElkO1xuICAgICAgICBoZWFkZXJzW1JlcXVlc3RUaW1lc3RhbXBIZWFkZXJOYW1lXSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgaWYgKGNvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICBoZWFkZXJzW0NvbnRlbnRUeXBlSGVhZGVyTmFtZV0gPSBjb250ZW50VHlwZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWRkaXRpb25hbEhlYWRlcnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGVhZGVyTmFtZSBpbiBhZGRpdGlvbmFsSGVhZGVycykge1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbaGVhZGVyTmFtZV0gPSBhZGRpdGlvbmFsSGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICBzdXBlcihtZXNzYWdlVHlwZSwgYm9keSwgaGVhZGVycywgaWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIobWVzc2FnZVR5cGUsIGJvZHksIGhlYWRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdlBhdGggPSBwYXRoO1xuICAgICAgICB0aGlzLnByaXZSZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gICAgICAgIHRoaXMucHJpdkNvbnRlbnRUeXBlID0gY29udGVudFR5cGU7XG4gICAgICAgIHRoaXMucHJpdkFkZGl0aW9uYWxIZWFkZXJzID0gYWRkaXRpb25hbEhlYWRlcnM7XG4gICAgfVxuICAgIGdldCBwYXRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UGF0aDtcbiAgICB9XG4gICAgZ2V0IHJlcXVlc3RJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlcXVlc3RJZDtcbiAgICB9XG4gICAgZ2V0IGNvbnRlbnRUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2Q29udGVudFR5cGU7XG4gICAgfVxuICAgIGdldCBhZGRpdGlvbmFsSGVhZGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkFkZGl0aW9uYWxIZWFkZXJzO1xuICAgIH1cbn1cblNwZWVjaENvbm5lY3Rpb25NZXNzYWdlLmZyb21Db25uZWN0aW9uTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgbGV0IHBhdGggPSBudWxsO1xuICAgIGxldCByZXF1ZXN0SWQgPSBudWxsO1xuICAgIGxldCBjb250ZW50VHlwZSA9IG51bGw7XG4gICAgbGV0IHJlcXVlc3RUaW1lc3RhbXAgPSBudWxsO1xuICAgIGNvbnN0IGFkZGl0aW9uYWxIZWFkZXJzID0ge307XG4gICAgaWYgKG1lc3NhZ2UuaGVhZGVycykge1xuICAgICAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgaW4gbWVzc2FnZS5oZWFkZXJzKSB7XG4gICAgICAgICAgICBpZiAoaGVhZGVyTmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFBhdGhIZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aCA9IG1lc3NhZ2UuaGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpID09PSBSZXF1ZXN0SWRIZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkID0gbWVzc2FnZS5oZWFkZXJzW2hlYWRlck5hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFJlcXVlc3RUaW1lc3RhbXBIZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFRpbWVzdGFtcCA9IG1lc3NhZ2UuaGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpID09PSBDb250ZW50VHlwZUhlYWRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZSA9IG1lc3NhZ2UuaGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxIZWFkZXJzW2hlYWRlck5hbWVdID0gbWVzc2FnZS5oZWFkZXJzW2hlYWRlck5hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlKG1lc3NhZ2UubWVzc2FnZVR5cGUsIHBhdGgsIHJlcXVlc3RJZCwgY29udGVudFR5cGUsIG1lc3NhZ2UuYm9keSwgYWRkaXRpb25hbEhlYWRlcnMsIG1lc3NhZ2UuaWQpO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2UuSW50ZXJuYWwuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgSlNPTiB1c2VkIGluIHRoZSBzcGVlY2guY29udGV4dCBtZXNzYWdlIHNlbnQgdG8gdGhlIHNwZWVjaCBzZXJ2aWNlLlxuICogVGhlIGR5bmFtaWMgZ3JhbW1hciBpcyBhbHdheXMgcmVmcmVzaGVkIGZyb20gdGhlIGVuY2Fwc3VsYXRlZCBkeW5hbWljIGdyYW1tYXIgb2JqZWN0LlxuICovXG5leHBvcnQgY2xhc3MgU3BlZWNoQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IoZHluYW1pY0dyYW1tYXIpIHtcbiAgICAgICAgdGhpcy5wcml2Q29udGV4dCA9IHt9O1xuICAgICAgICB0aGlzLnByaXZEeW5hbWljR3JhbW1hciA9IGR5bmFtaWNHcmFtbWFyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgc2VjdGlvbiB0byB0aGUgc3BlZWNoLmNvbnRleHQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBzZWN0aW9uTmFtZSBOYW1lIG9mIHRoZSBzZWN0aW9uIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgSlNPTiBzZXJpYWxpemVhYmxlIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHZhbHVlLlxuICAgICAqL1xuICAgIHNldFNlY3Rpb24oc2VjdGlvbk5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJpdkNvbnRleHRbc2VjdGlvbk5hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgZGdpID0gdGhpcy5wcml2RHluYW1pY0dyYW1tYXIuZ2VuZXJhdGVHcmFtbWFyT2JqZWN0KCk7XG4gICAgICAgIHRoaXMuc2V0U2VjdGlvbihcImRnaVwiLCBkZ2kpO1xuICAgICAgICBjb25zdCByZXQgPSBKU09OLnN0cmluZ2lmeSh0aGlzLnByaXZDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwZWVjaENvbnRleHQuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IENhbmNlbGxhdGlvbkVycm9yQ29kZSwgT3V0cHV0Rm9ybWF0LCBQcm9wZXJ0eUNvbGxlY3Rpb24sIFByb3BlcnR5SWQsIFJlc3VsdFJlYXNvbiwgU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncywgU3BlZWNoUmVjb2duaXRpb25FdmVudEFyZ3MsIFNwZWVjaFJlY29nbml0aW9uUmVzdWx0LCB9IGZyb20gXCIuLi9zZGsvRXhwb3J0c1wiO1xuaW1wb3J0IHsgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlUHJvcGVydHlOYW1lLCBEZXRhaWxlZFNwZWVjaFBocmFzZSwgRW51bVRyYW5zbGF0aW9uLCBPdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUsIFJlY29nbml0aW9uU3RhdHVzLCBTZXJ2aWNlUmVjb2duaXplckJhc2UsIFNpbXBsZVNwZWVjaFBocmFzZSwgU3BlZWNoSHlwb3RoZXNpcywgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBTcGVlY2hTZXJ2aWNlUmVjb2duaXplciBleHRlbmRzIFNlcnZpY2VSZWNvZ25pemVyQmFzZSB7XG4gICAgY29uc3RydWN0b3IoYXV0aGVudGljYXRpb24sIGNvbm5lY3Rpb25GYWN0b3J5LCBhdWRpb1NvdXJjZSwgcmVjb2duaXplckNvbmZpZywgc3BlZWNoUmVjb2duaXplcikge1xuICAgICAgICBzdXBlcihhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvU291cmNlLCByZWNvZ25pemVyQ29uZmlnLCBzcGVlY2hSZWNvZ25pemVyKTtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoUmVjb2duaXplciA9IHNwZWVjaFJlY29nbml6ZXI7XG4gICAgfVxuICAgIHByb2Nlc3NUeXBlU3BlY2lmaWNNZXNzYWdlcyhjb25uZWN0aW9uTWVzc2FnZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxCYWNrKSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGNvbnN0IHJlc3VsdFByb3BzID0gbmV3IFByb3BlcnR5Q29sbGVjdGlvbigpO1xuICAgICAgICByZXN1bHRQcm9wcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VSZXNwb25zZV9Kc29uUmVzdWx0LCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSk7XG4gICAgICAgIHN3aXRjaCAoY29ubmVjdGlvbk1lc3NhZ2UucGF0aC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBjYXNlIFwic3BlZWNoLmh5cG90aGVzaXNcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzcGVlY2guZnJhZ21lbnRcIjpcbiAgICAgICAgICAgICAgICBjb25zdCBoeXBvdGhlc2lzID0gU3BlZWNoSHlwb3RoZXNpcy5mcm9tSlNPTihjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gaHlwb3RoZXNpcy5PZmZzZXQgKyB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0O1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdCh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5yZXF1ZXN0SWQsIFJlc3VsdFJlYXNvbi5SZWNvZ25pemluZ1NwZWVjaCwgaHlwb3RoZXNpcy5UZXh0LCBoeXBvdGhlc2lzLkR1cmF0aW9uLCBvZmZzZXQsIHVuZGVmaW5lZCwgY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHksIHJlc3VsdFByb3BzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vbkh5cG90aGVzaXMob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBldiA9IG5ldyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJncyhyZXN1bHQsIGh5cG90aGVzaXMuRHVyYXRpb24sIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2U3BlZWNoUmVjb2duaXplci5yZWNvZ25pemluZykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2U3BlZWNoUmVjb2duaXplci5yZWNvZ25pemluZyh0aGlzLnByaXZTcGVlY2hSZWNvZ25pemVyLCBldik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90IGdvaW5nIHRvIGxldCBlcnJvcnMgaW4gdGhlIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaXAgdGhpbmdzIHVwLlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInNwZWVjaC5waHJhc2VcIjpcbiAgICAgICAgICAgICAgICBjb25zdCBzaW1wbGUgPSBTaW1wbGVTcGVlY2hQaHJhc2UuZnJvbUpTT04oY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdFJlYXNvbiA9IEVudW1UcmFuc2xhdGlvbi5pbXBsVHJhbnNsYXRlUmVjb2duaXRpb25SZXN1bHQoc2ltcGxlLlJlY29nbml0aW9uU3RhdHVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vblBocmFzZVJlY29nbml6ZWQodGhpcy5wcml2UmVxdWVzdFNlc3Npb24uY3VycmVudFR1cm5BdWRpb09mZnNldCArIHNpbXBsZS5PZmZzZXQgKyBzaW1wbGUuRHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIGlmIChSZXN1bHRSZWFzb24uQ2FuY2VsZWQgPT09IHJlc3VsdFJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5jZWxSZWFzb24gPSBFbnVtVHJhbnNsYXRpb24uaW1wbFRyYW5zbGF0ZUNhbmNlbFJlc3VsdChzaW1wbGUuUmVjb2duaXRpb25TdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbFJlY29nbml0aW9uTG9jYWwoY2FuY2VsUmVhc29uLCBFbnVtVHJhbnNsYXRpb24uaW1wbFRyYW5zbGF0ZUNhbmNlbEVycm9yQ29kZShzaW1wbGUuUmVjb2duaXRpb25TdGF0dXMpLCB1bmRlZmluZWQsIHN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1NwZWVjaEVuZGVkICYmIHJlc3VsdFJlYXNvbiA9PT0gUmVzdWx0UmVhc29uLk5vTWF0Y2ggJiYgc2ltcGxlLlJlY29nbml0aW9uU3RhdHVzICE9PSBSZWNvZ25pdGlvblN0YXR1cy5Jbml0aWFsU2lsZW5jZVRpbWVvdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KE91dHB1dEZvcm1hdFByb3BlcnR5TmFtZSkgPT09IE91dHB1dEZvcm1hdFtPdXRwdXRGb3JtYXQuU2ltcGxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdCh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5yZXF1ZXN0SWQsIHJlc3VsdFJlYXNvbiwgc2ltcGxlLkRpc3BsYXlUZXh0LCBzaW1wbGUuRHVyYXRpb24sIHNpbXBsZS5PZmZzZXQgKyB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0LCB1bmRlZmluZWQsIGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5LCByZXN1bHRQcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXRhaWxlZCA9IERldGFpbGVkU3BlZWNoUGhyYXNlLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgU3BlZWNoUmVjb2duaXRpb25SZXN1bHQodGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCByZXN1bHRSZWFzb24sIGRldGFpbGVkLlJlY29nbml0aW9uU3RhdHVzID09PSBSZWNvZ25pdGlvblN0YXR1cy5TdWNjZXNzID8gZGV0YWlsZWQuTkJlc3RbMF0uRGlzcGxheSA6IHVuZGVmaW5lZCwgZGV0YWlsZWQuRHVyYXRpb24sIGRldGFpbGVkLk9mZnNldCArIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmN1cnJlbnRUdXJuQXVkaW9PZmZzZXQsIHVuZGVmaW5lZCwgY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHksIHJlc3VsdFByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzKHJlc3VsdCwgcmVzdWx0Lm9mZnNldCwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdlNwZWVjaFJlY29nbml6ZXIucmVjb2duaXplZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlNwZWVjaFJlY29nbml6ZXIucmVjb2duaXplZCh0aGlzLnByaXZTcGVlY2hSZWNvZ25pemVyLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVwb3J0IHJlc3VsdCB0byBwcm9taXNlLlxuICAgICAgICAgICAgICAgICAgICBpZiAoISFzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIWVycm9yQ2FsbEJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsQmFjayhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGludm9rZSB0aGUgY2FsbCBiYWNrIG9uY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaWYgaXQncyBzdWNjZXNzZnVsIGRvbid0IGludm9rZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVycm9yIGFmdGVyIHRoYXQuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxCYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDYW5jZWxzIHJlY29nbml0aW9uLlxuICAgIGNhbmNlbFJlY29nbml0aW9uKHNlc3Npb25JZCwgcmVxdWVzdElkLCBjYW5jZWxsYXRpb25SZWFzb24sIGVycm9yQ29kZSwgZXJyb3IsIGNhbmNlbFJlY29DYWxsYmFjaykge1xuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnR5Q29sbGVjdGlvbigpO1xuICAgICAgICBwcm9wZXJ0aWVzLnNldFByb3BlcnR5KENhbmNlbGxhdGlvbkVycm9yQ29kZVByb3BlcnR5TmFtZSwgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW2Vycm9yQ29kZV0pO1xuICAgICAgICBpZiAoISF0aGlzLnByaXZTcGVlY2hSZWNvZ25pemVyLmNhbmNlbGVkKSB7XG4gICAgICAgICAgICBjb25zdCBjYW5jZWxFdmVudCA9IG5ldyBTcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzKGNhbmNlbGxhdGlvblJlYXNvbiwgZXJyb3IsIGVycm9yQ29kZSwgdW5kZWZpbmVkLCBzZXNzaW9uSWQpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZTcGVlY2hSZWNvZ25pemVyLmNhbmNlbGVkKHRoaXMucHJpdlNwZWVjaFJlY29nbml6ZXIsIGNhbmNlbEV2ZW50KTtcbiAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoISFjYW5jZWxSZWNvQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdChyZXF1ZXN0SWQsIFJlc3VsdFJlYXNvbi5DYW5jZWxlZCwgdW5kZWZpbmVkLCAvLyBUZXh0XG4gICAgICAgICAgICB1bmRlZmluZWQsIC8vIERydWF0aW9uXG4gICAgICAgICAgICB1bmRlZmluZWQsIC8vIE9mZnNldFxuICAgICAgICAgICAgZXJyb3IsIHVuZGVmaW5lZCwgLy8gSnNvblxuICAgICAgICAgICAgcHJvcGVydGllcyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhbmNlbFJlY29DYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2IpIHsgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGVlY2hTZXJ2aWNlUmVjb2duaXplci5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUHJveHlJbmZvLCBXZWJzb2NrZXRDb25uZWN0aW9uLCB9IGZyb20gXCIuLi9jb21tb24uYnJvd3Nlci9FeHBvcnRzXCI7XG5pbXBvcnQgeyBQcm9wZXJ0eUlkIH0gZnJvbSBcIi4uL3Nkay9FeHBvcnRzXCI7XG5pbXBvcnQgeyBDb25uZWN0aW9uRmFjdG9yeUJhc2UgfSBmcm9tIFwiLi9Db25uZWN0aW9uRmFjdG9yeUJhc2VcIjtcbmltcG9ydCB7IFdlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIsIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuaW1wb3J0IHsgUXVlcnlQYXJhbWV0ZXJOYW1lcyB9IGZyb20gXCIuL1F1ZXJ5UGFyYW1ldGVyTmFtZXNcIjtcbmNvbnN0IFRlc3RIb29rc1BhcmFtTmFtZSA9IFwidGVzdGhvb2tzXCI7XG5jb25zdCBDb25uZWN0aW9uSWRIZWFkZXIgPSBcIlgtQ29ubmVjdGlvbklkXCI7XG5leHBvcnQgY2xhc3MgVHJhbnNsYXRpb25Db25uZWN0aW9uRmFjdG9yeSBleHRlbmRzIENvbm5lY3Rpb25GYWN0b3J5QmFzZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY3JlYXRlID0gKGNvbmZpZywgYXV0aEluZm8sIGNvbm5lY3Rpb25JZCkgPT4ge1xuICAgICAgICAgICAgbGV0IGVuZHBvaW50ID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGlmICghZW5kcG9pbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWdpb24gPSBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbiwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBlbmRwb2ludCA9IFwid3NzOi8vXCIgKyByZWdpb24gKyBcIi5zMnMuc3BlZWNoLm1pY3Jvc29mdC5jb20vc3BlZWNoL3RyYW5zbGF0aW9uL2NvZ25pdGl2ZXNlcnZpY2VzL3YxXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBmcm9tOiBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSksXG4gICAgICAgICAgICAgICAgdG86IGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Ub0xhbmd1YWdlcyksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zZXRDb21tb25VcmxQYXJhbXMoY29uZmlnLCBxdWVyeVBhcmFtcywgZW5kcG9pbnQpO1xuICAgICAgICAgICAgdGhpcy5zZXRVcmxQYXJhbWV0ZXIoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlUmVzcG9uc2VfVHJhbnNsYXRpb25SZXF1ZXN0U3RhYmxlUGFydGlhbFJlc3VsdCwgUXVlcnlQYXJhbWV0ZXJOYW1lcy5TdGFibGVUcmFuc2xhdGlvbiwgY29uZmlnLCBxdWVyeVBhcmFtcywgZW5kcG9pbnQpO1xuICAgICAgICAgICAgY29uc3Qgdm9pY2VOYW1lID0gXCJ2b2ljZVwiO1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZU5hbWUgPSBcImZlYXR1cmVzXCI7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblZvaWNlLCB1bmRlZmluZWQpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtc1t2b2ljZU5hbWVdID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblZvaWNlKTtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtc1tmZWF0dXJlTmFtZV0gPSBcInRleHR0b3NwZWVjaFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgaGVhZGVyc1thdXRoSW5mby5oZWFkZXJOYW1lXSA9IGF1dGhJbmZvLnRva2VuO1xuICAgICAgICAgICAgaGVhZGVyc1tDb25uZWN0aW9uSWRIZWFkZXJdID0gY29ubmVjdGlvbklkO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXZWJzb2NrZXRDb25uZWN0aW9uKGVuZHBvaW50LCBxdWVyeVBhcmFtcywgaGVhZGVycywgbmV3IFdlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIoKSwgUHJveHlJbmZvLmZyb21SZWNvZ25pemVyQ29uZmlnKGNvbmZpZyksIGNvbm5lY3Rpb25JZCk7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvbkNvbm5lY3Rpb25GYWN0b3J5LmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBNZXNzYWdlVHlwZSwgVHJhbnNsYXRpb25TdGF0dXMsIH0gZnJvbSBcIi4uL2NvbW1vbi9FeHBvcnRzXCI7XG5pbXBvcnQgeyBDYW5jZWxsYXRpb25FcnJvckNvZGUsIENhbmNlbGxhdGlvblJlYXNvbiwgUHJvcGVydHlDb2xsZWN0aW9uLCBQcm9wZXJ0eUlkLCBSZXN1bHRSZWFzb24sIFRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncywgVHJhbnNsYXRpb25SZWNvZ25pdGlvbkV2ZW50QXJncywgVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdCwgVHJhbnNsYXRpb25zLCBUcmFuc2xhdGlvblN5bnRoZXNpc0V2ZW50QXJncywgVHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHQsIH0gZnJvbSBcIi4uL3Nkay9FeHBvcnRzXCI7XG5pbXBvcnQgeyBDYW5jZWxsYXRpb25FcnJvckNvZGVQcm9wZXJ0eU5hbWUsIEVudW1UcmFuc2xhdGlvbiwgUmVjb2duaXRpb25TdGF0dXMsIFNlcnZpY2VSZWNvZ25pemVyQmFzZSwgU3ludGhlc2lzU3RhdHVzLCBUcmFuc2xhdGlvbkh5cG90aGVzaXMsIFRyYW5zbGF0aW9uUGhyYXNlLCBUcmFuc2xhdGlvblN5bnRoZXNpc0VuZCwgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvblNlcnZpY2VSZWNvZ25pemVyIGV4dGVuZHMgU2VydmljZVJlY29nbml6ZXJCYXNlIHtcbiAgICBjb25zdHJ1Y3RvcihhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvU291cmNlLCByZWNvZ25pemVyQ29uZmlnLCB0cmFuc2xhdGlvblJlY29nbml6ZXIpIHtcbiAgICAgICAgc3VwZXIoYXV0aGVudGljYXRpb24sIGNvbm5lY3Rpb25GYWN0b3J5LCBhdWRpb1NvdXJjZSwgcmVjb2duaXplckNvbmZpZywgdHJhbnNsYXRpb25SZWNvZ25pemVyKTtcbiAgICAgICAgdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyID0gdHJhbnNsYXRpb25SZWNvZ25pemVyO1xuICAgIH1cbiAgICBwcm9jZXNzVHlwZVNwZWNpZmljTWVzc2FnZXMoY29ubmVjdGlvbk1lc3NhZ2UsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsQmFjaykge1xuICAgICAgICBjb25zdCByZXN1bHRQcm9wcyA9IG5ldyBQcm9wZXJ0eUNvbGxlY3Rpb24oKTtcbiAgICAgICAgaWYgKGNvbm5lY3Rpb25NZXNzYWdlLm1lc3NhZ2VUeXBlID09PSBNZXNzYWdlVHlwZS5UZXh0KSB7XG4gICAgICAgICAgICByZXN1bHRQcm9wcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VSZXNwb25zZV9Kc29uUmVzdWx0LCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChjb25uZWN0aW9uTWVzc2FnZS5wYXRoLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0cmFuc2xhdGlvbi5oeXBvdGhlc2lzXCI6XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5maXJlRXZlbnRGb3JSZXN1bHQoVHJhbnNsYXRpb25IeXBvdGhlc2lzLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KSwgcmVzdWx0UHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uSHlwb3RoZXNpcyh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0ICsgcmVzdWx0Lm9mZnNldCk7XG4gICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLnJlY29nbml6aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIucmVjb2duaXppbmcodGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBnb2luZyB0byBsZXQgZXJyb3JzIGluIHRoZSBldmVudCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ0cmFuc2xhdGlvbi5waHJhc2VcIjpcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2xhdGVkUGhyYXNlID0gVHJhbnNsYXRpb25QaHJhc2UuZnJvbUpTT04oY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uUGhyYXNlUmVjb2duaXplZCh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0ICsgdHJhbnNsYXRlZFBocmFzZS5PZmZzZXQgKyB0cmFuc2xhdGVkUGhyYXNlLkR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRlZFBocmFzZS5SZWNvZ25pdGlvblN0YXR1cyA9PT0gUmVjb2duaXRpb25TdGF0dXMuU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBPSywgdGhlIHJlY29nbml0aW9uIHdhcyBzdWNjZXNzZnVsLiBIb3cnZCB0aGUgdHJhbnNsYXRpb24gZG8/XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZmlyZUV2ZW50Rm9yUmVzdWx0KHRyYW5zbGF0ZWRQaHJhc2UsIHJlc3VsdFByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLnJlY29nbml6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLnJlY29nbml6ZWQodGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaXAgdGhpbmdzIHVwLlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcG9ydCByZXN1bHQgdG8gcHJvbWlzZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhZXJyb3JDYWxsQmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxCYWNrKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgaW52b2tlIHRoZSBjYWxsIGJhY2sgb25jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBpZiBpdCdzIHN1Y2Nlc3NmdWwgZG9uJ3QgaW52b2tlIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3IgYWZ0ZXIgdGhhdC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbEJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWFzb24gPSBFbnVtVHJhbnNsYXRpb24uaW1wbFRyYW5zbGF0ZVJlY29nbml0aW9uUmVzdWx0KHRyYW5zbGF0ZWRQaHJhc2UuUmVjb2duaXRpb25TdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdCh1bmRlZmluZWQsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgcmVhc29uLCB0cmFuc2xhdGVkUGhyYXNlLlRleHQsIHRyYW5zbGF0ZWRQaHJhc2UuRHVyYXRpb24sIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmN1cnJlbnRUdXJuQXVkaW9PZmZzZXQgKyB0cmFuc2xhdGVkUGhyYXNlLk9mZnNldCwgdW5kZWZpbmVkLCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSwgcmVzdWx0UHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVhc29uID09PSBSZXN1bHRSZWFzb24uQ2FuY2VsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbmNlbFJlYXNvbiA9IEVudW1UcmFuc2xhdGlvbi5pbXBsVHJhbnNsYXRlQ2FuY2VsUmVzdWx0KHRyYW5zbGF0ZWRQaHJhc2UuUmVjb2duaXRpb25TdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxSZWNvZ25pdGlvbkxvY2FsKGNhbmNlbFJlYXNvbiwgRW51bVRyYW5zbGF0aW9uLmltcGxUcmFuc2xhdGVDYW5jZWxFcnJvckNvZGUodHJhbnNsYXRlZFBocmFzZS5SZWNvZ25pdGlvblN0YXR1cyksIHVuZGVmaW5lZCwgc3VjY2Vzc0NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzU3BlZWNoRW5kZWQgJiYgcmVhc29uID09PSBSZXN1bHRSZWFzb24uTm9NYXRjaCAmJiB0cmFuc2xhdGVkUGhyYXNlLlJlY29nbml0aW9uU3RhdHVzICE9PSBSZWNvZ25pdGlvblN0YXR1cy5Jbml0aWFsU2lsZW5jZVRpbWVvdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXYgPSBuZXcgVHJhbnNsYXRpb25SZWNvZ25pdGlvbkV2ZW50QXJncyhyZXN1bHQsIHJlc3VsdC5vZmZzZXQsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLnJlY29nbml6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplci5yZWNvZ25pemVkKHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplciwgZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBnb2luZyB0byBsZXQgZXJyb3JzIGluIHRoZSBldmVudCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlcG9ydCByZXN1bHQgdG8gcHJvbWlzZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIXN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnJvckNhbGxCYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxCYWNrKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgaW52b2tlIHRoZSBjYWxsIGJhY2sgb25jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaWYgaXQncyBzdWNjZXNzZnVsIGRvbid0IGludm9rZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlcnJvciBhZnRlciB0aGF0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxCYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInRyYW5zbGF0aW9uLnN5bnRoZXNpc1wiOlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFN5bnRoZXNpc0F1ZGlvKGNvbm5lY3Rpb25NZXNzYWdlLmJpbmFyeUJvZHksIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidHJhbnNsYXRpb24uc3ludGhlc2lzLmVuZFwiOlxuICAgICAgICAgICAgICAgIGNvbnN0IHN5bnRoRW5kID0gVHJhbnNsYXRpb25TeW50aGVzaXNFbmQuZnJvbUpTT04oY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoc3ludGhFbmQuU3ludGhlc2lzU3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgU3ludGhlc2lzU3RhdHVzLkVycm9yOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLnN5bnRoZXNpemluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBUcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdChSZXN1bHRSZWFzb24uQ2FuY2VsZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0RXZlbnQgPSBuZXcgVHJhbnNsYXRpb25TeW50aGVzaXNFdmVudEFyZ3MocmVzdWx0LCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplci5zeW50aGVzaXppbmcodGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLCByZXRFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIuY2FuY2VsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbmQgcmFpc2UgYSBjYW5jZWxlZCBldmVudCB0byBzZW5kIHRoZSByaWNoKGVyKSBlcnJvciBtZXNzYWdlIGJhY2suXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FuY2VsZWRSZXN1bHQgPSBuZXcgVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzKHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCwgQ2FuY2VsbGF0aW9uUmVhc29uLkVycm9yLCBzeW50aEVuZC5GYWlsdXJlUmVhc29uLCBDYW5jZWxsYXRpb25FcnJvckNvZGUuU2VydmljZUVycm9yLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIuY2FuY2VsZWQodGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLCBjYW5jZWxlZFJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBTeW50aGVzaXNTdGF0dXMuU3VjY2VzczpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFN5bnRoZXNpc0F1ZGlvKHVuZGVmaW5lZCwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDYW5jZWxzIHJlY29nbml0aW9uLlxuICAgIGNhbmNlbFJlY29nbml0aW9uKHNlc3Npb25JZCwgcmVxdWVzdElkLCBjYW5jZWxsYXRpb25SZWFzb24sIGVycm9yQ29kZSwgZXJyb3IsIGNhbmNlbFJlY29DYWxsYmFjaykge1xuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gbmV3IFByb3BlcnR5Q29sbGVjdGlvbigpO1xuICAgICAgICBwcm9wZXJ0aWVzLnNldFByb3BlcnR5KENhbmNlbGxhdGlvbkVycm9yQ29kZVByb3BlcnR5TmFtZSwgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW2Vycm9yQ29kZV0pO1xuICAgICAgICBpZiAoISF0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIuY2FuY2VsZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbEV2ZW50ID0gbmV3IFRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyhzZXNzaW9uSWQsIGNhbmNlbGxhdGlvblJlYXNvbiwgZXJyb3IsIGVycm9yQ29kZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLmNhbmNlbGVkKHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplciwgY2FuY2VsRXZlbnQpO1xuICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghIWNhbmNlbFJlY29DYWxsYmFjaykge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFRyYW5zbGF0aW9uUmVjb2duaXRpb25SZXN1bHQodW5kZWZpbmVkLCAvLyBUcmFuc2xhdGlvbnNcbiAgICAgICAgICAgIHJlcXVlc3RJZCwgUmVzdWx0UmVhc29uLkNhbmNlbGVkLCB1bmRlZmluZWQsIC8vIFRleHRcbiAgICAgICAgICAgIHVuZGVmaW5lZCwgLy8gRHJ1YXRpb25cbiAgICAgICAgICAgIHVuZGVmaW5lZCwgLy8gT2Zmc2V0XG4gICAgICAgICAgICBlcnJvciwgdW5kZWZpbmVkLCAvLyBKc29uXG4gICAgICAgICAgICBwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsUmVjb0NhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfYikgeyB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmlyZUV2ZW50Rm9yUmVzdWx0KHNlcnZpY2VSZXN1bHQsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucztcbiAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gc2VydmljZVJlc3VsdC5UcmFuc2xhdGlvbi5UcmFuc2xhdGlvbnMpIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9ucyA9IG5ldyBUcmFuc2xhdGlvbnMoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdHJhbnNsYXRpb24gb2Ygc2VydmljZVJlc3VsdC5UcmFuc2xhdGlvbi5UcmFuc2xhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbnMuc2V0KHRyYW5zbGF0aW9uLkxhbmd1YWdlLCB0cmFuc2xhdGlvbi5UZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0UmVhc29uO1xuICAgICAgICBpZiAoc2VydmljZVJlc3VsdCBpbnN0YW5jZW9mIFRyYW5zbGF0aW9uUGhyYXNlKSB7XG4gICAgICAgICAgICBpZiAoc2VydmljZVJlc3VsdC5UcmFuc2xhdGlvbi5UcmFuc2xhdGlvblN0YXR1cyA9PT0gVHJhbnNsYXRpb25TdGF0dXMuU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHJlc3VsdFJlYXNvbiA9IFJlc3VsdFJlYXNvbi5UcmFuc2xhdGVkU3BlZWNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0UmVhc29uID0gUmVzdWx0UmVhc29uLlJlY29nbml6ZWRTcGVlY2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRSZWFzb24gPSBSZXN1bHRSZWFzb24uVHJhbnNsYXRpbmdTcGVlY2g7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gc2VydmljZVJlc3VsdC5PZmZzZXQgKyB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0O1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdCh0cmFuc2xhdGlvbnMsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgcmVzdWx0UmVhc29uLCBzZXJ2aWNlUmVzdWx0LlRleHQsIHNlcnZpY2VSZXN1bHQuRHVyYXRpb24sIG9mZnNldCwgc2VydmljZVJlc3VsdC5UcmFuc2xhdGlvbi5GYWlsdXJlUmVhc29uLCBKU09OLnN0cmluZ2lmeShzZXJ2aWNlUmVzdWx0KSwgcHJvcGVydGllcyk7XG4gICAgICAgIGNvbnN0IGV2ID0gbmV3IFRyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3MocmVzdWx0LCBvZmZzZXQsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgIHJldHVybiBldjtcbiAgICB9XG4gICAgc2VuZFN5bnRoZXNpc0F1ZGlvKGF1ZGlvLCBzZXNzaW9uSWQpIHtcbiAgICAgICAgY29uc3QgcmVhc29uID0gKHVuZGVmaW5lZCA9PT0gYXVkaW8pID8gUmVzdWx0UmVhc29uLlN5bnRoZXNpemluZ0F1ZGlvQ29tcGxldGVkIDogUmVzdWx0UmVhc29uLlN5bnRoZXNpemluZ0F1ZGlvO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHQocmVhc29uLCBhdWRpbyk7XG4gICAgICAgIGNvbnN0IHJldEV2ZW50ID0gbmV3IFRyYW5zbGF0aW9uU3ludGhlc2lzRXZlbnRBcmdzKHJlc3VsdCwgc2Vzc2lvbklkKTtcbiAgICAgICAgaWYgKCEhdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLnN5bnRoZXNpemluZykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIuc3ludGhlc2l6aW5nKHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplciwgcmV0RXZlbnQpO1xuICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgIC8vIHRyaXAgdGhpbmdzIHVwLlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvblNlcnZpY2VSZWNvZ25pemVyLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIERlZmluZXMgdHJhbnNsYXRpb24gc3RhdHVzLlxuICogQGNsYXNzIFRyYW5zbGF0aW9uU3RhdHVzXG4gKi9cbmV4cG9ydCB2YXIgVHJhbnNsYXRpb25TdGF0dXM7XG4oZnVuY3Rpb24gKFRyYW5zbGF0aW9uU3RhdHVzKSB7XG4gICAgLyoqXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvblN0YXR1cy5TdWNjZXNzXG4gICAgICovXG4gICAgVHJhbnNsYXRpb25TdGF0dXNbVHJhbnNsYXRpb25TdGF0dXNbXCJTdWNjZXNzXCJdID0gMF0gPSBcIlN1Y2Nlc3NcIjtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uU3RhdHVzLkVycm9yXG4gICAgICovXG4gICAgVHJhbnNsYXRpb25TdGF0dXNbVHJhbnNsYXRpb25TdGF0dXNbXCJFcnJvclwiXSA9IDFdID0gXCJFcnJvclwiO1xufSkoVHJhbnNsYXRpb25TdGF0dXMgfHwgKFRyYW5zbGF0aW9uU3RhdHVzID0ge30pKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRpb25TdGF0dXMuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IENvbm5lY3Rpb25NZXNzYWdlLCBEZWZlcnJlZCwgTWVzc2FnZVR5cGUsIFJhd1dlYnNvY2tldE1lc3NhZ2UsIH0gZnJvbSBcIi4uL2NvbW1vbi9FeHBvcnRzXCI7XG5jb25zdCBDUkxGID0gXCJcXHJcXG5cIjtcbmV4cG9ydCBjbGFzcyBXZWJzb2NrZXRNZXNzYWdlRm9ybWF0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50b0Nvbm5lY3Rpb25NZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmVycmFsID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm1lc3NhZ2VUeXBlID09PSBNZXNzYWdlVHlwZS5UZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRNZXNzYWdlID0gbWVzc2FnZS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJvZHkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlckJvZHlTcGxpdCA9IHRleHRNZXNzYWdlLnNwbGl0KFwiXFxyXFxuXFxyXFxuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlckJvZHlTcGxpdCAmJiBoZWFkZXJCb2R5U3BsaXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB0aGlzLnBhcnNlSGVhZGVycyhoZWFkZXJCb2R5U3BsaXRbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXJCb2R5U3BsaXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5ID0gaGVhZGVyQm9keVNwbGl0WzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJhbC5yZXNvbHZlKG5ldyBDb25uZWN0aW9uTWVzc2FnZShtZXNzYWdlLm1lc3NhZ2VUeXBlLCBib2R5LCBoZWFkZXJzLCBtZXNzYWdlLmlkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1lc3NhZ2UubWVzc2FnZVR5cGUgPT09IE1lc3NhZ2VUeXBlLkJpbmFyeSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBiaW5hcnlNZXNzYWdlID0gbWVzc2FnZS5iaW5hcnlDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICBsZXQgaGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBsZXQgYm9keSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYmluYXJ5TWVzc2FnZSB8fCBiaW5hcnlNZXNzYWdlLmJ5dGVMZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJpbmFyeSBtZXNzYWdlIGZvcm1hdC4gSGVhZGVyIGxlbmd0aCBtaXNzaW5nLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhiaW5hcnlNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyTGVuZ3RoID0gZGF0YVZpZXcuZ2V0SW50MTYoMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiaW5hcnlNZXNzYWdlLmJ5dGVMZW5ndGggPCBoZWFkZXJMZW5ndGggKyAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJpbmFyeSBtZXNzYWdlIGZvcm1hdC4gSGVhZGVyIGNvbnRlbnQgbWlzc2luZy5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlcnNTdHJpbmcgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlYWRlckxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzU3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGRhdGFWaWV3KS5nZXRJbnQ4KGkgKyAyKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IHRoaXMucGFyc2VIZWFkZXJzKGhlYWRlcnNTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmluYXJ5TWVzc2FnZS5ieXRlTGVuZ3RoID4gaGVhZGVyTGVuZ3RoICsgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IGJpbmFyeU1lc3NhZ2Uuc2xpY2UoMiArIGhlYWRlckxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyYWwucmVzb2x2ZShuZXcgQ29ubmVjdGlvbk1lc3NhZ2UobWVzc2FnZS5tZXNzYWdlVHlwZSwgYm9keSwgaGVhZGVycywgbWVzc2FnZS5pZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyYWwucmVqZWN0KGBFcnJvciBmb3JtYXR0aW5nIHRoZSBtZXNzYWdlLiBFcnJvcjogJHtlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmFsLnByb21pc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mcm9tQ29ubmVjdGlvbk1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVmZXJyYWwgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UubWVzc2FnZVR5cGUgPT09IE1lc3NhZ2VUeXBlLlRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGAke3RoaXMubWFrZUhlYWRlcnMobWVzc2FnZSl9JHtDUkxGfSR7bWVzc2FnZS50ZXh0Qm9keSA/IG1lc3NhZ2UudGV4dEJvZHkgOiBcIlwifWA7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmFsLnJlc29sdmUobmV3IFJhd1dlYnNvY2tldE1lc3NhZ2UoTWVzc2FnZVR5cGUuVGV4dCwgcGF5bG9hZCwgbWVzc2FnZS5pZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtZXNzYWdlLm1lc3NhZ2VUeXBlID09PSBNZXNzYWdlVHlwZS5CaW5hcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyc1N0cmluZyA9IHRoaXMubWFrZUhlYWRlcnMobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBtZXNzYWdlLmJpbmFyeUJvZHk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlckludDhBcnJheSA9IG5ldyBJbnQ4QXJyYXkodGhpcy5zdHJpbmdUb0FycmF5QnVmZmVyKGhlYWRlcnNTdHJpbmcpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBBcnJheUJ1ZmZlcigyICsgaGVhZGVySW50OEFycmF5LmJ5dGVMZW5ndGggKyAoY29udGVudCA/IGNvbnRlbnQuYnl0ZUxlbmd0aCA6IDApKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEludDE2KDAsIGhlYWRlckludDhBcnJheS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlYWRlckludDhBcnJheS5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEludDgoMiArIGksIGhlYWRlckludDhBcnJheVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvZHlJbnQ4QXJyYXkgPSBuZXcgSW50OEFycmF5KGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5SW50OEFycmF5LmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEludDgoMiArIGhlYWRlckludDhBcnJheS5ieXRlTGVuZ3RoICsgaSwgYm9keUludDhBcnJheVtpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyYWwucmVzb2x2ZShuZXcgUmF3V2Vic29ja2V0TWVzc2FnZShNZXNzYWdlVHlwZS5CaW5hcnksIHBheWxvYWQsIG1lc3NhZ2UuaWQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGRlZmVycmFsLnJlamVjdChgRXJyb3IgZm9ybWF0dGluZyB0aGUgbWVzc2FnZS4gJHtlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmFsLnByb21pc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tYWtlSGVhZGVycyA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc1N0cmluZyA9IFwiXCI7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBoZWFkZXIgaW4gbWVzc2FnZS5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNTdHJpbmcgKz0gYCR7aGVhZGVyfTogJHttZXNzYWdlLmhlYWRlcnNbaGVhZGVyXX0ke0NSTEZ9YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBoZWFkZXJzU3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBhcnNlSGVhZGVycyA9IChoZWFkZXJzU3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgICAgICAgICBpZiAoaGVhZGVyc1N0cmluZykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlck1hdGNoZXMgPSBoZWFkZXJzU3RyaW5nLm1hdGNoKC9bXlxcclxcbl0rL2cpO1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIGhlYWRlck1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IGhlYWRlci5pbmRleE9mKFwiOlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJOYW1lID0gc2VwYXJhdG9ySW5kZXggPiAwID8gaGVhZGVyLnN1YnN0cigwLCBzZXBhcmF0b3JJbmRleCkudHJpbSgpLnRvTG93ZXJDYXNlKCkgOiBoZWFkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyVmFsdWUgPSBzZXBhcmF0b3JJbmRleCA+IDAgJiYgaGVhZGVyLmxlbmd0aCA+IChzZXBhcmF0b3JJbmRleCArIDEpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyLnN1YnN0cihzZXBhcmF0b3JJbmRleCArIDEpLnRyaW0oKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1toZWFkZXJOYW1lXSA9IGhlYWRlclZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RyaW5nVG9BcnJheUJ1ZmZlciA9IChzdHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihzdHIubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmlldy5zZXRVaW50OChpLCBzdHIuY2hhckNvZGVBdChpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9V2Vic29ja2V0TWVzc2FnZUZvcm1hdHRlci5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgRXZlbnRUeXBlLCBQbGF0Zm9ybUV2ZW50IH0gZnJvbSBcIi4vUGxhdGZvcm1FdmVudFwiO1xuZXhwb3J0IGNsYXNzIEF1ZGlvU291cmNlRXZlbnQgZXh0ZW5kcyBQbGF0Zm9ybUV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihldmVudE5hbWUsIGF1ZGlvU291cmNlSWQsIGV2ZW50VHlwZSA9IEV2ZW50VHlwZS5JbmZvKSB7XG4gICAgICAgIHN1cGVyKGV2ZW50TmFtZSwgZXZlbnRUeXBlKTtcbiAgICAgICAgdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCA9IGF1ZGlvU291cmNlSWQ7XG4gICAgfVxuICAgIGdldCBhdWRpb1NvdXJjZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Tb3VyY2VJZDtcbiAgICB9XG59XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBBdWRpb1NvdXJjZUluaXRpYWxpemluZ0V2ZW50IGV4dGVuZHMgQXVkaW9Tb3VyY2VFdmVudCB7XG4gICAgY29uc3RydWN0b3IoYXVkaW9Tb3VyY2VJZCkge1xuICAgICAgICBzdXBlcihcIkF1ZGlvU291cmNlSW5pdGlhbGl6aW5nRXZlbnRcIiwgYXVkaW9Tb3VyY2VJZCk7XG4gICAgfVxufVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgQXVkaW9Tb3VyY2VSZWFkeUV2ZW50IGV4dGVuZHMgQXVkaW9Tb3VyY2VFdmVudCB7XG4gICAgY29uc3RydWN0b3IoYXVkaW9Tb3VyY2VJZCkge1xuICAgICAgICBzdXBlcihcIkF1ZGlvU291cmNlUmVhZHlFdmVudFwiLCBhdWRpb1NvdXJjZUlkKTtcbiAgICB9XG59XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBBdWRpb1NvdXJjZU9mZkV2ZW50IGV4dGVuZHMgQXVkaW9Tb3VyY2VFdmVudCB7XG4gICAgY29uc3RydWN0b3IoYXVkaW9Tb3VyY2VJZCkge1xuICAgICAgICBzdXBlcihcIkF1ZGlvU291cmNlT2ZmRXZlbnRcIiwgYXVkaW9Tb3VyY2VJZCk7XG4gICAgfVxufVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgQXVkaW9Tb3VyY2VFcnJvckV2ZW50IGV4dGVuZHMgQXVkaW9Tb3VyY2VFdmVudCB7XG4gICAgY29uc3RydWN0b3IoYXVkaW9Tb3VyY2VJZCwgZXJyb3IpIHtcbiAgICAgICAgc3VwZXIoXCJBdWRpb1NvdXJjZUVycm9yRXZlbnRcIiwgYXVkaW9Tb3VyY2VJZCwgRXZlbnRUeXBlLkVycm9yKTtcbiAgICAgICAgdGhpcy5wcml2RXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gICAgZ2V0IGVycm9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2RXJyb3I7XG4gICAgfVxufVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgQXVkaW9TdHJlYW1Ob2RlRXZlbnQgZXh0ZW5kcyBBdWRpb1NvdXJjZUV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihldmVudE5hbWUsIGF1ZGlvU291cmNlSWQsIGF1ZGlvTm9kZUlkKSB7XG4gICAgICAgIHN1cGVyKGV2ZW50TmFtZSwgYXVkaW9Tb3VyY2VJZCk7XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvTm9kZUlkID0gYXVkaW9Ob2RlSWQ7XG4gICAgfVxuICAgIGdldCBhdWRpb05vZGVJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkF1ZGlvTm9kZUlkO1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIEF1ZGlvU3RyZWFtTm9kZUF0dGFjaGluZ0V2ZW50IGV4dGVuZHMgQXVkaW9TdHJlYW1Ob2RlRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKGF1ZGlvU291cmNlSWQsIGF1ZGlvTm9kZUlkKSB7XG4gICAgICAgIHN1cGVyKFwiQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnRcIiwgYXVkaW9Tb3VyY2VJZCwgYXVkaW9Ob2RlSWQpO1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIEF1ZGlvU3RyZWFtTm9kZUF0dGFjaGVkRXZlbnQgZXh0ZW5kcyBBdWRpb1N0cmVhbU5vZGVFdmVudCB7XG4gICAgY29uc3RydWN0b3IoYXVkaW9Tb3VyY2VJZCwgYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgc3VwZXIoXCJBdWRpb1N0cmVhbU5vZGVBdHRhY2hlZEV2ZW50XCIsIGF1ZGlvU291cmNlSWQsIGF1ZGlvTm9kZUlkKTtcbiAgICB9XG59XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBBdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50IGV4dGVuZHMgQXVkaW9TdHJlYW1Ob2RlRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKGF1ZGlvU291cmNlSWQsIGF1ZGlvTm9kZUlkKSB7XG4gICAgICAgIHN1cGVyKFwiQXVkaW9TdHJlYW1Ob2RlRGV0YWNoZWRFdmVudFwiLCBhdWRpb1NvdXJjZUlkLCBhdWRpb05vZGVJZCk7XG4gICAgfVxufVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgQXVkaW9TdHJlYW1Ob2RlRXJyb3JFdmVudCBleHRlbmRzIEF1ZGlvU3RyZWFtTm9kZUV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihhdWRpb1NvdXJjZUlkLCBhdWRpb05vZGVJZCwgZXJyb3IpIHtcbiAgICAgICAgc3VwZXIoXCJBdWRpb1N0cmVhbU5vZGVFcnJvckV2ZW50XCIsIGF1ZGlvU291cmNlSWQsIGF1ZGlvTm9kZUlkKTtcbiAgICAgICAgdGhpcy5wcml2RXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gICAgZ2V0IGVycm9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2RXJyb3I7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdWRpb1NvdXJjZUV2ZW50cy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuZXhwb3J0IGNsYXNzIENodW5rZWRBcnJheUJ1ZmZlclN0cmVhbSBleHRlbmRzIFN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0Q2h1bmtTaXplLCBzdHJlYW1JZCkge1xuICAgICAgICBzdXBlcihzdHJlYW1JZCk7XG4gICAgICAgIHRoaXMucHJpdlRhcmdldENodW5rU2l6ZSA9IHRhcmdldENodW5rU2l6ZTtcbiAgICAgICAgdGhpcy5wcml2TmV4dEJ1ZmZlclJlYWR5Qnl0ZXMgPSAwO1xuICAgIH1cbiAgICB3cml0ZVN0cmVhbUNodW5rKGNodW5rKSB7XG4gICAgICAgIC8vIE5vIHBlbmRpbmcgd3JpdGUsIGFuZCB0aGUgYnVmZmVyIGlzIHRoZSByaWdodCBzaXplIHNvIHdyaXRlIGl0LlxuICAgICAgICBpZiAoY2h1bmsuaXNFbmQgfHxcbiAgICAgICAgICAgICgwID09PSB0aGlzLnByaXZOZXh0QnVmZmVyUmVhZHlCeXRlcyAmJiBjaHVuay5idWZmZXIuYnl0ZUxlbmd0aCA9PT0gdGhpcy5wcml2VGFyZ2V0Q2h1bmtTaXplKSkge1xuICAgICAgICAgICAgc3VwZXIud3JpdGVTdHJlYW1DaHVuayhjaHVuayk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJ5dGVzQ29waWVkRnJvbUJ1ZmZlciA9IDA7XG4gICAgICAgIHdoaWxlIChieXRlc0NvcGllZEZyb21CdWZmZXIgPCBjaHVuay5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgLy8gRmlsbCB0aGUgbmV4dCBidWZmZXIuXG4gICAgICAgICAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLnByaXZOZXh0QnVmZmVyVG9Xcml0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdk5leHRCdWZmZXJUb1dyaXRlID0gbmV3IEFycmF5QnVmZmVyKHRoaXMucHJpdlRhcmdldENodW5rU2l6ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2TmV4dEJ1ZmZlclN0YXJ0VGltZSA9IGNodW5rLnRpbWVSZWNlaXZlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpbmQgb3V0IGhvdyBtYW55IGJ5dGVzIHdlIGNhbiBjb3B5IGludG8gdGhlIHJlYWQgYnVmZmVyLlxuICAgICAgICAgICAgY29uc3QgYnl0ZXNUb0NvcHkgPSBNYXRoLm1pbihjaHVuay5idWZmZXIuYnl0ZUxlbmd0aCAtIGJ5dGVzQ29waWVkRnJvbUJ1ZmZlciwgdGhpcy5wcml2VGFyZ2V0Q2h1bmtTaXplIC0gdGhpcy5wcml2TmV4dEJ1ZmZlclJlYWR5Qnl0ZXMpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0VmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMucHJpdk5leHRCdWZmZXJUb1dyaXRlKTtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZVZpZXcgPSBuZXcgVWludDhBcnJheShjaHVuay5idWZmZXIuc2xpY2UoYnl0ZXNDb3BpZWRGcm9tQnVmZmVyLCBieXRlc1RvQ29weSArIGJ5dGVzQ29waWVkRnJvbUJ1ZmZlcikpO1xuICAgICAgICAgICAgdGFyZ2V0Vmlldy5zZXQoc291cmNlVmlldywgdGhpcy5wcml2TmV4dEJ1ZmZlclJlYWR5Qnl0ZXMpO1xuICAgICAgICAgICAgdGhpcy5wcml2TmV4dEJ1ZmZlclJlYWR5Qnl0ZXMgKz0gYnl0ZXNUb0NvcHk7XG4gICAgICAgICAgICBieXRlc0NvcGllZEZyb21CdWZmZXIgKz0gYnl0ZXNUb0NvcHk7XG4gICAgICAgICAgICAvLyBBcmUgd2UgcmVhZHkgdG8gd3JpdGU/XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2TmV4dEJ1ZmZlclJlYWR5Qnl0ZXMgPT09IHRoaXMucHJpdlRhcmdldENodW5rU2l6ZSkge1xuICAgICAgICAgICAgICAgIHN1cGVyLndyaXRlU3RyZWFtQ2h1bmsoe1xuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHRoaXMucHJpdk5leHRCdWZmZXJUb1dyaXRlLFxuICAgICAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVSZWNlaXZlZDogdGhpcy5wcml2TmV4dEJ1ZmZlclN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZOZXh0QnVmZmVyUmVhZHlCeXRlcyA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2TmV4dEJ1ZmZlclRvV3JpdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIC8vIFNlbmQgd2hhdGV2ZXIgaXMgcGVuZGluZywgdGhlbiBjbG9zZSB0aGUgYmFzZSBjbGFzcy5cbiAgICAgICAgaWYgKDAgIT09IHRoaXMucHJpdk5leHRCdWZmZXJSZWFkeUJ5dGVzICYmICF0aGlzLmlzQ2xvc2VkKSB7XG4gICAgICAgICAgICBzdXBlci53cml0ZVN0cmVhbUNodW5rKHtcbiAgICAgICAgICAgICAgICBidWZmZXI6IHRoaXMucHJpdk5leHRCdWZmZXJUb1dyaXRlLnNsaWNlKDAsIHRoaXMucHJpdk5leHRCdWZmZXJSZWFkeUJ5dGVzKSxcbiAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGltZVJlY2VpdmVkOiB0aGlzLnByaXZOZXh0QnVmZmVyU3RhcnRUaW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuY2xvc2UoKTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNodW5rZWRBcnJheUJ1ZmZlclN0cmVhbS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgRXZlbnRUeXBlLCBQbGF0Zm9ybUV2ZW50IH0gZnJvbSBcIi4vUGxhdGZvcm1FdmVudFwiO1xuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25FdmVudCBleHRlbmRzIFBsYXRmb3JtRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50TmFtZSwgY29ubmVjdGlvbklkLCBldmVudFR5cGUgPSBFdmVudFR5cGUuSW5mbykge1xuICAgICAgICBzdXBlcihldmVudE5hbWUsIGV2ZW50VHlwZSk7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcbiAgICB9XG4gICAgZ2V0IGNvbm5lY3Rpb25JZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkNvbm5lY3Rpb25JZDtcbiAgICB9XG59XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uU3RhcnRFdmVudCBleHRlbmRzIENvbm5lY3Rpb25FdmVudCB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbklkLCB1cmksIGhlYWRlcnMpIHtcbiAgICAgICAgc3VwZXIoXCJDb25uZWN0aW9uU3RhcnRFdmVudFwiLCBjb25uZWN0aW9uSWQpO1xuICAgICAgICB0aGlzLnByaXZVcmkgPSB1cmk7XG4gICAgICAgIHRoaXMucHJpdkhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIH1cbiAgICBnZXQgdXJpKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2VXJpO1xuICAgIH1cbiAgICBnZXQgaGVhZGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkhlYWRlcnM7XG4gICAgfVxufVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgQ29ubmVjdGlvbkVzdGFibGlzaGVkRXZlbnQgZXh0ZW5kcyBDb25uZWN0aW9uRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25JZCwgbWV0YWRhdGEpIHtcbiAgICAgICAgc3VwZXIoXCJDb25uZWN0aW9uRXN0YWJsaXNoZWRFdmVudFwiLCBjb25uZWN0aW9uSWQpO1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25DbG9zZWRFdmVudCBleHRlbmRzIENvbm5lY3Rpb25FdmVudCB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbklkLCBzdGF0dXNDb2RlLCByZWFzb24pIHtcbiAgICAgICAgc3VwZXIoXCJDb25uZWN0aW9uQ2xvc2VkRXZlbnRcIiwgY29ubmVjdGlvbklkLCBFdmVudFR5cGUuRGVidWcpO1xuICAgICAgICB0aGlzLnByaXZScmVhc29uID0gcmVhc29uO1xuICAgICAgICB0aGlzLnByaXZTdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB9XG4gICAgZ2V0IHJlYXNvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJyZWFzb247XG4gICAgfVxuICAgIGdldCBzdGF0dXNDb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U3RhdHVzQ29kZTtcbiAgICB9XG59XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uRXN0YWJsaXNoRXJyb3JFdmVudCBleHRlbmRzIENvbm5lY3Rpb25FdmVudCB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbklkLCBzdGF0dXNjb2RlLCByZWFzb24pIHtcbiAgICAgICAgc3VwZXIoXCJDb25uZWN0aW9uRXN0YWJsaXNoRXJyb3JFdmVudFwiLCBjb25uZWN0aW9uSWQsIEV2ZW50VHlwZS5FcnJvcik7XG4gICAgICAgIHRoaXMucHJpdlN0YXR1c0NvZGUgPSBzdGF0dXNjb2RlO1xuICAgICAgICB0aGlzLnByaXZSZWFzb24gPSByZWFzb247XG4gICAgfVxuICAgIGdldCByZWFzb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZWFzb247XG4gICAgfVxuICAgIGdldCBzdGF0dXNDb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U3RhdHVzQ29kZTtcbiAgICB9XG59XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uTWVzc2FnZVJlY2VpdmVkRXZlbnQgZXh0ZW5kcyBDb25uZWN0aW9uRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25JZCwgbmV0d29ya1JlY2VpdmVkVGltZUlTTywgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcihcIkNvbm5lY3Rpb25NZXNzYWdlUmVjZWl2ZWRFdmVudFwiLCBjb25uZWN0aW9uSWQpO1xuICAgICAgICB0aGlzLnByaXZOZXR3b3JrUmVjZWl2ZWRUaW1lID0gbmV0d29ya1JlY2VpdmVkVGltZUlTTztcbiAgICAgICAgdGhpcy5wcml2TWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfVxuICAgIGdldCBuZXR3b3JrUmVjZWl2ZWRUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2TmV0d29ya1JlY2VpdmVkVGltZTtcbiAgICB9XG4gICAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZNZXNzYWdlO1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25NZXNzYWdlU2VudEV2ZW50IGV4dGVuZHMgQ29ubmVjdGlvbkV2ZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uSWQsIG5ldHdvcmtTZW50VGltZUlTTywgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcihcIkNvbm5lY3Rpb25NZXNzYWdlU2VudEV2ZW50XCIsIGNvbm5lY3Rpb25JZCk7XG4gICAgICAgIHRoaXMucHJpdk5ldHdvcmtTZW50VGltZSA9IG5ldHdvcmtTZW50VGltZUlTTztcbiAgICAgICAgdGhpcy5wcml2TWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfVxuICAgIGdldCBuZXR3b3JrU2VudFRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZOZXR3b3JrU2VudFRpbWU7XG4gICAgfVxuICAgIGdldCBtZXNzYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2TWVzc2FnZTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbm5lY3Rpb25FdmVudHMuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEludmFsaWRPcGVyYXRpb25FcnJvciB9IGZyb20gXCIuL0Vycm9yXCI7XG5pbXBvcnQgeyBjcmVhdGVOb0Rhc2hHdWlkIH0gZnJvbSBcIi4vR3VpZFwiO1xuZXhwb3J0IHZhciBNZXNzYWdlVHlwZTtcbihmdW5jdGlvbiAoTWVzc2FnZVR5cGUpIHtcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlRleHRcIl0gPSAwXSA9IFwiVGV4dFwiO1xuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiQmluYXJ5XCJdID0gMV0gPSBcIkJpbmFyeVwiO1xufSkoTWVzc2FnZVR5cGUgfHwgKE1lc3NhZ2VUeXBlID0ge30pKTtcbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZVR5cGUsIGJvZHksIGhlYWRlcnMsIGlkKSB7XG4gICAgICAgIHRoaXMucHJpdkJvZHkgPSBudWxsO1xuICAgICAgICBpZiAobWVzc2FnZVR5cGUgPT09IE1lc3NhZ2VUeXBlLlRleHQgJiYgYm9keSAmJiAhKHR5cGVvZiAoYm9keSkgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wZXJhdGlvbkVycm9yKFwiUGF5bG9hZCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlVHlwZSA9PT0gTWVzc2FnZVR5cGUuQmluYXJ5ICYmIGJvZHkgJiYgIShib2R5IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wZXJhdGlvbkVycm9yKFwiUGF5bG9hZCBtdXN0IGJlIEFycmF5QnVmZmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdk1lc3NhZ2VUeXBlID0gbWVzc2FnZVR5cGU7XG4gICAgICAgIHRoaXMucHJpdkJvZHkgPSBib2R5O1xuICAgICAgICB0aGlzLnByaXZIZWFkZXJzID0gaGVhZGVycyA/IGhlYWRlcnMgOiB7fTtcbiAgICAgICAgdGhpcy5wcml2SWQgPSBpZCA/IGlkIDogY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgIH1cbiAgICBnZXQgbWVzc2FnZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZNZXNzYWdlVHlwZTtcbiAgICB9XG4gICAgZ2V0IGhlYWRlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZIZWFkZXJzO1xuICAgIH1cbiAgICBnZXQgYm9keSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkJvZHk7XG4gICAgfVxuICAgIGdldCB0ZXh0Qm9keSgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJpdk1lc3NhZ2VUeXBlID09PSBNZXNzYWdlVHlwZS5CaW5hcnkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJOb3Qgc3VwcG9ydGVkIGZvciBiaW5hcnkgbWVzc2FnZVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcml2Qm9keTtcbiAgICB9XG4gICAgZ2V0IGJpbmFyeUJvZHkoKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZNZXNzYWdlVHlwZSA9PT0gTWVzc2FnZVR5cGUuVGV4dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRPcGVyYXRpb25FcnJvcihcIk5vdCBzdXBwb3J0ZWQgZm9yIHRleHQgbWVzc2FnZVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcml2Qm9keTtcbiAgICB9XG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25uZWN0aW9uTWVzc2FnZS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25PcGVuUmVzcG9uc2Uge1xuICAgIGNvbnN0cnVjdG9yKHN0YXR1c0NvZGUsIHJlYXNvbikge1xuICAgICAgICB0aGlzLnByaXZTdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICAgICAgdGhpcy5wcml2UmVhc29uID0gcmVhc29uO1xuICAgIH1cbiAgICBnZXQgc3RhdHVzQ29kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlN0YXR1c0NvZGU7XG4gICAgfVxuICAgIGdldCByZWFzb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZWFzb247XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25uZWN0aW9uT3BlblJlc3BvbnNlLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIFRoZSBlcnJvciB0aGF0IGlzIHRocm93biB3aGVuIGFuIGFyZ3VtZW50IHBhc3NlZCBpbiBpcyBudWxsLlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBBcmd1bWVudE51bGxFcnJvclxuICogQGV4dGVuZHMge0Vycm9yfVxuICovXG5leHBvcnQgY2xhc3MgQXJndW1lbnROdWxsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBBcmd1bWVudE51bGxFcnJvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhcmd1bWVudE5hbWUgLSBOYW1lIG9mIHRoZSBhcmd1bWVudCB0aGF0IGlzIG51bGxcbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBBcmd1bWVudE51bGxFcnJvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFyZ3VtZW50TmFtZSkge1xuICAgICAgICBzdXBlcihhcmd1bWVudE5hbWUpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkFyZ3VtZW50TnVsbFwiO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBhcmd1bWVudE5hbWU7XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgZXJyb3IgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBpbnZhbGlkIG9wZXJhdGlvbiBpcyBwZXJmb3JtZWQgaW4gdGhlIGNvZGUuXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIEludmFsaWRPcGVyYXRpb25FcnJvclxuICogQGV4dGVuZHMge0Vycm9yfVxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBJbnZhbGlkT3BlcmF0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBJbnZhbGlkT3BlcmF0aW9uRXJyb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3IgLSBUaGUgZXJyb3JcbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBJbnZhbGlkT3BlcmF0aW9uRXJyb3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlcnJvcikge1xuICAgICAgICBzdXBlcihlcnJvcik7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSW52YWxpZE9wZXJhdGlvblwiO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcjtcbiAgICB9XG59XG4vKipcbiAqIFRoZSBlcnJvciB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9iamVjdCBpcyBkaXNwb3NlZC5cbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgT2JqZWN0RGlzcG9zZWRFcnJvclxuICogQGV4dGVuZHMge0Vycm9yfVxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBPYmplY3REaXNwb3NlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgT2JqZWN0RGlzcG9zZWRFcnJvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvYmplY3ROYW1lIC0gVGhlIG9iamVjdCB0aGF0IGlzIGRpc3Bvc2VkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yIC0gVGhlIGVycm9yXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgT2JqZWN0RGlzcG9zZWRFcnJvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9iamVjdE5hbWUsIGVycm9yKSB7XG4gICAgICAgIHN1cGVyKGVycm9yKTtcbiAgICAgICAgdGhpcy5uYW1lID0gb2JqZWN0TmFtZSArIFwiT2JqZWN0RGlzcG9zZWRcIjtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3I7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1FcnJvci5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgT2JqZWN0RGlzcG9zZWRFcnJvciB9IGZyb20gXCIuL0Vycm9yXCI7XG5pbXBvcnQgeyBjcmVhdGVOb0Rhc2hHdWlkIH0gZnJvbSBcIi4vR3VpZFwiO1xuZXhwb3J0IGNsYXNzIEV2ZW50U291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRhZGF0YSkge1xuICAgICAgICB0aGlzLnByaXZFdmVudExpc3RlbmVycyA9IHt9O1xuICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25FdmVudCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgKG5ldyBPYmplY3REaXNwb3NlZEVycm9yKFwiRXZlbnRTb3VyY2VcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcmFtTmFtZSBpbiB0aGlzLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5tZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXZlbnQubWV0YWRhdGFbcGFyYW1OYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5tZXRhZGF0YVtwYXJhbU5hbWVdID0gdGhpcy5tZXRhZGF0YVtwYXJhbU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnRJZCBpbiB0aGlzLnByaXZFdmVudExpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIGlmIChldmVudElkICYmIHRoaXMucHJpdkV2ZW50TGlzdGVuZXJzW2V2ZW50SWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkV2ZW50TGlzdGVuZXJzW2V2ZW50SWRdKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYXR0YWNoID0gKG9uRXZlbnRDYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBjcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgICAgICB0aGlzLnByaXZFdmVudExpc3RlbmVyc1tpZF0gPSBvbkV2ZW50Q2FsbGJhY2s7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRldGFjaDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5wcml2RXZlbnRMaXN0ZW5lcnNbaWRdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmF0dGFjaExpc3RlbmVyID0gKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2gobGlzdGVuZXIub25FdmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZJc0Rpc3Bvc2VkO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRpc3Bvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnByaXZFdmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcml2TWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICB9XG4gICAgZ2V0IG1ldGFkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2TWV0YWRhdGE7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudFNvdXJjZS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQXJndW1lbnROdWxsRXJyb3IgfSBmcm9tIFwiLi9FcnJvclwiO1xuaW1wb3J0IHsgRXZlbnRTb3VyY2UgfSBmcm9tIFwiLi9FdmVudFNvdXJjZVwiO1xuZXhwb3J0IGNsYXNzIEV2ZW50cyB7XG4gICAgc3RhdGljIGdldCBpbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIEV2ZW50cy5wcml2SW5zdGFuY2U7XG4gICAgfVxufVxuRXZlbnRzLnByaXZJbnN0YW5jZSA9IG5ldyBFdmVudFNvdXJjZSgpO1xuRXZlbnRzLnNldEV2ZW50U291cmNlID0gKGV2ZW50U291cmNlKSA9PiB7XG4gICAgaWYgKCFldmVudFNvdXJjZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXJyb3IoXCJldmVudFNvdXJjZVwiKTtcbiAgICB9XG4gICAgRXZlbnRzLnByaXZJbnN0YW5jZSA9IGV2ZW50U291cmNlO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXZlbnRzLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQgKiBmcm9tIFwiLi9BdWRpb1NvdXJjZUV2ZW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vQ29ubmVjdGlvbkV2ZW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vQ29ubmVjdGlvbk1lc3NhZ2VcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0Nvbm5lY3Rpb25PcGVuUmVzcG9uc2VcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0Vycm9yXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9FdmVudHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0V2ZW50U291cmNlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9HdWlkXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9JQ29ubmVjdGlvblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vTGlzdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vUGxhdGZvcm1FdmVudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vUHJvbWlzZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vUXVldWVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Jhd1dlYnNvY2tldE1lc3NhZ2VcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1JpZmZQY21FbmNvZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TdHJlYW1cIjtcbmV4cG9ydCB7IFRyYW5zbGF0aW9uU3RhdHVzIH0gZnJvbSBcIi4uL2NvbW1vbi5zcGVlY2gvVHJhbnNsYXRpb25TdGF0dXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0NodW5rZWRBcnJheUJ1ZmZlclN0cmVhbVwiO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHBvcnRzLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5jb25zdCBjcmVhdGVHdWlkID0gKCkgPT4ge1xuICAgIGxldCBkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgY29uc3QgZ3VpZCA9IFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZSgvW3h5XS9nLCAoYykgPT4ge1xuICAgICAgICBjb25zdCByID0gKGQgKyBNYXRoLnJhbmRvbSgpICogMTYpICUgMTYgfCAwO1xuICAgICAgICBkID0gTWF0aC5mbG9vcihkIC8gMTYpO1xuICAgICAgICByZXR1cm4gKGMgPT09IFwieFwiID8gciA6IChyICYgMHgzIHwgMHg4KSkudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICAgIHJldHVybiBndWlkO1xufTtcbmNvbnN0IGNyZWF0ZU5vRGFzaEd1aWQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZUd1aWQoKS5yZXBsYWNlKG5ldyBSZWdFeHAoXCItXCIsIFwiZ1wiKSwgXCJcIikudG9VcHBlckNhc2UoKTtcbn07XG5leHBvcnQgeyBjcmVhdGVHdWlkLCBjcmVhdGVOb0Rhc2hHdWlkIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUd1aWQuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCB2YXIgQ29ubmVjdGlvblN0YXRlO1xuKGZ1bmN0aW9uIChDb25uZWN0aW9uU3RhdGUpIHtcbiAgICBDb25uZWN0aW9uU3RhdGVbQ29ubmVjdGlvblN0YXRlW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gICAgQ29ubmVjdGlvblN0YXRlW0Nvbm5lY3Rpb25TdGF0ZVtcIkNvbm5lY3RlZFwiXSA9IDFdID0gXCJDb25uZWN0ZWRcIjtcbiAgICBDb25uZWN0aW9uU3RhdGVbQ29ubmVjdGlvblN0YXRlW1wiQ29ubmVjdGluZ1wiXSA9IDJdID0gXCJDb25uZWN0aW5nXCI7XG4gICAgQ29ubmVjdGlvblN0YXRlW0Nvbm5lY3Rpb25TdGF0ZVtcIkRpc2Nvbm5lY3RlZFwiXSA9IDNdID0gXCJEaXNjb25uZWN0ZWRcIjtcbn0pKENvbm5lY3Rpb25TdGF0ZSB8fCAoQ29ubmVjdGlvblN0YXRlID0ge30pKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUNvbm5lY3Rpb24uanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IE9iamVjdERpc3Bvc2VkRXJyb3IgfSBmcm9tIFwiLi9FcnJvclwiO1xuZXhwb3J0IGNsYXNzIExpc3Qge1xuICAgIGNvbnN0cnVjdG9yKGxpc3QpIHtcbiAgICAgICAgdGhpcy5wcml2U3Vic2NyaXB0aW9uSWRDb3VudGVyID0gMDtcbiAgICAgICAgdGhpcy5wcml2QWRkU3Vic2NyaXB0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLnByaXZSZW1vdmVTdWJzY3JpcHRpb25zID0ge307XG4gICAgICAgIHRoaXMucHJpdkRpc3Bvc2VkU3Vic2NyaXB0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLnByaXZEaXNwb3NlUmVhc29uID0gbnVsbDtcbiAgICAgICAgdGhpcy5nZXQgPSAoaXRlbUluZGV4KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkxpc3RbaXRlbUluZGV4XTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5maXJzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldCgwKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5sYXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMubGVuZ3RoKCkgLSAxKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGQgPSAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0QXQodGhpcy5wcml2TGlzdC5sZW5ndGgsIGl0ZW0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmluc2VydEF0ID0gKGluZGV4LCBpdGVtKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2TGlzdC51bnNoaWZ0KGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IHRoaXMucHJpdkxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2TGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2TGlzdC5zcGxpY2UoaW5kZXgsIDAsIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyU3Vic2NyaXB0aW9ucyh0aGlzLnByaXZBZGRTdWJzY3JpcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZW1vdmVGaXJzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVBdCgwKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZW1vdmVMYXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZUF0KHRoaXMubGVuZ3RoKCkgLSAxKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZW1vdmVBdCA9IChpbmRleCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZShpbmRleCwgMSlbMF07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVtb3ZlID0gKGluZGV4LCBjb3VudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZWRFbGVtZW50cyA9IHRoaXMucHJpdkxpc3Quc3BsaWNlKGluZGV4LCBjb3VudCk7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJTdWJzY3JpcHRpb25zKHRoaXMucHJpdlJlbW92ZVN1YnNjcmlwdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZWRFbGVtZW50cztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jbGVhciA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZSgwLCB0aGlzLmxlbmd0aCgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkxpc3QubGVuZ3RoO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uQWRkZWQgPSAoYWRkZWRDYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbklkID0gdGhpcy5wcml2U3Vic2NyaXB0aW9uSWRDb3VudGVyKys7XG4gICAgICAgICAgICB0aGlzLnByaXZBZGRTdWJzY3JpcHRpb25zW3N1YnNjcmlwdGlvbklkXSA9IGFkZGVkQ2FsbGJhY2s7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRldGFjaDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5wcml2QWRkU3Vic2NyaXB0aW9uc1tzdWJzY3JpcHRpb25JZF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25SZW1vdmVkID0gKHJlbW92ZWRDYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbklkID0gdGhpcy5wcml2U3Vic2NyaXB0aW9uSWRDb3VudGVyKys7XG4gICAgICAgICAgICB0aGlzLnByaXZSZW1vdmVTdWJzY3JpcHRpb25zW3N1YnNjcmlwdGlvbklkXSA9IHJlbW92ZWRDYWxsYmFjaztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGV0YWNoOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnByaXZSZW1vdmVTdWJzY3JpcHRpb25zW3N1YnNjcmlwdGlvbklkXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkRpc3Bvc2VkID0gKGRpc3Bvc2VkQ2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25JZCA9IHRoaXMucHJpdlN1YnNjcmlwdGlvbklkQ291bnRlcisrO1xuICAgICAgICAgICAgdGhpcy5wcml2RGlzcG9zZWRTdWJzY3JpcHRpb25zW3N1YnNjcmlwdGlvbklkXSA9IGRpc3Bvc2VkQ2FsbGJhY2s7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRldGFjaDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5wcml2RGlzcG9zZWRTdWJzY3JpcHRpb25zW3N1YnNjcmlwdGlvbklkXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5qb2luID0gKHNlcGVyYXRvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZMaXN0LmpvaW4oc2VwZXJhdG9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50b0FycmF5ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2xvbmVDb3B5ID0gQXJyYXkoKTtcbiAgICAgICAgICAgIHRoaXMucHJpdkxpc3QuZm9yRWFjaCgodmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xvbmVDb3B5LnB1c2godmFsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNsb25lQ29weTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hbnkgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53aGVyZShjYWxsYmFjaykubGVuZ3RoKCkgPiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoKCkgPiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFsbCA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndoZXJlKGNhbGxiYWNrKS5sZW5ndGgoKSA9PT0gdGhpcy5sZW5ndGgoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mb3JFYWNoID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLnByaXZMaXN0W2ldLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZWxlY3QgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RMaXN0ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJpdkxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RMaXN0LnB1c2goY2FsbGJhY2sodGhpcy5wcml2TGlzdFtpXSwgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaXN0KHNlbGVjdExpc3QpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLndoZXJlID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRMaXN0ID0gbmV3IExpc3QoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wcml2TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayh0aGlzLnByaXZMaXN0W2ldLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZExpc3QuYWRkKHRoaXMucHJpdkxpc3RbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZExpc3Q7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub3JkZXJCeSA9IChjb21wYXJlRm4pID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICBjb25zdCBjbG9uZWRBcnJheSA9IHRoaXMudG9BcnJheSgpO1xuICAgICAgICAgICAgY29uc3Qgb3JkZXJlZEFycmF5ID0gY2xvbmVkQXJyYXkuc29ydChjb21wYXJlRm4pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaXN0KG9yZGVyZWRBcnJheSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub3JkZXJCeURlc2MgPSAoY29tcGFyZUZuKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3JkZXJCeSgoYSwgYikgPT4gY29tcGFyZUZuKGIsIGEpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jbG9uZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExpc3QodGhpcy50b0FycmF5KCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbmNhdCA9IChsaXN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaXN0KHRoaXMucHJpdkxpc3QuY29uY2F0KGxpc3QudG9BcnJheSgpKSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29uY2F0QXJyYXkgPSAoYXJyYXkpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExpc3QodGhpcy5wcml2TGlzdC5jb25jYXQoYXJyYXkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkxpc3QgPT0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kaXNwb3NlID0gKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkRpc3Bvc2VSZWFzb24gPSByZWFzb247XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2TGlzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2QWRkU3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVtb3ZlU3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyU3Vic2NyaXB0aW9ucyh0aGlzLnByaXZEaXNwb3NlZFN1YnNjcmlwdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3REaXNwb3NlZEVycm9yKFwiTGlzdFwiLCB0aGlzLnByaXZEaXNwb3NlUmVhc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50cmlnZ2VyU3Vic2NyaXB0aW9ucyA9IChzdWJzY3JpcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Vic2NyaXB0aW9uSWQgaW4gc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnNbc3Vic2NyaXB0aW9uSWRdKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdkxpc3QgPSBbXTtcbiAgICAgICAgLy8gY29weSB0aGUgbGlzdCByYXRoZXIgdGhhbiB0YWtpbmcgYXMgaXMuXG4gICAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGlzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkxpc3QucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGlzdC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlTm9EYXNoR3VpZCB9IGZyb20gXCIuL0d1aWRcIjtcbmV4cG9ydCB2YXIgRXZlbnRUeXBlO1xuKGZ1bmN0aW9uIChFdmVudFR5cGUpIHtcbiAgICBFdmVudFR5cGVbRXZlbnRUeXBlW1wiRGVidWdcIl0gPSAwXSA9IFwiRGVidWdcIjtcbiAgICBFdmVudFR5cGVbRXZlbnRUeXBlW1wiSW5mb1wiXSA9IDFdID0gXCJJbmZvXCI7XG4gICAgRXZlbnRUeXBlW0V2ZW50VHlwZVtcIldhcm5pbmdcIl0gPSAyXSA9IFwiV2FybmluZ1wiO1xuICAgIEV2ZW50VHlwZVtFdmVudFR5cGVbXCJFcnJvclwiXSA9IDNdID0gXCJFcnJvclwiO1xufSkoRXZlbnRUeXBlIHx8IChFdmVudFR5cGUgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIFBsYXRmb3JtRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50TmFtZSwgZXZlbnRUeXBlKSB7XG4gICAgICAgIHRoaXMucHJpdk5hbWUgPSBldmVudE5hbWU7XG4gICAgICAgIHRoaXMucHJpdkV2ZW50SWQgPSBjcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgIHRoaXMucHJpdkV2ZW50VGltZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5wcml2RXZlbnRUeXBlID0gZXZlbnRUeXBlO1xuICAgICAgICB0aGlzLnByaXZNZXRhZGF0YSA9IHt9O1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdk5hbWU7XG4gICAgfVxuICAgIGdldCBldmVudElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2RXZlbnRJZDtcbiAgICB9XG4gICAgZ2V0IGV2ZW50VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkV2ZW50VGltZTtcbiAgICB9XG4gICAgZ2V0IGV2ZW50VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkV2ZW50VHlwZTtcbiAgICB9XG4gICAgZ2V0IG1ldGFkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2TWV0YWRhdGE7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1QbGF0Zm9ybUV2ZW50LmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBBcmd1bWVudE51bGxFcnJvciB9IGZyb20gXCIuL0Vycm9yXCI7XG5leHBvcnQgdmFyIFByb21pc2VTdGF0ZTtcbihmdW5jdGlvbiAoUHJvbWlzZVN0YXRlKSB7XG4gICAgUHJvbWlzZVN0YXRlW1Byb21pc2VTdGF0ZVtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIFByb21pc2VTdGF0ZVtQcm9taXNlU3RhdGVbXCJSZXNvbHZlZFwiXSA9IDFdID0gXCJSZXNvbHZlZFwiO1xuICAgIFByb21pc2VTdGF0ZVtQcm9taXNlU3RhdGVbXCJSZWplY3RlZFwiXSA9IDJdID0gXCJSZWplY3RlZFwiO1xufSkoUHJvbWlzZVN0YXRlIHx8IChQcm9taXNlU3RhdGUgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIFByb21pc2VSZXN1bHQge1xuICAgIGNvbnN0cnVjdG9yKHByb21pc2VSZXN1bHRFdmVudFNvdXJjZSkge1xuICAgICAgICB0aGlzLnRocm93SWZFcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyB0aGlzLmVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwcm9taXNlUmVzdWx0RXZlbnRTb3VyY2Uub24oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByaXZJc0NvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdklzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZJc0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wcml2SXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZJc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2SXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2RXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBpc0NvbXBsZXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdklzQ29tcGxldGVkO1xuICAgIH1cbiAgICBnZXQgaXNFcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdklzRXJyb3I7XG4gICAgfVxuICAgIGdldCBlcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yO1xuICAgIH1cbiAgICBnZXQgcmVzdWx0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVzdWx0O1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIFByb21pc2VSZXN1bHRFdmVudFNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2V0UmVzdWx0ID0gKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcml2T25TZXRSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRFcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcml2T25TZXRFcnJvcihlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub24gPSAob25TZXRSZXN1bHQsIG9uU2V0RXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJpdk9uU2V0UmVzdWx0ID0gb25TZXRSZXN1bHQ7XG4gICAgICAgICAgICB0aGlzLnByaXZPblNldEVycm9yID0gb25TZXRFcnJvcjtcbiAgICAgICAgfTtcbiAgICB9XG59XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBQcm9taXNlSGVscGVyIHtcbn1cblByb21pc2VIZWxwZXIud2hlbkFsbCA9IChwcm9taXNlcykgPT4ge1xuICAgIGlmICghcHJvbWlzZXMgfHwgcHJvbWlzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFcnJvcihcInByb21pc2VzXCIpO1xuICAgIH1cbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgIGxldCBjb21wbGV0ZWRQcm9taXNlcyA9IDA7XG4gICAgY29uc3QgY2hlY2tGb3JDb21wbGV0aW9uID0gKCkgPT4ge1xuICAgICAgICBjb21wbGV0ZWRQcm9taXNlcysrO1xuICAgICAgICBpZiAoY29tcGxldGVkUHJvbWlzZXMgPT09IHByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9ycy5qb2luKFwiLCBcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IHByb21pc2Ugb2YgcHJvbWlzZXMpIHtcbiAgICAgICAgcHJvbWlzZS5vbigocikgPT4ge1xuICAgICAgICAgICAgY2hlY2tGb3JDb21wbGV0aW9uKCk7XG4gICAgICAgIH0sIChlKSA9PiB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgICAgIGNoZWNrRm9yQ29tcGxldGlvbigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbn07XG5Qcm9taXNlSGVscGVyLmZyb21SZXN1bHQgPSAocmVzdWx0KSA9PiB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbn07XG5Qcm9taXNlSGVscGVyLmZyb21FcnJvciA9IChlcnJvcikgPT4ge1xuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xufTtcbi8vIFRPRE86IHJlcGxhY2Ugd2l0aCBFUzYgcHJvbWlzZXNcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIFByb21pc2Uge1xuICAgIGNvbnN0cnVjdG9yKHNpbmspIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U2luay5yZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29udGludWVXaXRoID0gKGNvbnRpbnVhdGlvbkNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNvbnRpbnVhdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEVycm9yKFwiY29udGludWF0aW9uQ2FsbGJhY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb250aW51YXRpb25EZWZlcnJhbCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICAgICAgdGhpcy5wcml2U2luay5vbigocikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRpbnVhdGlvblJlc3VsdCA9IGNvbnRpbnVhdGlvbkNhbGxiYWNrKHRoaXMucHJpdlNpbmsucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVzb2x2ZShjb250aW51YXRpb25SZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGludWF0aW9uUmVzdWx0ID0gY29udGludWF0aW9uQ2FsbGJhY2sodGhpcy5wcml2U2luay5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZXNvbHZlKGNvbnRpbnVhdGlvblJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVhdGlvbkRlZmVycmFsLnJlamVjdChgJ0Vycm9yIGhhbmRsZXIgZm9yIGVycm9yICR7ZXJyb3J9IHRocmV3IGVycm9yICR7ZX0nYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGludWF0aW9uRGVmZXJyYWwucHJvbWlzZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aCA9IChjb250aW51YXRpb25DYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjb250aW51YXRpb25DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFcnJvcihcImNvbnRpbnVhdGlvbkNhbGxiYWNrXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29udGludWF0aW9uRGVmZXJyYWwgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHRoaXMucHJpdlNpbmsub24oKHIpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250aW51YXRpb25SZXN1bHQgPSBjb250aW51YXRpb25DYWxsYmFjayhyKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVzb2x2ZShjb250aW51YXRpb25SZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkRlZmVycmFsLnByb21pc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb250aW51ZVdpdGhQcm9taXNlID0gKGNvbnRpbnVhdGlvbkNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNvbnRpbnVhdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEVycm9yKFwiY29udGludWF0aW9uQ2FsbGJhY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb250aW51YXRpb25EZWZlcnJhbCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICAgICAgdGhpcy5wcml2U2luay5vbigocikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRpbnVhdGlvblByb21pc2UgPSBjb250aW51YXRpb25DYWxsYmFjayh0aGlzLnByaXZTaW5rLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29udGludWF0aW9uUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ0NvbnRpbnVhdGlvbiBjYWxsYmFjayBkaWQgbm90IHJldHVybiBwcm9taXNlJ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25Qcm9taXNlLm9uKChjb250aW51YXRpb25SZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVhdGlvbkRlZmVycmFsLnJlc29sdmUoY29udGludWF0aW9uUmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVhdGlvbkRlZmVycmFsLnJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVhdGlvbkRlZmVycmFsLnJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250aW51YXRpb25Qcm9taXNlID0gY29udGludWF0aW9uQ2FsbGJhY2sodGhpcy5wcml2U2luay5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRpbnVhdGlvblByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnRpbnVhdGlvbiBjYWxsYmFjayBkaWQgbm90IHJldHVybiBwcm9taXNlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVhdGlvblByb21pc2Uub24oKGNvbnRpbnVhdGlvblJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVzb2x2ZShjb250aW51YXRpb25SZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9LCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVqZWN0KGAnRXJyb3IgaGFuZGxlciBmb3IgZXJyb3IgJHtlcnJvcn0gdGhyZXcgZXJyb3IgJHtlfSdgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb250aW51YXRpb25EZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25TdWNjZXNzQ29udGludWVXaXRoUHJvbWlzZSA9IChjb250aW51YXRpb25DYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjb250aW51YXRpb25DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFcnJvcihcImNvbnRpbnVhdGlvbkNhbGxiYWNrXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29udGludWF0aW9uRGVmZXJyYWwgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHRoaXMucHJpdlNpbmsub24oKHIpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250aW51YXRpb25Qcm9taXNlID0gY29udGludWF0aW9uQ2FsbGJhY2socik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29udGludWF0aW9uUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udGludWF0aW9uIGNhbGxiYWNrIGRpZCBub3QgcmV0dXJuIHByb21pc2VcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uUHJvbWlzZS5vbigoY29udGludWF0aW9uUmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZXNvbHZlKGNvbnRpbnVhdGlvblJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkRlZmVycmFsLnByb21pc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbiA9IChzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGlmICghc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEVycm9yKFwic3VjY2Vzc0NhbGxiYWNrXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEVycm9yKFwiZXJyb3JDYWxsYmFja1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJpdlNpbmsub24oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZpbmFsbHkgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXJyb3IoXCJjYWxsYmFja1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrV3JhcHBlciA9IChfKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vbihjYWxsYmFja1dyYXBwZXIsIGNhbGxiYWNrV3JhcHBlcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdlNpbmsgPSBzaW5rO1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIERlZmVycmVkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTaW5rLnN0YXRlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByb21pc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvbWlzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcml2U2luay5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZWplY3QgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJpdlNpbmsucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByaXZTaW5rID0gbmV3IFNpbmsoKTtcbiAgICAgICAgdGhpcy5wcml2UHJvbWlzZSA9IG5ldyBQcm9taXNlKHRoaXMucHJpdlNpbmspO1xuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIFNpbmsge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByaXZTdGF0ZSA9IFByb21pc2VTdGF0ZS5Ob25lO1xuICAgICAgICB0aGlzLnByaXZQcm9taXNlUmVzdWx0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcml2UHJvbWlzZVJlc3VsdEV2ZW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMucHJpdlN1Y2Nlc3NIYW5kbGVycyA9IFtdO1xuICAgICAgICB0aGlzLnByaXZFcnJvckhhbmRsZXJzID0gW107XG4gICAgICAgIHRoaXMucmVzb2x2ZSA9IChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZTdGF0ZSAhPT0gUHJvbWlzZVN0YXRlLk5vbmUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInQ2Fubm90IHJlc29sdmUgYSBjb21wbGV0ZWQgcHJvbWlzZSdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnByaXZTdGF0ZSA9IFByb21pc2VTdGF0ZS5SZXNvbHZlZDtcbiAgICAgICAgICAgIHRoaXMucHJpdlByb21pc2VSZXN1bHRFdmVudHMuc2V0UmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJpdlN1Y2Nlc3NIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZVN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQsIHRoaXMucHJpdlN1Y2Nlc3NIYW5kbGVyc1tpXSwgdGhpcy5wcml2RXJyb3JIYW5kbGVyc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRldGFjaEhhbmRsZXJzKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVqZWN0ID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2U3RhdGUgIT09IFByb21pc2VTdGF0ZS5Ob25lKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ0Nhbm5vdCByZWplY3QgYSBjb21wbGV0ZWQgcHJvbWlzZSdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnByaXZTdGF0ZSA9IFByb21pc2VTdGF0ZS5SZWplY3RlZDtcbiAgICAgICAgICAgIHRoaXMucHJpdlByb21pc2VSZXN1bHRFdmVudHMuc2V0RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBlcnJvckhhbmRsZXIgb2YgdGhpcy5wcml2RXJyb3JIYW5kbGVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZUVycm9yQ2FsbGJhY2soZXJyb3IsIGVycm9ySGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRldGFjaEhhbmRsZXJzKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub24gPSAoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2sgPSAocikgPT4geyByZXR1cm47IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2U3RhdGUgPT09IFByb21pc2VTdGF0ZS5Ob25lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2U3VjY2Vzc0hhbmRsZXJzLnB1c2goc3VjY2Vzc0NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZFcnJvckhhbmRsZXJzLnB1c2goZXJyb3JDYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcml2U3RhdGUgPT09IFByb21pc2VTdGF0ZS5SZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWN1dGVTdWNjZXNzQ2FsbGJhY2sodGhpcy5wcml2UHJvbWlzZVJlc3VsdC5yZXN1bHQsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucHJpdlN0YXRlID09PSBQcm9taXNlU3RhdGUuUmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlRXJyb3JDYWxsYmFjayh0aGlzLnByaXZQcm9taXNlUmVzdWx0LmVycm9yLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kZXRhY2hIYW5kbGVycygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmV4ZWN1dGVTdWNjZXNzQ2FsbGJhY2sgPSAocmVzdWx0LCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZUVycm9yQ2FsbGJhY2soYCdVbmhhbmRsZWQgY2FsbGJhY2sgZXJyb3I6ICR7ZX0nYCwgZXJyb3JDYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZXhlY3V0ZUVycm9yQ2FsbGJhY2sgPSAoZXJyb3IsIGVycm9yQ2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJ1VuaGFuZGxlZCBjYWxsYmFjayBlcnJvcjogJHtlfS4gSW5uZXJFcnJvcjogJHtlcnJvcn0nYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnVW5oYW5kbGVkIGVycm9yOiAke2Vycm9yfSdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kZXRhY2hIYW5kbGVycyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJpdkVycm9ySGFuZGxlcnMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMucHJpdlN1Y2Nlc3NIYW5kbGVycyA9IFtdO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByaXZQcm9taXNlUmVzdWx0RXZlbnRzID0gbmV3IFByb21pc2VSZXN1bHRFdmVudFNvdXJjZSgpO1xuICAgICAgICB0aGlzLnByaXZQcm9taXNlUmVzdWx0ID0gbmV3IFByb21pc2VSZXN1bHQodGhpcy5wcml2UHJvbWlzZVJlc3VsdEV2ZW50cyk7XG4gICAgfVxuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlN0YXRlO1xuICAgIH1cbiAgICBnZXQgcmVzdWx0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvbWlzZVJlc3VsdDtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb21pc2UuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEludmFsaWRPcGVyYXRpb25FcnJvciwgT2JqZWN0RGlzcG9zZWRFcnJvciB9IGZyb20gXCIuL0Vycm9yXCI7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSBcIi4vTGlzdFwiO1xuaW1wb3J0IHsgRGVmZXJyZWQsIFByb21pc2VIZWxwZXIgfSBmcm9tIFwiLi9Qcm9taXNlXCI7XG52YXIgU3Vic2NyaWJlclR5cGU7XG4oZnVuY3Rpb24gKFN1YnNjcmliZXJUeXBlKSB7XG4gICAgU3Vic2NyaWJlclR5cGVbU3Vic2NyaWJlclR5cGVbXCJEZXF1ZXVlXCJdID0gMF0gPSBcIkRlcXVldWVcIjtcbiAgICBTdWJzY3JpYmVyVHlwZVtTdWJzY3JpYmVyVHlwZVtcIlBlZWtcIl0gPSAxXSA9IFwiUGVla1wiO1xufSkoU3Vic2NyaWJlclR5cGUgfHwgKFN1YnNjcmliZXJUeXBlID0ge30pKTtcbmV4cG9ydCBjbGFzcyBRdWV1ZSB7XG4gICAgY29uc3RydWN0b3IobGlzdCkge1xuICAgICAgICB0aGlzLnByaXZQcm9taXNlU3RvcmUgPSBuZXcgTGlzdCgpO1xuICAgICAgICB0aGlzLnByaXZJc0RyYWluSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZEaXNwb3NlUmVhc29uID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbnF1ZXVlID0gKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuZW5xdWV1ZUZyb21Qcm9taXNlKFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdChpdGVtKSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZW5xdWV1ZUZyb21Qcm9taXNlID0gKHByb21pc2UpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMucHJpdlByb21pc2VTdG9yZS5hZGQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLnByaXZQcm9taXNlU3RvcmUubGVuZ3RoKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wcml2UHJvbWlzZVN0b3JlLmZpcnN0KCkucmVzdWx0KCkuaXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IHRoaXMucHJpdlByb21pc2VTdG9yZS5yZW1vdmVGaXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLnJlc3VsdCgpLmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZMaXN0LmFkZChwLnJlc3VsdCgpLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBMb2cgYXMgd2FybmluZy5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlcXVldWUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRocm93SWZEaXNwb3NlKCk7XG4gICAgICAgICAgICBjb25zdCBkZWZlcnJlZFN1YnNjcmliZXIgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZTdWJzY3JpYmVycykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlN1YnNjcmliZXJzLmFkZCh7IGRlZmVycmFsOiBkZWZlcnJlZFN1YnNjcmliZXIsIHR5cGU6IFN1YnNjcmliZXJUeXBlLkRlcXVldWUgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFpbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkU3Vic2NyaWJlci5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGVlayA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGRlZmVycmVkU3Vic2NyaWJlciA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICAgICAgY29uc3Qgc3VicyA9IHRoaXMucHJpdlN1YnNjcmliZXJzO1xuICAgICAgICAgICAgaWYgKHN1YnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZTdWJzY3JpYmVycy5hZGQoeyBkZWZlcnJhbDogZGVmZXJyZWRTdWJzY3JpYmVyLCB0eXBlOiBTdWJzY3JpYmVyVHlwZS5QZWVrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhaW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZFN1YnNjcmliZXIucHJvbWlzZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxlbmd0aCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZkRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZMaXN0Lmxlbmd0aCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlzRGlzcG9zZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U3Vic2NyaWJlcnMgPT0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kcmFpbkFuZERpc3Bvc2UgPSAocGVuZGluZ0l0ZW1Qcm9jZXNzb3IsIHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGlzcG9zZWQoKSAmJiAhdGhpcy5wcml2SXNEaXNwb3NpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZEaXNwb3NlUmVhc29uID0gcmVhc29uO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdklzRGlzcG9zaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJzID0gdGhpcy5wcml2U3Vic2NyaWJlcnM7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN1YnMubGVuZ3RoKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJzY3JpYmVyID0gc3Vicy5yZW1vdmVGaXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogdGhpcyBuZWVkcyB3b3JrIChSZXNvbHZlKG51bGwpIGluc3RlYWQ/KS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZGVmZXJyYWwucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3Vic2NyaWJlci5kZWZlcnJhbC5yZWplY3QoXCJEaXNwb3NlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBub3RlOiB0aGlzIGJsb2NrIGFzc3VtZXMgY29vcGVyYXRpdmUgbXVsdGl0YXNraW5nLCBpLmUuLFxuICAgICAgICAgICAgICAgICAgICAvLyBiZXR3ZWVuIHRoZSBpZi1zdGF0ZW1lbnQgYW5kIHRoZSBhc3NpZ25tZW50IHRoZXJlIGFyZSBub1xuICAgICAgICAgICAgICAgICAgICAvLyB0aHJlYWQgc3dpdGNoZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlYXNvbiBpcyB0aGF0IGJldHdlZW4gdGhlIGluaXRpYWwgY29uc3QgPSB0aGlzLjsgYW5kIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gcG9pbnQgdGhlcmUgaXMgdGhlIGRlcnJhbC5yZXNvbHZlKCkgb3BlcmF0aW9uIHRoYXQgbWlnaHQgaGF2ZVxuICAgICAgICAgICAgICAgICAgICAvLyBjYXVzZWQgcmVjdXJzaXZlIGNhbGxzIHRvIHRoZSBRdWV1ZSwgZXNwZWNpYWxseSwgY2FsbGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBEaXNwb3NlKCkgb24gdGhlIHF1ZXVlIGFscmVkeSAod2hpY2ggd291bGQgcmVzZXQgdGhlIHZhclxuICAgICAgICAgICAgICAgICAgICAvLyBoZXJlIHRvIG51bGwhKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhhdCBzaG91bGQgZ2VuZXJhbGx5IGhvbGQgdHJ1ZSBmb3IgamF2YXNjcmlwdC4uLlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcml2U3Vic2NyaWJlcnMgPT09IHN1YnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlN1YnNjcmliZXJzID0gc3VicztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRldGFjaGFibGUgb2YgdGhpcy5wcml2RGV0YWNoYWJsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWNoYWJsZS5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpdlByb21pc2VTdG9yZS5sZW5ndGgoKSA+IDAgJiYgcGVuZGluZ0l0ZW1Qcm9jZXNzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC53aGVuQWxsKHRoaXMucHJpdlByb21pc2VTdG9yZS50b0FycmF5KCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY29udGludWVXaXRoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlN1YnNjcmliZXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkxpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nSXRlbVByb2Nlc3NvcihpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2TGlzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZTdWJzY3JpYmVycyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkxpc3QgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQodHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGlzcG9zZSA9IChyZWFzb24pID0+IHtcbiAgICAgICAgICAgIHRoaXMuZHJhaW5BbmREaXNwb3NlKG51bGwsIHJlYXNvbik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZHJhaW4gPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJpdklzRHJhaW5JblByb2dyZXNzICYmICF0aGlzLnByaXZJc0Rpc3Bvc2luZykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdklzRHJhaW5JblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJzID0gdGhpcy5wcml2U3Vic2NyaWJlcnM7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdHMgPSB0aGlzLnByaXZMaXN0O1xuICAgICAgICAgICAgICAgIGlmIChzdWJzICYmIGxpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChsaXN0cy5sZW5ndGgoKSA+IDAgJiYgc3Vicy5sZW5ndGgoKSA+IDAgJiYgIXRoaXMucHJpdklzRGlzcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJzY3JpYmVyID0gc3Vicy5yZW1vdmVGaXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIudHlwZSA9PT0gU3Vic2NyaWJlclR5cGUuUGVlaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZGVmZXJyYWwucmVzb2x2ZShsaXN0cy5maXJzdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlcXVldWVkSXRlbSA9IGxpc3RzLnJlbW92ZUZpcnN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5kZWZlcnJhbC5yZXNvbHZlKGRlcXVldWVkSXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gbm90ZTogdGhpcyBibG9jayBhc3N1bWVzIGNvb3BlcmF0aXZlIG11bHRpdGFza2luZywgaS5lLixcbiAgICAgICAgICAgICAgICAgICAgLy8gYmV0d2VlbiB0aGUgaWYtc3RhdGVtZW50IGFuZCB0aGUgYXNzaWdubWVudCB0aGVyZSBhcmUgbm9cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhyZWFkIHN3aXRjaGVzLlxuICAgICAgICAgICAgICAgICAgICAvLyBSZWFzb24gaXMgdGhhdCBiZXR3ZWVuIHRoZSBpbml0aWFsIGNvbnN0ID0gdGhpcy47IGFuZCB0aGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHBvaW50IHRoZXJlIGlzIHRoZSBkZXJyYWwucmVzb2x2ZSgpIG9wZXJhdGlvbiB0aGF0IG1pZ2h0IGhhdmVcbiAgICAgICAgICAgICAgICAgICAgLy8gY2F1c2VkIHJlY3Vyc2l2ZSBjYWxscyB0byB0aGUgUXVldWUsIGVzcGVjaWFsbHksIGNhbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcG9zZSgpIG9uIHRoZSBxdWV1ZSBhbHJlZHkgKHdoaWNoIHdvdWxkIHJlc2V0IHRoZSB2YXJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGVyZSB0byBudWxsISkuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoYXQgc2hvdWxkIGdlbmVyYWxseSBob2xkIHRydWUgZm9yIGphdmFzY3JpcHQuLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpdlN1YnNjcmliZXJzID09PSBzdWJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZTdWJzY3JpYmVycyA9IHN1YnM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gbm90ZTogdGhpcyBibG9jayBhc3N1bWVzIGNvb3BlcmF0aXZlIG11bHRpdGFza2luZywgaS5lLixcbiAgICAgICAgICAgICAgICAgICAgLy8gYmV0d2VlbiB0aGUgaWYtc3RhdGVtZW50IGFuZCB0aGUgYXNzaWdubWVudCB0aGVyZSBhcmUgbm9cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhyZWFkIHN3aXRjaGVzLlxuICAgICAgICAgICAgICAgICAgICAvLyBSZWFzb24gaXMgdGhhdCBiZXR3ZWVuIHRoZSBpbml0aWFsIGNvbnN0ID0gdGhpcy47IGFuZCB0aGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHBvaW50IHRoZXJlIGlzIHRoZSBkZXJyYWwucmVzb2x2ZSgpIG9wZXJhdGlvbiB0aGF0IG1pZ2h0IGhhdmVcbiAgICAgICAgICAgICAgICAgICAgLy8gY2F1c2VkIHJlY3Vyc2l2ZSBjYWxscyB0byB0aGUgUXVldWUsIGVzcGVjaWFsbHksIGNhbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcG9zZSgpIG9uIHRoZSBxdWV1ZSBhbHJlZHkgKHdoaWNoIHdvdWxkIHJlc2V0IHRoZSB2YXJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGVyZSB0byBudWxsISkuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoYXQgc2hvdWxkIGdlbmVyYWxseSBob2xkIHRydWUgZm9yIGphdmFzY3JpcHQuLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpdkxpc3QgPT09IGxpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZMaXN0ID0gbGlzdHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2SXNEcmFpbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByaXZEaXNwb3NlUmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkT3BlcmF0aW9uRXJyb3IodGhpcy5wcml2RGlzcG9zZVJlYXNvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3REaXNwb3NlZEVycm9yKFwiUXVldWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnByaXZJc0Rpc3Bvc2luZykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJRdWV1ZSBkaXNwb3NpbmdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdkxpc3QgPSBsaXN0ID8gbGlzdCA6IG5ldyBMaXN0KCk7XG4gICAgICAgIHRoaXMucHJpdkRldGFjaGFibGVzID0gW107XG4gICAgICAgIHRoaXMucHJpdlN1YnNjcmliZXJzID0gbmV3IExpc3QoKTtcbiAgICAgICAgdGhpcy5wcml2RGV0YWNoYWJsZXMucHVzaCh0aGlzLnByaXZMaXN0Lm9uQWRkZWQodGhpcy5kcmFpbikpO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVldWUuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IE1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4vQ29ubmVjdGlvbk1lc3NhZ2VcIjtcbmltcG9ydCB7IEFyZ3VtZW50TnVsbEVycm9yLCBJbnZhbGlkT3BlcmF0aW9uRXJyb3IgfSBmcm9tIFwiLi9FcnJvclwiO1xuaW1wb3J0IHsgY3JlYXRlTm9EYXNoR3VpZCB9IGZyb20gXCIuL0d1aWRcIjtcbmV4cG9ydCBjbGFzcyBSYXdXZWJzb2NrZXRNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlVHlwZSwgcGF5bG9hZCwgaWQpIHtcbiAgICAgICAgdGhpcy5wcml2UGF5bG9hZCA9IG51bGw7XG4gICAgICAgIGlmICghcGF5bG9hZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEVycm9yKFwicGF5bG9hZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZVR5cGUgPT09IE1lc3NhZ2VUeXBlLkJpbmFyeSAmJiAhKHBheWxvYWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJQYXlsb2FkIG11c3QgYmUgQXJyYXlCdWZmZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2VUeXBlID09PSBNZXNzYWdlVHlwZS5UZXh0ICYmICEodHlwZW9mIChwYXlsb2FkKSA9PT0gXCJzdHJpbmdcIikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJQYXlsb2FkIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcml2TWVzc2FnZVR5cGUgPSBtZXNzYWdlVHlwZTtcbiAgICAgICAgdGhpcy5wcml2UGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgICAgIHRoaXMucHJpdklkID0gaWQgPyBpZCA6IGNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICB9XG4gICAgZ2V0IG1lc3NhZ2VUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2TWVzc2FnZVR5cGU7XG4gICAgfVxuICAgIGdldCBwYXlsb2FkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UGF5bG9hZDtcbiAgICB9XG4gICAgZ2V0IHRleHRDb250ZW50KCkge1xuICAgICAgICBpZiAodGhpcy5wcml2TWVzc2FnZVR5cGUgPT09IE1lc3NhZ2VUeXBlLkJpbmFyeSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRPcGVyYXRpb25FcnJvcihcIk5vdCBzdXBwb3J0ZWQgZm9yIGJpbmFyeSBtZXNzYWdlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZQYXlsb2FkO1xuICAgIH1cbiAgICBnZXQgYmluYXJ5Q29udGVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJpdk1lc3NhZ2VUeXBlID09PSBNZXNzYWdlVHlwZS5UZXh0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wZXJhdGlvbkVycm9yKFwiTm90IHN1cHBvcnRlZCBmb3IgdGV4dCBtZXNzYWdlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZQYXlsb2FkO1xuICAgIH1cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZJZDtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJhd1dlYnNvY2tldE1lc3NhZ2UuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCBjbGFzcyBSaWZmUGNtRW5jb2RlciB7XG4gICAgY29uc3RydWN0b3IoYWN0dWFsU2FtcGxlUmF0ZSwgZGVzaXJlZFNhbXBsZVJhdGUpIHtcbiAgICAgICAgdGhpcy5wcml2Q2hhbm5lbENvdW50ID0gMTtcbiAgICAgICAgdGhpcy5lbmNvZGUgPSAobmVlZEhlYWRlciwgYWN0dWFsQXVkaW9GcmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXVkaW9GcmFtZSA9IHRoaXMuZG93blNhbXBsZUF1ZGlvRnJhbWUoYWN0dWFsQXVkaW9GcmFtZSwgdGhpcy5wcml2QWN0dWFsU2FtcGxlUmF0ZSwgdGhpcy5wcml2RGVzaXJlZFNhbXBsZVJhdGUpO1xuICAgICAgICAgICAgaWYgKCFhdWRpb0ZyYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhdWRpb0xlbmd0aCA9IGF1ZGlvRnJhbWUubGVuZ3RoICogMjtcbiAgICAgICAgICAgIGlmICghbmVlZEhlYWRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihhdWRpb0xlbmd0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmxvYXRUbzE2Qml0UENNKHZpZXcsIDAsIGF1ZGlvRnJhbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoNDQgKyBhdWRpb0xlbmd0aCk7XG4gICAgICAgICAgICBjb25zdCBiaXRzUGVyU2FtcGxlID0gMTY7XG4gICAgICAgICAgICBjb25zdCBieXRlc1BlclNhbXBsZSA9IGJpdHNQZXJTYW1wbGUgLyA4O1xuICAgICAgICAgICAgLy8gV2UgZG9udCBrbm93IGFoZWFkIG9mIHRpbWUgYWJvdXQgdGhlIGxlbmd0aCBvZiBhdWRpbyB0byBzdHJlYW0uIFNvIHNldCB0byAwLlxuICAgICAgICAgICAgY29uc3QgZmlsZUxlbmd0aCA9IDA7XG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRhVmlld1xuICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgICAgICAgICAgLyogUklGRiBpZGVudGlmaWVyICovXG4gICAgICAgICAgICB0aGlzLnNldFN0cmluZyh2aWV3LCAwLCBcIlJJRkZcIik7XG4gICAgICAgICAgICAvKiBmaWxlIGxlbmd0aCAqL1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MzIoNCwgZmlsZUxlbmd0aCwgdHJ1ZSk7XG4gICAgICAgICAgICAvKiBSSUZGIHR5cGUgJiBGb3JtYXQgKi9cbiAgICAgICAgICAgIHRoaXMuc2V0U3RyaW5nKHZpZXcsIDgsIFwiV0FWRWZtdCBcIik7XG4gICAgICAgICAgICAvKiBmb3JtYXQgY2h1bmsgbGVuZ3RoICovXG4gICAgICAgICAgICB2aWV3LnNldFVpbnQzMigxNiwgMTYsIHRydWUpO1xuICAgICAgICAgICAgLyogc2FtcGxlIGZvcm1hdCAocmF3KSAqL1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MTYoMjAsIDEsIHRydWUpO1xuICAgICAgICAgICAgLyogY2hhbm5lbCBjb3VudCAqL1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MTYoMjIsIHRoaXMucHJpdkNoYW5uZWxDb3VudCwgdHJ1ZSk7XG4gICAgICAgICAgICAvKiBzYW1wbGUgcmF0ZSAqL1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MzIoMjQsIHRoaXMucHJpdkRlc2lyZWRTYW1wbGVSYXRlLCB0cnVlKTtcbiAgICAgICAgICAgIC8qIGJ5dGUgcmF0ZSAoc2FtcGxlIHJhdGUgKiBibG9jayBhbGlnbikgKi9cbiAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKDI4LCB0aGlzLnByaXZEZXNpcmVkU2FtcGxlUmF0ZSAqIHRoaXMucHJpdkNoYW5uZWxDb3VudCAqIGJ5dGVzUGVyU2FtcGxlLCB0cnVlKTtcbiAgICAgICAgICAgIC8qIGJsb2NrIGFsaWduIChjaGFubmVsIGNvdW50ICogYnl0ZXMgcGVyIHNhbXBsZSkgKi9cbiAgICAgICAgICAgIHZpZXcuc2V0VWludDE2KDMyLCB0aGlzLnByaXZDaGFubmVsQ291bnQgKiBieXRlc1BlclNhbXBsZSwgdHJ1ZSk7XG4gICAgICAgICAgICAvKiBiaXRzIHBlciBzYW1wbGUgKi9cbiAgICAgICAgICAgIHZpZXcuc2V0VWludDE2KDM0LCBiaXRzUGVyU2FtcGxlLCB0cnVlKTtcbiAgICAgICAgICAgIC8qIGRhdGEgY2h1bmsgaWRlbnRpZmllciAqL1xuICAgICAgICAgICAgdGhpcy5zZXRTdHJpbmcodmlldywgMzYsIFwiZGF0YVwiKTtcbiAgICAgICAgICAgIC8qIGRhdGEgY2h1bmsgbGVuZ3RoICovXG4gICAgICAgICAgICB2aWV3LnNldFVpbnQzMig0MCwgZmlsZUxlbmd0aCwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmZsb2F0VG8xNkJpdFBDTSh2aWV3LCA0NCwgYXVkaW9GcmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldFN0cmluZyA9ICh2aWV3LCBvZmZzZXQsIHN0cikgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCArIGksIHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mbG9hdFRvMTZCaXRQQ00gPSAodmlldywgb2Zmc2V0LCBpbnB1dCkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKywgb2Zmc2V0ICs9IDIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gTWF0aC5tYXgoLTEsIE1hdGgubWluKDEsIGlucHV0W2ldKSk7XG4gICAgICAgICAgICAgICAgdmlldy5zZXRJbnQxNihvZmZzZXQsIHMgPCAwID8gcyAqIDB4ODAwMCA6IHMgKiAweDdGRkYsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRvd25TYW1wbGVBdWRpb0ZyYW1lID0gKHNyY0ZyYW1lLCBzcmNSYXRlLCBkc3RSYXRlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZHN0UmF0ZSA9PT0gc3JjUmF0ZSB8fCBkc3RSYXRlID4gc3JjUmF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzcmNGcmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJhdGlvID0gc3JjUmF0ZSAvIGRzdFJhdGU7XG4gICAgICAgICAgICBjb25zdCBkc3RMZW5ndGggPSBNYXRoLnJvdW5kKHNyY0ZyYW1lLmxlbmd0aCAvIHJhdGlvKTtcbiAgICAgICAgICAgIGNvbnN0IGRzdEZyYW1lID0gbmV3IEZsb2F0MzJBcnJheShkc3RMZW5ndGgpO1xuICAgICAgICAgICAgbGV0IHNyY09mZnNldCA9IDA7XG4gICAgICAgICAgICBsZXQgZHN0T2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChkc3RPZmZzZXQgPCBkc3RMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0U3JjT2Zmc2V0ID0gTWF0aC5yb3VuZCgoZHN0T2Zmc2V0ICsgMSkgKiByYXRpbyk7XG4gICAgICAgICAgICAgICAgbGV0IGFjY3VtID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlIChzcmNPZmZzZXQgPCBuZXh0U3JjT2Zmc2V0ICYmIHNyY09mZnNldCA8IHNyY0ZyYW1lLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBhY2N1bSArPSBzcmNGcmFtZVtzcmNPZmZzZXQrK107XG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRzdEZyYW1lW2RzdE9mZnNldCsrXSA9IGFjY3VtIC8gY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZHN0RnJhbWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdkFjdHVhbFNhbXBsZVJhdGUgPSBhY3R1YWxTYW1wbGVSYXRlO1xuICAgICAgICB0aGlzLnByaXZEZXNpcmVkU2FtcGxlUmF0ZSA9IGRlc2lyZWRTYW1wbGVSYXRlO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmlmZlBjbUVuY29kZXIuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEludmFsaWRPcGVyYXRpb25FcnJvciB9IGZyb20gXCIuL0Vycm9yXCI7XG5pbXBvcnQgeyBjcmVhdGVOb0Rhc2hHdWlkIH0gZnJvbSBcIi4vR3VpZFwiO1xuaW1wb3J0IHsgUXVldWUgfSBmcm9tIFwiLi9RdWV1ZVwiO1xuZXhwb3J0IGNsYXNzIFN0cmVhbSB7XG4gICAgY29uc3RydWN0b3Ioc3RyZWFtSWQpIHtcbiAgICAgICAgdGhpcy5wcml2UmVhZGVySWRDb3VudGVyID0gMTtcbiAgICAgICAgdGhpcy5wcml2SXNFbmRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdldFJlYWRlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlYWRlcklkID0gdGhpcy5wcml2UmVhZGVySWRDb3VudGVyO1xuICAgICAgICAgICAgdGhpcy5wcml2UmVhZGVySWRDb3VudGVyKys7XG4gICAgICAgICAgICBjb25zdCByZWFkZXJRdWV1ZSA9IG5ldyBRdWV1ZSgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudExlbmd0aCA9IHRoaXMucHJpdlN0cmVhbWJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnByaXZSZWFkZXJRdWV1ZXNbcmVhZGVySWRdID0gcmVhZGVyUXVldWU7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlYWRlclF1ZXVlLmVucXVldWUodGhpcy5wcml2U3RyZWFtYnVmZmVyW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyZWFtUmVhZGVyKHRoaXMucHJpdklkLCByZWFkZXJRdWV1ZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnByaXZSZWFkZXJRdWV1ZXNbcmVhZGVySWRdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudGhyb3dJZkNsb3NlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZJc0VuZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRPcGVyYXRpb25FcnJvcihcIlN0cmVhbSBjbG9zZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdklkID0gc3RyZWFtSWQgPyBzdHJlYW1JZCA6IGNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgdGhpcy5wcml2U3RyZWFtYnVmZmVyID0gW107XG4gICAgICAgIHRoaXMucHJpdlJlYWRlclF1ZXVlcyA9IHt9O1xuICAgIH1cbiAgICBnZXQgaXNDbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZJc0VuZGVkO1xuICAgIH1cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZJZDtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5wcml2SXNFbmRlZCkge1xuICAgICAgICAgICAgdGhpcy53cml0ZVN0cmVhbUNodW5rKHtcbiAgICAgICAgICAgICAgICBidWZmZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgaXNFbmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZVJlY2VpdmVkOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnByaXZJc0VuZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3cml0ZVN0cmVhbUNodW5rKHN0cmVhbUNodW5rKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICB0aGlzLnByaXZTdHJlYW1idWZmZXIucHVzaChzdHJlYW1DaHVuayk7XG4gICAgICAgIGZvciAoY29uc3QgcmVhZGVySWQgaW4gdGhpcy5wcml2UmVhZGVyUXVldWVzKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJpdlJlYWRlclF1ZXVlc1tyZWFkZXJJZF0uaXNEaXNwb3NlZCgpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2UmVhZGVyUXVldWVzW3JlYWRlcklkXS5lbnF1ZXVlKHN0cmVhbUNodW5rKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIFN0cmVhbVJlYWRlciB7XG4gICAgY29uc3RydWN0b3Ioc3RyZWFtSWQsIHJlYWRlclF1ZXVlLCBvbkNsb3NlKSB7XG4gICAgICAgIHRoaXMucHJpdklzQ2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVhZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRPcGVyYXRpb25FcnJvcihcIlN0cmVhbVJlYWRlciBjbG9zZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVhZGVyUXVldWVcbiAgICAgICAgICAgICAgICAuZGVxdWV1ZSgpXG4gICAgICAgICAgICAgICAgLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aCgoc3RyZWFtQ2h1bmspID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc3RyZWFtQ2h1bmsgPT09IHVuZGVmaW5lZCB8fCBzdHJlYW1DaHVuay5pc0VuZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWFkZXJRdWV1ZS5kaXNwb3NlKFwiRW5kIG9mIHN0cmVhbSByZWFjaGVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtQ2h1bms7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wcml2SXNDbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZJc0Nsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVhZGVyUXVldWUuZGlzcG9zZShcIlN0cmVhbVJlYWRlciBjbG9zZWRcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2T25DbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByaXZSZWFkZXJRdWV1ZSA9IHJlYWRlclF1ZXVlO1xuICAgICAgICB0aGlzLnByaXZPbkNsb3NlID0gb25DbG9zZTtcbiAgICAgICAgdGhpcy5wcml2U3RyZWFtSWQgPSBzdHJlYW1JZDtcbiAgICB9XG4gICAgZ2V0IGlzQ2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2SXNDbG9zZWQ7XG4gICAgfVxuICAgIGdldCBzdHJlYW1JZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlN0cmVhbUlkO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RyZWFtLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIERlZmluZXMgY29udGVudHMgb2YgcmVjZWl2ZWQgbWVzc2FnZS9ldmVudHMuXG4gKiBAY2xhc3MgQWN0aXZpdHlSZWNlaXZlZEV2ZW50QXJnc1xuICovXG5leHBvcnQgY2xhc3MgQWN0aXZpdHlSZWNlaXZlZEV2ZW50QXJncyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge2FueX0gYWN0aXZpdHkgLSBUaGUgYWN0aXZpdHkuLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFjdGl2aXR5LCBhdWRpb1N0cmVhbSkge1xuICAgICAgICB0aGlzLnByaXZBY3Rpdml0eSA9IGFjdGl2aXR5O1xuICAgICAgICB0aGlzLnByaXZBdWRpb1N0cmVhbSA9IGF1ZGlvU3RyZWFtO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSByZWNlaXZlZCBhY3Rpdml0eVxuICAgICAqIEBtZW1iZXIgQWN0aXZpdHlSZWNlaXZlZEV2ZW50QXJncy5wcm90b3R5cGUuYWN0aXZpdHlcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge2FueX0gdGhlIHJlY2VpdmVkIGFjdGl2aXR5LlxuICAgICAqL1xuICAgIGdldCBhY3Rpdml0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkFjdGl2aXR5O1xuICAgIH1cbiAgICBnZXQgYXVkaW9TdHJlYW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZBdWRpb1N0cmVhbTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjdGl2aXR5UmVjZWl2ZWRFdmVudEFyZ3MuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEZpbGVBdWRpb1NvdXJjZSwgTWljQXVkaW9Tb3VyY2UsIFBjbVJlY29yZGVyIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi5icm93c2VyL0V4cG9ydHNcIjtcbmltcG9ydCB7IENvbnRyYWN0cyB9IGZyb20gXCIuLi9Db250cmFjdHNcIjtcbmltcG9ydCB7IEF1ZGlvSW5wdXRTdHJlYW0sIFB1bGxBdWRpb0lucHV0U3RyZWFtQ2FsbGJhY2sgfSBmcm9tIFwiLi4vRXhwb3J0c1wiO1xuaW1wb3J0IHsgYnVmZmVyU2l6ZSwgUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsIH0gZnJvbSBcIi4vQXVkaW9JbnB1dFN0cmVhbVwiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb24gdXNlZCBmb3Igc3BlY2lmeWluZyB3aGF0IHR5cGUgb2YgaW5wdXQgdG8gdXNlIChtaWNyb3Bob25lLCBmaWxlLCBzdHJlYW0pLlxuICogQGNsYXNzIEF1ZGlvQ29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBBdWRpb0NvbmZpZyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBBdWRpb0NvbmZpZyBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBkZWZhdWx0IG1pY3JvcGhvbmUgb24gdGhlIHN5c3RlbS5cbiAgICAgKiBAbWVtYmVyIEF1ZGlvQ29uZmlnLmZyb21EZWZhdWx0TWljcm9waG9uZUlucHV0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtBdWRpb0NvbmZpZ30gVGhlIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb24gYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbURlZmF1bHRNaWNyb3Bob25lSW5wdXQoKSB7XG4gICAgICAgIGNvbnN0IHBjbVJlY29yZGVyID0gbmV3IFBjbVJlY29yZGVyKCk7XG4gICAgICAgIHJldHVybiBuZXcgQXVkaW9Db25maWdJbXBsKG5ldyBNaWNBdWRpb1NvdXJjZShwY21SZWNvcmRlciwgYnVmZmVyU2l6ZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIEF1ZGlvQ29uZmlnIG9iamVjdCByZXByZXNlbnRpbmcgYSBtaWNyb3Bob25lIHdpdGggdGhlIHNwZWNpZmllZCBkZXZpY2UgSUQuXG4gICAgICogQG1lbWJlciBBdWRpb0NvbmZpZy5mcm9tTWljcm9waG9uZUlucHV0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBkZXZpY2VJZCAtIFNwZWNpZmllcyB0aGUgZGV2aWNlIElEIG9mIHRoZSBtaWNyb3Bob25lIHRvIGJlIHVzZWQuXG4gICAgICogICAgICAgIERlZmF1bHQgbWljcm9waG9uZSBpcyB1c2VkIHRoZSB2YWx1ZSBpcyBvbWl0dGVkLlxuICAgICAqIEByZXR1cm5zIHtBdWRpb0NvbmZpZ30gVGhlIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb24gYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbU1pY3JvcGhvbmVJbnB1dChkZXZpY2VJZCkge1xuICAgICAgICBjb25zdCBwY21SZWNvcmRlciA9IG5ldyBQY21SZWNvcmRlcigpO1xuICAgICAgICByZXR1cm4gbmV3IEF1ZGlvQ29uZmlnSW1wbChuZXcgTWljQXVkaW9Tb3VyY2UocGNtUmVjb3JkZXIsIGJ1ZmZlclNpemUsIGRldmljZUlkKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gQXVkaW9Db25maWcgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIGZpbGUuXG4gICAgICogQG1lbWJlciBBdWRpb0NvbmZpZy5mcm9tV2F2RmlsZUlucHV0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZU5hbWUgLSBTcGVjaWZpZXMgdGhlIGF1ZGlvIGlucHV0IGZpbGUuIEN1cnJlbnRseSwgb25seSBXQVYgLyBQQ00gd2l0aCAxNi1iaXRcbiAgICAgKiAgICAgICAgc2FtcGxlcywgMTYga0h6IHNhbXBsZSByYXRlLCBhbmQgYSBzaW5nbGUgY2hhbm5lbCAoTW9ubykgaXMgc3VwcG9ydGVkLlxuICAgICAqIEByZXR1cm5zIHtBdWRpb0NvbmZpZ30gVGhlIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb24gYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVdhdkZpbGVJbnB1dChmaWxlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXVkaW9Db25maWdJbXBsKG5ldyBGaWxlQXVkaW9Tb3VyY2UoZmlsZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIEF1ZGlvQ29uZmlnIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBzdHJlYW0uXG4gICAgICogQG1lbWJlciBBdWRpb0NvbmZpZy5mcm9tU3RyZWFtSW5wdXRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtBdWRpb0lucHV0U3RyZWFtIHwgUHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFja30gYXVkaW9TdHJlYW0gLSBTcGVjaWZpZXMgdGhlIGN1c3RvbSBhdWRpbyBpbnB1dFxuICAgICAqICAgICAgICBzdHJlYW0uIEN1cnJlbnRseSwgb25seSBXQVYgLyBQQ00gd2l0aCAxNi1iaXQgc2FtcGxlcywgMTYga0h6IHNhbXBsZSByYXRlLCBhbmQgYSBzaW5nbGUgY2hhbm5lbFxuICAgICAqICAgICAgICAoTW9ubykgaXMgc3VwcG9ydGVkLlxuICAgICAqIEByZXR1cm5zIHtBdWRpb0NvbmZpZ30gVGhlIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb24gYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVN0cmVhbUlucHV0KGF1ZGlvU3RyZWFtKSB7XG4gICAgICAgIGlmIChhdWRpb1N0cmVhbSBpbnN0YW5jZW9mIFB1bGxBdWRpb0lucHV0U3RyZWFtQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXVkaW9Db25maWdJbXBsKG5ldyBQdWxsQXVkaW9JbnB1dFN0cmVhbUltcGwoYXVkaW9TdHJlYW0pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXVkaW9TdHJlYW0gaW5zdGFuY2VvZiBBdWRpb0lucHV0U3RyZWFtKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEF1ZGlvQ29uZmlnSW1wbChhdWRpb1N0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IFN1cHBvcnRlZCBUeXBlXCIpO1xuICAgIH1cbn1cbi8qKlxuICogUmVwcmVzZW50cyBhdWRpbyBpbnB1dCBzdHJlYW0gdXNlZCBmb3IgY3VzdG9tIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb25zLlxuICogQHByaXZhdGVcbiAqIEBjbGFzcyBBdWRpb0NvbmZpZ0ltcGxcbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgQXVkaW9Db25maWdJbXBsIGV4dGVuZHMgQXVkaW9Db25maWcge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtJQXVkaW9Tb3VyY2V9IHNvdXJjZSAtIEFuIGF1ZGlvIHNvdXJjZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wcml2U291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3JtYXQgaW5mb3JtYXRpb24gZm9yIHRoZSBhdWRpb1xuICAgICAqL1xuICAgIGdldCBmb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTb3VyY2UuZm9ybWF0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIEF1ZGlvQ29uZmlnSW1wbC5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMucHJpdlNvdXJjZS50dXJuT2ZmKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIgQXVkaW9Db25maWdJbXBsLnByb3RvdHlwZS5pZFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNvdXJjZS5pZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIEF1ZGlvQ29uZmlnSW1wbC5wcm90b3R5cGUudHVybk9uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBBIHByb21pc2UuXG4gICAgICovXG4gICAgdHVybk9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U291cmNlLnR1cm5PbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIEF1ZGlvQ29uZmlnSW1wbC5wcm90b3R5cGUuYXR0YWNoXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdWRpb05vZGVJZCAtIFRoZSBhdWRpbyBub2RlIGlkLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPElBdWRpb1N0cmVhbU5vZGU+fSBBIHByb21pc2UuXG4gICAgICovXG4gICAgYXR0YWNoKGF1ZGlvTm9kZUlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTb3VyY2UuYXR0YWNoKGF1ZGlvTm9kZUlkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG1lbWJlciBBdWRpb0NvbmZpZ0ltcGwucHJvdG90eXBlLmRldGFjaFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXVkaW9Ob2RlSWQgLSBUaGUgYXVkaW8gbm9kZSBpZC5cbiAgICAgKi9cbiAgICBkZXRhY2goYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGV0YWNoKGF1ZGlvTm9kZUlkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG1lbWJlciBBdWRpb0NvbmZpZ0ltcGwucHJvdG90eXBlLnR1cm5PZmZcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IEEgcHJvbWlzZS5cbiAgICAgKi9cbiAgICB0dXJuT2ZmKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U291cmNlLnR1cm5PZmYoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQG1lbWJlciBBdWRpb0NvbmZpZ0ltcGwucHJvdG90eXBlLmV2ZW50c1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRTb3VyY2U8QXVkaW9Tb3VyY2VFdmVudD59IEFuIGV2ZW50IHNvdXJjZSBmb3IgYXVkaW8gZXZlbnRzLlxuICAgICAqL1xuICAgIGdldCBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTb3VyY2UuZXZlbnRzO1xuICAgIH1cbiAgICBzZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGwodmFsdWUsIFwidmFsdWVcIik7XG4gICAgICAgIGlmICh1bmRlZmluZWQgIT09IHRoaXMucHJpdlNvdXJjZS5zZXRQcm9wZXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5wcml2U291cmNlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgQXVkaW9Db25maWcgaW5zdGFuY2UgZG9lcyBub3Qgc3VwcG9ydCBzZXR0aW5nIHByb3BlcnRpZXMuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFByb3BlcnR5KG5hbWUsIGRlZikge1xuICAgICAgICBpZiAodW5kZWZpbmVkICE9PSB0aGlzLnByaXZTb3VyY2UuZ2V0UHJvcGVydHkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTb3VyY2UuZ2V0UHJvcGVydHkobmFtZSwgZGVmKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgQXVkaW9Db25maWcgaW5zdGFuY2UgZG9lcyBub3Qgc3VwcG9ydCBnZXR0aW5nIHByb3BlcnRpZXMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWY7XG4gICAgfVxuICAgIGdldCBkZXZpY2VJbmZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U291cmNlLmRldmljZUluZm87XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdWRpb0NvbmZpZy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlTm9EYXNoR3VpZCB9IGZyb20gXCIuLi8uLi8uLi9zcmMvY29tbW9uL0d1aWRcIjtcbmltcG9ydCB7IGNvbm5lY3Rpdml0eSwgdHlwZSwgfSBmcm9tIFwiLi4vLi4vY29tbW9uLnNwZWVjaC9FeHBvcnRzXCI7XG5pbXBvcnQgeyBBdWRpb1NvdXJjZUluaXRpYWxpemluZ0V2ZW50LCBBdWRpb1NvdXJjZVJlYWR5RXZlbnQsIEF1ZGlvU3RyZWFtTm9kZUF0dGFjaGVkRXZlbnQsIEF1ZGlvU3RyZWFtTm9kZUF0dGFjaGluZ0V2ZW50LCBBdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50LCBDaHVua2VkQXJyYXlCdWZmZXJTdHJlYW0sIEV2ZW50cywgRXZlbnRTb3VyY2UsIFByb21pc2VIZWxwZXIsIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9FeHBvcnRzXCI7XG5pbXBvcnQgeyBBdWRpb1N0cmVhbUZvcm1hdCB9IGZyb20gXCIuLi9FeHBvcnRzXCI7XG5pbXBvcnQgeyBBdWRpb1N0cmVhbUZvcm1hdEltcGwgfSBmcm9tIFwiLi9BdWRpb1N0cmVhbUZvcm1hdFwiO1xuZXhwb3J0IGNvbnN0IGJ1ZmZlclNpemUgPSA0MDk2O1xuLyoqXG4gKiBSZXByZXNlbnRzIGF1ZGlvIGlucHV0IHN0cmVhbSB1c2VkIGZvciBjdXN0b20gYXVkaW8gaW5wdXQgY29uZmlndXJhdGlvbnMuXG4gKiBAY2xhc3MgQXVkaW9JbnB1dFN0cmVhbVxuICovXG5leHBvcnQgY2xhc3MgQXVkaW9JbnB1dFN0cmVhbSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2UuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7IH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWVtb3J5IGJhY2tlZCBQdXNoQXVkaW9JbnB1dFN0cmVhbSB3aXRoIHRoZSBzcGVjaWZpZWQgYXVkaW8gZm9ybWF0LlxuICAgICAqIEBtZW1iZXIgQXVkaW9JbnB1dFN0cmVhbS5jcmVhdGVQdXNoU3RyZWFtXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7QXVkaW9TdHJlYW1Gb3JtYXR9IGZvcm1hdCAtIFRoZSBhdWRpbyBkYXRhIGZvcm1hdCBpbiB3aGljaCBhdWRpbyB3aWxsIGJlXG4gICAgICogICAgICAgIHdyaXR0ZW4gdG8gdGhlIHB1c2ggYXVkaW8gc3RyZWFtJ3Mgd3JpdGUoKSBtZXRob2QgKGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgMTYga0h6IDE2Yml0IG1vbm8gUENNKS5cbiAgICAgKiBAcmV0dXJucyB7UHVzaEF1ZGlvSW5wdXRTdHJlYW19IFRoZSBhdWRpbyBpbnB1dCBzdHJlYW0gYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlUHVzaFN0cmVhbShmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIFB1c2hBdWRpb0lucHV0U3RyZWFtLmNyZWF0ZShmb3JtYXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgUHVsbEF1ZGlvSW5wdXRTdHJlYW0gdGhhdCBkZWxlZ2F0ZXMgdG8gdGhlIHNwZWNpZmllZCBjYWxsYmFjayBpbnRlcmZhY2UgZm9yIHJlYWQoKVxuICAgICAqIGFuZCBjbG9zZSgpIG1ldGhvZHMuXG4gICAgICogQG1lbWJlciBBdWRpb0lucHV0U3RyZWFtLmNyZWF0ZVB1bGxTdHJlYW1cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtQdWxsQXVkaW9JbnB1dFN0cmVhbUNhbGxiYWNrfSBjYWxsYmFjayAtIFRoZSBjdXN0b20gYXVkaW8gaW5wdXQgb2JqZWN0LCBkZXJpdmVkIGZyb21cbiAgICAgKiAgICAgICAgUHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFja1xuICAgICAqIEBwYXJhbSB7QXVkaW9TdHJlYW1Gb3JtYXR9IGZvcm1hdCAtIFRoZSBhdWRpbyBkYXRhIGZvcm1hdCBpbiB3aGljaCBhdWRpbyB3aWxsIGJlIHJldHVybmVkIGZyb21cbiAgICAgKiAgICAgICAgdGhlIGNhbGxiYWNrJ3MgcmVhZCgpIG1ldGhvZCAoY3VycmVudGx5IG9ubHkgc3VwcG9ydCAxNiBrSHogMTZiaXQgbW9ubyBQQ00pLlxuICAgICAqIEByZXR1cm5zIHtQdWxsQXVkaW9JbnB1dFN0cmVhbX0gVGhlIGF1ZGlvIGlucHV0IHN0cmVhbSBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVQdWxsU3RyZWFtKGNhbGxiYWNrLCBmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIFB1bGxBdWRpb0lucHV0U3RyZWFtLmNyZWF0ZShjYWxsYmFjaywgZm9ybWF0KTtcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiT29wc1wiKTtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgbWVtb3J5IGJhY2tlZCBwdXNoIGF1ZGlvIGlucHV0IHN0cmVhbSB1c2VkIGZvciBjdXN0b20gYXVkaW8gaW5wdXQgY29uZmlndXJhdGlvbnMuXG4gKiBAY2xhc3MgUHVzaEF1ZGlvSW5wdXRTdHJlYW1cbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgUHVzaEF1ZGlvSW5wdXRTdHJlYW0gZXh0ZW5kcyBBdWRpb0lucHV0U3RyZWFtIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWVtb3J5IGJhY2tlZCBQdXNoQXVkaW9JbnB1dFN0cmVhbSB3aXRoIHRoZSBzcGVjaWZpZWQgYXVkaW8gZm9ybWF0LlxuICAgICAqIEBtZW1iZXIgUHVzaEF1ZGlvSW5wdXRTdHJlYW0uY3JlYXRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7QXVkaW9TdHJlYW1Gb3JtYXR9IGZvcm1hdCAtIFRoZSBhdWRpbyBkYXRhIGZvcm1hdCBpbiB3aGljaCBhdWRpbyB3aWxsIGJlIHdyaXR0ZW4gdG8gdGhlXG4gICAgICogICAgICAgIHB1c2ggYXVkaW8gc3RyZWFtJ3Mgd3JpdGUoKSBtZXRob2QgKGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgMTYga0h6IDE2Yml0IG1vbm8gUENNKS5cbiAgICAgKiBAcmV0dXJucyB7UHVzaEF1ZGlvSW5wdXRTdHJlYW19IFRoZSBwdXNoIGF1ZGlvIGlucHV0IHN0cmVhbSBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGUoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHVzaEF1ZGlvSW5wdXRTdHJlYW1JbXBsKGJ1ZmZlclNpemUsIGZvcm1hdCk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIG1lbW9yeSBiYWNrZWQgcHVzaCBhdWRpbyBpbnB1dCBzdHJlYW0gdXNlZCBmb3IgY3VzdG9tIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb25zLlxuICogQHByaXZhdGVcbiAqIEBjbGFzcyBQdXNoQXVkaW9JbnB1dFN0cmVhbUltcGxcbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgUHVzaEF1ZGlvSW5wdXRTdHJlYW1JbXBsIGV4dGVuZHMgUHVzaEF1ZGlvSW5wdXRTdHJlYW0ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRhbGl6ZXMgYW4gaW5zdGFuY2Ugd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXVkaW9TdHJlYW1Gb3JtYXR9IGZvcm1hdCAtIFRoZSBhdWRpbyBzdHJlYW0gZm9ybWF0LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNodW5rU2l6ZSwgZm9ybWF0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub25FdmVudCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcml2RXZlbnRzLm9uRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgRXZlbnRzLmluc3RhbmNlLm9uRXZlbnQoZXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkZvcm1hdCA9IEF1ZGlvU3RyZWFtRm9ybWF0SW1wbC5nZXREZWZhdWx0SW5wdXRGb3JtYXQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkZvcm1hdCA9IGZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZFdmVudHMgPSBuZXcgRXZlbnRTb3VyY2UoKTtcbiAgICAgICAgdGhpcy5wcml2SWQgPSBjcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgIHRoaXMucHJpdlN0cmVhbSA9IG5ldyBDaHVua2VkQXJyYXlCdWZmZXJTdHJlYW0oY2h1bmtTaXplKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9ybWF0IGluZm9ybWF0aW9uIGZvciB0aGUgYXVkaW9cbiAgICAgKi9cbiAgICBnZXQgZm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2Rm9ybWF0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgdGhlIGF1ZGlvIGRhdGEgc3BlY2lmaWVkIGJ5IG1ha2luZyBhbiBpbnRlcm5hbCBjb3B5IG9mIHRoZSBkYXRhLlxuICAgICAqIEBtZW1iZXIgUHVzaEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZS53cml0ZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhQnVmZmVyIC0gVGhlIGF1ZGlvIGJ1ZmZlciBvZiB3aGljaCB0aGlzIGZ1bmN0aW9uIHdpbGwgbWFrZSBhIGNvcHkuXG4gICAgICovXG4gICAgd3JpdGUoZGF0YUJ1ZmZlcikge1xuICAgICAgICB0aGlzLnByaXZTdHJlYW0ud3JpdGVTdHJlYW1DaHVuayh7XG4gICAgICAgICAgICBidWZmZXI6IGRhdGFCdWZmZXIsXG4gICAgICAgICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAgICAgICB0aW1lUmVjZWl2ZWQ6IERhdGUubm93KClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgc3RyZWFtLlxuICAgICAqIEBtZW1iZXIgUHVzaEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZS5jbG9zZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5wcml2U3RyZWFtLmNsb3NlKCk7XG4gICAgfVxuICAgIGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgfVxuICAgIHR1cm5PbigpIHtcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1NvdXJjZUluaXRpYWxpemluZ0V2ZW50KHRoaXMucHJpdklkKSk7IC8vIG5vIHN0cmVhbSBpZFxuICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEF1ZGlvU291cmNlUmVhZHlFdmVudCh0aGlzLnByaXZJZCkpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgIH1cbiAgICBhdHRhY2goYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1N0cmVhbU5vZGVBdHRhY2hpbmdFdmVudCh0aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHVybk9uKClcbiAgICAgICAgICAgIC5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKF8pID0+IHtcbiAgICAgICAgICAgIC8vIEZvciBub3cgd2Ugc3VwcG9ydCBhIHNpbmdsZSBwYXJhbGxlbCByZWFkZXIgb2YgdGhlIHB1c2hlZCBzdHJlYW0uXG4gICAgICAgICAgICAvLyBTbyB3ZSBjYW4gc2ltaXBseSBoYW5kIHRoZSBzdHJlYW0gdG8gdGhlIHJlY29nbml6ZXIgYW5kIGxldCBpdCByZWNvZ25pemUuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aCgoc3RyZWFtUmVhZGVyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEF1ZGlvU3RyZWFtTm9kZUF0dGFjaGVkRXZlbnQodGhpcy5wcml2SWQsIGF1ZGlvTm9kZUlkKSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRldGFjaDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW1SZWFkZXIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50KHRoaXMucHJpdklkLCBhdWRpb05vZGVJZCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnR1cm5PZmYoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlkOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhdWRpb05vZGVJZDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlYWQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbVJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZXRhY2goYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50KHRoaXMucHJpdklkLCBhdWRpb05vZGVJZCkpO1xuICAgIH1cbiAgICB0dXJuT2ZmKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgZ2V0IGV2ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkV2ZW50cztcbiAgICB9XG4gICAgZ2V0IGRldmljZUluZm8oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQoe1xuICAgICAgICAgICAgYml0c3BlcnNhbXBsZTogdGhpcy5wcml2Rm9ybWF0LmJpdHNQZXJTYW1wbGUsXG4gICAgICAgICAgICBjaGFubmVsY291bnQ6IHRoaXMucHJpdkZvcm1hdC5jaGFubmVscyxcbiAgICAgICAgICAgIGNvbm5lY3Rpdml0eTogY29ubmVjdGl2aXR5LlVua25vd24sXG4gICAgICAgICAgICBtYW51ZmFjdHVyZXI6IFwiU3BlZWNoIFNES1wiLFxuICAgICAgICAgICAgbW9kZWw6IFwiUHVzaFN0cmVhbVwiLFxuICAgICAgICAgICAgc2FtcGxlcmF0ZTogdGhpcy5wcml2Rm9ybWF0LnNhbXBsZXNQZXJTZWMsXG4gICAgICAgICAgICB0eXBlOiB0eXBlLlN0cmVhbSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLypcbiAqIFJlcHJlc2VudHMgYXVkaW8gaW5wdXQgc3RyZWFtIHVzZWQgZm9yIGN1c3RvbSBhdWRpbyBpbnB1dCBjb25maWd1cmF0aW9ucy5cbiAqIEBjbGFzcyBQdWxsQXVkaW9JbnB1dFN0cmVhbVxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbmV4cG9ydCBjbGFzcyBQdWxsQXVkaW9JbnB1dFN0cmVhbSBleHRlbmRzIEF1ZGlvSW5wdXRTdHJlYW0ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuZCBpbnN0YW5jZS5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHsgc3VwZXIoKTsgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBQdWxsQXVkaW9JbnB1dFN0cmVhbSB0aGF0IGRlbGVnYXRlcyB0byB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIGludGVyZmFjZSBmb3JcbiAgICAgKiByZWFkKCkgYW5kIGNsb3NlKCkgbWV0aG9kcywgdXNpbmcgdGhlIGRlZmF1bHQgZm9ybWF0ICgxNiBrSHogMTZiaXQgbW9ubyBQQ00pLlxuICAgICAqIEBtZW1iZXIgUHVsbEF1ZGlvSW5wdXRTdHJlYW0uY3JlYXRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7UHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY3VzdG9tIGF1ZGlvIGlucHV0IG9iamVjdCxcbiAgICAgKiAgICAgICAgZGVyaXZlZCBmcm9tIFB1bGxBdWRpb0lucHV0U3RyZWFtQ3VzdG9tQ2FsbGJhY2tcbiAgICAgKiBAcGFyYW0ge0F1ZGlvU3RyZWFtRm9ybWF0fSBmb3JtYXQgLSBUaGUgYXVkaW8gZGF0YSBmb3JtYXQgaW4gd2hpY2ggYXVkaW8gd2lsbCBiZVxuICAgICAqICAgICAgICByZXR1cm5lZCBmcm9tIHRoZSBjYWxsYmFjaydzIHJlYWQoKSBtZXRob2QgKGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgMTYga0h6IDE2Yml0IG1vbm8gUENNKS5cbiAgICAgKiBAcmV0dXJucyB7UHVsbEF1ZGlvSW5wdXRTdHJlYW19IFRoZSBwdXNoIGF1ZGlvIGlucHV0IHN0cmVhbSBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGUoY2FsbGJhY2ssIGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gbmV3IFB1bGxBdWRpb0lucHV0U3RyZWFtSW1wbChjYWxsYmFjaywgZm9ybWF0KTtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYXVkaW8gaW5wdXQgc3RyZWFtIHVzZWQgZm9yIGN1c3RvbSBhdWRpbyBpbnB1dCBjb25maWd1cmF0aW9ucy5cbiAqIEBwcml2YXRlXG4gKiBAY2xhc3MgUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIFB1bGxBdWRpb0lucHV0U3RyZWFtSW1wbCBleHRlbmRzIFB1bGxBdWRpb0lucHV0U3RyZWFtIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgUHVsbEF1ZGlvSW5wdXRTdHJlYW0gdGhhdCBkZWxlZ2F0ZXMgdG8gdGhlIHNwZWNpZmllZCBjYWxsYmFjayBpbnRlcmZhY2UgZm9yXG4gICAgICogcmVhZCgpIGFuZCBjbG9zZSgpIG1ldGhvZHMsIHVzaW5nIHRoZSBkZWZhdWx0IGZvcm1hdCAoMTYga0h6IDE2Yml0IG1vbm8gUENNKS5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1B1bGxBdWRpb0lucHV0U3RyZWFtQ2FsbGJhY2t9IGNhbGxiYWNrIC0gVGhlIGN1c3RvbSBhdWRpbyBpbnB1dCBvYmplY3QsXG4gICAgICogICAgICAgIGRlcml2ZWQgZnJvbSBQdWxsQXVkaW9JbnB1dFN0cmVhbUN1c3RvbUNhbGxiYWNrXG4gICAgICogQHBhcmFtIHtBdWRpb1N0cmVhbUZvcm1hdH0gZm9ybWF0IC0gVGhlIGF1ZGlvIGRhdGEgZm9ybWF0IGluIHdoaWNoIGF1ZGlvIHdpbGwgYmVcbiAgICAgKiAgICAgICAgcmV0dXJuZWQgZnJvbSB0aGUgY2FsbGJhY2sncyByZWFkKCkgbWV0aG9kIChjdXJyZW50bHkgb25seSBzdXBwb3J0IDE2IGtIeiAxNmJpdCBtb25vIFBDTSkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2ssIGZvcm1hdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9uRXZlbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJpdkV2ZW50cy5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIEV2ZW50cy5pbnN0YW5jZS5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gZm9ybWF0KSB7XG4gICAgICAgICAgICB0aGlzLnByaXZGb3JtYXQgPSBBdWRpb1N0cmVhbUZvcm1hdC5nZXREZWZhdWx0SW5wdXRGb3JtYXQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkZvcm1hdCA9IGZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZFdmVudHMgPSBuZXcgRXZlbnRTb3VyY2UoKTtcbiAgICAgICAgdGhpcy5wcml2SWQgPSBjcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgIHRoaXMucHJpdkNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMucHJpdklzQ2xvc2VkID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvcm1hdCBpbmZvcm1hdGlvbiBmb3IgdGhlIGF1ZGlvXG4gICAgICovXG4gICAgZ2V0IGZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkZvcm1hdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBzdHJlYW0uXG4gICAgICogQG1lbWJlciBQdWxsQXVkaW9JbnB1dFN0cmVhbUltcGwucHJvdG90eXBlLmNsb3NlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLnByaXZJc0Nsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMucHJpdkNhbGxiYWNrLmNsb3NlKCk7XG4gICAgfVxuICAgIGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgfVxuICAgIHR1cm5PbigpIHtcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1NvdXJjZUluaXRpYWxpemluZ0V2ZW50KHRoaXMucHJpdklkKSk7IC8vIG5vIHN0cmVhbSBpZFxuICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEF1ZGlvU291cmNlUmVhZHlFdmVudCh0aGlzLnByaXZJZCkpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgIH1cbiAgICBhdHRhY2goYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1N0cmVhbU5vZGVBdHRhY2hpbmdFdmVudCh0aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHVybk9uKClcbiAgICAgICAgICAgIC5vblN1Y2Nlc3NDb250aW51ZVdpdGgoKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1N0cmVhbU5vZGVBdHRhY2hlZEV2ZW50KHRoaXMucHJpdklkLCBhdWRpb05vZGVJZCkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkZXRhY2g6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2Q2FsbGJhY2suY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBBdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50KHRoaXMucHJpdklkLCBhdWRpb05vZGVJZCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnR1cm5PZmYoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlkOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhdWRpb05vZGVJZDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlYWQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvdGFsQnl0ZXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHJhbnNtaXRCdWZmO1xuICAgICAgICAgICAgICAgICAgICAvLyBVbnRpbCB3ZSBoYXZlIHRoZSBtaW5pbXVtIG51bWJlciBvZiBieXRlcyB0byBzZW5kIGluIGEgdHJhbnNtaXNzaW9uLCBrZWVwIGFza2luZyBmb3IgbW9yZS5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRvdGFsQnl0ZXMgPCBidWZmZXJTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaXppbmcgdGhlIHJlYWQgYnVmZmVyIHRvIHRoZSBkZWx0YSBiZXR3ZWVuIHRoZSBwZXJmZWN0IHNpemUgYW5kIHdoYXQncyBsZWZ0IG1lYW5zIHdlIHdvbid0IGV2ZXIgZ2V0IHRvbyBtdWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkYXRhIGJhY2suXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWFkQnVmZiA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJTaXplIC0gdG90YWxCeXRlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwdWxsZWRCeXRlcyA9IHRoaXMucHJpdkNhbGxiYWNrLnJlYWQocmVhZEJ1ZmYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gcmV0dXJuIGJ1ZmZlciB5ZXQgZGVmaW5lZCwgc2V0IHRoZSByZXR1cm4gYnVmZmVyIHRvIHRoZSB0aGF0IHdhcyBqdXN0IHBvcHVsYXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgd2FzLCBpZiB3ZSBoYXZlIGVub3VnaCBkYXRhIHRoZXJlJ3Mgbm8gY29weSBwZW5hbHR5LCBidXQgaWYgd2UgZG9uJ3Qgd2UgaGF2ZSBhIGJ1ZmZlciB0aGF0J3MgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVmZXJyZWQgc2l6ZSBhbGxvY2F0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5kZWZpbmVkID09PSB0cmFuc21pdEJ1ZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc21pdEJ1ZmYgPSByZWFkQnVmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCB0aGUgZmlyc3QgYml0ZSBhdCB0aGUgYXBwbGUsIHNvIGZpbGwgdGhlIHJldHVybiBidWZmZXIgd2l0aCB0aGUgZGF0YSB3ZSBnb3QgYmFjay5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRWaWV3ID0gbmV3IEludDhBcnJheSh0cmFuc21pdEJ1ZmYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludFZpZXcuc2V0KG5ldyBJbnQ4QXJyYXkocmVhZEJ1ZmYpLCB0b3RhbEJ5dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBieXRlcyB0byByZWFkLCBqdXN0IGJyZWFrIG91dCBhbmQgYmUgZG9uZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBwdWxsZWRCeXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxCeXRlcyArPSBwdWxsZWRCeXRlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogdHJhbnNtaXRCdWZmLnNsaWNlKDAsIHRvdGFsQnl0ZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNFbmQ6IHRoaXMucHJpdklzQ2xvc2VkIHx8IHRvdGFsQnl0ZXMgPT09IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lUmVjZWl2ZWQ6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGV0YWNoKGF1ZGlvTm9kZUlkKSB7XG4gICAgICAgIHRoaXMub25FdmVudChuZXcgQXVkaW9TdHJlYW1Ob2RlRGV0YWNoZWRFdmVudCh0aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICB9XG4gICAgdHVybk9mZigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGdldCBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZFdmVudHM7XG4gICAgfVxuICAgIGdldCBkZXZpY2VJbmZvKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHtcbiAgICAgICAgICAgIGJpdHNwZXJzYW1wbGU6IHRoaXMucHJpdkZvcm1hdC5iaXRzUGVyU2FtcGxlLFxuICAgICAgICAgICAgY2hhbm5lbGNvdW50OiB0aGlzLnByaXZGb3JtYXQuY2hhbm5lbHMsXG4gICAgICAgICAgICBjb25uZWN0aXZpdHk6IGNvbm5lY3Rpdml0eS5Vbmtub3duLFxuICAgICAgICAgICAgbWFudWZhY3R1cmVyOiBcIlNwZWVjaCBTREtcIixcbiAgICAgICAgICAgIG1vZGVsOiBcIlB1bGxTdHJlYW1cIixcbiAgICAgICAgICAgIHNhbXBsZXJhdGU6IHRoaXMucHJpdkZvcm1hdC5zYW1wbGVzUGVyU2VjLFxuICAgICAgICAgICAgdHlwZTogdHlwZS5TdHJlYW0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXVkaW9JbnB1dFN0cmVhbS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlTm9EYXNoR3VpZCB9IGZyb20gXCIuLi8uLi8uLi9zcmMvY29tbW9uL0d1aWRcIjtcbmltcG9ydCB7IENodW5rZWRBcnJheUJ1ZmZlclN0cmVhbSwgUHJvbWlzZUhlbHBlciwgfSBmcm9tIFwiLi4vLi4vY29tbW9uL0V4cG9ydHNcIjtcbmltcG9ydCB7IEF1ZGlvU3RyZWFtRm9ybWF0SW1wbCB9IGZyb20gXCIuL0F1ZGlvU3RyZWFtRm9ybWF0XCI7XG5leHBvcnQgY29uc3QgYnVmZmVyU2l6ZSA9IDQwOTY7XG4vKipcbiAqIFJlcHJlc2VudHMgYXVkaW8gaW5wdXQgc3RyZWFtIHVzZWQgZm9yIGN1c3RvbSBhdWRpbyBpbnB1dCBjb25maWd1cmF0aW9ucy5cbiAqIEBjbGFzcyBBdWRpb0lucHV0U3RyZWFtXG4gKi9cbmV4cG9ydCBjbGFzcyBBdWRpb091dHB1dFN0cmVhbSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2UuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7IH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWVtb3J5IGJhY2tlZCBQdWxsQXVkaW9PdXRwdXRTdHJlYW0gd2l0aCB0aGUgc3BlY2lmaWVkIGF1ZGlvIGZvcm1hdC5cbiAgICAgKiBAbWVtYmVyIEF1ZGlvSW5wdXRTdHJlYW0uY3JlYXRlUHVsbFN0cmVhbVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0F1ZGlvU3RyZWFtRm9ybWF0fSBmb3JtYXQgLSBUaGUgYXVkaW8gZGF0YSBmb3JtYXQgaW4gd2hpY2ggYXVkaW8gd2lsbCBiZVxuICAgICAqICAgICAgICB3cml0dGVuIHRvIHRoZSBwdXNoIGF1ZGlvIHN0cmVhbSdzIHdyaXRlKCkgbWV0aG9kIChjdXJyZW50bHkgb25seSBzdXBwb3J0IDE2IGtIeiAxNmJpdCBtb25vIFBDTSkuXG4gICAgICogQHJldHVybnMge1B1bGxBdWRpb091dHB1dFN0cmVhbX0gVGhlIGF1ZGlvIGlucHV0IHN0cmVhbSBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVQdWxsU3RyZWFtKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gUHVsbEF1ZGlvT3V0cHV0U3RyZWFtLmNyZWF0ZShmb3JtYXQpO1xuICAgIH1cbn1cbi8qKlxuICogUmVwcmVzZW50cyBtZW1vcnkgYmFja2VkIHB1c2ggYXVkaW8gaW5wdXQgc3RyZWFtIHVzZWQgZm9yIGN1c3RvbSBhdWRpbyBpbnB1dCBjb25maWd1cmF0aW9ucy5cbiAqIEBjbGFzcyBQdWxsQXVkaW9PdXRwdXRTdHJlYW1cbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgUHVsbEF1ZGlvT3V0cHV0U3RyZWFtIGV4dGVuZHMgQXVkaW9PdXRwdXRTdHJlYW0ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtZW1vcnkgYmFja2VkIFB1bGxBdWRpb091dHB1dFN0cmVhbSB3aXRoIHRoZSBzcGVjaWZpZWQgYXVkaW8gZm9ybWF0LlxuICAgICAqIEBtZW1iZXIgUHVsbEF1ZGlvT3V0cHV0U3RyZWFtLmNyZWF0ZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0F1ZGlvU3RyZWFtRm9ybWF0fSBmb3JtYXQgLSBUaGUgYXVkaW8gZGF0YSBmb3JtYXQgaW4gd2hpY2ggYXVkaW8gd2lsbCBiZSB3cml0dGVuIHRvIHRoZVxuICAgICAqICAgICAgICBwdXNoIGF1ZGlvIHN0cmVhbSdzIHdyaXRlKCkgbWV0aG9kIChjdXJyZW50bHkgb25seSBzdXBwb3J0IDE2IGtIeiAxNmJpdCBtb25vIFBDTSkuXG4gICAgICogQHJldHVybnMge1B1bGxBdWRpb091dHB1dFN0cmVhbX0gVGhlIHB1c2ggYXVkaW8gaW5wdXQgc3RyZWFtIGJlaW5nIGNyZWF0ZWQuXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQdWxsQXVkaW9PdXRwdXRTdHJlYW1JbXBsKGJ1ZmZlclNpemUsIGZvcm1hdCk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIG1lbW9yeSBiYWNrZWQgcHVzaCBhdWRpbyBpbnB1dCBzdHJlYW0gdXNlZCBmb3IgY3VzdG9tIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb25zLlxuICogQHByaXZhdGVcbiAqIEBjbGFzcyBQdWxsQXVkaW9PdXRwdXRTdHJlYW1JbXBsXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIFB1bGxBdWRpb091dHB1dFN0cmVhbUltcGwgZXh0ZW5kcyBQdWxsQXVkaW9PdXRwdXRTdHJlYW0ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRhbGl6ZXMgYW4gaW5zdGFuY2Ugd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXVkaW9TdHJlYW1Gb3JtYXR9IGZvcm1hdCAtIFRoZSBhdWRpbyBzdHJlYW0gZm9ybWF0LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNodW5rU2l6ZSwgZm9ybWF0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5wcml2Rm9ybWF0ID0gQXVkaW9TdHJlYW1Gb3JtYXRJbXBsLmdldERlZmF1bHRJbnB1dEZvcm1hdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcml2Rm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdklkID0gY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgICAgICB0aGlzLnByaXZTdHJlYW0gPSBuZXcgQ2h1bmtlZEFycmF5QnVmZmVyU3RyZWFtKGNodW5rU2l6ZSk7XG4gICAgICAgIHRoaXMuc3RyZWFtUmVhZGVyID0gdGhpcy5wcml2U3RyZWFtLmdldFJlYWRlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3JtYXQgaW5mb3JtYXRpb24gZm9yIHRoZSBhdWRpb1xuICAgICAqL1xuICAgIGdldCBmb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZGb3JtYXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgc3RyZWFtIGlzIGNsb3NlZFxuICAgICAqIEBtZW1iZXIgUHVsbEF1ZGlvT3V0cHV0U3RyZWFtSW1wbC5wcm90b3R5cGUuaXNDbG9zZWRcbiAgICAgKiBAcHJvcGVydHlcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0IGlzQ2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U3RyZWFtLmlzQ2xvc2VkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpZCBvZiB0aGUgc3RyZWFtXG4gICAgICogQG1lbWJlciBQdWxsQXVkaW9PdXRwdXRTdHJlYW1JbXBsLnByb3RvdHlwZS5pZFxuICAgICAqIEBwcm9wZXJ0eVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZJZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZHMgZGF0YSBmcm9tIHRoZSBidWZmZXJcbiAgICAgKiBAbWVtYmVyIFB1bGxBdWRpb091dHB1dFN0cmVhbUltcGwucHJvdG90eXBlLnJlYWRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gZGF0YUJ1ZmZlciAtIFRoZSBhdWRpbyBidWZmZXIgb2Ygd2hpY2ggdGhpcyBmdW5jdGlvbiB3aWxsIG1ha2UgYSBjb3B5LlxuICAgICAqL1xuICAgIHJlYWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmVhbVJlYWRlci5yZWFkKClcbiAgICAgICAgICAgIC5vblN1Y2Nlc3NDb250aW51ZVdpdGhQcm9taXNlKChjaHVuaykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdChjaHVuay5idWZmZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIHRoZSBhdWRpbyBkYXRhIHNwZWNpZmllZCBieSBtYWtpbmcgYW4gaW50ZXJuYWwgY29weSBvZiB0aGUgZGF0YS5cbiAgICAgKiBAbWVtYmVyIFB1bGxBdWRpb091dHB1dFN0cmVhbUltcGwucHJvdG90eXBlLndyaXRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGFCdWZmZXIgLSBUaGUgYXVkaW8gYnVmZmVyIG9mIHdoaWNoIHRoaXMgZnVuY3Rpb24gd2lsbCBtYWtlIGEgY29weS5cbiAgICAgKi9cbiAgICB3cml0ZShkYXRhQnVmZmVyKSB7XG4gICAgICAgIHRoaXMucHJpdlN0cmVhbS53cml0ZVN0cmVhbUNodW5rKHtcbiAgICAgICAgICAgIGJ1ZmZlcjogZGF0YUJ1ZmZlcixcbiAgICAgICAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVSZWNlaXZlZDogRGF0ZS5ub3coKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBzdHJlYW0uXG4gICAgICogQG1lbWJlciBQdWxsQXVkaW9PdXRwdXRTdHJlYW1JbXBsLnByb3RvdHlwZS5jbG9zZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5wcml2U3RyZWFtLmNsb3NlKCk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdWRpb091dHB1dFN0cmVhbS5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBSZXByZXNlbnRzIGF1ZGlvIHN0cmVhbSBmb3JtYXQgdXNlZCBmb3IgY3VzdG9tIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb25zLlxuICogQGNsYXNzIEF1ZGlvU3RyZWFtRm9ybWF0XG4gKi9cbmV4cG9ydCBjbGFzcyBBdWRpb1N0cmVhbUZvcm1hdCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhdWRpbyBzdHJlYW0gZm9ybWF0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGRlZmF1bHQgYXVkaW8gc3RyZWFtXG4gICAgICogZm9ybWF0ICgxNktIeiAxNmJpdCBtb25vIFBDTSkuXG4gICAgICogQG1lbWJlciBBdWRpb1N0cmVhbUZvcm1hdC5nZXREZWZhdWx0SW5wdXRGb3JtYXRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge0F1ZGlvU3RyZWFtRm9ybWF0fSBUaGUgYXVkaW8gc3RyZWFtIGZvcm1hdCBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXREZWZhdWx0SW5wdXRGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiBBdWRpb1N0cmVhbUZvcm1hdEltcGwuZ2V0RGVmYXVsdElucHV0Rm9ybWF0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXVkaW8gc3RyZWFtIGZvcm1hdCBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIHBjbSB3YXZlZm9ybWF0IGNoYXJhY3RlcmlzdGljcy5cbiAgICAgKiBAbWVtYmVyIEF1ZGlvU3RyZWFtRm9ybWF0LmdldFdhdmVGb3JtYXRQQ01cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNhbXBsZXNQZXJTZWNvbmQgLSBTYW1wbGUgcmF0ZSwgaW4gc2FtcGxlcyBwZXIgc2Vjb25kIChIZXJ0eikuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdHNQZXJTYW1wbGUgLSBCaXRzIHBlciBzYW1wbGUsIHR5cGljYWxseSAxNi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2hhbm5lbHMgLSBOdW1iZXIgb2YgY2hhbm5lbHMgaW4gdGhlIHdhdmVmb3JtLWF1ZGlvIGRhdGEuIE1vbmF1cmFsIGRhdGFcbiAgICAgKiAgICAgICAgdXNlcyBvbmUgY2hhbm5lbCBhbmQgc3RlcmVvIGRhdGEgdXNlcyB0d28gY2hhbm5lbHMuXG4gICAgICogQHJldHVybnMge0F1ZGlvU3RyZWFtRm9ybWF0fSBUaGUgYXVkaW8gc3RyZWFtIGZvcm1hdCBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRXYXZlRm9ybWF0UENNKHNhbXBsZXNQZXJTZWNvbmQsIGJpdHNQZXJTYW1wbGUsIGNoYW5uZWxzKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXVkaW9TdHJlYW1Gb3JtYXRJbXBsKHNhbXBsZXNQZXJTZWNvbmQsIGJpdHNQZXJTYW1wbGUsIGNoYW5uZWxzKTtcbiAgICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKiBAY2xhc3MgQXVkaW9TdHJlYW1Gb3JtYXRJbXBsXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIEF1ZGlvU3RyZWFtRm9ybWF0SW1wbCBleHRlbmRzIEF1ZGlvU3RyZWFtRm9ybWF0IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIHdpdGggdGhlIGdpdmVuIHZhbHVlcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2FtcGxlc1BlclNlYyAtIFNhbXBsZXMgcGVyIHNlY29uZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0c1BlclNhbXBsZSAtIEJpdHMgcGVyIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2hhbm5lbHMgLSBOdW1iZXIgb2YgY2hhbm5lbHMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2FtcGxlc1BlclNlYyA9IDE2MDAwLCBiaXRzUGVyU2FtcGxlID0gMTYsIGNoYW5uZWxzID0gMSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZvcm1hdFRhZyA9IDE7XG4gICAgICAgIHRoaXMuYml0c1BlclNhbXBsZSA9IGJpdHNQZXJTYW1wbGU7XG4gICAgICAgIHRoaXMuc2FtcGxlc1BlclNlYyA9IHNhbXBsZXNQZXJTZWM7XG4gICAgICAgIHRoaXMuY2hhbm5lbHMgPSBjaGFubmVscztcbiAgICAgICAgdGhpcy5hdmdCeXRlc1BlclNlYyA9IHRoaXMuc2FtcGxlc1BlclNlYyAqIHRoaXMuY2hhbm5lbHMgKiAodGhpcy5iaXRzUGVyU2FtcGxlIC8gOCk7XG4gICAgICAgIHRoaXMuYmxvY2tBbGlnbiA9IHRoaXMuY2hhbm5lbHMgKiBNYXRoLm1heCh0aGlzLmJpdHNQZXJTYW1wbGUsIDgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGRlZmF1bHQgaW5wdXQgZm9ybWF0LlxuICAgICAqIEBtZW1iZXIgQXVkaW9TdHJlYW1Gb3JtYXRJbXBsLmdldERlZmF1bHRJbnB1dEZvcm1hdFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7QXVkaW9TdHJlYW1Gb3JtYXRJbXBsfSBUaGUgZGVmYXVsdCBpbnB1dCBmb3JtYXQuXG4gICAgICovXG4gICAgc3RhdGljIGdldERlZmF1bHRJbnB1dEZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBdWRpb1N0cmVhbUZvcm1hdEltcGwoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdC5cbiAgICAgKiBAbWVtYmVyIEF1ZGlvU3RyZWFtRm9ybWF0SW1wbC5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7IHJldHVybjsgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdWRpb1N0cmVhbUZvcm1hdC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgSW52YWxpZE9wZXJhdGlvbkVycm9yIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9FcnJvclwiO1xuLyoqXG4gKiBCYXNlIGF1ZGlvIHBsYXllciBjbGFzc1xuICogVE9ETzogUGxheXMgb25seSBQQ00gZm9yIG5vdy5cbiAqIEBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgQmFzZUF1ZGlvUGxheWVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGF1ZGlvRm9ybWF0KSB7XG4gICAgICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5nYWluTm9kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYXV0b1VwZGF0ZUJ1ZmZlclRpbWVyID0gMDtcbiAgICAgICAgdGhpcy5pbml0KGF1ZGlvRm9ybWF0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogcGxheSBBdWRpbyBzYW1wbGVcbiAgICAgKiBAcGFyYW0gbmV3QXVkaW9EYXRhIGF1ZGlvIGRhdGEgdG8gYmUgcGxheWVkLlxuICAgICAqL1xuICAgIHBsYXlBdWRpb1NhbXBsZShuZXdBdWRpb0RhdGEpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVJbml0aWFsaXplZENvbnRleHQoKTtcbiAgICAgICAgY29uc3QgYXVkaW9EYXRhID0gdGhpcy5mb3JtYXRBdWRpb0RhdGEobmV3QXVkaW9EYXRhKTtcbiAgICAgICAgY29uc3QgbmV3U2FtcGxlc0RhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuc2FtcGxlcy5sZW5ndGggKyBhdWRpb0RhdGEubGVuZ3RoKTtcbiAgICAgICAgbmV3U2FtcGxlc0RhdGEuc2V0KHRoaXMuc2FtcGxlcywgMCk7XG4gICAgICAgIG5ld1NhbXBsZXNEYXRhLnNldChhdWRpb0RhdGEsIHRoaXMuc2FtcGxlcy5sZW5ndGgpO1xuICAgICAgICB0aGlzLnNhbXBsZXMgPSBuZXdTYW1wbGVzRGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogc3RvcHMgYXVkaW8gYW5kIGNsZWFycyB0aGUgYnVmZmVyc1xuICAgICAqL1xuICAgIHN0b3BBdWRpbygpIHtcbiAgICAgICAgaWYgKHRoaXMuYXVkaW9Db250ZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNhbXBsZXMgPSBuZXcgRmxvYXQzMkFycmF5KCk7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuYXV0b1VwZGF0ZUJ1ZmZlclRpbWVyKTtcbiAgICAgICAgICAgIHRoaXMuYXVkaW9Db250ZXh0LmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLmF1ZGlvQ29udGV4dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdChhdWRpb0Zvcm1hdCkge1xuICAgICAgICB0aGlzLmF1ZGlvRm9ybWF0ID0gYXVkaW9Gb3JtYXQ7XG4gICAgICAgIHRoaXMuc2FtcGxlcyA9IG5ldyBGbG9hdDMyQXJyYXkoKTtcbiAgICB9XG4gICAgZW5zdXJlSW5pdGlhbGl6ZWRDb250ZXh0KCkge1xuICAgICAgICBpZiAodGhpcy5hdWRpb0NvbnRleHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQXVkaW9Db250ZXh0KCk7XG4gICAgICAgICAgICBjb25zdCB0aW1lclBlcmlvZCA9IDIwMDtcbiAgICAgICAgICAgIHRoaXMuYXV0b1VwZGF0ZUJ1ZmZlclRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQXVkaW9CdWZmZXIoKTtcbiAgICAgICAgICAgIH0sIHRpbWVyUGVyaW9kKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVBdWRpb0NvbnRleHQoKSB7XG4gICAgICAgIC8vIG5ldyAoKHdpbmRvdyBhcyBhbnkpLkF1ZGlvQ29udGV4dCB8fCAod2luZG93IGFzIGFueSkud2Via2l0QXVkaW9Db250ZXh0KSgpO1xuICAgICAgICB0aGlzLmF1ZGlvQ29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcbiAgICAgICAgLy8gVE9ETzogVmFyaW91cyBleGFtcGxlcyBzaG93cyB0aGlzIGdhaW4gbm9kZSwgaXQgZG9lcyBub3Qgc2VlbSB0byBiZSBuZWVkZWQgdW5sZXNzIHdlIHBsYW5cbiAgICAgICAgLy8gdG8gY29udHJvbCB0aGUgdm9sdW1lLCBub3QgbGlrZWx5XG4gICAgICAgIHRoaXMuZ2Fpbk5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgICAgIHRoaXMuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IDE7XG4gICAgICAgIHRoaXMuZ2Fpbk5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdGhpcy5hdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG4gICAgfVxuICAgIGZvcm1hdEF1ZGlvRGF0YShhdWRpb0RhdGEpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmF1ZGlvRm9ybWF0LmJpdHNQZXJTYW1wbGUpIHtcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRBcnJheUJ1ZmZlcihuZXcgSW50OEFycmF5KGF1ZGlvRGF0YSksIDEyOCk7XG4gICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdEFycmF5QnVmZmVyKG5ldyBJbnQxNkFycmF5KGF1ZGlvRGF0YSksIDMyNzY4KTtcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0QXJyYXlCdWZmZXIobmV3IEludDMyQXJyYXkoYXVkaW9EYXRhKSwgMjE0NzQ4MzY0OCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJPbmx5IFdBVkVfRk9STUFUX1BDTSAoOC8xNi8zMiBicHMpIGZvcm1hdCBzdXBwb3J0ZWQgYXQgdGhpcyB0aW1lXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcm1hdEFycmF5QnVmZmVyKGF1ZGlvRGF0YSwgbWF4VmFsdWUpIHtcbiAgICAgICAgY29uc3QgZmxvYXQzMkRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KGF1ZGlvRGF0YS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF1ZGlvRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZmxvYXQzMkRhdGFbaV0gPSBhdWRpb0RhdGFbaV0gLyBtYXhWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmxvYXQzMkRhdGE7XG4gICAgfVxuICAgIHVwZGF0ZUF1ZGlvQnVmZmVyKCkge1xuICAgICAgICBpZiAodGhpcy5zYW1wbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYW5uZWxDb3VudCA9IHRoaXMuYXVkaW9Gb3JtYXQuY2hhbm5lbHM7XG4gICAgICAgIGNvbnN0IGJ1ZmZlclNvdXJjZSA9IHRoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgICBjb25zdCBmcmFtZUNvdW50ID0gdGhpcy5zYW1wbGVzLmxlbmd0aCAvIGNoYW5uZWxDb3VudDtcbiAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXIoY2hhbm5lbENvdW50LCBmcmFtZUNvdW50LCB0aGlzLmF1ZGlvRm9ybWF0LnNhbXBsZXNQZXJTZWMpO1xuICAgICAgICAvLyBUT0RPOiBTaG91bGQgd2UgZG8gdGhlIGNvbnZlcnNpb24gaW4gdGhlIHB1c2hBdWRpb1NhbXBsZSBpbnN0ZWFkP1xuICAgICAgICBmb3IgKGxldCBjaGFubmVsID0gMDsgY2hhbm5lbCA8IGNoYW5uZWxDb3VudDsgY2hhbm5lbCsrKSB7XG4gICAgICAgICAgICAvLyBGaWxsIGluIGluZGl2aWR1YWwgY2hhbm5lbCBkYXRhXG4gICAgICAgICAgICBsZXQgY2hhbm5lbE9mZnNldCA9IGNoYW5uZWw7XG4gICAgICAgICAgICBjb25zdCBhdWRpb0RhdGEgPSBhdWRpb0J1ZmZlci5nZXRDaGFubmVsRGF0YShjaGFubmVsKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zYW1wbGVzLmxlbmd0aDsgaSsrLCBjaGFubmVsT2Zmc2V0ICs9IGNoYW5uZWxDb3VudCkge1xuICAgICAgICAgICAgICAgIGF1ZGlvRGF0YVtpXSA9IHRoaXMuc2FtcGxlc1tjaGFubmVsT2Zmc2V0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGFydFRpbWUgPCB0aGlzLmF1ZGlvQ29udGV4dC5jdXJyZW50VGltZSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jdXJyZW50VGltZTtcbiAgICAgICAgfVxuICAgICAgICBidWZmZXJTb3VyY2UuYnVmZmVyID0gYXVkaW9CdWZmZXI7XG4gICAgICAgIGJ1ZmZlclNvdXJjZS5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xuICAgICAgICBidWZmZXJTb3VyY2Uuc3RhcnQodGhpcy5zdGFydFRpbWUpO1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgcGxheSB0aGUgbmV4dCBzYW1wbGUgYWZ0ZXIgdGhlIGN1cnJlbnQgb25lLlxuICAgICAgICB0aGlzLnN0YXJ0VGltZSArPSBhdWRpb0J1ZmZlci5kdXJhdGlvbjtcbiAgICAgICAgLy8gQ2xlYXIgdGhlIHNhbXBsZXMgZm9yIHRoZSBuZXh0IHB1c2hlZCBkYXRhLlxuICAgICAgICB0aGlzLnNhbXBsZXMgPSBuZXcgRmxvYXQzMkFycmF5KCk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlQXVkaW9QbGF5ZXIuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogQW4gYWJzdHJhY3QgYmFzZSBjbGFzcyB0aGF0IGRlZmluZXMgY2FsbGJhY2sgbWV0aG9kcyAocmVhZCgpIGFuZCBjbG9zZSgpKSBmb3JcbiAqIGN1c3RvbSBhdWRpbyBpbnB1dCBzdHJlYW1zKS5cbiAqIEBjbGFzcyBQdWxsQXVkaW9JbnB1dFN0cmVhbUNhbGxiYWNrXG4gKi9cbmV4cG9ydCBjbGFzcyBQdWxsQXVkaW9JbnB1dFN0cmVhbUNhbGxiYWNrIHtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFjay5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQ29udHJhY3RzIH0gZnJvbSBcIi4vQ29udHJhY3RzXCI7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlQ29uZmlnSW1wbCB9IGZyb20gXCIuL0RpYWxvZ1NlcnZpY2VDb25maWdcIjtcbmltcG9ydCB7IFByb3BlcnR5SWQgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vKipcbiAqIENsYXNzIHRoYXQgZGVmaW5lcyBjb25maWd1cmF0aW9ucyBmb3IgdGhlIGRpYWxvZyBzZXJ2aWNlIGNvbm5lY3RvciBvYmplY3QgZm9yIHVzaW5nIGEgQm90IEZyYW1ld29yayBiYWNrZW5kLlxuICogQGNsYXNzIEJvdEZyYW1ld29ya0NvbmZpZ1xuICovXG5leHBvcnQgY2xhc3MgQm90RnJhbWV3b3JrQ29uZmlnIGV4dGVuZHMgRGlhbG9nU2VydmljZUNvbmZpZ0ltcGwge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQm90RnJhbWV3b3JrQ29uZmlnLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBib3QgZnJhbWV3b3JrIGNvbmZpZyB3aXRoIHRoZSBzcGVjaWZpZWQgc3Vic2NyaXB0aW9uIGFuZCByZWdpb24uXG4gICAgICogQG1lbWJlciBCb3RGcmFtZXdvcmtDb25maWcuZnJvbVN1YnNjcmlwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uIFN1YnNjcmlwdGlvbiBrZXkgYXNzb2NpYXRlZCB3aXRoIHRoZSBib3RcbiAgICAgKiBAcGFyYW0gcmVnaW9uIFRoZSByZWdpb24gbmFtZSAoc2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9ha2EubXMvY3NzcGVlY2gvcmVnaW9uXCI+cmVnaW9uIHBhZ2U8L2E+KS5cbiAgICAgKiBAcmV0dXJucyB7Qm90RnJhbWV3b3JrQ29uZmlnfSBBIG5ldyBib3QgZnJhbWV3b3JrIGNvbmZpZy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24sIHJlZ2lvbikge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2Uoc3Vic2NyaXB0aW9uLCBcInN1YnNjcmlwdGlvblwiKTtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHJlZ2lvbiwgXCJyZWdpb25cIik7XG4gICAgICAgIGNvbnN0IGJvdEZyYW1ld29ya0NvbmZpZyA9IG5ldyBEaWFsb2dTZXJ2aWNlQ29uZmlnSW1wbCgpO1xuICAgICAgICBib3RGcmFtZXdvcmtDb25maWcuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5Db252ZXJzYXRpb25fRGlhbG9nVHlwZSwgXCJib3RfZnJhbWV3b3JrXCIpO1xuICAgICAgICBib3RGcmFtZXdvcmtDb25maWcuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXksIHN1YnNjcmlwdGlvbik7XG4gICAgICAgIGJvdEZyYW1ld29ya0NvbmZpZy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgcmV0dXJuIGJvdEZyYW1ld29ya0NvbmZpZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgYm90IGZyYW1ld29yayBjb25maWcgd2l0aCB0aGUgc3BlY2lmaWVkIGF1dGhvcml6YXRpb24gdG9rZW4gYW5kIHJlZ2lvbi5cbiAgICAgKiBOb3RlOiBUaGUgY2FsbGVyIG5lZWRzIHRvIGVuc3VyZSB0aGF0IHRoZSBhdXRob3JpemF0aW9uIHRva2VuIGlzIHZhbGlkLiBCZWZvcmUgdGhlIGF1dGhvcml6YXRpb24gdG9rZW5cbiAgICAgKiBleHBpcmVzLCB0aGUgY2FsbGVyIG5lZWRzIHRvIHJlZnJlc2ggaXQgYnkgY2FsbGluZyB0aGlzIHNldHRlciB3aXRoIGEgbmV3IHZhbGlkIHRva2VuLlxuICAgICAqIEFzIGNvbmZpZ3VyYXRpb24gdmFsdWVzIGFyZSBjb3BpZWQgd2hlbiBjcmVhdGluZyBhIG5ldyByZWNvZ25pemVyLCB0aGUgbmV3IHRva2VuIHZhbHVlIHdpbGwgbm90IGFwcGx5IHRvIHJlY29nbml6ZXJzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gY3JlYXRlZC5cbiAgICAgKiBGb3IgcmVjb2duaXplcnMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZCBiZWZvcmUsIHlvdSBuZWVkIHRvIHNldCBhdXRob3JpemF0aW9uIHRva2VuIG9mIHRoZSBjb3JyZXNwb25kaW5nIHJlY29nbml6ZXJcbiAgICAgKiB0byByZWZyZXNoIHRoZSB0b2tlbi4gT3RoZXJ3aXNlLCB0aGUgcmVjb2duaXplcnMgd2lsbCBlbmNvdW50ZXIgZXJyb3JzIGR1cmluZyByZWNvZ25pdGlvbi5cbiAgICAgKiBAbWVtYmVyIEJvdEZyYW1ld29ya0NvbmZpZy5mcm9tQXV0aG9yaXphdGlvblRva2VuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBhdXRob3JpemF0aW9uVG9rZW4gVGhlIGF1dGhvcml6YXRpb24gdG9rZW4gYXNzb2NpYXRlZCB3aXRoIHRoZSBib3RcbiAgICAgKiBAcGFyYW0gcmVnaW9uIFRoZSByZWdpb24gbmFtZSAoc2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9ha2EubXMvY3NzcGVlY2gvcmVnaW9uXCI+cmVnaW9uIHBhZ2U8L2E+KS5cbiAgICAgKiBAcmV0dXJucyB7Qm90RnJhbWV3b3JrQ29uZmlnfSBBIG5ldyBib3QgZnJhbWV3b3JrIGNvbmZpZy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUF1dGhvcml6YXRpb25Ub2tlbihhdXRob3JpemF0aW9uVG9rZW4sIHJlZ2lvbikge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UoYXV0aG9yaXphdGlvblRva2VuLCBcImF1dGhvcml6YXRpb25Ub2tlblwiKTtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHJlZ2lvbiwgXCJyZWdpb25cIik7XG4gICAgICAgIGNvbnN0IGJvdEZyYW1ld29ya0NvbmZpZyA9IG5ldyBEaWFsb2dTZXJ2aWNlQ29uZmlnSW1wbCgpO1xuICAgICAgICBib3RGcmFtZXdvcmtDb25maWcuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5Db252ZXJzYXRpb25fRGlhbG9nVHlwZSwgXCJib3RfZnJhbWV3b3JrXCIpO1xuICAgICAgICBib3RGcmFtZXdvcmtDb25maWcuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlbiwgYXV0aG9yaXphdGlvblRva2VuKTtcbiAgICAgICAgYm90RnJhbWV3b3JrQ29uZmlnLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVnaW9uLCByZWdpb24pO1xuICAgICAgICByZXR1cm4gYm90RnJhbWV3b3JrQ29uZmlnO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Qm90RnJhbWV3b3JrQ29uZmlnLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBDYW5jZWxsYXRpb25FcnJvckNvZGVQcm9wZXJ0eU5hbWUsIEVudW1UcmFuc2xhdGlvbiwgU2ltcGxlU3BlZWNoUGhyYXNlIH0gZnJvbSBcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiO1xuaW1wb3J0IHsgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlLCBDYW5jZWxsYXRpb25SZWFzb24gfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vKipcbiAqIENvbnRhaW5zIGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IHdoeSBhIHJlc3VsdCB3YXMgY2FuY2VsZWQuXG4gKiBAY2xhc3MgQ2FuY2VsbGF0aW9uRGV0YWlsc1xuICovXG5leHBvcnQgY2xhc3MgQ2FuY2VsbGF0aW9uRGV0YWlscyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0NhbmNlbGxhdGlvblJlYXNvbn0gcmVhc29uIC0gVGhlIGNhbmNlbGxhdGlvbiByZWFzb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yRGV0YWlscyAtIFRoZSBlcnJvciBkZXRhaWxzLCBpZiBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZWFzb24sIGVycm9yRGV0YWlscywgZXJyb3JDb2RlKSB7XG4gICAgICAgIHRoaXMucHJpdlJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgdGhpcy5wcml2RXJyb3JEZXRhaWxzID0gZXJyb3JEZXRhaWxzO1xuICAgICAgICB0aGlzLnByaXZFcnJvckNvZGUgPSBlcnJvckNvZGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ2FuY2VsbGF0aW9uRGV0YWlscyBvYmplY3QgZm9yIHRoZSBjYW5jZWxlZCBSZWNvZ25pdGlvblJlc3VsdC5cbiAgICAgKiBAbWVtYmVyIENhbmNlbGxhdGlvbkRldGFpbHMuZnJvbVJlc3VsdFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge1JlY29nbml0aW9uUmVzdWx0fSByZXN1bHQgLSBUaGUgcmVzdWx0IHRoYXQgd2FzIGNhbmNlbGVkLlxuICAgICAqIEByZXR1cm5zIHtDYW5jZWxsYXRpb25EZXRhaWxzfSBUaGUgY2FuY2VsbGF0aW9uIGRldGFpbHMgb2JqZWN0IGJlaW5nIGNyZWF0ZWQuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21SZXN1bHQocmVzdWx0KSB7XG4gICAgICAgIGxldCByZWFzb24gPSBDYW5jZWxsYXRpb25SZWFzb24uRXJyb3I7XG4gICAgICAgIGxldCBlcnJvckNvZGUgPSBDYW5jZWxsYXRpb25FcnJvckNvZGUuTm9FcnJvcjtcbiAgICAgICAgaWYgKCEhcmVzdWx0Lmpzb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHNpbXBsZVNwZWVjaCA9IFNpbXBsZVNwZWVjaFBocmFzZS5mcm9tSlNPTihyZXN1bHQuanNvbik7XG4gICAgICAgICAgICByZWFzb24gPSBFbnVtVHJhbnNsYXRpb24uaW1wbFRyYW5zbGF0ZUNhbmNlbFJlc3VsdChzaW1wbGVTcGVlY2guUmVjb2duaXRpb25TdGF0dXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghIXJlc3VsdC5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBlcnJvckNvZGUgPSBDYW5jZWxsYXRpb25FcnJvckNvZGVbcmVzdWx0LnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoQ2FuY2VsbGF0aW9uRXJyb3JDb2RlUHJvcGVydHlOYW1lLCBDYW5jZWxsYXRpb25FcnJvckNvZGVbQ2FuY2VsbGF0aW9uRXJyb3JDb2RlLk5vRXJyb3JdKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDYW5jZWxsYXRpb25EZXRhaWxzKHJlYXNvbiwgcmVzdWx0LmVycm9yRGV0YWlscywgZXJyb3JDb2RlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHJlYXNvbiB0aGUgcmVjb2duaXRpb24gd2FzIGNhbmNlbGVkLlxuICAgICAqIEBtZW1iZXIgQ2FuY2VsbGF0aW9uRGV0YWlscy5wcm90b3R5cGUucmVhc29uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtDYW5jZWxsYXRpb25SZWFzb259IFNwZWNpZmllcyB0aGUgcmVhc29uIGNhbmNlbGVkLlxuICAgICAqL1xuICAgIGdldCByZWFzb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZWFzb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluIGNhc2Ugb2YgYW4gdW5zdWNjZXNzZnVsIHJlY29nbml0aW9uLCBwcm92aWRlcyBkZXRhaWxzIG9mIHRoZSBvY2N1cnJlZCBlcnJvci5cbiAgICAgKiBAbWVtYmVyIENhbmNlbGxhdGlvbkRldGFpbHMucHJvdG90eXBlLmVycm9yRGV0YWlsc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGVycm9yIGRldGFpbHMuXG4gICAgICovXG4gICAgZ2V0IGVycm9yRGV0YWlscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yRGV0YWlscztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGVycm9yIGNvZGUgaW4gY2FzZSBvZiBhbiB1bnN1Y2Nlc3NmdWwgcmVjb2duaXRpb24uXG4gICAgICogQWRkZWQgaW4gdmVyc2lvbiAxLjEuMC5cbiAgICAgKiBAcmV0dXJuIEFuIGVycm9yIGNvZGUgdGhhdCByZXByZXNlbnRzIHRoZSBlcnJvciByZWFzb24uXG4gICAgICovXG4gICAgZ2V0IEVycm9yQ29kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yQ29kZTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhbmNlbGxhdGlvbkRldGFpbHMuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogIERlZmluZXMgZXJyb3IgY29kZSBpbiBjYXNlIHRoYXQgQ2FuY2VsbGF0aW9uUmVhc29uIGlzIEVycm9yLlxuICogIEFkZGVkIGluIHZlcnNpb24gMS4xLjAuXG4gKi9cbmV4cG9ydCB2YXIgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlO1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25FcnJvckNvZGUpIHtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCBubyBlcnJvciBvY2N1cnJlZCBkdXJpbmcgc3BlZWNoIHJlY29nbml0aW9uLlxuICAgICAqL1xuICAgIENhbmNlbGxhdGlvbkVycm9yQ29kZVtDYW5jZWxsYXRpb25FcnJvckNvZGVbXCJOb0Vycm9yXCJdID0gMF0gPSBcIk5vRXJyb3JcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgYW4gYXV0aGVudGljYXRpb24gZXJyb3IuXG4gICAgICovXG4gICAgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW0NhbmNlbGxhdGlvbkVycm9yQ29kZVtcIkF1dGhlbnRpY2F0aW9uRmFpbHVyZVwiXSA9IDFdID0gXCJBdXRoZW50aWNhdGlvbkZhaWx1cmVcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCBvbmUgb3IgbW9yZSByZWNvZ25pdGlvbiBwYXJhbWV0ZXJzIGFyZSBpbnZhbGlkLlxuICAgICAqL1xuICAgIENhbmNlbGxhdGlvbkVycm9yQ29kZVtDYW5jZWxsYXRpb25FcnJvckNvZGVbXCJCYWRSZXF1ZXN0UGFyYW1ldGVyc1wiXSA9IDJdID0gXCJCYWRSZXF1ZXN0UGFyYW1ldGVyc1wiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IHRoZSBudW1iZXIgb2YgcGFyYWxsZWwgcmVxdWVzdHMgZXhjZWVkZWQgdGhlIG51bWJlciBvZiBhbGxvd2VkXG4gICAgICogY29uY3VycmVudCB0cmFuc2NyaXB0aW9ucyBmb3IgdGhlIHN1YnNjcmlwdGlvbi5cbiAgICAgKi9cbiAgICBDYW5jZWxsYXRpb25FcnJvckNvZGVbQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW1wiVG9vTWFueVJlcXVlc3RzXCJdID0gM10gPSBcIlRvb01hbnlSZXF1ZXN0c1wiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBhIGNvbm5lY3Rpb24gZXJyb3IuXG4gICAgICovXG4gICAgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW0NhbmNlbGxhdGlvbkVycm9yQ29kZVtcIkNvbm5lY3Rpb25GYWlsdXJlXCJdID0gNF0gPSBcIkNvbm5lY3Rpb25GYWlsdXJlXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGEgdGltZS1vdXQgZXJyb3Igd2hlbiB3YWl0aW5nIGZvciByZXNwb25zZSBmcm9tIHNlcnZpY2UuXG4gICAgICovXG4gICAgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW0NhbmNlbGxhdGlvbkVycm9yQ29kZVtcIlNlcnZpY2VUaW1lb3V0XCJdID0gNV0gPSBcIlNlcnZpY2VUaW1lb3V0XCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgYW4gZXJyb3IgaXMgcmV0dXJuZWQgYnkgdGhlIHNlcnZpY2UuXG4gICAgICovXG4gICAgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW0NhbmNlbGxhdGlvbkVycm9yQ29kZVtcIlNlcnZpY2VFcnJvclwiXSA9IDZdID0gXCJTZXJ2aWNlRXJyb3JcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgYW4gdW5leHBlY3RlZCBydW50aW1lIGVycm9yLlxuICAgICAqL1xuICAgIENhbmNlbGxhdGlvbkVycm9yQ29kZVtDYW5jZWxsYXRpb25FcnJvckNvZGVbXCJSdW50aW1lRXJyb3JcIl0gPSA3XSA9IFwiUnVudGltZUVycm9yXCI7XG59KShDYW5jZWxsYXRpb25FcnJvckNvZGUgfHwgKENhbmNlbGxhdGlvbkVycm9yQ29kZSA9IHt9KSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhbmNlbGxhdGlvbkVycm9yQ29kZXMuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogRGVmaW5lcyB0aGUgcG9zc2libGUgcmVhc29ucyBhIHJlY29nbml0aW9uIHJlc3VsdCBtaWdodCBiZSBjYW5jZWxlZC5cbiAqIEBjbGFzcyBDYW5jZWxsYXRpb25SZWFzb25cbiAqL1xuZXhwb3J0IHZhciBDYW5jZWxsYXRpb25SZWFzb247XG4oZnVuY3Rpb24gKENhbmNlbGxhdGlvblJlYXNvbikge1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyBzcGVlY2ggcmVjb2duaXRpb24uXG4gICAgICogQG1lbWJlciBDYW5jZWxsYXRpb25SZWFzb24uRXJyb3JcbiAgICAgKi9cbiAgICBDYW5jZWxsYXRpb25SZWFzb25bQ2FuY2VsbGF0aW9uUmVhc29uW1wiRXJyb3JcIl0gPSAwXSA9IFwiRXJyb3JcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgZW5kIG9mIHRoZSBhdWRpbyBzdHJlYW0gd2FzIHJlYWNoZWQuXG4gICAgICogQG1lbWJlciBDYW5jZWxsYXRpb25SZWFzb24uRW5kT2ZTdHJlYW1cbiAgICAgKi9cbiAgICBDYW5jZWxsYXRpb25SZWFzb25bQ2FuY2VsbGF0aW9uUmVhc29uW1wiRW5kT2ZTdHJlYW1cIl0gPSAxXSA9IFwiRW5kT2ZTdHJlYW1cIjtcbn0pKENhbmNlbGxhdGlvblJlYXNvbiB8fCAoQ2FuY2VsbGF0aW9uUmVhc29uID0ge30pKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FuY2VsbGF0aW9uUmVhc29uLmpzLm1hcFxuIiwiLy9cbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbi5cbi8vXG5pbXBvcnQgeyBDb25uZWN0aW9uRXZlbnRBcmdzLCB9IGZyb20gXCIuL0V4cG9ydHNcIjtcbi8qKlxuICogQ29ubmVjdGlvbiBpcyBhIHByb3h5IGNsYXNzIGZvciBtYW5hZ2luZyBjb25uZWN0aW9uIHRvIHRoZSBzcGVlY2ggc2VydmljZSBvZiB0aGUgc3BlY2lmaWVkIFJlY29nbml6ZXIuXG4gKiBCeSBkZWZhdWx0LCBhIFJlY29nbml6ZXIgYXV0b25vbW91c2x5IG1hbmFnZXMgY29ubmVjdGlvbiB0byBzZXJ2aWNlIHdoZW4gbmVlZGVkLlxuICogVGhlIENvbm5lY3Rpb24gY2xhc3MgcHJvdmlkZXMgYWRkaXRpb25hbCBtZXRob2RzIGZvciB1c2VycyB0byBleHBsaWNpdGx5IG9wZW4gb3IgY2xvc2UgYSBjb25uZWN0aW9uIGFuZFxuICogdG8gc3Vic2NyaWJlIHRvIGNvbm5lY3Rpb24gc3RhdHVzIGNoYW5nZXMuXG4gKiBUaGUgdXNlIG9mIENvbm5lY3Rpb24gaXMgb3B0aW9uYWwsIGFuZCBtYWlubHkgZm9yIHNjZW5hcmlvcyB3aGVyZSBmaW5lIHR1bmluZyBvZiBhcHBsaWNhdGlvblxuICogYmVoYXZpb3IgYmFzZWQgb24gY29ubmVjdGlvbiBzdGF0dXMgaXMgbmVlZGVkLiBVc2VycyBjYW4gb3B0aW9uYWxseSBjYWxsIE9wZW4oKSB0byBtYW51YWxseSBzZXQgdXAgYSBjb25uZWN0aW9uXG4gKiBpbiBhZHZhbmNlIGJlZm9yZSBzdGFydGluZyByZWNvZ25pdGlvbiBvbiB0aGUgUmVjb2duaXplciBhc3NvY2lhdGVkIHdpdGggdGhpcyBDb25uZWN0aW9uLlxuICogSWYgdGhlIFJlY29nbml6ZXIgbmVlZHMgdG8gY29ubmVjdCBvciBkaXNjb25uZWN0IHRvIHNlcnZpY2UsIGl0IHdpbGxcbiAqIHNldHVwIG9yIHNodXRkb3duIHRoZSBjb25uZWN0aW9uIGluZGVwZW5kZW50bHkuIEluIHRoaXMgY2FzZSB0aGUgQ29ubmVjdGlvbiB3aWxsIGJlIG5vdGlmaWVkIGJ5IGNoYW5nZSBvZiBjb25uZWN0aW9uXG4gKiBzdGF0dXMgdmlhIENvbm5lY3RlZC9EaXNjb25uZWN0ZWQgZXZlbnRzLlxuICogQWRkZWQgaW4gdmVyc2lvbiAxLjIuMC5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb24ge1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIENvbm5lY3Rpb24gaW5zdGFuY2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHJlY29nbml6ZXIgVGhlIHJlY29nbml6ZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb25uZWN0aW9uLlxuICAgICAqIEByZXR1cm4gVGhlIENvbm5lY3Rpb24gaW5zdGFuY2Ugb2YgdGhlIHJlY29nbml6ZXIuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21SZWNvZ25pemVyKHJlY29nbml6ZXIpIHtcbiAgICAgICAgY29uc3QgcmVjb0Jhc2UgPSByZWNvZ25pemVyLmludGVybmFsRGF0YTtcbiAgICAgICAgY29uc3QgcmV0ID0gbmV3IENvbm5lY3Rpb24oKTtcbiAgICAgICAgcmV0LnByaXZTZXJ2aWNlUmVjb2duaXplciA9IHJlY29CYXNlO1xuICAgICAgICByZXQucHJpdkV2ZW50TGlzdGVuZXIgPSByZXQucHJpdlNlcnZpY2VSZWNvZ25pemVyLmNvbm5lY3Rpb25FdmVudHMuYXR0YWNoKChjb25uZWN0aW9uRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uRXZlbnQubmFtZSA9PT0gXCJDb25uZWN0aW9uRXN0YWJsaXNoZWRFdmVudFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEhcmV0LmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXQuY29ubmVjdGVkKG5ldyBDb25uZWN0aW9uRXZlbnRBcmdzKGNvbm5lY3Rpb25FdmVudC5jb25uZWN0aW9uSWQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb25uZWN0aW9uRXZlbnQubmFtZSA9PT0gXCJDb25uZWN0aW9uQ2xvc2VkRXZlbnRcIikge1xuICAgICAgICAgICAgICAgIGlmICghIXJldC5kaXNjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0LmRpc2Nvbm5lY3RlZChuZXcgQ29ubmVjdGlvbkV2ZW50QXJncyhjb25uZWN0aW9uRXZlbnQuY29ubmVjdGlvbklkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRvIHNldCB1cCBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2aWNlLlxuICAgICAqIFVzZXJzIGNhbiBvcHRpb25hbGx5IGNhbGwgb3BlbkNvbm5lY3Rpb24oKSB0byBtYW51YWxseSBzZXQgdXAgYSBjb25uZWN0aW9uIGluIGFkdmFuY2UgYmVmb3JlIHN0YXJ0aW5nIHJlY29nbml0aW9uIG9uIHRoZVxuICAgICAqIFJlY29nbml6ZXIgYXNzb2NpYXRlZCB3aXRoIHRoaXMgQ29ubmVjdGlvbi4gQWZ0ZXIgc3RhcnRpbmcgcmVjb2duaXRpb24sIGNhbGxpbmcgT3BlbigpIHdpbGwgaGF2ZSBubyBlZmZlY3RcbiAgICAgKlxuICAgICAqIE5vdGU6IE9uIHJldHVybiwgdGhlIGNvbm5lY3Rpb24gbWlnaHQgbm90IGJlIHJlYWR5IHlldC4gUGxlYXNlIHN1YnNjcmliZSB0byB0aGUgQ29ubmVjdGVkIGV2ZW50IHRvXG4gICAgICogYmUgbm90ZmllZCB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkLlxuICAgICAqL1xuICAgIG9wZW5Db25uZWN0aW9uKCkge1xuICAgICAgICB0aGlzLnByaXZTZXJ2aWNlUmVjb2duaXplci5jb25uZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgY29ubmVjdGlvbiB0aGUgc2VydmljZS5cbiAgICAgKiBVc2VycyBjYW4gb3B0aW9uYWxseSBjYWxsIGNsb3NlQ29ubmVjdGlvbigpIHRvIG1hbnVhbGx5IHNodXRkb3duIHRoZSBjb25uZWN0aW9uIG9mIHRoZSBhc3NvY2lhdGVkIFJlY29nbml6ZXIuXG4gICAgICpcbiAgICAgKiBJZiBjbG9zZUNvbm5lY3Rpb24oKSBpcyBjYWxsZWQgZHVyaW5nIHJlY29nbml0aW9uLCByZWNvZ25pdGlvbiB3aWxsIGZhaWwgYW5kIGNhbmNlbCB3dGloIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGNsb3NlQ29ubmVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5wcml2U2VydmljZVJlY29nbml6ZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlIG9mIGFzc29jaWF0ZWQgcmVzb3VyY2VzLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29ubmVjdGlvbi5qcy5tYXBcbiIsIi8vXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4vL1xuaW1wb3J0IHsgU2Vzc2lvbkV2ZW50QXJncyB9IGZyb20gXCIuL0V4cG9ydHNcIjtcbi8qKlxuICogRGVmaW5lcyBwYXlsb2FkIGZvciBjb25uZWN0aW9uIGV2ZW50cyBsaWtlIENvbm5lY3RlZC9EaXNjb25uZWN0ZWQuXG4gKiBBZGRlZCBpbiB2ZXJzaW9uIDEuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uRXZlbnRBcmdzIGV4dGVuZHMgU2Vzc2lvbkV2ZW50QXJncyB7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbm5lY3Rpb25FdmVudEFyZ3MuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogQGNsYXNzIENvbnRyYWN0c1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRyYWN0cyB7XG4gICAgc3RhdGljIHRocm93SWZOdWxsT3JVbmRlZmluZWQocGFyYW0sIG5hbWUpIHtcbiAgICAgICAgaWYgKHBhcmFtID09PSB1bmRlZmluZWQgfHwgcGFyYW0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRocm93SWZOdWxsT3JVbmRlZmluZWQ6XCIgKyBuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgdGhyb3dJZk51bGwocGFyYW0sIG5hbWUpIHtcbiAgICAgICAgaWYgKHBhcmFtID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0aHJvd0lmTnVsbDpcIiArIG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyB0aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShwYXJhbSwgbmFtZSkge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPclVuZGVmaW5lZChwYXJhbSwgbmFtZSk7XG4gICAgICAgIGlmICgoXCJcIiArIHBhcmFtKS50cmltKCkubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidGhyb3dJZk51bGxPcldoaXRlc3BhY2U6XCIgKyBuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgdGhyb3dJZkRpc3Bvc2VkKGlzRGlzcG9zZWQpIHtcbiAgICAgICAgaWYgKGlzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRoZSBvYmplY3QgaXMgYWxyZWFkeSBkaXNwb3NlZFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgdGhyb3dJZkFycmF5RW1wdHlPcldoaXRlc3BhY2UoYXJyYXksIG5hbWUpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JVbmRlZmluZWQoYXJyYXksIG5hbWUpO1xuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0aHJvd0lmQXJyYXlFbXB0eU9yV2hpdGVzcGFjZTpcIiArIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnJheSkge1xuICAgICAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKGl0ZW0sIG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyB0aHJvd0lmRmlsZURvZXNOb3RFeGlzdChwYXJhbSwgbmFtZSkge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UocGFyYW0sIG5hbWUpO1xuICAgICAgICAvLyBUT0RPIGNoZWNrIGZvciBmaWxlIGV4aXN0ZW5jZS5cbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRyYWN0cy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQ29udHJhY3RzIH0gZnJvbSBcIi4vQ29udHJhY3RzXCI7XG5pbXBvcnQgeyBQcm9wZXJ0eUlkLCBTcGVlY2hDb25maWdJbXBsIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuLyoqXG4gKiBDbGFzcyB0aGF0IGRlZmluZXMgYmFzZSBjb25maWd1cmF0aW9ucyBmb3IgZGlhbG9nIHNlcnZpY2UgY29ubmVjdG9yXG4gKiBAY2xhc3MgRGlhbG9nU2VydmljZUNvbmZpZ1xuICovXG5leHBvcnQgY2xhc3MgRGlhbG9nU2VydmljZUNvbmZpZyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2dTZXJ2aWNlIGNvbmZpZy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxufVxuLyoqXG4gKiBEaWFsb2cgU2VydmljZSBjb25maWd1cmF0aW9uLlxuICogQGNsYXNzIERpYWxvZ1NlcnZpY2VDb25maWdJbXBsXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIERpYWxvZ1NlcnZpY2VDb25maWdJbXBsIGV4dGVuZHMgRGlhbG9nU2VydmljZUNvbmZpZyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBkaWFsb2dTZXJ2aWNlIGNvbmZpZy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoQ29uZmlnID0gbmV3IFNwZWVjaENvbmZpZ0ltcGwoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYWNjZXNzIHRvIGN1c3RvbSBwcm9wZXJ0aWVzLlxuICAgICAqIEBtZW1iZXIgRGlhbG9nU2VydmljZUNvbmZpZ0ltcGwucHJvdG90eXBlLnByb3BlcnRpZXNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge1Byb3BlcnR5Q29sbGVjdGlvbn0gVGhlIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hDb25maWcucHJvcGVydGllcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3BlZWNoIHJlY29nbml0aW9uIGxhbmd1YWdlLlxuICAgICAqIEBtZW1iZXIgRGlhbG9nU2VydmljZUNvbmZpZ0ltcGwucHJvdG90eXBlLnNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0IHNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hDb25maWcuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3BlZWNoIHJlY29nbml0aW9uIGxhbmd1YWdlLlxuICAgICAqIEBtZW1iZXIgRGlhbG9nU2VydmljZUNvbmZpZ0ltcGwucHJvdG90eXBlLnNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIGxhbmd1YWdlIHRvIHNldC5cbiAgICAgKi9cbiAgICBzZXQgc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSh2YWx1ZSkge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UodmFsdWUsIFwidmFsdWVcIik7XG4gICAgICAgIHRoaXMucHJpdlNwZWVjaENvbmZpZy5zcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSBuYW1lZCBwcm9wZXJ0eSBhcyB2YWx1ZVxuICAgICAqIEBtZW1iZXIgRGlhbG9nU2VydmljZUNvbmZpZ0ltcGwucHJvdG90eXBlLnNldFByb3BlcnR5XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7UHJvcGVydHlJZCB8IHN0cmluZ30gbmFtZSAtIFRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHZhbHVlLlxuICAgICAqL1xuICAgIHNldFByb3BlcnR5KG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJpdlNwZWVjaENvbmZpZy5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSBuYW1lZCBwcm9wZXJ0eSBhcyB2YWx1ZVxuICAgICAqIEBtZW1iZXIgRGlhbG9nU2VydmljZUNvbmZpZ0ltcGwucHJvdG90eXBlLmdldFByb3BlcnR5XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7UHJvcGVydHlJZCB8IHN0cmluZ30gbmFtZSAtIFRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRlZiAtIFRoZSBkZWZhdWx0IHZhbHVlIHRvIHJldHVybiBpbiBjYXNlIHRoZSBwcm9wZXJ0eSBpcyBub3Qga25vd24uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgdmFsdWUsIG9yIHByb3ZpZGVkIGRlZmF1bHQsIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBnZXRQcm9wZXJ0eShuYW1lLCBkZWYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNwZWVjaENvbmZpZy5nZXRQcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcHJveHkgY29uZmlndXJhdGlvbi5cbiAgICAgKiBPbmx5IHJlbGV2YW50IGluIE5vZGUuanMgZW52aXJvbm1lbnRzLlxuICAgICAqIEFkZGVkIGluIHZlcnNpb24gMS40LjAuXG4gICAgICogQHBhcmFtIHByb3h5SG9zdE5hbWUgVGhlIGhvc3QgbmFtZSBvZiB0aGUgcHJveHkgc2VydmVyLCB3aXRob3V0IHRoZSBwcm90b2NvbCBzY2hlbWUgKGh0dHA6Ly8pXG4gICAgICogQHBhcmFtIHByb3h5UG9ydCBUaGUgcG9ydCBudW1iZXIgb2YgdGhlIHByb3h5IHNlcnZlci5cbiAgICAgKiBAcGFyYW0gcHJveHlVc2VyTmFtZSBUaGUgdXNlciBuYW1lIG9mIHRoZSBwcm94eSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHByb3h5UGFzc3dvcmQgVGhlIHBhc3N3b3JkIG9mIHRoZSBwcm94eSBzZXJ2ZXIuXG4gICAgICovXG4gICAgc2V0UHJveHkocHJveHlIb3N0TmFtZSwgcHJveHlQb3J0LCBwcm94eVVzZXJOYW1lLCBwcm94eVBhc3N3b3JkKSB7XG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eUhvc3ROYW1lLCBwcm94eUhvc3ROYW1lKTtcbiAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5UG9ydCwgYCR7cHJveHlQb3J0fWApO1xuICAgICAgICBpZiAocHJveHlVc2VyTmFtZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5VXNlck5hbWUsIHByb3h5VXNlck5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm94eVBhc3N3b3JkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlQYXNzd29yZCwgcHJveHlQYXNzd29yZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0U2VydmljZVByb3BlcnR5KG5hbWUsIHZhbHVlLCBjaGFubmVsKSB7XG4gICAgICAgIHRoaXMucHJpdlNwZWVjaENvbmZpZy5zZXRTZXJ2aWNlUHJvcGVydHkobmFtZSwgdmFsdWUsIGNoYW5uZWwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlIG9mIGFzc29jaWF0ZWQgcmVzb3VyY2VzLlxuICAgICAqIEBtZW1iZXIgRGlhbG9nU2VydmljZUNvbmZpZ0ltcGwucHJvdG90eXBlLmNsb3NlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EaWFsb2dTZXJ2aWNlQ29uZmlnLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBEaWFsb2dDb25uZWN0aW9uRmFjdG9yeSB9IGZyb20gXCIuLi9jb21tb24uc3BlZWNoL0RpYWxvZ0Nvbm5lY3RvckZhY3RvcnlcIjtcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2VBZGFwdGVyLCBSZWNvZ25pdGlvbk1vZGUsIFJlY29nbml6ZXJDb25maWcsIH0gZnJvbSBcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiO1xuaW1wb3J0IHsgQ29udHJhY3RzIH0gZnJvbSBcIi4vQ29udHJhY3RzXCI7XG5pbXBvcnQgeyBSZWNvZ25pemVyIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuaW1wb3J0IHsgUHJvcGVydHlJZCB9IGZyb20gXCIuL1Byb3BlcnR5SWRcIjtcbi8qKlxuICogRGlhbG9nIFNlcnZpY2UgQ29ubmVjdG9yXG4gKiBAY2xhc3MgRGlhbG9nU2VydmljZUNvbm5lY3RvclxuICovXG5leHBvcnQgY2xhc3MgRGlhbG9nU2VydmljZUNvbm5lY3RvciBleHRlbmRzIFJlY29nbml6ZXIge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoZSBEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7RGlhbG9nU2VydmljZUNvbmZpZ30gZGlhbG9nQ29uZmlnIC0gU2V0IG9mIHByb3BlcnRpZXMgdG8gY29uZmlndXJlIHRoaXMgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge0F1ZGlvQ29uZmlnfSBhdWRpb0NvbmZpZyAtIEFuIG9wdGlvbmFsIGF1ZGlvIGNvbmZpZyBhc3NvY2lhdGVkIHdpdGggdGhlIHJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkaWFsb2dDb25maWcsIGF1ZGlvQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IGRpYWxvZ1NlcnZpY2VDb25maWdJbXBsID0gZGlhbG9nQ29uZmlnO1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGwoZGlhbG9nQ29uZmlnLCBcImRpYWxvZ0NvbmZpZ1wiKTtcbiAgICAgICAgc3VwZXIoYXVkaW9Db25maWcsIGRpYWxvZ1NlcnZpY2VDb25maWdJbXBsLnByb3BlcnRpZXMsIG5ldyBEaWFsb2dDb25uZWN0aW9uRmFjdG9yeSgpKTtcbiAgICAgICAgdGhpcy5wcml2SXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZQcm9wZXJ0aWVzID0gZGlhbG9nU2VydmljZUNvbmZpZ0ltcGwucHJvcGVydGllcy5jbG9uZSgpO1xuICAgICAgICBjb25zdCBhZ2VudENvbmZpZyA9IHRoaXMuYnVpbGRBZ2VudENvbmZpZygpO1xuICAgICAgICB0aGlzLnByaXZSZWNvLmFnZW50Q29uZmlnLnNldChhZ2VudENvbmZpZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBhIGNvbm5lY3Rpb24gdG8gdGhlIHNlcnZpY2UuXG4gICAgICogVXNlcnMgY2FuIG9wdGlvbmFsbHkgY2FsbCBjb25uZWN0KCkgdG8gbWFudWFsbHkgc2V0IHVwIGEgY29ubmVjdGlvbiBpbiBhZHZhbmNlLCBiZWZvcmUgc3RhcnRpbmcgaW50ZXJhY3Rpb25zLlxuICAgICAqXG4gICAgICogTm90ZTogT24gcmV0dXJuLCB0aGUgY29ubmVjdGlvbiBtaWdodCBub3QgYmUgcmVhZHkgeWV0LiBQbGVhc2Ugc3Vic2NyaWJlIHRvIHRoZSBDb25uZWN0ZWQgZXZlbnQgdG9cbiAgICAgKiBiZSBub3RpZmllZCB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkLlxuICAgICAqIEBtZW1iZXIgRGlhbG9nU2VydmljZUNvbm5lY3Rvci5wcm90b3R5cGUuY29ubmVjdFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25uZWN0KCkge1xuICAgICAgICB0aGlzLnByaXZSZWNvLmNvbm5lY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBjb25uZWN0aW9uIHRoZSBzZXJ2aWNlLlxuICAgICAqIFVzZXJzIGNhbiBvcHRpb25hbGx5IGNhbGwgZGlzY29ubmVjdCgpIHRvIG1hbnVhbGx5IHNodXRkb3duIHRoZSBjb25uZWN0aW9uIG9mIHRoZSBhc3NvY2lhdGVkIERpYWxvZ1NlcnZpY2VDb25uZWN0b3IuXG4gICAgICpcbiAgICAgKiBJZiBkaXNjb25uZWN0KCkgaXMgY2FsbGVkIGR1cmluZyBhIHJlY29nbml0aW9uLCByZWNvZ25pdGlvbiB3aWxsIGZhaWwgYW5kIGNhbmNlbCB3aXRoIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMucHJpdlJlY28uZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhdXRob3JpemF0aW9uIHRva2VuIHVzZWQgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgc2VydmljZS5cbiAgICAgKiBAbWVtYmVyIERpYWxvZ1NlcnZpY2VDb25uZWN0b3IucHJvdG90eXBlLmF1dGhvcml6YXRpb25Ub2tlblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBdXRob3JpemF0aW9uIHRva2VuLlxuICAgICAqL1xuICAgIGdldCBhdXRob3JpemF0aW9uVG9rZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4gdXNlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBzZXJ2aWNlLlxuICAgICAqIEBtZW1iZXIgRGlhbG9nU2VydmljZUNvbm5lY3Rvci5wcm90b3R5cGUuYXV0aG9yaXphdGlvblRva2VuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0b2tlbiAtIEF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICovXG4gICAgc2V0IGF1dGhvcml6YXRpb25Ub2tlbih0b2tlbikge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UodG9rZW4sIFwidG9rZW5cIik7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuLCB0b2tlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjb2xsZWN0aW9uIG9mIHByb3BlcnRpZXMgYW5kIHRoZWlyIHZhbHVlcyBkZWZpbmVkIGZvciB0aGlzIERpYWxvZ1NlcnZpY2VDb25uZWN0b3IuXG4gICAgICogQG1lbWJlciBEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLnByb3RvdHlwZS5wcm9wZXJ0aWVzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtQcm9wZXJ0eUNvbGxlY3Rpb259IFRoZSBjb2xsZWN0aW9uIG9mIHByb3BlcnRpZXMgYW5kIHRoZWlyIHZhbHVlcyBkZWZpbmVkIGZvciB0aGlzIERpYWxvZ1NlcnZpY2VDb25uZWN0b3IuXG4gICAgICovXG4gICAgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZQcm9wZXJ0aWVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgcmVjb2duaXRpb24gYW5kIHN0b3BzIGFmdGVyIHRoZSBmaXJzdCB1dHRlcmFuY2UgaXMgcmVjb2duaXplZC5cbiAgICAgKiBAbWVtYmVyIERpYWxvZ1NlcnZpY2VDb25uZWN0b3IucHJvdG90eXBlLmxpc3Rlbk9uY2VBc3luY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0gY2IgLSBDYWxsYmFjayB0aGF0IHJlY2VpdmVkIHRoZSByZXN1bHQgd2hlbiB0aGUgcmVjbyBoYXMgY29tcGxldGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgbGlzdGVuT25jZUFzeW5jKGNiLCBlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2SXNEaXNwb3NlZCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3QoKTtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RhcnQoUmVjb2duaXRpb25Nb2RlLkNvbnZlcnNhdGlvbiwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghIWNiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbXBsUmVjb2duaXplclN0b3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCEhZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZWRFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBlcnIodHlwZWRFcnJvci5uYW1lICsgXCI6IFwiICsgdHlwZWRFcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRGVzdHJveSB0aGUgcmVjb2duaXplci5cbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZW5kQWN0aXZpdHlBc3luYyhhY3Rpdml0eSkge1xuICAgICAgICB0aGlzLnByaXZSZWNvLnNlbmRNZXNzYWdlKGFjdGl2aXR5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogY2xvc2VzIGFsbCBleHRlcm5hbCByZXNvdXJjZXMgaGVsZCBieSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBtZW1iZXIgRGlhbG9nU2VydmljZUNvbm5lY3Rvci5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2SXNEaXNwb3NlZCk7XG4gICAgICAgIHRoaXMuZGlzcG9zZSh0cnVlKTtcbiAgICB9XG4gICAgZGlzcG9zZShkaXNwb3NpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMucHJpdklzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzcG9zaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5wcml2SXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICBzdXBlci5kaXNwb3NlKGRpc3Bvc2luZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlUmVjb2duaXplckNvbmZpZyhzcGVlY2hDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvZ25pemVyQ29uZmlnKHNwZWVjaENvbmZpZywgdGhpcy5wcml2UHJvcGVydGllcyk7XG4gICAgfVxuICAgIGNyZWF0ZVNlcnZpY2VSZWNvZ25pemVyKGF1dGhlbnRpY2F0aW9uLCBjb25uZWN0aW9uRmFjdG9yeSwgYXVkaW9Db25maWcsIHJlY29nbml6ZXJDb25maWcpIHtcbiAgICAgICAgY29uc3QgYXVkaW9Tb3VyY2UgPSBhdWRpb0NvbmZpZztcbiAgICAgICAgcmV0dXJuIG5ldyBEaWFsb2dTZXJ2aWNlQWRhcHRlcihhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvU291cmNlLCByZWNvZ25pemVyQ29uZmlnLCB0aGlzKTtcbiAgICB9XG4gICAgYnVpbGRBZ2VudENvbmZpZygpIHtcbiAgICAgICAgY29uc3QgY29tbXVuaWNhdGlvblR5cGUgPSB0aGlzLnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoXCJDb252ZXJzYXRpb25fQ29tbXVuaWNhdGlvbl9UeXBlXCIsIFwiRGVmYXVsdFwiKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJvdEluZm86IHtcbiAgICAgICAgICAgICAgICBjb21tVHlwZTogY29tbXVuaWNhdGlvblR5cGUsXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbklkOiB0aGlzLnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5Db252ZXJzYXRpb25fQXBwbGljYXRpb25JZCksXG4gICAgICAgICAgICAgICAgY29udmVyc2F0aW9uSWQ6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZlcnNpb246IDAuMlxuICAgICAgICB9O1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGlhbG9nU2VydmljZUNvbm5lY3Rvci5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IHsgQXVkaW9Db25maWcgfSBmcm9tIFwiLi9BdWRpby9BdWRpb0NvbmZpZ1wiO1xuZXhwb3J0IHsgQXVkaW9TdHJlYW1Gb3JtYXQgfSBmcm9tIFwiLi9BdWRpby9BdWRpb1N0cmVhbUZvcm1hdFwiO1xuZXhwb3J0IHsgQXVkaW9JbnB1dFN0cmVhbSwgUHVsbEF1ZGlvSW5wdXRTdHJlYW0sIFB1c2hBdWRpb0lucHV0U3RyZWFtIH0gZnJvbSBcIi4vQXVkaW8vQXVkaW9JbnB1dFN0cmVhbVwiO1xuZXhwb3J0IHsgQXVkaW9PdXRwdXRTdHJlYW0sIFB1bGxBdWRpb091dHB1dFN0cmVhbSB9IGZyb20gXCIuL0F1ZGlvL0F1ZGlvT3V0cHV0U3RyZWFtXCI7XG5leHBvcnQgeyBDYW5jZWxsYXRpb25SZWFzb24gfSBmcm9tIFwiLi9DYW5jZWxsYXRpb25SZWFzb25cIjtcbmV4cG9ydCB7IFB1bGxBdWRpb0lucHV0U3RyZWFtQ2FsbGJhY2sgfSBmcm9tIFwiLi9BdWRpby9QdWxsQXVkaW9JbnB1dFN0cmVhbUNhbGxiYWNrXCI7XG5leHBvcnQgeyBLZXl3b3JkUmVjb2duaXRpb25Nb2RlbCB9IGZyb20gXCIuL0tleXdvcmRSZWNvZ25pdGlvbk1vZGVsXCI7XG5leHBvcnQgeyBTZXNzaW9uRXZlbnRBcmdzIH0gZnJvbSBcIi4vU2Vzc2lvbkV2ZW50QXJnc1wiO1xuZXhwb3J0IHsgUmVjb2duaXRpb25FdmVudEFyZ3MgfSBmcm9tIFwiLi9SZWNvZ25pdGlvbkV2ZW50QXJnc1wiO1xuZXhwb3J0IHsgT3V0cHV0Rm9ybWF0IH0gZnJvbSBcIi4vT3V0cHV0Rm9ybWF0XCI7XG5leHBvcnQgeyBJbnRlbnRSZWNvZ25pdGlvbkV2ZW50QXJncyB9IGZyb20gXCIuL0ludGVudFJlY29nbml0aW9uRXZlbnRBcmdzXCI7XG5leHBvcnQgeyBSZWNvZ25pdGlvblJlc3VsdCB9IGZyb20gXCIuL1JlY29nbml0aW9uUmVzdWx0XCI7XG5leHBvcnQgeyBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdCB9IGZyb20gXCIuL1NwZWVjaFJlY29nbml0aW9uUmVzdWx0XCI7XG5leHBvcnQgeyBJbnRlbnRSZWNvZ25pdGlvblJlc3VsdCB9IGZyb20gXCIuL0ludGVudFJlY29nbml0aW9uUmVzdWx0XCI7XG5leHBvcnQgeyBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbCB9IGZyb20gXCIuL0xhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsXCI7XG5leHBvcnQgeyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJncyB9IGZyb20gXCIuL1NwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzXCI7XG5leHBvcnQgeyBTcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzIH0gZnJvbSBcIi4vU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJnc1wiO1xuZXhwb3J0IHsgVHJhbnNsYXRpb25SZWNvZ25pdGlvbkV2ZW50QXJncyB9IGZyb20gXCIuL1RyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3NcIjtcbmV4cG9ydCB7IFRyYW5zbGF0aW9uU3ludGhlc2lzRXZlbnRBcmdzIH0gZnJvbSBcIi4vVHJhbnNsYXRpb25TeW50aGVzaXNFdmVudEFyZ3NcIjtcbmV4cG9ydCB7IFRyYW5zbGF0aW9uUmVjb2duaXRpb25SZXN1bHQgfSBmcm9tIFwiLi9UcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0XCI7XG5leHBvcnQgeyBUcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdCB9IGZyb20gXCIuL1RyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0XCI7XG5leHBvcnQgeyBSZXN1bHRSZWFzb24gfSBmcm9tIFwiLi9SZXN1bHRSZWFzb25cIjtcbmV4cG9ydCB7IFNwZWVjaENvbmZpZywgU3BlZWNoQ29uZmlnSW1wbCB9IGZyb20gXCIuL1NwZWVjaENvbmZpZ1wiO1xuZXhwb3J0IHsgU3BlZWNoVHJhbnNsYXRpb25Db25maWcgfSBmcm9tIFwiLi9TcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ1wiO1xuZXhwb3J0IHsgUHJvcGVydHlDb2xsZWN0aW9uIH0gZnJvbSBcIi4vUHJvcGVydHlDb2xsZWN0aW9uXCI7XG5leHBvcnQgeyBQcm9wZXJ0eUlkIH0gZnJvbSBcIi4vUHJvcGVydHlJZFwiO1xuZXhwb3J0IHsgUmVjb2duaXplciB9IGZyb20gXCIuL1JlY29nbml6ZXJcIjtcbmV4cG9ydCB7IFNwZWVjaFJlY29nbml6ZXIgfSBmcm9tIFwiLi9TcGVlY2hSZWNvZ25pemVyXCI7XG5leHBvcnQgeyBJbnRlbnRSZWNvZ25pemVyIH0gZnJvbSBcIi4vSW50ZW50UmVjb2duaXplclwiO1xuZXhwb3J0IHsgVHJhbnNsYXRpb25SZWNvZ25pemVyIH0gZnJvbSBcIi4vVHJhbnNsYXRpb25SZWNvZ25pemVyXCI7XG5leHBvcnQgeyBUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi9UcmFuc2xhdGlvbnNcIjtcbmV4cG9ydCB7IE5vTWF0Y2hSZWFzb24gfSBmcm9tIFwiLi9Ob01hdGNoUmVhc29uXCI7XG5leHBvcnQgeyBOb01hdGNoRGV0YWlscyB9IGZyb20gXCIuL05vTWF0Y2hEZXRhaWxzXCI7XG5leHBvcnQgeyBUcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MgfSBmcm9tIFwiLi9UcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3NcIjtcbmV4cG9ydCB7IEludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MgfSBmcm9tIFwiLi9JbnRlbnRSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzXCI7XG5leHBvcnQgeyBDYW5jZWxsYXRpb25EZXRhaWxzIH0gZnJvbSBcIi4vQ2FuY2VsbGF0aW9uRGV0YWlsc1wiO1xuZXhwb3J0IHsgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlIH0gZnJvbSBcIi4vQ2FuY2VsbGF0aW9uRXJyb3JDb2Rlc1wiO1xuZXhwb3J0IHsgQ29ubmVjdGlvbkV2ZW50QXJncyB9IGZyb20gXCIuL0Nvbm5lY3Rpb25FdmVudEFyZ3NcIjtcbmV4cG9ydCB7IENvbm5lY3Rpb24gfSBmcm9tIFwiLi9Db25uZWN0aW9uXCI7XG5leHBvcnQgeyBQaHJhc2VMaXN0R3JhbW1hciB9IGZyb20gXCIuL1BocmFzZUxpc3RHcmFtbWFyXCI7XG5leHBvcnQgeyBEaWFsb2dTZXJ2aWNlQ29uZmlnIH0gZnJvbSBcIi4vRGlhbG9nU2VydmljZUNvbmZpZ1wiO1xuZXhwb3J0IHsgQm90RnJhbWV3b3JrQ29uZmlnIH0gZnJvbSBcIi4vQm90RnJhbWV3b3JrQ29uZmlnXCI7XG5leHBvcnQgeyBTcGVlY2hDb21tYW5kc0NvbmZpZyB9IGZyb20gXCIuL1NwZWVjaENvbW1hbmRzQ29uZmlnXCI7XG5leHBvcnQgeyBEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yIH0gZnJvbSBcIi4vRGlhbG9nU2VydmljZUNvbm5lY3RvclwiO1xuZXhwb3J0IHsgQWN0aXZpdHlSZWNlaXZlZEV2ZW50QXJncyB9IGZyb20gXCIuL0FjdGl2aXR5UmVjZWl2ZWRFdmVudEFyZ3NcIjtcbmV4cG9ydCB7IFNlcnZpY2VQcm9wZXJ0eUNoYW5uZWwgfSBmcm9tIFwiLi9TZXJ2aWNlUHJvcGVydHlDaGFubmVsXCI7XG5leHBvcnQgeyBQcm9mYW5pdHlPcHRpb24gfSBmcm9tIFwiLi9Qcm9mYW5pdHlPcHRpb25cIjtcbmV4cG9ydCB7IEJhc2VBdWRpb1BsYXllciB9IGZyb20gXCIuL0F1ZGlvL0Jhc2VBdWRpb1BsYXllclwiO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHBvcnRzLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBJbnRlbnRSZWNvZ25pdGlvbkV2ZW50QXJncyB9IGZyb20gXCIuL0V4cG9ydHNcIjtcbi8qKlxuICogRGVmaW5lIHBheWxvYWQgb2YgaW50ZW50IHJlY29nbml0aW9uIGNhbmNlbGVkIHJlc3VsdCBldmVudHMuXG4gKiBAY2xhc3MgSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJnc1xuICovXG5leHBvcnQgY2xhc3MgSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyBleHRlbmRzIEludGVudFJlY29nbml0aW9uRXZlbnRBcmdzIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Q2FuY2VsbGF0aW9uUmVhc29ufSByZXN1bHQgLSBUaGUgcmVzdWx0IG9mIHRoZSBpbnRlbnQgcmVjb2duaXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9mZnNldCAtIFRoZSBvZmZzZXQuXG4gICAgICogQHBhcmFtIHtJbnRlbnRSZWNvZ25pdGlvblJlc3VsdH0gc2Vzc2lvbklkIC0gVGhlIHNlc3Npb24gaWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocmVhc29uLCBlcnJvckRldGFpbHMsIGVycm9yQ29kZSwgcmVzdWx0LCBvZmZzZXQsIHNlc3Npb25JZCkge1xuICAgICAgICBzdXBlcihyZXN1bHQsIG9mZnNldCwgc2Vzc2lvbklkKTtcbiAgICAgICAgdGhpcy5wcml2UmVhc29uID0gcmVhc29uO1xuICAgICAgICB0aGlzLnByaXZFcnJvckRldGFpbHMgPSBlcnJvckRldGFpbHM7XG4gICAgICAgIHRoaXMucHJpdkVycm9yQ29kZSA9IGVycm9yQ29kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHJlYXNvbiB0aGUgcmVjb2duaXRpb24gd2FzIGNhbmNlbGVkLlxuICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUucmVhc29uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtDYW5jZWxsYXRpb25SZWFzb259IFNwZWNpZmllcyB0aGUgcmVhc29uIGNhbmNlbGVkLlxuICAgICAqL1xuICAgIGdldCByZWFzb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZWFzb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBlcnJvciBjb2RlIGluIGNhc2Ugb2YgYW4gdW5zdWNjZXNzZnVsIHJlY29nbml0aW9uLlxuICAgICAqIEFkZGVkIGluIHZlcnNpb24gMS4xLjAuXG4gICAgICogQHJldHVybiBBbiBlcnJvciBjb2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgZXJyb3IgcmVhc29uLlxuICAgICAqL1xuICAgIGdldCBlcnJvckNvZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZFcnJvckNvZGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluIGNhc2Ugb2YgYW4gdW5zdWNjZXNzZnVsIHJlY29nbml0aW9uLCBwcm92aWRlcyBkZXRhaWxzIG9mIHRoZSBvY2N1cnJlZCBlcnJvci5cbiAgICAgKiBAbWVtYmVyIEludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MucHJvdG90eXBlLmVycm9yRGV0YWlsc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGVycm9yIGRldGFpbHMuXG4gICAgICovXG4gICAgZ2V0IGVycm9yRGV0YWlscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yRGV0YWlscztcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFJlY29nbml0aW9uRXZlbnRBcmdzIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuLyoqXG4gKiBJbnRlbnQgcmVjb2duaXRpb24gcmVzdWx0IGV2ZW50IGFyZ3VtZW50cy5cbiAqIEBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgSW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MgZXh0ZW5kcyBSZWNvZ25pdGlvbkV2ZW50QXJncyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gVGhlIHJlc3VsdCBvZiB0aGUgaW50ZW50IHJlY29nbml0aW9uLlxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBUaGUgb2Zmc2V0LlxuICAgICAqIEBwYXJhbSBzZXNzaW9uSWQgLSBUaGUgc2Vzc2lvbiBpZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZXN1bHQsIG9mZnNldCwgc2Vzc2lvbklkKSB7XG4gICAgICAgIHN1cGVyKG9mZnNldCwgc2Vzc2lvbklkKTtcbiAgICAgICAgdGhpcy5wcml2UmVzdWx0ID0gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIHRoZSBpbnRlbnQgcmVjb2duaXRpb24gcmVzdWx0LlxuICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MucHJvdG90eXBlLnJlc3VsdFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7SW50ZW50UmVjb2duaXRpb25SZXN1bHR9IFJlcHJlc2VudHMgdGhlIGludGVudCByZWNvZ25pdGlvbiByZXN1bHQuXG4gICAgICovXG4gICAgZ2V0IHJlc3VsdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlc3VsdDtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUludGVudFJlY29nbml0aW9uRXZlbnRBcmdzLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdCB9IGZyb20gXCIuL0V4cG9ydHNcIjtcbi8qKlxuICogSW50ZW50IHJlY29nbml0aW9uIHJlc3VsdC5cbiAqIEBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgSW50ZW50UmVjb2duaXRpb25SZXN1bHQgZXh0ZW5kcyBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gaW50ZW50SWQgLSBUaGUgaW50ZW50IGlkLlxuICAgICAqIEBwYXJhbSByZXN1bHRJZCAtIFRoZSByZXN1bHQgaWQuXG4gICAgICogQHBhcmFtIHJlYXNvbiAtIFRoZSByZWFzb24uXG4gICAgICogQHBhcmFtIHRleHQgLSBUaGUgcmVjb2duaXplZCB0ZXh0LlxuICAgICAqIEBwYXJhbSBkdXJhdGlvbiAtIFRoZSBkdXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gVGhlIG9mZnNldCBpbnRvIHRoZSBzdHJlYW0uXG4gICAgICogQHBhcmFtIGVycm9yRGV0YWlscyAtIEVycm9yIGRldGFpbHMsIGlmIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSBqc29uIC0gQWRkaXRpb25hbCBKc29uLCBpZiBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0gcHJvcGVydGllcyAtIEFkZGl0aW9uYWwgcHJvcGVydGllcywgaWYgcHJvdmlkZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW50ZW50SWQsIHJlc3VsdElkLCByZWFzb24sIHRleHQsIGR1cmF0aW9uLCBvZmZzZXQsIGVycm9yRGV0YWlscywganNvbiwgcHJvcGVydGllcykge1xuICAgICAgICBzdXBlcihyZXN1bHRJZCwgcmVhc29uLCB0ZXh0LCBkdXJhdGlvbiwgb2Zmc2V0LCBlcnJvckRldGFpbHMsIGpzb24sIHByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLnByaXZJbnRlbnRJZCA9IGludGVudElkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGludGVudCBpZGVudGlmaWVyIGJlaW5nIHJlY29nbml6ZWQuXG4gICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pdGlvblJlc3VsdC5wcm90b3R5cGUuaW50ZW50SWRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBpbnRlbnQgaWRlbnRpZmllciBiZWluZyByZWNvZ25pemVkLlxuICAgICAqL1xuICAgIGdldCBpbnRlbnRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkludGVudElkO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW50ZW50UmVjb2duaXRpb25SZXN1bHQuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEFkZGVkTG1JbnRlbnQsIEludGVudENvbm5lY3Rpb25GYWN0b3J5LCBJbnRlbnRTZXJ2aWNlUmVjb2duaXplciwgUmVjb2duaXRpb25Nb2RlLCBSZWNvZ25pemVyQ29uZmlnLCB9IGZyb20gXCIuLi9jb21tb24uc3BlZWNoL0V4cG9ydHNcIjtcbmltcG9ydCB7IENvbnRyYWN0cyB9IGZyb20gXCIuL0NvbnRyYWN0c1wiO1xuaW1wb3J0IHsgUHJvcGVydHlJZCwgUmVjb2duaXplciwgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vKipcbiAqIEludGVudCByZWNvZ25pemVyLlxuICogQGNsYXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnRlbnRSZWNvZ25pemVyIGV4dGVuZHMgUmVjb2duaXplciB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIEludGVudFJlY29nbml6ZXIuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtTcGVlY2hDb25maWd9IHNwZWVjaENvbmZpZyAtIFRoZSBzZXQgb2YgY29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSB7QXVkaW9Db25maWd9IGF1ZGlvQ29uZmlnIC0gQW4gb3B0aW9uYWwgYXVkaW8gaW5wdXQgY29uZmlnIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVjb2duaXplclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNwZWVjaENvbmZpZywgYXVkaW9Db25maWcpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JVbmRlZmluZWQoc3BlZWNoQ29uZmlnLCBcInNwZWVjaENvbmZpZ1wiKTtcbiAgICAgICAgY29uc3QgY29uZmlnSW1wbCA9IHNwZWVjaENvbmZpZztcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JVbmRlZmluZWQoY29uZmlnSW1wbCwgXCJzcGVlY2hDb25maWdcIik7XG4gICAgICAgIHN1cGVyKGF1ZGlvQ29uZmlnLCBjb25maWdJbXBsLnByb3BlcnRpZXMsIG5ldyBJbnRlbnRDb25uZWN0aW9uRmFjdG9yeSgpKTtcbiAgICAgICAgdGhpcy5wcml2QWRkZWRJbnRlbnRzID0gW107XG4gICAgICAgIHRoaXMucHJpdkFkZGVkTG1JbnRlbnRzID0ge307XG4gICAgICAgIHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZQcm9wZXJ0aWVzID0gY29uZmlnSW1wbC5wcm9wZXJ0aWVzO1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UodGhpcy5wcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlKSwgUHJvcGVydHlJZFtQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZV0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzcG9rZW4gbGFuZ3VhZ2Ugb2YgcmVjb2duaXRpb24uXG4gICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5zcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBzcG9rZW4gbGFuZ3VhZ2Ugb2YgcmVjb2duaXRpb24uXG4gICAgICovXG4gICAgZ2V0IHNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UoKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRJbnRlbnRSZWNvZ25pemVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4gdXNlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBzZXJ2aWNlLlxuICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuYXV0aG9yaXphdGlvblRva2VuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICovXG4gICAgZ2V0IGF1dGhvcml6YXRpb25Ub2tlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSBhdXRob3JpemF0aW9uIHRva2VuIHVzZWQgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgc2VydmljZS5cbiAgICAgKiBOb3RlOiBQbGVhc2UgdXNlIGEgdG9rZW4gZGVyaXZlZCBmcm9tIHlvdXIgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nIHN1YnNjcmlwdGlvbiBrZXkgZm9yIHRoZSBJbnRlbnQgcmVjb2duaXplci5cbiAgICAgKiBAbWVtYmVyIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLmF1dGhvcml6YXRpb25Ub2tlblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBBdXRob3JpemF0aW9uIHRva2VuLlxuICAgICAqL1xuICAgIHNldCBhdXRob3JpemF0aW9uVG9rZW4odmFsdWUpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVG9rZW4sIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNvbGxlY3Rpb24gb2YgcHJvcGVydGllcyBhbmQgdGhlaXIgdmFsdWVzIGRlZmluZWQgZm9yIHRoaXMgSW50ZW50UmVjb2duaXplci5cbiAgICAgKiBAbWVtYmVyIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLnByb3BlcnRpZXNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge1Byb3BlcnR5Q29sbGVjdGlvbn0gVGhlIGNvbGxlY3Rpb24gb2YgcHJvcGVydGllcyBhbmQgdGhlaXJcbiAgICAgKiAgICAgICAgICB2YWx1ZXMgZGVmaW5lZCBmb3IgdGhpcyBJbnRlbnRSZWNvZ25pemVyLlxuICAgICAqL1xuICAgIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvcGVydGllcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIGludGVudCByZWNvZ25pdGlvbiwgYW5kIHN0b3BzIGFmdGVyIHRoZSBmaXJzdCB1dHRlcmFuY2UgaXMgcmVjb2duaXplZC5cbiAgICAgKiBUaGUgdGFzayByZXR1cm5zIHRoZSByZWNvZ25pdGlvbiB0ZXh0IGFuZCBpbnRlbnQgYXMgcmVzdWx0LlxuICAgICAqIE5vdGU6IFJlY29nbml6ZU9uY2VBc3luYygpIHJldHVybnMgd2hlbiB0aGUgZmlyc3QgdXR0ZXJhbmNlIGhhcyBiZWVuIHJlY29nbml6ZWQsXG4gICAgICogICAgICAgc28gaXQgaXMgc3VpdGFibGUgb25seSBmb3Igc2luZ2xlIHNob3QgcmVjb2duaXRpb24gbGlrZSBjb21tYW5kIG9yIHF1ZXJ5LlxuICAgICAqICAgICAgIEZvciBsb25nLXJ1bm5pbmcgcmVjb2duaXRpb24sIHVzZSBTdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jKCkgaW5zdGVhZC5cbiAgICAgKiBAbWVtYmVyIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLnJlY29nbml6ZU9uY2VBc3luY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0gY2IgLSBDYWxsYmFjayB0aGF0IHJlY2VpdmVkIHRoZSByZWNvZ25pdGlvbiBoYXMgZmluaXNoZWQgd2l0aCBhbiBJbnRlbnRSZWNvZ25pdGlvblJlc3VsdC5cbiAgICAgKiBAcGFyYW0gZXJyIC0gQ2FsbGJhY2sgaW52b2tlZCBpbiBjYXNlIG9mIGFuIGVycm9yLlxuICAgICAqL1xuICAgIHJlY29nbml6ZU9uY2VBc3luYyhjYiwgZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBDb250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplcik7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMucHJpdkFkZGVkTG1JbnRlbnRzKS5sZW5ndGggIT09IDAgfHwgdW5kZWZpbmVkICE9PSB0aGlzLnByaXZVbWJyZWxsYUludGVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmJ1aWxkU3BlZWNoQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlY28uc3BlZWNoQ29udGV4dC5zZXRTZWN0aW9uKFwiaW50ZW50XCIsIGNvbnRleHQuSW50ZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWNvLmR5bmFtaWNHcmFtbWFyLmFkZFJlZmVyZW5jZUdyYW1tYXIoY29udGV4dC5SZWZlcmVuY2VHcmFtbWFycyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZW50UmVjbyA9IHRoaXMucHJpdlJlY287XG4gICAgICAgICAgICAgICAgaW50ZW50UmVjby5zZXRJbnRlbnRzKHRoaXMucHJpdkFkZGVkTG1JbnRlbnRzLCB0aGlzLnByaXZVbWJyZWxsYUludGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RhcnQoUmVjb2duaXRpb25Nb2RlLkludGVyYWN0aXZlLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgICAgICBlcnIoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGVycih0eXBlZEVycm9yLm5hbWUgKyBcIjogXCIgKyB0eXBlZEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBzcGVlY2ggcmVjb2duaXRpb24sIHVudGlsIHN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luYygpIGlzIGNhbGxlZC5cbiAgICAgKiBVc2VyIG11c3Qgc3Vic2NyaWJlIHRvIGV2ZW50cyB0byByZWNlaXZlIHJlY29nbml0aW9uIHJlc3VsdHMuXG4gICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5zdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIGludm9rZWQgb25jZSB0aGUgcmVjb2duaXRpb24gaGFzIHN0YXJ0ZWQuXG4gICAgICogQHBhcmFtIGVyciAtIENhbGxiYWNrIGludm9rZWQgaW4gY2FzZSBvZiBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBzdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jKGNiLCBlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRJbnRlbnRSZWNvZ25pemVyKTtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5wcml2QWRkZWRMbUludGVudHMpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmJ1aWxkU3BlZWNoQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlY28uc3BlZWNoQ29udGV4dC5zZXRTZWN0aW9uKFwiaW50ZW50XCIsIGNvbnRleHQuSW50ZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWNvLmR5bmFtaWNHcmFtbWFyLmFkZFJlZmVyZW5jZUdyYW1tYXIoY29udGV4dC5SZWZlcmVuY2VHcmFtbWFycyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZW50UmVjbyA9IHRoaXMucHJpdlJlY287XG4gICAgICAgICAgICAgICAgaW50ZW50UmVjby5zZXRJbnRlbnRzKHRoaXMucHJpdkFkZGVkTG1JbnRlbnRzLCB0aGlzLnByaXZVbWJyZWxsYUludGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RhcnQoUmVjb2duaXRpb25Nb2RlLkNvbnZlcnNhdGlvbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgLy8gcmVwb3J0IHJlc3VsdCB0byBwcm9taXNlLlxuICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVkRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgZXJyKHR5cGVkRXJyb3IubmFtZSArIFwiOiBcIiArIHR5cGVkRXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnIoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlc3Ryb3kgdGhlIHJlY29nbml6ZXIuXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcHMgY29udGludW91cyBpbnRlbnQgcmVjb2duaXRpb24uXG4gICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5zdG9wQ29udGludW91c1JlY29nbml0aW9uQXN5bmNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIGNiIC0gQ2FsbGJhY2sgaW52b2tlZCBvbmNlIHRoZSByZWNvZ25pdGlvbiBoYXMgc3RvcHBlZC5cbiAgICAgKiBAcGFyYW0gZXJyIC0gQ2FsbGJhY2sgaW52b2tlZCBpbiBjYXNlIG9mIGFuIGVycm9yLlxuICAgICAqL1xuICAgIHN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyhjYiwgZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBDb250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplcik7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVkRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgZXJyKHR5cGVkRXJyb3IubmFtZSArIFwiOiBcIiArIHR5cGVkRXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnIoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlc3Ryb3kgdGhlIHJlY29nbml6ZXIuXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHNwZWVjaCByZWNvZ25pdGlvbiB3aXRoIGtleXdvcmQgc3BvdHRpbmcsIHVudGlsIHN0b3BLZXl3b3JkUmVjb2duaXRpb25Bc3luYygpIGlzIGNhbGxlZC5cbiAgICAgKiBVc2VyIG11c3Qgc3Vic2NyaWJlIHRvIGV2ZW50cyB0byByZWNlaXZlIHJlY29nbml0aW9uIHJlc3VsdHMuXG4gICAgICogTm90ZTogS2V5IHdvcmQgc3BvdHRpbmcgZnVuY3Rpb25hbGl0eSBpcyBvbmx5IGF2YWlsYWJsZSBvbiB0aGUgU3BlZWNoIERldmljZXMgU0RLLlxuICAgICAqICAgICAgIFRoaXMgZnVuY3Rpb25hbGl0eSBpcyBjdXJyZW50bHkgbm90IGluY2x1ZGVkIGluIHRoZSBTREsgaXRzZWxmLlxuICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuc3RhcnRLZXl3b3JkUmVjb2duaXRpb25Bc3luY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0tleXdvcmRSZWNvZ25pdGlvbk1vZGVsfSBtb2RlbCAtIFRoZSBrZXl3b3JkIHJlY29nbml0aW9uIG1vZGVsIHRoYXQgc3BlY2lmaWVzIHRoZSBrZXl3b3JkIHRvIGJlIHJlY29nbml6ZWQuXG4gICAgICogQHBhcmFtIGNiIC0gQ2FsbGJhY2sgaW52b2tlZCBvbmNlIHRoZSByZWNvZ25pdGlvbiBoYXMgc3RhcnRlZC5cbiAgICAgKiBAcGFyYW0gZXJyIC0gQ2FsbGJhY2sgaW52b2tlZCBpbiBjYXNlIG9mIGFuIGVycm9yLlxuICAgICAqL1xuICAgIHN0YXJ0S2V5d29yZFJlY29nbml0aW9uQXN5bmMobW9kZWwsIGNiLCBlcnIpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsKG1vZGVsLCBcIm1vZGVsXCIpO1xuICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgIGVycihcIk5vdCB5ZXQgaW1wbGVtZW50ZWQuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3BzIGNvbnRpbnVvdXMgc3BlZWNoIHJlY29nbml0aW9uLlxuICAgICAqIE5vdGU6IEtleSB3b3JkIHNwb3R0aW5nIGZ1bmN0aW9uYWxpdHkgaXMgb25seSBhdmFpbGFibGUgb24gdGhlIFNwZWVjaCBEZXZpY2VzIFNESy5cbiAgICAgKiAgICAgICBUaGlzIGZ1bmN0aW9uYWxpdHkgaXMgY3VycmVudGx5IG5vdCBpbmNsdWRlZCBpbiB0aGUgU0RLIGl0c2VsZi5cbiAgICAgKiBAbWVtYmVyIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLnN0b3BLZXl3b3JkUmVjb2duaXRpb25Bc3luY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0gY2IgLSBDYWxsYmFjayBpbnZva2VkIG9uY2UgdGhlIHJlY29nbml0aW9uIGhhcyBzdG9wcGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgc3RvcEtleXdvcmRSZWNvZ25pdGlvbkFzeW5jKGNiLCBlcnIpIHtcbiAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHBocmFzZSB0aGF0IHNob3VsZCBiZSByZWNvZ25pemVkIGFzIGludGVudC5cbiAgICAgKiBAbWVtYmVyIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLmFkZEludGVudFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW50ZW50SWQgLSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGlkZW50aWZpZXIgb2YgdGhlIGludGVudCB0byBiZSByZWNvZ25pemVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwaHJhc2UgLSBBIFN0cmluZyB0aGF0IHNwZWNpZmllcyB0aGUgcGhyYXNlIHJlcHJlc2VudGluZyB0aGUgaW50ZW50LlxuICAgICAqL1xuICAgIGFkZEludGVudChzaW1wbGVQaHJhc2UsIGludGVudElkKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRJbnRlbnRSZWNvZ25pemVyKTtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKGludGVudElkLCBcImludGVudElkXCIpO1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2Uoc2ltcGxlUGhyYXNlLCBcInNpbXBsZVBocmFzZVwiKTtcbiAgICAgICAgdGhpcy5wcml2QWRkZWRJbnRlbnRzLnB1c2goW2ludGVudElkLCBzaW1wbGVQaHJhc2VdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBpbnRlbnQgZnJvbSBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIHNlcnZpY2UgZm9yIHJlY29nbml0aW9uLlxuICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuYWRkSW50ZW50V2l0aExhbmd1YWdlTW9kZWxcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGludGVudElkIC0gQSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBpbnRlbnRcbiAgICAgKiAgICAgICAgdG8gYmUgcmVjb2duaXplZC4gSWdub3JlZCBpZiBpbnRlbnROYW1lIGlzIGVtcHR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCAtIFRoZSBpbnRlbnQgbW9kZWwgZnJvbSBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIHNlcnZpY2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGludGVudE5hbWUgLSBUaGUgaW50ZW50IG5hbWUgZGVmaW5lZCBpbiB0aGUgaW50ZW50IG1vZGVsLiBJZiBpdFxuICAgICAqICAgICAgICBpcyBlbXB0eSwgYWxsIGludGVudCBuYW1lcyBkZWZpbmVkIGluIHRoZSBtb2RlbCB3aWxsIGJlIGFkZGVkLlxuICAgICAqL1xuICAgIGFkZEludGVudFdpdGhMYW5ndWFnZU1vZGVsKGludGVudElkLCBtb2RlbCwgaW50ZW50TmFtZSkge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplcik7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShpbnRlbnRJZCwgXCJpbnRlbnRJZFwiKTtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsKG1vZGVsLCBcIm1vZGVsXCIpO1xuICAgICAgICBjb25zdCBtb2RlbEltcGwgPSBtb2RlbDtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKG1vZGVsSW1wbC5hcHBJZCwgXCJtb2RlbC5hcHBJZFwiKTtcbiAgICAgICAgdGhpcy5wcml2QWRkZWRMbUludGVudHNbaW50ZW50SWRdID0gbmV3IEFkZGVkTG1JbnRlbnQobW9kZWxJbXBsLCBpbnRlbnROYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHN1bW1hcnkgQWRkcyBhbGwgaW50ZW50cyBmcm9tIHRoZSBzcGVjaWZpZWQgTGFuZ3VhZ2UgVW5kZXJzdGFuZGluZyBNb2RlbC5cbiAgICAgKiBAbWVtYmVyIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLmFkZEFsbEludGVudHNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWx9IG1vZGVsIC0gVGhlIGxhbmd1YWdlIHVuZGVyc3RhbmRpbmcgbW9kZWwgY29udGFpbmluZyB0aGUgaW50ZW50cy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW50ZW50SWQgLSBBIGN1c3RvbSBpZCBTdHJpbmcgdG8gYmUgcmV0dXJuZWQgaW4gdGhlIEludGVudFJlY29nbml0aW9uUmVzdWx0J3MgZ2V0SW50ZW50SWQoKSBtZXRob2QuXG4gICAgICovXG4gICAgYWRkQWxsSW50ZW50cyhtb2RlbCwgaW50ZW50SWQpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsKG1vZGVsLCBcIm1vZGVsXCIpO1xuICAgICAgICBjb25zdCBtb2RlbEltcGwgPSBtb2RlbDtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKG1vZGVsSW1wbC5hcHBJZCwgXCJtb2RlbC5hcHBJZFwiKTtcbiAgICAgICAgdGhpcy5wcml2VW1icmVsbGFJbnRlbnQgPSBuZXcgQWRkZWRMbUludGVudChtb2RlbEltcGwsIGludGVudElkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogY2xvc2VzIGFsbCBleHRlcm5hbCByZXNvdXJjZXMgaGVsZCBieSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRJbnRlbnRSZWNvZ25pemVyKTtcbiAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgIH1cbiAgICBjcmVhdGVSZWNvZ25pemVyQ29uZmlnKHNwZWVjaENvbmZpZykge1xuICAgICAgICByZXR1cm4gbmV3IFJlY29nbml6ZXJDb25maWcoc3BlZWNoQ29uZmlnLCB0aGlzLnByb3BlcnRpZXMpO1xuICAgIH1cbiAgICBjcmVhdGVTZXJ2aWNlUmVjb2duaXplcihhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvQ29uZmlnLCByZWNvZ25pemVyQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IGF1ZGlvSW1wbCA9IGF1ZGlvQ29uZmlnO1xuICAgICAgICByZXR1cm4gbmV3IEludGVudFNlcnZpY2VSZWNvZ25pemVyKGF1dGhlbnRpY2F0aW9uLCBjb25uZWN0aW9uRmFjdG9yeSwgYXVkaW9JbXBsLCByZWNvZ25pemVyQ29uZmlnLCB0aGlzKTtcbiAgICB9XG4gICAgZGlzcG9zZShkaXNwb3NpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwb3NpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplciA9IHRydWU7XG4gICAgICAgICAgICBzdXBlci5kaXNwb3NlKGRpc3Bvc2luZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYnVpbGRTcGVlY2hDb250ZXh0KCkge1xuICAgICAgICBsZXQgYXBwSWQ7XG4gICAgICAgIGxldCByZWdpb247XG4gICAgICAgIGxldCBzdWJzY3JpcHRpb25LZXk7XG4gICAgICAgIGNvbnN0IHJlZkdyYW1tZXJzID0gW107XG4gICAgICAgIGlmICh1bmRlZmluZWQgIT09IHRoaXMucHJpdlVtYnJlbGxhSW50ZW50KSB7XG4gICAgICAgICAgICBhcHBJZCA9IHRoaXMucHJpdlVtYnJlbGxhSW50ZW50Lm1vZGVsSW1wbC5hcHBJZDtcbiAgICAgICAgICAgIHJlZ2lvbiA9IHRoaXMucHJpdlVtYnJlbGxhSW50ZW50Lm1vZGVsSW1wbC5yZWdpb247XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25LZXkgPSB0aGlzLnByaXZVbWJyZWxsYUludGVudC5tb2RlbEltcGwuc3Vic2NyaXB0aW9uS2V5O1xuICAgICAgICB9XG4gICAgICAgIC8vIEJ1aWxkIHRoZSByZWZlcmVuY2UgZ3JhbW1lciBhcnJheS5cbiAgICAgICAgZm9yIChjb25zdCBpbnRlbnRJZCBvZiBPYmplY3Qua2V5cyh0aGlzLnByaXZBZGRlZExtSW50ZW50cykpIHtcbiAgICAgICAgICAgIGNvbnN0IGFkZGVkTG1JbnRlbnQgPSB0aGlzLnByaXZBZGRlZExtSW50ZW50c1tpbnRlbnRJZF07XG4gICAgICAgICAgICAvLyB2YWxpZGF0ZSBhbGwgdGhlIHNhbWUgbW9kZWwsIHJlZ2lvbiwgYW5kIGtleS4uLlxuICAgICAgICAgICAgaWYgKGFwcElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBhcHBJZCA9IGFkZGVkTG1JbnRlbnQubW9kZWxJbXBsLmFwcElkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcElkICE9PSBhZGRlZExtSW50ZW50Lm1vZGVsSW1wbC5hcHBJZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnRlbnRzIG11c3QgYWxsIGJlIGZyb20gdGhlIHNhbWUgTFVJUyBtb2RlbFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVnaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZWdpb24gPSBhZGRlZExtSW50ZW50Lm1vZGVsSW1wbC5yZWdpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocmVnaW9uICE9PSBhZGRlZExtSW50ZW50Lm1vZGVsSW1wbC5yZWdpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50ZW50cyBtdXN0IGFsbCBiZSBmcm9tIHRoZSBzYW1lIExVSVMgbW9kZWwgaW4gYSBzaW5nbGUgcmVnaW9uXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25LZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbktleSA9IGFkZGVkTG1JbnRlbnQubW9kZWxJbXBsLnN1YnNjcmlwdGlvbktleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25LZXkgIT09IGFkZGVkTG1JbnRlbnQubW9kZWxJbXBsLnN1YnNjcmlwdGlvbktleSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnRlbnRzIG11c3QgYWxsIHVzZSB0aGUgc2FtZSBzdWJzY3JpcHRpb24ga2V5XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGdyYW1tZXIgPSBcImx1aXMvXCIgKyBhcHBJZCArIFwiLVBST0RVQ1RJT04jXCIgKyBpbnRlbnRJZDtcbiAgICAgICAgICAgIHJlZkdyYW1tZXJzLnB1c2goZ3JhbW1lcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEludGVudDoge1xuICAgICAgICAgICAgICAgIGlkOiBhcHBJZCxcbiAgICAgICAgICAgICAgICBrZXk6IChzdWJzY3JpcHRpb25LZXkgPT09IHVuZGVmaW5lZCkgPyB0aGlzLnByaXZQcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWRbUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXldKSA6IHN1YnNjcmlwdGlvbktleSxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogXCJMVUlTXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVmZXJlbmNlR3JhbW1hcnM6ICh1bmRlZmluZWQgPT09IHRoaXMucHJpdlVtYnJlbGxhSW50ZW50KSA/IHJlZkdyYW1tZXJzIDogW1wibHVpcy9cIiArIGFwcElkICsgXCItUFJPRFVDVElPTlwiXSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUludGVudFJlY29nbml6ZXIuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IENvbnRyYWN0cyB9IGZyb20gXCIuL0NvbnRyYWN0c1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEga2V5d29yZCByZWNvZ25pdGlvbiBtb2RlbCBmb3IgcmVjb2duaXppbmcgd2hlblxuICogdGhlIHVzZXIgc2F5cyBhIGtleXdvcmQgdG8gaW5pdGlhdGUgZnVydGhlciBzcGVlY2ggcmVjb2duaXRpb24uXG4gKiBAY2xhc3MgS2V5d29yZFJlY29nbml0aW9uTW9kZWxcbiAqL1xuZXhwb3J0IGNsYXNzIEtleXdvcmRSZWNvZ25pdGlvbk1vZGVsIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIGluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByaXZEaXNwb3NlZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEga2V5d29yZCByZWNvZ25pdGlvbiBtb2RlbCB1c2luZyB0aGUgc3BlY2lmaWVkIGZpbGVuYW1lLlxuICAgICAqIEBtZW1iZXIgS2V5d29yZFJlY29nbml0aW9uTW9kZWwuZnJvbUZpbGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVOYW1lIC0gQSBzdHJpbmcgdGhhdCByZXByZXNlbnRzIGZpbGUgbmFtZSBmb3IgdGhlIGtleXdvcmQgcmVjb2duaXRpb24gbW9kZWwuXG4gICAgICogICAgICAgIE5vdGUsIHRoZSBmaWxlIGNhbiBwb2ludCB0byBhIHppcCBmaWxlIGluIHdoaWNoIGNhc2UgdGhlIG1vZGVsXG4gICAgICogICAgICAgIHdpbGwgYmUgZXh0cmFjdGVkIGZyb20gdGhlIHppcC5cbiAgICAgKiBAcmV0dXJucyB7S2V5d29yZFJlY29nbml0aW9uTW9kZWx9IFRoZSBrZXl3b3JkIHJlY29nbml0aW9uIG1vZGVsIGJlaW5nIGNyZWF0ZWQuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21GaWxlKGZpbGVOYW1lKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmRmlsZURvZXNOb3RFeGlzdChmaWxlTmFtZSwgXCJmaWxlTmFtZVwiKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBrZXl3b3JkIHJlY29nbml0aW9uIG1vZGVsIHVzaW5nIHRoZSBzcGVjaWZpZWQgZmlsZW5hbWUuXG4gICAgICogQG1lbWJlciBLZXl3b3JkUmVjb2duaXRpb25Nb2RlbC5mcm9tU3RyZWFtXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIC0gQSBGaWxlIHRoYXQgcmVwcmVzZW50cyBmaWxlIGZvciB0aGUga2V5d29yZCByZWNvZ25pdGlvbiBtb2RlbC5cbiAgICAgKiAgICAgICAgTm90ZSwgdGhlIGZpbGUgY2FuIHBvaW50IHRvIGEgemlwIGZpbGUgaW4gd2hpY2ggY2FzZSB0aGUgbW9kZWwgd2lsbCBiZSBleHRyYWN0ZWQgZnJvbSB0aGUgemlwLlxuICAgICAqIEByZXR1cm5zIHtLZXl3b3JkUmVjb2duaXRpb25Nb2RlbH0gVGhlIGtleXdvcmQgcmVjb2duaXRpb24gbW9kZWwgYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVN0cmVhbShmaWxlKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbChmaWxlLCBcImZpbGVcIik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlIG9mIGFzc29jaWF0ZWQgcmVzb3VyY2VzLlxuICAgICAqIEBtZW1iZXIgS2V5d29yZFJlY29nbml0aW9uTW9kZWwucHJvdG90eXBlLmNsb3NlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5wcml2RGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZEaXNwb3NlZCA9IHRydWU7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1LZXl3b3JkUmVjb2duaXRpb25Nb2RlbC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQ29udHJhY3RzIH0gZnJvbSBcIi4vQ29udHJhY3RzXCI7XG4vKipcbiAqIExhbmd1YWdlIHVuZGVyc3RhbmRpbmcgbW9kZWxcbiAqIEBjbGFzcyBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbFxuICovXG5leHBvcnQgY2xhc3MgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWwge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGFuZ3VhZ2UgdW5kZXJzdGFuZGluZyBtb2RlbCB1c2luZyB0aGUgc3BlY2lmaWVkIGVuZHBvaW50LlxuICAgICAqIEBtZW1iZXIgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWwuZnJvbUVuZHBvaW50XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7VVJMfSB1cmkgLSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGVuZHBvaW50IG9mIHRoZSBsYW5ndWFnZSB1bmRlcnN0YW5kaW5nIG1vZGVsLlxuICAgICAqIEByZXR1cm5zIHtMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbH0gVGhlIGxhbmd1YWdlIHVuZGVyc3RhbmRpbmcgbW9kZWwgYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUVuZHBvaW50KHVyaSkge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGwodXJpLCBcInVyaVwiKTtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHVyaS5ob3N0bmFtZSwgXCJ1cmlcIik7XG4gICAgICAgIGNvbnN0IGxhbmdNb2RlbEltcCA9IG5ldyBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbEltcGwoKTtcbiAgICAgICAgLy8gTmVlZCB0byBleHRyYWN0IHRoZSBhcHAgSUQgZnJvbSB0aGUgVVJMLlxuICAgICAgICAvLyBVUkwgaXMgaW4gdGhlIGZvcm1hdDogaHR0cHM6Ly88cmVnaW9uPi5hcGkuY29nbml0aXZlLm1pY3Jvc29mdC5jb20vbHVpcy92Mi4wL2FwcHMvPEd1aWQ+P3N1YnNjcmlwdGlvbi1rZXk9PGtleT4mdGltZXpvbmVPZmZzZXQ9LTM2MFxuICAgICAgICAvLyBTdGFydCB0ZWFyaW5nIHRoZSBzdHJpbmcgYXBhcnQuXG4gICAgICAgIC8vIHJlZ2lvbiBjYW4gYmUgZXh0cmFjdGVkIGZyb20gdGhlIGhvc3QgbmFtZS5cbiAgICAgICAgY29uc3QgZmlyc3REb3QgPSB1cmkuaG9zdC5pbmRleE9mKFwiLlwiKTtcbiAgICAgICAgaWYgKC0xID09PSBmaXJzdERvdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGRldGVybWluZSByZWdpb24gZnJvbSBlbmRwb2ludFwiKTtcbiAgICAgICAgfVxuICAgICAgICBsYW5nTW9kZWxJbXAucmVnaW9uID0gdXJpLmhvc3Quc3Vic3RyKDAsIGZpcnN0RG90KTtcbiAgICAgICAgLy8gTm93IHRoZSBhcHAgSUQuXG4gICAgICAgIGNvbnN0IGxhc3RTZWdtZW50ID0gdXJpLnBhdGhuYW1lLmxhc3RJbmRleE9mKFwiL1wiKSArIDE7XG4gICAgICAgIGlmICgtMSA9PT0gbGFzdFNlZ21lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgYXBwSWQgZnJvbSBlbmRwb2ludFwiKTtcbiAgICAgICAgfVxuICAgICAgICBsYW5nTW9kZWxJbXAuYXBwSWQgPSB1cmkucGF0aG5hbWUuc3Vic3RyKGxhc3RTZWdtZW50KTtcbiAgICAgICAgLy8gQW5kIGZpbmFsbHkgdGhlIGtleS5cbiAgICAgICAgbGFuZ01vZGVsSW1wLnN1YnNjcmlwdGlvbktleSA9IHVyaS5zZWFyY2hQYXJhbXMuZ2V0KFwic3Vic2NyaXB0aW9uLWtleVwiKTtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gbGFuZ01vZGVsSW1wLnN1YnNjcmlwdGlvbktleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGRldGVybWluZSBzdWJzY3JpcHRpb24ga2V5IGZyb20gZW5kcG9pbnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxhbmdNb2RlbEltcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsYW5ndWFnZSB1bmRlcnN0YW5kaW5nIG1vZGVsIHVzaW5nIHRoZSBhcHBsaWNhdGlvbiBpZCBvZiBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIHNlcnZpY2UuXG4gICAgICogQG1lbWJlciBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbC5mcm9tQXBwSWRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFwcElkIC0gQSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBhcHBsaWNhdGlvbiBpZCBvZiBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIHNlcnZpY2UuXG4gICAgICogQHJldHVybnMge0xhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsfSBUaGUgbGFuZ3VhZ2UgdW5kZXJzdGFuZGluZyBtb2RlbCBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tQXBwSWQoYXBwSWQpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKGFwcElkLCBcImFwcElkXCIpO1xuICAgICAgICBjb25zdCBsYW5nTW9kZWxJbXAgPSBuZXcgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWxJbXBsKCk7XG4gICAgICAgIGxhbmdNb2RlbEltcC5hcHBJZCA9IGFwcElkO1xuICAgICAgICByZXR1cm4gbGFuZ01vZGVsSW1wO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGFuZ3VhZ2UgdW5kZXJzdGFuZGluZyBtb2RlbCB1c2luZyBob3N0bmFtZSwgc3Vic2NyaXB0aW9uIGtleSBhbmQgYXBwbGljYXRpb25cbiAgICAgKiBpZCBvZiBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIHNlcnZpY2UuXG4gICAgICogQG1lbWJlciBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbC5mcm9tU3Vic2NyaXB0aW9uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJzY3JpcHRpb25LZXkgLSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIHN1YnNjcmlwdGlvbiBrZXkgb2ZcbiAgICAgKiAgICAgICAgTGFuZ3VhZ2UgVW5kZXJzdGFuZGluZyBzZXJ2aWNlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBJZCAtIEEgU3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgYXBwbGljYXRpb24gaWQgb2YgTGFuZ3VhZ2VcbiAgICAgKiAgICAgICAgVW5kZXJzdGFuZGluZyBzZXJ2aWNlLlxuICAgICAqIEBwYXJhbSB7TGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWx9IHJlZ2lvbiAtIEEgU3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgcmVnaW9uXG4gICAgICogICAgICAgIG9mIHRoZSBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIHNlcnZpY2UgKHNlZSB0aGUgPGEgaHJlZj1cImh0dHBzOi8vYWthLm1zL2Nzc3BlZWNoL3JlZ2lvblwiPnJlZ2lvbiBwYWdlPC9hPikuXG4gICAgICogQHJldHVybnMge0xhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsfSBUaGUgbGFuZ3VhZ2UgdW5kZXJzdGFuZGluZyBtb2RlbCBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbktleSwgYXBwSWQsIHJlZ2lvbikge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2Uoc3Vic2NyaXB0aW9uS2V5LCBcInN1YnNjcmlwdGlvbktleVwiKTtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKGFwcElkLCBcImFwcElkXCIpO1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UocmVnaW9uLCBcInJlZ2lvblwiKTtcbiAgICAgICAgY29uc3QgbGFuZ01vZGVsSW1wID0gbmV3IExhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsSW1wbCgpO1xuICAgICAgICBsYW5nTW9kZWxJbXAuYXBwSWQgPSBhcHBJZDtcbiAgICAgICAgbGFuZ01vZGVsSW1wLnJlZ2lvbiA9IHJlZ2lvbjtcbiAgICAgICAgbGFuZ01vZGVsSW1wLnN1YnNjcmlwdGlvbktleSA9IHN1YnNjcmlwdGlvbktleTtcbiAgICAgICAgcmV0dXJuIGxhbmdNb2RlbEltcDtcbiAgICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKiBAY2xhc3MgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWxJbXBsXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuZXhwb3J0IGNsYXNzIExhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsSW1wbCBleHRlbmRzIExhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsIHtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWwuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFJlY29nbml0aW9uU3RhdHVzLCBTaW1wbGVTcGVlY2hQaHJhc2UgfSBmcm9tIFwiLi4vLi4vc3JjL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiO1xuaW1wb3J0IHsgTm9NYXRjaFJlYXNvbiB9IGZyb20gXCIuL0V4cG9ydHNcIjtcbi8qKlxuICogQ29udGFpbnMgZGV0YWlsZWQgaW5mb3JtYXRpb24gZm9yIE5vTWF0Y2ggcmVjb2duaXRpb24gcmVzdWx0cy5cbiAqIEBjbGFzcyBOb01hdGNoRGV0YWlsc1xuICovXG5leHBvcnQgY2xhc3MgTm9NYXRjaERldGFpbHMge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtOb01hdGNoUmVhc29ufSByZWFzb24gLSBUaGUgbm8tbWF0Y2ggcmVhc29uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJlYXNvbikge1xuICAgICAgICB0aGlzLnByaXZSZWFzb24gPSByZWFzb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgTm9NYXRjaERldGFpbHMgb2JqZWN0IGZvciB0aGUgTm9NYXRjaCBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdHMuXG4gICAgICogQG1lbWJlciBOb01hdGNoRGV0YWlscy5mcm9tUmVzdWx0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7U3BlZWNoUmVjb2duaXRpb25SZXN1bHQgfCBJbnRlbnRSZWNvZ25pdGlvblJlc3VsdCB8IFRyYW5zbGF0aW9uUmVjb2duaXRpb25SZXN1bHR9XG4gICAgICogICAgICAgIHJlc3VsdCAtIFRoZSByZWNvZ25pdGlvbiByZXN1bHQgdGhhdCB3YXMgbm90IHJlY29nbml6ZWQuXG4gICAgICogQHJldHVybnMge05vTWF0Y2hEZXRhaWxzfSBUaGUgbm8gbWF0Y2ggZGV0YWlscyBvYmplY3QgYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVJlc3VsdChyZXN1bHQpIHtcbiAgICAgICAgY29uc3Qgc2ltcGxlU3BlZWNoID0gU2ltcGxlU3BlZWNoUGhyYXNlLmZyb21KU09OKHJlc3VsdC5qc29uKTtcbiAgICAgICAgbGV0IHJlYXNvbiA9IE5vTWF0Y2hSZWFzb24uTm90UmVjb2duaXplZDtcbiAgICAgICAgc3dpdGNoIChzaW1wbGVTcGVlY2guUmVjb2duaXRpb25TdGF0dXMpIHtcbiAgICAgICAgICAgIGNhc2UgUmVjb2duaXRpb25TdGF0dXMuQmFiYmxlVGltZW91dDpcbiAgICAgICAgICAgICAgICByZWFzb24gPSBOb01hdGNoUmVhc29uLkluaXRpYWxCYWJibGVUaW1lb3V0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBSZWNvZ25pdGlvblN0YXR1cy5Jbml0aWFsU2lsZW5jZVRpbWVvdXQ6XG4gICAgICAgICAgICAgICAgcmVhc29uID0gTm9NYXRjaFJlYXNvbi5Jbml0aWFsU2lsZW5jZVRpbWVvdXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlYXNvbiA9IE5vTWF0Y2hSZWFzb24uTm90UmVjb2duaXplZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE5vTWF0Y2hEZXRhaWxzKHJlYXNvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSByZWFzb24gdGhlIHJlY29nbml0aW9uIHdhcyBjYW5jZWxlZC5cbiAgICAgKiBAbWVtYmVyIE5vTWF0Y2hEZXRhaWxzLnByb3RvdHlwZS5yZWFzb25cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge05vTWF0Y2hSZWFzb259IFNwZWNpZmllcyB0aGUgcmVhc29uIGNhbmNlbGVkLlxuICAgICAqL1xuICAgIGdldCByZWFzb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZWFzb247XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob01hdGNoRGV0YWlscy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBEZWZpbmVzIHRoZSBwb3NzaWJsZSByZWFzb25zIGEgcmVjb2duaXRpb24gcmVzdWx0IG1pZ2h0IG5vdCBiZSByZWNvZ25pemVkLlxuICogQGNsYXNzIE5vTWF0Y2hSZWFzb25cbiAqL1xuZXhwb3J0IHZhciBOb01hdGNoUmVhc29uO1xuKGZ1bmN0aW9uIChOb01hdGNoUmVhc29uKSB7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgc3BlZWNoIHdhcyBkZXRlY3RlZCwgYnV0IG5vdCByZWNvZ25pemVkLlxuICAgICAqIEBtZW1iZXIgTm9NYXRjaFJlYXNvbi5Ob3RSZWNvZ25pemVkXG4gICAgICovXG4gICAgTm9NYXRjaFJlYXNvbltOb01hdGNoUmVhc29uW1wiTm90UmVjb2duaXplZFwiXSA9IDBdID0gXCJOb3RSZWNvZ25pemVkXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHN0YXJ0IG9mIHRoZSBhdWRpbyBzdHJlYW0gY29udGFpbmVkIG9ubHkgc2lsZW5jZSxcbiAgICAgKiBhbmQgdGhlIHNlcnZpY2UgdGltZWQgb3V0IHdhaXRpbmcgZm9yIHNwZWVjaC5cbiAgICAgKiBAbWVtYmVyIE5vTWF0Y2hSZWFzb24uSW5pdGlhbFNpbGVuY2VUaW1lb3V0XG4gICAgICovXG4gICAgTm9NYXRjaFJlYXNvbltOb01hdGNoUmVhc29uW1wiSW5pdGlhbFNpbGVuY2VUaW1lb3V0XCJdID0gMV0gPSBcIkluaXRpYWxTaWxlbmNlVGltZW91dFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IHRoZSBzdGFydCBvZiB0aGUgYXVkaW8gc3RyZWFtIGNvbnRhaW5lZCBvbmx5IG5vaXNlLFxuICAgICAqIGFuZCB0aGUgc2VydmljZSB0aW1lZCBvdXQgd2FpdGluZyBmb3Igc3BlZWNoLlxuICAgICAqIEBtZW1iZXIgTm9NYXRjaFJlYXNvbi5Jbml0aWFsQmFiYmxlVGltZW91dFxuICAgICAqL1xuICAgIE5vTWF0Y2hSZWFzb25bTm9NYXRjaFJlYXNvbltcIkluaXRpYWxCYWJibGVUaW1lb3V0XCJdID0gMl0gPSBcIkluaXRpYWxCYWJibGVUaW1lb3V0XCI7XG59KShOb01hdGNoUmVhc29uIHx8IChOb01hdGNoUmVhc29uID0ge30pKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm9NYXRjaFJlYXNvbi5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBEZWZpbmUgU3BlZWNoIFJlY29nbml6ZXIgb3V0cHV0IGZvcm1hdHMuXG4gKiBAY2xhc3MgT3V0cHV0Rm9ybWF0XG4gKi9cbmV4cG9ydCB2YXIgT3V0cHV0Rm9ybWF0O1xuKGZ1bmN0aW9uIChPdXRwdXRGb3JtYXQpIHtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIE91dHB1dEZvcm1hdC5TaW1wbGVcbiAgICAgKi9cbiAgICBPdXRwdXRGb3JtYXRbT3V0cHV0Rm9ybWF0W1wiU2ltcGxlXCJdID0gMF0gPSBcIlNpbXBsZVwiO1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXIgT3V0cHV0Rm9ybWF0LkRldGFpbGVkXG4gICAgICovXG4gICAgT3V0cHV0Rm9ybWF0W091dHB1dEZvcm1hdFtcIkRldGFpbGVkXCJdID0gMV0gPSBcIkRldGFpbGVkXCI7XG59KShPdXRwdXRGb3JtYXQgfHwgKE91dHB1dEZvcm1hdCA9IHt9KSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU91dHB1dEZvcm1hdC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBBbGxvd3MgYWRkaXRpb25zIG9mIG5ldyBwaHJhc2VzIHRvIGltcHJvdmUgc3BlZWNoIHJlY29nbml0aW9uLlxuICpcbiAqIFBocmFzZXMgYWRkZWQgdG8gdGhlIHJlY29nbml6ZXIgYXJlIGVmZmVjdGl2ZSBhdCB0aGUgc3RhcnQgb2YgdGhlIG5leHQgcmVjb2duaXRpb24sIG9yIHRoZSBuZXh0IHRpbWUgdGhlIFNwZWVjaFNESyBtdXN0IHJlY29ubmVjdFxuICogdG8gdGhlIHNwZWVjaCBzZXJ2aWNlLlxuICovXG5leHBvcnQgY2xhc3MgUGhyYXNlTGlzdEdyYW1tYXIge1xuICAgIGNvbnN0cnVjdG9yKHJlY29nQmFzZSkge1xuICAgICAgICB0aGlzLnByaXZHcmFtbWVyQnVpbGRlciA9IHJlY29nQmFzZS5keW5hbWljR3JhbW1hcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFBocmFzZUxpc3RHcmFtbWFyIGZyb20gYSBnaXZlbiBzcGVlY2ggcmVjb2duaXplci4gV2lsbCBhY2NlcHQgYW55IHJlY29nbml6ZXIgdGhhdCBkZXJpdmVzIGZyb20gQGNsYXNzIFJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHJlY29nbml6ZXIgVGhlIHJlY29nbml6ZXIgdG8gYWRkIHBocmFzZSBsaXN0cyB0by5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVJlY29nbml6ZXIocmVjb2duaXplcikge1xuICAgICAgICBjb25zdCByZWNvQmFzZSA9IHJlY29nbml6ZXIuaW50ZXJuYWxEYXRhO1xuICAgICAgICByZXR1cm4gbmV3IFBocmFzZUxpc3RHcmFtbWFyKHJlY29CYXNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHNpbmdsZSBwaHJhc2UgdG8gdGhlIGN1cnJlbnQgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0gcGhyYXNlIFBocmFzZSB0byBhZGQuXG4gICAgICovXG4gICAgYWRkUGhyYXNlKHBocmFzZSkge1xuICAgICAgICB0aGlzLnByaXZHcmFtbWVyQnVpbGRlci5hZGRQaHJhc2UocGhyYXNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBtdWx0aXBsZSBwaHJhc2VzIHRvIHRoZSBjdXJyZW50IHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHBocmFzZXMgQXJyYXkgb2YgcGhyYXNlcyB0byBhZGQuXG4gICAgICovXG4gICAgYWRkUGhyYXNlcyhwaHJhc2VzKSB7XG4gICAgICAgIHRoaXMucHJpdkdyYW1tZXJCdWlsZGVyLmFkZFBocmFzZShwaHJhc2VzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBwaHJhc2VzIGFkZGVkIHRvIHRoZSBjdXJyZW50IHJlY29nbml6ZXIuXG4gICAgICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMucHJpdkdyYW1tZXJCdWlsZGVyLmNsZWFyUGhyYXNlcygpO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGhyYXNlTGlzdEdyYW1tYXIuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogUHJvZmFuaXR5IG9wdGlvbi5cbiAqIEFkZGVkIGluIHZlcnNpb24gMS43LjAuXG4gKi9cbmV4cG9ydCB2YXIgUHJvZmFuaXR5T3B0aW9uO1xuKGZ1bmN0aW9uIChQcm9mYW5pdHlPcHRpb24pIHtcbiAgICBQcm9mYW5pdHlPcHRpb25bUHJvZmFuaXR5T3B0aW9uW1wiTWFza2VkXCJdID0gMF0gPSBcIk1hc2tlZFwiO1xuICAgIFByb2Zhbml0eU9wdGlvbltQcm9mYW5pdHlPcHRpb25bXCJSZW1vdmVkXCJdID0gMV0gPSBcIlJlbW92ZWRcIjtcbiAgICBQcm9mYW5pdHlPcHRpb25bUHJvZmFuaXR5T3B0aW9uW1wiUmF3XCJdID0gMl0gPSBcIlJhd1wiO1xufSkoUHJvZmFuaXR5T3B0aW9uIHx8IChQcm9mYW5pdHlPcHRpb24gPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qcm9mYW5pdHlPcHRpb24uanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFByb3BlcnR5SWQgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgY29sbGVjdGlvbiBvZiBwcm9wZXJ0aWVzIGFuZCB0aGVpciB2YWx1ZXMuXG4gKiBAY2xhc3MgUHJvcGVydHlDb2xsZWN0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eUNvbGxlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByaXZLZXlzID0gW107XG4gICAgICAgIHRoaXMucHJpdlZhbHVlcyA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBpbiB0eXBlIFN0cmluZy4gVGhlIHBhcmFtZXRlciBtdXN0IGhhdmUgdGhlIHNhbWUgdHlwZSBhcyBTdHJpbmcuXG4gICAgICogQ3VycmVudGx5IG9ubHkgU3RyaW5nLCBpbnQgYW5kIGJvb2wgYXJlIGFsbG93ZWQuXG4gICAgICogSWYgdGhlIG5hbWUgaXMgbm90IGF2YWlsYWJsZSwgdGhlIHNwZWNpZmllZCBkZWZhdWx0VmFsdWUgaXMgcmV0dXJuZWQuXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldFByb3BlcnR5XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRlZiAtIFRoZSBkZWZhdWx0IHZhbHVlIHdoaWNoIGlzIHJldHVybmVkIGlmIHRoZSBwYXJhbWV0ZXJcbiAgICAgKiAgICAgICAgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIGdldFByb3BlcnR5KGtleSwgZGVmKSB7XG4gICAgICAgIGxldCBrZXlUb1VzZTtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGtleVRvVXNlID0ga2V5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAga2V5VG9Vc2UgPSBQcm9wZXJ0eUlkW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0aGlzLnByaXZLZXlzLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2S2V5c1tuXSA9PT0ga2V5VG9Vc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2VmFsdWVzW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWY7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIFN0cmluZyB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyIHNwZWNpZmllZCBieSBuYW1lLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlDb2xsZWN0aW9uLnByb3RvdHlwZS5zZXRQcm9wZXJ0eVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIHBhcmFtZXRlciBuYW1lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIHNldFByb3BlcnR5KGtleSwgdmFsdWUpIHtcbiAgICAgICAgbGV0IGtleVRvVXNlO1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAga2V5VG9Vc2UgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBrZXlUb1VzZSA9IFByb3BlcnR5SWRba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHRoaXMucHJpdktleXMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZLZXlzW25dID09PSBrZXlUb1VzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlZhbHVlc1tuXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZLZXlzLnB1c2goa2V5VG9Vc2UpO1xuICAgICAgICB0aGlzLnByaXZWYWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb25lcyB0aGUgY29sbGVjdGlvbi5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5Q29sbGVjdGlvbi5wcm90b3R5cGUuY2xvbmVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge1Byb3BlcnR5Q29sbGVjdGlvbn0gQSBjb3B5IG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjbG9uZWRNYXAgPSBuZXcgUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdGhpcy5wcml2S2V5cy5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgY2xvbmVkTWFwLnByaXZLZXlzLnB1c2godGhpcy5wcml2S2V5c1tuXSk7XG4gICAgICAgICAgICBjbG9uZWRNYXAucHJpdlZhbHVlcy5wdXNoKHRoaXMucHJpdlZhbHVlc1tuXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lZE1hcDtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb3BlcnR5Q29sbGVjdGlvbi5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBEZWZpbmVzIHNwZWVjaCBwcm9wZXJ0eSBpZHMuXG4gKiBAY2xhc3MgUHJvcGVydHlJZFxuICovXG5leHBvcnQgdmFyIFByb3BlcnR5SWQ7XG4oZnVuY3Rpb24gKFByb3BlcnR5SWQpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgQ29nbml0aXZlIFNlcnZpY2VzIFNwZWVjaCBTZXJ2aWNlIHN1YnNjcmlwdGlvbiBLZXkuIElmIHlvdSBhcmUgdXNpbmcgYW4gaW50ZW50IHJlY29nbml6ZXIsIHlvdSBuZWVkIHRvIHNwZWNpZnlcbiAgICAgKiB0byBzcGVjaWZ5IHRoZSBMVUlTIGVuZHBvaW50IGtleSBmb3IgeW91ciBwYXJ0aWN1bGFyIExVSVMgYXBwLiBVbmRlciBub3JtYWwgY2lyY3Vtc3RhbmNlcywgeW91IHNob3VsZG4ndFxuICAgICAqIGhhdmUgdG8gdXNlIHRoaXMgcHJvcGVydHkgZGlyZWN0bHkuXG4gICAgICogSW5zdGVhZCwgdXNlIFtbU3BlZWNoQ29uZmlnLmZyb21TdWJzY3JpcHRpb25dXS5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fS2V5XG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fS2V5XCJdID0gMF0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0tleVwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UgZW5kcG9pbnQgKHVybCkuIFVuZGVyIG5vcm1hbCBjaXJjdW1zdGFuY2VzLCB5b3Ugc2hvdWxkbid0XG4gICAgICogaGF2ZSB0byB1c2UgdGhpcyBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkLCB1c2UgW1tTcGVlY2hDb25maWcuZnJvbUVuZHBvaW50XV0uXG4gICAgICogTk9URTogVGhpcyBlbmRwb2ludCBpcyBub3QgdGhlIHNhbWUgYXMgdGhlIGVuZHBvaW50IHVzZWQgdG8gb2J0YWluIGFuIGFjY2VzcyB0b2tlbi5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnRcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludFwiXSA9IDFdID0gXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UgcmVnaW9uLiBVbmRlciBub3JtYWwgY2lyY3Vtc3RhbmNlcywgeW91IHNob3VsZG4ndCBoYXZlIHRvXG4gICAgICogdXNlIHRoaXMgcHJvcGVydHkgZGlyZWN0bHkuXG4gICAgICogSW5zdGVhZCwgdXNlIFtbU3BlZWNoQ29uZmlnLmZyb21TdWJzY3JpcHRpb25dXSwgW1tTcGVlY2hDb25maWcuZnJvbUVuZHBvaW50XV0sIFtbU3BlZWNoQ29uZmlnLmZyb21BdXRob3JpemF0aW9uVG9rZW5dXS5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVnaW9uXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVnaW9uXCJdID0gMl0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvblwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UgYXV0aG9yaXphdGlvbiB0b2tlbiAoYWthIGFjY2VzcyB0b2tlbikuIFVuZGVyIG5vcm1hbCBjaXJjdW1zdGFuY2VzLFxuICAgICAqIHlvdSBzaG91bGRuJ3QgaGF2ZSB0byB1c2UgdGhpcyBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkLCB1c2UgW1tTcGVlY2hDb25maWcuZnJvbUF1dGhvcml6YXRpb25Ub2tlbl1dLFxuICAgICAqIFtbU3BlZWNoUmVjb2duaXplci5hdXRob3JpemF0aW9uVG9rZW5dXSwgW1tJbnRlbnRSZWNvZ25pemVyLmF1dGhvcml6YXRpb25Ub2tlbl1dLCBbW1RyYW5zbGF0aW9uUmVjb2duaXplci5hdXRob3JpemF0aW9uVG9rZW5dXS5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVG9rZW5cbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlblwiXSA9IDNdID0gXCJTcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlblwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UgYXV0aG9yaXphdGlvbiB0eXBlLiBDdXJyZW50bHkgdW51c2VkLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9UeXBlXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVHlwZVwiXSA9IDRdID0gXCJTcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9UeXBlXCI7XG4gICAgLyoqXG4gICAgICogVGhlIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZSBlbmRwb2ludCBpZC4gVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsIHlvdSBzaG91bGRuJ3RcbiAgICAgKiBoYXZlIHRvIHVzZSB0aGlzIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQsIHVzZSBbW1NwZWVjaENvbmZpZy5lbmRwb2ludElkXV0uXG4gICAgICogTk9URTogVGhlIGVuZHBvaW50IGlkIGlzIGF2YWlsYWJsZSBpbiB0aGUgU3BlZWNoIFBvcnRhbCwgbGlzdGVkIHVuZGVyIEVuZHBvaW50IERldGFpbHMuXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50SWRcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludElkXCJdID0gNV0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50SWRcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgbGlzdCBvZiBjb21tYSBzZXBhcmF0ZWQgbGFuZ3VhZ2VzIChCQ1AtNDcgZm9ybWF0KSB1c2VkIGFzIHRhcmdldCB0cmFuc2xhdGlvbiBsYW5ndWFnZXMuIFVuZGVyIG5vcm1hbCBjaXJjdW1zdGFuY2VzLFxuICAgICAqIHlvdSBzaG91bGRuJ3QgaGF2ZSB0byB1c2UgdGhpcyBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkIHVzZSBbW1NwZWVjaFRyYW5zbGF0aW9uQ29uZmlnLmFkZFRhcmdldExhbmd1YWdlXV0sXG4gICAgICogW1tTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZy50YXJnZXRMYW5ndWFnZXNdXSwgW1tUcmFuc2xhdGlvblJlY29nbml6ZXIudGFyZ2V0TGFuZ3VhZ2VzXV0uXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVG9MYW5ndWFnZXNcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblRvTGFuZ3VhZ2VzXCJdID0gNl0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVG9MYW5ndWFnZXNcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgQ29nbml0aXZlIFNlcnZpY2UgVGV4dCB0byBTcGVlY2ggU2VydmljZSBWb2ljZS4gVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsIHlvdSBzaG91bGRuJ3QgaGF2ZSB0byB1c2UgdGhpc1xuICAgICAqIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQsIHVzZSBbW1NwZWVjaFRyYW5zbGF0aW9uQ29uZmlnLnZvaWNlTmFtZV1dLlxuICAgICAqIE5PVEU6IFZhbGlkIHZvaWNlIG5hbWVzIGNhbiBiZSBmb3VuZCA8YSBocmVmPVwiaHR0cHM6Ly9ha2EubXMvY3NzcGVlY2gvdm9pY2VuYW1lc1wiPmhlcmU8L2E+LlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblZvaWNlXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Wb2ljZVwiXSA9IDddID0gXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblZvaWNlXCI7XG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRpb24gZmVhdHVyZXMuXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uRmVhdHVyZXNcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvbkZlYXR1cmVzXCJdID0gOF0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uRmVhdHVyZXNcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgTGFuZ3VhZ2UgVW5kZXJzdGFuZGluZyBTZXJ2aWNlIFJlZ2lvbi4gVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsIHlvdSBzaG91bGRuJ3QgaGF2ZSB0byB1c2UgdGhpcyBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkLCB1c2UgW1tMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbF1dLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9JbnRlbnRSZWdpb25cbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9JbnRlbnRSZWdpb25cIl0gPSA5XSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fSW50ZW50UmVnaW9uXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGhvc3QgbmFtZSBvZiB0aGUgcHJveHkgc2VydmVyIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgQ29nbml0aXZlIFNlcnZpY2VzIFNwZWVjaCBTZXJ2aWNlLiBPbmx5IHJlbGV2YW50IGluIE5vZGUuanMgZW52aXJvbm1lbnRzLlxuICAgICAqIFlvdSBzaG91bGRuJ3QgaGF2ZSB0byB1c2UgdGhpcyBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkIHVzZSA8c2VlIGNyZWY9XCJTcGVlY2hDb25maWcuU2V0UHJveHkoc3RyaW5nLGludCxzdHJpbmcsc3RyaW5nKVwiLz4uXG4gICAgICogQWRkZWQgaW4gdmVyc2lvbiAxLjQuMC5cbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eUhvc3ROYW1lXCJdID0gMTBdID0gXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eUhvc3ROYW1lXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHBvcnQgb2YgdGhlIHByb3h5IHNlcnZlciB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZS4gT25seSByZWxldmFudCBpbiBOb2RlLmpzIGVudmlyb25tZW50cy5cbiAgICAgKiBZb3Ugc2hvdWxkbid0IGhhdmUgdG8gdXNlIHRoaXMgcHJvcGVydHkgZGlyZWN0bHkuXG4gICAgICogSW5zdGVhZCB1c2UgPHNlZSBjcmVmPVwiU3BlZWNoQ29uZmlnLlNldFByb3h5KHN0cmluZyxpbnQsc3RyaW5nLHN0cmluZylcIi8+LlxuICAgICAqIEFkZGVkIGluIHZlcnNpb24gMS40LjAuXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlQb3J0XCJdID0gMTFdID0gXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBvcnRcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgdXNlciBuYW1lIG9mIHRoZSBwcm94eSBzZXJ2ZXIgdXNlZCB0byBjb25uZWN0IHRvIHRoZSBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UuIE9ubHkgcmVsZXZhbnQgaW4gTm9kZS5qcyBlbnZpcm9ubWVudHMuXG4gICAgICogWW91IHNob3VsZG4ndCBoYXZlIHRvIHVzZSB0aGlzIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQgdXNlIDxzZWUgY3JlZj1cIlNwZWVjaENvbmZpZy5TZXRQcm94eShzdHJpbmcsaW50LHN0cmluZyxzdHJpbmcpXCIvPi5cbiAgICAgKiBBZGRlZCBpbiB2ZXJzaW9uIDEuNC4wLlxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5VXNlck5hbWVcIl0gPSAxMl0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5VXNlck5hbWVcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgcGFzc3dvcmQgb2YgdGhlIHByb3h5IHNlcnZlciB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZS4gT25seSByZWxldmFudCBpbiBOb2RlLmpzIGVudmlyb25tZW50cy5cbiAgICAgKiBZb3Ugc2hvdWxkbid0IGhhdmUgdG8gdXNlIHRoaXMgcHJvcGVydHkgZGlyZWN0bHkuXG4gICAgICogSW5zdGVhZCB1c2UgPHNlZSBjcmVmPVwiU3BlZWNoQ29uZmlnLlNldFByb3h5KHN0cmluZyxpbnQsc3RyaW5nLHN0cmluZylcIi8+LlxuICAgICAqIEFkZGVkIGluIHZlcnNpb24gMS40LjAuXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlQYXNzd29yZFwiXSA9IDEzXSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlQYXNzd29yZFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UgcmVjb2duaXRpb24gTW9kZS4gQ2FuIGJlIFwiSU5URVJBQ1RJVkVcIiwgXCJDT05WRVJTQVRJT05cIiwgXCJESUNUQVRJT05cIi5cbiAgICAgKiBUaGlzIHByb3BlcnR5IGlzIGludGVuZGVkIHRvIGJlIHJlYWQtb25seS4gVGhlIFNESyBpcyB1c2luZyBpdCBpbnRlcm5hbGx5LlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTW9kZVxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29Nb2RlXCJdID0gMTRdID0gXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTW9kZVwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBzcG9rZW4gbGFuZ3VhZ2UgdG8gYmUgcmVjb2duaXplZCAoaW4gQkNQLTQ3IGZvcm1hdCkuIFVuZGVyIG5vcm1hbCBjaXJjdW1zdGFuY2VzLCB5b3Ugc2hvdWxkbid0IGhhdmUgdG8gdXNlIHRoaXMgcHJvcGVydHlcbiAgICAgKiBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkLCB1c2UgW1tTcGVlY2hDb25maWcuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZV1dLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2VcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2VcIl0gPSAxNV0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZVwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBzZXNzaW9uIGlkLiBUaGlzIGlkIGlzIGEgdW5pdmVyc2FsbHkgdW5pcXVlIGlkZW50aWZpZXIgKGFrYSBVVUlEKSByZXByZXNlbnRpbmcgYSBzcGVjaWZpYyBiaW5kaW5nIG9mIGFuIGF1ZGlvIGlucHV0IHN0cmVhbVxuICAgICAqIGFuZCB0aGUgdW5kZXJseWluZyBzcGVlY2ggcmVjb2duaXRpb24gaW5zdGFuY2UgdG8gd2hpY2ggaXQgaXMgYm91bmQuIFVuZGVyIG5vcm1hbCBjaXJjdW1zdGFuY2VzLCB5b3Ugc2hvdWxkbid0IGhhdmUgdG8gdXNlIHRoaXNcbiAgICAgKiBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkIHVzZSBbW1Nlc3Npb25FdmVudEFyZ3Muc2Vzc2lvbklkXV0uXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaF9TZXNzaW9uSWRcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hfU2Vzc2lvbklkXCJdID0gMTZdID0gXCJTcGVlY2hfU2Vzc2lvbklkXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHJlcXVlc3RlZCBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UgcmVzcG9uc2Ugb3V0cHV0IGZvcm1hdCAoc2ltcGxlIG9yIGRldGFpbGVkKS4gVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsIHlvdSBzaG91bGRuJ3QgaGF2ZVxuICAgICAqIHRvIHVzZSB0aGlzIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQgdXNlIFtbU3BlZWNoQ29uZmlnLm91dHB1dEZvcm1hdF1dLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUmVxdWVzdERldGFpbGVkUmVzdWx0VHJ1ZUZhbHNlXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZVJlc3BvbnNlX1JlcXVlc3REZXRhaWxlZFJlc3VsdFRydWVGYWxzZVwiXSA9IDE3XSA9IFwiU3BlZWNoU2VydmljZVJlc3BvbnNlX1JlcXVlc3REZXRhaWxlZFJlc3VsdFRydWVGYWxzZVwiO1xuICAgIC8qKlxuICAgICAqIFRoZSByZXF1ZXN0ZWQgQ29nbml0aXZlIFNlcnZpY2VzIFNwZWVjaCBTZXJ2aWNlIHJlc3BvbnNlIG91dHB1dCBwcm9mYW5pdHkgbGV2ZWwuIEN1cnJlbnRseSB1bnVzZWQuXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VSZXNwb25zZV9SZXF1ZXN0UHJvZmFuaXR5RmlsdGVyVHJ1ZUZhbHNlXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZVJlc3BvbnNlX1JlcXVlc3RQcm9mYW5pdHlGaWx0ZXJUcnVlRmFsc2VcIl0gPSAxOF0gPSBcIlNwZWVjaFNlcnZpY2VSZXNwb25zZV9SZXF1ZXN0UHJvZmFuaXR5RmlsdGVyVHJ1ZUZhbHNlXCI7XG4gICAgLyoqXG4gICAgICogVGhlIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZSByZXNwb25zZSBvdXRwdXQgKGluIEpTT04gZm9ybWF0KS4gVGhpcyBwcm9wZXJ0eSBpcyBhdmFpbGFibGUgb24gcmVjb2duaXRpb24gcmVzdWx0IG9iamVjdHMgb25seS5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX0pzb25SZXN1bHRcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfSnNvblJlc3VsdFwiXSA9IDE5XSA9IFwiU3BlZWNoU2VydmljZVJlc3BvbnNlX0pzb25SZXN1bHRcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgQ29nbml0aXZlIFNlcnZpY2VzIFNwZWVjaCBTZXJ2aWNlIGVycm9yIGRldGFpbHMgKGluIEpTT04gZm9ybWF0KS4gVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsIHlvdSBzaG91bGRuJ3QgaGF2ZSB0b1xuICAgICAqIHVzZSB0aGlzIHByb3BlcnR5IGRpcmVjdGx5LiBJbnN0ZWFkIHVzZSBbW0NhbmNlbGxhdGlvbkRldGFpbHMuZXJyb3JEZXRhaWxzXV0uXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VSZXNwb25zZV9Kc29uRXJyb3JEZXRhaWxzXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZVJlc3BvbnNlX0pzb25FcnJvckRldGFpbHNcIl0gPSAyMF0gPSBcIlNwZWVjaFNlcnZpY2VSZXNwb25zZV9Kc29uRXJyb3JEZXRhaWxzXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGNhbmNlbGxhdGlvbiByZWFzb24uIEN1cnJlbnRseSB1bnVzZWQuXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLkNhbmNlbGxhdGlvbkRldGFpbHNfUmVhc29uXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiQ2FuY2VsbGF0aW9uRGV0YWlsc19SZWFzb25cIl0gPSAyMV0gPSBcIkNhbmNlbGxhdGlvbkRldGFpbHNfUmVhc29uXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGNhbmNlbGxhdGlvbiB0ZXh0LiBDdXJyZW50bHkgdW51c2VkLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5DYW5jZWxsYXRpb25EZXRhaWxzX1JlYXNvblRleHRcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJDYW5jZWxsYXRpb25EZXRhaWxzX1JlYXNvblRleHRcIl0gPSAyMl0gPSBcIkNhbmNlbGxhdGlvbkRldGFpbHNfUmVhc29uVGV4dFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBDYW5jZWxsYXRpb24gZGV0YWlsZWQgdGV4dC4gQ3VycmVudGx5IHVudXNlZC5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuQ2FuY2VsbGF0aW9uRGV0YWlsc19SZWFzb25EZXRhaWxlZFRleHRcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJDYW5jZWxsYXRpb25EZXRhaWxzX1JlYXNvbkRldGFpbGVkVGV4dFwiXSA9IDIzXSA9IFwiQ2FuY2VsbGF0aW9uRGV0YWlsc19SZWFzb25EZXRhaWxlZFRleHRcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgTGFuZ3VhZ2UgVW5kZXJzdGFuZGluZyBTZXJ2aWNlIHJlc3BvbnNlIG91dHB1dCAoaW4gSlNPTiBmb3JtYXQpLiBBdmFpbGFibGUgdmlhIFtbSW50ZW50UmVjb2duaXRpb25SZXN1bHRdXVxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5MYW5ndWFnZVVuZGVyc3RhbmRpbmdTZXJ2aWNlUmVzcG9uc2VfSnNvblJlc3VsdFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIkxhbmd1YWdlVW5kZXJzdGFuZGluZ1NlcnZpY2VSZXNwb25zZV9Kc29uUmVzdWx0XCJdID0gMjRdID0gXCJMYW5ndWFnZVVuZGVyc3RhbmRpbmdTZXJ2aWNlUmVzcG9uc2VfSnNvblJlc3VsdFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkwgc3RyaW5nIGJ1aWx0IGZyb20gc3BlZWNoIGNvbmZpZ3VyYXRpb24uXG4gICAgICogVGhpcyBwcm9wZXJ0eSBpcyBpbnRlbmRlZCB0byBiZSByZWFkLW9ubHkuIFRoZSBTREsgaXMgdXNpbmcgaXQgaW50ZXJuYWxseS5cbiAgICAgKiBOT1RFOiBBZGRlZCBpbiB2ZXJzaW9uIDEuNy4wLlxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1VybFwiXSA9IDI1XSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVXJsXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGluaXRpYWwgc2lsZW5jZSB0aW1lb3V0IHZhbHVlIChpbiBtaWxsaXNlY29uZHMpIHVzZWQgYnkgdGhlIHNlcnZpY2UuXG4gICAgICogQWRkZWQgaW4gdmVyc2lvbiAxLjcuMFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0luaXRpYWxTaWxlbmNlVGltZW91dE1zXCJdID0gMjZdID0gXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Jbml0aWFsU2lsZW5jZVRpbWVvdXRNc1wiO1xuICAgIC8qKlxuICAgICAqIFRoZSBlbmQgc2lsZW5jZSB0aW1lb3V0IHZhbHVlIChpbiBtaWxsaXNlY29uZHMpIHVzZWQgYnkgdGhlIHNlcnZpY2UuXG4gICAgICogQWRkZWQgaW4gdmVyc2lvbiAxLjcuMFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZFNpbGVuY2VUaW1lb3V0TXNcIl0gPSAyN10gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZFNpbGVuY2VUaW1lb3V0TXNcIjtcbiAgICAvKipcbiAgICAgKiBBIGJvb2xlYW4gdmFsdWUgc3BlY2lmeWluZyB3aGV0aGVyIGF1ZGlvIGxvZ2dpbmcgaXMgZW5hYmxlZCBpbiB0aGUgc2VydmljZSBvciBub3QuXG4gICAgICogQWRkZWQgaW4gdmVyc2lvbiAxLjcuMFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuYWJsZUF1ZGlvTG9nZ2luZ1wiXSA9IDI4XSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5hYmxlQXVkaW9Mb2dnaW5nXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHJlcXVlc3RlZCBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UgcmVzcG9uc2Ugb3V0cHV0IHByb2Zhbml0eSBzZXR0aW5nLlxuICAgICAqIEFsbG93ZWQgdmFsdWVzIGFyZSBcIm1hc2tlZFwiLCBcInJlbW92ZWRcIiwgYW5kIFwicmF3XCIuXG4gICAgICogQWRkZWQgaW4gdmVyc2lvbiAxLjcuMC5cbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUHJvZmFuaXR5T3B0aW9uXCJdID0gMjldID0gXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUHJvZmFuaXR5T3B0aW9uXCI7XG4gICAgLyoqXG4gICAgICogQSBzdHJpbmcgdmFsdWUgc3BlY2lmeWluZyB3aGljaCBwb3N0IHByb2Nlc3Npbmcgb3B0aW9uIHNob3VsZCBiZSB1c2VkIGJ5IHNlcnZpY2UuXG4gICAgICogQWxsb3dlZCB2YWx1ZXMgYXJlIFwiVHJ1ZVRleHRcIi5cbiAgICAgKiBBZGRlZCBpbiB2ZXJzaW9uIDEuNy4wXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZVJlc3BvbnNlX1Bvc3RQcm9jZXNzaW5nT3B0aW9uXCJdID0gMzBdID0gXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUG9zdFByb2Nlc3NpbmdPcHRpb25cIjtcbiAgICAvKipcbiAgICAgKiAgQSBib29sZWFuIHZhbHVlIHNwZWNpZnlpbmcgd2hldGhlciB0byBpbmNsdWRlIHdvcmQtbGV2ZWwgdGltZXN0YW1wcyBpbiB0aGUgcmVzcG9uc2UgcmVzdWx0LlxuICAgICAqIEFkZGVkIGluIHZlcnNpb24gMS43LjBcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUmVxdWVzdFdvcmRMZXZlbFRpbWVzdGFtcHNcIl0gPSAzMV0gPSBcIlNwZWVjaFNlcnZpY2VSZXNwb25zZV9SZXF1ZXN0V29yZExldmVsVGltZXN0YW1wc1wiO1xuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgdGltZXMgYSB3b3JkIGhhcyB0byBiZSBpbiBwYXJ0aWFsIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQuXG4gICAgICogQWRkZWQgaW4gdmVyc2lvbiAxLjcuMFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VSZXNwb25zZV9TdGFibGVQYXJ0aWFsUmVzdWx0VGhyZXNob2xkXCJdID0gMzJdID0gXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfU3RhYmxlUGFydGlhbFJlc3VsdFRocmVzaG9sZFwiO1xuICAgIC8qKlxuICAgICAqIEEgc3RyaW5nIHZhbHVlIHNwZWNpZnlpbmcgdGhlIG91dHB1dCBmb3JtYXQgb3B0aW9uIGluIHRoZSByZXNwb25zZSByZXN1bHQuIEludGVybmFsIHVzZSBvbmx5LlxuICAgICAqIEFkZGVkIGluIHZlcnNpb24gMS43LjAuXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZVJlc3BvbnNlX091dHB1dEZvcm1hdE9wdGlvblwiXSA9IDMzXSA9IFwiU3BlZWNoU2VydmljZVJlc3BvbnNlX091dHB1dEZvcm1hdE9wdGlvblwiO1xuICAgIC8qKlxuICAgICAqIEEgYm9vbGVhbiB2YWx1ZSB0byByZXF1ZXN0IGZvciBzdGFiaWxpemluZyB0cmFuc2xhdGlvbiBwYXJ0aWFsIHJlc3VsdHMgYnkgb21pdHRpbmcgd29yZHMgaW4gdGhlIGVuZC5cbiAgICAgKiBBZGRlZCBpbiB2ZXJzaW9uIDEuNy4wLlxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VSZXNwb25zZV9UcmFuc2xhdGlvblJlcXVlc3RTdGFibGVQYXJ0aWFsUmVzdWx0XCJdID0gMzRdID0gXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfVHJhbnNsYXRpb25SZXF1ZXN0U3RhYmxlUGFydGlhbFJlc3VsdFwiO1xuICAgIC8qKlxuICAgICAqIElkZW50aWZpZXIgdXNlZCB0byBjb25uZWN0IHRvIHRoZSBiYWNrZW5kIHNlcnZpY2UuXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLkNvbnZlcnNhdGlvbl9BcHBsaWNhdGlvbklkXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiQ29udmVyc2F0aW9uX0FwcGxpY2F0aW9uSWRcIl0gPSAzNV0gPSBcIkNvbnZlcnNhdGlvbl9BcHBsaWNhdGlvbklkXCI7XG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBkaWFsb2cgYmFja2VuZCB0byBjb25uZWN0IHRvLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5Db252ZXJzYXRpb25fRGlhbG9nVHlwZVxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIkNvbnZlcnNhdGlvbl9EaWFsb2dUeXBlXCJdID0gMzZdID0gXCJDb252ZXJzYXRpb25fRGlhbG9nVHlwZVwiO1xuICAgIC8qKlxuICAgICAqIFNpbGVuY2UgdGltZW91dCBmb3IgbGlzdGVuaW5nXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLkNvbnZlcnNhdGlvbl9Jbml0aWFsX1NpbGVuY2VfVGltZW91dFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIkNvbnZlcnNhdGlvbl9Jbml0aWFsX1NpbGVuY2VfVGltZW91dFwiXSA9IDM3XSA9IFwiQ29udmVyc2F0aW9uX0luaXRpYWxfU2lsZW5jZV9UaW1lb3V0XCI7XG4gICAgLyoqXG4gICAgICogRnJvbSBJZCB0byBhZGQgdG8gc3BlZWNoIHJlY29nbml0aW9uIGFjdGl2aXRpZXMuXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLkNvbnZlcnNhdGlvbl9Gcm9tX0lkXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiQ29udmVyc2F0aW9uX0Zyb21fSWRcIl0gPSAzOF0gPSBcIkNvbnZlcnNhdGlvbl9Gcm9tX0lkXCI7XG59KShQcm9wZXJ0eUlkIHx8IChQcm9wZXJ0eUlkID0ge30pKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJvcGVydHlJZC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgU2Vzc2lvbkV2ZW50QXJncyB9IGZyb20gXCIuL0V4cG9ydHNcIjtcbi8qKlxuICogRGVmaW5lcyBwYXlsb2FkIGZvciBzZXNzaW9uIGV2ZW50cyBsaWtlIFNwZWVjaCBTdGFydC9FbmQgRGV0ZWN0ZWRcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgUmVjb2duaXRpb25FdmVudEFyZ3MgZXh0ZW5kcyBTZXNzaW9uRXZlbnRBcmdzIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZXNzaW9uSWQgLSBUaGUgc2Vzc2lvbiBpZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvZmZzZXQsIHNlc3Npb25JZCkge1xuICAgICAgICBzdXBlcihzZXNzaW9uSWQpO1xuICAgICAgICB0aGlzLnByaXZPZmZzZXQgPSBvZmZzZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgdGhlIG1lc3NhZ2Ugb2Zmc2V0XG4gICAgICogQG1lbWJlciBSZWNvZ25pdGlvbkV2ZW50QXJncy5wcm90b3R5cGUub2Zmc2V0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldCBvZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZPZmZzZXQ7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWNvZ25pdGlvbkV2ZW50QXJncy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBEZWZpbmVzIHJlc3VsdCBvZiBzcGVlY2ggcmVjb2duaXRpb24uXG4gKiBAY2xhc3MgUmVjb2duaXRpb25SZXN1bHRcbiAqL1xuZXhwb3J0IGNsYXNzIFJlY29nbml0aW9uUmVzdWx0IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXN1bHRJZCAtIFRoZSByZXN1bHQgaWQuXG4gICAgICogQHBhcmFtIHtSZXN1bHRSZWFzb259IHJlYXNvbiAtIFRoZSByZWFzb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUaGUgcmVjb2duaXplZCB0ZXh0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBkdXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldCBpbnRvIHRoZSBzdHJlYW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yRGV0YWlscyAtIEVycm9yIGRldGFpbHMsIGlmIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIC0gQWRkaXRpb25hbCBKc29uLCBpZiBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5Q29sbGVjdGlvbn0gcHJvcGVydGllcyAtIEFkZGl0aW9uYWwgcHJvcGVydGllcywgaWYgcHJvdmlkZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocmVzdWx0SWQsIHJlYXNvbiwgdGV4dCwgZHVyYXRpb24sIG9mZnNldCwgZXJyb3JEZXRhaWxzLCBqc29uLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMucHJpdlJlc3VsdElkID0gcmVzdWx0SWQ7XG4gICAgICAgIHRoaXMucHJpdlJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgdGhpcy5wcml2VGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMucHJpdkR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIHRoaXMucHJpdk9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy5wcml2RXJyb3JEZXRhaWxzID0gZXJyb3JEZXRhaWxzO1xuICAgICAgICB0aGlzLnByaXZKc29uID0ganNvbjtcbiAgICAgICAgdGhpcy5wcml2UHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgcmVzdWx0IGlkZW50aWZpZXIuXG4gICAgICogQG1lbWJlciBSZWNvZ25pdGlvblJlc3VsdC5wcm90b3R5cGUucmVzdWx0SWRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge3N0cmluZ30gU3BlY2lmaWVzIHRoZSByZXN1bHQgaWRlbnRpZmllci5cbiAgICAgKi9cbiAgICBnZXQgcmVzdWx0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZXN1bHRJZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHN0YXR1cyBvZiB0aGUgcmVzdWx0LlxuICAgICAqIEBtZW1iZXIgUmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLnJlYXNvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7UmVzdWx0UmVhc29ufSBTcGVjaWZpZXMgc3RhdHVzIG9mIHRoZSByZXN1bHQuXG4gICAgICovXG4gICAgZ2V0IHJlYXNvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlYXNvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJlc2VudHMgdGhlIHJlY29nbml6ZWQgdGV4dCBpbiB0aGUgcmVzdWx0LlxuICAgICAqIEBtZW1iZXIgUmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLnRleHRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUHJlc2VudHMgdGhlIHJlY29nbml6ZWQgdGV4dCBpbiB0aGUgcmVzdWx0LlxuICAgICAqL1xuICAgIGdldCB0ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2VGV4dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRHVyYXRpb24gb2YgcmVjb2duaXplZCBzcGVlY2ggaW4gMTAwIG5hbm8gc2Vjb25kIGluY2VtZW50cy5cbiAgICAgKiBAbWVtYmVyIFJlY29nbml0aW9uUmVzdWx0LnByb3RvdHlwZS5kdXJhdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBEdXJhdGlvbiBvZiByZWNvZ25pemVkIHNwZWVjaCBpbiAxMDAgbmFubyBzZWNvbmQgaW5jZW1lbnRzLlxuICAgICAqL1xuICAgIGdldCBkdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkR1cmF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPZmZzZXQgb2YgcmVjb2duaXplZCBzcGVlY2ggaW4gMTAwIG5hbm8gc2Vjb25kIGluY2VtZW50cy5cbiAgICAgKiBAbWVtYmVyIFJlY29nbml0aW9uUmVzdWx0LnByb3RvdHlwZS5vZmZzZXRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge251bWJlcn0gT2Zmc2V0IG9mIHJlY29nbml6ZWQgc3BlZWNoIGluIDEwMCBuYW5vIHNlY29uZCBpbmNlbWVudHMuXG4gICAgICovXG4gICAgZ2V0IG9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdk9mZnNldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW4gY2FzZSBvZiBhbiB1bnN1Y2Nlc3NmdWwgcmVjb2duaXRpb24sIHByb3ZpZGVzIGRldGFpbHMgb2YgdGhlIG9jY3VycmVkIGVycm9yLlxuICAgICAqIEBtZW1iZXIgUmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLmVycm9yRGV0YWlsc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBhIGJyaWVmIGRlc2NyaXB0aW9uIG9mIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGdldCBlcnJvckRldGFpbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZFcnJvckRldGFpbHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgc3RyaW5nIGNvbnRhaW5pbmcgSnNvbiBzZXJpYWxpemVkIHJlY29nbml0aW9uIHJlc3VsdCBhcyBpdCB3YXMgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmljZS5cbiAgICAgKiBAbWVtYmVyIFJlY29nbml0aW9uUmVzdWx0LnByb3RvdHlwZS5qc29uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBKc29uIHNlcmlhbGl6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlc3VsdC5cbiAgICAgKi9cbiAgICBnZXQganNvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkpzb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgc2V0IG9mIHByb3BlcnRpZXMgZXhwb3NlZCBpbiB0aGUgcmVzdWx0LlxuICAgICAqIEBtZW1iZXIgUmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLnByb3BlcnRpZXNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge1Byb3BlcnR5Q29sbGVjdGlvbn0gVGhlIHNldCBvZiBwcm9wZXJ0aWVzIGV4cG9zZWQgaW4gdGhlIHJlc3VsdC5cbiAgICAgKi9cbiAgICBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb3BlcnRpZXM7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWNvZ25pdGlvblJlc3VsdC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQ29nbml0aXZlU3Vic2NyaXB0aW9uS2V5QXV0aGVudGljYXRpb24sIENvZ25pdGl2ZVRva2VuQXV0aGVudGljYXRpb24sIENvbnRleHQsIE9TLCBTZXJ2aWNlUmVjb2duaXplckJhc2UsIFNwZWVjaFNlcnZpY2VDb25maWcsIH0gZnJvbSBcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiO1xuaW1wb3J0IHsgUHJvbWlzZUhlbHBlciB9IGZyb20gXCIuLi9jb21tb24vRXhwb3J0c1wiO1xuaW1wb3J0IHsgQ29udHJhY3RzIH0gZnJvbSBcIi4vQ29udHJhY3RzXCI7XG5pbXBvcnQgeyBBdWRpb0NvbmZpZywgUHJvcGVydHlJZCwgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vKipcbiAqIERlZmluZXMgdGhlIGJhc2UgY2xhc3MgUmVjb2duaXplciB3aGljaCBtYWlubHkgY29udGFpbnMgY29tbW9uIGV2ZW50IGhhbmRsZXJzLlxuICogQGNsYXNzIFJlY29nbml6ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFJlY29nbml6ZXIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIGEgUmVjb2duaXplclxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXVkaW9Db25maWd9IGF1ZGlvSW5wdXQgLSBBbiBvcHRpb25hbCBhdWRpbyBpbnB1dCBzdHJlYW0gYXNzb2NpYXRlZCB3aXRoIHRoZSByZWNvZ25pemVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXVkaW9Db25maWcsIHByb3BlcnRpZXMsIGNvbm5lY3Rpb25GYWN0b3J5KSB7XG4gICAgICAgIHRoaXMuYXVkaW9Db25maWcgPSAoYXVkaW9Db25maWcgIT09IHVuZGVmaW5lZCkgPyBhdWRpb0NvbmZpZyA6IEF1ZGlvQ29uZmlnLmZyb21EZWZhdWx0TWljcm9waG9uZUlucHV0KCk7XG4gICAgICAgIHRoaXMucHJpdkRpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdlByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmNsb25lKCk7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25GYWN0b3J5ID0gY29ubmVjdGlvbkZhY3Rvcnk7XG4gICAgICAgIHRoaXMuaW1wbENvbW1vblJlY29nbml6ZXJTZXR1cCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlIG9mIGFzc29jaWF0ZWQgcmVzb3VyY2VzLlxuICAgICAqIEBtZW1iZXIgUmVjb2duaXplci5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWQpO1xuICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBJbnRlcm5hbFxuICAgICAqIEludGVybmFsIGRhdGEgbWVtYmVyIHRvIHN1cHBvcnQgZnJvbVJlY29nbml6ZXIqIHBhdHRlcm4gbWV0aG9kcyBvbiBvdGhlciBjbGFzc2VzLlxuICAgICAqIERvIG5vdCB1c2UgZXh0ZXJuYWxseSwgb2JqZWN0IHJldHVybmVkIHdpbGwgY2hhbmdlIHdpdGhvdXQgd2FybmluZyBvciBub3RpY2UuXG4gICAgICovXG4gICAgZ2V0IGludGVybmFsRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlY287XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHBlcmZvcm1zIGNsZWFudXAgb2YgcmVzb3VyY2VzLlxuICAgICAqIFRoZSBCb29sZWFuIHBhcmFtZXRlciBkaXNwb3NpbmcgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIG1ldGhvZCBpcyBjYWxsZWRcbiAgICAgKiBmcm9tIERpc3Bvc2UgKGlmIGRpc3Bvc2luZyBpcyB0cnVlKSBvciBmcm9tIHRoZSBmaW5hbGl6ZXIgKGlmIGRpc3Bvc2luZyBpcyBmYWxzZSkuXG4gICAgICogRGVyaXZlZCBjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBkaXNwb3NlIHJlc291cmNlIGlmIG5lZWRlZC5cbiAgICAgKiBAbWVtYmVyIFJlY29nbml6ZXIucHJvdG90eXBlLmRpc3Bvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtib29sZWFufSBkaXNwb3NpbmcgLSBGbGFnIHRvIHJlcXVlc3QgZGlzcG9zYWwuXG4gICAgICovXG4gICAgZGlzcG9zZShkaXNwb3NpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMucHJpdkRpc3Bvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc3Bvc2luZykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpdlJlY28pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWNvLmF1ZGlvU291cmNlLnR1cm5PZmYoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWNvLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZEaXNwb3NlZCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHRlbGVtZXRyeSBzZXR0aW5nLlxuICAgICAqIEBtZW1iZXIgUmVjb2duaXplci5wcm90b3R5cGUudGVsZW1ldHJ5RW5hYmxlZFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSB0ZWxlbWV0cnkgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgdGVsZW1ldHJ5RW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIFNlcnZpY2VSZWNvZ25pemVyQmFzZS50ZWxlbWV0cnlEYXRhRW5hYmxlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgZ2xvYmFsbHkgZW5hYmxlcyBvciBkaXNhYmxlcyB0ZWxlbWV0cnkuXG4gICAgICogQG1lbWJlciBSZWNvZ25pemVyLnByb3RvdHlwZS5lbmFibGVUZWxlbWV0cnlcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIGVuYWJsZWQgLSBHbG9iYWwgc2V0dGluZyBmb3IgdGVsZW1ldHJ5IGNvbGxlY3Rpb24uXG4gICAgICogSWYgc2V0IHRvIHRydWUsIHRlbGVtZXRyeSBpbmZvcm1hdGlvbiBsaWtlIG1pY3JvcGhvbmUgZXJyb3JzLFxuICAgICAqIHJlY29nbml0aW9uIGVycm9ycyBhcmUgY29sbGVjdGVkIGFuZCBzZW50IHRvIE1pY3Jvc29mdC5cbiAgICAgKiBJZiBzZXQgdG8gZmFsc2UsIG5vIHRlbGVtZXRyeSBpcyBzZW50IHRvIE1pY3Jvc29mdC5cbiAgICAgKi9cbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTptZW1iZXItb3JkZXJpbmcgKi9cbiAgICBzdGF0aWMgZW5hYmxlVGVsZW1ldHJ5KGVuYWJsZWQpIHtcbiAgICAgICAgU2VydmljZVJlY29nbml6ZXJCYXNlLnRlbGVtZXRyeURhdGFFbmFibGVkID0gZW5hYmxlZDtcbiAgICB9XG4gICAgLy8gRG9lcyB0aGUgZ2VuZXJpYyByZWNvZ25pemVyIHNldHVwIHRoYXQgaXMgY29tbW9uIGFjcm9zcyBhbGwgcmVjb2duaXplciB0eXBlcy5cbiAgICBpbXBsQ29tbW9uUmVjb2duaXplclNldHVwKCkge1xuICAgICAgICBsZXQgb3NQbGF0Zm9ybSA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSA/IFwiQnJvd3NlclwiIDogXCJOb2RlXCI7XG4gICAgICAgIGxldCBvc05hbWUgPSBcInVua25vd25cIjtcbiAgICAgICAgbGV0IG9zVmVyc2lvbiA9IFwidW5rbm93blwiO1xuICAgICAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgb3NQbGF0Zm9ybSA9IG9zUGxhdGZvcm0gKyBcIi9cIiArIG5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgICAgICAgICAgIG9zTmFtZSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICAgICAgICBvc1ZlcnNpb24gPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWNvZ25pemVyQ29uZmlnID0gdGhpcy5jcmVhdGVSZWNvZ25pemVyQ29uZmlnKG5ldyBTcGVlY2hTZXJ2aWNlQ29uZmlnKG5ldyBDb250ZXh0KG5ldyBPUyhvc1BsYXRmb3JtLCBvc05hbWUsIG9zVmVyc2lvbikpKSk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbktleSA9IHRoaXMucHJpdlByb3BlcnRpZXMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXksIHVuZGVmaW5lZCk7XG4gICAgICAgIGNvbnN0IGF1dGhlbnRpY2F0aW9uID0gKHN1YnNjcmlwdGlvbktleSAmJiBzdWJzY3JpcHRpb25LZXkgIT09IFwiXCIpID9cbiAgICAgICAgICAgIG5ldyBDb2duaXRpdmVTdWJzY3JpcHRpb25LZXlBdXRoZW50aWNhdGlvbihzdWJzY3JpcHRpb25LZXkpIDpcbiAgICAgICAgICAgIG5ldyBDb2duaXRpdmVUb2tlbkF1dGhlbnRpY2F0aW9uKChhdXRoRmV0Y2hFdmVudElkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXV0aG9yaXphdGlvblRva2VuID0gdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQoYXV0aG9yaXphdGlvblRva2VuKTtcbiAgICAgICAgICAgIH0sIChhdXRoRmV0Y2hFdmVudElkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXV0aG9yaXphdGlvblRva2VuID0gdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlSGVscGVyLmZyb21SZXN1bHQoYXV0aG9yaXphdGlvblRva2VuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLnByaXZSZWNvID0gdGhpcy5jcmVhdGVTZXJ2aWNlUmVjb2duaXplcihhdXRoZW50aWNhdGlvbiwgdGhpcy5wcml2Q29ubmVjdGlvbkZhY3RvcnksIHRoaXMuYXVkaW9Db25maWcsIHJlY29nbml6ZXJDb25maWcpO1xuICAgIH1cbiAgICAvLyBTdGFydCB0aGUgcmVjb2duaXRpb25cbiAgICBpbXBsUmVjb2duaXplclN0YXJ0KHJlY29nbml0aW9uTW9kZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMucHJpdlJlY28ucmVjb2duaXplKHJlY29nbml0aW9uTW9kZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKS5vbihcbiAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgKHJlc3VsdCkgPT4geyB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGlmICghIWVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBJbnRlcm5hbCBlcnJvciB3aXRoIHNlcnZpY2UgY29tbXVuaWNhdGlvbi5cbiAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKFwiUnVudGltZSBlcnJvcjogXCIgKyBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbXBsUmVjb2duaXplclN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZSZWNvKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZSZWNvLnN0b3BSZWNvZ25pemluZygpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWNvZ25pemVyLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIERlZmluZXMgdGhlIHBvc3NpYmxlIHJlYXNvbnMgYSByZWNvZ25pdGlvbiByZXN1bHQgbWlnaHQgYmUgZ2VuZXJhdGVkLlxuICogQGNsYXNzIFJlc3VsdFJlYXNvblxuICovXG5leHBvcnQgdmFyIFJlc3VsdFJlYXNvbjtcbihmdW5jdGlvbiAoUmVzdWx0UmVhc29uKSB7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHNwZWVjaCBjb3VsZCBub3QgYmUgcmVjb2duaXplZC4gTW9yZSBkZXRhaWxzXG4gICAgICogY2FuIGJlIGZvdW5kIGluIHRoZSBOb01hdGNoRGV0YWlscyBvYmplY3QuXG4gICAgICogQG1lbWJlciBSZXN1bHRSZWFzb24uTm9NYXRjaFxuICAgICAqL1xuICAgIFJlc3VsdFJlYXNvbltSZXN1bHRSZWFzb25bXCJOb01hdGNoXCJdID0gMF0gPSBcIk5vTWF0Y2hcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgcmVjb2duaXRpb24gd2FzIGNhbmNlbGVkLiBNb3JlIGRldGFpbHNcbiAgICAgKiBjYW4gYmUgZm91bmQgdXNpbmcgdGhlIENhbmNlbGxhdGlvbkRldGFpbHMgb2JqZWN0LlxuICAgICAqIEBtZW1iZXIgUmVzdWx0UmVhc29uLkNhbmNlbGVkXG4gICAgICovXG4gICAgUmVzdWx0UmVhc29uW1Jlc3VsdFJlYXNvbltcIkNhbmNlbGVkXCJdID0gMV0gPSBcIkNhbmNlbGVkXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSBzcGVlY2ggcmVzdWx0IGNvbnRhaW5zIGh5cG90aGVzaXMgdGV4dC5cbiAgICAgKiBAbWVtYmVyIFJlc3VsdFJlYXNvbi5SZWNvZ25pemVkU3BlZWNoXG4gICAgICovXG4gICAgUmVzdWx0UmVhc29uW1Jlc3VsdFJlYXNvbltcIlJlY29nbml6aW5nU3BlZWNoXCJdID0gMl0gPSBcIlJlY29nbml6aW5nU3BlZWNoXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSBzcGVlY2ggcmVzdWx0IGNvbnRhaW5zIGZpbmFsIHRleHQgdGhhdCBoYXMgYmVlbiByZWNvZ25pemVkLlxuICAgICAqIFNwZWVjaCBSZWNvZ25pdGlvbiBpcyBub3cgY29tcGxldGUgZm9yIHRoaXMgcGhyYXNlLlxuICAgICAqIEBtZW1iZXIgUmVzdWx0UmVhc29uLlJlY29nbml6ZWRTcGVlY2hcbiAgICAgKi9cbiAgICBSZXN1bHRSZWFzb25bUmVzdWx0UmVhc29uW1wiUmVjb2duaXplZFNwZWVjaFwiXSA9IDNdID0gXCJSZWNvZ25pemVkU3BlZWNoXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSBpbnRlbnQgcmVzdWx0IGNvbnRhaW5zIGh5cG90aGVzaXMgdGV4dCBhbmQgaW50ZW50LlxuICAgICAqIEBtZW1iZXIgUmVzdWx0UmVhc29uLlJlY29nbml6aW5nSW50ZW50XG4gICAgICovXG4gICAgUmVzdWx0UmVhc29uW1Jlc3VsdFJlYXNvbltcIlJlY29nbml6aW5nSW50ZW50XCJdID0gNF0gPSBcIlJlY29nbml6aW5nSW50ZW50XCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSBpbnRlbnQgcmVzdWx0IGNvbnRhaW5zIGZpbmFsIHRleHQgYW5kIGludGVudC5cbiAgICAgKiBTcGVlY2ggUmVjb2duaXRpb24gYW5kIEludGVudCBkZXRlcm1pbmF0aW9uIGFyZSBub3cgY29tcGxldGUgZm9yIHRoaXMgcGhyYXNlLlxuICAgICAqIEBtZW1iZXIgUmVzdWx0UmVhc29uLlJlY29nbml6ZWRJbnRlbnRcbiAgICAgKi9cbiAgICBSZXN1bHRSZWFzb25bUmVzdWx0UmVhc29uW1wiUmVjb2duaXplZEludGVudFwiXSA9IDVdID0gXCJSZWNvZ25pemVkSW50ZW50XCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSB0cmFuc2xhdGlvbiByZXN1bHQgY29udGFpbnMgaHlwb3RoZXNpcyB0ZXh0IGFuZCBpdHMgdHJhbnNsYXRpb24ocykuXG4gICAgICogQG1lbWJlciBSZXN1bHRSZWFzb24uVHJhbnNsYXRpbmdTcGVlY2hcbiAgICAgKi9cbiAgICBSZXN1bHRSZWFzb25bUmVzdWx0UmVhc29uW1wiVHJhbnNsYXRpbmdTcGVlY2hcIl0gPSA2XSA9IFwiVHJhbnNsYXRpbmdTcGVlY2hcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhlIHRyYW5zbGF0aW9uIHJlc3VsdCBjb250YWlucyBmaW5hbCB0ZXh0IGFuZCBjb3JyZXNwb25kaW5nIHRyYW5zbGF0aW9uKHMpLlxuICAgICAqIFNwZWVjaCBSZWNvZ25pdGlvbiBhbmQgVHJhbnNsYXRpb24gYXJlIG5vdyBjb21wbGV0ZSBmb3IgdGhpcyBwaHJhc2UuXG4gICAgICogQG1lbWJlciBSZXN1bHRSZWFzb24uVHJhbnNsYXRlZFNwZWVjaFxuICAgICAqL1xuICAgIFJlc3VsdFJlYXNvbltSZXN1bHRSZWFzb25bXCJUcmFuc2xhdGVkU3BlZWNoXCJdID0gN10gPSBcIlRyYW5zbGF0ZWRTcGVlY2hcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhlIHN5bnRoZXNpemVkIGF1ZGlvIHJlc3VsdCBjb250YWlucyBhIG5vbi16ZXJvIGFtb3VudCBvZiBhdWRpbyBkYXRhXG4gICAgICogQG1lbWJlciBSZXN1bHRSZWFzb24uU3ludGhlc2l6aW5nQXVkaW9cbiAgICAgKi9cbiAgICBSZXN1bHRSZWFzb25bUmVzdWx0UmVhc29uW1wiU3ludGhlc2l6aW5nQXVkaW9cIl0gPSA4XSA9IFwiU3ludGhlc2l6aW5nQXVkaW9cIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhlIHN5bnRoZXNpemVkIGF1ZGlvIGlzIG5vdyBjb21wbGV0ZSBmb3IgdGhpcyBwaHJhc2UuXG4gICAgICogQG1lbWJlciBSZXN1bHRSZWFzb24uU3ludGhlc2l6aW5nQXVkaW9Db21wbGV0ZWRcbiAgICAgKi9cbiAgICBSZXN1bHRSZWFzb25bUmVzdWx0UmVhc29uW1wiU3ludGhlc2l6aW5nQXVkaW9Db21wbGV0ZWRcIl0gPSA5XSA9IFwiU3ludGhlc2l6aW5nQXVkaW9Db21wbGV0ZWRcIjtcbn0pKFJlc3VsdFJlYXNvbiB8fCAoUmVzdWx0UmVhc29uID0ge30pKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVzdWx0UmVhc29uLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIERlZmluZXMgY2hhbm5lbHMgdXNlZCB0byBwYXNzIHByb3BlcnR5IHNldHRpbmdzIHRvIHNlcnZpY2UuXG4gKiBBZGRlZCBpbiB2ZXJzaW9uIDEuNy4wLlxuICovXG5leHBvcnQgdmFyIFNlcnZpY2VQcm9wZXJ0eUNoYW5uZWw7XG4oZnVuY3Rpb24gKFNlcnZpY2VQcm9wZXJ0eUNoYW5uZWwpIHtcbiAgICAvKipcbiAgICAgKiBVc2VzIFVSSSBxdWVyeSBwYXJhbWV0ZXIgdG8gcGFzcyBwcm9wZXJ0eSBzZXR0aW5ncyB0byBzZXJ2aWNlLlxuICAgICAqL1xuICAgIFNlcnZpY2VQcm9wZXJ0eUNoYW5uZWxbU2VydmljZVByb3BlcnR5Q2hhbm5lbFtcIlVyaVF1ZXJ5UGFyYW1ldGVyXCJdID0gMF0gPSBcIlVyaVF1ZXJ5UGFyYW1ldGVyXCI7XG59KShTZXJ2aWNlUHJvcGVydHlDaGFubmVsIHx8IChTZXJ2aWNlUHJvcGVydHlDaGFubmVsID0ge30pKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VydmljZVByb3BlcnR5Q2hhbm5lbC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBEZWZpbmVzIGNvbnRlbnQgZm9yIHNlc3Npb24gZXZlbnRzIGxpa2UgU2Vzc2lvblN0YXJ0ZWQvU3RvcHBlZCwgU291bmRTdGFydGVkL1N0b3BwZWQuXG4gKiBAY2xhc3MgU2Vzc2lvbkV2ZW50QXJnc1xuICovXG5leHBvcnQgY2xhc3MgU2Vzc2lvbkV2ZW50QXJncyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2Vzc2lvbklkIC0gVGhlIHNlc3Npb24gaWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2Vzc2lvbklkKSB7XG4gICAgICAgIHRoaXMucHJpdlNlc3Npb25JZCA9IHNlc3Npb25JZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgc2Vzc2lvbiBpZGVudGlmaWVyLlxuICAgICAqIEBtZW1iZXIgU2Vzc2lvbkV2ZW50QXJncy5wcm90b3R5cGUuc2Vzc2lvbklkXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJlcHJlc2VudHMgdGhlIHNlc3Npb24gaWRlbnRpZmllci5cbiAgICAgKi9cbiAgICBnZXQgc2Vzc2lvbklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U2Vzc2lvbklkO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2Vzc2lvbkV2ZW50QXJncy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQ29udHJhY3RzIH0gZnJvbSBcIi4vQ29udHJhY3RzXCI7XG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlQ29uZmlnSW1wbCB9IGZyb20gXCIuL0RpYWxvZ1NlcnZpY2VDb25maWdcIjtcbmltcG9ydCB7IFByb3BlcnR5SWQgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vKipcbiAqIENsYXNzIHRoYXQgZGVmaW5lcyBjb25maWd1cmF0aW9ucyBmb3IgdGhlIGRpYWxvZyBzZXJ2aWNlIGNvbm5lY3RvciBvYmplY3QgZm9yIHVzaW5nIGEgU3BlZWNoQ29tbWFuZHMgYmFja2VuZC5cbiAqIEBjbGFzcyBTcGVlY2hDb21tYW5kc0NvbmZpZ1xuICovXG5leHBvcnQgY2xhc3MgU3BlZWNoQ29tbWFuZHNDb25maWcgZXh0ZW5kcyBEaWFsb2dTZXJ2aWNlQ29uZmlnSW1wbCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBTcGVlY2hDb21tYW5kc0NvbmZpZy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgYm90IGZyYW1ld29yayBjb25maWcgd2l0aCB0aGUgc3BlY2lmaWVkIHN1YnNjcmlwdGlvbiBhbmQgcmVnaW9uLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoQ29tbWFuZHNDb25maWcuZnJvbVN1YnNjcmlwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0gYXBwbGljYXRpb25JZCBTcGVlY2ggQ29tbWFuZHMgYXBwbGljYXRpb24gaWQuXG4gICAgICogQHBhcmFtIHN1YnNjcmlwdGlvbiBTdWJzY3JpcHRpb24ga2V5IGFzc29jaWF0ZWQgd2l0aCB0aGUgYm90XG4gICAgICogQHBhcmFtIHJlZ2lvbiBUaGUgcmVnaW9uIG5hbWUgKHNlZSB0aGUgPGEgaHJlZj1cImh0dHBzOi8vYWthLm1zL2Nzc3BlZWNoL3JlZ2lvblwiPnJlZ2lvbiBwYWdlPC9hPikuXG4gICAgICogQHJldHVybnMge1NwZWVjaENvbW1hbmRzQ29uZmlnfSBBIG5ldyBib3QgZnJhbWV3b3JrIGNvbmZpZy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVN1YnNjcmlwdGlvbihhcHBsaWNhdGlvbklkLCBzdWJzY3JpcHRpb24sIHJlZ2lvbikge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UoYXBwbGljYXRpb25JZCwgXCJhcHBsaWNhdGlvbklkXCIpO1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2Uoc3Vic2NyaXB0aW9uLCBcInN1YnNjcmlwdGlvblwiKTtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHJlZ2lvbiwgXCJyZWdpb25cIik7XG4gICAgICAgIGNvbnN0IHNwZWVjaENvbW1hbmRzQ29uZmlnID0gbmV3IERpYWxvZ1NlcnZpY2VDb25maWdJbXBsKCk7XG4gICAgICAgIHNwZWVjaENvbW1hbmRzQ29uZmlnLnNldFByb3BlcnR5KFByb3BlcnR5SWQuQ29udmVyc2F0aW9uX0RpYWxvZ1R5cGUsIFwiY3VzdG9tX2NvbW1hbmRzXCIpO1xuICAgICAgICBzcGVlY2hDb21tYW5kc0NvbmZpZy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLkNvbnZlcnNhdGlvbl9BcHBsaWNhdGlvbklkLCBhcHBsaWNhdGlvbklkKTtcbiAgICAgICAgc3BlZWNoQ29tbWFuZHNDb25maWcuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXksIHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHNwZWVjaENvbW1hbmRzQ29uZmlnLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVnaW9uLCByZWdpb24pO1xuICAgICAgICByZXR1cm4gc3BlZWNoQ29tbWFuZHNDb25maWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIGJvdCBmcmFtZXdvcmsgY29uZmlnIHdpdGggdGhlIHNwZWNpZmllZCBTcGVlY2ggQ29tbWFuZHMgYXBwbGljYXRpb24gaWQsIGF1dGhvcml6YXRpb24gdG9rZW4gYW5kIHJlZ2lvbi5cbiAgICAgKiBOb3RlOiBUaGUgY2FsbGVyIG5lZWRzIHRvIGVuc3VyZSB0aGF0IHRoZSBhdXRob3JpemF0aW9uIHRva2VuIGlzIHZhbGlkLiBCZWZvcmUgdGhlIGF1dGhvcml6YXRpb24gdG9rZW5cbiAgICAgKiBleHBpcmVzLCB0aGUgY2FsbGVyIG5lZWRzIHRvIHJlZnJlc2ggaXQgYnkgY2FsbGluZyB0aGlzIHNldHRlciB3aXRoIGEgbmV3IHZhbGlkIHRva2VuLlxuICAgICAqIEFzIGNvbmZpZ3VyYXRpb24gdmFsdWVzIGFyZSBjb3BpZWQgd2hlbiBjcmVhdGluZyBhIG5ldyByZWNvZ25pemVyLCB0aGUgbmV3IHRva2VuIHZhbHVlIHdpbGwgbm90IGFwcGx5IHRvIHJlY29nbml6ZXJzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gY3JlYXRlZC5cbiAgICAgKiBGb3IgcmVjb2duaXplcnMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZCBiZWZvcmUsIHlvdSBuZWVkIHRvIHNldCBhdXRob3JpemF0aW9uIHRva2VuIG9mIHRoZSBjb3JyZXNwb25kaW5nIHJlY29nbml6ZXJcbiAgICAgKiB0byByZWZyZXNoIHRoZSB0b2tlbi4gT3RoZXJ3aXNlLCB0aGUgcmVjb2duaXplcnMgd2lsbCBlbmNvdW50ZXIgZXJyb3JzIGR1cmluZyByZWNvZ25pdGlvbi5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaENvbW1hbmRzQ29uZmlnLmZyb21BdXRob3JpemF0aW9uVG9rZW5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIGFwcGxpY2F0aW9uSWQgU3BlZWNoIENvbW1hbmRzIGFwcGxpY2F0aW9uIGlkLlxuICAgICAqIEBwYXJhbSBhdXRob3JpemF0aW9uVG9rZW4gVGhlIGF1dGhvcml6YXRpb24gdG9rZW4gYXNzb2NpYXRlZCB3aXRoIHRoZSBhcHBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0gcmVnaW9uIFRoZSByZWdpb24gbmFtZSAoc2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9ha2EubXMvY3NzcGVlY2gvcmVnaW9uXCI+cmVnaW9uIHBhZ2U8L2E+KS5cbiAgICAgKiBAcmV0dXJucyB7U3BlZWNoQ29tbWFuZHNDb25maWd9IEEgbmV3IHNwZWVjaCBjb21tYW5kcyBjb25maWcuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21BdXRob3JpemF0aW9uVG9rZW4oYXBwbGljYXRpb25JZCwgYXV0aG9yaXphdGlvblRva2VuLCByZWdpb24pIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKGFwcGxpY2F0aW9uSWQsIFwiYXBwbGljYXRpb25JZFwiKTtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKGF1dGhvcml6YXRpb25Ub2tlbiwgXCJhdXRob3JpemF0aW9uVG9rZW5cIik7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShyZWdpb24sIFwicmVnaW9uXCIpO1xuICAgICAgICBjb25zdCBzcGVlY2hDb21tYW5kc0NvbmZpZyA9IG5ldyBEaWFsb2dTZXJ2aWNlQ29uZmlnSW1wbCgpO1xuICAgICAgICBzcGVlY2hDb21tYW5kc0NvbmZpZy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLkNvbnZlcnNhdGlvbl9EaWFsb2dUeXBlLCBcImN1c3RvbV9jb21tYW5kc1wiKTtcbiAgICAgICAgc3BlZWNoQ29tbWFuZHNDb25maWcuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5Db252ZXJzYXRpb25fQXBwbGljYXRpb25JZCwgYXBwbGljYXRpb25JZCk7XG4gICAgICAgIHNwZWVjaENvbW1hbmRzQ29uZmlnLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVG9rZW4sIGF1dGhvcml6YXRpb25Ub2tlbik7XG4gICAgICAgIHNwZWVjaENvbW1hbmRzQ29uZmlnLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVnaW9uLCByZWdpb24pO1xuICAgICAgICByZXR1cm4gc3BlZWNoQ29tbWFuZHNDb25maWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvcnJlc3BvbmRpbmcgYmFja2VuZCBhcHBsaWNhdGlvbiBpZGVudGlmaWVyLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoQ29tbWFuZHNDb25maWcucHJvdG90eXBlLkNvbnZlcnNhdGlvbl9BcHBsaWNhdGlvbklkXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBhcHBsaWNhdGlvbiBpZGVudGlmaWVyIHRvIHNldC5cbiAgICAgKi9cbiAgICBzZXQgYXBwbGljYXRpb25JZCh2YWx1ZSkge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UodmFsdWUsIFwidmFsdWVcIik7XG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5Db252ZXJzYXRpb25fQXBwbGljYXRpb25JZCwgdmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjb3JyZXNwb25kaW5nIGJhY2tlbmQgYXBwbGljYXRpb24gaWRlbnRpZmllci5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaENvbW1hbmRzQ29uZmlnLnByb3RvdHlwZS5Db252ZXJzYXRpb25fQXBwbGljYXRpb25JZFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgYXBwbGljYXRpb24gaWRlbnRpZmllciB0byBnZXQuXG4gICAgICovXG4gICAgZ2V0IGFwcGxpY2F0aW9uSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuQ29udmVyc2F0aW9uX0FwcGxpY2F0aW9uSWQpO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoQ29tbWFuZHNDb25maWcuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEZvcmNlRGljdGF0aW9uUHJvcGVydHlOYW1lLCBPdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUsIFNlcnZpY2VQcm9wZXJ0aWVzUHJvcGVydHlOYW1lIH0gZnJvbSBcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiO1xuaW1wb3J0IHsgQ29udHJhY3RzIH0gZnJvbSBcIi4vQ29udHJhY3RzXCI7XG5pbXBvcnQgeyBPdXRwdXRGb3JtYXQsIFByb2Zhbml0eU9wdGlvbiwgUHJvcGVydHlDb2xsZWN0aW9uLCBQcm9wZXJ0eUlkIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuLyoqXG4gKiBTcGVlY2ggY29uZmlndXJhdGlvbi5cbiAqIEBjbGFzcyBTcGVlY2hDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIFNwZWVjaENvbmZpZyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2UuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7IH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgaW5zdGFuY2Ugb2YgU3BlZWNoQ29uZmlnIHJldHVybmVkIGJ5IHBhc3Npbmcgc3Vic2NyaXB0aW9uS2V5IGFuZCBzZXJ2aWNlIHJlZ2lvbi5cbiAgICAgKiBOb3RlOiBQbGVhc2UgdXNlIHlvdXIgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nIHN1YnNjcmlwdGlvbiBrZXkgaW4gY2FzZSB5b3Ugd2FudCB0byB1c2UgdGhlIEludGVudCByZWNvZ25pemVyLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoQ29uZmlnLmZyb21TdWJzY3JpcHRpb25cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN1YnNjcmlwdGlvbktleSAtIFRoZSBzdWJzY3JpcHRpb24ga2V5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb24gLSBUaGUgcmVnaW9uIG5hbWUgKHNlZSB0aGUgPGEgaHJlZj1cImh0dHBzOi8vYWthLm1zL2Nzc3BlZWNoL3JlZ2lvblwiPnJlZ2lvbiBwYWdlPC9hPikuXG4gICAgICogQHJldHVybnMge1NwZWVjaENvbmZpZ30gVGhlIHNwZWVjaCBmYWN0b3J5XG4gICAgICovXG4gICAgc3RhdGljIGZyb21TdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uS2V5LCByZWdpb24pIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHN1YnNjcmlwdGlvbktleSwgXCJzdWJzY3JpcHRpb25LZXlcIik7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShyZWdpb24sIFwicmVnaW9uXCIpO1xuICAgICAgICBjb25zdCBzcGVlY2hJbXBsID0gbmV3IFNwZWVjaENvbmZpZ0ltcGwoKTtcbiAgICAgICAgc3BlZWNoSW1wbC5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgc3BlZWNoSW1wbC5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0ludGVudFJlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgc3BlZWNoSW1wbC5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0tleSwgc3Vic2NyaXB0aW9uS2V5KTtcbiAgICAgICAgcmV0dXJuIHNwZWVjaEltcGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIHNwZWVjaCBjb25maWcgd2l0aCBzcGVjaWZpZWQgZW5kcG9pbnQgYW5kIHN1YnNjcmlwdGlvbiBrZXkuXG4gICAgICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgb25seSBmb3IgdXNlcnMgd2hvIHVzZSBhIG5vbi1zdGFuZGFyZCBzZXJ2aWNlIGVuZHBvaW50IG9yIHBhcmFtZXRlcnMuXG4gICAgICogTm90ZTogUGxlYXNlIHVzZSB5b3VyIExhbmd1YWdlVW5kZXJzdGFuZGluZyBzdWJzY3JpcHRpb24ga2V5IGluIGNhc2UgeW91IHdhbnQgdG8gdXNlIHRoZSBJbnRlbnQgcmVjb2duaXplci5cbiAgICAgKiBOb3RlOiBUaGUgcXVlcnkgcGFyYW1ldGVycyBzcGVjaWZpZWQgaW4gdGhlIGVuZHBvaW50IFVSTCBhcmUgbm90IGNoYW5nZWQsIGV2ZW4gaWYgdGhleSBhcmUgc2V0IGJ5IGFueSBvdGhlciBBUElzLlxuICAgICAqIEZvciBleGFtcGxlLCBpZiBsYW5ndWFnZSBpcyBkZWZpbmVkIGluIHRoZSB1cmkgYXMgcXVlcnkgcGFyYW1ldGVyIFwibGFuZ3VhZ2U9ZGUtREVcIiwgYW5kIGFsc28gc2V0IGJ5XG4gICAgICogICAgICAgICAgICAgIFNwZWVjaENvbmZpZy5zcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlID0gXCJlbi1VU1wiLCB0aGUgbGFuZ3VhZ2Ugc2V0dGluZyBpbiB1cmkgdGFrZXMgcHJlY2VkZW5jZSxcbiAgICAgKiAgICAgICAgICAgICAgYW5kIHRoZSBlZmZlY3RpdmUgbGFuZ3VhZ2UgaXMgXCJkZS1ERVwiLiBPbmx5IHRoZSBwYXJhbWV0ZXJzIHRoYXQgYXJlIG5vdCBzcGVjaWZpZWQgaW4gdGhlXG4gICAgICogICAgICAgICAgICAgIGVuZHBvaW50IFVSTCBjYW4gYmUgc2V0IGJ5IG90aGVyIEFQSXMuXG4gICAgICogTm90ZTogVG8gdXNlIGF1dGhvcml6YXRpb24gdG9rZW4gd2l0aCBmcm9tRW5kcG9pbnQsIHBhc3MgYW4gZW1wdHkgc3RyaW5nIHRvIHRoZSBzdWJzY3JpcHRpb25LZXkgaW4gdGhlXG4gICAgICogICAgICAgZnJvbUVuZHBvaW50IG1ldGhvZCwgYW5kIHRoZW4gc2V0IGF1dGhvcml6YXRpb25Ub2tlbj1cInRva2VuXCIgb24gdGhlIGNyZWF0ZWQgU3BlZWNoQ29uZmlnIGluc3RhbmNlIHRvXG4gICAgICogICAgICAgdXNlIHRoZSBhdXRob3JpemF0aW9uIHRva2VuLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoQ29uZmlnLmZyb21FbmRwb2ludFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge1VSTH0gZW5kcG9pbnQgLSBUaGUgc2VydmljZSBlbmRwb2ludCB0byBjb25uZWN0IHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJzY3JpcHRpb25LZXkgLSBUaGUgc3Vic2NyaXB0aW9uIGtleS4gSWYgYSBzdWJzY3JpcHRpb24ga2V5IGlzIG5vdCBzcGVjaWZpZWQsIGFuIGF1dGhvcml6YXRpb24gdG9rZW4gbXVzdCBiZSBzZXQuXG4gICAgICogQHJldHVybnMge1NwZWVjaENvbmZpZ30gQSBzcGVlY2ggZmFjdG9yeSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUVuZHBvaW50KGVuZHBvaW50LCBzdWJzY3JpcHRpb25LZXkpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsKGVuZHBvaW50LCBcImVuZHBvaW50XCIpO1xuICAgICAgICBjb25zdCBzcGVlY2hJbXBsID0gbmV3IFNwZWVjaENvbmZpZ0ltcGwoKTtcbiAgICAgICAgc3BlZWNoSW1wbC5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50LCBlbmRwb2ludC5ocmVmKTtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gc3Vic2NyaXB0aW9uS2V5KSB7XG4gICAgICAgICAgICBzcGVlY2hJbXBsLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fS2V5LCBzdWJzY3JpcHRpb25LZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGVlY2hJbXBsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBzcGVlY2ggZmFjdG9yeSB3aXRoIHNwZWNpZmllZCBpbml0aWFsIGF1dGhvcml6YXRpb24gdG9rZW4gYW5kIHJlZ2lvbi5cbiAgICAgKiBOb3RlOiBUaGUgY2FsbGVyIG5lZWRzIHRvIGVuc3VyZSB0aGF0IHRoZSBhdXRob3JpemF0aW9uIHRva2VuIGlzIHZhbGlkLiBCZWZvcmUgdGhlIGF1dGhvcml6YXRpb24gdG9rZW5cbiAgICAgKiAgICAgICBleHBpcmVzLCB0aGUgY2FsbGVyIG5lZWRzIHRvIHJlZnJlc2ggaXQgYnkgY2FsbGluZyB0aGlzIHNldHRlciB3aXRoIGEgbmV3IHZhbGlkIHRva2VuLlxuICAgICAqIE5vdGU6IFBsZWFzZSB1c2UgYSB0b2tlbiBkZXJpdmVkIGZyb20geW91ciBMYW5ndWFnZVVuZGVyc3RhbmRpbmcgc3Vic2NyaXB0aW9uIGtleSBpbiBjYXNlIHlvdSB3YW50XG4gICAgICogICAgICAgdG8gdXNlIHRoZSBJbnRlbnQgcmVjb2duaXplci4gQXMgY29uZmlndXJhdGlvbiB2YWx1ZXMgYXJlIGNvcGllZCB3aGVuIGNyZWF0aW5nIGEgbmV3IHJlY29nbml6ZXIsXG4gICAgICogICAgICAgdGhlIG5ldyB0b2tlbiB2YWx1ZSB3aWxsIG5vdCBhcHBseSB0byByZWNvZ25pemVycyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGNyZWF0ZWQuIEZvciByZWNvZ25pemVyc1xuICAgICAqICAgICAgIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWQgYmVmb3JlLCB5b3UgbmVlZCB0byBzZXQgYXV0aG9yaXphdGlvbiB0b2tlbiBvZiB0aGUgY29ycmVzcG9uZGluZyByZWNvZ25pemVyXG4gICAgICogICAgICAgdG8gcmVmcmVzaCB0aGUgdG9rZW4uIE90aGVyd2lzZSwgdGhlIHJlY29nbml6ZXJzIHdpbGwgZW5jb3VudGVyIGVycm9ycyBkdXJpbmcgcmVjb2duaXRpb24uXG4gICAgICogQG1lbWJlciBTcGVlY2hDb25maWcuZnJvbUF1dGhvcml6YXRpb25Ub2tlblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXV0aG9yaXphdGlvblRva2VuIC0gVGhlIGluaXRpYWwgYXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaW9uIC0gVGhlIHJlZ2lvbiBuYW1lIChzZWUgdGhlIDxhIGhyZWY9XCJodHRwczovL2FrYS5tcy9jc3NwZWVjaC9yZWdpb25cIj5yZWdpb24gcGFnZTwvYT4pLlxuICAgICAqIEByZXR1cm5zIHtTcGVlY2hDb25maWd9IEEgc3BlZWNoIGZhY3RvcnkgaW5zdGFuY2UuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21BdXRob3JpemF0aW9uVG9rZW4oYXV0aG9yaXphdGlvblRva2VuLCByZWdpb24pIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsKGF1dGhvcml6YXRpb25Ub2tlbiwgXCJhdXRob3JpemF0aW9uVG9rZW5cIik7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShyZWdpb24sIFwicmVnaW9uXCIpO1xuICAgICAgICBjb25zdCBzcGVlY2hJbXBsID0gbmV3IFNwZWVjaENvbmZpZ0ltcGwoKTtcbiAgICAgICAgc3BlZWNoSW1wbC5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgc3BlZWNoSW1wbC5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0ludGVudFJlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgc3BlZWNoSW1wbC5hdXRob3JpemF0aW9uVG9rZW4gPSBhdXRob3JpemF0aW9uVG9rZW47XG4gICAgICAgIHJldHVybiBzcGVlY2hJbXBsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIGNvbmZpZ3VyYXRpb24uXG4gICAgICogQG1lbWJlciBTcGVlY2hDb25maWcucHJvdG90eXBlLmNsb3NlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgY2xvc2UoKSB7IH1cbn1cbi8qKlxuICogQHB1YmxpY1xuICogQGNsYXNzIFNwZWVjaENvbmZpZ0ltcGxcbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgU3BlZWNoQ29uZmlnSW1wbCBleHRlbmRzIFNwZWVjaENvbmZpZyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucHJpdlByb3BlcnRpZXMgPSBuZXcgUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSA9IFwiZW4tVVNcIjsgLy8gU2hvdWxkIHdlIGhhdmUgYSBkZWZhdWx0P1xuICAgICAgICB0aGlzLm91dHB1dEZvcm1hdCA9IE91dHB1dEZvcm1hdC5TaW1wbGU7XG4gICAgfVxuICAgIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvcGVydGllcztcbiAgICB9XG4gICAgZ2V0IGVuZFBvaW50KCkge1xuICAgICAgICByZXR1cm4gbmV3IFVSTCh0aGlzLnByaXZQcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnQpKTtcbiAgICB9XG4gICAgZ2V0IHN1YnNjcmlwdGlvbktleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb3BlcnRpZXMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXkpO1xuICAgIH1cbiAgICBnZXQgcmVnaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbik7XG4gICAgfVxuICAgIGdldCBhdXRob3JpemF0aW9uVG9rZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZQcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVG9rZW4pO1xuICAgIH1cbiAgICBzZXQgYXV0aG9yaXphdGlvblRva2VuKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJpdlByb3BlcnRpZXMuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlbiwgdmFsdWUpO1xuICAgIH1cbiAgICBnZXQgc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb3BlcnRpZXMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2UpO1xuICAgIH1cbiAgICBzZXQgc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnByaXZQcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlLCB2YWx1ZSk7XG4gICAgfVxuICAgIGdldCBvdXRwdXRGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiBPdXRwdXRGb3JtYXRbdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShPdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUsIHVuZGVmaW5lZCldO1xuICAgIH1cbiAgICBzZXQgb3V0cHV0Rm9ybWF0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJpdlByb3BlcnRpZXMuc2V0UHJvcGVydHkoT3V0cHV0Rm9ybWF0UHJvcGVydHlOYW1lLCBPdXRwdXRGb3JtYXRbdmFsdWVdKTtcbiAgICB9XG4gICAgZ2V0IGVuZHBvaW50SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZQcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnRJZCk7XG4gICAgfVxuICAgIHNldCBlbmRwb2ludElkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJpdlByb3BlcnRpZXMuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludElkLCB2YWx1ZSk7XG4gICAgfVxuICAgIHNldFByb3BlcnR5KG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbCh2YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgdGhpcy5wcml2UHJvcGVydGllcy5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIGdldFByb3BlcnR5KG5hbWUsIGRlZikge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShuYW1lLCBkZWYpO1xuICAgIH1cbiAgICBzZXRQcm94eShwcm94eUhvc3ROYW1lLCBwcm94eVBvcnQsIHByb3h5VXNlck5hbWUsIHByb3h5UGFzc3dvcmQpIHtcbiAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkW1Byb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlIb3N0TmFtZV0sIHByb3h5SG9zdE5hbWUpO1xuICAgICAgICB0aGlzLnNldFByb3BlcnR5KFByb3BlcnR5SWRbUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBvcnRdLCBwcm94eVBvcnQpO1xuICAgICAgICB0aGlzLnNldFByb3BlcnR5KFByb3BlcnR5SWRbUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVVzZXJOYW1lXSwgcHJveHlVc2VyTmFtZSk7XG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoUHJvcGVydHlJZFtQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5UGFzc3dvcmRdLCBwcm94eVBhc3N3b3JkKTtcbiAgICB9XG4gICAgc2V0U2VydmljZVByb3BlcnR5KG5hbWUsIHZhbHVlLCBjaGFubmVsKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQcm9wZXJ0aWVzID0gSlNPTi5wYXJzZSh0aGlzLnByaXZQcm9wZXJ0aWVzLmdldFByb3BlcnR5KFNlcnZpY2VQcm9wZXJ0aWVzUHJvcGVydHlOYW1lLCBcInt9XCIpKTtcbiAgICAgICAgY3VycmVudFByb3BlcnRpZXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5wcml2UHJvcGVydGllcy5zZXRQcm9wZXJ0eShTZXJ2aWNlUHJvcGVydGllc1Byb3BlcnR5TmFtZSwgSlNPTi5zdHJpbmdpZnkoY3VycmVudFByb3BlcnRpZXMpKTtcbiAgICB9XG4gICAgc2V0UHJvZmFuaXR5KHByb2Zhbml0eSkge1xuICAgICAgICB0aGlzLnByaXZQcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX1Byb2Zhbml0eU9wdGlvbiwgUHJvZmFuaXR5T3B0aW9uW3Byb2Zhbml0eV0pO1xuICAgIH1cbiAgICBlbmFibGVBdWRpb0xvZ2dpbmcoKSB7XG4gICAgICAgIHRoaXMucHJpdlByb3BlcnRpZXMuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmFibGVBdWRpb0xvZ2dpbmcsIFwidHJ1ZVwiKTtcbiAgICB9XG4gICAgcmVxdWVzdFdvcmRMZXZlbFRpbWVzdGFtcHMoKSB7XG4gICAgICAgIHRoaXMucHJpdlByb3BlcnRpZXMuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUmVxdWVzdFdvcmRMZXZlbFRpbWVzdGFtcHMsIFwidHJ1ZVwiKTtcbiAgICB9XG4gICAgZW5hYmxlRGljdGF0aW9uKCkge1xuICAgICAgICB0aGlzLnByaXZQcm9wZXJ0aWVzLnNldFByb3BlcnR5KEZvcmNlRGljdGF0aW9uUHJvcGVydHlOYW1lLCBcInRydWVcIik7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCByZXQgPSBuZXcgU3BlZWNoQ29uZmlnSW1wbCgpO1xuICAgICAgICByZXQucHJpdlByb3BlcnRpZXMgPSB0aGlzLnByaXZQcm9wZXJ0aWVzLmNsb25lKCk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGVlY2hDb25maWcuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFJlY29nbml0aW9uRXZlbnRBcmdzIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuLyoqXG4gKiBEZWZpbmVzIGNvbnRlbnQgb2YgYSBSZWNvZ25pdGlvbkVycm9yRXZlbnQuXG4gKiBAY2xhc3MgU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJnc1xuICovXG5leHBvcnQgY2xhc3MgU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyBleHRlbmRzIFJlY29nbml0aW9uRXZlbnRBcmdzIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Q2FuY2VsbGF0aW9uUmVhc29ufSByZWFzb24gLSBUaGUgY2FuY2VsbGF0aW9uIHJlYXNvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JEZXRhaWxzIC0gRXJyb3IgZGV0YWlscywgaWYgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlc3Npb25JZCAtIFRoZSBzZXNzaW9uIGlkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJlYXNvbiwgZXJyb3JEZXRhaWxzLCBlcnJvckNvZGUsIG9mZnNldCwgc2Vzc2lvbklkKSB7XG4gICAgICAgIHN1cGVyKG9mZnNldCwgc2Vzc2lvbklkKTtcbiAgICAgICAgdGhpcy5wcml2UmVhc29uID0gcmVhc29uO1xuICAgICAgICB0aGlzLnByaXZFcnJvckRldGFpbHMgPSBlcnJvckRldGFpbHM7XG4gICAgICAgIHRoaXMucHJpdkVycm9yQ29kZSA9IGVycm9yQ29kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHJlYXNvbiB0aGUgcmVjb2duaXRpb24gd2FzIGNhbmNlbGVkLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUucmVhc29uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtDYW5jZWxsYXRpb25SZWFzb259IFNwZWNpZmllcyB0aGUgcmVhc29uIGNhbmNlbGVkLlxuICAgICAqL1xuICAgIGdldCByZWFzb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZWFzb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBlcnJvciBjb2RlIGluIGNhc2Ugb2YgYW4gdW5zdWNjZXNzZnVsIHJlY29nbml0aW9uLlxuICAgICAqIEFkZGVkIGluIHZlcnNpb24gMS4xLjAuXG4gICAgICogQHJldHVybiBBbiBlcnJvciBjb2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgZXJyb3IgcmVhc29uLlxuICAgICAqL1xuICAgIGdldCBlcnJvckNvZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZFcnJvckNvZGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluIGNhc2Ugb2YgYW4gdW5zdWNjZXNzZnVsIHJlY29nbml0aW9uLCBwcm92aWRlcyBkZXRhaWxzIG9mIHRoZSBvY2N1cnJlZCBlcnJvci5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MucHJvdG90eXBlLmVycm9yRGV0YWlsc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGVycm9yIGRldGFpbHMuXG4gICAgICovXG4gICAgZ2V0IGVycm9yRGV0YWlscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yRGV0YWlscztcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwZWVjaFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFJlY29nbml0aW9uRXZlbnRBcmdzIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuLyoqXG4gKiBEZWZpbmVzIGNvbnRlbnRzIG9mIHNwZWVjaCByZWNvZ25pemluZy9yZWNvZ25pemVkIGV2ZW50LlxuICogQGNsYXNzIFNwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJncyBleHRlbmRzIFJlY29nbml0aW9uRXZlbnRBcmdzIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7U3BlZWNoUmVjb2duaXRpb25SZXN1bHR9IHJlc3VsdCAtIFRoZSBzcGVlY2ggcmVjb2duaXRpb24gcmVzdWx0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZXNzaW9uSWQgLSBUaGUgc2Vzc2lvbiBpZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZXN1bHQsIG9mZnNldCwgc2Vzc2lvbklkKSB7XG4gICAgICAgIHN1cGVyKG9mZnNldCwgc2Vzc2lvbklkKTtcbiAgICAgICAgdGhpcy5wcml2UmVzdWx0ID0gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHJlY29nbml0aW9uIHJlc3VsdC5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzLnByb3RvdHlwZS5yZXN1bHRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge1NwZWVjaFJlY29nbml0aW9uUmVzdWx0fSB0aGUgcmVjb2duaXRpb24gcmVzdWx0LlxuICAgICAqL1xuICAgIGdldCByZXN1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZXN1bHQ7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJncy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUmVjb2duaXRpb25SZXN1bHQgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vKipcbiAqIERlZmluZXMgcmVzdWx0IG9mIHNwZWVjaCByZWNvZ25pdGlvbi5cbiAqIEBjbGFzcyBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdFxuICovXG5leHBvcnQgY2xhc3MgU3BlZWNoUmVjb2duaXRpb25SZXN1bHQgZXh0ZW5kcyBSZWNvZ25pdGlvblJlc3VsdCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlc3VsdElkIC0gVGhlIHJlc3VsdCBpZC5cbiAgICAgKiBAcGFyYW0ge1Jlc3VsdFJlYXNvbn0gcmVhc29uIC0gVGhlIHJlYXNvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSByZWNvZ25pemVkIHRleHQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGR1cmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IGludG8gdGhlIHN0cmVhbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JEZXRhaWxzIC0gRXJyb3IgZGV0YWlscywgaWYgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGpzb24gLSBBZGRpdGlvbmFsIEpzb24sIGlmIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlDb2xsZWN0aW9ufSBwcm9wZXJ0aWVzIC0gQWRkaXRpb25hbCBwcm9wZXJ0aWVzLCBpZiBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZXN1bHRJZCwgcmVhc29uLCB0ZXh0LCBkdXJhdGlvbiwgb2Zmc2V0LCBlcnJvckRldGFpbHMsIGpzb24sIHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIocmVzdWx0SWQsIHJlYXNvbiwgdGV4dCwgZHVyYXRpb24sIG9mZnNldCwgZXJyb3JEZXRhaWxzLCBqc29uLCBwcm9wZXJ0aWVzKTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwZWVjaFJlY29nbml0aW9uUmVzdWx0LmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBPdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUsIFJlY29nbml0aW9uTW9kZSwgUmVjb2duaXplckNvbmZpZywgU3BlZWNoU2VydmljZVJlY29nbml6ZXIsIH0gZnJvbSBcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiO1xuaW1wb3J0IHsgU3BlZWNoQ29ubmVjdGlvbkZhY3RvcnkgfSBmcm9tIFwiLi4vY29tbW9uLnNwZWVjaC9TcGVlY2hDb25uZWN0aW9uRmFjdG9yeVwiO1xuaW1wb3J0IHsgQ29udHJhY3RzIH0gZnJvbSBcIi4vQ29udHJhY3RzXCI7XG5pbXBvcnQgeyBPdXRwdXRGb3JtYXQsIFByb3BlcnR5SWQsIFJlY29nbml6ZXIsIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuLyoqXG4gKiBQZXJmb3JtcyBzcGVlY2ggcmVjb2duaXRpb24gZnJvbSBtaWNyb3Bob25lLCBmaWxlLCBvciBvdGhlciBhdWRpbyBpbnB1dCBzdHJlYW1zLCBhbmQgZ2V0cyB0cmFuc2NyaWJlZCB0ZXh0IGFzIHJlc3VsdC5cbiAqIEBjbGFzcyBTcGVlY2hSZWNvZ25pemVyXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGVlY2hSZWNvZ25pemVyIGV4dGVuZHMgUmVjb2duaXplciB7XG4gICAgLyoqXG4gICAgICogU3BlZWNoUmVjb2duaXplciBjb25zdHJ1Y3Rvci5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1NwZWVjaENvbmZpZ30gc3BlZWNoQ29uZmlnIC0gQW4gc2V0IG9mIGluaXRpYWwgcHJvcGVydGllcyBmb3IgdGhpcyByZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtBdWRpb0NvbmZpZ30gYXVkaW9Db25maWcgLSBBbiBvcHRpb25hbCBhdWRpbyBjb25maWd1cmF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVjb2duaXplclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNwZWVjaENvbmZpZywgYXVkaW9Db25maWcpIHtcbiAgICAgICAgY29uc3Qgc3BlZWNoQ29uZmlnSW1wbCA9IHNwZWVjaENvbmZpZztcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsKHNwZWVjaENvbmZpZ0ltcGwsIFwic3BlZWNoQ29uZmlnXCIpO1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2Uoc3BlZWNoQ29uZmlnSW1wbC5wcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlKSwgUHJvcGVydHlJZFtQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZV0pO1xuICAgICAgICBzdXBlcihhdWRpb0NvbmZpZywgc3BlZWNoQ29uZmlnSW1wbC5wcm9wZXJ0aWVzLCBuZXcgU3BlZWNoQ29ubmVjdGlvbkZhY3RvcnkoKSk7XG4gICAgICAgIHRoaXMucHJpdkRpc3Bvc2VkU3BlZWNoUmVjb2duaXplciA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbmRwb2ludCBpZCBvZiBhIGN1c3RvbWl6ZWQgc3BlZWNoIG1vZGVsIHRoYXQgaXMgdXNlZCBmb3Igc3BlZWNoIHJlY29nbml0aW9uLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUuZW5kcG9pbnRJZFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgZW5kcG9pbnQgaWQgb2YgYSBjdXN0b21pemVkIHNwZWVjaCBtb2RlbCB0aGF0IGlzIHVzZWQgZm9yIHNwZWVjaCByZWNvZ25pdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgZW5kcG9pbnRJZCgpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZEaXNwb3NlZCh0aGlzLnByaXZEaXNwb3NlZFNwZWVjaFJlY29nbml6ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnRJZCwgXCIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDBcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4gdXNlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBzZXJ2aWNlLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUuYXV0aG9yaXphdGlvblRva2VuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICovXG4gICAgZ2V0IGF1dGhvcml6YXRpb25Ub2tlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSBhdXRob3JpemF0aW9uIHRva2VuIHVzZWQgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgc2VydmljZS5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLmF1dGhvcml6YXRpb25Ub2tlblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG9rZW4gLSBBdXRob3JpemF0aW9uIHRva2VuLlxuICAgICAqL1xuICAgIHNldCBhdXRob3JpemF0aW9uVG9rZW4odG9rZW4pIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHRva2VuLCBcInRva2VuXCIpO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlbiwgdG9rZW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzcG9rZW4gbGFuZ3VhZ2Ugb2YgcmVjb2duaXRpb24uXG4gICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5zcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBzcG9rZW4gbGFuZ3VhZ2Ugb2YgcmVjb2duaXRpb24uXG4gICAgICovXG4gICAgZ2V0IHNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UoKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRTcGVlY2hSZWNvZ25pemVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG91dHB1dCBmb3JtYXQgb2YgcmVjb2duaXRpb24uXG4gICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5vdXRwdXRGb3JtYXRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge091dHB1dEZvcm1hdH0gVGhlIG91dHB1dCBmb3JtYXQgb2YgcmVjb2duaXRpb24uXG4gICAgICovXG4gICAgZ2V0IG91dHB1dEZvcm1hdCgpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZEaXNwb3NlZCh0aGlzLnByaXZEaXNwb3NlZFNwZWVjaFJlY29nbml6ZXIpO1xuICAgICAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLmdldFByb3BlcnR5KE91dHB1dEZvcm1hdFByb3BlcnR5TmFtZSwgT3V0cHV0Rm9ybWF0W091dHB1dEZvcm1hdC5TaW1wbGVdKSA9PT0gT3V0cHV0Rm9ybWF0W091dHB1dEZvcm1hdC5TaW1wbGVdKSB7XG4gICAgICAgICAgICByZXR1cm4gT3V0cHV0Rm9ybWF0LlNpbXBsZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBPdXRwdXRGb3JtYXQuRGV0YWlsZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNvbGxlY3Rpb24gb2YgcHJvcGVydGllcyBhbmQgdGhlaXIgdmFsdWVzIGRlZmluZWQgZm9yIHRoaXMgU3BlZWNoUmVjb2duaXplci5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLnByb3BlcnRpZXNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge1Byb3BlcnR5Q29sbGVjdGlvbn0gVGhlIGNvbGxlY3Rpb24gb2YgcHJvcGVydGllcyBhbmQgdGhlaXIgdmFsdWVzIGRlZmluZWQgZm9yIHRoaXMgU3BlZWNoUmVjb2duaXplci5cbiAgICAgKi9cbiAgICBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb3BlcnRpZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBzcGVlY2ggcmVjb2duaXRpb24sIGFuZCBzdG9wcyBhZnRlciB0aGUgZmlyc3QgdXR0ZXJhbmNlIGlzIHJlY29nbml6ZWQuXG4gICAgICogVGhlIHRhc2sgcmV0dXJucyB0aGUgcmVjb2duaXRpb24gdGV4dCBhcyByZXN1bHQuXG4gICAgICogTm90ZTogUmVjb2duaXplT25jZUFzeW5jKCkgcmV0dXJucyB3aGVuIHRoZSBmaXJzdCB1dHRlcmFuY2UgaGFzIGJlZW4gcmVjb2duaXplZCxcbiAgICAgKiAgICAgICBzbyBpdCBpcyBzdWl0YWJsZSBvbmx5IGZvciBzaW5nbGUgc2hvdCByZWNvZ25pdGlvblxuICAgICAqICAgICAgIGxpa2UgY29tbWFuZCBvciBxdWVyeS4gRm9yIGxvbmctcnVubmluZyByZWNvZ25pdGlvbiwgdXNlIFN0YXJ0Q29udGludW91c1JlY29nbml0aW9uQXN5bmMoKSBpbnN0ZWFkLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUucmVjb2duaXplT25jZUFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIHRoYXQgcmVjZWl2ZWQgdGhlIFNwZWVjaFJlY29nbml0aW9uUmVzdWx0LlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgcmVjb2duaXplT25jZUFzeW5jKGNiLCBlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRTcGVlY2hSZWNvZ25pemVyKTtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RhcnQoUmVjb2duaXRpb25Nb2RlLkludGVyYWN0aXZlLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgICAgICBlcnIoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGVycih0eXBlZEVycm9yLm5hbWUgKyBcIjogXCIgKyB0eXBlZEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBzcGVlY2ggcmVjb2duaXRpb24sIHVudGlsIHN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luYygpIGlzIGNhbGxlZC5cbiAgICAgKiBVc2VyIG11c3Qgc3Vic2NyaWJlIHRvIGV2ZW50cyB0byByZWNlaXZlIHJlY29nbml0aW9uIHJlc3VsdHMuXG4gICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5zdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIGludm9rZWQgb25jZSB0aGUgcmVjb2duaXRpb24gaGFzIHN0YXJ0ZWQuXG4gICAgICogQHBhcmFtIGVyciAtIENhbGxiYWNrIGludm9rZWQgaW4gY2FzZSBvZiBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBzdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jKGNiLCBlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRTcGVlY2hSZWNvZ25pemVyKTtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RhcnQoUmVjb2duaXRpb25Nb2RlLkNvbnZlcnNhdGlvbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgLy8gcmVwb3J0IHJlc3VsdCB0byBwcm9taXNlLlxuICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVkRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgZXJyKHR5cGVkRXJyb3IubmFtZSArIFwiOiBcIiArIHR5cGVkRXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnIoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlc3Ryb3kgdGhlIHJlY29nbml6ZXIuXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcHMgY29udGludW91cyBzcGVlY2ggcmVjb2duaXRpb24uXG4gICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5zdG9wQ29udGludW91c1JlY29nbml0aW9uQXN5bmNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIGNiIC0gQ2FsbGJhY2sgaW52b2tlZCBvbmNlIHRoZSByZWNvZ25pdGlvbiBoYXMgc3RvcHBlZC5cbiAgICAgKiBAcGFyYW0gZXJyIC0gQ2FsbGJhY2sgaW52b2tlZCBpbiBjYXNlIG9mIGFuIGVycm9yLlxuICAgICAqL1xuICAgIHN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyhjYiwgZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBDb250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkU3BlZWNoUmVjb2duaXplcik7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVkRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgZXJyKHR5cGVkRXJyb3IubmFtZSArIFwiOiBcIiArIHR5cGVkRXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnIoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlc3Ryb3kgdGhlIHJlY29nbml6ZXIuXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHNwZWVjaCByZWNvZ25pdGlvbiB3aXRoIGtleXdvcmQgc3BvdHRpbmcsIHVudGlsXG4gICAgICogc3RvcEtleXdvcmRSZWNvZ25pdGlvbkFzeW5jKCkgaXMgY2FsbGVkLlxuICAgICAqIFVzZXIgbXVzdCBzdWJzY3JpYmUgdG8gZXZlbnRzIHRvIHJlY2VpdmUgcmVjb2duaXRpb24gcmVzdWx0cy5cbiAgICAgKiBOb3RlOiBLZXkgd29yZCBzcG90dGluZyBmdW5jdGlvbmFsaXR5IGlzIG9ubHkgYXZhaWxhYmxlIG9uIHRoZVxuICAgICAqICAgICAgU3BlZWNoIERldmljZXMgU0RLLiBUaGlzIGZ1bmN0aW9uYWxpdHkgaXMgY3VycmVudGx5IG5vdCBpbmNsdWRlZCBpbiB0aGUgU0RLIGl0c2VsZi5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLnN0YXJ0S2V5d29yZFJlY29nbml0aW9uQXN5bmNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtLZXl3b3JkUmVjb2duaXRpb25Nb2RlbH0gbW9kZWwgVGhlIGtleXdvcmQgcmVjb2duaXRpb24gbW9kZWwgdGhhdFxuICAgICAqICAgICAgICBzcGVjaWZpZXMgdGhlIGtleXdvcmQgdG8gYmUgcmVjb2duaXplZC5cbiAgICAgKiBAcGFyYW0gY2IgLSBDYWxsYmFjayBpbnZva2VkIG9uY2UgdGhlIHJlY29nbml0aW9uIGhhcyBzdGFydGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgc3RhcnRLZXl3b3JkUmVjb2duaXRpb25Bc3luYyhtb2RlbCwgY2IsIGVycikge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGwobW9kZWwsIFwibW9kZWxcIik7XG4gICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgZXJyKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcHMgY29udGludW91cyBzcGVlY2ggcmVjb2duaXRpb24uXG4gICAgICogTm90ZTogS2V5IHdvcmQgc3BvdHRpbmcgZnVuY3Rpb25hbGl0eSBpcyBvbmx5IGF2YWlsYWJsZSBvbiB0aGVcbiAgICAgKiAgICAgICBTcGVlY2ggRGV2aWNlcyBTREsuIFRoaXMgZnVuY3Rpb25hbGl0eSBpcyBjdXJyZW50bHkgbm90IGluY2x1ZGVkIGluIHRoZSBTREsgaXRzZWxmLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUuc3RvcEtleXdvcmRSZWNvZ25pdGlvbkFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIGludm9rZWQgb25jZSB0aGUgcmVjb2duaXRpb24gaGFzIHN0b3BwZWQuXG4gICAgICogQHBhcmFtIGVyciAtIENhbGxiYWNrIGludm9rZWQgaW4gY2FzZSBvZiBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBzdG9wS2V5d29yZFJlY29nbml0aW9uQXN5bmMoY2IsIGVycikge1xuICAgICAgICBpZiAoISFjYikge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBjbG9zZXMgYWxsIGV4dGVybmFsIHJlc291cmNlcyBoZWxkIGJ5IGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5jbG9zZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZEaXNwb3NlZCh0aGlzLnByaXZEaXNwb3NlZFNwZWVjaFJlY29nbml6ZXIpO1xuICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc3Bvc2VzIGFueSByZXNvdXJjZXMgaGVsZCBieSB0aGUgb2JqZWN0LlxuICAgICAqIEBtZW1iZXIgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUuZGlzcG9zZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRpc3Bvc2luZyAtIHRydWUgaWYgZGlzcG9zaW5nIHRoZSBvYmplY3QuXG4gICAgICovXG4gICAgZGlzcG9zZShkaXNwb3NpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMucHJpdkRpc3Bvc2VkU3BlZWNoUmVjb2duaXplcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwb3NpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICB0aGlzLnByaXZEaXNwb3NlZFNwZWVjaFJlY29nbml6ZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoZGlzcG9zaW5nKTtcbiAgICB9XG4gICAgY3JlYXRlUmVjb2duaXplckNvbmZpZyhzcGVlY2hDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvZ25pemVyQ29uZmlnKHNwZWVjaENvbmZpZywgdGhpcy5wcm9wZXJ0aWVzKTtcbiAgICB9XG4gICAgY3JlYXRlU2VydmljZVJlY29nbml6ZXIoYXV0aGVudGljYXRpb24sIGNvbm5lY3Rpb25GYWN0b3J5LCBhdWRpb0NvbmZpZywgcmVjb2duaXplckNvbmZpZykge1xuICAgICAgICBjb25zdCBjb25maWdJbXBsID0gYXVkaW9Db25maWc7XG4gICAgICAgIHJldHVybiBuZXcgU3BlZWNoU2VydmljZVJlY29nbml6ZXIoYXV0aGVudGljYXRpb24sIGNvbm5lY3Rpb25GYWN0b3J5LCBjb25maWdJbXBsLCByZWNvZ25pemVyQ29uZmlnLCB0aGlzKTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwZWVjaFJlY29nbml6ZXIuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEZvcmNlRGljdGF0aW9uUHJvcGVydHlOYW1lLCBPdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUsIFNlcnZpY2VQcm9wZXJ0aWVzUHJvcGVydHlOYW1lIH0gZnJvbSBcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiO1xuaW1wb3J0IHsgQ29udHJhY3RzIH0gZnJvbSBcIi4vQ29udHJhY3RzXCI7XG5pbXBvcnQgeyBPdXRwdXRGb3JtYXQsIFByb2Zhbml0eU9wdGlvbiwgUHJvcGVydHlDb2xsZWN0aW9uLCBQcm9wZXJ0eUlkLCBTcGVlY2hDb25maWcsIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuLyoqXG4gKiBTcGVlY2ggdHJhbnNsYXRpb24gY29uZmlndXJhdGlvbi5cbiAqIEBjbGFzcyBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ1xuICovXG5leHBvcnQgY2xhc3MgU3BlZWNoVHJhbnNsYXRpb25Db25maWcgZXh0ZW5kcyBTcGVlY2hDb25maWcge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgcmVjb2duaXplciBjb25maWcuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBpbnN0YW5jZSBvZiBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZyByZXR1cm5lZCBieSBwYXNzaW5nIGEgc3Vic2NyaXB0aW9uIGtleSBhbmQgc2VydmljZSByZWdpb24uXG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZy5mcm9tU3Vic2NyaXB0aW9uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJzY3JpcHRpb25LZXkgLSBUaGUgc3Vic2NyaXB0aW9uIGtleS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaW9uIC0gVGhlIHJlZ2lvbiBuYW1lIChzZWUgdGhlIDxhIGhyZWY9XCJodHRwczovL2FrYS5tcy9jc3NwZWVjaC9yZWdpb25cIj5yZWdpb24gcGFnZTwvYT4pLlxuICAgICAqIEByZXR1cm5zIHtTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ30gVGhlIHNwZWVjaCB0cmFuc2xhdGlvbiBjb25maWcuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21TdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uS2V5LCByZWdpb24pIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHN1YnNjcmlwdGlvbktleSwgXCJzdWJzY3JpcHRpb25LZXlcIik7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShyZWdpb24sIFwicmVnaW9uXCIpO1xuICAgICAgICBjb25zdCByZXQgPSBuZXcgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsKCk7XG4gICAgICAgIHJldC5wcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fS2V5LCBzdWJzY3JpcHRpb25LZXkpO1xuICAgICAgICByZXQucHJvcGVydGllcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIGluc3RhbmNlIG9mIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnIHJldHVybmVkIGJ5IHBhc3NpbmcgYXV0aG9yaXphdGlvbiB0b2tlbiBhbmQgc2VydmljZSByZWdpb24uXG4gICAgICogTm90ZTogVGhlIGNhbGxlciBuZWVkcyB0byBlbnN1cmUgdGhhdCB0aGUgYXV0aG9yaXphdGlvbiB0b2tlbiBpcyB2YWxpZC4gQmVmb3JlIHRoZSBhdXRob3JpemF0aW9uIHRva2VuXG4gICAgICogICAgICAgZXhwaXJlcywgdGhlIGNhbGxlciBuZWVkcyB0byByZWZyZXNoIGl0IGJ5IHNldHRpbmcgdGhlIHByb3BlcnR5IGF1dGhvcml6YXRpb25Ub2tlbiB3aXRoIGEgbmV3XG4gICAgICogICAgICAgdmFsaWQgdG9rZW4uIE90aGVyd2lzZSwgYWxsIHRoZSByZWNvZ25pemVycyBjcmVhdGVkIGJ5IHRoaXMgU3BlZWNoVHJhbnNsYXRpb25Db25maWcgaW5zdGFuY2VcbiAgICAgKiAgICAgICB3aWxsIGVuY291bnRlciBlcnJvcnMgZHVyaW5nIHJlY29nbml0aW9uLlxuICAgICAqIEFzIGNvbmZpZ3VyYXRpb24gdmFsdWVzIGFyZSBjb3BpZWQgd2hlbiBjcmVhdGluZyBhIG5ldyByZWNvZ25pemVyLCB0aGUgbmV3IHRva2VuIHZhbHVlIHdpbGwgbm90IGFwcGx5XG4gICAgICogdG8gcmVjb2duaXplcnMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBjcmVhdGVkLlxuICAgICAqIEZvciByZWNvZ25pemVycyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkIGJlZm9yZSwgeW91IG5lZWQgdG8gc2V0IGF1dGhvcml6YXRpb24gdG9rZW4gb2YgdGhlIGNvcnJlc3BvbmRpbmcgcmVjb2duaXplclxuICAgICAqIHRvIHJlZnJlc2ggdGhlIHRva2VuLiBPdGhlcndpc2UsIHRoZSByZWNvZ25pemVycyB3aWxsIGVuY291bnRlciBlcnJvcnMgZHVyaW5nIHJlY29nbml0aW9uLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoVHJhbnNsYXRpb25Db25maWcuZnJvbUF1dGhvcml6YXRpb25Ub2tlblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXV0aG9yaXphdGlvblRva2VuIC0gVGhlIGF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbiAtIFRoZSByZWdpb24gbmFtZSAoc2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9ha2EubXMvY3NzcGVlY2gvcmVnaW9uXCI+cmVnaW9uIHBhZ2U8L2E+KS5cbiAgICAgKiBAcmV0dXJucyB7U3BlZWNoVHJhbnNsYXRpb25Db25maWd9IFRoZSBzcGVlY2ggdHJhbnNsYXRpb24gY29uZmlnLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tQXV0aG9yaXphdGlvblRva2VuKGF1dGhvcml6YXRpb25Ub2tlbiwgcmVnaW9uKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShhdXRob3JpemF0aW9uVG9rZW4sIFwiYXV0aG9yaXphdGlvblRva2VuXCIpO1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UocmVnaW9uLCBcInJlZ2lvblwiKTtcbiAgICAgICAgY29uc3QgcmV0ID0gbmV3IFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbCgpO1xuICAgICAgICByZXQucHJvcGVydGllcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuLCBhdXRob3JpemF0aW9uVG9rZW4pO1xuICAgICAgICByZXQucHJvcGVydGllcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgc3BlZWNoIHRyYW5zbGF0aW9uIGNvbmZpZyB3aXRoIHNwZWNpZmllZCBlbmRwb2ludCBhbmQgc3Vic2NyaXB0aW9uIGtleS5cbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBvbmx5IGZvciB1c2VycyB3aG8gdXNlIGEgbm9uLXN0YW5kYXJkIHNlcnZpY2UgZW5kcG9pbnQgb3IgcGFyYW10ZXJzLlxuICAgICAqIE5vdGU6IFRoZSBxdWVyeSBwcm9wZXJ0aWVzIHNwZWNpZmllZCBpbiB0aGUgZW5kcG9pbnQgVVJMIGFyZSBub3QgY2hhbmdlZCwgZXZlbiBpZiB0aGV5IGFyZVxuICAgICAqICAgICAgIHNldCBieSBhbnkgb3RoZXIgQVBJcy4gRm9yIGV4YW1wbGUsIGlmIGxhbmd1YWdlIGlzIGRlZmluZWQgaW4gdGhlIHVyaSBhcyBxdWVyeSBwYXJhbWV0ZXJcbiAgICAgKiAgICAgICBcImxhbmd1YWdlPWRlLURFXCIsIGFuZCBhbHNvIHNldCBieSB0aGUgc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSBwcm9wZXJ0eSwgdGhlIGxhbmd1YWdlXG4gICAgICogICAgICAgc2V0dGluZyBpbiB1cmkgdGFrZXMgcHJlY2VkZW5jZSwgYW5kIHRoZSBlZmZlY3RpdmUgbGFuZ3VhZ2UgaXMgXCJkZS1ERVwiLlxuICAgICAqIE9ubHkgdGhlIHByb3BlcnRpZXMgdGhhdCBhcmUgbm90IHNwZWNpZmllZCBpbiB0aGUgZW5kcG9pbnQgVVJMIGNhbiBiZSBzZXQgYnkgb3RoZXIgQVBJcy5cbiAgICAgKiBOb3RlOiBUbyB1c2UgYXV0aG9yaXphdGlvbiB0b2tlbiB3aXRoIGZyb21FbmRwb2ludCwgcGFzcyBhbiBlbXB0eSBzdHJpbmcgdG8gdGhlIHN1YnNjcmlwdGlvbktleSBpbiB0aGVcbiAgICAgKiAgICAgICBmcm9tRW5kcG9pbnQgbWV0aG9kLCBhbmQgdGhlbiBzZXQgYXV0aG9yaXphdGlvblRva2VuPVwidG9rZW5cIiBvbiB0aGUgY3JlYXRlZCBTcGVlY2hDb25maWcgaW5zdGFuY2UgdG9cbiAgICAgKiAgICAgICB1c2UgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZy5mcm9tRW5kcG9pbnRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtVUkx9IGVuZHBvaW50IC0gVGhlIHNlcnZpY2UgZW5kcG9pbnQgdG8gY29ubmVjdCB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3Vic2NyaXB0aW9uS2V5IC0gVGhlIHN1YnNjcmlwdGlvbiBrZXkuXG4gICAgICogQHJldHVybnMge1NwZWVjaFRyYW5zbGF0aW9uQ29uZmlnfSBBIHNwZWVjaCBjb25maWcgaW5zdGFuY2UuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21FbmRwb2ludChlbmRwb2ludCwgc3Vic2NyaXB0aW9uS2V5KSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbChlbmRwb2ludCwgXCJlbmRwb2ludFwiKTtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsKHN1YnNjcmlwdGlvbktleSwgXCJzdWJzY3JpcHRpb25LZXlcIik7XG4gICAgICAgIGNvbnN0IHJldCA9IG5ldyBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwoKTtcbiAgICAgICAgcmV0LnByb3BlcnRpZXMuc2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludCwgZW5kcG9pbnQuaHJlZik7XG4gICAgICAgIHJldC5wcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fS2V5LCBzdWJzY3JpcHRpb25LZXkpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIEBjbGFzcyBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGxcbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG5leHBvcnQgY2xhc3MgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsIGV4dGVuZHMgU3BlZWNoVHJhbnNsYXRpb25Db25maWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzID0gbmV3IFByb3BlcnR5Q29sbGVjdGlvbigpO1xuICAgICAgICB0aGlzLm91dHB1dEZvcm1hdCA9IE91dHB1dEZvcm1hdC5TaW1wbGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgYXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICAgKiBJZiB0aGlzIGlzIHNldCwgc3Vic2NyaXB0aW9uIGtleSBpcyBpZ25vcmVkLlxuICAgICAqIFVzZXIgbmVlZHMgdG8gbWFrZSBzdXJlIHRoZSBwcm92aWRlZCBhdXRob3JpemF0aW9uIHRva2VuIGlzIHZhbGlkIGFuZCBub3QgZXhwaXJlZC5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUuYXV0aG9yaXphdGlvblRva2VuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBhdXRob3JpemF0aW9uIHRva2VuLlxuICAgICAqL1xuICAgIHNldCBhdXRob3JpemF0aW9uVG9rZW4odmFsdWUpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHZhbHVlLCBcInZhbHVlXCIpO1xuICAgICAgICB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVG9rZW4sIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSBzcGVlY2ggcmVjb2duaXRpb24gbGFuZ3VhZ2UuXG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLnNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIGF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICovXG4gICAgc2V0IHNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UodmFsdWUpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHZhbHVlLCBcInZhbHVlXCIpO1xuICAgICAgICB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBtZW1iZXIgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZS5zdWJzY3JpcHRpb25LZXlcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0IHN1YnNjcmlwdGlvbktleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZFtQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0tleV0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBvdXRwdXQgZm9ybWF0XG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLm91dHB1dEZvcm1hdFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXQgb3V0cHV0Rm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gT3V0cHV0Rm9ybWF0W3RoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuZ2V0UHJvcGVydHkoT3V0cHV0Rm9ybWF0UHJvcGVydHlOYW1lLCB1bmRlZmluZWQpXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIHRoZSBvdXRwdXQgZm9ybWF0XG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLm91dHB1dEZvcm1hdFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZXQgb3V0cHV0Rm9ybWF0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuc2V0UHJvcGVydHkoT3V0cHV0Rm9ybWF0UHJvcGVydHlOYW1lLCBPdXRwdXRGb3JtYXRbdmFsdWVdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZW5kcG9pbnQgaWQuXG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLmVuZHBvaW50SWRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0IGVuZHBvaW50SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnRJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgZW5kcG9pbnQgaWQuXG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLmVuZHBvaW50SWRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2V0IGVuZHBvaW50SWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoUHJvcGVydGllcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50LCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhICh0ZXh0KSB0YXJnZXQgbGFuZ3VhZ2UgdG8gdHJhbnNsYXRlIGludG8uXG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLmFkZFRhcmdldExhbmd1YWdlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBsYW5ndWFnZSBzdWNoIGFzIGRlLURFXG4gICAgICovXG4gICAgYWRkVGFyZ2V0TGFuZ3VhZ2UodmFsdWUpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHZhbHVlLCBcInZhbHVlXCIpO1xuICAgICAgICBjb25zdCBsYW5ndWFnZXMgPSB0aGlzLnRhcmdldExhbmd1YWdlcztcbiAgICAgICAgbGFuZ3VhZ2VzLnB1c2godmFsdWUpO1xuICAgICAgICB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Ub0xhbmd1YWdlcywgbGFuZ3VhZ2VzLmpvaW4oXCIsXCIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgKHRleHQpIHRhcmdldCBsYW5ndWFnZSB0byB0cmFuc2xhdGUgaW50by5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUudGFyZ2V0TGFuZ3VhZ2VzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBsYW5ndWFnZSBzdWNoIGFzIGRlLURFXG4gICAgICovXG4gICAgZ2V0IHRhcmdldExhbmd1YWdlcygpIHtcbiAgICAgICAgaWYgKHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblRvTGFuZ3VhZ2VzLCB1bmRlZmluZWQpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Ub0xhbmd1YWdlcykuc3BsaXQoXCIsXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZvaWNlIG5hbWUuXG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLnZvaWNlTmFtZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXQgdm9pY2VOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkW1Byb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Wb2ljZV0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIHZvaWNlIG9mIHRoZSB0cmFuc2xhdGVkIGxhbmd1YWdlLCBlbmFibGUgdm9pY2Ugc3ludGhlc2lzIG91dHB1dC5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUudm9pY2VOYW1lXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBuYW1lIG9mIHRoZSB2b2ljZS5cbiAgICAgKi9cbiAgICBzZXQgdm9pY2VOYW1lKHZhbHVlKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZSh2YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoUHJvcGVydGllcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVm9pY2UsIHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgdGhlIHJlZ2lvbi5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUucmVnaW9uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSByZWdpb24uXG4gICAgICovXG4gICAgZ2V0IHJlZ2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWdpb24pO1xuICAgIH1cbiAgICBzZXRQcm94eShwcm94eUhvc3ROYW1lLCBwcm94eVBvcnQsIHByb3h5VXNlck5hbWUsIHByb3h5UGFzc3dvcmQpIHtcbiAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkW1Byb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlIb3N0TmFtZV0sIHByb3h5SG9zdE5hbWUpO1xuICAgICAgICB0aGlzLnNldFByb3BlcnR5KFByb3BlcnR5SWRbUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBvcnRdLCBwcm94eVBvcnQpO1xuICAgICAgICB0aGlzLnNldFByb3BlcnR5KFByb3BlcnR5SWRbUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVVzZXJOYW1lXSwgcHJveHlVc2VyTmFtZSk7XG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoUHJvcGVydHlJZFtQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5UGFzc3dvcmRdLCBwcm94eVBhc3N3b3JkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhbiBhcmJpdHJhcnkgcHJvcGVydHkgdmFsdWUuXG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLmdldFByb3BlcnR5XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkZWYgLSBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgaW4gY2FzZSBpdCBpcyBub3Qgc2V0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkuXG4gICAgICovXG4gICAgZ2V0UHJvcGVydHkobmFtZSwgZGVmKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLmdldFByb3BlcnR5KG5hbWUsIGRlZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyBhbiBhcmJpdHJhcnkgcHJvcGVydHkgdmFsdWUuXG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLnNldFByb3BlcnR5XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkuXG4gICAgICovXG4gICAgc2V0UHJvcGVydHkobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoUHJvcGVydGllcy5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGFjY2VzcyB0byBjdXN0b20gcHJvcGVydGllcy5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUucHJvcGVydGllc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7UHJvcGVydHlDb2xsZWN0aW9ufSBUaGUgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc3Bvc2Ugb2YgYXNzb2NpYXRlZCByZXNvdXJjZXMuXG4gICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLmNsb3NlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldFNlcnZpY2VQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgY2hhbm5lbCkge1xuICAgICAgICBjb25zdCBjdXJyZW50UHJvcGVydGllcyA9IEpTT04ucGFyc2UodGhpcy5wcml2U3BlZWNoUHJvcGVydGllcy5nZXRQcm9wZXJ0eShTZXJ2aWNlUHJvcGVydGllc1Byb3BlcnR5TmFtZSwgXCJ7fVwiKSk7XG4gICAgICAgIGN1cnJlbnRQcm9wZXJ0aWVzW25hbWVdID0gdmFsdWU7XG4gICAgICAgIHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuc2V0UHJvcGVydHkoU2VydmljZVByb3BlcnRpZXNQcm9wZXJ0eU5hbWUsIEpTT04uc3RyaW5naWZ5KGN1cnJlbnRQcm9wZXJ0aWVzKSk7XG4gICAgfVxuICAgIHNldFByb2Zhbml0eShwcm9mYW5pdHkpIHtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoUHJvcGVydGllcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VSZXNwb25zZV9Qcm9mYW5pdHlPcHRpb24sIFByb2Zhbml0eU9wdGlvbltwcm9mYW5pdHldKTtcbiAgICB9XG4gICAgZW5hYmxlQXVkaW9Mb2dnaW5nKCkge1xuICAgICAgICB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5hYmxlQXVkaW9Mb2dnaW5nLCBcInRydWVcIik7XG4gICAgfVxuICAgIHJlcXVlc3RXb3JkTGV2ZWxUaW1lc3RhbXBzKCkge1xuICAgICAgICB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX1JlcXVlc3RXb3JkTGV2ZWxUaW1lc3RhbXBzLCBcInRydWVcIik7XG4gICAgfVxuICAgIGVuYWJsZURpY3RhdGlvbigpIHtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoUHJvcGVydGllcy5zZXRQcm9wZXJ0eShGb3JjZURpY3RhdGlvblByb3BlcnR5TmFtZSwgXCJ0cnVlXCIpO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoVHJhbnNsYXRpb25Db25maWcuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogRGVmaW5lIHBheWxvYWQgb2Ygc3BlZWNoIHJlY29nbml0aW9uIGNhbmNlbGVkIHJlc3VsdCBldmVudHMuXG4gKiBAY2xhc3MgVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3Mge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlc3Npb25pZCAtIFRoZSBzZXNzaW9uIGlkLlxuICAgICAqIEBwYXJhbSB7Q2FuY2VsbGF0aW9uUmVhc29ufSBjYW5jZWxsYXRpb25SZWFzb24gLSBUaGUgY2FuY2VsbGF0aW9uIHJlYXNvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JEZXRhaWxzIC0gRXJyb3IgZGV0YWlscywgaWYgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtUcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0fSByZXN1bHQgLSBUaGUgcmVzdWx0LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlc3Npb25pZCwgY2FuY2VsbGF0aW9uUmVhc29uLCBlcnJvckRldGFpbHMsIGVycm9yQ29kZSwgcmVzdWx0KSB7XG4gICAgICAgIHRoaXMucHJpdkNhbmNlbFJlYXNvbiA9IGNhbmNlbGxhdGlvblJlYXNvbjtcbiAgICAgICAgdGhpcy5wcml2RXJyb3JEZXRhaWxzID0gZXJyb3JEZXRhaWxzO1xuICAgICAgICB0aGlzLnByaXZSZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgIHRoaXMucHJpdlNlc3Npb25JZCA9IHNlc3Npb25pZDtcbiAgICAgICAgdGhpcy5wcml2RXJyb3JDb2RlID0gZXJyb3JDb2RlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHJlY29nbml0aW9uIHJlc3VsdC5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUucmVzdWx0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtUcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0fSB0aGUgcmVjb2duaXRpb24gcmVzdWx0LlxuICAgICAqL1xuICAgIGdldCByZXN1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgc2Vzc2lvbiBpZGVudGlmaWVyLlxuICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLnByb3RvdHlwZS5zZXNzaW9uSWRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHNlc3Npb24gaWRlbnRpZmllci5cbiAgICAgKi9cbiAgICBnZXQgc2Vzc2lvbklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U2Vzc2lvbklkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHRoZSByZWNvZ25pdGlvbiB3YXMgY2FuY2VsZWQuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MucHJvdG90eXBlLnJlYXNvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7Q2FuY2VsbGF0aW9uUmVhc29ufSBTcGVjaWZpZXMgdGhlIHJlYXNvbiBjYW5jZWxlZC5cbiAgICAgKi9cbiAgICBnZXQgcmVhc29uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2Q2FuY2VsUmVhc29uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZXJyb3IgY29kZSBpbiBjYXNlIG9mIGFuIHVuc3VjY2Vzc2Z1bCByZWNvZ25pdGlvbi5cbiAgICAgKiBBZGRlZCBpbiB2ZXJzaW9uIDEuMS4wLlxuICAgICAqIEByZXR1cm4gQW4gZXJyb3IgY29kZSB0aGF0IHJlcHJlc2VudHMgdGhlIGVycm9yIHJlYXNvbi5cbiAgICAgKi9cbiAgICBnZXQgZXJyb3JDb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2RXJyb3JDb2RlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbiBjYXNlIG9mIGFuIHVuc3VjY2Vzc2Z1bCByZWNvZ25pdGlvbiwgcHJvdmlkZXMgZGV0YWlscyBvZiB0aGUgb2NjdXJyZWQgZXJyb3IuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MucHJvdG90eXBlLmVycm9yRGV0YWlsc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGVycm9yIGRldGFpbHMuXG4gICAgICovXG4gICAgZ2V0IGVycm9yRGV0YWlscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yRGV0YWlscztcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUmVjb2duaXRpb25FdmVudEFyZ3MgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vKipcbiAqIFRyYW5zbGF0aW9uIHRleHQgcmVzdWx0IGV2ZW50IGFyZ3VtZW50cy5cbiAqIEBjbGFzcyBUcmFuc2xhdGlvblJlY29nbml0aW9uRXZlbnRBcmdzXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvblJlY29nbml0aW9uRXZlbnRBcmdzIGV4dGVuZHMgUmVjb2duaXRpb25FdmVudEFyZ3Mge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtUcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0fSByZXN1bHQgLSBUaGUgdHJhbnNsYXRpb24gcmVjb2duaXRpb24gcmVzdWx0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZXNzaW9uSWQgLSBUaGUgc2Vzc2lvbiBpZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZXN1bHQsIG9mZnNldCwgc2Vzc2lvbklkKSB7XG4gICAgICAgIHN1cGVyKG9mZnNldCwgc2Vzc2lvbklkKTtcbiAgICAgICAgdGhpcy5wcml2UmVzdWx0ID0gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHJlY29nbml0aW9uIHJlc3VsdC5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3MucHJvdG90eXBlLnJlc3VsdFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7VHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdH0gdGhlIHJlY29nbml0aW9uIHJlc3VsdC5cbiAgICAgKi9cbiAgICBnZXQgcmVzdWx0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVzdWx0O1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRpb25SZWNvZ25pdGlvbkV2ZW50QXJncy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgU3BlZWNoUmVjb2duaXRpb25SZXN1bHQgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vKipcbiAqIFRyYW5zbGF0aW9uIHRleHQgcmVzdWx0LlxuICogQGNsYXNzIFRyYW5zbGF0aW9uUmVjb2duaXRpb25SZXN1bHRcbiAqL1xuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9uUmVjb2duaXRpb25SZXN1bHQgZXh0ZW5kcyBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1RyYW5zbGF0aW9uc30gdHJhbnNsYXRpb25zIC0gVGhlIHRyYW5zbGF0aW9ucy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVzdWx0SWQgLSBUaGUgcmVzdWx0IGlkLlxuICAgICAqIEBwYXJhbSB7UmVzdWx0UmVhc29ufSByZWFzb24gLSBUaGUgcmVhc29uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGhlIHJlY29nbml6ZWQgdGV4dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gLSBUaGUgZHVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgaW50byB0aGUgc3RyZWFtLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvckRldGFpbHMgLSBFcnJvciBkZXRhaWxzLCBpZiBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ganNvbiAtIEFkZGl0aW9uYWwgSnNvbiwgaWYgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtQcm9wZXJ0eUNvbGxlY3Rpb259IHByb3BlcnRpZXMgLSBBZGRpdGlvbmFsIHByb3BlcnRpZXMsIGlmIHByb3ZpZGVkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRyYW5zbGF0aW9ucywgcmVzdWx0SWQsIHJlYXNvbiwgdGV4dCwgZHVyYXRpb24sIG9mZnNldCwgZXJyb3JEZXRhaWxzLCBqc29uLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKHJlc3VsdElkLCByZWFzb24sIHRleHQsIGR1cmF0aW9uLCBvZmZzZXQsIGVycm9yRGV0YWlscywganNvbiwgcHJvcGVydGllcyk7XG4gICAgICAgIHRoaXMucHJpdlRyYW5zbGF0aW9ucyA9IHRyYW5zbGF0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJlc2VudHMgdGhlIHRyYW5zbGF0aW9uIHJlc3VsdHMuIEVhY2ggaXRlbSBpbiB0aGUgZGljdGlvbmFyeSByZXByZXNlbnRzXG4gICAgICogYSB0cmFuc2xhdGlvbiByZXN1bHQgaW4gb25lIG9mIHRhcmdldCBsYW5ndWFnZXMsIHdoZXJlIHRoZSBrZXkgaXMgdGhlIG5hbWVcbiAgICAgKiBvZiB0aGUgdGFyZ2V0IGxhbmd1YWdlLCBpbiBCQ1AtNDcgZm9ybWF0LCBhbmQgdGhlIHZhbHVlIGlzIHRoZSB0cmFuc2xhdGlvblxuICAgICAqIHRleHQgaW4gdGhlIHNwZWNpZmllZCBsYW5ndWFnZS5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLnRyYW5zbGF0aW9uc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7VHJhbnNsYXRpb25zfSB0aGUgY3VycmVudCB0cmFuc2xhdGlvbiBtYXAgdGhhdCBob2xkcyBhbGwgdHJhbnNsYXRpb25zIHJlcXVlc3RlZC5cbiAgICAgKi9cbiAgICBnZXQgdHJhbnNsYXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2VHJhbnNsYXRpb25zO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdC5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgUmVjb2duaXRpb25Nb2RlLCBSZWNvZ25pemVyQ29uZmlnLCBUcmFuc2xhdGlvbkNvbm5lY3Rpb25GYWN0b3J5LCBUcmFuc2xhdGlvblNlcnZpY2VSZWNvZ25pemVyLCB9IGZyb20gXCIuLi9jb21tb24uc3BlZWNoL0V4cG9ydHNcIjtcbmltcG9ydCB7IENvbnRyYWN0cyB9IGZyb20gXCIuL0NvbnRyYWN0c1wiO1xuaW1wb3J0IHsgUHJvcGVydHlJZCwgUmVjb2duaXplciwgfSBmcm9tIFwiLi9FeHBvcnRzXCI7XG4vKipcbiAqIFRyYW5zbGF0aW9uIHJlY29nbml6ZXJcbiAqIEBjbGFzcyBUcmFuc2xhdGlvblJlY29nbml6ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9uUmVjb2duaXplciBleHRlbmRzIFJlY29nbml6ZXIge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoZSBUcmFuc2xhdGlvblJlY29nbml6ZXIuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ30gc3BlZWNoQ29uZmlnIC0gU2V0IG9mIHByb3BlcnRpZXMgdG8gY29uZmlndXJlIHRoaXMgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge0F1ZGlvQ29uZmlnfSBhdWRpb0NvbmZpZyAtIEFuIG9wdGlvbmFsIGF1ZGlvIGNvbmZpZyBhc3NvY2lhdGVkIHdpdGggdGhlIHJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzcGVlY2hDb25maWcsIGF1ZGlvQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZ0ltcGwgPSBzcGVlY2hDb25maWc7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbChjb25maWdJbXBsLCBcInNwZWVjaENvbmZpZ1wiKTtcbiAgICAgICAgc3VwZXIoYXVkaW9Db25maWcsIGNvbmZpZ0ltcGwucHJvcGVydGllcywgbmV3IFRyYW5zbGF0aW9uQ29ubmVjdGlvbkZhY3RvcnkoKSk7XG4gICAgICAgIHRoaXMucHJpdkRpc3Bvc2VkVHJhbnNsYXRpb25SZWNvZ25pemVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdlByb3BlcnRpZXMgPSBjb25maWdJbXBsLnByb3BlcnRpZXMuY2xvbmUoKTtcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVm9pY2UsIHVuZGVmaW5lZCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVm9pY2UpLCBQcm9wZXJ0eUlkW1Byb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Wb2ljZV0pO1xuICAgICAgICB9XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZSh0aGlzLnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblRvTGFuZ3VhZ2VzKSwgUHJvcGVydHlJZFtQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVG9MYW5ndWFnZXNdKTtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSksIFByb3BlcnR5SWRbUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2VdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFuZ3VhZ2UgbmFtZSB0aGF0IHdhcyBzZXQgd2hlbiB0aGUgcmVjb2duaXplciB3YXMgY3JlYXRlZC5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBHZXRzIHRoZSBsYW5ndWFnZSBuYW1lIHRoYXQgd2FzIHNldCB3aGVuIHRoZSByZWNvZ25pemVyIHdhcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGdldCBzcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlKCkge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkVHJhbnNsYXRpb25SZWNvZ25pemVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGFyZ2V0IGxhbmd1YWdlcyBmb3IgdHJhbnNsYXRpb24gdGhhdCB3ZXJlIHNldCB3aGVuIHRoZSByZWNvZ25pemVyIHdhcyBjcmVhdGVkLlxuICAgICAqIFRoZSBsYW5ndWFnZSBpcyBzcGVjaWZpZWQgaW4gQkNQLTQ3IGZvcm1hdC4gVGhlIHRyYW5zbGF0aW9uIHdpbGwgcHJvdmlkZSB0cmFuc2xhdGVkIHRleHQgZm9yIGVhY2ggb2YgbGFuZ3VhZ2UuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvblJlY29nbml6ZXIucHJvdG90eXBlLnRhcmdldExhbmd1YWdlc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nW119IEdldHMgdGFyZ2V0IGxhbmd1YWdlcyBmb3IgdHJhbnNsYXRpb24gdGhhdCB3ZXJlIHNldCB3aGVuIHRoZSByZWNvZ25pemVyIHdhcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGdldCB0YXJnZXRMYW5ndWFnZXMoKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRUcmFuc2xhdGlvblJlY29nbml6ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Ub0xhbmd1YWdlcykuc3BsaXQoXCIsXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIG91dHB1dCB2b2ljZS5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUudm9pY2VOYW1lXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBuYW1lIG9mIG91dHB1dCB2b2ljZS5cbiAgICAgKi9cbiAgICBnZXQgdm9pY2VOYW1lKCkge1xuICAgICAgICBDb250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkVHJhbnNsYXRpb25SZWNvZ25pemVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVm9pY2UsIHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4gdXNlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBzZXJ2aWNlLlxuICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25SZWNvZ25pemVyLnByb3RvdHlwZS5hdXRob3JpemF0aW9uVG9rZW5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge3N0cmluZ30gQXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICAgKi9cbiAgICBnZXQgYXV0aG9yaXphdGlvblRva2VuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmdldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVG9rZW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4gdXNlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBzZXJ2aWNlLlxuICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25SZWNvZ25pemVyLnByb3RvdHlwZS5hdXRob3JpemF0aW9uVG9rZW5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gQXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICAgKi9cbiAgICBzZXQgYXV0aG9yaXphdGlvblRva2VuKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjb2xsZWN0aW9uIG9mIHByb3BlcnRpZXMgYW5kIHRoZWlyIHZhbHVlcyBkZWZpbmVkIGZvciB0aGlzIFRyYW5zbGF0aW9uUmVjb2duaXplci5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUucHJvcGVydGllc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7UHJvcGVydHlDb2xsZWN0aW9ufSBUaGUgY29sbGVjdGlvbiBvZiBwcm9wZXJ0aWVzIGFuZCB0aGVpciB2YWx1ZXMgZGVmaW5lZCBmb3IgdGhpcyBUcmFuc2xhdGlvblJlY29nbml6ZXIuXG4gICAgICovXG4gICAgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZQcm9wZXJ0aWVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgcmVjb2duaXRpb24gYW5kIHRyYW5zbGF0aW9uLCBhbmQgc3RvcHMgYWZ0ZXIgdGhlIGZpcnN0IHV0dGVyYW5jZSBpcyByZWNvZ25pemVkLlxuICAgICAqIFRoZSB0YXNrIHJldHVybnMgdGhlIHRyYW5zbGF0aW9uIHRleHQgYXMgcmVzdWx0LlxuICAgICAqIE5vdGU6IHJlY29nbml6ZU9uY2VBc3luYyByZXR1cm5zIHdoZW4gdGhlIGZpcnN0IHV0dGVyYW5jZSBoYXMgYmVlbiByZWNvZ25pemVkLCBzbyBpdCBpcyBzdWl0YWJsZW9ubHlcbiAgICAgKiAgICAgICBmb3Igc2luZ2xlIHNob3QgcmVjb2duaXRpb24gbGlrZSBjb21tYW5kIG9yIHF1ZXJ5LiBGb3IgbG9uZy1ydW5uaW5nIHJlY29nbml0aW9uLFxuICAgICAqICAgICAgIHVzZSBzdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jKCkgaW5zdGVhZC5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUucmVjb2duaXplT25jZUFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIHRoYXQgcmVjZWl2ZWQgdGhlIHJlc3VsdCB3aGVuIHRoZSB0cmFuc2xhdGlvbiBoYXMgY29tcGxldGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgcmVjb2duaXplT25jZUFzeW5jKGNiLCBlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRUcmFuc2xhdGlvblJlY29nbml6ZXIpO1xuICAgICAgICAgICAgdGhpcy5pbXBsUmVjb2duaXplclN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdGFydChSZWNvZ25pdGlvbk1vZGUuQ29udmVyc2F0aW9uLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgICAgICBlcnIoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGVycih0eXBlZEVycm9yLm5hbWUgKyBcIjogXCIgKyB0eXBlZEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyByZWNvZ25pdGlvbiBhbmQgdHJhbnNsYXRpb24sIHVudGlsIHN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luYygpIGlzIGNhbGxlZC5cbiAgICAgKiBVc2VyIG11c3Qgc3Vic2NyaWJlIHRvIGV2ZW50cyB0byByZWNlaXZlIHRyYW5zbGF0aW9uIHJlc3VsdHMuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvblJlY29nbml6ZXIucHJvdG90eXBlLnN0YXJ0Q29udGludW91c1JlY29nbml0aW9uQXN5bmNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIGNiIC0gQ2FsbGJhY2sgdGhhdCByZWNlaXZlZCB0aGUgdHJhbnNsYXRpb24gaGFzIHN0YXJ0ZWQuXG4gICAgICogQHBhcmFtIGVyciAtIENhbGxiYWNrIGludm9rZWQgaW4gY2FzZSBvZiBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBzdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jKGNiLCBlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRUcmFuc2xhdGlvblJlY29nbml6ZXIpO1xuICAgICAgICAgICAgdGhpcy5pbXBsUmVjb2duaXplclN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdGFydChSZWNvZ25pdGlvbk1vZGUuQ29udmVyc2F0aW9uLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAvLyByZXBvcnQgcmVzdWx0IHRvIHByb21pc2UuXG4gICAgICAgICAgICBpZiAoISFjYikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyKGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNiID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCEhZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZWRFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBlcnIodHlwZWRFcnJvci5uYW1lICsgXCI6IFwiICsgdHlwZWRFcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRGVzdHJveSB0aGUgcmVjb2duaXplci5cbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9wcyBjb250aW51b3VzIHJlY29nbml0aW9uIGFuZCB0cmFuc2xhdGlvbi5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUuc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIHRoYXQgcmVjZWl2ZWQgdGhlIHRyYW5zbGF0aW9uIGhhcyBzdG9wcGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jKGNiLCBlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRUcmFuc2xhdGlvblJlY29nbml6ZXIpO1xuICAgICAgICAgICAgdGhpcy5pbXBsUmVjb2duaXplclN0b3AoKTtcbiAgICAgICAgICAgIGlmICghIWNiKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGVycih0eXBlZEVycm9yLm5hbWUgKyBcIjogXCIgKyB0eXBlZEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGNsb3NlcyBhbGwgZXh0ZXJuYWwgcmVzb3VyY2VzIGhlbGQgYnkgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRUcmFuc2xhdGlvblJlY29nbml6ZXIpO1xuICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgfVxuICAgIGRpc3Bvc2UoZGlzcG9zaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZEaXNwb3NlZFRyYW5zbGF0aW9uUmVjb2duaXplcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwb3NpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICB0aGlzLnByaXZEaXNwb3NlZFRyYW5zbGF0aW9uUmVjb2duaXplciA9IHRydWU7XG4gICAgICAgICAgICBzdXBlci5kaXNwb3NlKGRpc3Bvc2luZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlUmVjb2duaXplckNvbmZpZyhzcGVlY2hDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvZ25pemVyQ29uZmlnKHNwZWVjaENvbmZpZywgdGhpcy5wcm9wZXJ0aWVzKTtcbiAgICB9XG4gICAgY3JlYXRlU2VydmljZVJlY29nbml6ZXIoYXV0aGVudGljYXRpb24sIGNvbm5lY3Rpb25GYWN0b3J5LCBhdWRpb0NvbmZpZywgcmVjb2duaXplckNvbmZpZykge1xuICAgICAgICBjb25zdCBjb25maWdJbXBsID0gYXVkaW9Db25maWc7XG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNsYXRpb25TZXJ2aWNlUmVjb2duaXplcihhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGNvbmZpZ0ltcGwsIHJlY29nbml6ZXJDb25maWcsIHRoaXMpO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRpb25SZWNvZ25pemVyLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBTZXNzaW9uRXZlbnRBcmdzIH0gZnJvbSBcIi4vRXhwb3J0c1wiO1xuLyoqXG4gKiBUcmFuc2xhdGlvbiBTeW50aGVzaXMgZXZlbnQgYXJndW1lbnRzXG4gKiBAY2xhc3MgVHJhbnNsYXRpb25TeW50aGVzaXNFdmVudEFyZ3NcbiAqL1xuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9uU3ludGhlc2lzRXZlbnRBcmdzIGV4dGVuZHMgU2Vzc2lvbkV2ZW50QXJncyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1RyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0fSByZXN1bHQgLSBUaGUgdHJhbnNsYXRpb24gc3ludGhlc2lzIHJlc3VsdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2Vzc2lvbklkIC0gVGhlIHNlc3Npb24gaWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocmVzdWx0LCBzZXNzaW9uSWQpIHtcbiAgICAgICAgc3VwZXIoc2Vzc2lvbklkKTtcbiAgICAgICAgdGhpcy5wcml2UmVzdWx0ID0gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRyYW5zbGF0aW9uIHN5bnRoZXNpcyByZXN1bHQuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvblN5bnRoZXNpc0V2ZW50QXJncy5wcm90b3R5cGUucmVzdWx0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtUcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdH0gU3BlY2lmaWVzIHRoZSB0cmFuc2xhdGlvbiBzeW50aGVzaXMgcmVzdWx0LlxuICAgICAqL1xuICAgIGdldCByZXN1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZSZXN1bHQ7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvblN5bnRoZXNpc0V2ZW50QXJncy5qcy5tYXBcbiIsIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBEZWZpbmVzIHRyYW5zbGF0aW9uIHN5bnRoZXNpcyByZXN1bHQsIGkuZS4gdGhlIHZvaWNlIG91dHB1dCBvZiB0aGUgdHJhbnNsYXRlZFxuICogdGV4dCBpbiB0aGUgdGFyZ2V0IGxhbmd1YWdlLlxuICogQGNsYXNzIFRyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0XG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1Jlc3VsdFJlYXNvbn0gcmVhc29uIC0gVGhlIHN5bnRoZXNpcyByZWFzb24uXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXVkaW8gLSBUaGUgYXVkaW8gZGF0YS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZWFzb24sIGF1ZGlvKSB7XG4gICAgICAgIHRoaXMucHJpdlJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgdGhpcy5wcml2QXVkaW8gPSBhdWRpbztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlZCB0ZXh0IGluIHRoZSB0YXJnZXQgbGFuZ3VhZ2UuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdC5wcm90b3R5cGUuYXVkaW9cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBUcmFuc2xhdGVkIGF1ZGlvIGluIHRoZSB0YXJnZXQgbGFuZ3VhZ2UuXG4gICAgICovXG4gICAgZ2V0IGF1ZGlvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzeW50aGVzaXMgc3RhdHVzLlxuICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHQucHJvdG90eXBlLnJlYXNvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7UmVzdWx0UmVhc29ufSBUaGUgc3ludGhlc2lzIHN0YXR1cy5cbiAgICAgKi9cbiAgICBnZXQgcmVhc29uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVhc29uO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHQuanMubWFwXG4iLCIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFByb3BlcnR5Q29sbGVjdGlvbiB9IGZyb20gXCIuL0V4cG9ydHNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBjb2xsZWN0aW9uIG9mIHBhcmFtZXRlcnMgYW5kIHRoZWlyIHZhbHVlcy5cbiAqIEBjbGFzcyBUcmFuc2xhdGlvblxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRpb25zIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gVXNlIGFuIFByb3BlcnR5Q29sbGVjdGlvbiBpbnRlcm5hbGx5LCBqdXN0IHdyYXBwaW5nIGl0IHRvIGhpZGUgdGhlIHwgZW51bSBzeW50YXggaXQgaGFzLlxuICAgICAgICB0aGlzLnByaXZNYXAgPSBuZXcgUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhcmFtZXRlciB2YWx1ZSBpbiB0eXBlIFN0cmluZy4gVGhlIHBhcmFtZXRlciBtdXN0IGhhdmUgdGhlIHNhbWUgdHlwZSBhcyBTdHJpbmcuXG4gICAgICogQ3VycmVudGx5IG9ubHkgU3RyaW5nLCBpbnQgYW5kIGJvb2wgYXJlIGFsbG93ZWQuXG4gICAgICogSWYgdGhlIG5hbWUgaXMgbm90IGF2YWlsYWJsZSwgdGhlIHNwZWNpZmllZCBkZWZhdWx0VmFsdWUgaXMgcmV0dXJuZWQuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvbi5wcm90b3R5cGUuZ2V0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRlZiAtIFRoZSBkZWZhdWx0IHZhbHVlIHdoaWNoIGlzIHJldHVybmVkIGlmIHRoZSBwYXJhbWV0ZXIgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIGdldChrZXksIGRlZikge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2TWFwLmdldFByb3BlcnR5KGtleSwgZGVmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgU3RyaW5nIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIgc3BlY2lmaWVkIGJ5IG5hbWUuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvbi5wcm90b3R5cGUuc2V0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5wcml2TWFwLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRpb25zLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwRGVmZXIgPSAoKSA9PiB7XG5cdGNvbnN0IGRlZmVycmVkID0ge307XG5cblx0ZGVmZXJyZWQucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRkZWZlcnJlZC5yZXNvbHZlID0gcmVzb2x2ZTtcblx0XHRkZWZlcnJlZC5yZWplY3QgPSByZWplY3Q7XG5cdH0pO1xuXG5cdHJldHVybiBkZWZlcnJlZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcERlZmVyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9taWNyb3NvZnRDb2duaXRpdmVzZXJ2aWNlc1NwZWVjaCA9IHJlcXVpcmUoXCJtaWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkay9kaXN0cmliL2xpYi9taWNyb3NvZnQuY29nbml0aXZlc2VydmljZXMuc3BlZWNoLnNka1wiKTtcblxuLy8gV2UgYXJlIG9ubHkgaW1wb3J0aW5nIHdoYXQgd2UgbmVlZC5cbnZhciBfZGVmYXVsdCA9IHtcbiAgQXVkaW9Db25maWc6IF9taWNyb3NvZnRDb2duaXRpdmVzZXJ2aWNlc1NwZWVjaC5BdWRpb0NvbmZpZyxcbiAgT3V0cHV0Rm9ybWF0OiBfbWljcm9zb2Z0Q29nbml0aXZlc2VydmljZXNTcGVlY2guT3V0cHV0Rm9ybWF0LFxuICBSZXN1bHRSZWFzb246IF9taWNyb3NvZnRDb2duaXRpdmVzZXJ2aWNlc1NwZWVjaC5SZXN1bHRSZWFzb24sXG4gIFNwZWVjaENvbmZpZzogX21pY3Jvc29mdENvZ25pdGl2ZXNlcnZpY2VzU3BlZWNoLlNwZWVjaENvbmZpZyxcbiAgU3BlZWNoUmVjb2duaXplcjogX21pY3Jvc29mdENvZ25pdGl2ZXNlcnZpY2VzU3BlZWNoLlNwZWVjaFJlY29nbml6ZXJcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwZWVjaFNESy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZVNwZWVjaFJlY29nbml0aW9uUG9ueWZpbGxGcm9tUmVjb2duaXplclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY3JlYXRlU3BlZWNoUmVjb2duaXRpb25Qb255ZmlsbC5jcmVhdGVTcGVlY2hSZWNvZ25pdGlvblBvbnlmaWxsRnJvbVJlY29nbml6ZXI7XG4gIH1cbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZVNwZWVjaFJlY29nbml0aW9uUG9ueWZpbGwgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9TcGVlY2hUb1RleHQvY3JlYXRlU3BlZWNoUmVjb2duaXRpb25Qb255ZmlsbFwiKSk7XG5cbnZhciBfZGVmYXVsdCA9IF9jcmVhdGVTcGVlY2hSZWNvZ25pdGlvblBvbnlmaWxsLmRlZmF1bHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwZWVjaFRvVGV4dC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbi8qIGVzbGludCBjbGFzcy1tZXRob2RzLXVzZS10aGlzOiBcIm9mZlwiICovXG52YXIgX2RlZmF1bHQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBfZGVmYXVsdCk7XG4gICAgdGhpcy5fcGhyYXNlcyA9IFtdO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoX2RlZmF1bHQsIFt7XG4gICAga2V5OiBcImFkZEZyb21TdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRnJvbVN0cmluZygpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSlNHRiBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBocmFzZXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9waHJhc2VzO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0aGlzLl9waHJhc2VzID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fcGhyYXNlcyA9IFt2YWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcHJvdmlkZWQgdmFsdWUgaXMgbm90IGFuIGFycmF5IG9yIG9mIHR5cGUgJ3N0cmluZydcIik7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBfZGVmYXVsdDtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGVlY2hHcmFtbWFyTGlzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxudmFyIF9hcnJheVRvTWFwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vVXRpbC9hcnJheVRvTWFwXCIpKTtcblxudmFyIF9TcGVlY2hTREsgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9TcGVlY2hTREtcIikpO1xuXG52YXIgX1NwZWVjaFNESyRSZXN1bHRSZWFzID0gX1NwZWVjaFNESy5kZWZhdWx0LlJlc3VsdFJlYXNvbixcbiAgICBSZWNvZ25pemluZ1NwZWVjaCA9IF9TcGVlY2hTREskUmVzdWx0UmVhcy5SZWNvZ25pemluZ1NwZWVjaCxcbiAgICBSZWNvZ25pemVkU3BlZWNoID0gX1NwZWVjaFNESyRSZXN1bHRSZWFzLlJlY29nbml6ZWRTcGVlY2g7XG5cbmZ1bmN0aW9uIF9kZWZhdWx0KHJlc3VsdCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJG1heEFsdGVybmF0aXZlcyA9IF9yZWYubWF4QWx0ZXJuYXRpdmVzLFxuICAgICAgbWF4QWx0ZXJuYXRpdmVzID0gX3JlZiRtYXhBbHRlcm5hdGl2ZXMgPT09IHZvaWQgMCA/IEluZmluaXR5IDogX3JlZiRtYXhBbHRlcm5hdGl2ZXMsXG4gICAgICBfcmVmJHRleHROb3JtYWxpemF0aW8gPSBfcmVmLnRleHROb3JtYWxpemF0aW9uLFxuICAgICAgdGV4dE5vcm1hbGl6YXRpb24gPSBfcmVmJHRleHROb3JtYWxpemF0aW8gPT09IHZvaWQgMCA/ICdkaXNwbGF5JyA6IF9yZWYkdGV4dE5vcm1hbGl6YXRpbztcblxuICBpZiAocmVzdWx0LnJlYXNvbiA9PT0gUmVjb2duaXppbmdTcGVlY2ggfHwgcmVzdWx0LnJlYXNvbiA9PT0gUmVjb2duaXplZFNwZWVjaCAmJiAhcmVzdWx0Lmpzb24uTkJlc3QpIHtcbiAgICB2YXIgcmVzdWx0TGlzdCA9IFt7XG4gICAgICBjb25maWRlbmNlOiAuNSxcbiAgICAgIHRyYW5zY3JpcHQ6IHJlc3VsdC50ZXh0XG4gICAgfV07XG5cbiAgICBpZiAocmVzdWx0LnJlYXNvbiA9PT0gUmVjb2duaXplZFNwZWVjaCkge1xuICAgICAgcmVzdWx0TGlzdC5pc0ZpbmFsID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0TGlzdDtcbiAgfSBlbHNlIGlmIChyZXN1bHQucmVhc29uID09PSBSZWNvZ25pemVkU3BlZWNoKSB7XG4gICAgdmFyIF9yZXN1bHRMaXN0ID0gKDAsIF9hcnJheVRvTWFwLmRlZmF1bHQpKChyZXN1bHQuanNvbi5OQmVzdCB8fCBbXSkuc2xpY2UoMCwgbWF4QWx0ZXJuYXRpdmVzKS5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgY29uZmlkZW5jZSA9IF9yZWYyLkNvbmZpZGVuY2UsXG4gICAgICAgICAgZGlzcGxheSA9IF9yZWYyLkRpc3BsYXksXG4gICAgICAgICAgaXRuID0gX3JlZjIuSVROLFxuICAgICAgICAgIGxleGljYWwgPSBfcmVmMi5MZXhpY2FsLFxuICAgICAgICAgIG1hc2tlZElUTiA9IF9yZWYyLk1hc2tlZElUTjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbmZpZGVuY2U6IGNvbmZpZGVuY2UsXG4gICAgICAgIHRyYW5zY3JpcHQ6IHRleHROb3JtYWxpemF0aW9uID09PSAnaXRuJyA/IGl0biA6IHRleHROb3JtYWxpemF0aW9uID09PSAnbGV4aWNhbCcgPyBsZXhpY2FsIDogdGV4dE5vcm1hbGl6YXRpb24gPT09ICdtYXNrZWRpdG4nID8gbWFza2VkSVROIDogZGlzcGxheVxuICAgICAgfTtcbiAgICB9KSwge1xuICAgICAgaXNGaW5hbDogdHJ1ZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9yZXN1bHRMaXN0O1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29nbml0aXZlU2VydmljZUV2ZW50UmVzdWx0VG9XZWJTcGVlY2hSZWNvZ25pdGlvblJlc3VsdExpc3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGVTcGVlY2hSZWNvZ25pdGlvblBvbnlmaWxsRnJvbVJlY29nbml6ZXIgPSBjcmVhdGVTcGVlY2hSZWNvZ25pdGlvblBvbnlmaWxsRnJvbVJlY29nbml6ZXI7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvclwiKSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3JcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9ldmVudFRhcmdldFNoaW0gPSByZXF1aXJlKFwiLi4vLi4vZXh0ZXJuYWwvZXZlbnQtdGFyZ2V0LXNoaW1cIik7XG5cbnZhciBfY29nbml0aXZlU2VydmljZUV2ZW50UmVzdWx0VG9XZWJTcGVlY2hSZWNvZ25pdGlvblJlc3VsdExpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvZ25pdGl2ZVNlcnZpY2VFdmVudFJlc3VsdFRvV2ViU3BlZWNoUmVjb2duaXRpb25SZXN1bHRMaXN0XCIpKTtcblxudmFyIF9jcmVhdGVQcm9taXNlUXVldWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9VdGlsL2NyZWF0ZVByb21pc2VRdWV1ZVwiKSk7XG5cbnZhciBfcGF0Y2hPcHRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3BhdGNoT3B0aW9uc1wiKSk7XG5cbnZhciBfU3BlZWNoR3JhbW1hckxpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1NwZWVjaEdyYW1tYXJMaXN0XCIpKTtcblxudmFyIF9TcGVlY2hTREsgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9TcGVlY2hTREtcIikpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbi8vIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2phdmFzY3JpcHQvYXBpL21pY3Jvc29mdC1jb2duaXRpdmVzZXJ2aWNlcy1zcGVlY2gtc2RrL3NwZWVjaGNvbmZpZz92aWV3PWF6dXJlLW5vZGUtbGF0ZXN0I291dHB1dGZvcm1hdFxuLy8ge1xuLy8gICBcIlJlY29nbml0aW9uU3RhdHVzXCI6IFwiU3VjY2Vzc1wiLFxuLy8gICBcIk9mZnNldFwiOiA5MDAwMDAsXG4vLyAgIFwiRHVyYXRpb25cIjogNDkwMDAwMDAsXG4vLyAgIFwiTkJlc3RcIjogW1xuLy8gICAgIHtcbi8vICAgICAgIFwiQ29uZmlkZW5jZVwiOiAwLjczODkxOSxcbi8vICAgICAgIFwiTGV4aWNhbFwiOiBcInNlY29uZFwiLFxuLy8gICAgICAgXCJJVE5cIjogXCJzZWNvbmRcIixcbi8vICAgICAgIFwiTWFza2VkSVROXCI6IFwic2Vjb25kXCIsXG4vLyAgICAgICBcIkRpc3BsYXlcIjogXCJTZWNvbmQuXCJcbi8vICAgICB9XG4vLyAgIF1cbi8vIH1cbi8vIHtcbi8vICAgXCJSZWNvZ25pdGlvblN0YXR1c1wiOiBcIkluaXRpYWxTaWxlbmNlVGltZW91dFwiLFxuLy8gICBcIk9mZnNldFwiOiA1MDAwMDAwMCxcbi8vICAgXCJEdXJhdGlvblwiOiAwXG4vLyB9XG52YXIgQXVkaW9Db25maWcgPSBfU3BlZWNoU0RLLmRlZmF1bHQuQXVkaW9Db25maWcsXG4gICAgT3V0cHV0Rm9ybWF0ID0gX1NwZWVjaFNESy5kZWZhdWx0Lk91dHB1dEZvcm1hdCxcbiAgICBSZXN1bHRSZWFzb24gPSBfU3BlZWNoU0RLLmRlZmF1bHQuUmVzdWx0UmVhc29uLFxuICAgIFNwZWVjaENvbmZpZyA9IF9TcGVlY2hTREsuZGVmYXVsdC5TcGVlY2hDb25maWcsXG4gICAgU3BlZWNoUmVjb2duaXplciA9IF9TcGVlY2hTREsuZGVmYXVsdC5TcGVlY2hSZWNvZ25pemVyO1xuXG5mdW5jdGlvbiBzZXJpYWxpemVSZWNvZ25pdGlvblJlc3VsdChfcmVmKSB7XG4gIHZhciBkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb24sXG4gICAgICBlcnJvckRldGFpbHMgPSBfcmVmLmVycm9yRGV0YWlscyxcbiAgICAgIGpzb24gPSBfcmVmLmpzb24sXG4gICAgICBvZmZzZXQgPSBfcmVmLm9mZnNldCxcbiAgICAgIHByb3BlcnRpZXMgPSBfcmVmLnByb3BlcnRpZXMsXG4gICAgICByZWFzb24gPSBfcmVmLnJlYXNvbixcbiAgICAgIHJlc3VsdElkID0gX3JlZi5yZXN1bHRJZCxcbiAgICAgIHRleHQgPSBfcmVmLnRleHQ7XG4gIHJldHVybiB7XG4gICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgIGVycm9yRGV0YWlsczogZXJyb3JEZXRhaWxzLFxuICAgIGpzb246IEpTT04ucGFyc2UoanNvbiksXG4gICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgcHJvcGVydGllczogcHJvcGVydGllcyxcbiAgICByZWFzb246IHJlYXNvbixcbiAgICByZXN1bHRJZDogcmVzdWx0SWQsXG4gICAgdGV4dDogdGV4dFxuICB9O1xufVxuXG5mdW5jdGlvbiBpbXByb3Zpc2VBc3luYyhmbiwgaW1wcm92aXNlcikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykub25TdWNjZXNzQ29udGludWVXaXRoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiBpbXByb3Zpc2VyKHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF2ZXJhZ2VBbXBsaXR1ZGUoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIGFycmF5ID0gbmV3IEludDE2QXJyYXkoYXJyYXlCdWZmZXIpO1xuICByZXR1cm4gW10ucmVkdWNlLmNhbGwoYXJyYXksIGZ1bmN0aW9uIChhdmVyYWdlQW1wbGl0dWRlLCBhbXBsaXR1ZGUpIHtcbiAgICByZXR1cm4gYXZlcmFnZUFtcGxpdHVkZSArIE1hdGguYWJzKGFtcGxpdHVkZSk7XG4gIH0sIDApIC8gYXJyYXkubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBjb2duaXRpdmVTZXJ2aWNlc0FzeW5jVG9Qcm9taXNlKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodm9pZCAwLCBhcmdzLmNvbmNhdChbcmVzb2x2ZSwgcmVqZWN0XSkpO1xuICAgIH0pO1xuICB9O1xufVxuXG52YXIgU3BlZWNoUmVjb2duaXRpb25FdmVudCA9IGZ1bmN0aW9uIFNwZWVjaFJlY29nbml0aW9uRXZlbnQodHlwZSkge1xuICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgZGF0YSA9IF9yZWYyLmRhdGEsXG4gICAgICBlbW1hID0gX3JlZjIuZW1tYSxcbiAgICAgIGludGVycHJldGF0aW9uID0gX3JlZjIuaW50ZXJwcmV0YXRpb24sXG4gICAgICByZXN1bHRJbmRleCA9IF9yZWYyLnJlc3VsdEluZGV4LFxuICAgICAgcmVzdWx0cyA9IF9yZWYyLnJlc3VsdHM7XG5cbiAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgU3BlZWNoUmVjb2duaXRpb25FdmVudCk7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuZW1tYSA9IGVtbWE7XG4gIHRoaXMuaW50ZXJwcmV0YXRpb24gPSBpbnRlcnByZXRhdGlvbjtcbiAgdGhpcy5yZXN1bHRJbmRleCA9IHJlc3VsdEluZGV4O1xuICB0aGlzLnJlc3VsdHMgPSByZXN1bHRzO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xufTtcblxuZnVuY3Rpb24gcHJlcGFyZUF1ZGlvQ29uZmlnKGF1ZGlvQ29uZmlnKSB7XG4gIHZhciBvcmlnaW5hbEF0dGFjaCA9IGF1ZGlvQ29uZmlnLmF0dGFjaDtcbiAgdmFyIGZpcnN0Q2h1bms7XG4gIHZhciBtdXRlZDsgLy8gV2UgbW9kaWZ5IFwiYXR0YWNoXCIgZnVuY3Rpb24gYW5kIGRldGVjdCB3aGVuIGF1ZGlibGUgY2h1bmsgaXMgcmVhZC5cbiAgLy8gV2Ugd2lsbCBvbmx5IG1vZGlmeSBcImF0dGFjaFwiIGZ1bmN0aW9uIG9uY2UuXG5cbiAgYXVkaW9Db25maWcuYXR0YWNoID0gaW1wcm92aXNlQXN5bmMob3JpZ2luYWxBdHRhY2guYmluZChhdWRpb0NvbmZpZyksIGZ1bmN0aW9uIChyZWFkZXIpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcmVhZGVyLCB7XG4gICAgICByZWFkOiBpbXByb3Zpc2VBc3luYyhyZWFkZXIucmVhZC5iaW5kKHJlYWRlciksIGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICAvLyBUaGUgbWFnaWMgbnVtYmVyIDE1MCBpcyBtZWFzdXJlZCBieTpcbiAgICAgICAgLy8gMS4gU2V0IG1pY3JvcGhvbmUgdm9sdW1lIHRvIDBcbiAgICAgICAgLy8gMi4gT2JzZXJ2ZSB0aGUgYW1wbGl0dWRlICgxMDAtMTEwKSBmb3IgdGhlIGZpcnN0IGZldyBjaHVua3NcbiAgICAgICAgLy8gICAgKFRoZXJlIGlzIGEgc2hvcnQgc3RhdGljIGNhdWdodCB3aGVuIHR1cm5pbmcgb24gdGhlIG1pY3JvcGhvbmUpXG4gICAgICAgIC8vIDMuIFNldCB0aGUgbnVtYmVyIGEgYml0IGhpZ2hlciB0aGFuIHRoZSBvYnNlcnZhdGlvblxuICAgICAgICBpZiAoIWZpcnN0Q2h1bmsgJiYgYXZlcmFnZUFtcGxpdHVkZShjaHVuay5idWZmZXIpID4gMTUwKSB7XG4gICAgICAgICAgYXVkaW9Db25maWcuZXZlbnRzLm9uRXZlbnQoe1xuICAgICAgICAgICAgbmFtZTogJ0ZpcnN0QXVkaWJsZUNodW5rJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZpcnN0Q2h1bmsgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG11dGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJ1ZmZlcjogbmV3IEFycmF5QnVmZmVyKDApLFxuICAgICAgICAgICAgaXNFbmQ6IHRydWUsXG4gICAgICAgICAgICB0aW1lUmVjZWl2ZWQ6IERhdGUubm93KClcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNodW5rO1xuICAgICAgfSlcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYXVkaW9Db25maWc6IGF1ZGlvQ29uZmlnLFxuICAgIHBhdXNlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIG11dGVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIHVucHJlcGFyZTogZnVuY3Rpb24gdW5wcmVwYXJlKCkge1xuICAgICAgYXVkaW9Db25maWcuYXR0YWNoID0gb3JpZ2luYWxBdHRhY2g7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTcGVlY2hSZWNvZ25pdGlvblBvbnlmaWxsRnJvbVJlY29nbml6ZXIoX3JlZjMpIHtcbiAgdmFyIGNyZWF0ZVJlY29nbml6ZXIgPSBfcmVmMy5jcmVhdGVSZWNvZ25pemVyLFxuICAgICAgZW5hYmxlVGVsZW1ldHJ5ID0gX3JlZjMuZW5hYmxlVGVsZW1ldHJ5LFxuICAgICAgbG9vc2VFdmVudHMgPSBfcmVmMy5sb29zZUV2ZW50cyxcbiAgICAgIHJlZmVyZW5jZUdyYW1tYXJzID0gX3JlZjMucmVmZXJlbmNlR3JhbW1hcnMsXG4gICAgICB0ZXh0Tm9ybWFsaXphdGlvbiA9IF9yZWYzLnRleHROb3JtYWxpemF0aW9uO1xuICAvLyBJZiBlbmFibGVUZWxlbWV0cnkgaXMgc2V0IHRvIG51bGwgb3Igbm9uLWJvb2xlYW4sIHdlIHdpbGwgZGVmYXVsdCB0byB0cnVlLlxuICBTcGVlY2hSZWNvZ25pemVyLmVuYWJsZVRlbGVtZXRyeShlbmFibGVUZWxlbWV0cnkgIT09IGZhbHNlKTtcblxuICB2YXIgU3BlZWNoUmVjb2duaXRpb24gPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfRXZlbnRUYXJnZXQpIHtcbiAgICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShTcGVlY2hSZWNvZ25pdGlvbiwgX0V2ZW50VGFyZ2V0KTtcblxuICAgIGZ1bmN0aW9uIFNwZWVjaFJlY29nbml0aW9uKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBTcGVlY2hSZWNvZ25pdGlvbik7XG4gICAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU3BlZWNoUmVjb2duaXRpb24pLmNhbGwodGhpcykpO1xuICAgICAgX3RoaXMuX2NvbnRpbnVvdXMgPSBmYWxzZTtcbiAgICAgIF90aGlzLl9pbnRlcmltUmVzdWx0cyA9IGZhbHNlO1xuICAgICAgX3RoaXMuX2xhbmcgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdsYW5nJykgfHwgd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZSA6ICdlbi1VUyc7XG4gICAgICBfdGhpcy5fZ3JhbW1hcnMgPSBuZXcgX1NwZWVjaEdyYW1tYXJMaXN0LmRlZmF1bHQoKTtcbiAgICAgIF90aGlzLl9tYXhBbHRlcm5hdGl2ZXMgPSAxO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFNwZWVjaFJlY29nbml0aW9uLCBbe1xuICAgICAga2V5OiBcImVtaXRDb2duaXRpdmVTZXJ2aWNlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXRDb2duaXRpdmVTZXJ2aWNlcyh0eXBlLCBldmVudCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnQoJ2NvZ25pdGl2ZXNlcnZpY2VzJywge1xuICAgICAgICAgIGRhdGE6IF9vYmplY3RTcHJlYWQoe30sIGV2ZW50LCB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhYm9ydFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0KCkge31cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RhcnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fc3RhcnRPbmNlKCkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIF90aGlzMi5kaXNwYXRjaEV2ZW50KG5ldyBFcnJvckV2ZW50KCdlcnJvcicsIHtcbiAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnIgJiYgZXJyLm1lc3NhZ2VcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc3RhcnRPbmNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3N0YXJ0T25jZTIgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IyLmRlZmF1bHQpKFxuICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgIF9yZWdlbmVyYXRvci5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcbiAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgIHZhciByZWNvZ25pemVyLCBfcHJlcGFyZUF1ZGlvQ29uZmlnLCBwYXVzZSwgdW5wcmVwYXJlLCBxdWV1ZSwgc291bmRTdGFydGVkLCBzcGVlY2hTdGFydGVkLCBzdG9wcGluZywgX3JlY29nbml6ZXIkYXVkaW9Db25mLCBkZXRhY2hBdWRpb0NvbmZpZ0V2ZW50LCBwaHJhc2VzLCBkeW5hbWljR3JhbW1hciwgYXVkaW9TdGFydGVkLCBmaW5hbEV2ZW50LCBmaW5hbGl6ZWRSZXN1bHRzLCBfbG9vcCwgbG9vcCwgX3JldDtcblxuICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0Mikge1xuICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY29nbml6ZXIodGhpcy5sYW5nKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIHJlY29nbml6ZXIgPSBfY29udGV4dDIuc2VudDtcbiAgICAgICAgICAgICAgICAgIF9wcmVwYXJlQXVkaW9Db25maWcgPSBwcmVwYXJlQXVkaW9Db25maWcocmVjb2duaXplci5hdWRpb0NvbmZpZyksIHBhdXNlID0gX3ByZXBhcmVBdWRpb0NvbmZpZy5wYXVzZSwgdW5wcmVwYXJlID0gX3ByZXBhcmVBdWRpb0NvbmZpZy51bnByZXBhcmU7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDQ7XG4gICAgICAgICAgICAgICAgICBxdWV1ZSA9ICgwLCBfY3JlYXRlUHJvbWlzZVF1ZXVlLmRlZmF1bHQpKCk7XG4gICAgICAgICAgICAgICAgICBfcmVjb2duaXplciRhdWRpb0NvbmYgPSByZWNvZ25pemVyLmF1ZGlvQ29uZmlnLmV2ZW50cy5hdHRhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gZXZlbnQubmFtZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ0F1ZGlvU291cmNlUmVhZHlFdmVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvU291cmNlUmVhZHk6IHt9XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ0F1ZGlvU291cmNlT2ZmRXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpb1NvdXJjZU9mZjoge31cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnRmlyc3RBdWRpYmxlQ2h1bmsnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdEF1ZGlibGVDaHVuazoge31cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSksIGRldGFjaEF1ZGlvQ29uZmlnRXZlbnQgPSBfcmVjb2duaXplciRhdWRpb0NvbmYuZGV0YWNoO1xuXG4gICAgICAgICAgICAgICAgICByZWNvZ25pemVyLmNhbmNlbGVkID0gZnVuY3Rpb24gKF8sIF9yZWY0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvckRldGFpbHMgPSBfcmVmNC5lcnJvckRldGFpbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBfcmVmNC5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb24gPSBfcmVmNC5yZWFzb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQgPSBfcmVmNC5zZXNzaW9uSWQ7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbGVkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckRldGFpbHM6IGVycm9yRGV0YWlscyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiByZWFzb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IHNlc3Npb25JZFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICByZWNvZ25pemVyLnJlY29nbml6ZWQgPSBmdW5jdGlvbiAoXywgX3JlZjUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IF9yZWY1Lm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9yZWY1LnJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25JZCA9IF9yZWY1LnNlc3Npb25JZDtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgcmVjb2duaXplZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHNlcmlhbGl6ZVJlY29nbml0aW9uUmVzdWx0KHJlc3VsdCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IHNlc3Npb25JZFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICByZWNvZ25pemVyLnJlY29nbml6aW5nID0gZnVuY3Rpb24gKF8sIF9yZWY2KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBfcmVmNi5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfcmVmNi5yZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQgPSBfcmVmNi5zZXNzaW9uSWQ7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIHJlY29nbml6aW5nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogc2VyaWFsaXplUmVjb2duaXRpb25SZXN1bHQocmVzdWx0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbklkXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIHJlY29nbml6ZXIuc2Vzc2lvblN0YXJ0ZWQgPSBmdW5jdGlvbiAoXywgX3JlZjcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlc3Npb25JZCA9IF9yZWY3LnNlc3Npb25JZDtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0YXJ0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbklkXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIHJlY29nbml6ZXIuc2Vzc2lvblN0b3BwZWQgPSBmdW5jdGlvbiAoXywgX3JlZjgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlc3Npb25JZCA9IF9yZWY4LnNlc3Npb25JZDtcbiAgICAgICAgICAgICAgICAgICAgLy8gXCJzZXNzaW9uU3RvcHBlZFwiIGlzIG5ldmVyIGZpcmVkLCBwcm9iYWJseSBiZWNhdXNlIHdlIGFyZSB1c2luZyBzdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jIGluc3RlYWQgb2YgcmVjb2duaXplT25jZUFzeW5jLlxuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcHBlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uSWRcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgcmVjb2duaXplci5zcGVlY2hTdGFydERldGVjdGVkID0gZnVuY3Rpb24gKF8sIF9yZWY5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBfcmVmOS5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQgPSBfcmVmOS5zZXNzaW9uSWQ7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIHNwZWVjaFN0YXJ0RGV0ZWN0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uSWRcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgcmVjb2duaXplci5zcGVlY2hFbmREZXRlY3RlZCA9IGZ1bmN0aW9uIChfLCBfcmVmMTApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlc3Npb25JZCA9IF9yZWYxMC5zZXNzaW9uSWQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIFwic3BlZWNoRW5kRGV0ZWN0ZWRcIiBpcyBuZXZlciBmaXJlZCwgcHJvYmFibHkgYmVjYXVzZSB3ZSBhcmUgdXNpbmcgc3RhcnRDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyBpbnN0ZWFkIG9mIHJlY29nbml6ZU9uY2VBc3luYy5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlOiBcInNwZWVjaEVuZERldGVjdGVkXCIgaXMgZmlyZWQgZm9yIERMU3BlZWNoLmxpc3Rlbk9uY2VBc3luYygpXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIHNwZWVjaEVuZERldGVjdGVkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IHNlc3Npb25JZFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICBwaHJhc2VzID0gdGhpcy5ncmFtbWFycy5waHJhc2VzOyAvLyBIQUNLOiBXZSBhcmUgdXNpbmcgdGhlIGludGVybmFsIG9mIFNwZWVjaFJlY29nbml6ZXIgYmVjYXVzZSB0aGV5IGRpZCBub3QgZXhwb3NlIGl0XG5cbiAgICAgICAgICAgICAgICAgIGR5bmFtaWNHcmFtbWFyID0gcmVjb2duaXplci5wcml2UmVjby5keW5hbWljR3JhbW1hcjtcbiAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZUdyYW1tYXJzICYmIHJlZmVyZW5jZUdyYW1tYXJzLmxlbmd0aCAmJiBkeW5hbWljR3JhbW1hci5hZGRSZWZlcmVuY2VHcmFtbWFyKHJlZmVyZW5jZUdyYW1tYXJzKTtcbiAgICAgICAgICAgICAgICAgIHBocmFzZXMgJiYgcGhyYXNlcy5sZW5ndGggJiYgZHluYW1pY0dyYW1tYXIuYWRkUGhyYXNlKHBocmFzZXMpO1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyMDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb2duaXRpdmVTZXJ2aWNlc0FzeW5jVG9Qcm9taXNlKHJlY29nbml6ZXIuc3RhcnRDb250aW51b3VzUmVjb2duaXRpb25Bc3luYy5iaW5kKHJlY29nbml6ZXIpKSgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICBhYm9ydDoge31cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICBzdG9wOiB7fVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIGZpbmFsaXplZFJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIF9sb29wID1cbiAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgICAgICAgICAgIF9yZWdlbmVyYXRvci5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2xvb3AobG9vcCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQsIGFib3J0LCBhdWRpb1NvdXJjZU9mZiwgYXVkaW9Tb3VyY2VSZWFkeSwgY2FuY2VsZWQsIGZpcnN0QXVkaWJsZUNodW5rLCByZWNvZ25pemVkLCByZWNvZ25pemluZywgc3RvcCwgZXJyb3JNZXNzYWdlLCByZXN1bHQsIHJlY29nbml6YWJsZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvci5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2xvb3AkKF9jb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWV1ZS5zaGlmdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudCA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQgPSBldmVudC5hYm9ydCwgYXVkaW9Tb3VyY2VPZmYgPSBldmVudC5hdWRpb1NvdXJjZU9mZiwgYXVkaW9Tb3VyY2VSZWFkeSA9IGV2ZW50LmF1ZGlvU291cmNlUmVhZHksIGNhbmNlbGVkID0gZXZlbnQuY2FuY2VsZWQsIGZpcnN0QXVkaWJsZUNodW5rID0gZXZlbnQuZmlyc3RBdWRpYmxlQ2h1bmssIHJlY29nbml6ZWQgPSBldmVudC5yZWNvZ25pemVkLCByZWNvZ25pemluZyA9IGV2ZW50LnJlY29nbml6aW5nLCBzdG9wID0gZXZlbnQuc3RvcDsgLy8gV2UgYXJlIGVtaXR0aW5nIGV2ZW50IFwiY29nbml0aXZlc2VydmljZXNcIiBmb3IgZGVidWdnaW5nIHB1cnBvc2UuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhldmVudCkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5lbWl0Q29nbml0aXZlU2VydmljZXMobmFtZSwgZXZlbnRbbmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGNhbmNlbGVkICYmIGNhbmNlbGVkLmVycm9yRGV0YWlscztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghL1Blcm1pc3Npb25bXFx0LVxcciBcXHhBMFxcdTE2ODBcXHUyMDAwLVxcdTIwMEFcXHUyMDI4XFx1MjAyOVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdUZFRkZdZGVuaWVkLy50ZXN0KGVycm9yTWVzc2FnZSB8fCAnJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgbWljcm9waG9uZSBpcyBub3QgYWxsb3dlZCwgd2Ugc2hvdWxkIG5vdCBlbWl0IFwic3RhcnRcIiBldmVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEV2ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdub3QtYWxsb3dlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIFwiYnJlYWtcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbG9vcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmRpc3BhdGNoRXZlbnQobmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnQoJ3N0YXJ0JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLzEwMDYvLnRlc3QoZXJyb3JNZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhdWRpb1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmRpc3BhdGNoRXZlbnQobmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnQoJ2F1ZGlvc3RhcnQnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmRpc3BhdGNoRXZlbnQobmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnQoJ2F1ZGlvZW5kJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEV2ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ25ldHdvcmsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEV2ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ3Vua25vd24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgXCJicmVha1wiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGFib3J0IHx8IHN0b3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAnYWJvcnRlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07IC8vIElmIHdlIGFyZSBhYm9ydGluZywgd2Ugd2lsbCBpZ25vcmUgbGluZ2VyaW5nIHJlY29nbml6aW5nL3JlY29nbml6ZWQgZXZlbnRzLiBCdXQgaWYgd2UgYXJlIHN0b3BwaW5nLCB3ZSBuZWVkIHRoZW0uXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BwaW5nID0gJ2Fib3J0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSBwYXVzZSwgd2Ugd2lsbCBzZW5kIHsgaXNFbmQ6IHRydWUgfSwgU3BlZWNoIFNlcnZpY2VzIHdpbGwgc2VuZCB1cyBcInJlY29nbml6ZWRcIiBldmVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wcGluZyA9ICdzdG9wJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFib3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvZ25pdGl2ZVNlcnZpY2VzQXN5bmNUb1Byb21pc2UocmVjb2duaXplci5zdG9wQ29udGludW91c1JlY29nbml0aW9uQXN5bmMuYmluZChyZWNvZ25pemVyKSkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2MTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXVkaW9Tb3VyY2VSZWFkeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmRpc3BhdGNoRXZlbnQobmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnQoJ2F1ZGlvc3RhcnQnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpb1N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2MTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RBdWRpYmxlQ2h1bmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy5kaXNwYXRjaEV2ZW50KG5ldyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50KCdzb3VuZHN0YXJ0JykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291bmRTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWF1ZGlvU291cmNlT2ZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMb29rcyBsaWtlIHdlIGRvbid0IG5lZWQgdGhpcyBsaW5lIGFuZCBhbGwgdGhlIHRlc3RzIGFyZSBzdGlsbCB3b3JraW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEd1ZXNzaW5nIHByb2JhYmx5IHN0b3BwaW5nIGlzIGFscmVhZHkgdHJ1dGh5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0b3BwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2hTdGFydGVkICYmIF90aGlzMy5kaXNwYXRjaEV2ZW50KG5ldyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50KCdzcGVlY2hlbmQnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291bmRTdGFydGVkICYmIF90aGlzMy5kaXNwYXRjaEV2ZW50KG5ldyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50KCdzb3VuZGVuZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpb1N0YXJ0ZWQgJiYgX3RoaXMzLmRpc3BhdGNoRXZlbnQobmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnQoJ2F1ZGlvZW5kJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvU3RhcnRlZCA9IHNvdW5kU3RhcnRlZCA9IHNwZWVjaFN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIFwiYnJlYWtcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShzdG9wcGluZyAhPT0gJ2Fib3J0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2MTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlY29nbml6ZWQgJiYgcmVjb2duaXplZC5yZXN1bHQgJiYgcmVjb2duaXplZC5yZXN1bHQucmVhc29uID09PSBSZXN1bHRSZWFzb24uTm9NYXRjaCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ25vLXNwZWVjaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZWNvZ25pemVkIHx8IHJlY29nbml6aW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDYxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhdWRpb1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVuY29uZmlybWVkIHByZXZlbnRpb24gb2YgcXVpcmtzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuZGlzcGF0Y2hFdmVudChuZXcgU3BlZWNoUmVjb2duaXRpb25FdmVudCgnYXVkaW9zdGFydCcpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNvdW5kU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmRpc3BhdGNoRXZlbnQobmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnQoJ3NvdW5kc3RhcnQnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGVlY2hTdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuZGlzcGF0Y2hFdmVudChuZXcgU3BlZWNoUmVjb2duaXRpb25FdmVudCgnc3BlZWNoc3RhcnQnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVjaFN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVjb2duaXplZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDYwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKDAsIF9jb2duaXRpdmVTZXJ2aWNlRXZlbnRSZXN1bHRUb1dlYlNwZWVjaFJlY29nbml0aW9uUmVzdWx0TGlzdC5kZWZhdWx0KShyZWNvZ25pemVkLnJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4QWx0ZXJuYXRpdmVzOiBfdGhpczMubWF4QWx0ZXJuYXRpdmVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE5vcm1hbGl6YXRpb246IHRleHROb3JtYWxpemF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb2duaXphYmxlID0gISFyZXN1bHRbMF0udHJhbnNjcmlwdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvZ25pemFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsaXplZFJlc3VsdHMgPSBbXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkoZmluYWxpemVkUmVzdWx0cyksIFtyZXN1bHRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy5jb250aW51b3VzICYmIF90aGlzMy5kaXNwYXRjaEV2ZW50KG5ldyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50KCdyZXN1bHQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHM6IGZpbmFsaXplZFJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8vIElmIGl0IGlzIGNvbnRpbnVvdXMsIHdlIGp1c3Qgc2VudCB0aGUgZmluYWxpemVkIHJlc3VsdHMuIFNvIHdlIGRvbid0IG5lZWQgdG8gc2VuZCBpdCBhZ2FpbiBhZnRlciBcImF1ZGlvZW5kXCIgZXZlbnQuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczMuY29udGludW91cyAmJiByZWNvZ25pemFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEV2ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiBmaW5hbGl6ZWRSZXN1bHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVzdWx0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMzLmNvbnRpbnVvdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1NztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1NztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29nbml0aXZlU2VydmljZXNBc3luY1RvUHJvbWlzZShyZWNvZ25pemVyLnN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luYy5iaW5kKHJlY29nbml6ZXIpKSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgZXZlbnQgb3JkZXIgY2FuIGJlIGxvb3NlbmVkLCB3ZSBjYW4gc2VuZCB0aGUgcmVjb2duaXplZCBldmVudCBhcyBzb29uIGFzIHdlIHJlY2VpdmUgaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMS4gSWYgaXQgaXMgbm90IHJlY29nbml6YWJsZSAobm8tc3BlZWNoKSwgd2Ugc2hvdWxkIHNlbmQgYW4gXCJlcnJvclwiIGV2ZW50IGp1c3QgYmVmb3JlIFwiZW5kXCIgZXZlbnQuIFdlIHdpbGwgbm90IGxvb3NlbiBcImVycm9yXCIgZXZlbnRzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb29zZUV2ZW50cyAmJiBmaW5hbEV2ZW50ICYmIHJlY29nbml6YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmRpc3BhdGNoRXZlbnQobmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnQoZmluYWxFdmVudC50eXBlLCBmaW5hbEV2ZW50KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2MTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDYwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvZ25pemluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLmludGVyaW1SZXN1bHRzICYmIF90aGlzMy5kaXNwYXRjaEV2ZW50KG5ldyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50KCdyZXN1bHQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHM6IFtdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShmaW5hbGl6ZWRSZXN1bHRzKSwgWygwLCBfY29nbml0aXZlU2VydmljZUV2ZW50UmVzdWx0VG9XZWJTcGVlY2hSZWNvZ25pdGlvblJlc3VsdExpc3QuZGVmYXVsdCkocmVjb2duaXppbmcucmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4QWx0ZXJuYXRpdmVzOiBfdGhpczMubWF4QWx0ZXJuYXRpdmVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHROb3JtYWxpemF0aW9uOiB0ZXh0Tm9ybWFsaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgX2xvb3ApO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBsb29wID0gMDtcblxuICAgICAgICAgICAgICAgIGNhc2UgMjU6XG4gICAgICAgICAgICAgICAgICBpZiAoISghc3RvcHBpbmcgfHwgYXVkaW9TdGFydGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDMzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5kZWxlZ2F0ZVlpZWxkKF9sb29wKGxvb3ApLCBcInQwXCIsIDI3KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICAgICAgICBfcmV0ID0gX2NvbnRleHQyLnQwO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoIShfcmV0ID09PSBcImJyZWFrXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdChcImJyZWFrXCIsIDMzKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgICAgICAgICBsb29wKys7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI1O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgICAgICAgaWYgKHNwZWVjaFN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50KCdzcGVlY2hlbmQnKSk7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmIChzb3VuZFN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50KCdzb3VuZGVuZCcpKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKGF1ZGlvU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFNwZWVjaFJlY29nbml0aW9uRXZlbnQoJ2F1ZGlvZW5kJykpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBpZiAoZmluYWxFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmluYWxFdmVudC50eXBlID09PSAncmVzdWx0JyAmJiAhZmluYWxFdmVudC5yZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgIGZpbmFsRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ25vLXNwZWVjaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InXG4gICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaW5hbEV2ZW50LnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEVycm9yRXZlbnQoJ2Vycm9yJywgZmluYWxFdmVudCkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgU3BlZWNoUmVjb2duaXRpb25FdmVudChmaW5hbEV2ZW50LnR5cGUsIGZpbmFsRXZlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSAvLyBFdmVuIHRob3VnaCB0aGVyZSBpcyBubyBcInN0YXJ0XCIgZXZlbnQgZW1pdHRlZCwgd2Ugd2lsbCBzdGlsbCBlbWl0IFwiZW5kXCIgZXZlbnRcbiAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgbWFpbmx5IGZvciBcIm1pY3JvcGhvbmUgYmxvY2tlZFwiIHN0b3J5LlxuXG5cbiAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgU3BlZWNoUmVjb2duaXRpb25FdmVudCgnZW5kJykpO1xuICAgICAgICAgICAgICAgICAgZGV0YWNoQXVkaW9Db25maWdFdmVudCgpO1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0NTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gNDE7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIudDEgPSBfY29udGV4dDJbXCJjYXRjaFwiXSg0KTtcbiAgICAgICAgICAgICAgICAgIC8vIExvZ2dpbmcgb3V0IHRoZSBlcm9yciBiZWNhdXNlIFNwZWVjaCBTREsgd291bGQgZmFpbCBzaWxlbnRseS5cbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoX2NvbnRleHQyLnQxKTtcbiAgICAgICAgICAgICAgICAgIHRocm93IF9jb250ZXh0Mi50MTtcblxuICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDQ1O1xuICAgICAgICAgICAgICAgICAgdW5wcmVwYXJlKCk7XG4gICAgICAgICAgICAgICAgICByZWNvZ25pemVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuZmluaXNoKDQ1KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgNDk6XG4gICAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzQsIDQxLCA0NSwgNDldXSk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICBmdW5jdGlvbiBfc3RhcnRPbmNlKCkge1xuICAgICAgICAgIHJldHVybiBfc3RhcnRPbmNlMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9zdGFydE9uY2U7XG4gICAgICB9KClcbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RvcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7fVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjb250aW51b3VzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRpbnVvdXM7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fY29udGludW91cyA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJncmFtbWFyc1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ncmFtbWFycztcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBfU3BlZWNoR3JhbW1hckxpc3QuZGVmYXVsdCkge1xuICAgICAgICAgIHRoaXMuX2dyYW1tYXJzID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHByb3ZpZGVkIHZhbHVlIGlzIG5vdCBvZiB0eXBlICdTcGVlY2hHcmFtbWFyTGlzdCdcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaW50ZXJpbVJlc3VsdHNcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW50ZXJpbVJlc3VsdHM7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5faW50ZXJpbVJlc3VsdHMgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibWF4QWx0ZXJuYXRpdmVzXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heEFsdGVybmF0aXZlcztcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tYXhBbHRlcm5hdGl2ZXMgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwibGFuZ1wiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYW5nO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2xhbmcgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFNwZWVjaFJlY29nbml0aW9uO1xuICB9KF9ldmVudFRhcmdldFNoaW0uRXZlbnRUYXJnZXQpO1xuXG4gICgwLCBfZXZlbnRUYXJnZXRTaGltLmRlZmluZUV2ZW50QXR0cmlidXRlKShTcGVlY2hSZWNvZ25pdGlvbi5wcm90b3R5cGUsICdhdWRpb2VuZCcpO1xuICAoMCwgX2V2ZW50VGFyZ2V0U2hpbS5kZWZpbmVFdmVudEF0dHJpYnV0ZSkoU3BlZWNoUmVjb2duaXRpb24ucHJvdG90eXBlLCAnYXVkaW9zdGFydCcpO1xuICAoMCwgX2V2ZW50VGFyZ2V0U2hpbS5kZWZpbmVFdmVudEF0dHJpYnV0ZSkoU3BlZWNoUmVjb2duaXRpb24ucHJvdG90eXBlLCAnY29nbml0aXZlc2VydmljZXMnKTtcbiAgKDAsIF9ldmVudFRhcmdldFNoaW0uZGVmaW5lRXZlbnRBdHRyaWJ1dGUpKFNwZWVjaFJlY29nbml0aW9uLnByb3RvdHlwZSwgJ2VuZCcpO1xuICAoMCwgX2V2ZW50VGFyZ2V0U2hpbS5kZWZpbmVFdmVudEF0dHJpYnV0ZSkoU3BlZWNoUmVjb2duaXRpb24ucHJvdG90eXBlLCAnZXJyb3InKTtcbiAgKDAsIF9ldmVudFRhcmdldFNoaW0uZGVmaW5lRXZlbnRBdHRyaWJ1dGUpKFNwZWVjaFJlY29nbml0aW9uLnByb3RvdHlwZSwgJ25vbWF0Y2gnKTtcbiAgKDAsIF9ldmVudFRhcmdldFNoaW0uZGVmaW5lRXZlbnRBdHRyaWJ1dGUpKFNwZWVjaFJlY29nbml0aW9uLnByb3RvdHlwZSwgJ3Jlc3VsdCcpO1xuICAoMCwgX2V2ZW50VGFyZ2V0U2hpbS5kZWZpbmVFdmVudEF0dHJpYnV0ZSkoU3BlZWNoUmVjb2duaXRpb24ucHJvdG90eXBlLCAnc291bmRlbmQnKTtcbiAgKDAsIF9ldmVudFRhcmdldFNoaW0uZGVmaW5lRXZlbnRBdHRyaWJ1dGUpKFNwZWVjaFJlY29nbml0aW9uLnByb3RvdHlwZSwgJ3NvdW5kc3RhcnQnKTtcbiAgKDAsIF9ldmVudFRhcmdldFNoaW0uZGVmaW5lRXZlbnRBdHRyaWJ1dGUpKFNwZWVjaFJlY29nbml0aW9uLnByb3RvdHlwZSwgJ3NwZWVjaGVuZCcpO1xuICAoMCwgX2V2ZW50VGFyZ2V0U2hpbS5kZWZpbmVFdmVudEF0dHJpYnV0ZSkoU3BlZWNoUmVjb2duaXRpb24ucHJvdG90eXBlLCAnc3BlZWNoc3RhcnQnKTtcbiAgKDAsIF9ldmVudFRhcmdldFNoaW0uZGVmaW5lRXZlbnRBdHRyaWJ1dGUpKFNwZWVjaFJlY29nbml0aW9uLnByb3RvdHlwZSwgJ3N0YXJ0Jyk7XG4gIHJldHVybiB7XG4gICAgU3BlZWNoR3JhbW1hckxpc3Q6IF9TcGVlY2hHcmFtbWFyTGlzdC5kZWZhdWx0LFxuICAgIFNwZWVjaFJlY29nbml0aW9uOiBTcGVlY2hSZWNvZ25pdGlvbixcbiAgICBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50OiBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50XG4gIH07XG59XG5cbnZhciBfZGVmYXVsdCA9IGZ1bmN0aW9uIF9kZWZhdWx0KG9wdGlvbnMpIHtcbiAgdmFyIF9wYXRjaE9wdGlvbnMgPSAoMCwgX3BhdGNoT3B0aW9uczIuZGVmYXVsdCkob3B0aW9ucyksXG4gICAgICBfcGF0Y2hPcHRpb25zJGF1ZGlvQ28gPSBfcGF0Y2hPcHRpb25zLmF1ZGlvQ29uZmlnLFxuICAgICAgYXVkaW9Db25maWcgPSBfcGF0Y2hPcHRpb25zJGF1ZGlvQ28gPT09IHZvaWQgMCA/IEF1ZGlvQ29uZmlnLmZyb21EZWZhdWx0TWljcm9waG9uZUlucHV0KCkgOiBfcGF0Y2hPcHRpb25zJGF1ZGlvQ28sXG4gICAgICBfcGF0Y2hPcHRpb25zJGVuYWJsZVQgPSBfcGF0Y2hPcHRpb25zLmVuYWJsZVRlbGVtZXRyeSxcbiAgICAgIGVuYWJsZVRlbGVtZXRyeSA9IF9wYXRjaE9wdGlvbnMkZW5hYmxlVCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wYXRjaE9wdGlvbnMkZW5hYmxlVCxcbiAgICAgIGZldGNoQ3JlZGVudGlhbHMgPSBfcGF0Y2hPcHRpb25zLmZldGNoQ3JlZGVudGlhbHMsXG4gICAgICBsb29zZUV2ZW50cyA9IF9wYXRjaE9wdGlvbnMubG9vc2VFdmVudHMsXG4gICAgICByZWZlcmVuY2VHcmFtbWFycyA9IF9wYXRjaE9wdGlvbnMucmVmZXJlbmNlR3JhbW1hcnMsXG4gICAgICBzcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQgPSBfcGF0Y2hPcHRpb25zLnNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCxcbiAgICAgIF9wYXRjaE9wdGlvbnMkdGV4dE5vciA9IF9wYXRjaE9wdGlvbnMudGV4dE5vcm1hbGl6YXRpb24sXG4gICAgICB0ZXh0Tm9ybWFsaXphdGlvbiA9IF9wYXRjaE9wdGlvbnMkdGV4dE5vciA9PT0gdm9pZCAwID8gJ2Rpc3BsYXknIDogX3BhdGNoT3B0aW9ucyR0ZXh0Tm9yO1xuXG4gIGlmICghd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMgfHwgIXdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgIGNvbnNvbGUud2Fybignd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXM6IFRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFdlYlJUQyBhbmQgaXQgd2lsbCBub3Qgd29yayB3aXRoIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZXMuJyk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgdmFyIGNyZWF0ZVJlY29nbml6ZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3JlZjExID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMi5kZWZhdWx0KShcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgX3JlZ2VuZXJhdG9yLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlMihsYW5nKSB7XG4gICAgICB2YXIgX3JlZjEyLCBhdXRob3JpemF0aW9uVG9rZW4sIHJlZ2lvbiwgc3Vic2NyaXB0aW9uS2V5LCBzcGVlY2hDb25maWc7XG5cbiAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDMpIHtcbiAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyO1xuICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hDcmVkZW50aWFscygpO1xuXG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIF9yZWYxMiA9IF9jb250ZXh0My5zZW50O1xuICAgICAgICAgICAgICBhdXRob3JpemF0aW9uVG9rZW4gPSBfcmVmMTIuYXV0aG9yaXphdGlvblRva2VuO1xuICAgICAgICAgICAgICByZWdpb24gPSBfcmVmMTIucmVnaW9uO1xuICAgICAgICAgICAgICBzdWJzY3JpcHRpb25LZXkgPSBfcmVmMTIuc3Vic2NyaXB0aW9uS2V5O1xuICAgICAgICAgICAgICBzcGVlY2hDb25maWcgPSBhdXRob3JpemF0aW9uVG9rZW4gPyBTcGVlY2hDb25maWcuZnJvbUF1dGhvcml6YXRpb25Ub2tlbihhdXRob3JpemF0aW9uVG9rZW4sIHJlZ2lvbikgOiBTcGVlY2hDb25maWcuZnJvbVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25LZXksIHJlZ2lvbik7XG5cbiAgICAgICAgICAgICAgaWYgKHNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCkge1xuICAgICAgICAgICAgICAgIHNwZWVjaENvbmZpZy5lbmRwb2ludElkID0gc3BlZWNoUmVjb2duaXRpb25FbmRwb2ludElkO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc3BlZWNoQ29uZmlnLm91dHB1dEZvcm1hdCA9IE91dHB1dEZvcm1hdC5EZXRhaWxlZDtcbiAgICAgICAgICAgICAgc3BlZWNoQ29uZmlnLnNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UgPSBsYW5nIHx8ICdlbi1VUyc7XG4gICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KFwicmV0dXJuXCIsIG5ldyBTcGVlY2hSZWNvZ25pemVyKHNwZWVjaENvbmZpZywgYXVkaW9Db25maWcpKTtcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBfY2FsbGVlMik7XG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVJlY29nbml6ZXIoX3gpIHtcbiAgICAgIHJldHVybiBfcmVmMTEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9KCk7XG5cbiAgcmV0dXJuIGNyZWF0ZVNwZWVjaFJlY29nbml0aW9uUG9ueWZpbGxGcm9tUmVjb2duaXplcih7XG4gICAgYXVkaW9Db25maWc6IGF1ZGlvQ29uZmlnLFxuICAgIGNyZWF0ZVJlY29nbml6ZXI6IGNyZWF0ZVJlY29nbml6ZXIsXG4gICAgZW5hYmxlVGVsZW1ldHJ5OiBlbmFibGVUZWxlbWV0cnksXG4gICAgbG9vc2VFdmVudHM6IGxvb3NlRXZlbnRzLFxuICAgIHJlZmVyZW5jZUdyYW1tYXJzOiByZWZlcmVuY2VHcmFtbWFycyxcbiAgICB0ZXh0Tm9ybWFsaXphdGlvbjogdGV4dE5vcm1hbGl6YXRpb25cbiAgfSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVNwZWVjaFJlY29nbml0aW9uUG9ueWZpbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcGF0Y2hPcHRpb25zO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3JcIikpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZXNvbHZlRnVuY3Rpb25PclJldHVyblZhbHVlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yZXNvbHZlRnVuY3Rpb25PclJldHVyblZhbHVlXCIpKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7ICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgc2hvdWxkV2Fybk9uU3Vic2NyaXB0aW9uS2V5ID0gdHJ1ZTtcblxuZnVuY3Rpb24gcGF0Y2hPcHRpb25zKCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIGF1dGhvcml6YXRpb25Ub2tlbiA9IF9yZWYuYXV0aG9yaXphdGlvblRva2VuLFxuICAgICAgY3JlZGVudGlhbHMgPSBfcmVmLmNyZWRlbnRpYWxzLFxuICAgICAgbG9vc2VFdmVudCA9IF9yZWYubG9vc2VFdmVudCxcbiAgICAgIGxvb3NlRXZlbnRzID0gX3JlZi5sb29zZUV2ZW50cyxcbiAgICAgIF9yZWYkcmVnaW9uID0gX3JlZi5yZWdpb24sXG4gICAgICByZWdpb24gPSBfcmVmJHJlZ2lvbiA9PT0gdm9pZCAwID8gJ3dlc3R1cycgOiBfcmVmJHJlZ2lvbixcbiAgICAgIHN1YnNjcmlwdGlvbktleSA9IF9yZWYuc3Vic2NyaXB0aW9uS2V5LFxuICAgICAgb3RoZXJPcHRpb25zID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3JlZiwgW1wiYXV0aG9yaXphdGlvblRva2VuXCIsIFwiY3JlZGVudGlhbHNcIiwgXCJsb29zZUV2ZW50XCIsIFwibG9vc2VFdmVudHNcIiwgXCJyZWdpb25cIiwgXCJzdWJzY3JpcHRpb25LZXlcIl0pO1xuXG4gIGlmICh0eXBlb2YgbG9vc2VFdmVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLndhcm4oJ3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzOiBUaGUgb3B0aW9uIFwibG9vc2VFdmVudFwiIHNob3VsZCBiZSBuYW1lZCBhcyBcImxvb3NlRXZlbnRzXCIuJyk7XG4gICAgbG9vc2VFdmVudHMgPSBsb29zZUV2ZW50O1xuICB9XG5cbiAgaWYgKCFjcmVkZW50aWFscykge1xuICAgIGlmICghYXV0aG9yaXphdGlvblRva2VuICYmICFzdWJzY3JpcHRpb25LZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXM6IENyZWRlbnRpYWxzIG11c3QgYmUgc3BlY2lmaWVkLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzOiBXZSBhcmUgZGVwcmVjYXRpbmcgYXV0aG9yaXphdGlvblRva2VuLCByZWdpb24sIGFuZCBzdWJzY3JpcHRpb25LZXkuIFBsZWFzZSB1c2UgY3JlZGVudGlhbHMgaW5zdGVhZC4gVGhlIGRlcHJlY2F0ZWQgb3B0aW9uIHdpbGwgYmUgcmVtb3ZlZCBvbiBvciBhZnRlciAyMDIwLTExLTE0LicpO1xuXG4gICAgICBjcmVkZW50aWFscyA9XG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfcmVmMiA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjIuZGVmYXVsdCkoXG4gICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgX3JlZ2VuZXJhdG9yLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkge1xuICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgaWYgKCFhdXRob3JpemF0aW9uVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX3Jlc29sdmVGdW5jdGlvbk9yUmV0dXJuVmFsdWUuZGVmYXVsdCkoYXV0aG9yaXphdGlvblRva2VuKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQyID0gcmVnaW9uO1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSB7XG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb25Ub2tlbjogX2NvbnRleHQudDEsXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogX2NvbnRleHQudDJcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQzID0gcmVnaW9uO1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfcmVzb2x2ZUZ1bmN0aW9uT3JSZXR1cm5WYWx1ZS5kZWZhdWx0KShzdWJzY3JpcHRpb25LZXkpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQ0ID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0ge1xuICAgICAgICAgICAgICAgICAgICByZWdpb246IF9jb250ZXh0LnQzLFxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25LZXk6IF9jb250ZXh0LnQ0XG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgX2NvbnRleHQudDApO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgX2NhbGxlZSk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gY3JlZGVudGlhbHMoKSB7XG4gICAgICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIG90aGVyT3B0aW9ucywge1xuICAgIGZldGNoQ3JlZGVudGlhbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfZmV0Y2hDcmVkZW50aWFscyA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjIuZGVmYXVsdCkoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICBfcmVnZW5lcmF0b3IuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkge1xuICAgICAgICB2YXIgX3JlZjMsIGF1dGhvcml6YXRpb25Ub2tlbiwgcmVnaW9uLCBzdWJzY3JpcHRpb25LZXk7XG5cbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvci5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF9yZXNvbHZlRnVuY3Rpb25PclJldHVyblZhbHVlLmRlZmF1bHQpKGNyZWRlbnRpYWxzKTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgX3JlZjMgPSBfY29udGV4dDIuc2VudDtcbiAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uVG9rZW4gPSBfcmVmMy5hdXRob3JpemF0aW9uVG9rZW47XG4gICAgICAgICAgICAgICAgcmVnaW9uID0gX3JlZjMucmVnaW9uO1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbktleSA9IF9yZWYzLnN1YnNjcmlwdGlvbktleTtcblxuICAgICAgICAgICAgICAgIGlmICghKCFhdXRob3JpemF0aW9uVG9rZW4gJiYgIXN1YnNjcmlwdGlvbktleSkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gODtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXM6IEVpdGhlciBhdXRob3JpemF0aW9uIHRva2VuIGFuZCBzdWJzY3JpcHRpb24ga2V5IG11c3QgYmUgcHJvdmlkZWQuJyk7XG5cbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIGlmICghYXV0aG9yaXphdGlvblRva2VuKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEzO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIGF1dGhvcml6YXRpb25Ub2tlbiAhPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDExO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3ZWItc3BlZWNoLWNvZ25pdGl2ZS1zZXJ2aWNlczogQXV0aG9yaXphdGlvbiB0b2tlbiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgIGlmICghKHR5cGVvZiBzdWJzY3JpcHRpb25LZXkgIT09ICdzdHJpbmcnKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignd2ViLXNwZWVjaC1jb2duaXRpdmUtc2VydmljZXM6IFN1YnNjcmlwdGlvbiBrZXkgbXVzdCBiZSBhIHN0cmluZy4nKTtcblxuICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgIGlmIChzaG91bGRXYXJuT25TdWJzY3JpcHRpb25LZXkgJiYgc3Vic2NyaXB0aW9uS2V5KSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzOiBJbiBwcm9kdWN0aW9uIGVudmlyb25tZW50LCBzdWJzY3JpcHRpb24ga2V5IHNob3VsZCBub3QgYmUgdXNlZCwgYXV0aG9yaXphdGlvbiB0b2tlbiBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLicpO1xuICAgICAgICAgICAgICAgICAgc2hvdWxkV2Fybk9uU3Vic2NyaXB0aW9uS2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoXCJyZXR1cm5cIiwgYXV0aG9yaXphdGlvblRva2VuID8ge1xuICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvblRva2VuOiBhdXRob3JpemF0aW9uVG9rZW4sXG4gICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvblxuICAgICAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbktleTogc3Vic2NyaXB0aW9uS2V5XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZTIpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBmZXRjaENyZWRlbnRpYWxzKCkge1xuICAgICAgICByZXR1cm4gX2ZldGNoQ3JlZGVudGlhbHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZldGNoQ3JlZGVudGlhbHM7XG4gICAgfSgpLFxuICAgIGxvb3NlRXZlbnRzOiBsb29zZUV2ZW50c1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdGNoT3B0aW9ucy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlc29sdmVGdW5jdGlvbk9yUmV0dXJuVmFsdWU7XG5cbmZ1bmN0aW9uIHJlc29sdmVGdW5jdGlvbk9yUmV0dXJuVmFsdWUoZm5PclZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgZm5PclZhbHVlID09PSAnZnVuY3Rpb24nID8gZm5PclZhbHVlKCkgOiBmbk9yVmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlRnVuY3Rpb25PclJldHVyblZhbHVlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZhdWx0KGFycmF5LCBleHRyYXMpIHtcbiAgdmFyIG1hcCA9IF9vYmplY3RTcHJlYWQoe30sIFtdLnJlZHVjZS5jYWxsKGFycmF5LCBmdW5jdGlvbiAobWFwLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICBtYXBbaW5kZXhdID0gdmFsdWU7XG4gICAgcmV0dXJuIG1hcDtcbiAgfSwge30pLCB7fSwgZXh0cmFzLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7XG4gICAgbGVuZ3RoOiBhcnJheS5sZW5ndGhcbiAgfSwgU3ltYm9sLml0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwobWFwKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH0pKTtcblxuICByZXR1cm4gbWFwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyYXlUb01hcC5qcy5tYXAiLCIvLyBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIFNpbmRyZSBTb3JodXMgPHNpbmRyZXNvcmh1c0BnbWFpbC5jb20+IChzaW5kcmVzb3JodXMuY29tKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vLyBUaGlzIHBpZWNlIG9mIGNvZGUgaXMgYWRvcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcC1kZWZlclxuLy8gVGhlIHJlYXNvbiB3aHkgd2UgbmVlZCB0byBmb3JrIGl0IGlzIGJlY2F1c2U6XG4vLyAtIFRoZSBvcmlnaW5hbCBwYWNrYWdlIHB1Ymxpc2hlZCB0byBOUE0gaXMgbm90IEVTNS1jb21wbGlhbnRcbi8vICAgIC0gRHVlIHRvIHRoZSB1c2Ugb2YgYXJyb3cgZnVuY3Rpb25zXG4vLyAtIGNyZWF0ZS1yZWFjdC1hcHBAMSBkb2VzIG5vdCBwbGF5IG5pY2Ugd2l0aCBwYWNrYWdlcyB0aGF0IGFyZSBub3QgRVM1LWNvbXBsaWFudFxuLy8gICAgLSBjcmVhdGUtcmVhY3QtYXBwQDIgZG8gcGxheSBuaWNlLCBidXQgaXQgd2FzIHNvIG5ldyB0aGF0IG1vc3Qgb2YgdGhlIHBlb3BsZSBhcmUgc3RpbGwgb24gQDFcbi8vIENyaXRlcmlhIHRvIHJlbW92ZSB0aGlzIHBhY2thZ2U6XG4vLyAtIFdoZW4gY3JlYXRlLXJlYWN0LWFwcEAyIGJlY29tZSBtYWluc3RyZWFtXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVEZWZlcnJlZDtcblxuZnVuY3Rpb24gY3JlYXRlRGVmZXJyZWQoKSB7XG4gIHZhciByZXQgPSB7fTtcbiAgcmV0LnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmV0LnJlc29sdmUgPSByZXNvbHZlO1xuICAgIHJldC5yZWplY3QgPSByZWplY3Q7XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRGVmZXJyZWQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbnZhciBfY3JlYXRlRGVmZXJyZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZURlZmVycmVkXCIpKTtcblxuZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIHZhciBzaGlmdERlZmVycmVkO1xuICB2YXIgcXVldWUgPSBbXTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2godmFsdWUpIHtcbiAgICBpZiAoc2hpZnREZWZlcnJlZCkge1xuICAgICAgdmFyIF9zaGlmdERlZmVycmVkID0gc2hpZnREZWZlcnJlZCxcbiAgICAgICAgICByZXNvbHZlID0gX3NoaWZ0RGVmZXJyZWQucmVzb2x2ZTtcbiAgICAgIHNoaWZ0RGVmZXJyZWQgPSBudWxsO1xuICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXVlLnB1c2godmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHF1ZXVlLnNoaWZ0KCkpO1xuICAgIH1cblxuICAgIHJldHVybiAoc2hpZnREZWZlcnJlZCB8fCAoc2hpZnREZWZlcnJlZCA9ICgwLCBfY3JlYXRlRGVmZXJyZWQuZGVmYXVsdCkoKSkpLnByb21pc2U7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBwdXNoOiBwdXNoLFxuICAgIHNoaWZ0OiBzaGlmdFxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlUHJvbWlzZVF1ZXVlLmpzLm1hcCIsIi8vIFRoaXMgaXMgYWRvcHRlZCBmcm9tIGV2ZW50LXRhcmdldC1zaGltQDUuMC4xIHVuZGVyIE1JVCBMaWNlbnNlLlxuLy8gVGhlIHNvdXJjZSBjb2RlIGlzIGNvcGllZCBoZXJlIGJlY2F1c2UgdGhlIG9yaWdpbmFsIHBhY2thZ2UgZG8gbm90IHN1cHBvcnQgRVM1IGJyb3dzZXJzLlxuXG4vKipcbiAqIEBhdXRob3IgVG9ydSBOYWdhc2hpbWEgPGh0dHBzOi8vZ2l0aHViLmNvbS9teXN0aWNhdGVhPlxuICogQGNvcHlyaWdodCAyMDE1IFRvcnUgTmFnYXNoaW1hLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGRpcmVjdG9yeSBmb3IgZnVsbCBsaWNlbnNlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG52YXIgX3R5cGVvZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBQcml2YXRlRGF0YVxuICogQHByb3BlcnR5IHtFdmVudFRhcmdldH0gZXZlbnRUYXJnZXQgVGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwcm9wZXJ0eSB7e3R5cGU6c3RyaW5nfX0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBldmVudFBoYXNlIFRoZSBjdXJyZW50IGV2ZW50IHBoYXNlLlxuICogQHByb3BlcnR5IHtFdmVudFRhcmdldHxudWxsfSBjdXJyZW50VGFyZ2V0IFRoZSBjdXJyZW50IGV2ZW50IHRhcmdldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY2FuY2VsZWQgVGhlIGZsYWcgdG8gcHJldmVudCBkZWZhdWx0LlxuICogQHByb3BlcnR5IHtib29sZWFufSBzdG9wcGVkIFRoZSBmbGFnIHRvIHN0b3AgcHJvcGFnYXRpb24uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGltbWVkaWF0ZVN0b3BwZWQgVGhlIGZsYWcgdG8gc3RvcCBwcm9wYWdhdGlvbiBpbW1lZGlhdGVseS5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb258bnVsbH0gcGFzc2l2ZUxpc3RlbmVyIFRoZSBsaXN0ZW5lciBpZiB0aGUgY3VycmVudCBsaXN0ZW5lciBpcyBwYXNzaXZlLiBPdGhlcndpc2UgdGhpcyBpcyBudWxsLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVTdGFtcCBUaGUgdW5peCB0aW1lLlxuICogQHByaXZhdGVcbiAqL1xuXG4vKipcbiAqIFByaXZhdGUgZGF0YSBmb3IgZXZlbnQgd3JhcHBlcnMuXG4gKiBAdHlwZSB7V2Vha01hcDxFdmVudCwgUHJpdmF0ZURhdGE+fVxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgcHJpdmF0ZURhdGEgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBDYWNoZSBmb3Igd3JhcHBlciBjbGFzc2VzLlxuICogQHR5cGUge1dlYWtNYXA8T2JqZWN0LCBGdW5jdGlvbj59XG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciB3cmFwcGVycyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqIEdldCBwcml2YXRlIGRhdGEuXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZXZlbnQgb2JqZWN0IHRvIGdldCBwcml2YXRlIGRhdGEuXG4gKiBAcmV0dXJucyB7UHJpdmF0ZURhdGF9IFRoZSBwcml2YXRlIGRhdGEgb2YgdGhlIGV2ZW50LlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwZChldmVudCkge1xuICB2YXIgcmV0diA9IHByaXZhdGVEYXRhLmdldChldmVudCk7XG4gIGNvbnNvbGUuYXNzZXJ0KHJldHYgIT0gbnVsbCwgXCIndGhpcycgaXMgZXhwZWN0ZWQgYW4gRXZlbnQgb2JqZWN0LCBidXQgZ290XCIsIGV2ZW50KTtcbiAgcmV0dXJuIHJldHY7XG59XG4vKipcbiAqIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jc2V0LXRoZS1jYW5jZWxlZC1mbGFnXG4gKiBAcGFyYW0gZGF0YSB7UHJpdmF0ZURhdGF9IHByaXZhdGUgZGF0YS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldENhbmNlbEZsYWcoZGF0YSkge1xuICBpZiAoZGF0YS5wYXNzaXZlTGlzdGVuZXIgIT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHByZXZlbnREZWZhdWx0IGluc2lkZSBwYXNzaXZlIGV2ZW50IGxpc3RlbmVyIGludm9jYXRpb24uXCIsIGRhdGEucGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWRhdGEuZXZlbnQuY2FuY2VsYWJsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRhdGEuY2FuY2VsZWQgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZGF0YS5ldmVudC5wcmV2ZW50RGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZGF0YS5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtZXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cblxuLyoqXG4gKiBUaGUgZXZlbnQgd3JhcHBlci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZXZlbnRUYXJnZXQgVGhlIGV2ZW50IHRhcmdldCBvZiB0aGlzIGRpc3BhdGNoaW5nLlxuICogQHBhcmFtIHtFdmVudHx7dHlwZTpzdHJpbmd9fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgdG8gd3JhcC5cbiAqL1xuXG5cbmZ1bmN0aW9uIEV2ZW50KGV2ZW50VGFyZ2V0LCBldmVudCkge1xuICBwcml2YXRlRGF0YS5zZXQodGhpcywge1xuICAgIGV2ZW50VGFyZ2V0OiBldmVudFRhcmdldCxcbiAgICBldmVudDogZXZlbnQsXG4gICAgZXZlbnRQaGFzZTogMixcbiAgICBjdXJyZW50VGFyZ2V0OiBldmVudFRhcmdldCxcbiAgICBjYW5jZWxlZDogZmFsc2UsXG4gICAgc3RvcHBlZDogZmFsc2UsXG4gICAgaW1tZWRpYXRlU3RvcHBlZDogZmFsc2UsXG4gICAgcGFzc2l2ZUxpc3RlbmVyOiBudWxsLFxuICAgIHRpbWVTdGFtcDogZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KClcbiAgfSk7IC8vIGh0dHBzOi8vaGV5Y2FtLmdpdGh1Yi5pby93ZWJpZGwvI1VuZm9yZ2VhYmxlXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaXNUcnVzdGVkXCIsIHtcbiAgICB2YWx1ZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9KTsgLy8gRGVmaW5lIGFjY2Vzc29yc1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgaWYgKCEoa2V5IGluIHRoaXMpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCBkZWZpbmVSZWRpcmVjdERlc2NyaXB0b3Ioa2V5KSk7XG4gICAgfVxuICB9XG59IC8vIFNob3VsZCBiZSBlbnVtZXJhYmxlLCBidXQgY2xhc3MgbWV0aG9kcyBhcmUgbm90IGVudW1lcmFibGUuXG5cblxuRXZlbnQucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhpcyBldmVudC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBwZCh0aGlzKS5ldmVudC50eXBlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IG9mIHRoaXMgZXZlbnQuXG4gICAqIEB0eXBlIHtFdmVudFRhcmdldH1cbiAgICovXG4gIGdldCB0YXJnZXQoKSB7XG4gICAgcmV0dXJuIHBkKHRoaXMpLmV2ZW50VGFyZ2V0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IG9mIHRoaXMgZXZlbnQuXG4gICAqIEB0eXBlIHtFdmVudFRhcmdldH1cbiAgICovXG4gIGdldCBjdXJyZW50VGFyZ2V0KCkge1xuICAgIHJldHVybiBwZCh0aGlzKS5jdXJyZW50VGFyZ2V0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7RXZlbnRUYXJnZXRbXX0gVGhlIGNvbXBvc2VkIHBhdGggb2YgdGhpcyBldmVudC5cbiAgICovXG4gIGNvbXBvc2VkUGF0aDogZnVuY3Rpb24gY29tcG9zZWRQYXRoKCkge1xuICAgIHZhciBjdXJyZW50VGFyZ2V0ID0gcGQodGhpcykuY3VycmVudFRhcmdldDtcblxuICAgIGlmIChjdXJyZW50VGFyZ2V0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2N1cnJlbnRUYXJnZXRdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb25zdGFudCBvZiBOT05FLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IE5PTkUoKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnN0YW50IG9mIENBUFRVUklOR19QSEFTRS5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBDQVBUVVJJTkdfUEhBU0UoKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnN0YW50IG9mIEFUX1RBUkdFVC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBBVF9UQVJHRVQoKSB7XG4gICAgcmV0dXJuIDI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnN0YW50IG9mIEJVQkJMSU5HX1BIQVNFLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IEJVQkJMSU5HX1BIQVNFKCkge1xuICAgIHJldHVybiAzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IG9mIHRoaXMgZXZlbnQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgZXZlbnRQaGFzZSgpIHtcbiAgICByZXR1cm4gcGQodGhpcykuZXZlbnRQaGFzZTtcbiAgfSxcblxuICAvKipcbiAgICogU3RvcCBldmVudCBidWJibGluZy5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbigpIHtcbiAgICB2YXIgZGF0YSA9IHBkKHRoaXMpO1xuICAgIGRhdGEuc3RvcHBlZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRhdGEuZXZlbnQuc3RvcFByb3BhZ2F0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGRhdGEuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTdG9wIGV2ZW50IGJ1YmJsaW5nLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24gc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkge1xuICAgIHZhciBkYXRhID0gcGQodGhpcyk7XG4gICAgZGF0YS5zdG9wcGVkID0gdHJ1ZTtcbiAgICBkYXRhLmltbWVkaWF0ZVN0b3BwZWQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkYXRhLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBkYXRhLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVGhlIGZsYWcgdG8gYmUgYnViYmxpbmcuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGJ1YmJsZXMoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4ocGQodGhpcykuZXZlbnQuYnViYmxlcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBmbGFnIHRvIGJlIGNhbmNlbGFibGUuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGNhbmNlbGFibGUoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4ocGQodGhpcykuZXZlbnQuY2FuY2VsYWJsZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbmNlbCB0aGlzIGV2ZW50LlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICBzZXRDYW5jZWxGbGFnKHBkKHRoaXMpKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGZsYWcgdG8gaW5kaWNhdGUgY2FuY2VsbGF0aW9uIHN0YXRlLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBkZWZhdWx0UHJldmVudGVkKCkge1xuICAgIHJldHVybiBwZCh0aGlzKS5jYW5jZWxlZDtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGZsYWcgdG8gYmUgY29tcG9zZWQuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGNvbXBvc2VkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHBkKHRoaXMpLmV2ZW50LmNvbXBvc2VkKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIHVuaXggdGltZSBvZiB0aGlzIGV2ZW50LlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHRpbWVTdGFtcCgpIHtcbiAgICByZXR1cm4gcGQodGhpcykudGltZVN0YW1wO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IG9mIHRoaXMgZXZlbnQuXG4gICAqIEB0eXBlIHtFdmVudFRhcmdldH1cbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGdldCBzcmNFbGVtZW50KCkge1xuICAgIHJldHVybiBwZCh0aGlzKS5ldmVudFRhcmdldDtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGZsYWcgdG8gc3RvcCBldmVudCBidWJibGluZy5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBnZXQgY2FuY2VsQnViYmxlKCkge1xuICAgIHJldHVybiBwZCh0aGlzKS5zdG9wcGVkO1xuICB9LFxuXG4gIHNldCBjYW5jZWxCdWJibGUodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSBwZCh0aGlzKTtcbiAgICBkYXRhLnN0b3BwZWQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkYXRhLmV2ZW50LmNhbmNlbEJ1YmJsZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIGRhdGEuZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBmbGFnIHRvIGluZGljYXRlIGNhbmNlbGxhdGlvbiBzdGF0ZS5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBnZXQgcmV0dXJuVmFsdWUoKSB7XG4gICAgcmV0dXJuICFwZCh0aGlzKS5jYW5jZWxlZDtcbiAgfSxcblxuICBzZXQgcmV0dXJuVmFsdWUodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBzZXRDYW5jZWxGbGFnKHBkKHRoaXMpKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhpcyBldmVudCBvYmplY3QuIEJ1dCBkbyBub3RoaW5nIHVuZGVyIGV2ZW50IGRpc3BhdGNoaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbYnViYmxlcz1mYWxzZV0gVGhlIGZsYWcgdG8gYmUgcG9zc2libGUgdG8gYnViYmxlIHVwLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjYW5jZWxhYmxlPWZhbHNlXSBUaGUgZmxhZyB0byBiZSBwb3NzaWJsZSB0byBjYW5jZWwuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpbml0RXZlbnQ6IGZ1bmN0aW9uIGluaXRFdmVudCgpIHsvLyBEbyBub3RoaW5nLlxuICB9XG59OyAvLyBgY29uc3RydWN0b3JgIGlzIG5vdCBlbnVtZXJhYmxlLlxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnQucHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIHtcbiAgdmFsdWU6IEV2ZW50LFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHdyaXRhYmxlOiB0cnVlXG59KTsgLy8gRW5zdXJlIGBldmVudCBpbnN0YW5jZW9mIHdpbmRvdy5FdmVudGAgaXMgYHRydWVgLlxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LkV2ZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihFdmVudC5wcm90b3R5cGUsIHdpbmRvdy5FdmVudC5wcm90b3R5cGUpOyAvLyBNYWtlIGFzc29jaWF0aW9uIGZvciB3cmFwcGVycy5cblxuICB3cmFwcGVycy5zZXQod2luZG93LkV2ZW50LnByb3RvdHlwZSwgRXZlbnQpO1xufVxuLyoqXG4gKiBHZXQgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgdG8gcmVkaXJlY3QgYSBnaXZlbiBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgUHJvcGVydHkgbmFtZSB0byBkZWZpbmUgcHJvcGVydHkgZGVzY3JpcHRvci5cbiAqIEByZXR1cm5zIHtQcm9wZXJ0eURlc2NyaXB0b3J9IFRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIHRvIHJlZGlyZWN0IHRoZSBwcm9wZXJ0eS5cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBkZWZpbmVSZWRpcmVjdERlc2NyaXB0b3Ioa2V5KSB7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gcGQodGhpcykuZXZlbnRba2V5XTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICBwZCh0aGlzKS5ldmVudFtrZXldID0gdmFsdWU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9O1xufVxuLyoqXG4gKiBHZXQgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgdG8gY2FsbCBhIGdpdmVuIG1ldGhvZCBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgUHJvcGVydHkgbmFtZSB0byBkZWZpbmUgcHJvcGVydHkgZGVzY3JpcHRvci5cbiAqIEByZXR1cm5zIHtQcm9wZXJ0eURlc2NyaXB0b3J9IFRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIHRvIGNhbGwgdGhlIG1ldGhvZCBwcm9wZXJ0eS5cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBkZWZpbmVDYWxsRGVzY3JpcHRvcihrZXkpIHtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICB2YXIgZXZlbnQgPSBwZCh0aGlzKS5ldmVudDtcbiAgICAgIHJldHVybiBldmVudFtrZXldLmFwcGx5KGV2ZW50LCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfTtcbn1cbi8qKlxuICogRGVmaW5lIG5ldyB3cmFwcGVyIGNsYXNzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gQmFzZUV2ZW50IFRoZSBiYXNlIHdyYXBwZXIgY2xhc3MuXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIHByb3RvdHlwZSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFRoZSBkZWZpbmVkIHdyYXBwZXIgY2xhc3MuXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gZGVmaW5lV3JhcHBlcihCYXNlRXZlbnQsIHByb3RvKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvdG8pO1xuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCYXNlRXZlbnQ7XG4gIH1cbiAgLyoqIEN1c3RvbUV2ZW50ICovXG5cblxuICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudFRhcmdldCwgZXZlbnQpIHtcbiAgICBCYXNlRXZlbnQuY2FsbCh0aGlzLCBldmVudFRhcmdldCwgZXZlbnQpO1xuICB9XG5cbiAgQ3VzdG9tRXZlbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCYXNlRXZlbnQucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBDdXN0b21FdmVudCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfVxuICB9KTsgLy8gRGVmaW5lIGFjY2Vzc29ycy5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgIGlmICghKGtleSBpbiBCYXNlRXZlbnQucHJvdG90eXBlKSkge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBrZXkpO1xuICAgICAgdmFyIGlzRnVuYyA9IHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ3VzdG9tRXZlbnQucHJvdG90eXBlLCBrZXksIGlzRnVuYyA/IGRlZmluZUNhbGxEZXNjcmlwdG9yKGtleSkgOiBkZWZpbmVSZWRpcmVjdERlc2NyaXB0b3Ioa2V5KSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEN1c3RvbUV2ZW50O1xufVxuLyoqXG4gKiBHZXQgdGhlIHdyYXBwZXIgY2xhc3Mgb2YgYSBnaXZlbiBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIHByb3RvdHlwZSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gZ2V0IGl0cyB3cmFwcGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBUaGUgd3JhcHBlciBjbGFzcy5cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRXcmFwcGVyKHByb3RvKSB7XG4gIGlmIChwcm90byA9PSBudWxsIHx8IHByb3RvID09PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuIEV2ZW50O1xuICB9XG5cbiAgdmFyIHdyYXBwZXIgPSB3cmFwcGVycy5nZXQocHJvdG8pO1xuXG4gIGlmICh3cmFwcGVyID09IG51bGwpIHtcbiAgICB3cmFwcGVyID0gZGVmaW5lV3JhcHBlcihnZXRXcmFwcGVyKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykpLCBwcm90byk7XG4gICAgd3JhcHBlcnMuc2V0KHByb3RvLCB3cmFwcGVyKTtcbiAgfVxuXG4gIHJldHVybiB3cmFwcGVyO1xufVxuLyoqXG4gKiBXcmFwIGEgZ2l2ZW4gZXZlbnQgdG8gbWFuYWdlbWVudCBhIGRpc3BhdGNoaW5nLlxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZXZlbnRUYXJnZXQgVGhlIGV2ZW50IHRhcmdldCBvZiB0aGlzIGRpc3BhdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IFRoZSBldmVudCB0byB3cmFwLlxuICogQHJldHVybnMge0V2ZW50fSBUaGUgd3JhcHBlciBpbnN0YW5jZS5cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiB3cmFwRXZlbnQoZXZlbnRUYXJnZXQsIGV2ZW50KSB7XG4gIHZhciBXcmFwcGVyID0gZ2V0V3JhcHBlcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoZXZlbnQpKTtcbiAgcmV0dXJuIG5ldyBXcmFwcGVyKGV2ZW50VGFyZ2V0LCBldmVudCk7XG59XG4vKipcbiAqIEdldCB0aGUgaW1tZWRpYXRlU3RvcHBlZCBmbGFnIG9mIGEgZ2l2ZW4gZXZlbnQuXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZXZlbnQgdG8gZ2V0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRoZSBmbGFnIHRvIHN0b3AgcHJvcGFnYXRpb24gaW1tZWRpYXRlbHkuXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gaXNTdG9wcGVkKGV2ZW50KSB7XG4gIHJldHVybiBwZChldmVudCkuaW1tZWRpYXRlU3RvcHBlZDtcbn1cbi8qKlxuICogU2V0IHRoZSBjdXJyZW50IGV2ZW50IHBoYXNlIG9mIGEgZ2l2ZW4gZXZlbnQuXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZXZlbnQgdG8gc2V0IGN1cnJlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50UGhhc2UgTmV3IGV2ZW50IHBoYXNlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gc2V0RXZlbnRQaGFzZShldmVudCwgZXZlbnRQaGFzZSkge1xuICBwZChldmVudCkuZXZlbnRQaGFzZSA9IGV2ZW50UGhhc2U7XG59XG4vKipcbiAqIFNldCB0aGUgY3VycmVudCB0YXJnZXQgb2YgYSBnaXZlbiBldmVudC5cbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBldmVudCB0byBzZXQgY3VycmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fG51bGx9IGN1cnJlbnRUYXJnZXQgTmV3IGN1cnJlbnQgdGFyZ2V0LlxuICogQHJldHVybnMge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gc2V0Q3VycmVudFRhcmdldChldmVudCwgY3VycmVudFRhcmdldCkge1xuICBwZChldmVudCkuY3VycmVudFRhcmdldCA9IGN1cnJlbnRUYXJnZXQ7XG59XG4vKipcbiAqIFNldCBhIHBhc3NpdmUgbGlzdGVuZXIgb2YgYSBnaXZlbiBldmVudC5cbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBldmVudCB0byBzZXQgY3VycmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufG51bGx9IHBhc3NpdmVMaXN0ZW5lciBOZXcgcGFzc2l2ZSBsaXN0ZW5lci5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFBhc3NpdmVMaXN0ZW5lcihldmVudCwgcGFzc2l2ZUxpc3RlbmVyKSB7XG4gIHBkKGV2ZW50KS5wYXNzaXZlTGlzdGVuZXIgPSBwYXNzaXZlTGlzdGVuZXI7XG59XG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IExpc3RlbmVyTm9kZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gbGlzdGVuZXJcbiAqIEBwcm9wZXJ0eSB7MXwyfDN9IGxpc3RlbmVyVHlwZVxuICogQHByb3BlcnR5IHtib29sZWFufSBwYXNzaXZlXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IG9uY2VcbiAqIEBwcm9wZXJ0eSB7TGlzdGVuZXJOb2RlfG51bGx9IG5leHRcbiAqIEBwcml2YXRlXG4gKi9cblxuLyoqXG4gKiBAdHlwZSB7V2Vha01hcDxvYmplY3QsIE1hcDxzdHJpbmcsIExpc3RlbmVyTm9kZT4+fVxuICogQHByaXZhdGVcbiAqL1xuXG5cbnZhciBsaXN0ZW5lcnNNYXAgPSBuZXcgV2Vha01hcCgpOyAvLyBMaXN0ZW5lciB0eXBlc1xuXG52YXIgQ0FQVFVSRSA9IDE7XG52YXIgQlVCQkxFID0gMjtcbnZhciBBVFRSSUJVVEUgPSAzO1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgZ2l2ZW4gdmFsdWUgaXMgYW4gb2JqZWN0IG9yIG5vdC5cbiAqIEBwYXJhbSB7YW55fSB4IFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdC5cbiAqL1xuXG5mdW5jdGlvbiBpc09iamVjdCh4KSB7XG4gIHJldHVybiB4ICE9PSBudWxsICYmICgwLCBfdHlwZW9mMi5kZWZhdWx0KSh4KSA9PT0gXCJvYmplY3RcIjsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG59XG4vKipcbiAqIEdldCBsaXN0ZW5lcnMuXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBldmVudFRhcmdldCBUaGUgZXZlbnQgdGFyZ2V0IHRvIGdldC5cbiAqIEByZXR1cm5zIHtNYXA8c3RyaW5nLCBMaXN0ZW5lck5vZGU+fSBUaGUgbGlzdGVuZXJzLlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldExpc3RlbmVycyhldmVudFRhcmdldCkge1xuICB2YXIgbGlzdGVuZXJzID0gbGlzdGVuZXJzTWFwLmdldChldmVudFRhcmdldCk7XG5cbiAgaWYgKGxpc3RlbmVycyA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIid0aGlzJyBpcyBleHBlY3RlZCBhbiBFdmVudFRhcmdldCBvYmplY3QsIGJ1dCBnb3QgYW5vdGhlciB2YWx1ZS5cIik7XG4gIH1cblxuICByZXR1cm4gbGlzdGVuZXJzO1xufVxuLyoqXG4gKiBHZXQgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIHRoZSBldmVudCBhdHRyaWJ1dGUgb2YgYSBnaXZlbiBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIGV2ZW50IG5hbWUgdG8gZ2V0IHByb3BlcnR5IGRlc2NyaXB0b3IuXG4gKiBAcmV0dXJucyB7UHJvcGVydHlEZXNjcmlwdG9yfSBUaGUgcHJvcGVydHkgZGVzY3JpcHRvci5cbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBkZWZpbmVFdmVudEF0dHJpYnV0ZURlc2NyaXB0b3IoZXZlbnROYW1lKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gZ2V0TGlzdGVuZXJzKHRoaXMpO1xuICAgICAgdmFyIG5vZGUgPSBsaXN0ZW5lcnMuZ2V0KGV2ZW50TmFtZSk7XG5cbiAgICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgaWYgKG5vZGUubGlzdGVuZXJUeXBlID09PSBBVFRSSUJVVEUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZS5saXN0ZW5lcjtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobGlzdGVuZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIiAmJiAhaXNPYmplY3QobGlzdGVuZXIpKSB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgfVxuXG4gICAgICB2YXIgbGlzdGVuZXJzID0gZ2V0TGlzdGVuZXJzKHRoaXMpOyAvLyBUcmF2ZXJzZSB0byB0aGUgdGFpbCB3aGlsZSByZW1vdmluZyBvbGQgdmFsdWUuXG5cbiAgICAgIHZhciBwcmV2ID0gbnVsbDtcbiAgICAgIHZhciBub2RlID0gbGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xuXG4gICAgICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChub2RlLmxpc3RlbmVyVHlwZSA9PT0gQVRUUklCVVRFKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIG9sZCB2YWx1ZS5cbiAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5uZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbm9kZS5uZXh0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShldmVudE5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2ID0gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICB9IC8vIEFkZCBuZXcgdmFsdWUuXG5cblxuICAgICAgaWYgKGxpc3RlbmVyICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBuZXdOb2RlID0ge1xuICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICBsaXN0ZW5lclR5cGU6IEFUVFJJQlVURSxcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICBvbmNlOiBmYWxzZSxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbmV3Tm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldi5uZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfTtcbn1cbi8qKlxuICogRGVmaW5lIGFuIGV2ZW50IGF0dHJpYnV0ZSAoZS5nLiBgZXZlbnRUYXJnZXQub25jbGlja2ApLlxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50VGFyZ2V0UHJvdG90eXBlIFRoZSBldmVudCB0YXJnZXQgcHJvdG90eXBlIHRvIGRlZmluZSBhbiBldmVudCBhdHRyYml0ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgVGhlIGV2ZW50IG5hbWUgdG8gZGVmaW5lLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblxuXG5mdW5jdGlvbiBkZWZpbmVFdmVudEF0dHJpYnV0ZShldmVudFRhcmdldFByb3RvdHlwZSwgZXZlbnROYW1lKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudFRhcmdldFByb3RvdHlwZSwgXCJvblwiLmNvbmNhdChldmVudE5hbWUpLCBkZWZpbmVFdmVudEF0dHJpYnV0ZURlc2NyaXB0b3IoZXZlbnROYW1lKSk7XG59XG4vKipcbiAqIERlZmluZSBhIGN1c3RvbSBFdmVudFRhcmdldCB3aXRoIGV2ZW50IGF0dHJpYnV0ZXMuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBldmVudE5hbWVzIEV2ZW50IG5hbWVzIGZvciBldmVudCBhdHRyaWJ1dGVzLlxuICogQHJldHVybnMge0V2ZW50VGFyZ2V0fSBUaGUgY3VzdG9tIEV2ZW50VGFyZ2V0LlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGRlZmluZUN1c3RvbUV2ZW50VGFyZ2V0KGV2ZW50TmFtZXMpIHtcbiAgLyoqIEN1c3RvbUV2ZW50VGFyZ2V0ICovXG4gIGZ1bmN0aW9uIEN1c3RvbUV2ZW50VGFyZ2V0KCkge1xuICAgIEV2ZW50VGFyZ2V0LmNhbGwodGhpcyk7XG4gIH1cblxuICBDdXN0b21FdmVudFRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEV2ZW50VGFyZ2V0LnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogQ3VzdG9tRXZlbnRUYXJnZXQsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudE5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgZGVmaW5lRXZlbnRBdHRyaWJ1dGUoQ3VzdG9tRXZlbnRUYXJnZXQucHJvdG90eXBlLCBldmVudE5hbWVzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBDdXN0b21FdmVudFRhcmdldDtcbn1cbi8qKlxuICogRXZlbnRUYXJnZXQuXG4gKlxuICogLSBUaGlzIGlzIGNvbnN0cnVjdG9yIGlmIG5vIGFyZ3VtZW50cy5cbiAqIC0gVGhpcyBpcyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBDdXN0b21FdmVudFRhcmdldCBjb25zdHJ1Y3RvciBpZiB0aGVyZSBhcmUgYXJndW1lbnRzLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqICAgICBjbGFzcyBBIGV4dGVuZHMgRXZlbnRUYXJnZXQge31cbiAqICAgICBjbGFzcyBCIGV4dGVuZHMgRXZlbnRUYXJnZXQoXCJtZXNzYWdlXCIpIHt9XG4gKiAgICAgY2xhc3MgQyBleHRlbmRzIEV2ZW50VGFyZ2V0KFwibWVzc2FnZVwiLCBcImVycm9yXCIpIHt9XG4gKiAgICAgY2xhc3MgRCBleHRlbmRzIEV2ZW50VGFyZ2V0KFtcIm1lc3NhZ2VcIiwgXCJlcnJvclwiXSkge31cbiAqL1xuXG5cbmZ1bmN0aW9uIEV2ZW50VGFyZ2V0KCkge1xuICAvKmVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG4gIGlmICh0aGlzIGluc3RhbmNlb2YgRXZlbnRUYXJnZXQpIHtcbiAgICBsaXN0ZW5lcnNNYXAuc2V0KHRoaXMsIG5ldyBNYXAoKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShhcmd1bWVudHNbMF0pKSB7XG4gICAgcmV0dXJuIGRlZmluZUN1c3RvbUV2ZW50VGFyZ2V0KGFyZ3VtZW50c1swXSk7XG4gIH1cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgdHlwZXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgdHlwZXNbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmluZUN1c3RvbUV2ZW50VGFyZ2V0KHR5cGVzKTtcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIC8qZXNsaW50LWVuYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xufSAvLyBTaG91bGQgYmUgZW51bWVyYWJsZSwgYnV0IGNsYXNzIG1ldGhvZHMgYXJlIG5vdCBlbnVtZXJhYmxlLlxuXG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIEFkZCBhIGdpdmVuIGxpc3RlbmVyIHRvIHRoaXMgZXZlbnQgdGFyZ2V0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBldmVudCBuYW1lIHRvIGFkZC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHRvIGFkZC5cbiAgICogQHBhcmFtIHtib29sZWFufHtjYXB0dXJlPzpib29sZWFuLHBhc3NpdmU/OmJvb2xlYW4sb25jZT86Ym9vbGVhbn19IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBmb3IgdGhpcyBsaXN0ZW5lci5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAobGlzdGVuZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIiAmJiAhaXNPYmplY3QobGlzdGVuZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiJ2xpc3RlbmVyJyBzaG91bGQgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3QuXCIpO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBnZXRMaXN0ZW5lcnModGhpcyk7XG4gICAgdmFyIG9wdGlvbnNJc09iaiA9IGlzT2JqZWN0KG9wdGlvbnMpO1xuICAgIHZhciBjYXB0dXJlID0gb3B0aW9uc0lzT2JqID8gQm9vbGVhbihvcHRpb25zLmNhcHR1cmUpIDogQm9vbGVhbihvcHRpb25zKTtcbiAgICB2YXIgbGlzdGVuZXJUeXBlID0gY2FwdHVyZSA/IENBUFRVUkUgOiBCVUJCTEU7XG4gICAgdmFyIG5ld05vZGUgPSB7XG4gICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICBsaXN0ZW5lclR5cGU6IGxpc3RlbmVyVHlwZSxcbiAgICAgIHBhc3NpdmU6IG9wdGlvbnNJc09iaiAmJiBCb29sZWFuKG9wdGlvbnMucGFzc2l2ZSksXG4gICAgICBvbmNlOiBvcHRpb25zSXNPYmogJiYgQm9vbGVhbihvcHRpb25zLm9uY2UpLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07IC8vIFNldCBpdCBhcyB0aGUgZmlyc3Qgbm9kZSBpZiB0aGUgZmlyc3Qgbm9kZSBpcyBudWxsLlxuXG4gICAgdmFyIG5vZGUgPSBsaXN0ZW5lcnMuZ2V0KGV2ZW50TmFtZSk7XG5cbiAgICBpZiAobm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbmV3Tm9kZSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUcmF2ZXJzZSB0byB0aGUgdGFpbCB3aGlsZSBjaGVja2luZyBkdXBsaWNhdGlvbi4uXG5cblxuICAgIHZhciBwcmV2ID0gbnVsbDtcblxuICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgIGlmIChub2RlLmxpc3RlbmVyID09PSBsaXN0ZW5lciAmJiBub2RlLmxpc3RlbmVyVHlwZSA9PT0gbGlzdGVuZXJUeXBlKSB7XG4gICAgICAgIC8vIFNob3VsZCBpZ25vcmUgZHVwbGljYXRpb24uXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcHJldiA9IG5vZGU7XG4gICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgIH0gLy8gQWRkIGl0LlxuXG5cbiAgICBwcmV2Lm5leHQgPSBuZXdOb2RlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBnaXZlbiBsaXN0ZW5lciBmcm9tIHRoaXMgZXZlbnQgdGFyZ2V0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIFRoZSBldmVudCBuYW1lIHRvIHJlbW92ZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHRvIHJlbW92ZS5cbiAgICogQHBhcmFtIHtib29sZWFufHtjYXB0dXJlPzpib29sZWFuLHBhc3NpdmU/OmJvb2xlYW4sb25jZT86Ym9vbGVhbn19IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBmb3IgdGhpcyBsaXN0ZW5lci5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAobGlzdGVuZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBnZXRMaXN0ZW5lcnModGhpcyk7XG4gICAgdmFyIGNhcHR1cmUgPSBpc09iamVjdChvcHRpb25zKSA/IEJvb2xlYW4ob3B0aW9ucy5jYXB0dXJlKSA6IEJvb2xlYW4ob3B0aW9ucyk7XG4gICAgdmFyIGxpc3RlbmVyVHlwZSA9IGNhcHR1cmUgPyBDQVBUVVJFIDogQlVCQkxFO1xuICAgIHZhciBwcmV2ID0gbnVsbDtcbiAgICB2YXIgbm9kZSA9IGxpc3RlbmVycy5nZXQoZXZlbnROYW1lKTtcblxuICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgIGlmIChub2RlLmxpc3RlbmVyID09PSBsaXN0ZW5lciAmJiBub2RlLmxpc3RlbmVyVHlwZSA9PT0gbGlzdGVuZXJUeXBlKSB7XG4gICAgICAgIGlmIChwcmV2ICE9PSBudWxsKSB7XG4gICAgICAgICAgcHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGUubmV4dCAhPT0gbnVsbCkge1xuICAgICAgICAgIGxpc3RlbmVycy5zZXQoZXZlbnROYW1lLCBub2RlLm5leHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpc3RlbmVycy5kZWxldGUoZXZlbnROYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcHJldiA9IG5vZGU7XG4gICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGlzcGF0Y2ggYSBnaXZlbiBldmVudC5cbiAgICogQHBhcmFtIHtFdmVudHx7dHlwZTpzdHJpbmd9fSBldmVudCBUaGUgZXZlbnQgdG8gZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBgZmFsc2VgIGlmIGNhbmNlbGVkLlxuICAgKi9cbiAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChldmVudCkge1xuICAgIGlmIChldmVudCA9PSBudWxsIHx8IHR5cGVvZiBldmVudC50eXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImV2ZW50LnR5cGVcIiBzaG91bGQgYmUgYSBzdHJpbmcuJyk7XG4gICAgfSAvLyBJZiBsaXN0ZW5lcnMgYXJlbid0IHJlZ2lzdGVyZWQsIHRlcm1pbmF0ZS5cblxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGdldExpc3RlbmVycyh0aGlzKTtcbiAgICB2YXIgZXZlbnROYW1lID0gZXZlbnQudHlwZTtcbiAgICB2YXIgbm9kZSA9IGxpc3RlbmVycy5nZXQoZXZlbnROYW1lKTtcblxuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gU2luY2Ugd2UgY2Fubm90IHJld3JpdGUgc2V2ZXJhbCBwcm9wZXJ0aWVzLCBzbyB3cmFwIG9iamVjdC5cblxuXG4gICAgdmFyIHdyYXBwZWRFdmVudCA9IHdyYXBFdmVudCh0aGlzLCBldmVudCk7IC8vIFRoaXMgZG9lc24ndCBwcm9jZXNzIGNhcHR1cmluZyBwaGFzZSBhbmQgYnViYmxpbmcgcGhhc2UuXG4gICAgLy8gVGhpcyBpc24ndCBwYXJ0aWNpcGF0aW5nIGluIGEgdHJlZS5cblxuICAgIHZhciBwcmV2ID0gbnVsbDtcblxuICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGlzIGxpc3RlbmVyIGlmIGl0J3Mgb25jZVxuICAgICAgaWYgKG5vZGUub25jZSkge1xuICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xuICAgICAgICAgIHByZXYubmV4dCA9IG5vZGUubmV4dDtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLm5leHQgIT09IG51bGwpIHtcbiAgICAgICAgICBsaXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgbm9kZS5uZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGV2ZW50TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXYgPSBub2RlO1xuICAgICAgfSAvLyBDYWxsIHRoaXMgbGlzdGVuZXJcblxuXG4gICAgICBzZXRQYXNzaXZlTGlzdGVuZXIod3JhcHBlZEV2ZW50LCBub2RlLnBhc3NpdmUgPyBub2RlLmxpc3RlbmVyIDogbnVsbCk7XG5cbiAgICAgIGlmICh0eXBlb2Ygbm9kZS5saXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbm9kZS5saXN0ZW5lci5jYWxsKHRoaXMsIHdyYXBwZWRFdmVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vZGUubGlzdGVuZXJUeXBlICE9PSBBVFRSSUJVVEUgJiYgdHlwZW9mIG5vZGUubGlzdGVuZXIuaGFuZGxlRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBub2RlLmxpc3RlbmVyLmhhbmRsZUV2ZW50KHdyYXBwZWRFdmVudCk7XG4gICAgICB9IC8vIEJyZWFrIGlmIGBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25gIHdhcyBjYWxsZWQuXG5cblxuICAgICAgaWYgKGlzU3RvcHBlZCh3cmFwcGVkRXZlbnQpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgIH1cblxuICAgIHNldFBhc3NpdmVMaXN0ZW5lcih3cmFwcGVkRXZlbnQsIG51bGwpO1xuICAgIHNldEV2ZW50UGhhc2Uod3JhcHBlZEV2ZW50LCAwKTtcbiAgICBzZXRDdXJyZW50VGFyZ2V0KHdyYXBwZWRFdmVudCwgbnVsbCk7XG4gICAgcmV0dXJuICF3cmFwcGVkRXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgfVxufTsgLy8gYGNvbnN0cnVjdG9yYCBpcyBub3QgZW51bWVyYWJsZS5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50VGFyZ2V0LnByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCB7XG4gIHZhbHVlOiBFdmVudFRhcmdldCxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB3cml0YWJsZTogdHJ1ZVxufSk7IC8vIEVuc3VyZSBgZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuRXZlbnRUYXJnZXRgIGlzIGB0cnVlYC5cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5FdmVudFRhcmdldCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoRXZlbnRUYXJnZXQucHJvdG90eXBlLCB3aW5kb3cuRXZlbnRUYXJnZXQucHJvdG90eXBlKTtcbn1cblxuZXhwb3J0cy5kZWZpbmVFdmVudEF0dHJpYnV0ZSA9IGRlZmluZUV2ZW50QXR0cmlidXRlO1xuZXhwb3J0cy5FdmVudFRhcmdldCA9IEV2ZW50VGFyZ2V0O1xuZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRUYXJnZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50VGFyZ2V0O1xubW9kdWxlLmV4cG9ydHMuRXZlbnRUYXJnZXQgPSBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBFdmVudFRhcmdldDtcbm1vZHVsZS5leHBvcnRzLmRlZmluZUV2ZW50QXR0cmlidXRlID0gZGVmaW5lRXZlbnRBdHRyaWJ1dGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudC10YXJnZXQtc2hpbS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi9zcmMvY29tbW9uLmJyb3dzZXIvRXhwb3J0c1wiKTtcbnZhciBFeHBvcnRzXzIgPSByZXF1aXJlKFwiLi9zcmMvY29tbW9uL0V4cG9ydHNcIik7XG4vLyBDb21tb24uU3RvcmFnZS5TZXRMb2NhbFN0b3JhZ2UobmV3IENvbW1vbi5Ccm93c2VyLkxvY2FsU3RvcmFnZSgpKTtcbi8vIENvbW1vbi5TdG9yYWdlLlNldFNlc3Npb25TdG9yYWdlKG5ldyBDb21tb24uQnJvd3Nlci5TZXNzaW9uU3RvcmFnZSgpKTtcbkV4cG9ydHNfMi5FdmVudHMuaW5zdGFuY2UuYXR0YWNoTGlzdGVuZXIobmV3IEV4cG9ydHNfMS5Db25zb2xlTG9nZ2luZ0xpc3RlbmVyKCkpO1xuLy8gU3BlZWNoIFNESyBBUElcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NyYy9zZGsvRXhwb3J0c1wiKSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pY3Jvc29mdC5jb2duaXRpdmVzZXJ2aWNlcy5zcGVlY2guc2RrLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0V4cG9ydHNcIik7XG52YXIgQ29uc29sZUxvZ2dpbmdMaXN0ZW5lciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb25zb2xlTG9nZ2luZ0xpc3RlbmVyKGxvZ0xldmVsRmlsdGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChsb2dMZXZlbEZpbHRlciA9PT0gdm9pZCAwKSB7IGxvZ0xldmVsRmlsdGVyID0gRXhwb3J0c18xLkV2ZW50VHlwZS5XYXJuaW5nOyB9XG4gICAgICAgIHRoaXMub25FdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmV2ZW50VHlwZSA+PSBfdGhpcy5wcml2TG9nTGV2ZWxGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9nID0gX3RoaXMudG9TdHJpbmcoZXZlbnQpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuZXZlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRXhwb3J0c18xLkV2ZW50VHlwZS5EZWJ1ZzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKGxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFeHBvcnRzXzEuRXZlbnRUeXBlLkluZm86XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKGxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFeHBvcnRzXzEuRXZlbnRUeXBlLldhcm5pbmc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFeHBvcnRzXzEuRXZlbnRUeXBlLkVycm9yOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudG9TdHJpbmcgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBsb2dGcmFnbWVudHMgPSBbXG4gICAgICAgICAgICAgICAgXCJcIiArIGV2ZW50LkV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICBcIlwiICsgZXZlbnQuTmFtZSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3AgJiYgZXZlbnQuaGFzT3duUHJvcGVydHkocHJvcCkgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJvcCAhPT0gXCJldmVudFRpbWVcIiAmJiBwcm9wICE9PSBcImV2ZW50VHlwZVwiICYmXG4gICAgICAgICAgICAgICAgICAgIHByb3AgIT09IFwiZXZlbnRJZFwiICYmIHByb3AgIT09IFwibmFtZVwiICYmXG4gICAgICAgICAgICAgICAgICAgIHByb3AgIT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBldmVudFtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlVG9Mb2cgPSBcIjxOVUxMPlwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVUb0xvZyA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVRvTG9nID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxvZ0ZyYWdtZW50cy5wdXNoKHByb3AgKyBcIjogXCIgKyB2YWx1ZVRvTG9nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbG9nRnJhZ21lbnRzLmpvaW4oXCIgfCBcIik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdkxvZ0xldmVsRmlsdGVyID0gbG9nTGV2ZWxGaWx0ZXI7XG4gICAgfVxuICAgIHJldHVybiBDb25zb2xlTG9nZ2luZ0xpc3RlbmVyO1xufSgpKTtcbmV4cG9ydHMuQ29uc29sZUxvZ2dpbmdMaXN0ZW5lciA9IENvbnNvbGVMb2dnaW5nTGlzdGVuZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnNvbGVMb2dnaW5nTGlzdGVuZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0NvbnNvbGVMb2dnaW5nTGlzdGVuZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vTWljQXVkaW9Tb3VyY2VcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vRmlsZUF1ZGlvU291cmNlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1BDTVJlY29yZGVyXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1dlYnNvY2tldENvbm5lY3Rpb25cIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vV2Vic29ja2V0TWVzc2FnZUFkYXB0ZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vUmVwbGF5YWJsZUF1ZGlvTm9kZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9Qcm94eUluZm9cIikpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHBvcnRzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBBdWRpb1N0cmVhbUZvcm1hdF8xID0gcmVxdWlyZShcIi4uLy4uL3NyYy9zZGsvQXVkaW8vQXVkaW9TdHJlYW1Gb3JtYXRcIik7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiKTtcbnZhciBFeHBvcnRzXzIgPSByZXF1aXJlKFwiLi4vY29tbW9uL0V4cG9ydHNcIik7XG52YXIgRmlsZUF1ZGlvU291cmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbGVBdWRpb1NvdXJjZShmaWxlLCBhdWRpb1NvdXJjZUlkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucHJpdlN0cmVhbXMgPSB7fTtcbiAgICAgICAgdGhpcy50dXJuT24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIEZpbGVSZWFkZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JNc2cgPSBcIkJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBGaWxlUmVhZGVyLlwiO1xuICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1NvdXJjZUVycm9yRXZlbnQoZXJyb3JNc2csIFwiXCIpKTsgLy8gaW5pdGlhbGl6YXRpb24gZXJyb3IgLSBubyBzdHJlYW1pZCBhdCB0aGlzIHBvaW50XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMi5Qcm9taXNlSGVscGVyLmZyb21FcnJvcihlcnJvck1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5wcml2RmlsZS5uYW1lLmxhc3RJbmRleE9mKFwiLndhdlwiKSAhPT0gX3RoaXMucHJpdkZpbGUubmFtZS5sZW5ndGggLSA0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gX3RoaXMucHJpdkZpbGUubmFtZSArIFwiIGlzIG5vdCBzdXBwb3J0ZWQuIE9ubHkgV0FWRSBmaWxlcyBhcmUgYWxsb3dlZCBhdCB0aGUgbW9tZW50LlwiO1xuICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1NvdXJjZUVycm9yRXZlbnQoZXJyb3JNc2csIFwiXCIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXhwb3J0c18yLlByb21pc2VIZWxwZXIuZnJvbUVycm9yKGVycm9yTXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKF90aGlzLnByaXZGaWxlLnNpemUgPiBGaWxlQXVkaW9Tb3VyY2UuTUFYX1NJWkUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JNc2cgPSBfdGhpcy5wcml2RmlsZS5uYW1lICsgXCIgZXhjZWVkcyB0aGUgbWF4aW11bSBhbGxvd2VkIGZpbGUgc2l6ZSAoXCIgKyBGaWxlQXVkaW9Tb3VyY2UuTUFYX1NJWkUgKyBcIikuXCI7XG4gICAgICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18yLkF1ZGlvU291cmNlRXJyb3JFdmVudChlcnJvck1zZywgXCJcIikpO1xuICAgICAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18yLkF1ZGlvU291cmNlSW5pdGlhbGl6aW5nRXZlbnQoX3RoaXMucHJpdklkKSk7IC8vIG5vIHN0cmVhbSBpZFxuICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18yLkF1ZGlvU291cmNlUmVhZHlFdmVudChfdGhpcy5wcml2SWQpKTtcbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZJZDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hdHRhY2ggPSBmdW5jdGlvbiAoYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVBdHRhY2hpbmdFdmVudChfdGhpcy5wcml2SWQsIGF1ZGlvTm9kZUlkKSk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMudXBsb2FkKGF1ZGlvTm9kZUlkKS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoZnVuY3Rpb24gKHN0cmVhbVJlYWRlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVBdHRhY2hlZEV2ZW50KF90aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkZXRhY2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVJlYWRlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLnByaXZTdHJlYW1zW2F1ZGlvTm9kZUlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50KF90aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnR1cm5PZmYoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdWRpb05vZGVJZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbVJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRldGFjaCA9IGZ1bmN0aW9uIChhdWRpb05vZGVJZCkge1xuICAgICAgICAgICAgaWYgKGF1ZGlvTm9kZUlkICYmIF90aGlzLnByaXZTdHJlYW1zW2F1ZGlvTm9kZUlkXSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZTdHJlYW1zW2F1ZGlvTm9kZUlkXS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5wcml2U3RyZWFtc1thdWRpb05vZGVJZF07XG4gICAgICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18yLkF1ZGlvU3RyZWFtTm9kZURldGFjaGVkRXZlbnQoX3RoaXMucHJpdklkLCBhdWRpb05vZGVJZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnR1cm5PZmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzdHJlYW1JZCBpbiBfdGhpcy5wcml2U3RyZWFtcykge1xuICAgICAgICAgICAgICAgIGlmIChzdHJlYW1JZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyZWFtID0gX3RoaXMucHJpdlN0cmVhbXNbc3RyZWFtSWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyZWFtICYmICFzdHJlYW0uaXNDbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18yLkF1ZGlvU291cmNlT2ZmRXZlbnQoX3RoaXMucHJpdklkKSk7IC8vIG5vIHN0cmVhbSBub3dcbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwbG9hZCA9IGZ1bmN0aW9uIChhdWRpb05vZGVJZCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnR1cm5PbigpXG4gICAgICAgICAgICAgICAgLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aChmdW5jdGlvbiAoXykge1xuICAgICAgICAgICAgICAgIHZhciBzdHJlYW0gPSBuZXcgRXhwb3J0c18yLlN0cmVhbShhdWRpb05vZGVJZCk7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdlN0cmVhbXNbYXVkaW9Ob2RlSWRdID0gc3RyZWFtO1xuICAgICAgICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydE9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGVuZE9mZnNldCA9IEZpbGVBdWRpb1NvdXJjZS5DSFVOS19TSVpFO1xuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzTmV4dENodW5rID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJlYW0uaXNDbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gb3V0cHV0IHN0cmVhbSB3YXMgY2xvc2VkIChzb21lYm9keSBjYWxsZWQgVHVybk9mZikuIFdlJ3JlIGRvbmUgaGVyZS5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdHJlYW0ud3JpdGVTdHJlYW1DaHVuayh7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHJlYWRlci5yZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lUmVjZWl2ZWQ6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kT2Zmc2V0IDwgX3RoaXMucHJpdkZpbGUuc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSBlbmRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRPZmZzZXQgPSBNYXRoLm1pbihlbmRPZmZzZXQgKyBGaWxlQXVkaW9Tb3VyY2UuQ0hVTktfU0laRSwgX3RoaXMucHJpdkZpbGUuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2h1bmtfMSA9IF90aGlzLnByaXZGaWxlLnNsaWNlKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGNodW5rXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UndmUgd3JpdHRlbiB0aGUgZW50aXJlIGZpbGUgdG8gdGhlIG91dHB1dCBzdHJlYW0sIGNhbiBjbG9zZSBpdCBub3cuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IHByb2Nlc3NOZXh0Q2h1bms7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gXCJFcnJvciBvY2N1cnJlZCB3aGlsZSBwcm9jZXNzaW5nICdcIiArIF90aGlzLnByaXZGaWxlLm5hbWUgKyBcIicuIFwiICsgZXZlbnQ7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVFcnJvckV2ZW50KF90aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQsIGVycm9yTXNnKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgY2h1bmsgPSBfdGhpcy5wcml2RmlsZS5zbGljZShzdGFydE9mZnNldCwgZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoY2h1bmspO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpcy5wcml2RXZlbnRzLm9uRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgRXhwb3J0c18yLkV2ZW50cy5pbnN0YW5jZS5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcml2SWQgPSBhdWRpb1NvdXJjZUlkID8gYXVkaW9Tb3VyY2VJZCA6IEV4cG9ydHNfMi5jcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgIHRoaXMucHJpdkV2ZW50cyA9IG5ldyBFeHBvcnRzXzIuRXZlbnRTb3VyY2UoKTtcbiAgICAgICAgdGhpcy5wcml2RmlsZSA9IGZpbGU7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaWxlQXVkaW9Tb3VyY2UucHJvdG90eXBlLCBcImZvcm1hdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEZpbGVBdWRpb1NvdXJjZS5GSUxFRk9STUFUO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlsZUF1ZGlvU291cmNlLnByb3RvdHlwZSwgXCJldmVudHNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZFdmVudHM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaWxlQXVkaW9Tb3VyY2UucHJvdG90eXBlLCBcImRldmljZUluZm9cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHtcbiAgICAgICAgICAgICAgICBiaXRzcGVyc2FtcGxlOiBGaWxlQXVkaW9Tb3VyY2UuRklMRUZPUk1BVC5iaXRzUGVyU2FtcGxlLFxuICAgICAgICAgICAgICAgIGNoYW5uZWxjb3VudDogRmlsZUF1ZGlvU291cmNlLkZJTEVGT1JNQVQuY2hhbm5lbHMsXG4gICAgICAgICAgICAgICAgY29ubmVjdGl2aXR5OiBFeHBvcnRzXzEuY29ubmVjdGl2aXR5LlVua25vd24sXG4gICAgICAgICAgICAgICAgbWFudWZhY3R1cmVyOiBcIlNwZWVjaCBTREtcIixcbiAgICAgICAgICAgICAgICBtb2RlbDogXCJGaWxlXCIsXG4gICAgICAgICAgICAgICAgc2FtcGxlcmF0ZTogRmlsZUF1ZGlvU291cmNlLkZJTEVGT1JNQVQuc2FtcGxlc1BlclNlYyxcbiAgICAgICAgICAgICAgICB0eXBlOiBFeHBvcnRzXzEudHlwZS5GaWxlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8vIFJlY29tbWVuZGVkIHNhbXBsZSByYXRlIChieXRlcy9zZWNvbmQpLlxuICAgIEZpbGVBdWRpb1NvdXJjZS5TQU1QTEVfUkFURSA9IDE2MDAwICogMjsgLy8gMTYga0h6ICogMTYgYml0c1xuICAgIC8vIFdlIHNob3VsZCBzdHJlYW0gYXVkaW8gYXQgbm8gZmFzdGVyIHRoYW4gMnggcmVhbC10aW1lIChpLmUuLCBzZW5kIGZpdmUgY2h1bmtzXG4gICAgLy8gcGVyIHNlY29uZCwgd2l0aCB0aGUgY2h1bmsgc2l6ZSA9PSBzYW1wbGUgcmF0ZSBpbiBieXRlcyBwZXIgc2Vjb25kICogMiAvIDUpLlxuICAgIEZpbGVBdWRpb1NvdXJjZS5DSFVOS19TSVpFID0gRmlsZUF1ZGlvU291cmNlLlNBTVBMRV9SQVRFICogMiAvIDU7XG4gICAgLy8gMTAgc2Vjb25kcyBvZiBhdWRpbyBpbiBieXRlcyA9XG4gICAgLy8gc2FtcGxlIHJhdGUgKGJ5dGVzL3NlY29uZCkgKiA2MDAgKHNlY29uZHMpICsgNDQgKHNpemUgb2YgdGhlIHdhdmUgaGVhZGVyKS5cbiAgICBGaWxlQXVkaW9Tb3VyY2UuTUFYX1NJWkUgPSBGaWxlQXVkaW9Tb3VyY2UuU0FNUExFX1JBVEUgKiA2MDAgKyA0NDtcbiAgICBGaWxlQXVkaW9Tb3VyY2UuRklMRUZPUk1BVCA9IEF1ZGlvU3RyZWFtRm9ybWF0XzEuQXVkaW9TdHJlYW1Gb3JtYXQuZ2V0V2F2ZUZvcm1hdFBDTSgxNjAwMCwgMTYsIDEpO1xuICAgIHJldHVybiBGaWxlQXVkaW9Tb3VyY2U7XG59KCkpO1xuZXhwb3J0cy5GaWxlQXVkaW9Tb3VyY2UgPSBGaWxlQXVkaW9Tb3VyY2U7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZpbGVBdWRpb1NvdXJjZS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQXVkaW9TdHJlYW1Gb3JtYXRfMSA9IHJlcXVpcmUoXCIuLi8uLi9zcmMvc2RrL0F1ZGlvL0F1ZGlvU3RyZWFtRm9ybWF0XCIpO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24uc3BlZWNoL0V4cG9ydHNcIik7XG52YXIgRXhwb3J0c18yID0gcmVxdWlyZShcIi4uL2NvbW1vbi9FeHBvcnRzXCIpO1xuZXhwb3J0cy5BdWRpb1dvcmtsZXRTb3VyY2VVUkxQcm9wZXJ0eU5hbWUgPSBcIk1JQ1JPUEhPTkUtV29ya2xldFNvdXJjZVVybFwiO1xudmFyIE1pY0F1ZGlvU291cmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1pY0F1ZGlvU291cmNlKHByaXZSZWNvcmRlciwgb3V0cHV0Q2h1bmtTaXplLCBhdWRpb1NvdXJjZUlkLCBkZXZpY2VJZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByaXZSZWNvcmRlciA9IHByaXZSZWNvcmRlcjtcbiAgICAgICAgdGhpcy5kZXZpY2VJZCA9IGRldmljZUlkO1xuICAgICAgICB0aGlzLnByaXZTdHJlYW1zID0ge307XG4gICAgICAgIHRoaXMudHVybk9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZJbml0aWFsaXplRGVmZXJyYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdkluaXRpYWxpemVEZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5wcml2SW5pdGlhbGl6ZURlZmVycmFsID0gbmV3IEV4cG9ydHNfMi5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgX3RoaXMuY3JlYXRlQXVkaW9Db250ZXh0KCk7XG4gICAgICAgICAgICB2YXIgbmF2ID0gd2luZG93Lm5hdmlnYXRvcjtcbiAgICAgICAgICAgIHZhciBnZXRVc2VyTWVkaWEgPSAobmF2LmdldFVzZXJNZWRpYSB8fFxuICAgICAgICAgICAgICAgIG5hdi53ZWJraXRHZXRVc2VyTWVkaWEgfHxcbiAgICAgICAgICAgICAgICBuYXYubW96R2V0VXNlck1lZGlhIHx8XG4gICAgICAgICAgICAgICAgbmF2Lm1zR2V0VXNlck1lZGlhKTtcbiAgICAgICAgICAgIGlmICghIW5hdi5tZWRpYURldmljZXMpIHtcbiAgICAgICAgICAgICAgICBnZXRVc2VyTWVkaWEgPSBmdW5jdGlvbiAoY29uc3RyYWludHMsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBuYXYubWVkaWFEZXZpY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oc3VjY2Vzc0NhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWdldFVzZXJNZWRpYSkge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvck1zZyA9IFwiQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGdldFVzZXJNZWRpYS5cIjtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2SW5pdGlhbGl6ZURlZmVycmFsLnJlamVjdChlcnJvck1zZyk7XG4gICAgICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18yLkF1ZGlvU291cmNlRXJyb3JFdmVudChlcnJvck1zZywgXCJcIikpOyAvLyBtaWMgaW5pdGlhbGl6ZWQgZXJyb3IgLSBubyBzdHJlYW1pZCBhdCB0aGlzIHBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18yLkF1ZGlvU291cmNlSW5pdGlhbGl6aW5nRXZlbnQoX3RoaXMucHJpdklkKSk7IC8vIG5vIHN0cmVhbSBpZFxuICAgICAgICAgICAgICAgICAgICBnZXRVc2VyTWVkaWEoeyBhdWRpbzogX3RoaXMuZGV2aWNlSWQgPyB7IGRldmljZUlkOiBfdGhpcy5kZXZpY2VJZCB9IDogdHJ1ZSwgdmlkZW86IGZhbHNlIH0sIGZ1bmN0aW9uIChtZWRpYVN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdk1lZGlhU3RyZWFtID0gbWVkaWFTdHJlYW07XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9Tb3VyY2VSZWFkeUV2ZW50KF90aGlzLnByaXZJZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkluaXRpYWxpemVEZWZlcnJhbC5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1zZyA9IFwiRXJyb3Igb2NjdXJyZWQgZHVyaW5nIG1pY3JvcGhvbmUgaW5pdGlhbGl6YXRpb246IFwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gX3RoaXMucHJpdkluaXRpYWxpemVEZWZlcnJhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhBQ0s6IHRoaXMgc2hvdWxkIGJlIGhhbmRsZWQgdGhyb3VnaCBvbkVycm9yIGNhbGxiYWNrcyBvZiBhbGwgcHJvbWlzZXMgdXAgdGhlIHN0YWNrLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgdGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbiBlYXN5IHdheSB0byByZWplY3QgcHJvbWlzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpdGhvdXQgYSBsb3Qgb2YgY29kZSByZXBsaWNhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGZpeCBwcm9taXNlIGltcGxlbWVudGF0aW9uLCBhbGxvdyBmb3IgYSBncmFjZWZ1bCByZWplY3QgY2hhaW5pbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2SW5pdGlhbGl6ZURlZmVycmFsID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcC5yZWplY3QoZXJyb3JNc2cpOyAvLyB0aGlzIHdpbGwgYnViYmxlIHVwIHRocm91Z2ggdGhlIHdob2xlIGNoYWluIG9mIHByb21pc2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCBlYWNoIG5ldyBsZXZlbCBhZGRpbmcgZXh0cmEgXCJVbmhhbmRsZWQgY2FsbGJhY2sgZXJyb3JcIiBwcmVmaXggdG8gdGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGxpbmUgaXMgbm90IGd1YXJhbnRlZWQgdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9Tb3VyY2VFcnJvckV2ZW50KF90aGlzLnByaXZJZCwgZXJyb3JNc2cpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJpdkNvbnRleHQuc3RhdGUgPT09IFwic3VzcGVuZGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogT24gaU9TLCB0aGUgV2ViIEF1ZGlvIEFQSSByZXF1aXJlcyBzb3VuZHMgdG8gYmUgdHJpZ2dlcmVkIGZyb20gYW4gZXhwbGljaXQgdXNlciBhY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJBdWRpby93ZWItYXVkaW8tYXBpL2lzc3Vlcy83OTBcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkNvbnRleHQucmVzdW1lKCkudGhlbihuZXh0LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2SW5pdGlhbGl6ZURlZmVycmFsLnJlamVjdChcIkZhaWxlZCB0byBpbml0aWFsaXplIGF1ZGlvIGNvbnRleHQ6IFwiICsgcmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZJbml0aWFsaXplRGVmZXJyYWwucHJvbWlzZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZJZDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hdHRhY2ggPSBmdW5jdGlvbiAoYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVBdHRhY2hpbmdFdmVudChfdGhpcy5wcml2SWQsIGF1ZGlvTm9kZUlkKSk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMubGlzdGVuKGF1ZGlvTm9kZUlkKS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoZnVuY3Rpb24gKHN0cmVhbVJlYWRlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVBdHRhY2hlZEV2ZW50KF90aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkZXRhY2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVJlYWRlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLnByaXZTdHJlYW1zW2F1ZGlvTm9kZUlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50KF90aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnR1cm5PZmYoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdWRpb05vZGVJZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVhZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbVJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRldGFjaCA9IGZ1bmN0aW9uIChhdWRpb05vZGVJZCkge1xuICAgICAgICAgICAgaWYgKGF1ZGlvTm9kZUlkICYmIF90aGlzLnByaXZTdHJlYW1zW2F1ZGlvTm9kZUlkXSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZTdHJlYW1zW2F1ZGlvTm9kZUlkXS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5wcml2U3RyZWFtc1thdWRpb05vZGVJZF07XG4gICAgICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18yLkF1ZGlvU3RyZWFtTm9kZURldGFjaGVkRXZlbnQoX3RoaXMucHJpdklkLCBhdWRpb05vZGVJZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnR1cm5PZmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBzdHJlYW1JZCBpbiBfdGhpcy5wcml2U3RyZWFtcykge1xuICAgICAgICAgICAgICAgIGlmIChzdHJlYW1JZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyZWFtID0gX3RoaXMucHJpdlN0cmVhbXNbc3RyZWFtSWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1NvdXJjZU9mZkV2ZW50KF90aGlzLnByaXZJZCkpOyAvLyBubyBzdHJlYW0gbm93XG4gICAgICAgICAgICBfdGhpcy5wcml2SW5pdGlhbGl6ZURlZmVycmFsID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmRlc3Ryb3lBdWRpb0NvbnRleHQoKTtcbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxpc3RlbiA9IGZ1bmN0aW9uIChhdWRpb05vZGVJZCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnR1cm5PbigpXG4gICAgICAgICAgICAgICAgLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aChmdW5jdGlvbiAoXykge1xuICAgICAgICAgICAgICAgIHZhciBzdHJlYW0gPSBuZXcgRXhwb3J0c18yLkNodW5rZWRBcnJheUJ1ZmZlclN0cmVhbShfdGhpcy5wcml2T3V0cHV0Q2h1bmtTaXplLCBhdWRpb05vZGVJZCk7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdlN0cmVhbXNbYXVkaW9Ob2RlSWRdID0gc3RyZWFtO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZWNvcmRlci5yZWNvcmQoX3RoaXMucHJpdkNvbnRleHQsIF90aGlzLnByaXZNZWRpYVN0cmVhbSwgc3RyZWFtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVFcnJvckV2ZW50KF90aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQsIGVycm9yKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25FdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgX3RoaXMucHJpdkV2ZW50cy5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIEV4cG9ydHNfMi5FdmVudHMuaW5zdGFuY2Uub25FdmVudChldmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY3JlYXRlQXVkaW9Db250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEhX3RoaXMucHJpdkNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQXVkaW9Db250ZXh0XG4gICAgICAgICAgICB2YXIgQXVkaW9Db250ZXh0ID0gKHdpbmRvdy5BdWRpb0NvbnRleHQpXG4gICAgICAgICAgICAgICAgfHwgKHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQpXG4gICAgICAgICAgICAgICAgfHwgZmFsc2U7XG4gICAgICAgICAgICBpZiAoIUF1ZGlvQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBXZWIgQXVkaW8gQVBJIChBdWRpb0NvbnRleHQgaXMgbm90IGF2YWlsYWJsZSkuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMucHJpdkNvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGVzdHJveUF1ZGlvQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMucHJpdkNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5wcml2UmVjb3JkZXIucmVsZWFzZU1lZGlhUmVzb3VyY2VzKF90aGlzLnByaXZDb250ZXh0KTtcbiAgICAgICAgICAgIC8vIFRoaXMgcGF0dGVybiBicm91Z2h0IHRvIHlvdSBieSBhIGJ1ZyBpbiB0aGUgVHlwZVNjcmlwdCBjb21waWxlciB3aGVyZSBpdFxuICAgICAgICAgICAgLy8gY29uZnVzZXMgdGhlIChcImNsb3NlXCIgaW4gdGhpcy5wcml2Q29udGV4dCkgd2l0aCB0aGlzLnByaXZDb250ZXh0IGFsd2F5cyBiZWluZyBudWxsIGFzIHRoZSBhbHRlcm5hdGUuXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzExNDk4XG4gICAgICAgICAgICB2YXIgaGFzQ2xvc2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChcImNsb3NlXCIgaW4gX3RoaXMucHJpdkNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBoYXNDbG9zZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzQ2xvc2UpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2Q29udGV4dC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZDb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG51bGwgIT09IF90aGlzLnByaXZDb250ZXh0ICYmIF90aGlzLnByaXZDb250ZXh0LnN0YXRlID09PSBcInJ1bm5pbmdcIikge1xuICAgICAgICAgICAgICAgIC8vIFN1c3BlbmQgYWN0dWFsbHkgdGFrZXMgYSBjYWxsYmFjaywgYnV0IGFuYWxvZ291cyB0byB0aGVcbiAgICAgICAgICAgICAgICAvLyByZXN1bWUgbWV0aG9kLCBpdCdsbCBiZSBvbmx5IGZpcmVkIGlmIHN1c3BlbmQgaXMgY2FsbGVkXG4gICAgICAgICAgICAgICAgLy8gaW4gYSBkaXJlY3QgcmVzcG9uc2UgdG8gYSB1c2VyIGFjdGlvbi4gVGhlIGxhdGVyIGlzIG5vdCBhbHdheXNcbiAgICAgICAgICAgICAgICAvLyB0aGUgY2FzZSwgYXMgVHVybk9mZiBpcyBhbHNvIGNhbGxlZCwgd2hlbiB3ZSByZWNlaXZlIGFuXG4gICAgICAgICAgICAgICAgLy8gZW5kLW9mLXNwZWVjaCBtZXNzYWdlIGZyb20gdGhlIHNlcnZpY2UuIFNvLCBkb2luZyBhIGJlc3QgZWZmb3J0XG4gICAgICAgICAgICAgICAgLy8gZmlyZS1hbmQtZm9yZ2V0IGhlcmUuXG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdkNvbnRleHQuc3VzcGVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByaXZPdXRwdXRDaHVua1NpemUgPSBvdXRwdXRDaHVua1NpemU7XG4gICAgICAgIHRoaXMucHJpdklkID0gYXVkaW9Tb3VyY2VJZCA/IGF1ZGlvU291cmNlSWQgOiBFeHBvcnRzXzIuY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgICAgICB0aGlzLnByaXZFdmVudHMgPSBuZXcgRXhwb3J0c18yLkV2ZW50U291cmNlKCk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNaWNBdWRpb1NvdXJjZS5wcm90b3R5cGUsIFwiZm9ybWF0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gTWljQXVkaW9Tb3VyY2UuQVVESU9GT1JNQVQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNaWNBdWRpb1NvdXJjZS5wcm90b3R5cGUsIFwiZXZlbnRzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2RXZlbnRzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWljQXVkaW9Tb3VyY2UucHJvdG90eXBlLCBcImRldmljZUluZm9cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE1pY3JvcGhvbmVMYWJlbCgpLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aChmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBiaXRzcGVyc2FtcGxlOiBNaWNBdWRpb1NvdXJjZS5BVURJT0ZPUk1BVC5iaXRzUGVyU2FtcGxlLFxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsY291bnQ6IE1pY0F1ZGlvU291cmNlLkFVRElPRk9STUFULmNoYW5uZWxzLFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aXZpdHk6IEV4cG9ydHNfMS5jb25uZWN0aXZpdHkuVW5rbm93bixcbiAgICAgICAgICAgICAgICAgICAgbWFudWZhY3R1cmVyOiBcIlNwZWVjaCBTREtcIixcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVyYXRlOiBNaWNBdWRpb1NvdXJjZS5BVURJT0ZPUk1BVC5zYW1wbGVzUGVyU2VjLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBFeHBvcnRzXzEudHlwZS5NaWNyb3Bob25lcyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1pY0F1ZGlvU291cmNlLnByb3RvdHlwZS5zZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gZXhwb3J0cy5BdWRpb1dvcmtsZXRTb3VyY2VVUkxQcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdlJlY29yZGVyLnNldFdvcmtsZXRVcmwodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvcGVydHkgJ1wiICsgbmFtZSArIFwiJyBpcyBub3Qgc3VwcG9ydGVkIG9uIE1pY3JvcGhvbmUuXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNaWNBdWRpb1NvdXJjZS5wcm90b3R5cGUuZ2V0TWljcm9waG9uZUxhYmVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZGVmYXVsdE1pY3JvcGhvbmVOYW1lID0gXCJtaWNyb3Bob25lXCI7XG4gICAgICAgIC8vIElmIHdlIGRpZCB0aGlzIGFscmVhZHksIHJldHVybiB0aGUgdmFsdWUuXG4gICAgICAgIGlmICh0aGlzLnByaXZNaWNyb3Bob25lTGFiZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMi5Qcm9taXNlSGVscGVyLmZyb21SZXN1bHQodGhpcy5wcml2TWljcm9waG9uZUxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgc3RyZWFtIGlzbid0IGN1cnJlbnRseSBydW5uaW5nLCB3ZSBjYW4ndCBxdWVyeSBkZXZpY2VzIGJlY2F1c2Ugc2VjdXJpdHkuXG4gICAgICAgIGlmICh0aGlzLnByaXZNZWRpYVN0cmVhbSA9PT0gdW5kZWZpbmVkIHx8ICF0aGlzLnByaXZNZWRpYVN0cmVhbS5hY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KGRlZmF1bHRNaWNyb3Bob25lTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0dXAgYSBkZWZhdWx0XG4gICAgICAgIHRoaXMucHJpdk1pY3JvcGhvbmVMYWJlbCA9IGRlZmF1bHRNaWNyb3Bob25lTmFtZTtcbiAgICAgICAgLy8gR2V0IHRoZSBpZCBvZiB0aGUgZGV2aWNlIHJ1bm5pbmcgdGhlIGF1ZGlvIHRyYWNrLlxuICAgICAgICB2YXIgbWljcm9waG9uZURldmljZUlkID0gdGhpcy5wcml2TWVkaWFTdHJlYW0uZ2V0VHJhY2tzKClbMF0uZ2V0U2V0dGluZ3MoKS5kZXZpY2VJZDtcbiAgICAgICAgLy8gSWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGdldHRpbmcgdGhlIGRldmljZSBJRCwgc2V0IGEgZGVmYXVsdCBhbmQgcmV0dXJuLlxuICAgICAgICBpZiAodW5kZWZpbmVkID09PSBtaWNyb3Bob25lRGV2aWNlSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRoaXMucHJpdk1pY3JvcGhvbmVMYWJlbCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IEV4cG9ydHNfMi5EZWZlcnJlZCgpO1xuICAgICAgICAvLyBFbnVtZXJhdGUgdGhlIG1lZGlhIGRldmljZXMuXG4gICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpLnRoZW4oZnVuY3Rpb24gKGRldmljZXMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZGV2aWNlc18xID0gZGV2aWNlczsgX2kgPCBkZXZpY2VzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRldmljZSA9IGRldmljZXNfMVtfaV07XG4gICAgICAgICAgICAgICAgaWYgKGRldmljZS5kZXZpY2VJZCA9PT0gbWljcm9waG9uZURldmljZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIHRoZSBkZXZpY2VcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdk1pY3JvcGhvbmVMYWJlbCA9IGRldmljZS5sYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShfdGhpcy5wcml2TWljcm9waG9uZUxhYmVsKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVmZXJyZWQucmVzb2x2ZShfdGhpcy5wcml2TWljcm9waG9uZUxhYmVsKTsgfSk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gICAgfTtcbiAgICBNaWNBdWRpb1NvdXJjZS5BVURJT0ZPUk1BVCA9IEF1ZGlvU3RyZWFtRm9ybWF0XzEuQXVkaW9TdHJlYW1Gb3JtYXQuZ2V0RGVmYXVsdElucHV0Rm9ybWF0KCk7XG4gICAgcmV0dXJuIE1pY0F1ZGlvU291cmNlO1xufSgpKTtcbmV4cG9ydHMuTWljQXVkaW9Tb3VyY2UgPSBNaWNBdWRpb1NvdXJjZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWljQXVkaW9Tb3VyY2UuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRXhwb3J0c1wiKTtcbnZhciBQY21SZWNvcmRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQY21SZWNvcmRlcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5yZWNvcmQgPSBmdW5jdGlvbiAoY29udGV4dCwgbWVkaWFTdHJlYW0sIG91dHB1dFN0cmVhbSkge1xuICAgICAgICAgICAgdmFyIGRlc2lyZWRTYW1wbGVSYXRlID0gMTYwMDA7XG4gICAgICAgICAgICB2YXIgc2NyaXB0Tm9kZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlclNpemUgPSAwO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZVNjcmlwdFByb2Nlc3NvcihidWZmZXJTaXplLCAxLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlYmtpdCAoPD0gdmVyc2lvbiAzMSkgcmVxdWlyZXMgYSB2YWxpZCBidWZmZXJTaXplLlxuICAgICAgICAgICAgICAgICAgICBidWZmZXJTaXplID0gMjA0ODtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF1ZGlvU2FtcGxlUmF0ZSA9IGNvbnRleHQuc2FtcGxlUmF0ZTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlclNpemUgPCAxNjM4NCAmJiBhdWRpb1NhbXBsZVJhdGUgPj0gKDIgKiBkZXNpcmVkU2FtcGxlUmF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlclNpemUgPDw9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpb1NhbXBsZVJhdGUgPj49IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY3JlYXRlU2NyaXB0UHJvY2Vzc29yKGJ1ZmZlclNpemUsIDEsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICB2YXIgd2F2ZVN0cmVhbUVuY29kZXIgPSBuZXcgRXhwb3J0c18xLlJpZmZQY21FbmNvZGVyKGNvbnRleHQuc2FtcGxlUmF0ZSwgZGVzaXJlZFNhbXBsZVJhdGUpO1xuICAgICAgICAgICAgdmFyIG5lZWRIZWFkZXIgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHRoYXQgPSBfdGhpcztcbiAgICAgICAgICAgIHNjcmlwdE5vZGUub25hdWRpb3Byb2Nlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXRGcmFtZSA9IGV2ZW50LmlucHV0QnVmZmVyLmdldENoYW5uZWxEYXRhKDApO1xuICAgICAgICAgICAgICAgIGlmIChvdXRwdXRTdHJlYW0gJiYgIW91dHB1dFN0cmVhbS5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2F2ZUZyYW1lID0gd2F2ZVN0cmVhbUVuY29kZXIuZW5jb2RlKG5lZWRIZWFkZXIsIGlucHV0RnJhbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoISF3YXZlRnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFN0cmVhbS53cml0ZVN0cmVhbUNodW5rKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHdhdmVGcmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZVJlY2VpdmVkOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWVkSGVhZGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIG1pY0lucHV0ID0gY29udGV4dC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShtZWRpYVN0cmVhbSk7XG4gICAgICAgICAgICAvLyBodHRwczovL3dlYmF1ZGlvLmdpdGh1Yi5pby93ZWItYXVkaW8tYXBpLyNhdWRpb3dvcmtsZXRcbiAgICAgICAgICAgIC8vIFVzaW5nIEF1ZGlvV29ya2xldCB0byBpbXByb3ZlIGF1ZGlvIHF1YWxpdHkgYW5kIGF2b2lkIGF1ZGlvIGdsaXRjaGVzIGR1ZSB0byBibG9ja2luZyB0aGUgVUkgdGhyZWFkXG4gICAgICAgICAgICBpZiAoISFfdGhpcy5wcml2U3BlZWNoUHJvY2Vzc29yU2NyaXB0ICYmICEhY29udGV4dC5hdWRpb1dvcmtsZXQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmF1ZGlvV29ya2xldFxuICAgICAgICAgICAgICAgICAgICAuYWRkTW9kdWxlKF90aGlzLnByaXZTcGVlY2hQcm9jZXNzb3JTY3JpcHQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdvcmtsZXROb2RlID0gbmV3IEF1ZGlvV29ya2xldE5vZGUoY29udGV4dCwgXCJzcGVlY2gtcHJvY2Vzc29yXCIpO1xuICAgICAgICAgICAgICAgICAgICB3b3JrbGV0Tm9kZS5wb3J0Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0RnJhbWUgPSBldi5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG91dHB1dFN0cmVhbSAmJiAhb3V0cHV0U3RyZWFtLmlzQ2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdhdmVGcmFtZSA9IHdhdmVTdHJlYW1FbmNvZGVyLmVuY29kZShuZWVkSGVhZGVyLCBpbnB1dEZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF3YXZlRnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0U3RyZWFtLndyaXRlU3RyZWFtQ2h1bmsoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiB3YXZlRnJhbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lUmVjZWl2ZWQ6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkSGVhZGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBtaWNJbnB1dC5jb25uZWN0KHdvcmtsZXROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgd29ya2xldE5vZGUuY29ubmVjdChjb250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdk1lZGlhUmVzb3VyY2VzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0UHJvY2Vzc29yTm9kZTogd29ya2xldE5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG1pY0lucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBtZWRpYVN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBtaWNJbnB1dC5jb25uZWN0KHNjcmlwdE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBzY3JpcHROb2RlLmNvbm5lY3QoY29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZNZWRpYVJlc291cmNlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdFByb2Nlc3Nvck5vZGU6IHNjcmlwdE5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG1pY0lucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBtZWRpYVN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pY0lucHV0LmNvbm5lY3Qoc2NyaXB0Tm9kZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Tm9kZS5jb25uZWN0KGNvbnRleHQuZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZNZWRpYVJlc291cmNlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0UHJvY2Vzc29yTm9kZTogc2NyaXB0Tm9kZSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBtaWNJbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBtZWRpYVN0cmVhbSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlbGVhc2VNZWRpYVJlc291cmNlcyA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJpdk1lZGlhUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnByaXZNZWRpYVJlc291cmNlcy5zY3JpcHRQcm9jZXNzb3JOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZNZWRpYVJlc291cmNlcy5zY3JpcHRQcm9jZXNzb3JOb2RlLmRpc2Nvbm5lY3QoY29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZNZWRpYVJlc291cmNlcy5zY3JpcHRQcm9jZXNzb3JOb2RlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnByaXZNZWRpYVJlc291cmNlcy5zb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdk1lZGlhUmVzb3VyY2VzLnNvdXJjZS5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZNZWRpYVJlc291cmNlcy5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHsgcmV0dXJuIHRyYWNrLnN0b3AoKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZNZWRpYVJlc291cmNlcy5zb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgUGNtUmVjb3JkZXIucHJvdG90eXBlLnNldFdvcmtsZXRVcmwgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHRoaXMucHJpdlNwZWVjaFByb2Nlc3NvclNjcmlwdCA9IHVybDtcbiAgICB9O1xuICAgIHJldHVybiBQY21SZWNvcmRlcjtcbn0oKSk7XG5leHBvcnRzLlBjbVJlY29yZGVyID0gUGNtUmVjb3JkZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBDTVJlY29yZGVyLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vc2RrL0V4cG9ydHNcIik7XG52YXIgUHJveHlJbmZvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByb3h5SW5mbyhwcm94eUhvc3ROYW1lLCBwcm94eVBvcnQsIHByb3h5VXNlck5hbWUsIHByb3h5UGFzc3dvcmQpIHtcbiAgICAgICAgdGhpcy5wcml2UHJveHlIb3N0TmFtZSA9IHByb3h5SG9zdE5hbWU7XG4gICAgICAgIHRoaXMucHJpdlByb3h5UG9ydCA9IHByb3h5UG9ydDtcbiAgICAgICAgdGhpcy5wcml2UHJveHlVc2VyTmFtZSA9IHByb3h5VXNlck5hbWU7XG4gICAgICAgIHRoaXMucHJpdlByb3h5UGFzc3dvcmQgPSBwcm94eVBhc3N3b3JkO1xuICAgIH1cbiAgICBQcm94eUluZm8uZnJvbVJlY29nbml6ZXJDb25maWcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHlJbmZvKGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KEV4cG9ydHNfMS5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5SG9zdE5hbWUpLCBwYXJzZUludChjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShFeHBvcnRzXzEuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBvcnQpLCAxMCksIGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KEV4cG9ydHNfMS5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5VXNlck5hbWUpLCBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShFeHBvcnRzXzEuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBhc3N3b3JkKSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJveHlJbmZvLnByb3RvdHlwZSwgXCJIb3N0TmFtZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb3h5SG9zdE5hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm94eUluZm8ucHJvdG90eXBlLCBcIlBvcnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZQcm94eVBvcnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm94eUluZm8ucHJvdG90eXBlLCBcIlVzZXJOYW1lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJveHlVc2VyTmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb3h5SW5mby5wcm90b3R5cGUsIFwiUGFzc3dvcmRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZQcm94eVBhc3N3b3JkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gUHJveHlJbmZvO1xufSgpKTtcbmV4cG9ydHMuUHJveHlJbmZvID0gUHJveHlJbmZvO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qcm94eUluZm8uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRXhwb3J0c1wiKTtcbnZhciBSZXBsYXlhYmxlQXVkaW9Ob2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlcGxheWFibGVBdWRpb05vZGUoYXVkaW9Tb3VyY2UsIGZvcm1hdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByaXZCdWZmZXJzID0gW107XG4gICAgICAgIHRoaXMucHJpdlJlcGxheU9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMucHJpdkxhc3RTaHJpbmtPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLnByaXZCdWZmZXJTdGFydE9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMucHJpdkJ1ZmZlclNlcmlhbCA9IDA7XG4gICAgICAgIHRoaXMucHJpdkJ1ZmZlcmVkQnl0ZXMgPSAwO1xuICAgICAgICB0aGlzLnByaXZSZXBsYXkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcml2TGFzdENodW5rQWNxdWlyZWRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5pZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5wcml2QXVkaW9Ob2RlLmlkKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvTm9kZSA9IGF1ZGlvU291cmNlO1xuICAgICAgICB0aGlzLnByaXZGb3JtYXQgPSBmb3JtYXQ7XG4gICAgfVxuICAgIC8vIFJlYWRzIGFuZCByZXR1cm5zIHRoZSBuZXh0IGNodW5rIG9mIGF1ZGlvIGJ1ZmZlci5cbiAgICAvLyBJZiByZXBsYXkgb2YgZXhpc3RpbmcgYnVmZmVycyBhcmUgbmVlZGVkLCByZWFkKCkgd2lsbCBmaXJzdCBzZWVrIGFuZCByZXBsYXlcbiAgICAvLyBleGlzdGluZyBjb250ZW50LCBhbmQgdXBvaW4gY29tcGxldGlvbiBpdCB3aWxsIHJlYWQgbmV3IGNvbnRlbnQgZnJvbSB0aGUgdW5kZXJseWluZ1xuICAgIC8vIGF1ZGlvIG5vZGUsIHNhdmluZyB0aGF0IGNvbnRlbnQgaW50byB0aGUgcmVwbGF5YWJsZSBidWZmZXJzLlxuICAgIFJlcGxheWFibGVBdWRpb05vZGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGEgcmVwbGF5IHJlcXVlc3QgdG8gaG9ub3IuXG4gICAgICAgIGlmICghIXRoaXMucHJpdlJlcGxheSAmJiB0aGlzLnByaXZCdWZmZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgc3RhcnQgcG9pbnQgaW4gdGhlIGJ1ZmZlcnMuXG4gICAgICAgICAgICAvLyBPZmZzZXRzIGFyZSBpbiAxMDBucyBpbmNyZW1lbnRzLlxuICAgICAgICAgICAgLy8gU28gaG93IG1hbnkgYnl0ZXMgZG8gd2UgbmVlZCB0byBzZWVrIHRvIGdldCB0aGUgcmlnaHQgb2Zmc2V0P1xuICAgICAgICAgICAgdmFyIG9mZnNldFRvU2VlayA9IHRoaXMucHJpdlJlcGxheU9mZnNldCAtIHRoaXMucHJpdkJ1ZmZlclN0YXJ0T2Zmc2V0O1xuICAgICAgICAgICAgdmFyIGJ5dGVzVG9TZWVrID0gTWF0aC5yb3VuZChvZmZzZXRUb1NlZWsgKiB0aGlzLnByaXZGb3JtYXQuYXZnQnl0ZXNQZXJTZWMgKiAxZS03KTtcbiAgICAgICAgICAgIGlmICgwICE9PSAoYnl0ZXNUb1NlZWsgJSAyKSkge1xuICAgICAgICAgICAgICAgIGJ5dGVzVG9TZWVrKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IHRoaXMucHJpdkJ1ZmZlcnMubGVuZ3RoICYmIGJ5dGVzVG9TZWVrID49IHRoaXMucHJpdkJ1ZmZlcnNbaV0uY2h1bmsuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBieXRlc1RvU2VlayAtPSB0aGlzLnByaXZCdWZmZXJzW2krK10uY2h1bmsuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmV0VmFsID0gdGhpcy5wcml2QnVmZmVyc1tpXS5jaHVuay5idWZmZXIuc2xpY2UoYnl0ZXNUb1NlZWspO1xuICAgICAgICAgICAgdGhpcy5wcml2UmVwbGF5T2Zmc2V0ICs9IChyZXRWYWwuYnl0ZUxlbmd0aCAvIHRoaXMucHJpdkZvcm1hdC5hdmdCeXRlc1BlclNlYykgKiAxZSs3O1xuICAgICAgICAgICAgLy8gSWYgd2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBidWZmZXJzLCBzdG9wIHJlcGxheWluZy5cbiAgICAgICAgICAgIGlmIChpID09PSB0aGlzLnByaXZCdWZmZXJzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXBsYXkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzEuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHtcbiAgICAgICAgICAgICAgICBidWZmZXI6IHJldFZhbCxcbiAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGltZVJlY2VpdmVkOiB0aGlzLnByaXZCdWZmZXJzW2ldLmNodW5rLnRpbWVSZWNlaXZlZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZBdWRpb05vZGUucmVhZCgpXG4gICAgICAgICAgICAub25TdWNjZXNzQ29udGludWVXaXRoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdkJ1ZmZlcnMucHVzaChuZXcgQnVmZmVyRW50cnkocmVzdWx0LCBfdGhpcy5wcml2QnVmZmVyU2VyaWFsKyssIF90aGlzLnByaXZCdWZmZXJlZEJ5dGVzKSk7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdkJ1ZmZlcmVkQnl0ZXMgKz0gcmVzdWx0LmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZXBsYXlhYmxlQXVkaW9Ob2RlLnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvTm9kZS5kZXRhY2goKTtcbiAgICAgICAgdGhpcy5wcml2QnVmZmVycyA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFJlcGxheWFibGVBdWRpb05vZGUucHJvdG90eXBlLnJlcGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKDAgIT09IHRoaXMucHJpdkJ1ZmZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZSZXBsYXkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5wcml2UmVwbGF5T2Zmc2V0ID0gdGhpcy5wcml2TGFzdFNocmlua09mZnNldDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gU2hyaW5rcyB0aGUgZXhpc3RpbmcgYXVkaW8gYnVmZmVycyB0byBzdGFydCBhdCB0aGUgbmV3IG9mZnNldCwgb3IgYXQgdGhlXG4gICAgLy8gYmVnaW5uaW5nIG9mIHRoZSBidWZmZXIgY2xvc2VzdCB0byB0aGUgcmVxdWVzdGVkIG9mZnNldC5cbiAgICAvLyBBIHJlcGxheSByZXF1ZXN0IHdpbGwgc3RhcnQgZnJvbSB0aGUgbGFzdCBzaHJpbmsgcG9pbnQuXG4gICAgUmVwbGF5YWJsZUF1ZGlvTm9kZS5wcm90b3R5cGUuc2hyaW5rQnVmZmVycyA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5wcml2TGFzdFNocmlua09mZnNldCA9IG9mZnNldDtcbiAgICAgICAgLy8gRmluZCB0aGUgc3RhcnQgcG9pbnQgaW4gdGhlIGJ1ZmZlcnMuXG4gICAgICAgIC8vIE9mZnNldHMgYXJlIGluIDEwMG5zIGluY3JlbWVudHMuXG4gICAgICAgIC8vIFNvIGhvdyBtYW55IGJ5dGVzIGRvIHdlIG5lZWQgdG8gc2VlayB0byBnZXQgdGhlIHJpZ2h0IG9mZnNldD9cbiAgICAgICAgdmFyIG9mZnNldFRvU2VlayA9IG9mZnNldCAtIHRoaXMucHJpdkJ1ZmZlclN0YXJ0T2Zmc2V0O1xuICAgICAgICB2YXIgYnl0ZXNUb1NlZWsgPSBNYXRoLnJvdW5kKG9mZnNldFRvU2VlayAqIHRoaXMucHJpdkZvcm1hdC5hdmdCeXRlc1BlclNlYyAqIDFlLTcpO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgdGhpcy5wcml2QnVmZmVycy5sZW5ndGggJiYgYnl0ZXNUb1NlZWsgPj0gdGhpcy5wcml2QnVmZmVyc1tpXS5jaHVuay5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgYnl0ZXNUb1NlZWsgLT0gdGhpcy5wcml2QnVmZmVyc1tpKytdLmNodW5rLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdkJ1ZmZlclN0YXJ0T2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQgLSAoKGJ5dGVzVG9TZWVrIC8gdGhpcy5wcml2Rm9ybWF0LmF2Z0J5dGVzUGVyU2VjKSAqIDFlKzcpKTtcbiAgICAgICAgdGhpcy5wcml2QnVmZmVycyA9IHRoaXMucHJpdkJ1ZmZlcnMuc2xpY2UoaSk7XG4gICAgfTtcbiAgICAvLyBGaW5kcyB0aGUgdGltZSBhIGJ1ZmZlciBvZiBhdWRpbyB3YXMgZmlyc3Qgc2VlbiBieSBvZmZzZXQuXG4gICAgUmVwbGF5YWJsZUF1ZGlvTm9kZS5wcm90b3R5cGUuZmluZFRpbWVBdE9mZnNldCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA8IHRoaXMucHJpdkJ1ZmZlclN0YXJ0T2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5wcml2QnVmZmVyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9hW19pXTtcbiAgICAgICAgICAgIHZhciBzdGFydE9mZnNldCA9ICh2YWx1ZS5ieXRlT2Zmc2V0IC8gdGhpcy5wcml2Rm9ybWF0LmF2Z0J5dGVzUGVyU2VjKSAqIDFlNztcbiAgICAgICAgICAgIHZhciBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCArICgodmFsdWUuY2h1bmsuYnVmZmVyLmJ5dGVMZW5ndGggLyB0aGlzLnByaXZGb3JtYXQuYXZnQnl0ZXNQZXJTZWMpICogMWU3KTtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPj0gc3RhcnRPZmZzZXQgJiYgb2Zmc2V0IDw9IGVuZE9mZnNldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5jaHVuay50aW1lUmVjZWl2ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICByZXR1cm4gUmVwbGF5YWJsZUF1ZGlvTm9kZTtcbn0oKSk7XG5leHBvcnRzLlJlcGxheWFibGVBdWRpb05vZGUgPSBSZXBsYXlhYmxlQXVkaW9Ob2RlO1xuLy8gUHJpbWFyeSB1c2Ugb2YgdGhpcyBjbGFzcyBpcyB0byBoZWxwIGRlYnVnZ2luZyBwcm9ibGVtcyB3aXRoIHRoZSByZXBsYXlcbi8vIGNvZGUuIElmIHRoZSBtZW1vcnkgY29zdCBvZiBhbGxvYyAvIGRlYWxsb2MgZ2V0cyB0b28gbXVjaCwgZHJvcCBpdCBhbmQganVzdCB1c2Vcbi8vIHRoZSBBcnJheUJ1ZmZlciBkaXJlY3RseS5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIEJ1ZmZlckVudHJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlckVudHJ5KGNodW5rLCBzZXJpYWwsIGJ5dGVPZmZzZXQpIHtcbiAgICAgICAgdGhpcy5jaHVuayA9IGNodW5rO1xuICAgICAgICB0aGlzLnNlcmlhbCA9IHNlcmlhbDtcbiAgICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gYnl0ZU9mZnNldDtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlckVudHJ5O1xufSgpKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVwbGF5YWJsZUF1ZGlvTm9kZS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9FeHBvcnRzXCIpO1xudmFyIFdlYnNvY2tldE1lc3NhZ2VBZGFwdGVyXzEgPSByZXF1aXJlKFwiLi9XZWJzb2NrZXRNZXNzYWdlQWRhcHRlclwiKTtcbnZhciBXZWJzb2NrZXRDb25uZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdlYnNvY2tldENvbm5lY3Rpb24odXJpLCBxdWVyeVBhcmFtZXRlcnMsIGhlYWRlcnMsIG1lc3NhZ2VGb3JtYXR0ZXIsIHByb3h5SW5mbywgY29ubmVjdGlvbklkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucHJpdklzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMucHJpdklzRGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZDb25uZWN0aW9uTWVzc2FnZUFkYXB0ZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2Q29ubmVjdGlvbk1lc3NhZ2VBZGFwdGVyLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5wcml2SXNEaXNwb3NlZDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5wcml2Q29ubmVjdGlvbk1lc3NhZ2VBZGFwdGVyLnN0YXRlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdkNvbm5lY3Rpb25NZXNzYWdlQWRhcHRlci5vcGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VuZCA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdkNvbm5lY3Rpb25NZXNzYWdlQWRhcHRlci5zZW5kKG1lc3NhZ2UpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdkNvbm5lY3Rpb25NZXNzYWdlQWRhcHRlci5yZWFkKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghdXJpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhwb3J0c18xLkFyZ3VtZW50TnVsbEVycm9yKFwidXJpXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWVzc2FnZUZvcm1hdHRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4cG9ydHNfMS5Bcmd1bWVudE51bGxFcnJvcihcIm1lc3NhZ2VGb3JtYXR0ZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcml2TWVzc2FnZUZvcm1hdHRlciA9IG1lc3NhZ2VGb3JtYXR0ZXI7XG4gICAgICAgIHZhciBxdWVyeVBhcmFtcyA9IFwiXCI7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgaWYgKHF1ZXJ5UGFyYW1ldGVycykge1xuICAgICAgICAgICAgZm9yICh2YXIgcGFyYW1OYW1lIGluIHF1ZXJ5UGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbXMgKz0gKChpID09PSAwKSAmJiAodXJpLmluZGV4T2YoXCI/XCIpID09PSAtMSkpID8gXCI/XCIgOiBcIiZcIjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IGVuY29kZVVSSUNvbXBvbmVudChxdWVyeVBhcmFtZXRlcnNbcGFyYW1OYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zICs9IHBhcmFtTmFtZSArIFwiPVwiICsgdmFsO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChoZWFkZXJzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBoZWFkZXJOYW1lIGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtcyArPSBpID09PSAwID8gXCI/XCIgOiBcIiZcIjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IGVuY29kZVVSSUNvbXBvbmVudChoZWFkZXJzW2hlYWRlck5hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbXMgKz0gaGVhZGVyTmFtZSArIFwiPVwiICsgdmFsO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdlVyaSA9IHVyaSArIHF1ZXJ5UGFyYW1zO1xuICAgICAgICB0aGlzLnByaXZJZCA9IGNvbm5lY3Rpb25JZCA/IGNvbm5lY3Rpb25JZCA6IEV4cG9ydHNfMS5jcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25NZXNzYWdlQWRhcHRlciA9IG5ldyBXZWJzb2NrZXRNZXNzYWdlQWRhcHRlcl8xLldlYnNvY2tldE1lc3NhZ2VBZGFwdGVyKHRoaXMucHJpdlVyaSwgdGhpcy5pZCwgdGhpcy5wcml2TWVzc2FnZUZvcm1hdHRlciwgcHJveHlJbmZvKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYnNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJzb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZSwgXCJldmVudHNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uTWVzc2FnZUFkYXB0ZXIuZXZlbnRzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gV2Vic29ja2V0Q29ubmVjdGlvbjtcbn0oKSk7XG5leHBvcnRzLldlYnNvY2tldENvbm5lY3Rpb24gPSBXZWJzb2NrZXRDb25uZWN0aW9uO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1XZWJzb2NrZXRDb25uZWN0aW9uLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0V4cG9ydHNcIik7XG52YXIgSHR0cHNQcm94eUFnZW50ID0gcmVxdWlyZShcImh0dHBzLXByb3h5LWFnZW50XCIpO1xudmFyIHdzID0gcmVxdWlyZShcIndzXCIpO1xudmFyIG9jc3AgPSByZXF1aXJlKFwiLi4vLi4vZXh0ZXJuYWwvb2NzcC9vY3NwXCIpO1xudmFyIFdlYnNvY2tldE1lc3NhZ2VBZGFwdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdlYnNvY2tldE1lc3NhZ2VBZGFwdGVyKHVyaSwgY29ubmVjdGlvbklkLCBtZXNzYWdlRm9ybWF0dGVyLCBwcm94eUluZm8pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZDb25uZWN0aW9uU3RhdGUgPT09IEV4cG9ydHNfMS5Db25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMS5Qcm9taXNlSGVscGVyLmZyb21FcnJvcihcIkNhbm5vdCBvcGVuIGEgY29ubmVjdGlvbiB0aGF0IGlzIGluIFwiICsgX3RoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSArIFwiIHN0YXRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoRGVmZXJyYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hEZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaERlZmVycmFsID0gbmV3IEV4cG9ydHNfMS5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgX3RoaXMucHJpdkNlcnRpZmljYXRlVmFsaWRhdGVkRGVmZXJyYWwgPSBuZXcgRXhwb3J0c18xLkRlZmVycmVkKCk7XG4gICAgICAgICAgICBfdGhpcy5wcml2Q29ubmVjdGlvblN0YXRlID0gRXhwb3J0c18xLkNvbm5lY3Rpb25TdGF0ZS5Db25uZWN0aW5nO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFdlYlNvY2tldCAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhV2Vic29ja2V0TWVzc2FnZUFkYXB0ZXIuZm9yY2VOcG1XZWJTb2NrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQnJvd3NlciBoYW5kbGVzIGNlcnQgY2hlY2tzLlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2Q2VydGlmaWNhdGVWYWxpZGF0ZWREZWZlcnJhbC5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2V2Vic29ja2V0Q2xpZW50ID0gbmV3IFdlYlNvY2tldChfdGhpcy5wcml2VXJpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm94eUluZm8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJveHlJbmZvLkhvc3ROYW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByb3h5SW5mby5Qb3J0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGh0dHBQcm94eU9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdDogX3RoaXMucHJveHlJbmZvLkhvc3ROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6IF90aGlzLnByb3h5SW5mby5Qb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmRlZmluZWQgIT09IF90aGlzLnByb3h5SW5mby5Vc2VyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBQcm94eU9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJQcm94eS1BdXRoZW50aWNhdGlvblwiOiBcIkJhc2ljIFwiICsgbmV3IEJ1ZmZlcihfdGhpcy5wcm94eUluZm8uVXNlck5hbWUgKyBcIjpcIiArIChfdGhpcy5wcm94eUluZm8uUGFzc3dvcmQgPT09IHVuZGVmaW5lZCkgPyBcIlwiIDogX3RoaXMucHJveHlJbmZvLlBhc3N3b3JkKS50b1N0cmluZyhcImJhc2U2NFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXF1ZXN0T0NTUFwiOiBcInRydWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGh0dHBQcm94eUFnZW50ID0gbmV3IEh0dHBzUHJveHlBZ2VudChodHRwUHJveHlPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBodHRwc09wdGlvbnNfMSA9IHsgYWdlbnQ6IGh0dHBQcm94eUFnZW50IH07XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2V2Vic29ja2V0Q2xpZW50ID0gbmV3IHdzKF90aGlzLnByaXZVcmksIGh0dHBzT3B0aW9uc18xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZ2lzdGVyIHRvIGJlIG5vdGlmaWVkIHdoZW4gV2ViU29ja2V0IHVwZ3JhZGUgaGFwcGVucyBzbyB3ZSBjYW4gY2hlY2sgdGhlIHZhbGlkaXR5IG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2VydGlmaWNhdGUuXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2V2Vic29ja2V0Q2xpZW50LmFkZExpc3RlbmVyKFwidXBncmFkZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bHNTb2NrZXQgPSBlLnNvY2tldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGVlciA9IHRsc1NvY2tldC5nZXRQZWVyQ2VydGlmaWNhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29yayB0aGUgc29ja2V0IHVudGlsIHdlIGtub3cgaWYgdGhlIGNlcnQgaXMgZ29vZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bHNTb2NrZXQuY29yaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jc3AuY2hlY2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJ0OiBwZWVyLnJhdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cE9wdGlvbnM6IGh0dHBzT3B0aW9uc18xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZXI6IHBlZXIuaXNzdWVyQ2VydGlmaWNhdGUucmF3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkNlcnRpZmljYXRlVmFsaWRhdGVkRGVmZXJyYWwucmVqZWN0KGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGxzU29ja2V0LmRlc3Ryb3koZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkNlcnRpZmljYXRlVmFsaWRhdGVkRGVmZXJyYWwucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRsc1NvY2tldC51bmNvcmsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgb2NzcCBsaWJyYXJ5IHdpbGwgaGFuZGxlIHZhbGlkYXRpb24gZm9yIHVzIGFuZCBmYWlsIHRoZSBjb25uZWN0aW9uIGlmIG5lZWRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZDZXJ0aWZpY2F0ZVZhbGlkYXRlZERlZmVycmFsLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2NzcEFnZW50ID0gbmV3IG9jc3AuQWdlbnQoe30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7IGFnZW50OiBvY3NwQWdlbnQgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZXZWJzb2NrZXRDbGllbnQgPSBuZXcgd3MoX3RoaXMucHJpdlVyaSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdldlYnNvY2tldENsaWVudC5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZWNlaXZpbmdNZXNzYWdlUXVldWUgPSBuZXcgRXhwb3J0c18xLlF1ZXVlKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdkRpc2Nvbm5lY3REZWZlcnJhbCA9IG5ldyBFeHBvcnRzXzEuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2U2VuZE1lc3NhZ2VRdWV1ZSA9IG5ldyBFeHBvcnRzXzEuUXVldWUoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9jZXNzU2VuZFF1ZXVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaERlZmVycmFsLnJlc29sdmUobmV3IEV4cG9ydHNfMS5Db25uZWN0aW9uT3BlblJlc3BvbnNlKDUwMCwgZXJyb3IpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hEZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzEuQ29ubmVjdGlvblN0YXJ0RXZlbnQoX3RoaXMucHJpdkNvbm5lY3Rpb25JZCwgX3RoaXMucHJpdlVyaSkpO1xuICAgICAgICAgICAgX3RoaXMucHJpdldlYnNvY2tldENsaWVudC5vbm9wZW4gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZDZXJ0aWZpY2F0ZVZhbGlkYXRlZERlZmVycmFsLnByb21pc2UoKS5vbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZDb25uZWN0aW9uU3RhdGUgPSBFeHBvcnRzXzEuQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18xLkNvbm5lY3Rpb25Fc3RhYmxpc2hlZEV2ZW50KF90aGlzLnByaXZDb25uZWN0aW9uSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hEZWZlcnJhbC5yZXNvbHZlKG5ldyBFeHBvcnRzXzEuQ29ubmVjdGlvbk9wZW5SZXNwb25zZSgyMDAsIFwiXCIpKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hEZWZlcnJhbC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLnByaXZXZWJzb2NrZXRDbGllbnQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogVW5kZXJzdGFuZCB3aGF0IHRoaXMgaXMgZXJyb3IgaXMuIFdpbGwgd2Ugc3RpbGwgZ2V0IG9uQ2xvc2UgP1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcml2Q29ubmVjdGlvblN0YXRlICE9PSBFeHBvcnRzXzEuQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogSXMgdGhpcyByZXF1aXJlZCA/XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMub25FdmVudChuZXcgQ29ubmVjdGlvbkVycm9yRXZlbnQoZXJyb3JNc2csIGNvbm5lY3Rpb25JZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5wcml2V2Vic29ja2V0Q2xpZW50Lm9uY2xvc2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcml2Q29ubmVjdGlvblN0YXRlID09PSBFeHBvcnRzXzEuQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSA9IEV4cG9ydHNfMS5Db25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkO1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLm9uRXZlbnQobmV3IENvbm5lY3Rpb25Fc3RhYmxpc2hFcnJvckV2ZW50KHRoaXMuY29ubmVjdGlvbklkLCBlLmNvZGUsIGUucmVhc29uKSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoRGVmZXJyYWwucmVzb2x2ZShuZXcgRXhwb3J0c18xLkNvbm5lY3Rpb25PcGVuUmVzcG9uc2UoZS5jb2RlLCBlLnJlYXNvbikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18xLkNvbm5lY3Rpb25DbG9zZWRFdmVudChfdGhpcy5wcml2Q29ubmVjdGlvbklkLCBlLmNvZGUsIGUucmVhc29uKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLm9uQ2xvc2UoZS5jb2RlLCBlLnJlYXNvbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMucHJpdldlYnNvY2tldENsaWVudC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXR3b3JrUmVjZWl2ZWRUaW1lID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcml2Q29ubmVjdGlvblN0YXRlID09PSBFeHBvcnRzXzEuQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWRfMSA9IG5ldyBFeHBvcnRzXzEuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbGV0IGlkID0gKyt0aGlzLmlkQ291bnRlcjtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdlJlY2VpdmluZ01lc3NhZ2VRdWV1ZS5lbnF1ZXVlRnJvbVByb21pc2UoZGVmZXJyZWRfMS5wcm9taXNlKCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5kYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXdNZXNzYWdlID0gbmV3IEV4cG9ydHNfMS5SYXdXZWJzb2NrZXRNZXNzYWdlKEV4cG9ydHNfMS5NZXNzYWdlVHlwZS5CaW5hcnksIGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2TWVzc2FnZUZvcm1hdHRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0Nvbm5lY3Rpb25NZXNzYWdlKHJhd01lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKGZ1bmN0aW9uIChjb25uZWN0aW9uTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMS5Db25uZWN0aW9uTWVzc2FnZVJlY2VpdmVkRXZlbnQoX3RoaXMucHJpdkNvbm5lY3Rpb25JZCwgbmV0d29ya1JlY2VpdmVkVGltZSwgY29ubmVjdGlvbk1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZF8xLnJlc29sdmUoY29ubmVjdGlvbk1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogRXZlbnRzIGZvciB0aGVzZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWRfMS5yZWplY3QoXCJJbnZhbGlkIGJpbmFyeSBtZXNzYWdlIGZvcm1hdC4gRXJyb3I6IFwiICsgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3TWVzc2FnZSA9IG5ldyBFeHBvcnRzXzEuUmF3V2Vic29ja2V0TWVzc2FnZShFeHBvcnRzXzEuTWVzc2FnZVR5cGUuVGV4dCwgZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZNZXNzYWdlRm9ybWF0dGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvQ29ubmVjdGlvbk1lc3NhZ2UocmF3TWVzc2FnZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oZnVuY3Rpb24gKGNvbm5lY3Rpb25NZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25FdmVudChuZXcgRXhwb3J0c18xLkNvbm5lY3Rpb25NZXNzYWdlUmVjZWl2ZWRFdmVudChfdGhpcy5wcml2Q29ubmVjdGlvbklkLCBuZXR3b3JrUmVjZWl2ZWRUaW1lLCBjb25uZWN0aW9uTWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkXzEucmVzb2x2ZShjb25uZWN0aW9uTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBFdmVudHMgZm9yIHRoZXNlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZF8xLnJlamVjdChcIkludmFsaWQgdGV4dCBtZXNzYWdlIGZvcm1hdC4gRXJyb3I6IFwiICsgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoRGVmZXJyYWwucHJvbWlzZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlbmQgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZDb25uZWN0aW9uU3RhdGUgIT09IEV4cG9ydHNfMS5Db25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMS5Qcm9taXNlSGVscGVyLmZyb21FcnJvcihcIkNhbm5vdCBzZW5kIG9uIGNvbm5lY3Rpb24gdGhhdCBpcyBpbiBcIiArIF90aGlzLnByaXZDb25uZWN0aW9uU3RhdGUgKyBcIiBzdGF0ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtZXNzYWdlU2VuZFN0YXR1c0RlZmVycmFsID0gbmV3IEV4cG9ydHNfMS5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2VTZW5kRGVmZXJyYWwgPSBuZXcgRXhwb3J0c18xLkRlZmVycmVkKCk7XG4gICAgICAgICAgICBfdGhpcy5wcml2U2VuZE1lc3NhZ2VRdWV1ZS5lbnF1ZXVlRnJvbVByb21pc2UobWVzc2FnZVNlbmREZWZlcnJhbC5wcm9taXNlKCkpO1xuICAgICAgICAgICAgX3RoaXMucHJpdk1lc3NhZ2VGb3JtYXR0ZXJcbiAgICAgICAgICAgICAgICAuZnJvbUNvbm5lY3Rpb25NZXNzYWdlKG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgLm9uKGZ1bmN0aW9uIChyYXdNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVNlbmREZWZlcnJhbC5yZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgUmF3V2Vic29ja2V0TWVzc2FnZTogcmF3TWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgc2VuZFN0YXR1c0RlZmVycmFsOiBtZXNzYWdlU2VuZFN0YXR1c0RlZmVycmFsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVNlbmREZWZlcnJhbC5yZWplY3QoXCJFcnJvciBmb3JtYXR0aW5nIHRoZSBtZXNzYWdlLiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VTZW5kU3RhdHVzRGVmZXJyYWwucHJvbWlzZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSAhPT0gRXhwb3J0c18xLkNvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXhwb3J0c18xLlByb21pc2VIZWxwZXIuZnJvbUVycm9yKFwiQ2Fubm90IHJlYWQgb24gY29ubmVjdGlvbiB0aGF0IGlzIGluIFwiICsgX3RoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSArIFwiIHN0YXRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZSZWNlaXZpbmdNZXNzYWdlUXVldWUuZGVxdWV1ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZXZWJzb2NrZXRDbGllbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSAhPT0gRXhwb3J0c18xLkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdldlYnNvY2tldENsaWVudC5jbG9zZSgxMDAwLCByZWFzb24gPyByZWFzb24gOiBcIk5vcm1hbCBjbG9zdXJlIGJ5IGNsaWVudFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyYWwgPSBuZXcgRXhwb3J0c18xLkRlZmVycmVkKCk7XG4gICAgICAgICAgICAgICAgZGVmZXJyYWwucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyYWwucHJvbWlzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZEaXNjb25uZWN0RGVmZXJyYWwucHJvbWlzZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlbmRSYXdNZXNzYWdlID0gZnVuY3Rpb24gKHNlbmRJdGVtKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIGluZGljYXRlcyB3ZSBhcmUgZHJhaW5pbmcgdGhlIHF1ZXVlIGFuZCBpdCBjYW1lIHdpdGggbm8gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbmRJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzEuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzEuQ29ubmVjdGlvbk1lc3NhZ2VTZW50RXZlbnQoX3RoaXMucHJpdkNvbm5lY3Rpb25JZCwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpLCBzZW5kSXRlbS5NZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdldlYnNvY2tldENsaWVudC5zZW5kKHNlbmRJdGVtLlJhd1dlYnNvY2tldE1lc3NhZ2UucGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMS5Qcm9taXNlSGVscGVyLmZyb21SZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzEuUHJvbWlzZUhlbHBlci5mcm9tRXJyb3IoXCJ3ZWJzb2NrZXQgc2VuZCBlcnJvcjogXCIgKyBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkNsb3NlID0gZnVuY3Rpb24gKGNvZGUsIHJlYXNvbikge1xuICAgICAgICAgICAgdmFyIGNsb3NlUmVhc29uID0gXCJDb25uZWN0aW9uIGNsb3NlZC4gXCIgKyBjb2RlICsgXCI6IFwiICsgcmVhc29uO1xuICAgICAgICAgICAgX3RoaXMucHJpdkNvbm5lY3Rpb25TdGF0ZSA9IEV4cG9ydHNfMS5Db25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkO1xuICAgICAgICAgICAgX3RoaXMucHJpdkRpc2Nvbm5lY3REZWZlcnJhbC5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgX3RoaXMucHJpdlJlY2VpdmluZ01lc3NhZ2VRdWV1ZS5kaXNwb3NlKHJlYXNvbik7XG4gICAgICAgICAgICBfdGhpcy5wcml2UmVjZWl2aW5nTWVzc2FnZVF1ZXVlLmRyYWluQW5kRGlzcG9zZShmdW5jdGlvbiAocGVuZGluZ1JlY2VpdmVJdGVtKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogRXZlbnRzIGZvciB0aGVzZSA/XG4gICAgICAgICAgICAgICAgLy8gTG9nZ2VyLmluc3RhbmNlLm9uRXZlbnQobmV3IExvZ2dpbmdFdmVudChMb2dUeXBlLldhcm5pbmcsIG51bGwsIGBGYWlsZWQgdG8gcHJvY2VzcyByZWNlaXZlZCBtZXNzYWdlLiBSZWFzb246ICR7Y2xvc2VSZWFzb259LCBNZXNzYWdlOiAke0pTT04uc3RyaW5naWZ5KHBlbmRpbmdSZWNlaXZlSXRlbSl9YCkpO1xuICAgICAgICAgICAgfSwgY2xvc2VSZWFzb24pO1xuICAgICAgICAgICAgX3RoaXMucHJpdlNlbmRNZXNzYWdlUXVldWUuZHJhaW5BbmREaXNwb3NlKGZ1bmN0aW9uIChwZW5kaW5nU2VuZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nU2VuZEl0ZW0uc2VuZFN0YXR1c0RlZmVycmFsLnJlamVjdChjbG9zZVJlYXNvbik7XG4gICAgICAgICAgICB9LCBjbG9zZVJlYXNvbik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJvY2Vzc1NlbmRRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnByaXZTZW5kTWVzc2FnZVF1ZXVlXG4gICAgICAgICAgICAgICAgLmRlcXVldWUoKVxuICAgICAgICAgICAgICAgIC5vbihmdW5jdGlvbiAoc2VuZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAvLyBpbmRpY2F0ZXMgd2UgYXJlIGRyYWluaW5nIHRoZSBxdWV1ZSBhbmQgaXQgY2FtZSB3aXRoIG5vIG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgaWYgKCFzZW5kSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLnNlbmRSYXdNZXNzYWdlKHNlbmRJdGVtKVxuICAgICAgICAgICAgICAgICAgICAub24oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBzZW5kSXRlbS5zZW5kU3RhdHVzRGVmZXJyYWwucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9jZXNzU2VuZFF1ZXVlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHNlbmRFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBzZW5kSXRlbS5zZW5kU3RhdHVzRGVmZXJyYWwucmVqZWN0KHNlbmRFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByb2Nlc3NTZW5kUXVldWUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIF90aGlzLnByaXZDb25uZWN0aW9uRXZlbnRzLm9uRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgRXhwb3J0c18xLkV2ZW50cy5pbnN0YW5jZS5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCF1cmkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeHBvcnRzXzEuQXJndW1lbnROdWxsRXJyb3IoXCJ1cmlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZXNzYWdlRm9ybWF0dGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhwb3J0c18xLkFyZ3VtZW50TnVsbEVycm9yKFwibWVzc2FnZUZvcm1hdHRlclwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3h5SW5mbyA9IHByb3h5SW5mbztcbiAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkV2ZW50cyA9IG5ldyBFeHBvcnRzXzEuRXZlbnRTb3VyY2UoKTtcbiAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICB0aGlzLnByaXZNZXNzYWdlRm9ybWF0dGVyID0gbWVzc2FnZUZvcm1hdHRlcjtcbiAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvblN0YXRlID0gRXhwb3J0c18xLkNvbm5lY3Rpb25TdGF0ZS5Ob25lO1xuICAgICAgICB0aGlzLnByaXZVcmkgPSB1cmk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJzb2NrZXRNZXNzYWdlQWRhcHRlci5wcm90b3R5cGUsIFwic3RhdGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uU3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJzb2NrZXRNZXNzYWdlQWRhcHRlci5wcm90b3R5cGUsIFwiZXZlbnRzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2Q29ubmVjdGlvbkV2ZW50cztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgV2Vic29ja2V0TWVzc2FnZUFkYXB0ZXIuZm9yY2VOcG1XZWJTb2NrZXQgPSBmYWxzZTtcbiAgICByZXR1cm4gV2Vic29ja2V0TWVzc2FnZUFkYXB0ZXI7XG59KCkpO1xuZXhwb3J0cy5XZWJzb2NrZXRNZXNzYWdlQWRhcHRlciA9IFdlYnNvY2tldE1lc3NhZ2VBZGFwdGVyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1XZWJzb2NrZXRNZXNzYWdlQWRhcHRlci5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBjbGFzcyBBZGRlZExtSW50ZW50XG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIEFkZGVkTG1JbnRlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gbW9kZWxJbXBsIC0gVGhlIG1vZGVsLlxuICAgICAqIEBwYXJhbSBpbnRlbnROYW1lIC0gVGhlIGludGVudCBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEFkZGVkTG1JbnRlbnQobW9kZWxJbXBsLCBpbnRlbnROYW1lKSB7XG4gICAgICAgIHRoaXMubW9kZWxJbXBsID0gbW9kZWxJbXBsO1xuICAgICAgICB0aGlzLmludGVudE5hbWUgPSBpbnRlbnROYW1lO1xuICAgIH1cbiAgICByZXR1cm4gQWRkZWRMbUludGVudDtcbn0oKSk7XG5leHBvcnRzLkFkZGVkTG1JbnRlbnQgPSBBZGRlZExtSW50ZW50O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BZGRlZExtSW50ZW50LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0V4cG9ydHNcIik7XG52YXIgSUF1dGhlbnRpY2F0aW9uXzEgPSByZXF1aXJlKFwiLi9JQXV0aGVudGljYXRpb25cIik7XG52YXIgQXV0aEhlYWRlciA9IFwiT2NwLUFwaW0tU3Vic2NyaXB0aW9uLUtleVwiO1xuLyoqXG4gKiBAY2xhc3NcbiAqL1xudmFyIENvZ25pdGl2ZVN1YnNjcmlwdGlvbktleUF1dGhlbnRpY2F0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoZSBDb2duaXRpdmVTdWJzY3JpcHRpb25LZXlBdXRoZW50aWNhdGlvbiBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3Vic2NyaXB0aW9uS2V5IC0gVGhlIHN1YnNjcmlwdGlvbiBrZXlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBDb2duaXRpdmVTdWJzY3JpcHRpb25LZXlBdXRoZW50aWNhdGlvbihzdWJzY3JpcHRpb25LZXkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZldGNoZXMgdGhlIHN1YnNjcmlwdGlvbiBrZXkuXG4gICAgICAgICAqIEBtZW1iZXJcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGF1dGhGZXRjaEV2ZW50SWQgLSBUaGUgaWQgdG8gZmV0Y2guXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZldGNoID0gZnVuY3Rpb24gKGF1dGhGZXRjaEV2ZW50SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzEuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KF90aGlzLnByaXZBdXRoSW5mbyk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGZXRjaGVzIHRoZSBzdWJzY3JpcHRpb24ga2V5LlxuICAgICAgICAgKiBAbWVtYmVyXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdXRoRmV0Y2hFdmVudElkIC0gVGhlIGlkIHRvIGZldGNoLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mZXRjaE9uRXhwaXJ5ID0gZnVuY3Rpb24gKGF1dGhGZXRjaEV2ZW50SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzEuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KF90aGlzLnByaXZBdXRoSW5mbyk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghc3Vic2NyaXB0aW9uS2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhwb3J0c18xLkFyZ3VtZW50TnVsbEVycm9yKFwic3Vic2NyaXB0aW9uS2V5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdkF1dGhJbmZvID0gbmV3IElBdXRoZW50aWNhdGlvbl8xLkF1dGhJbmZvKEF1dGhIZWFkZXIsIHN1YnNjcmlwdGlvbktleSk7XG4gICAgfVxuICAgIHJldHVybiBDb2duaXRpdmVTdWJzY3JpcHRpb25LZXlBdXRoZW50aWNhdGlvbjtcbn0oKSk7XG5leHBvcnRzLkNvZ25pdGl2ZVN1YnNjcmlwdGlvbktleUF1dGhlbnRpY2F0aW9uID0gQ29nbml0aXZlU3Vic2NyaXB0aW9uS2V5QXV0aGVudGljYXRpb247XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvZ25pdGl2ZVN1YnNjcmlwdGlvbktleUF1dGhlbnRpY2F0aW9uLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0V4cG9ydHNcIik7XG52YXIgSUF1dGhlbnRpY2F0aW9uXzEgPSByZXF1aXJlKFwiLi9JQXV0aGVudGljYXRpb25cIik7XG52YXIgQXV0aEhlYWRlciA9IFwiQXV0aG9yaXphdGlvblwiO1xudmFyIENvZ25pdGl2ZVRva2VuQXV0aGVudGljYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29nbml0aXZlVG9rZW5BdXRoZW50aWNhdGlvbihmZXRjaENhbGxiYWNrLCBmZXRjaE9uRXhwaXJ5Q2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uIChhdXRoRmV0Y2hFdmVudElkKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdkZldGNoQ2FsbGJhY2soYXV0aEZldGNoRXZlbnRJZCkub25TdWNjZXNzQ29udGludWVXaXRoKGZ1bmN0aW9uICh0b2tlbikgeyByZXR1cm4gbmV3IElBdXRoZW50aWNhdGlvbl8xLkF1dGhJbmZvKEF1dGhIZWFkZXIsIHRva2VuKTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZmV0Y2hPbkV4cGlyeSA9IGZ1bmN0aW9uIChhdXRoRmV0Y2hFdmVudElkKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdkZldGNoT25FeHBpcnlDYWxsYmFjayhhdXRoRmV0Y2hFdmVudElkKS5vblN1Y2Nlc3NDb250aW51ZVdpdGgoZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiBuZXcgSUF1dGhlbnRpY2F0aW9uXzEuQXV0aEluZm8oQXV0aEhlYWRlciwgdG9rZW4pOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFmZXRjaENhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhwb3J0c18xLkFyZ3VtZW50TnVsbEVycm9yKFwiZmV0Y2hDYWxsYmFja1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZldGNoT25FeHBpcnlDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4cG9ydHNfMS5Bcmd1bWVudE51bGxFcnJvcihcImZldGNoT25FeHBpcnlDYWxsYmFja1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZGZXRjaENhbGxiYWNrID0gZmV0Y2hDYWxsYmFjaztcbiAgICAgICAgdGhpcy5wcml2RmV0Y2hPbkV4cGlyeUNhbGxiYWNrID0gZmV0Y2hPbkV4cGlyeUNhbGxiYWNrO1xuICAgIH1cbiAgICByZXR1cm4gQ29nbml0aXZlVG9rZW5BdXRoZW50aWNhdGlvbjtcbn0oKSk7XG5leHBvcnRzLkNvZ25pdGl2ZVRva2VuQXV0aGVudGljYXRpb24gPSBDb2duaXRpdmVUb2tlbkF1dGhlbnRpY2F0aW9uO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db2duaXRpdmVUb2tlbkF1dGhlbnRpY2F0aW9uLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogUmVzcG9uc2libGUgZm9yIGJ1aWxkaW5nIHRoZSBvYmplY3QgdG8gYmUgc2VudCB0byB0aGUgc3BlZWNoIHNlcnZpY2UgdG8gc3VwcG9ydCBkeW5hbWljIGdyYW1tYXJzLlxuICogQGNsYXNzIER5bmFtaWNHcmFtbWFyQnVpbGRlclxuICovXG52YXIgRHluYW1pY0dyYW1tYXJCdWlsZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIER5bmFtaWNHcmFtbWFyQnVpbGRlcigpIHtcbiAgICB9XG4gICAgLy8gQWRkcyBvbmUgbW9yZSByZWZlcmVuY2UgcGhyYXNlcyB0byB0aGUgZHluYW1pYyBncmFtbWFyIHRvIHNlbmQuXG4gICAgLy8gQWxsIGFkZGVkIHBocmFzZXMgYXJlIGdlbmVyaWMgcGhyYXNlcy5cbiAgICBEeW5hbWljR3JhbW1hckJ1aWxkZXIucHJvdG90eXBlLmFkZFBocmFzZSA9IGZ1bmN0aW9uIChwaHJhc2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByaXZQaHJhc2VzKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZQaHJhc2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBocmFzZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICB0aGlzLnByaXZQaHJhc2VzID0gdGhpcy5wcml2UGhyYXNlcy5jb25jYXQocGhyYXNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJpdlBocmFzZXMucHVzaChwaHJhc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBDbGVhcnMgYWxsIHBocmFzZXMgc3RvcmVkIGluIHRoZSBjdXJyZW50IG9iamVjdC5cbiAgICBEeW5hbWljR3JhbW1hckJ1aWxkZXIucHJvdG90eXBlLmNsZWFyUGhyYXNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcml2UGhyYXNlcyA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIC8vIEFkZHMgb25lIG9yIG1vcmUgcmVmZXJlbmNlIGdyYW1tYXJzIHRvIHRoZSBjdXJyZW50IGdyYW1tYXIuXG4gICAgRHluYW1pY0dyYW1tYXJCdWlsZGVyLnByb3RvdHlwZS5hZGRSZWZlcmVuY2VHcmFtbWFyID0gZnVuY3Rpb24gKGdyYW1tYXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByaXZHcmFtbWFycykge1xuICAgICAgICAgICAgdGhpcy5wcml2R3JhbW1hcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3JhbW1hciBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICB0aGlzLnByaXZHcmFtbWFycyA9IHRoaXMucHJpdkdyYW1tYXJzLmNvbmNhdChncmFtbWFyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkdyYW1tYXJzLnB1c2goZ3JhbW1hcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGNsZWFycyBhbGwgZ3JhbW1hcnMgc3RvcmVkIG9uIHRoZSByZWNvZ25pemVyLlxuICAgIER5bmFtaWNHcmFtbWFyQnVpbGRlci5wcm90b3R5cGUuY2xlYXJHcmFtbWFycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcml2R3JhbW1hcnMgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICAvLyBHZW5lcmF0ZXMgYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgZHluYW1pYyBncmFtbWFyIHVzZWQgYnkgdGhlIFNwZWVjaCBTZXJ2aWNlLlxuICAgIC8vIFRoaXMgaXMgZG9uZSBieSBidWlsZGluZyBhbiBvYmplY3Qgd2l0aCB0aGUgY29ycmVjdCBsYXlvdXQgYmFzZWQgb24gdGhlIHBocmFzZXMgYW5kIHJlZmVyZW5jZSBncmFtbWFycyBhZGRlZCB0byB0aGlzIGluc3RhbmNlXG4gICAgLy8gb2YgYSBEeW5hbWljR3JhbW1hckJ1aWxkZXJcbiAgICBEeW5hbWljR3JhbW1hckJ1aWxkZXIucHJvdG90eXBlLmdlbmVyYXRlR3JhbW1hck9iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJpdkdyYW1tYXJzID09PSB1bmRlZmluZWQgJiYgdGhpcy5wcml2UGhyYXNlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXRPYmogPSB7fTtcbiAgICAgICAgcmV0T2JqLlJlZmVyZW5jZUdyYW1tYXJzID0gdGhpcy5wcml2R3JhbW1hcnM7XG4gICAgICAgIGlmICh1bmRlZmluZWQgIT09IHRoaXMucHJpdlBocmFzZXMgJiYgMCAhPT0gdGhpcy5wcml2UGhyYXNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciByZXRQaHJhc2VzXzEgPSBbXTtcbiAgICAgICAgICAgIHRoaXMucHJpdlBocmFzZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIHJldFBocmFzZXNfMS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgVGV4dDogdmFsdWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldE9iai5Hcm91cHMgPSBbeyBUeXBlOiBcIkdlbmVyaWNcIiwgSXRlbXM6IHJldFBocmFzZXNfMSB9XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0T2JqO1xuICAgIH07XG4gICAgcmV0dXJuIER5bmFtaWNHcmFtbWFyQnVpbGRlcjtcbn0oKSk7XG5leHBvcnRzLkR5bmFtaWNHcmFtbWFyQnVpbGRlciA9IER5bmFtaWNHcmFtbWFyQnVpbGRlcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHluYW1pY0dyYW1tYXJCdWlsZGVyLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vc2RrL0V4cG9ydHNcIik7XG52YXIgRXhwb3J0c18yID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbnZhciBFbnVtVHJhbnNsYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRW51bVRyYW5zbGF0aW9uKCkge1xuICAgIH1cbiAgICBFbnVtVHJhbnNsYXRpb24uaW1wbFRyYW5zbGF0ZVJlY29nbml0aW9uUmVzdWx0ID0gZnVuY3Rpb24gKHJlY29nbml0aW9uU3RhdHVzKSB7XG4gICAgICAgIHZhciByZWFzb24gPSBFeHBvcnRzXzEuUmVzdWx0UmVhc29uLkNhbmNlbGVkO1xuICAgICAgICBzd2l0Y2ggKHJlY29nbml0aW9uU3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIEV4cG9ydHNfMi5SZWNvZ25pdGlvblN0YXR1cy5TdWNjZXNzOlxuICAgICAgICAgICAgICAgIHJlYXNvbiA9IEV4cG9ydHNfMS5SZXN1bHRSZWFzb24uUmVjb2duaXplZFNwZWVjaDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRXhwb3J0c18yLlJlY29nbml0aW9uU3RhdHVzLk5vTWF0Y2g6XG4gICAgICAgICAgICBjYXNlIEV4cG9ydHNfMi5SZWNvZ25pdGlvblN0YXR1cy5Jbml0aWFsU2lsZW5jZVRpbWVvdXQ6XG4gICAgICAgICAgICBjYXNlIEV4cG9ydHNfMi5SZWNvZ25pdGlvblN0YXR1cy5CYWJibGVUaW1lb3V0OlxuICAgICAgICAgICAgY2FzZSBFeHBvcnRzXzIuUmVjb2duaXRpb25TdGF0dXMuRW5kT2ZEaWN0YXRpb246XG4gICAgICAgICAgICAgICAgcmVhc29uID0gRXhwb3J0c18xLlJlc3VsdFJlYXNvbi5Ob01hdGNoO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFeHBvcnRzXzIuUmVjb2duaXRpb25TdGF0dXMuRXJyb3I6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlYXNvbiA9IEV4cG9ydHNfMS5SZXN1bHRSZWFzb24uQ2FuY2VsZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlYXNvbjtcbiAgICB9O1xuICAgIEVudW1UcmFuc2xhdGlvbi5pbXBsVHJhbnNsYXRlQ2FuY2VsUmVzdWx0ID0gZnVuY3Rpb24gKHJlY29nbml0aW9uU3RhdHVzKSB7XG4gICAgICAgIHZhciByZWFzb24gPSBFeHBvcnRzXzEuQ2FuY2VsbGF0aW9uUmVhc29uLkVuZE9mU3RyZWFtO1xuICAgICAgICBzd2l0Y2ggKHJlY29nbml0aW9uU3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIEV4cG9ydHNfMi5SZWNvZ25pdGlvblN0YXR1cy5TdWNjZXNzOlxuICAgICAgICAgICAgY2FzZSBFeHBvcnRzXzIuUmVjb2duaXRpb25TdGF0dXMuRW5kT2ZEaWN0YXRpb246XG4gICAgICAgICAgICBjYXNlIEV4cG9ydHNfMi5SZWNvZ25pdGlvblN0YXR1cy5Ob01hdGNoOlxuICAgICAgICAgICAgICAgIHJlYXNvbiA9IEV4cG9ydHNfMS5DYW5jZWxsYXRpb25SZWFzb24uRW5kT2ZTdHJlYW07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEV4cG9ydHNfMi5SZWNvZ25pdGlvblN0YXR1cy5Jbml0aWFsU2lsZW5jZVRpbWVvdXQ6XG4gICAgICAgICAgICBjYXNlIEV4cG9ydHNfMi5SZWNvZ25pdGlvblN0YXR1cy5CYWJibGVUaW1lb3V0OlxuICAgICAgICAgICAgY2FzZSBFeHBvcnRzXzIuUmVjb2duaXRpb25TdGF0dXMuRXJyb3I6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlYXNvbiA9IEV4cG9ydHNfMS5DYW5jZWxsYXRpb25SZWFzb24uRXJyb3I7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlYXNvbjtcbiAgICB9O1xuICAgIHJldHVybiBFbnVtVHJhbnNsYXRpb247XG59KCkpO1xuZXhwb3J0cy5FbnVtVHJhbnNsYXRpb24gPSBFbnVtVHJhbnNsYXRpb247XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVudW1UcmFuc2xhdGlvbi5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gTWFrZSBzdXJlIG5vdCB0byBleHBvcnQgaW50ZXJuYWwgbW9kdWxlcy5cbi8vXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9Db2duaXRpdmVTdWJzY3JpcHRpb25LZXlBdXRoZW50aWNhdGlvblwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9Db2duaXRpdmVUb2tlbkF1dGhlbnRpY2F0aW9uXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0lBdXRoZW50aWNhdGlvblwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9JbnRlbnRDb25uZWN0aW9uRmFjdG9yeVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9SZWNvZ25pdGlvbkV2ZW50c1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9TZXJ2aWNlUmVjb2duaXplckJhc2VcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vUmVjb2duaXplckNvbmZpZ1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9XZWJzb2NrZXRNZXNzYWdlRm9ybWF0dGVyXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1NwZWVjaENvbm5lY3Rpb25GYWN0b3J5XCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1RyYW5zbGF0aW9uQ29ubmVjdGlvbkZhY3RvcnlcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vRW51bVRyYW5zbGF0aW9uXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1NlcnZpY2VNZXNzYWdlcy9FbnVtc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9TZXJ2aWNlTWVzc2FnZXMvVHJhbnNsYXRpb25TeW50aGVzaXNFbmRcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vU2VydmljZU1lc3NhZ2VzL1RyYW5zbGF0aW9uSHlwb3RoZXNpc1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9TZXJ2aWNlTWVzc2FnZXMvVHJhbnNsYXRpb25QaHJhc2VcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vVHJhbnNsYXRpb25TZXJ2aWNlUmVjb2duaXplclwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9TZXJ2aWNlTWVzc2FnZXMvU3BlZWNoRGV0ZWN0ZWRcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vU2VydmljZU1lc3NhZ2VzL1NwZWVjaEh5cG90aGVzaXNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vU3BlZWNoU2VydmljZVJlY29nbml6ZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vU2VydmljZU1lc3NhZ2VzL0RldGFpbGVkU3BlZWNoUGhyYXNlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1NlcnZpY2VNZXNzYWdlcy9TaW1wbGVTcGVlY2hQaHJhc2VcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vQWRkZWRMbUludGVudFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9JbnRlbnRTZXJ2aWNlUmVjb2duaXplclwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9TZXJ2aWNlTWVzc2FnZXMvSW50ZW50UmVzcG9uc2VcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vUmVxdWVzdFNlc3Npb25cIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vU3BlZWNoQ29udGV4dFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9EeW5hbWljR3JhbW1hckJ1aWxkZXJcIikpO1xuZXhwb3J0cy5PdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUgPSBcIk91dHB1dEZvcm1hdFwiO1xuZXhwb3J0cy5DYW5jZWxsYXRpb25FcnJvckNvZGVQcm9wZXJ0eU5hbWUgPSBcIkNhbmNlbGxhdGlvbkVycm9yQ29kZVwiO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHBvcnRzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBBdXRoSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdXRoSW5mbyhoZWFkZXJOYW1lLCB0b2tlbikge1xuICAgICAgICB0aGlzLnByaXZIZWFkZXJOYW1lID0gaGVhZGVyTmFtZTtcbiAgICAgICAgdGhpcy5wcml2VG9rZW4gPSB0b2tlbjtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGhJbmZvLnByb3RvdHlwZSwgXCJoZWFkZXJOYW1lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SGVhZGVyTmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1dGhJbmZvLnByb3RvdHlwZSwgXCJ0b2tlblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlRva2VuO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQXV0aEluZm87XG59KCkpO1xuZXhwb3J0cy5BdXRoSW5mbyA9IEF1dGhJbmZvO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1JQXV0aGVudGljYXRpb24uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24uYnJvd3Nlci9FeHBvcnRzXCIpO1xudmFyIEV4cG9ydHNfMiA9IHJlcXVpcmUoXCIuLi9zZGsvRXhwb3J0c1wiKTtcbnZhciBFeHBvcnRzXzMgPSByZXF1aXJlKFwiLi9FeHBvcnRzXCIpO1xudmFyIFRlc3RIb29rc1BhcmFtTmFtZSA9IFwidGVzdGhvb2tzXCI7XG52YXIgQ29ubmVjdGlvbklkSGVhZGVyID0gXCJYLUNvbm5lY3Rpb25JZFwiO1xudmFyIEludGVudENvbm5lY3Rpb25GYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEludGVudENvbm5lY3Rpb25GYWN0b3J5KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChjb25maWcsIGF1dGhJbmZvLCBjb25uZWN0aW9uSWQpIHtcbiAgICAgICAgICAgIHZhciBlbmRwb2ludCA9IGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50KTtcbiAgICAgICAgICAgIGlmICghZW5kcG9pbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVnaW9uID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fSW50ZW50UmVnaW9uKTtcbiAgICAgICAgICAgICAgICBlbmRwb2ludCA9IFwid3NzOi8vc3BlZWNoLnBsYXRmb3JtLmJpbmcuY29tL3NwZWVjaC9cIiArIF90aGlzLmdldFNwZWVjaFJlZ2lvbkZyb21JbnRlbnRSZWdpb24ocmVnaW9uKSArIFwiL3JlY29nbml0aW9uL2ludGVyYWN0aXZlL2NvZ25pdGl2ZXNlcnZpY2VzL3YxXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcInNpbXBsZVwiLFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2UpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBoZWFkZXJzID0ge307XG4gICAgICAgICAgICBoZWFkZXJzW2F1dGhJbmZvLmhlYWRlck5hbWVdID0gYXV0aEluZm8udG9rZW47XG4gICAgICAgICAgICBoZWFkZXJzW0Nvbm5lY3Rpb25JZEhlYWRlcl0gPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEV4cG9ydHNfMS5XZWJzb2NrZXRDb25uZWN0aW9uKGVuZHBvaW50LCBxdWVyeVBhcmFtcywgaGVhZGVycywgbmV3IEV4cG9ydHNfMy5XZWJzb2NrZXRNZXNzYWdlRm9ybWF0dGVyKCksIEV4cG9ydHNfMS5Qcm94eUluZm8uZnJvbVJlY29nbml6ZXJDb25maWcoY29uZmlnKSwgY29ubmVjdGlvbklkKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgSW50ZW50Q29ubmVjdGlvbkZhY3RvcnkucHJvdG90eXBlLmdldFNwZWVjaFJlZ2lvbkZyb21JbnRlbnRSZWdpb24gPSBmdW5jdGlvbiAoaW50ZW50UmVnaW9uKSB7XG4gICAgICAgIHN3aXRjaCAoaW50ZW50UmVnaW9uKSB7XG4gICAgICAgICAgICBjYXNlIFwiV2VzdCBVU1wiOlxuICAgICAgICAgICAgY2FzZSBcIlVTIFdlc3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ3ZXN0dXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1c3dlc3RcIjtcbiAgICAgICAgICAgIGNhc2UgXCJXZXN0IFVTIDJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJVUyBXZXN0IDJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ3ZXN0dXMyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidXN3ZXN0MlwiO1xuICAgICAgICAgICAgY2FzZSBcIlNvdXRoIENlbnRyYWwgVVNcIjpcbiAgICAgICAgICAgIGNhc2UgXCJVUyBTb3V0aCBDZW50cmFsXCI6XG4gICAgICAgICAgICBjYXNlIFwic291dGhjZW50cmFsdXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1c3NvdXRoY2VudHJhbFwiO1xuICAgICAgICAgICAgY2FzZSBcIldlc3QgQ2VudHJhbCBVU1wiOlxuICAgICAgICAgICAgY2FzZSBcIlVTIFdlc3QgQ2VudHJhbFwiOlxuICAgICAgICAgICAgY2FzZSBcIndlc3RjZW50cmFsdXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1c3dlc3RjZW50cmFsXCI7XG4gICAgICAgICAgICBjYXNlIFwiRWFzdCBVU1wiOlxuICAgICAgICAgICAgY2FzZSBcIlVTIEVhc3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJlYXN0dXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1c2Vhc3RcIjtcbiAgICAgICAgICAgIGNhc2UgXCJFYXN0IFVTIDJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJVUyBFYXN0IDJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJlYXN0dXMyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidXNlYXN0MlwiO1xuICAgICAgICAgICAgY2FzZSBcIldlc3QgRXVyb3BlXCI6XG4gICAgICAgICAgICBjYXNlIFwiRXVyb3BlIFdlc3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ3ZXN0ZXVyb3BlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZXVyb3Bld2VzdFwiO1xuICAgICAgICAgICAgY2FzZSBcIk5vcnRoIEV1cm9wZVwiOlxuICAgICAgICAgICAgY2FzZSBcIkV1cm9wZSBOb3J0aFwiOlxuICAgICAgICAgICAgY2FzZSBcIm5vcnRoZXVyb3BlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZXVyb3Blbm9ydGhcIjtcbiAgICAgICAgICAgIGNhc2UgXCJCcmF6aWwgU291dGhcIjpcbiAgICAgICAgICAgIGNhc2UgXCJTb3V0aCBCcmF6aWxcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzb3V0aGJyYXppbFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImJyYXppbHNvdXRoXCI7XG4gICAgICAgICAgICBjYXNlIFwiQXVzdHJhbGlhIEVhc3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJFYXN0IEF1c3RyYWxpYVwiOlxuICAgICAgICAgICAgY2FzZSBcImVhc3RhdXN0cmFsaWFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhdXN0cmFsaWFlYXN0XCI7XG4gICAgICAgICAgICBjYXNlIFwiU291dGhlYXN0IEFzaWFcIjpcbiAgICAgICAgICAgIGNhc2UgXCJBc2lhIFNvdXRoZWFzdFwiOlxuICAgICAgICAgICAgY2FzZSBcInNvdXRoZWFzdGFzaWFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhc2lhc291dGhlYXN0XCI7XG4gICAgICAgICAgICBjYXNlIFwiRWFzdCBBc2lhXCI6XG4gICAgICAgICAgICBjYXNlIFwiQXNpYSBFYXN0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZWFzdGFzaWFcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhc2lhZWFzdFwiO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gaW50ZW50UmVnaW9uO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gSW50ZW50Q29ubmVjdGlvbkZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0cy5JbnRlbnRDb25uZWN0aW9uRmFjdG9yeSA9IEludGVudENvbm5lY3Rpb25GYWN0b3J5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbnRlbnRDb25uZWN0aW9uRmFjdG9yeS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0V4cG9ydHNcIik7XG52YXIgRXhwb3J0c18yID0gcmVxdWlyZShcIi4uL3Nkay9FeHBvcnRzXCIpO1xudmFyIEV4cG9ydHNfMyA9IHJlcXVpcmUoXCIuL0V4cG9ydHNcIik7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBJbnRlbnRTZXJ2aWNlUmVjb2duaXplciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW50ZW50U2VydmljZVJlY29nbml6ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW50ZW50U2VydmljZVJlY29nbml6ZXIoYXV0aGVudGljYXRpb24sIGNvbm5lY3Rpb25GYWN0b3J5LCBhdWRpb1NvdXJjZSwgcmVjb2duaXplckNvbmZpZywgcmVjb2duaXplcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvU291cmNlLCByZWNvZ25pemVyQ29uZmlnLCByZWNvZ25pemVyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcml2SW50ZW50UmVjb2duaXplciA9IHJlY29nbml6ZXI7XG4gICAgICAgIF90aGlzLnByaXZJbnRlbnREYXRhU2VudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEludGVudFNlcnZpY2VSZWNvZ25pemVyLnByb3RvdHlwZS5zZXRJbnRlbnRzID0gZnVuY3Rpb24gKGFkZGVkSW50ZW50cywgdW1icmVsbGFJbnRlbnQpIHtcbiAgICAgICAgdGhpcy5wcml2QWRkZWRMbUludGVudHMgPSBhZGRlZEludGVudHM7XG4gICAgICAgIHRoaXMucHJpdlVtYnJlbGxhSW50ZW50ID0gdW1icmVsbGFJbnRlbnQ7XG4gICAgICAgIHRoaXMucHJpdkludGVudERhdGFTZW50ID0gdHJ1ZTtcbiAgICB9O1xuICAgIEludGVudFNlcnZpY2VSZWNvZ25pemVyLnByb3RvdHlwZS5wcm9jZXNzVHlwZVNwZWNpZmljTWVzc2FnZXMgPSBmdW5jdGlvbiAoY29ubmVjdGlvbk1lc3NhZ2UsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsQmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB2YXIgZXY7XG4gICAgICAgIHZhciByZXN1bHRQcm9wcyA9IG5ldyBFeHBvcnRzXzIuUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgICAgIGlmIChjb25uZWN0aW9uTWVzc2FnZS5tZXNzYWdlVHlwZSA9PT0gRXhwb3J0c18xLk1lc3NhZ2VUeXBlLlRleHQpIHtcbiAgICAgICAgICAgIHJlc3VsdFByb3BzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VSZXNwb25zZV9Kc29uUmVzdWx0LCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChjb25uZWN0aW9uTWVzc2FnZS5wYXRoLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzcGVlY2guaHlwb3RoZXNpc1wiOlxuICAgICAgICAgICAgICAgIHZhciBzcGVlY2hIeXBvdGhlc2lzID0gRXhwb3J0c18zLlNwZWVjaEh5cG90aGVzaXMuZnJvbUpTT04oY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBFeHBvcnRzXzIuSW50ZW50UmVjb2duaXRpb25SZXN1bHQodW5kZWZpbmVkLCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5yZXF1ZXN0SWQsIEV4cG9ydHNfMi5SZXN1bHRSZWFzb24uUmVjb2duaXppbmdJbnRlbnQsIHNwZWVjaEh5cG90aGVzaXMuVGV4dCwgc3BlZWNoSHlwb3RoZXNpcy5EdXJhdGlvbiwgc3BlZWNoSHlwb3RoZXNpcy5PZmZzZXQgKyB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0LCB1bmRlZmluZWQsIGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5LCByZXN1bHRQcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ub25IeXBvdGhlc2lzKHJlc3VsdC5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIGV2ID0gbmV3IEV4cG9ydHNfMi5JbnRlbnRSZWNvZ25pdGlvbkV2ZW50QXJncyhyZXN1bHQsIHNwZWVjaEh5cG90aGVzaXMuT2Zmc2V0ICsgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uY3VycmVudFR1cm5BdWRpb09mZnNldCwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZJbnRlbnRSZWNvZ25pemVyLnJlY29nbml6aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZJbnRlbnRSZWNvZ25pemVyLnJlY29nbml6aW5nKHRoaXMucHJpdkludGVudFJlY29nbml6ZXIsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpcCB0aGluZ3MgdXAuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic3BlZWNoLnBocmFzZVwiOlxuICAgICAgICAgICAgICAgIHZhciBzaW1wbGUgPSBFeHBvcnRzXzMuU2ltcGxlU3BlZWNoUGhyYXNlLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgRXhwb3J0c18yLkludGVudFJlY29nbml0aW9uUmVzdWx0KHVuZGVmaW5lZCwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBFeHBvcnRzXzMuRW51bVRyYW5zbGF0aW9uLmltcGxUcmFuc2xhdGVSZWNvZ25pdGlvblJlc3VsdChzaW1wbGUuUmVjb2duaXRpb25TdGF0dXMpLCBzaW1wbGUuRGlzcGxheVRleHQsIHNpbXBsZS5EdXJhdGlvbiwgc2ltcGxlLk9mZnNldCArIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmN1cnJlbnRUdXJuQXVkaW9PZmZzZXQsIHVuZGVmaW5lZCwgY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHksIHJlc3VsdFByb3BzKTtcbiAgICAgICAgICAgICAgICBldiA9IG5ldyBFeHBvcnRzXzIuSW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MocmVzdWx0LCByZXN1bHQub2Zmc2V0LCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgIHZhciBzZW5kRXZlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIV90aGlzLnByaXZJbnRlbnRSZWNvZ25pemVyLnJlY29nbml6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkludGVudFJlY29nbml6ZXIucmVjb2duaXplZChfdGhpcy5wcml2SW50ZW50UmVjb2duaXplciwgZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaXAgdGhpbmdzIHVwLlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcG9ydCByZXN1bHQgdG8gcHJvbWlzZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnJvckNhbGxCYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbEJhY2soZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBpbnZva2UgdGhlIGNhbGwgYmFjayBvbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGlmIGl0J3Mgc3VjY2Vzc2Z1bCBkb24ndCBpbnZva2UgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlcnJvciBhZnRlciB0aGF0LlxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsQmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gSWYgaW50ZW50IGRhdGEgd2FzIHNlbnQsIHRoZSB0ZXJtaW5hbCByZXN1bHQgZm9yIHRoaXMgcmVjb2duaXplciBpcyBhbiBpbnRlbnQgYmVpbmcgZm91bmQuXG4gICAgICAgICAgICAgICAgLy8gSWYgbm8gaW50ZW50IGRhdGEgd2FzIHNlbnQsIHRoZSB0ZXJtaW5hbCBldmVudCBpcyBzcGVlY2ggcmVjb2duaXRpb24gYmVpbmcgc3VjY2Vzc2Z1bC5cbiAgICAgICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMucHJpdkludGVudERhdGFTZW50IHx8IEV4cG9ydHNfMi5SZXN1bHRSZWFzb24uTm9NYXRjaCA9PT0gZXYucmVzdWx0LnJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBBZHZhbmNlIHRoZSBidWZmZXJzLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vblBocmFzZVJlY29nbml6ZWQoZXYub2Zmc2V0ICsgZXYucmVzdWx0LmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgc2VuZEV2ZW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBTcXVpcnJlbCBhd2F5IHRoZSBhcmdzLCB3aGVuIHRoZSByZXNwb25zZSBldmVudCBhcnJpdmVzIGl0IHdpbGwgYnVpbGQgdXBvbiB0aGVtXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGVuIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZQZW5kaW5nSW50ZW50QXJncyA9IGV2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyZXNwb25zZVwiOlxuICAgICAgICAgICAgICAgIC8vIFJlc3BvbnNlIGZyb20gTFVJU1xuICAgICAgICAgICAgICAgIGV2ID0gdGhpcy5wcml2UGVuZGluZ0ludGVudEFyZ3M7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UGVuZGluZ0ludGVudEFyZ3MgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiXCIgPT09IGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGNvbmRpdGlvbiBoYXBwZW5zIGlmIHRoZXJlIGlzIG5vdGhpbmcgYnV0IHNpbGVuY2UgaW4gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhdWRpbyBzZW50IHRvIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIE9kZC4uLiBOb3Qgc3VyZSB0aGlzIGNhbiBoYXBwZW5cbiAgICAgICAgICAgICAgICAgICAgZXYgPSBuZXcgRXhwb3J0c18yLkludGVudFJlY29nbml0aW9uRXZlbnRBcmdzKG5ldyBFeHBvcnRzXzIuSW50ZW50UmVjb2duaXRpb25SZXN1bHQoKSwgMCAvKlRPRE8qLywgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGludGVudFJlc3BvbnNlID0gRXhwb3J0c18zLkludGVudFJlc3BvbnNlLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICAvLyBJZiBMVUlTIGRpZG4ndCByZXR1cm4gYW55dGhpbmcsIHNlbmQgdGhlIGV4aXN0aW5nIGV2ZW50LCBlbHNlXG4gICAgICAgICAgICAgICAgLy8gbW9kaWZ5IGl0IHRvIHNob3cgdGhlIG1hdGNoLlxuICAgICAgICAgICAgICAgIC8vIFNlZSBpZiB0aGUgaW50ZW50IGZvdW5kIGlzIGluIHRoZSBsaXN0IG9mIGludGVudHMgYXNrZWQgZm9yLlxuICAgICAgICAgICAgICAgIHZhciBhZGRlZEludGVudCA9IHRoaXMucHJpdkFkZGVkTG1JbnRlbnRzW2ludGVudFJlc3BvbnNlLnRvcFNjb3JpbmdJbnRlbnQuaW50ZW50XTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcml2VW1icmVsbGFJbnRlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRlZEludGVudCA9IHRoaXMucHJpdlVtYnJlbGxhSW50ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gaW50ZW50UmVzcG9uc2UgJiYgYWRkZWRJbnRlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZW50SWQgPSBhZGRlZEludGVudC5pbnRlbnROYW1lID09PSB1bmRlZmluZWQgPyBpbnRlbnRSZXNwb25zZS50b3BTY29yaW5nSW50ZW50LmludGVudCA6IGFkZGVkSW50ZW50LmludGVudE5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWFzb24gPSBldi5yZXN1bHQucmVhc29uO1xuICAgICAgICAgICAgICAgICAgICBpZiAodW5kZWZpbmVkICE9PSBpbnRlbnRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uID0gRXhwb3J0c18yLlJlc3VsdFJlYXNvbi5SZWNvZ25pemVkSW50ZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSwgcHJvcGVydGllcyBpcyBzZXQuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gKHVuZGVmaW5lZCAhPT0gZXYucmVzdWx0LnByb3BlcnRpZXMpID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnJlc3VsdC5wcm9wZXJ0aWVzIDogbmV3IEV4cG9ydHNfMi5Qcm9wZXJ0eUNvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcy5zZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5MYW5ndWFnZVVuZGVyc3RhbmRpbmdTZXJ2aWNlUmVzcG9uc2VfSnNvblJlc3VsdCwgY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBldiA9IG5ldyBFeHBvcnRzXzIuSW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MobmV3IEV4cG9ydHNfMi5JbnRlbnRSZWNvZ25pdGlvblJlc3VsdChpbnRlbnRJZCwgZXYucmVzdWx0LnJlc3VsdElkLCByZWFzb24sIGV2LnJlc3VsdC50ZXh0LCBldi5yZXN1bHQuZHVyYXRpb24sIGV2LnJlc3VsdC5vZmZzZXQsIGV2LnJlc3VsdC5lcnJvckRldGFpbHMsIGV2LnJlc3VsdC5qc29uLCBwcm9wZXJ0aWVzKSwgZXYub2Zmc2V0LCBldi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vblBocmFzZVJlY29nbml6ZWQoZXYub2Zmc2V0ICsgZXYucmVzdWx0LmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZJbnRlbnRSZWNvZ25pemVyLnJlY29nbml6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdkludGVudFJlY29nbml6ZXIucmVjb2duaXplZCh0aGlzLnByaXZJbnRlbnRSZWNvZ25pemVyLCBldik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90IGdvaW5nIHRvIGxldCBlcnJvcnMgaW4gdGhlIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaXAgdGhpbmdzIHVwLlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHJlcG9ydCByZXN1bHQgdG8gcHJvbWlzZS5cbiAgICAgICAgICAgICAgICBpZiAoISFzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhldi5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnJvckNhbGxCYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsQmFjayhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGludm9rZSB0aGUgY2FsbCBiYWNrIG9uY2UuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBpZiBpdCdzIHN1Y2Nlc3NmdWwgZG9uJ3QgaW52b2tlIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBlcnJvciBhZnRlciB0aGF0LlxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbEJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQ2FuY2VscyByZWNvZ25pdGlvbi5cbiAgICBJbnRlbnRTZXJ2aWNlUmVjb2duaXplci5wcm90b3R5cGUuY2FuY2VsUmVjb2duaXRpb24gPSBmdW5jdGlvbiAoc2Vzc2lvbklkLCByZXF1ZXN0SWQsIGNhbmNlbGxhdGlvblJlYXNvbiwgZXJyb3JDb2RlLCBlcnJvciwgY2FuY2VsUmVjb0NhbGxiYWNrKSB7XG4gICAgICAgIGlmICghIXRoaXMucHJpdkludGVudFJlY29nbml6ZXIuY2FuY2VsZWQpIHtcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gbmV3IEV4cG9ydHNfMi5Qcm9wZXJ0eUNvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc2V0UHJvcGVydHkoRXhwb3J0c18zLkNhbmNlbGxhdGlvbkVycm9yQ29kZVByb3BlcnR5TmFtZSwgRXhwb3J0c18yLkNhbmNlbGxhdGlvbkVycm9yQ29kZVtlcnJvckNvZGVdKTtcbiAgICAgICAgICAgIHZhciBjYW5jZWxFdmVudCA9IG5ldyBFeHBvcnRzXzIuSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyhjYW5jZWxsYXRpb25SZWFzb24sIGVycm9yLCBlcnJvckNvZGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBzZXNzaW9uSWQpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZJbnRlbnRSZWNvZ25pemVyLmNhbmNlbGVkKHRoaXMucHJpdkludGVudFJlY29nbml6ZXIsIGNhbmNlbEV2ZW50KTtcbiAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICAgICAgICAgIGlmICghIWNhbmNlbFJlY29DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBuZXcgRXhwb3J0c18yLkludGVudFJlY29nbml0aW9uUmVzdWx0KHVuZGVmaW5lZCwgLy8gSW50ZW50IElkXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkLCBFeHBvcnRzXzIuUmVzdWx0UmVhc29uLkNhbmNlbGVkLCB1bmRlZmluZWQsIC8vIFRleHRcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsIC8vIERydWF0aW9uXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLCAvLyBPZmZzZXRcbiAgICAgICAgICAgICAgICBlcnJvciwgdW5kZWZpbmVkLCAvLyBKc29uXG4gICAgICAgICAgICAgICAgcHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsUmVjb0NhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfYikgeyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBJbnRlbnRTZXJ2aWNlUmVjb2duaXplcjtcbn0oRXhwb3J0c18zLlNlcnZpY2VSZWNvZ25pemVyQmFzZSkpO1xuZXhwb3J0cy5JbnRlbnRTZXJ2aWNlUmVjb2duaXplciA9IEludGVudFNlcnZpY2VSZWNvZ25pemVyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbnRlbnRTZXJ2aWNlUmVjb2duaXplci5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUXVlcnlQYXJhbWV0ZXJOYW1lcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBRdWVyeVBhcmFtZXRlck5hbWVzKCkge1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUXVlcnlQYXJhbWV0ZXJOYW1lcywgXCJUZXN0SG9va3NQYXJhbU5hbWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBcInRlc3Rob29rc1wiO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUXVlcnlQYXJhbWV0ZXJOYW1lcywgXCJDb25uZWN0aW9uSWRIZWFkZXJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlgtQ29ubmVjdGlvbklkXCI7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeVBhcmFtZXRlck5hbWVzLCBcIkRlcGxveW1lbnRJZFBhcmFtTmFtZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiY2lkXCI7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeVBhcmFtZXRlck5hbWVzLCBcIkZvcm1hdFBhcmFtTmFtZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiZm9ybWF0XCI7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeVBhcmFtZXRlck5hbWVzLCBcIkxhbmd1YWdlUGFyYW1OYW1lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJsYW5ndWFnZVwiO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUXVlcnlQYXJhbWV0ZXJOYW1lcywgXCJUcmFuc2xhdGlvbkZyb21QYXJhbU5hbWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBcImZyb21cIjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5UGFyYW1ldGVyTmFtZXMsIFwiVHJhbnNsYXRpb25Ub1BhcmFtTmFtZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwidG9cIjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFF1ZXJ5UGFyYW1ldGVyTmFtZXM7XG59KCkpO1xuZXhwb3J0cy5RdWVyeVBhcmFtZXRlck5hbWVzID0gUXVlcnlQYXJhbWV0ZXJOYW1lcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVlcnlQYXJhbWV0ZXJOYW1lcy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0V4cG9ydHNcIik7XG52YXIgU3BlZWNoUmVjb2duaXRpb25FdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3BlZWNoUmVjb2duaXRpb25FdmVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50KGV2ZW50TmFtZSwgcmVxdWVzdElkLCBzZXNzaW9uSWQsIGV2ZW50VHlwZSkge1xuICAgICAgICBpZiAoZXZlbnRUeXBlID09PSB2b2lkIDApIHsgZXZlbnRUeXBlID0gRXhwb3J0c18xLkV2ZW50VHlwZS5JbmZvOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGV2ZW50TmFtZSwgZXZlbnRUeXBlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcml2UmVxdWVzdElkID0gcmVxdWVzdElkO1xuICAgICAgICBfdGhpcy5wcml2U2Vzc2lvbklkID0gc2Vzc2lvbklkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGVlY2hSZWNvZ25pdGlvbkV2ZW50LnByb3RvdHlwZSwgXCJyZXF1ZXN0SWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZSZXF1ZXN0SWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGVlY2hSZWNvZ25pdGlvbkV2ZW50LnByb3RvdHlwZSwgXCJzZXNzaW9uSWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTZXNzaW9uSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50O1xufShFeHBvcnRzXzEuUGxhdGZvcm1FdmVudCkpO1xuZXhwb3J0cy5TcGVlY2hSZWNvZ25pdGlvbkV2ZW50ID0gU3BlZWNoUmVjb2duaXRpb25FdmVudDtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIFJlY29nbml0aW9uVHJpZ2dlcmVkRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlY29nbml0aW9uVHJpZ2dlcmVkRXZlbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVjb2duaXRpb25UcmlnZ2VyZWRFdmVudChyZXF1ZXN0SWQsIHNlc3Npb25JZCwgYXVkaW9Tb3VyY2VJZCwgYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJSZWNvZ25pdGlvblRyaWdnZXJlZEV2ZW50XCIsIHJlcXVlc3RJZCwgc2Vzc2lvbklkKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCA9IGF1ZGlvU291cmNlSWQ7XG4gICAgICAgIF90aGlzLnByaXZBdWRpb05vZGVJZCA9IGF1ZGlvTm9kZUlkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvZ25pdGlvblRyaWdnZXJlZEV2ZW50LnByb3RvdHlwZSwgXCJhdWRpb1NvdXJjZUlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Tb3VyY2VJZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml0aW9uVHJpZ2dlcmVkRXZlbnQucHJvdG90eXBlLCBcImF1ZGlvTm9kZUlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Ob2RlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBSZWNvZ25pdGlvblRyaWdnZXJlZEV2ZW50O1xufShTcGVlY2hSZWNvZ25pdGlvbkV2ZW50KSk7XG5leHBvcnRzLlJlY29nbml0aW9uVHJpZ2dlcmVkRXZlbnQgPSBSZWNvZ25pdGlvblRyaWdnZXJlZEV2ZW50O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgTGlzdGVuaW5nU3RhcnRlZEV2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhMaXN0ZW5pbmdTdGFydGVkRXZlbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGlzdGVuaW5nU3RhcnRlZEV2ZW50KHJlcXVlc3RJZCwgc2Vzc2lvbklkLCBhdWRpb1NvdXJjZUlkLCBhdWRpb05vZGVJZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBcIkxpc3RlbmluZ1N0YXJ0ZWRFdmVudFwiLCByZXF1ZXN0SWQsIHNlc3Npb25JZCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJpdkF1ZGlvU291cmNlSWQgPSBhdWRpb1NvdXJjZUlkO1xuICAgICAgICBfdGhpcy5wcml2QXVkaW9Ob2RlSWQgPSBhdWRpb05vZGVJZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGlzdGVuaW5nU3RhcnRlZEV2ZW50LnByb3RvdHlwZSwgXCJhdWRpb1NvdXJjZUlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Tb3VyY2VJZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExpc3RlbmluZ1N0YXJ0ZWRFdmVudC5wcm90b3R5cGUsIFwiYXVkaW9Ob2RlSWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZBdWRpb05vZGVJZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIExpc3RlbmluZ1N0YXJ0ZWRFdmVudDtcbn0oU3BlZWNoUmVjb2duaXRpb25FdmVudCkpO1xuZXhwb3J0cy5MaXN0ZW5pbmdTdGFydGVkRXZlbnQgPSBMaXN0ZW5pbmdTdGFydGVkRXZlbnQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBDb25uZWN0aW5nVG9TZXJ2aWNlRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbm5lY3RpbmdUb1NlcnZpY2VFdmVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0aW5nVG9TZXJ2aWNlRXZlbnQocmVxdWVzdElkLCBhdXRoRmV0Y2hFdmVudGlkLCBzZXNzaW9uSWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJDb25uZWN0aW5nVG9TZXJ2aWNlRXZlbnRcIiwgcmVxdWVzdElkLCBzZXNzaW9uSWQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZBdXRoRmV0Y2hFdmVudGlkID0gYXV0aEZldGNoRXZlbnRpZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29ubmVjdGluZ1RvU2VydmljZUV2ZW50LnByb3RvdHlwZSwgXCJhdXRoRmV0Y2hFdmVudGlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2QXV0aEZldGNoRXZlbnRpZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIENvbm5lY3RpbmdUb1NlcnZpY2VFdmVudDtcbn0oU3BlZWNoUmVjb2duaXRpb25FdmVudCkpO1xuZXhwb3J0cy5Db25uZWN0aW5nVG9TZXJ2aWNlRXZlbnQgPSBDb25uZWN0aW5nVG9TZXJ2aWNlRXZlbnQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBSZWNvZ25pdGlvblN0YXJ0ZWRFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVjb2duaXRpb25TdGFydGVkRXZlbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVjb2duaXRpb25TdGFydGVkRXZlbnQocmVxdWVzdElkLCBhdWRpb1NvdXJjZUlkLCBhdWRpb05vZGVJZCwgYXV0aEZldGNoRXZlbnRJZCwgc2Vzc2lvbklkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFwiUmVjb2duaXRpb25TdGFydGVkRXZlbnRcIiwgcmVxdWVzdElkLCBzZXNzaW9uSWQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZBdWRpb1NvdXJjZUlkID0gYXVkaW9Tb3VyY2VJZDtcbiAgICAgICAgX3RoaXMucHJpdkF1ZGlvTm9kZUlkID0gYXVkaW9Ob2RlSWQ7XG4gICAgICAgIF90aGlzLnByaXZBdXRoRmV0Y2hFdmVudElkID0gYXV0aEZldGNoRXZlbnRJZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb2duaXRpb25TdGFydGVkRXZlbnQucHJvdG90eXBlLCBcImF1ZGlvU291cmNlSWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZBdWRpb1NvdXJjZUlkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb2duaXRpb25TdGFydGVkRXZlbnQucHJvdG90eXBlLCBcImF1ZGlvTm9kZUlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Ob2RlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvZ25pdGlvblN0YXJ0ZWRFdmVudC5wcm90b3R5cGUsIFwiYXV0aEZldGNoRXZlbnRJZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkF1dGhGZXRjaEV2ZW50SWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBSZWNvZ25pdGlvblN0YXJ0ZWRFdmVudDtcbn0oU3BlZWNoUmVjb2duaXRpb25FdmVudCkpO1xuZXhwb3J0cy5SZWNvZ25pdGlvblN0YXJ0ZWRFdmVudCA9IFJlY29nbml0aW9uU3RhcnRlZEV2ZW50O1xudmFyIFJlY29nbml0aW9uQ29tcGxldGlvblN0YXR1cztcbihmdW5jdGlvbiAoUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzKSB7XG4gICAgUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1JlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tcIlN1Y2Nlc3NcIl0gPSAwXSA9IFwiU3VjY2Vzc1wiO1xuICAgIFJlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbXCJBdWRpb1NvdXJjZUVycm9yXCJdID0gMV0gPSBcIkF1ZGlvU291cmNlRXJyb3JcIjtcbiAgICBSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1wiQXVkaW9Tb3VyY2VUaW1lb3V0XCJdID0gMl0gPSBcIkF1ZGlvU291cmNlVGltZW91dFwiO1xuICAgIFJlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbXCJBdXRoVG9rZW5GZXRjaEVycm9yXCJdID0gM10gPSBcIkF1dGhUb2tlbkZldGNoRXJyb3JcIjtcbiAgICBSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1wiQXV0aFRva2VuRmV0Y2hUaW1lb3V0XCJdID0gNF0gPSBcIkF1dGhUb2tlbkZldGNoVGltZW91dFwiO1xuICAgIFJlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbXCJVbkF1dGhvcml6ZWRcIl0gPSA1XSA9IFwiVW5BdXRob3JpemVkXCI7XG4gICAgUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1JlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tcIkNvbm5lY3RUaW1lb3V0XCJdID0gNl0gPSBcIkNvbm5lY3RUaW1lb3V0XCI7XG4gICAgUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1JlY29nbml0aW9uQ29tcGxldGlvblN0YXR1c1tcIkNvbm5lY3RFcnJvclwiXSA9IDddID0gXCJDb25uZWN0RXJyb3JcIjtcbiAgICBSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1wiQ2xpZW50UmVjb2duaXRpb25BY3Rpdml0eVRpbWVvdXRcIl0gPSA4XSA9IFwiQ2xpZW50UmVjb2duaXRpb25BY3Rpdml0eVRpbWVvdXRcIjtcbiAgICBSZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXNbUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzW1wiVW5rbm93bkVycm9yXCJdID0gOV0gPSBcIlVua25vd25FcnJvclwiO1xufSkoUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzID0gZXhwb3J0cy5SZWNvZ25pdGlvbkNvbXBsZXRpb25TdGF0dXMgfHwgKGV4cG9ydHMuUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzID0ge30pKTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIFJlY29nbml0aW9uRW5kZWRFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVjb2duaXRpb25FbmRlZEV2ZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlY29nbml0aW9uRW5kZWRFdmVudChyZXF1ZXN0SWQsIGF1ZGlvU291cmNlSWQsIGF1ZGlvTm9kZUlkLCBhdXRoRmV0Y2hFdmVudElkLCBzZXNzaW9uSWQsIHNlcnZpY2VUYWcsIHN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJSZWNvZ25pdGlvbkVuZGVkRXZlbnRcIiwgcmVxdWVzdElkLCBzZXNzaW9uSWQsIHN0YXR1cyA9PT0gUmVjb2duaXRpb25Db21wbGV0aW9uU3RhdHVzLlN1Y2Nlc3MgPyBFeHBvcnRzXzEuRXZlbnRUeXBlLkluZm8gOiBFeHBvcnRzXzEuRXZlbnRUeXBlLkVycm9yKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCA9IGF1ZGlvU291cmNlSWQ7XG4gICAgICAgIF90aGlzLnByaXZBdWRpb05vZGVJZCA9IGF1ZGlvTm9kZUlkO1xuICAgICAgICBfdGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCA9IGF1dGhGZXRjaEV2ZW50SWQ7XG4gICAgICAgIF90aGlzLnByaXZTdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgIF90aGlzLnByaXZFcnJvciA9IGVycm9yO1xuICAgICAgICBfdGhpcy5wcml2U2VydmljZVRhZyA9IHNlcnZpY2VUYWc7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml0aW9uRW5kZWRFdmVudC5wcm90b3R5cGUsIFwiYXVkaW9Tb3VyY2VJZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkF1ZGlvU291cmNlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvZ25pdGlvbkVuZGVkRXZlbnQucHJvdG90eXBlLCBcImF1ZGlvTm9kZUlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Ob2RlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvZ25pdGlvbkVuZGVkRXZlbnQucHJvdG90eXBlLCBcImF1dGhGZXRjaEV2ZW50SWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZBdXRoRmV0Y2hFdmVudElkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb2duaXRpb25FbmRlZEV2ZW50LnByb3RvdHlwZSwgXCJzZXJ2aWNlVGFnXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U2VydmljZVRhZztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml0aW9uRW5kZWRFdmVudC5wcm90b3R5cGUsIFwic3RhdHVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U3RhdHVzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb2duaXRpb25FbmRlZEV2ZW50LnByb3RvdHlwZSwgXCJlcnJvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gUmVjb2duaXRpb25FbmRlZEV2ZW50O1xufShTcGVlY2hSZWNvZ25pdGlvbkV2ZW50KSk7XG5leHBvcnRzLlJlY29nbml0aW9uRW5kZWRFdmVudCA9IFJlY29nbml0aW9uRW5kZWRFdmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVjb2duaXRpb25FdmVudHMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlY29nbml0aW9uTW9kZTtcbihmdW5jdGlvbiAoUmVjb2duaXRpb25Nb2RlKSB7XG4gICAgUmVjb2duaXRpb25Nb2RlW1JlY29nbml0aW9uTW9kZVtcIkludGVyYWN0aXZlXCJdID0gMF0gPSBcIkludGVyYWN0aXZlXCI7XG4gICAgUmVjb2duaXRpb25Nb2RlW1JlY29nbml0aW9uTW9kZVtcIkNvbnZlcnNhdGlvblwiXSA9IDFdID0gXCJDb252ZXJzYXRpb25cIjtcbiAgICBSZWNvZ25pdGlvbk1vZGVbUmVjb2duaXRpb25Nb2RlW1wiRGljdGF0aW9uXCJdID0gMl0gPSBcIkRpY3RhdGlvblwiO1xufSkoUmVjb2duaXRpb25Nb2RlID0gZXhwb3J0cy5SZWNvZ25pdGlvbk1vZGUgfHwgKGV4cG9ydHMuUmVjb2duaXRpb25Nb2RlID0ge30pKTtcbnZhciBTcGVlY2hSZXN1bHRGb3JtYXQ7XG4oZnVuY3Rpb24gKFNwZWVjaFJlc3VsdEZvcm1hdCkge1xuICAgIFNwZWVjaFJlc3VsdEZvcm1hdFtTcGVlY2hSZXN1bHRGb3JtYXRbXCJTaW1wbGVcIl0gPSAwXSA9IFwiU2ltcGxlXCI7XG4gICAgU3BlZWNoUmVzdWx0Rm9ybWF0W1NwZWVjaFJlc3VsdEZvcm1hdFtcIkRldGFpbGVkXCJdID0gMV0gPSBcIkRldGFpbGVkXCI7XG59KShTcGVlY2hSZXN1bHRGb3JtYXQgPSBleHBvcnRzLlNwZWVjaFJlc3VsdEZvcm1hdCB8fCAoZXhwb3J0cy5TcGVlY2hSZXN1bHRGb3JtYXQgPSB7fSkpO1xudmFyIFJlY29nbml6ZXJDb25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVjb2duaXplckNvbmZpZyhzcGVlY2hTZXJ2aWNlQ29uZmlnLCBwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMucHJpdlJlY29nbml0aW9uTW9kZSA9IFJlY29nbml0aW9uTW9kZS5JbnRlcmFjdGl2ZTtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoU2VydmljZUNvbmZpZyA9IHNwZWVjaFNlcnZpY2VDb25maWcgPyBzcGVlY2hTZXJ2aWNlQ29uZmlnIDogbmV3IFNwZWVjaFNlcnZpY2VDb25maWcobmV3IENvbnRleHQobnVsbCkpO1xuICAgICAgICB0aGlzLnByaXZQYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml6ZXJDb25maWcucHJvdG90eXBlLCBcInBhcmFtZXRlcnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZQYXJhbWV0ZXJzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb2duaXplckNvbmZpZy5wcm90b3R5cGUsIFwicmVjb2duaXRpb25Nb2RlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVjb2duaXRpb25Nb2RlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcml2UmVjb2duaXRpb25Nb2RlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnByaXZSZWNvZ25pdGlvbkFjdGl2aXR5VGltZW91dCA9IHZhbHVlID09PSBSZWNvZ25pdGlvbk1vZGUuSW50ZXJhY3RpdmUgPyA4MDAwIDogMjUwMDA7XG4gICAgICAgICAgICB0aGlzLnByaXZTcGVlY2hTZXJ2aWNlQ29uZmlnLlJlY29nbml0aW9uID0gUmVjb2duaXRpb25Nb2RlW3ZhbHVlXTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml6ZXJDb25maWcucHJvdG90eXBlLCBcIlNwZWVjaFNlcnZpY2VDb25maWdcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hTZXJ2aWNlQ29uZmlnO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb2duaXplckNvbmZpZy5wcm90b3R5cGUsIFwicmVjb2duaXRpb25BY3Rpdml0eVRpbWVvdXRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZSZWNvZ25pdGlvbkFjdGl2aXR5VGltZW91dDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml6ZXJDb25maWcucHJvdG90eXBlLCBcImlzQ29udGludW91c1JlY29nbml0aW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVjb2duaXRpb25Nb2RlICE9PSBSZWNvZ25pdGlvbk1vZGUuSW50ZXJhY3RpdmU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBSZWNvZ25pemVyQ29uZmlnO1xufSgpKTtcbmV4cG9ydHMuUmVjb2duaXplckNvbmZpZyA9IFJlY29nbml6ZXJDb25maWc7XG4vLyBUaGUgY29uZmlnIGlzIHNlcmlhbGl6ZWQgYW5kIHNlbnQgYXMgdGhlIFNwZWVjaC5Db25maWdcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIFNwZWVjaFNlcnZpY2VDb25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3BlZWNoU2VydmljZUNvbmZpZyhjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc2VyaWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KF90aGlzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudFtrICYmIGsuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBrLnN1YnN0cmluZygxKV0gPSB2YWx1ZVtrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoU2VydmljZUNvbmZpZy5wcm90b3R5cGUsIFwiQ29udGV4dFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaFNlcnZpY2VDb25maWcucHJvdG90eXBlLCBcIlJlY29nbml0aW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWNvZ25pdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb2duaXRpb24gPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gU3BlZWNoU2VydmljZUNvbmZpZztcbn0oKSk7XG5leHBvcnRzLlNwZWVjaFNlcnZpY2VDb25maWcgPSBTcGVlY2hTZXJ2aWNlQ29uZmlnO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgQ29udGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250ZXh0KG9zKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtID0gbmV3IFN5c3RlbSgpO1xuICAgICAgICB0aGlzLm9zID0gb3M7XG4gICAgfVxuICAgIHJldHVybiBDb250ZXh0O1xufSgpKTtcbmV4cG9ydHMuQ29udGV4dCA9IENvbnRleHQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBTeXN0ZW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3lzdGVtKCkge1xuICAgICAgICAvLyBOb3RlOiBiZWxvdyB3aWxsIGJlIHBhdGNoZWQgZm9yIG9mZmljaWFsIGJ1aWxkcy5cbiAgICAgICAgdmFyIFNQRUVDSFNES19DTElFTlRTREtfVkVSU0lPTiA9IFwiMS42LjBcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJTcGVlY2hTREtcIjtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gU1BFRUNIU0RLX0NMSUVOVFNES19WRVJTSU9OO1xuICAgICAgICB0aGlzLmJ1aWxkID0gXCJKYXZhU2NyaXB0XCI7XG4gICAgICAgIHRoaXMubGFuZyA9IFwiSmF2YVNjcmlwdFwiO1xuICAgIH1cbiAgICByZXR1cm4gU3lzdGVtO1xufSgpKTtcbmV4cG9ydHMuU3lzdGVtID0gU3lzdGVtO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgT1MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT1MocGxhdGZvcm0sIG5hbWUsIHZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybSA9IHBsYXRmb3JtO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIH1cbiAgICByZXR1cm4gT1M7XG59KCkpO1xuZXhwb3J0cy5PUyA9IE9TO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgRGV2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERldmljZShtYW51ZmFjdHVyZXIsIG1vZGVsLCB2ZXJzaW9uKSB7XG4gICAgICAgIHRoaXMubWFudWZhY3R1cmVyID0gbWFudWZhY3R1cmVyO1xuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgfVxuICAgIHJldHVybiBEZXZpY2U7XG59KCkpO1xuZXhwb3J0cy5EZXZpY2UgPSBEZXZpY2U7XG52YXIgY29ubmVjdGl2aXR5O1xuKGZ1bmN0aW9uIChjb25uZWN0aXZpdHkpIHtcbiAgICBjb25uZWN0aXZpdHlbXCJCbHVldG9vdGhcIl0gPSBcIkJsdWV0b290aFwiO1xuICAgIGNvbm5lY3Rpdml0eVtcIldpcmVkXCJdID0gXCJXaXJlZFwiO1xuICAgIGNvbm5lY3Rpdml0eVtcIldpRmlcIl0gPSBcIldpRmlcIjtcbiAgICBjb25uZWN0aXZpdHlbXCJDZWxsdWxhclwiXSA9IFwiQ2VsbHVsYXJcIjtcbiAgICBjb25uZWN0aXZpdHlbXCJJbkJ1aWx0XCJdID0gXCJJbkJ1aWx0XCI7XG4gICAgY29ubmVjdGl2aXR5W1wiVW5rbm93blwiXSA9IFwiVW5rbm93blwiO1xufSkoY29ubmVjdGl2aXR5ID0gZXhwb3J0cy5jb25uZWN0aXZpdHkgfHwgKGV4cG9ydHMuY29ubmVjdGl2aXR5ID0ge30pKTtcbnZhciB0eXBlO1xuKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdHlwZVtcIlBob25lXCJdID0gXCJQaG9uZVwiO1xuICAgIHR5cGVbXCJTcGVha2VyXCJdID0gXCJTcGVha2VyXCI7XG4gICAgdHlwZVtcIkNhclwiXSA9IFwiQ2FyXCI7XG4gICAgdHlwZVtcIkhlYWRzZXRcIl0gPSBcIkhlYWRzZXRcIjtcbiAgICB0eXBlW1wiVGhlcm1vc3RhdFwiXSA9IFwiVGhlcm1vc3RhdFwiO1xuICAgIHR5cGVbXCJNaWNyb3Bob25lc1wiXSA9IFwiTWljcm9waG9uZXNcIjtcbiAgICB0eXBlW1wiRGVza3Bob25lXCJdID0gXCJEZXNrcGhvbmVcIjtcbiAgICB0eXBlW1wiUmVtb3RlQ29udHJvbFwiXSA9IFwiUmVtb3RlQ29udHJvbFwiO1xuICAgIHR5cGVbXCJVbmtub3duXCJdID0gXCJVbmtub3duXCI7XG4gICAgdHlwZVtcIkZpbGVcIl0gPSBcIkZpbGVcIjtcbiAgICB0eXBlW1wiU3RyZWFtXCJdID0gXCJTdHJlYW1cIjtcbn0pKHR5cGUgPSBleHBvcnRzLnR5cGUgfHwgKGV4cG9ydHMudHlwZSA9IHt9KSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlY29nbml6ZXJDb25maWcuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRXhwb3J0c1wiKTtcbnZhciBSZWNvZ25pdGlvbkV2ZW50c18xID0gcmVxdWlyZShcIi4vUmVjb2duaXRpb25FdmVudHNcIik7XG52YXIgU2VydmljZVRlbGVtZXRyeUxpc3RlbmVyX0ludGVybmFsXzEgPSByZXF1aXJlKFwiLi9TZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIuSW50ZXJuYWxcIik7XG52YXIgUmVxdWVzdFNlc3Npb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVxdWVzdFNlc3Npb24oYXVkaW9Tb3VyY2VJZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdkRldGFjaGFibGVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMucHJpdklzQXVkaW9Ob2RlRGV0YWNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcml2SXNSZWNvZ25pemluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZJc1NwZWVjaEVuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdlR1cm5TdGFydEF1ZGlvT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5wcml2TGFzdFJlY29PZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLnByaXZIeXBvdGhlc2lzUmVjZWl2ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcml2Qnl0ZXNTZW50ID0gMDtcbiAgICAgICAgdGhpcy5vbkF1ZGlvU291cmNlQXR0YWNoQ29tcGxldGVkID0gZnVuY3Rpb24gKGF1ZGlvTm9kZSwgaXNFcnJvciwgZXJyb3IpIHtcbiAgICAgICAgICAgIF90aGlzLnByaXZBdWRpb05vZGUgPSBhdWRpb05vZGU7XG4gICAgICAgICAgICBpZiAoaXNFcnJvcikge1xuICAgICAgICAgICAgICAgIF90aGlzLm9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IFJlY29nbml0aW9uRXZlbnRzXzEuTGlzdGVuaW5nU3RhcnRlZEV2ZW50KF90aGlzLnByaXZSZXF1ZXN0SWQsIF90aGlzLnByaXZTZXNzaW9uSWQsIF90aGlzLnByaXZBdWRpb1NvdXJjZUlkLCBfdGhpcy5wcml2QXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblByZUNvbm5lY3Rpb25TdGFydCA9IGZ1bmN0aW9uIChhdXRoRmV0Y2hFdmVudElkLCBjb25uZWN0aW9uSWQpIHtcbiAgICAgICAgICAgIF90aGlzLnByaXZBdXRoRmV0Y2hFdmVudElkID0gYXV0aEZldGNoRXZlbnRJZDtcbiAgICAgICAgICAgIF90aGlzLnByaXZTZXNzaW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgICAgICBfdGhpcy5vbkV2ZW50KG5ldyBSZWNvZ25pdGlvbkV2ZW50c18xLkNvbm5lY3RpbmdUb1NlcnZpY2VFdmVudChfdGhpcy5wcml2UmVxdWVzdElkLCBfdGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCwgX3RoaXMucHJpdlNlc3Npb25JZCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uQXV0aENvbXBsZXRlZCA9IGZ1bmN0aW9uIChpc0Vycm9yLCBlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Db25uZWN0aW9uRXN0YWJsaXNoQ29tcGxldGVkID0gZnVuY3Rpb24gKHN0YXR1c0NvZGUsIHJlYXNvbikge1xuICAgICAgICAgICAgaWYgKHN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IFJlY29nbml0aW9uRXZlbnRzXzEuUmVjb2duaXRpb25TdGFydGVkRXZlbnQoX3RoaXMucmVxdWVzdElkLCBfdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCwgX3RoaXMucHJpdkF1ZGlvTm9kZUlkLCBfdGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCwgX3RoaXMucHJpdlNlc3Npb25JZCkpO1xuICAgICAgICAgICAgICAgIGlmICghIV90aGlzLnByaXZBdWRpb05vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkF1ZGlvTm9kZS5yZXBsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdlR1cm5TdGFydEF1ZGlvT2Zmc2V0ID0gX3RoaXMucHJpdkxhc3RSZWNvT2Zmc2V0O1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZCeXRlc1NlbnQgPSAwO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1c0NvZGUgPT09IDQwMykge1xuICAgICAgICAgICAgICAgIF90aGlzLm9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblNlcnZpY2VUdXJuRW5kUmVzcG9uc2UgPSBmdW5jdGlvbiAoY29udGludW91c1JlY29nbml0aW9uKSB7XG4gICAgICAgICAgICBpZiAoIWNvbnRpbnVvdXNSZWNvZ25pdGlvbiB8fCBfdGhpcy5pc1NwZWVjaEVuZGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMub25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU3RhcnQgYSBuZXcgcmVxdWVzdCBzZXQuXG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdlR1cm5TdGFydEF1ZGlvT2Zmc2V0ID0gX3RoaXMucHJpdkxhc3RSZWNvT2Zmc2V0O1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZXF1ZXN0SWQgPSBFeHBvcnRzXzEuY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZBdWRpb05vZGUucmVwbGF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5wcml2SXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgIC8vIHdlIHNob3VsZCBoYXZlIGNvbXBsZXRlZCBieSBub3cuIElmIHdlIGRpZCBub3QgaXRzIGFuIHVua25vd24gZXJyb3IuXG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdklzRGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBfdGhpcy5wcml2RGV0YWNoYWJsZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXRhY2hhYmxlID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgICAgICBkZXRhY2hhYmxlLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2U2VydmljZVRlbGVtZXRyeUxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRUZWxlbWV0cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lci5oYXNUZWxlbWV0cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lci5nZXRUZWxlbWV0cnkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghIV90aGlzLnByaXZTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2U2VydmljZVRlbGVtZXRyeUxpc3RlbmVyLm9uRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRXhwb3J0c18xLkV2ZW50cy5pbnN0YW5jZS5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEhX3RoaXMucHJpdklzUmVjb2duaXppbmcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2SXNSZWNvZ25pemluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF90aGlzLmRldGFjaEF1ZGlvTm9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRldGFjaEF1ZGlvTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMucHJpdklzQXVkaW9Ob2RlRGV0YWNoZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2SXNBdWRpb05vZGVEZXRhY2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnByaXZBdWRpb05vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkF1ZGlvTm9kZS5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvU291cmNlSWQgPSBhdWRpb1NvdXJjZUlkO1xuICAgICAgICB0aGlzLnByaXZSZXF1ZXN0SWQgPSBFeHBvcnRzXzEuY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgICAgICB0aGlzLnByaXZBdWRpb05vZGVJZCA9IEV4cG9ydHNfMS5jcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgIHRoaXMucHJpdlJlcXVlc3RDb21wbGV0aW9uRGVmZXJyYWwgPSBuZXcgRXhwb3J0c18xLkRlZmVycmVkKCk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0U2Vzc2lvbi5wcm90b3R5cGUsIFwic2Vzc2lvbklkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U2Vzc2lvbklkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVxdWVzdFNlc3Npb24ucHJvdG90eXBlLCBcInJlcXVlc3RJZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlcXVlc3RJZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlcXVlc3RTZXNzaW9uLnByb3RvdHlwZSwgXCJhdWRpb05vZGVJZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkF1ZGlvTm9kZUlkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVxdWVzdFNlc3Npb24ucHJvdG90eXBlLCBcImNvbXBsZXRpb25Qcm9taXNlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVxdWVzdENvbXBsZXRpb25EZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0U2Vzc2lvbi5wcm90b3R5cGUsIFwiaXNTcGVlY2hFbmRlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdklzU3BlZWNoRW5kZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0U2Vzc2lvbi5wcm90b3R5cGUsIFwiaXNSZWNvZ25pemluZ1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdklzUmVjb2duaXppbmc7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0U2Vzc2lvbi5wcm90b3R5cGUsIFwiY3VycmVudFR1cm5BdWRpb09mZnNldFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlR1cm5TdGFydEF1ZGlvT2Zmc2V0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVxdWVzdFNlc3Npb24ucHJvdG90eXBlLCBcImJ5dGVzU2VudFwiLCB7XG4gICAgICAgIC8vIFRoZSBudW1iZXIgb2YgYnl0ZXMgc2VudCBmb3IgdGhlIGN1cnJlbnQgY29ubmVjdGlvbi5cbiAgICAgICAgLy8gQ291bnRlciBpcyByZXNldCB0byAwIGVhY2ggdGltZSBhIGNvbm5lY3Rpb24gaXMgZXN0YWJsaXNoZWQuXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkJ5dGVzU2VudDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgUmVxdWVzdFNlc3Npb24ucHJvdG90eXBlLmxpc3RlbkZvclNlcnZpY2VUZWxlbWV0cnkgPSBmdW5jdGlvbiAoZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgaWYgKCEhdGhpcy5wcml2U2VydmljZVRlbGVtZXRyeUxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZEZXRhY2hhYmxlcy5wdXNoKGV2ZW50U291cmNlLmF0dGFjaExpc3RlbmVyKHRoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lcikpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXF1ZXN0U2Vzc2lvbi5wcm90b3R5cGUuc3RhcnROZXdSZWNvZ25pdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcml2SXNTcGVlY2hFbmRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZJc1JlY29nbml6aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wcml2VHVyblN0YXJ0QXVkaW9PZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLnByaXZMYXN0UmVjb09mZnNldCA9IDA7XG4gICAgICAgIHRoaXMucHJpdlJlcXVlc3RJZCA9IEV4cG9ydHNfMS5jcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgICAgIHRoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lciA9IG5ldyBTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXJfSW50ZXJuYWxfMS5TZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIodGhpcy5wcml2UmVxdWVzdElkLCB0aGlzLnByaXZBdWRpb1NvdXJjZUlkLCB0aGlzLnByaXZBdWRpb05vZGVJZCk7XG4gICAgICAgIHRoaXMub25FdmVudChuZXcgUmVjb2duaXRpb25FdmVudHNfMS5SZWNvZ25pdGlvblRyaWdnZXJlZEV2ZW50KHRoaXMucmVxdWVzdElkLCB0aGlzLnByaXZTZXNzaW9uSWQsIHRoaXMucHJpdkF1ZGlvU291cmNlSWQsIHRoaXMucHJpdkF1ZGlvTm9kZUlkKSk7XG4gICAgfTtcbiAgICBSZXF1ZXN0U2Vzc2lvbi5wcm90b3R5cGUub25IeXBvdGhlc2lzID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMucHJpdkh5cG90aGVzaXNSZWNlaXZlZCkge1xuICAgICAgICAgICAgdGhpcy5wcml2SHlwb3RoZXNpc1JlY2VpdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lci5oeXBvdGhlc2lzUmVjZWl2ZWQodGhpcy5wcml2QXVkaW9Ob2RlLmZpbmRUaW1lQXRPZmZzZXQob2Zmc2V0KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlcXVlc3RTZXNzaW9uLnByb3RvdHlwZS5vblBocmFzZVJlY29nbml6ZWQgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgIHRoaXMucHJpdlNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lci5waHJhc2VSZWNlaXZlZCh0aGlzLnByaXZBdWRpb05vZGUuZmluZFRpbWVBdE9mZnNldChvZmZzZXQpKTtcbiAgICAgICAgdGhpcy5vblNlcnZpY2VSZWNvZ25pemVkKG9mZnNldCk7XG4gICAgfTtcbiAgICBSZXF1ZXN0U2Vzc2lvbi5wcm90b3R5cGUub25TZXJ2aWNlUmVjb2duaXplZCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5wcml2TGFzdFJlY29PZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMucHJpdkh5cG90aGVzaXNSZWNlaXZlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZBdWRpb05vZGUuc2hyaW5rQnVmZmVycyhvZmZzZXQpO1xuICAgIH07XG4gICAgUmVxdWVzdFNlc3Npb24ucHJvdG90eXBlLm9uQXVkaW9TZW50ID0gZnVuY3Rpb24gKGJ5dGVzU2VudCkge1xuICAgICAgICB0aGlzLnByaXZCeXRlc1NlbnQgKz0gYnl0ZXNTZW50O1xuICAgIH07XG4gICAgUmVxdWVzdFNlc3Npb24ucHJvdG90eXBlLm9uU3RvcFJlY29nbml6aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByaXZJc1JlY29nbml6aW5nID0gZmFsc2U7XG4gICAgfTtcbiAgICAvLyBTaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGF1ZGlvTm9kZSBmb3IgdGhpcyBzZXNzaW9uIGhhcyBpbmRpY2F0ZWQgdGhhdCBpdCBpcyBvdXQgb2Ygc3BlZWNoLlxuICAgIFJlcXVlc3RTZXNzaW9uLnByb3RvdHlwZS5vblNwZWVjaEVuZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByaXZJc1NwZWVjaEVuZGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBSZXF1ZXN0U2Vzc2lvbjtcbn0oKSk7XG5leHBvcnRzLlJlcXVlc3RTZXNzaW9uID0gUmVxdWVzdFNlc3Npb247XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlcXVlc3RTZXNzaW9uLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vRXhwb3J0c1wiKTtcbnZhciBEZXRhaWxlZFNwZWVjaFBocmFzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZXRhaWxlZFNwZWVjaFBocmFzZShqc29uKSB7XG4gICAgICAgIHRoaXMucHJpdkRldGFpbGVkU3BlZWNoUGhyYXNlID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgdGhpcy5wcml2RGV0YWlsZWRTcGVlY2hQaHJhc2UuUmVjb2duaXRpb25TdGF0dXMgPSBFeHBvcnRzXzEuUmVjb2duaXRpb25TdGF0dXNbdGhpcy5wcml2RGV0YWlsZWRTcGVlY2hQaHJhc2UuUmVjb2duaXRpb25TdGF0dXNdO1xuICAgIH1cbiAgICBEZXRhaWxlZFNwZWVjaFBocmFzZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGV0YWlsZWRTcGVlY2hQaHJhc2UoanNvbik7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGV0YWlsZWRTcGVlY2hQaHJhc2UucHJvdG90eXBlLCBcIlJlY29nbml0aW9uU3RhdHVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2RGV0YWlsZWRTcGVlY2hQaHJhc2UuUmVjb2duaXRpb25TdGF0dXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXRhaWxlZFNwZWVjaFBocmFzZS5wcm90b3R5cGUsIFwiTkJlc3RcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZEZXRhaWxlZFNwZWVjaFBocmFzZS5OQmVzdDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERldGFpbGVkU3BlZWNoUGhyYXNlLnByb3RvdHlwZSwgXCJEdXJhdGlvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkRldGFpbGVkU3BlZWNoUGhyYXNlLkR1cmF0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGV0YWlsZWRTcGVlY2hQaHJhc2UucHJvdG90eXBlLCBcIk9mZnNldFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkRldGFpbGVkU3BlZWNoUGhyYXNlLk9mZnNldDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIERldGFpbGVkU3BlZWNoUGhyYXNlO1xufSgpKTtcbmV4cG9ydHMuRGV0YWlsZWRTcGVlY2hQaHJhc2UgPSBEZXRhaWxlZFNwZWVjaFBocmFzZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGV0YWlsZWRTcGVlY2hQaHJhc2UuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAY2xhc3MgU3ludGhlc2lzU3RhdHVzXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgU3ludGhlc2lzU3RhdHVzO1xuKGZ1bmN0aW9uIChTeW50aGVzaXNTdGF0dXMpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVzcG9uc2UgY29udGFpbnMgdmFsaWQgYXVkaW8gZGF0YS5cbiAgICAgKiBAbWVtYmVyIFN5bnRoZXNpc1N0YXR1cy5TdWNjZXNzXG4gICAgICovXG4gICAgU3ludGhlc2lzU3RhdHVzW1N5bnRoZXNpc1N0YXR1c1tcIlN1Y2Nlc3NcIl0gPSAwXSA9IFwiU3VjY2Vzc1wiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGUgZW5kIG9mIGF1ZGlvIGRhdGEuIE5vIHZhbGlkIGF1ZGlvIGRhdGEgaXMgaW5jbHVkZWQgaW4gdGhlIG1lc3NhZ2UuXG4gICAgICogQG1lbWJlciBTeW50aGVzaXNTdGF0dXMuU3ludGhlc2lzRW5kXG4gICAgICovXG4gICAgU3ludGhlc2lzU3RhdHVzW1N5bnRoZXNpc1N0YXR1c1tcIlN5bnRoZXNpc0VuZFwiXSA9IDFdID0gXCJTeW50aGVzaXNFbmRcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHN5bnRoZXNpcyBkYXRhIHByb2Nlc3NpbmcuXG4gICAgICogQG1lbWJlciBTeW50aGVzaXNTdGF0dXMuRXJyb3JcbiAgICAgKi9cbiAgICBTeW50aGVzaXNTdGF0dXNbU3ludGhlc2lzU3RhdHVzW1wiRXJyb3JcIl0gPSAyXSA9IFwiRXJyb3JcIjtcbn0pKFN5bnRoZXNpc1N0YXR1cyA9IGV4cG9ydHMuU3ludGhlc2lzU3RhdHVzIHx8IChleHBvcnRzLlN5bnRoZXNpc1N0YXR1cyA9IHt9KSk7XG52YXIgUmVjb2duaXRpb25TdGF0dXM7XG4oZnVuY3Rpb24gKFJlY29nbml0aW9uU3RhdHVzKSB7XG4gICAgUmVjb2duaXRpb25TdGF0dXNbUmVjb2duaXRpb25TdGF0dXNbXCJTdWNjZXNzXCJdID0gMF0gPSBcIlN1Y2Nlc3NcIjtcbiAgICBSZWNvZ25pdGlvblN0YXR1c1tSZWNvZ25pdGlvblN0YXR1c1tcIk5vTWF0Y2hcIl0gPSAxXSA9IFwiTm9NYXRjaFwiO1xuICAgIFJlY29nbml0aW9uU3RhdHVzW1JlY29nbml0aW9uU3RhdHVzW1wiSW5pdGlhbFNpbGVuY2VUaW1lb3V0XCJdID0gMl0gPSBcIkluaXRpYWxTaWxlbmNlVGltZW91dFwiO1xuICAgIFJlY29nbml0aW9uU3RhdHVzW1JlY29nbml0aW9uU3RhdHVzW1wiQmFiYmxlVGltZW91dFwiXSA9IDNdID0gXCJCYWJibGVUaW1lb3V0XCI7XG4gICAgUmVjb2duaXRpb25TdGF0dXNbUmVjb2duaXRpb25TdGF0dXNbXCJFcnJvclwiXSA9IDRdID0gXCJFcnJvclwiO1xuICAgIFJlY29nbml0aW9uU3RhdHVzW1JlY29nbml0aW9uU3RhdHVzW1wiRW5kT2ZEaWN0YXRpb25cIl0gPSA1XSA9IFwiRW5kT2ZEaWN0YXRpb25cIjtcbn0pKFJlY29nbml0aW9uU3RhdHVzID0gZXhwb3J0cy5SZWNvZ25pdGlvblN0YXR1cyB8fCAoZXhwb3J0cy5SZWNvZ25pdGlvblN0YXR1cyA9IHt9KSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVudW1zLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8vIHJlc3BvbnNlXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgSW50ZW50UmVzcG9uc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW50ZW50UmVzcG9uc2UoanNvbikge1xuICAgICAgICB0aGlzLnByaXZJbnRlbnRSZXNwb25zZSA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgfVxuICAgIEludGVudFJlc3BvbnNlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRlbnRSZXNwb25zZShqc29uKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlbnRSZXNwb25zZS5wcm90b3R5cGUsIFwicXVlcnlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZJbnRlbnRSZXNwb25zZS5xdWVyeTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVudFJlc3BvbnNlLnByb3RvdHlwZSwgXCJ0b3BTY29yaW5nSW50ZW50XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SW50ZW50UmVzcG9uc2UudG9wU2NvcmluZ0ludGVudDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVudFJlc3BvbnNlLnByb3RvdHlwZSwgXCJlbnRpdGllc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkludGVudFJlc3BvbnNlLmVudGl0aWVzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gSW50ZW50UmVzcG9uc2U7XG59KCkpO1xuZXhwb3J0cy5JbnRlbnRSZXNwb25zZSA9IEludGVudFJlc3BvbnNlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbnRlbnRSZXNwb25zZS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uL0V4cG9ydHNcIik7XG52YXIgU2ltcGxlU3BlZWNoUGhyYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNpbXBsZVNwZWVjaFBocmFzZShqc29uKSB7XG4gICAgICAgIHRoaXMucHJpdlNpbXBsZVNwZWVjaFBocmFzZSA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIHRoaXMucHJpdlNpbXBsZVNwZWVjaFBocmFzZS5SZWNvZ25pdGlvblN0YXR1cyA9IEV4cG9ydHNfMS5SZWNvZ25pdGlvblN0YXR1c1t0aGlzLnByaXZTaW1wbGVTcGVlY2hQaHJhc2UuUmVjb2duaXRpb25TdGF0dXNdO1xuICAgIH1cbiAgICBTaW1wbGVTcGVlY2hQaHJhc2UuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgICAgICByZXR1cm4gbmV3IFNpbXBsZVNwZWVjaFBocmFzZShqc29uKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTaW1wbGVTcGVlY2hQaHJhc2UucHJvdG90eXBlLCBcIlJlY29nbml0aW9uU3RhdHVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U2ltcGxlU3BlZWNoUGhyYXNlLlJlY29nbml0aW9uU3RhdHVzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2ltcGxlU3BlZWNoUGhyYXNlLnByb3RvdHlwZSwgXCJEaXNwbGF5VGV4dFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNpbXBsZVNwZWVjaFBocmFzZS5EaXNwbGF5VGV4dDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNpbXBsZVNwZWVjaFBocmFzZS5wcm90b3R5cGUsIFwiT2Zmc2V0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U2ltcGxlU3BlZWNoUGhyYXNlLk9mZnNldDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNpbXBsZVNwZWVjaFBocmFzZS5wcm90b3R5cGUsIFwiRHVyYXRpb25cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTaW1wbGVTcGVlY2hQaHJhc2UuRHVyYXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBTaW1wbGVTcGVlY2hQaHJhc2U7XG59KCkpO1xuZXhwb3J0cy5TaW1wbGVTcGVlY2hQaHJhc2UgPSBTaW1wbGVTcGVlY2hQaHJhc2U7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNpbXBsZVNwZWVjaFBocmFzZS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3BlZWNoRGV0ZWN0ZWQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3BlZWNoRGV0ZWN0ZWQoanNvbikge1xuICAgICAgICB0aGlzLnByaXZTcGVlY2hTdGFydERldGVjdGVkID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9XG4gICAgU3BlZWNoRGV0ZWN0ZWQuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgICAgICByZXR1cm4gbmV3IFNwZWVjaERldGVjdGVkKGpzb24pO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaERldGVjdGVkLnByb3RvdHlwZSwgXCJPZmZzZXRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hTdGFydERldGVjdGVkLk9mZnNldDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFNwZWVjaERldGVjdGVkO1xufSgpKTtcbmV4cG9ydHMuU3BlZWNoRGV0ZWN0ZWQgPSBTcGVlY2hEZXRlY3RlZDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoRGV0ZWN0ZWQuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFNwZWVjaEh5cG90aGVzaXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3BlZWNoSHlwb3RoZXNpcyhqc29uKSB7XG4gICAgICAgIHRoaXMucHJpdlNwZWVjaEh5cG90aGVzaXMgPSBKU09OLnBhcnNlKGpzb24pO1xuICAgIH1cbiAgICBTcGVlY2hIeXBvdGhlc2lzLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTcGVlY2hIeXBvdGhlc2lzKGpzb24pO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaEh5cG90aGVzaXMucHJvdG90eXBlLCBcIlRleHRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hIeXBvdGhlc2lzLlRleHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGVlY2hIeXBvdGhlc2lzLnByb3RvdHlwZSwgXCJPZmZzZXRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hIeXBvdGhlc2lzLk9mZnNldDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaEh5cG90aGVzaXMucHJvdG90eXBlLCBcIkR1cmF0aW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U3BlZWNoSHlwb3RoZXNpcy5EdXJhdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFNwZWVjaEh5cG90aGVzaXM7XG59KCkpO1xuZXhwb3J0cy5TcGVlY2hIeXBvdGhlc2lzID0gU3BlZWNoSHlwb3RoZXNpcztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoSHlwb3RoZXNpcy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVHJhbnNsYXRpb25TdGF0dXNfMSA9IHJlcXVpcmUoXCIuLi9UcmFuc2xhdGlvblN0YXR1c1wiKTtcbnZhciBUcmFuc2xhdGlvbkh5cG90aGVzaXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNsYXRpb25IeXBvdGhlc2lzKGpzb24pIHtcbiAgICAgICAgdGhpcy5wcml2VHJhbnNsYXRpb25IeXBvdGhlc2lzID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgdGhpcy5wcml2VHJhbnNsYXRpb25IeXBvdGhlc2lzLlRyYW5zbGF0aW9uLlRyYW5zbGF0aW9uU3RhdHVzID0gVHJhbnNsYXRpb25TdGF0dXNfMS5UcmFuc2xhdGlvblN0YXR1c1t0aGlzLnByaXZUcmFuc2xhdGlvbkh5cG90aGVzaXMuVHJhbnNsYXRpb24uVHJhbnNsYXRpb25TdGF0dXNdO1xuICAgIH1cbiAgICBUcmFuc2xhdGlvbkh5cG90aGVzaXMuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgICAgICByZXR1cm4gbmV3IFRyYW5zbGF0aW9uSHlwb3RoZXNpcyhqc29uKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2xhdGlvbkh5cG90aGVzaXMucHJvdG90eXBlLCBcIkR1cmF0aW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2VHJhbnNsYXRpb25IeXBvdGhlc2lzLkR1cmF0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25IeXBvdGhlc2lzLnByb3RvdHlwZSwgXCJPZmZzZXRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZUcmFuc2xhdGlvbkh5cG90aGVzaXMuT2Zmc2V0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25IeXBvdGhlc2lzLnByb3RvdHlwZSwgXCJUZXh0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2VHJhbnNsYXRpb25IeXBvdGhlc2lzLlRleHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2xhdGlvbkh5cG90aGVzaXMucHJvdG90eXBlLCBcIlRyYW5zbGF0aW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2VHJhbnNsYXRpb25IeXBvdGhlc2lzLlRyYW5zbGF0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gVHJhbnNsYXRpb25IeXBvdGhlc2lzO1xufSgpKTtcbmV4cG9ydHMuVHJhbnNsYXRpb25IeXBvdGhlc2lzID0gVHJhbnNsYXRpb25IeXBvdGhlc2lzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvbkh5cG90aGVzaXMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9FeHBvcnRzXCIpO1xudmFyIFRyYW5zbGF0aW9uU3RhdHVzXzEgPSByZXF1aXJlKFwiLi4vVHJhbnNsYXRpb25TdGF0dXNcIik7XG52YXIgVHJhbnNsYXRpb25QaHJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNsYXRpb25QaHJhc2UoanNvbikge1xuICAgICAgICB0aGlzLnByaXZUcmFuc2xhdGlvblBocmFzZSA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIHRoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLlJlY29nbml0aW9uU3RhdHVzID0gRXhwb3J0c18xLlJlY29nbml0aW9uU3RhdHVzW3RoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLlJlY29nbml0aW9uU3RhdHVzXTtcbiAgICAgICAgaWYgKHRoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLlRyYW5zbGF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLlRyYW5zbGF0aW9uLlRyYW5zbGF0aW9uU3RhdHVzID0gVHJhbnNsYXRpb25TdGF0dXNfMS5UcmFuc2xhdGlvblN0YXR1c1t0aGlzLnByaXZUcmFuc2xhdGlvblBocmFzZS5UcmFuc2xhdGlvbi5UcmFuc2xhdGlvblN0YXR1c107XG4gICAgICAgIH1cbiAgICB9XG4gICAgVHJhbnNsYXRpb25QaHJhc2UuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICAgICAgICByZXR1cm4gbmV3IFRyYW5zbGF0aW9uUGhyYXNlKGpzb24pO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zbGF0aW9uUGhyYXNlLnByb3RvdHlwZSwgXCJSZWNvZ25pdGlvblN0YXR1c1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLlJlY29nbml0aW9uU3RhdHVzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25QaHJhc2UucHJvdG90eXBlLCBcIk9mZnNldFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLk9mZnNldDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zbGF0aW9uUGhyYXNlLnByb3RvdHlwZSwgXCJEdXJhdGlvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlRyYW5zbGF0aW9uUGhyYXNlLkR1cmF0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25QaHJhc2UucHJvdG90eXBlLCBcIlRleHRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZUcmFuc2xhdGlvblBocmFzZS5UZXh0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25QaHJhc2UucHJvdG90eXBlLCBcIlRyYW5zbGF0aW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2VHJhbnNsYXRpb25QaHJhc2UuVHJhbnNsYXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBUcmFuc2xhdGlvblBocmFzZTtcbn0oKSk7XG5leHBvcnRzLlRyYW5zbGF0aW9uUGhyYXNlID0gVHJhbnNsYXRpb25QaHJhc2U7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYW5zbGF0aW9uUGhyYXNlLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vRXhwb3J0c1wiKTtcbnZhciBUcmFuc2xhdGlvblN5bnRoZXNpc0VuZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUcmFuc2xhdGlvblN5bnRoZXNpc0VuZChqc29uKSB7XG4gICAgICAgIHRoaXMucHJpdlN5bnRoZXNpc0VuZCA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIHRoaXMucHJpdlN5bnRoZXNpc0VuZC5TeW50aGVzaXNTdGF0dXMgPSBFeHBvcnRzXzEuU3ludGhlc2lzU3RhdHVzW3RoaXMucHJpdlN5bnRoZXNpc0VuZC5TeW50aGVzaXNTdGF0dXNdO1xuICAgIH1cbiAgICBUcmFuc2xhdGlvblN5bnRoZXNpc0VuZC5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNsYXRpb25TeW50aGVzaXNFbmQoanNvbik7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25TeW50aGVzaXNFbmQucHJvdG90eXBlLCBcIlN5bnRoZXNpc1N0YXR1c1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlN5bnRoZXNpc0VuZC5TeW50aGVzaXNTdGF0dXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2xhdGlvblN5bnRoZXNpc0VuZC5wcm90b3R5cGUsIFwiRmFpbHVyZVJlYXNvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlN5bnRoZXNpc0VuZC5GYWlsdXJlUmVhc29uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gVHJhbnNsYXRpb25TeW50aGVzaXNFbmQ7XG59KCkpO1xuZXhwb3J0cy5UcmFuc2xhdGlvblN5bnRoZXNpc0VuZCA9IFRyYW5zbGF0aW9uU3ludGhlc2lzRW5kO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvblN5bnRoZXNpc0VuZC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi5icm93c2VyL0V4cG9ydHNcIik7XG52YXIgRXhwb3J0c18yID0gcmVxdWlyZShcIi4uL2NvbW1vbi9FeHBvcnRzXCIpO1xudmFyIEV4cG9ydHNfMyA9IHJlcXVpcmUoXCIuLi9zZGsvRXhwb3J0c1wiKTtcbnZhciBFeHBvcnRzXzQgPSByZXF1aXJlKFwiLi9FeHBvcnRzXCIpO1xudmFyIFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlX0ludGVybmFsXzEgPSByZXF1aXJlKFwiLi9TcGVlY2hDb25uZWN0aW9uTWVzc2FnZS5JbnRlcm5hbFwiKTtcbnZhciBTZXJ2aWNlUmVjb2duaXplckJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2VydmljZVJlY29nbml6ZXJCYXNlKGF1dGhlbnRpY2F0aW9uLCBjb25uZWN0aW9uRmFjdG9yeSwgYXVkaW9Tb3VyY2UsIHJlY29nbml6ZXJDb25maWcsIHJlY29nbml6ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zZW5kVGVsZW1ldHJ5RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0ZWxlbWV0cnlEYXRhID0gX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmdldFRlbGVtZXRyeSgpO1xuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiVGVsZW06IFwiICsgdGVsZW1ldHJ5RGF0YSk7XG4gICAgICAgICAgICBpZiAoU2VydmljZVJlY29nbml6ZXJCYXNlLnRlbGVtZXRyeURhdGFFbmFibGVkICE9PSB0cnVlIHx8XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdklzRGlzcG9zZWQgfHxcbiAgICAgICAgICAgICAgICBudWxsID09PSB0ZWxlbWV0cnlEYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMi5Qcm9taXNlSGVscGVyLmZyb21SZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISFTZXJ2aWNlUmVjb2duaXplckJhc2UudGVsZW1ldHJ5RGF0YSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIFNlcnZpY2VSZWNvZ25pemVyQmFzZS50ZWxlbWV0cnlEYXRhKHRlbGVtZXRyeURhdGEpO1xuICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZldGNoQ29ubmVjdGlvbigpLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aChmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLnNlbmQobmV3IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlX0ludGVybmFsXzEuU3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2UoRXhwb3J0c18yLk1lc3NhZ2VUeXBlLlRleHQsIFwidGVsZW1ldHJ5XCIsIF90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5yZXF1ZXN0SWQsIFwiYXBwbGljYXRpb24vanNvblwiLCB0ZWxlbWV0cnlEYXRhKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mZXRjaENvbm5lY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY29uZmlndXJlQ29ubmVjdGlvbigpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlY2VpdmVNZXNzYWdlID0gZnVuY3Rpb24gKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsQmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZldGNoQ29ubmVjdGlvbigpLm9uKGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24ucmVhZCgpXG4gICAgICAgICAgICAgICAgICAgIC5vblN1Y2Nlc3NDb250aW51ZVdpdGhQcm9taXNlKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcml2SXNEaXNwb3NlZCB8fCAhX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzUmVjb2duaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlJ3JlIGRvbmUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRXhwb3J0c18yLlByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGluZGljYXRlcyB3ZSBhcmUgZHJhaW5pbmcgdGhlIHF1ZXVlIGFuZCBpdCBjYW1lIHdpdGggbm8gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1JlY29nbml6aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMi5Qcm9taXNlSGVscGVyLmZyb21SZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVjZWl2ZU1lc3NhZ2Uoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxCYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgY29ubmVjdGlvbk1lc3NhZ2UgPSBTcGVlY2hDb25uZWN0aW9uTWVzc2FnZV9JbnRlcm5hbF8xLlNwZWVjaENvbm5lY3Rpb25NZXNzYWdlLmZyb21Db25uZWN0aW9uTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25NZXNzYWdlLnJlcXVlc3RJZC50b0xvd2VyQ2FzZSgpID09PSBfdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY29ubmVjdGlvbk1lc3NhZ2UucGF0aC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInR1cm4uc3RhcnRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdk11c3RSZXBvcnRFbmRPZlN0cmVhbSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzcGVlY2guc3RhcnRkZXRlY3RlZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BlZWNoU3RhcnREZXRlY3RlZCA9IEV4cG9ydHNfNC5TcGVlY2hEZXRlY3RlZC5mcm9tSlNPTihjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGVlY2hTdGFydEV2ZW50QXJncyA9IG5ldyBFeHBvcnRzXzMuUmVjb2duaXRpb25FdmVudEFyZ3Moc3BlZWNoU3RhcnREZXRlY3RlZC5PZmZzZXQsIF90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFfdGhpcy5wcml2UmVjb2duaXplci5zcGVlY2hTdGFydERldGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2UmVjb2duaXplci5zcGVlY2hTdGFydERldGVjdGVkKF90aGlzLnByaXZSZWNvZ25pemVyLCBzcGVlY2hTdGFydEV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNwZWVjaC5lbmRkZXRlY3RlZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganNvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24gPSBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXF1ZXN0IHdhcyBlbXB0eSwgdGhlIEpTT04gcmV0dXJuZWQgaXMgZW1wdHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uID0gXCJ7IE9mZnNldDogMCB9XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwZWVjaFN0b3BEZXRlY3RlZCA9IEV4cG9ydHNfNC5TcGVlY2hEZXRlY3RlZC5mcm9tSlNPTihqc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uU2VydmljZVJlY29nbml6ZWQoc3BlZWNoU3RvcERldGVjdGVkLk9mZnNldCArIF90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwZWVjaFN0b3BFdmVudEFyZ3MgPSBuZXcgRXhwb3J0c18zLlJlY29nbml0aW9uRXZlbnRBcmdzKHNwZWVjaFN0b3BEZXRlY3RlZC5PZmZzZXQgKyBfdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uY3VycmVudFR1cm5BdWRpb09mZnNldCwgX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIV90aGlzLnByaXZSZWNvZ25pemVyLnNwZWVjaEVuZERldGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2UmVjb2duaXplci5zcGVlY2hFbmREZXRlY3RlZChfdGhpcy5wcml2UmVjb2duaXplciwgc3BlZWNoU3RvcEV2ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInR1cm4uZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbmRUZWxlbWV0cnlEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uaXNTcGVlY2hFbmRlZCAmJiBfdGhpcy5wcml2TXVzdFJlcG9ydEVuZE9mU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2TXVzdFJlcG9ydEVuZE9mU3RyZWFtID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jYW5jZWxSZWNvZ25pdGlvbkxvY2FsKEV4cG9ydHNfMy5DYW5jZWxsYXRpb25SZWFzb24uRW5kT2ZTdHJlYW0sIEV4cG9ydHNfMy5DYW5jZWxsYXRpb25FcnJvckNvZGUuTm9FcnJvciwgdW5kZWZpbmVkLCBzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXNzaW9uU3RvcEV2ZW50QXJncyA9IG5ldyBFeHBvcnRzXzMuU2Vzc2lvbkV2ZW50QXJncyhfdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uU2VydmljZVR1cm5FbmRSZXNwb25zZShfdGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5pc0NvbnRpbnVvdXNSZWNvZ25pdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMucHJpdlJlY29nbml6ZXJDb25maWcuaXNDb250aW51b3VzUmVjb2duaXRpb24gfHwgX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzU3BlZWNoRW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIV90aGlzLnByaXZSZWNvZ25pemVyLnNlc3Npb25TdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdlJlY29nbml6ZXIuc2Vzc2lvblN0b3BwZWQoX3RoaXMucHJpdlJlY29nbml6ZXIsIHNlc3Npb25TdG9wRXZlbnRBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmV0Y2hDb25uZWN0aW9uKCkub25TdWNjZXNzQ29udGludWVXaXRoKGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VuZFNwZWVjaENvbnRleHQoY29ubmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByb2Nlc3NUeXBlU3BlY2lmaWNNZXNzYWdlcyhjb25uZWN0aW9uTWVzc2FnZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxCYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVjZWl2ZU1lc3NhZ2Uoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxCYWNrKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VuZFNwZWVjaFNlcnZpY2VDb25maWcgPSBmdW5jdGlvbiAoY29ubmVjdGlvbiwgcmVxdWVzdFNlc3Npb24sIFNwZWVjaFNlcnZpY2VDb25maWdKc29uKSB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IGFueXRoaW5nIHRoYXQgaXMgbm90IHJlcXVpcmVkIGZvciB0aGUgc2VydmljZSB0byB3b3JrLlxuICAgICAgICAgICAgaWYgKFNlcnZpY2VSZWNvZ25pemVyQmFzZS50ZWxlbWV0cnlEYXRhRW5hYmxlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciB3aXRoVGVsZW1ldHJ5ID0gSlNPTi5wYXJzZShTcGVlY2hTZXJ2aWNlQ29uZmlnSnNvbik7XG4gICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW06IHdpdGhUZWxlbWV0cnkuY29udGV4dC5zeXN0ZW0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTcGVlY2hTZXJ2aWNlQ29uZmlnSnNvbiA9IEpTT04uc3RyaW5naWZ5KHJlcGxhY2VtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChTcGVlY2hTZXJ2aWNlQ29uZmlnSnNvbikgeyAvLyAmJiB0aGlzLnByaXZDb25uZWN0aW9uSWQgIT09IHRoaXMucHJpdlNwZWVjaFNlcnZpY2VDb25maWdDb25uZWN0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2U3BlZWNoU2VydmljZUNvbmZpZ0Nvbm5lY3Rpb25JZCA9IF90aGlzLnByaXZDb25uZWN0aW9uSWQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24uc2VuZChuZXcgU3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2VfSW50ZXJuYWxfMS5TcGVlY2hDb25uZWN0aW9uTWVzc2FnZShFeHBvcnRzXzIuTWVzc2FnZVR5cGUuVGV4dCwgXCJzcGVlY2guY29uZmlnXCIsIHJlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIFNwZWVjaFNlcnZpY2VDb25maWdKc29uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRXhwb3J0c18yLlByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZW5kU3BlZWNoQ29udGV4dCA9IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc3BlZWNoQ29udGV4dEpzb24gPSBfdGhpcy5zcGVlY2hDb250ZXh0LnRvSlNPTigpO1xuICAgICAgICAgICAgaWYgKHNwZWVjaENvbnRleHRKc29uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24uc2VuZChuZXcgU3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2VfSW50ZXJuYWxfMS5TcGVlY2hDb25uZWN0aW9uTWVzc2FnZShFeHBvcnRzXzIuTWVzc2FnZVR5cGUuVGV4dCwgXCJzcGVlY2guY29udGV4dFwiLCBfdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBcImFwcGxpY2F0aW9uL2pzb25cIiwgc3BlZWNoQ29udGV4dEpzb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlbmRBdWRpbyA9IGZ1bmN0aW9uIChhdWRpb1N0cmVhbU5vZGUpIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IEhvbWUtYmFrZWQgcHJvbWlzZXMgY3Jhc2ggaW9zIHNhZmFyaSBkdXJpbmcgdGhlIGludm9jYXRpb25cbiAgICAgICAgICAgIC8vIG9mIHRoZSBlcnJvciBjYWxsYmFjayBjaGFpbiAobG9va3MgbGlrZSB0aGUgcmVjdXJzaW9uIGlzIHdheSB0b28gZGVlcCwgYW5kXG4gICAgICAgICAgICAvLyBpdCBibG93cyB1cCB0aGUgc3RhY2spLiBUaGUgZm9sbG93aW5nIGNvbnN0cnVjdCBpcyBhIHN0b3AtZ2FwIHRoYXQgZG9lcyBub3RcbiAgICAgICAgICAgIC8vIGJ1YmJsZSB0aGUgZXJyb3IgdXAgdGhlIGNhbGxiYWNrIGNoYWluIGFuZCBoZW5jZSBjaXJjdW12ZW50cyB0aGlzIHByb2JsZW0uXG4gICAgICAgICAgICAvLyBUT0RPOiByZXdyaXRlIHdpdGggRVM2IHByb21pc2VzLlxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IEV4cG9ydHNfMi5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgLy8gVGhlIHRpbWUgd2UgbGFzdCBzZW50IGRhdGEgdG8gdGhlIHNlcnZpY2UuXG4gICAgICAgICAgICB2YXIgbmV4dFNlbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIHZhciBhdWRpb0Zvcm1hdCA9IF90aGlzLnByaXZBdWRpb1NvdXJjZS5mb3JtYXQ7XG4gICAgICAgICAgICAvLyBNYXggYW1vdW50IHRvIHNlbmQgYmVmb3JlIHdlIHN0YXJ0IHRvIHRocm90dGxlXG4gICAgICAgICAgICB2YXIgZmFzdExhbmVTaXplTXMgPSBfdGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KFwiU1BFRUNILVRyYW5zbWl0TGVuZ3RoQmVmb3JUaHJvdHRsZU1zXCIsIFwiNTAwMFwiKTtcbiAgICAgICAgICAgIHZhciBtYXhTZW5kVW50aHJvdHRsZWRCeXRlcyA9IGF1ZGlvRm9ybWF0LmF2Z0J5dGVzUGVyU2VjIC8gMTAwMCAqIHBhcnNlSW50KGZhc3RMYW5lU2l6ZU1zLCAxMCk7XG4gICAgICAgICAgICB2YXIgcmVhZEFuZFVwbG9hZEN5Y2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHNwZWVjaCBpcyBkb25lLCBzdG9wIHNlbmRpbmcgYXVkaW8uXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5wcml2SXNEaXNwb3NlZCAmJiAhX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzU3BlZWNoRW5kZWQgJiYgX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzUmVjb2duaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmV0Y2hDb25uZWN0aW9uKCkub24oZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvU3RyZWFtTm9kZS5yZWFkKCkub24oZnVuY3Rpb24gKGF1ZGlvU3RyZWFtQ2h1bmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBoYXZlIGEgbmV3IGF1ZGlvIGNodW5rIHRvIHVwbG9hZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzU3BlZWNoRW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgc2VydmljZSBhbHJlYWR5IHJlY29nbml6ZWQgYXVkaW8gZW5kIHRoZW4gZG9uJ3Qgc2VuZCBhbnkgbW9yZSBhdWRpb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXlsb2FkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kRGVsYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF1ZGlvU3RyZWFtQ2h1bmsuaXNFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmREZWxheSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkID0gYXVkaW9TdHJlYW1DaHVuay5idWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vbkF1ZGlvU2VudChwYXlsb2FkLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF4U2VuZFVudGhyb3R0bGVkQnl0ZXMgPj0gX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmJ5dGVzU2VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZERlbGF5ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmREZWxheSA9IE1hdGgubWF4KDAsIG5leHRTZW5kVGltZSAtIERhdGUubm93KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFyZSB3ZSByZWFkeSB0byBzZW5kLCBvciBuZWVkIHdlIGRlbGF5IG1vcmU/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0U2VuZFRpbWUgPSBEYXRlLm5vdygpICsgKHBheWxvYWQuYnl0ZUxlbmd0aCAqIDEwMDAgLyAoYXVkaW9Gb3JtYXQuYXZnQnl0ZXNQZXJTZWMgKiAyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVwbG9hZGVkID0gY29ubmVjdGlvbi5zZW5kKG5ldyBTcGVlY2hDb25uZWN0aW9uTWVzc2FnZV9JbnRlcm5hbF8xLlNwZWVjaENvbm5lY3Rpb25NZXNzYWdlKEV4cG9ydHNfMi5NZXNzYWdlVHlwZS5CaW5hcnksIFwiYXVkaW9cIiwgX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgbnVsbCwgcGF5bG9hZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWF1ZGlvU3RyZWFtQ2h1bmsuaXNFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZGVkLmNvbnRpbnVlV2l0aChmdW5jdGlvbiAoXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZ2FyZGxlc3Mgb2Ygc3VjY2VzcyBvciBmYWlsdXJlLCBzY2hlZHVsZSB0aGUgbmV4dCB1cGxvYWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHVuZGVybHlpbmcgY29ubmVjdGlvbiB3YXMgYnJva2VuLCB0aGUgbmV4dCBjeWNsZSB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGEgbmV3IGNvbm5lY3Rpb24gYW5kIHJlLXRyYW5zbWl0IG1pc3NpbmcgYXVkaW8gYXV0b21hdGljYWxseS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkQW5kVXBsb2FkQ3ljbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGF1ZGlvIHN0cmVhbSBoYXMgYmVlbiBjbG9zZWQsIG5vIG5lZWQgdG8gc2NoZWR1bGUgbmV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVhZC11cGxvYWQgY3ljbGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ub25TcGVlY2hFbmRlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHNlbmREZWxheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzU3BlZWNoRW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIHdoYXRldmVyIHJlYXNvbiwgUmVqZWN0IGlzIHVzZWQgdG8gcmVtb3ZlIHF1ZXVlIHN1YnNjcmliZXJzIGluc2lkZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgUXVldWUuRHJhaW5BbmREaXNwb3NlIGludm9rZWQgZnJvbSBEZXRhY2hBdWRpb05vZGUgZG93biBiZWxvdywgd2hpY2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVhbnMgdGhhdCBzb21ldGltZXMgdGhpbmdzIGNhbiBiZSByZWplY3RlZCBpbiBub3JtYWwgY2lyY3Vtc3RhbmNlcywgd2l0aG91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbnkgZXJyb3JzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRydWUpOyAvLyBUT0RPOiByZW1vdmUgdGhlIGFyZ3VtZW50LCBpdCdzIGlzIGNvbXBsZXRlbHkgbWVhbmluZ2xlc3MuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHJlamVjdCwgaWYgdGhlcmUgd2FzIGEgcHJvcGVyIGVycm9yLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZWFkQW5kVXBsb2FkQ3ljbGUoKTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghYXV0aGVudGljYXRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeHBvcnRzXzIuQXJndW1lbnROdWxsRXJyb3IoXCJhdXRoZW50aWNhdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbm5lY3Rpb25GYWN0b3J5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhwb3J0c18yLkFyZ3VtZW50TnVsbEVycm9yKFwiY29ubmVjdGlvbkZhY3RvcnlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhdWRpb1NvdXJjZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4cG9ydHNfMi5Bcmd1bWVudE51bGxFcnJvcihcImF1ZGlvU291cmNlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVjb2duaXplckNvbmZpZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4cG9ydHNfMi5Bcmd1bWVudE51bGxFcnJvcihcInJlY29nbml6ZXJDb25maWdcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcml2TXVzdFJlcG9ydEVuZE9mU3RyZWFtID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdkF1dGhlbnRpY2F0aW9uID0gYXV0aGVudGljYXRpb247XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25GYWN0b3J5ID0gY29ubmVjdGlvbkZhY3Rvcnk7XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvU291cmNlID0gYXVkaW9Tb3VyY2U7XG4gICAgICAgIHRoaXMucHJpdlJlY29nbml6ZXJDb25maWcgPSByZWNvZ25pemVyQ29uZmlnO1xuICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdlJlY29nbml6ZXIgPSByZWNvZ25pemVyO1xuICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbiA9IG5ldyBFeHBvcnRzXzQuUmVxdWVzdFNlc3Npb24odGhpcy5wcml2QXVkaW9Tb3VyY2UuaWQoKSk7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25FdmVudHMgPSBuZXcgRXhwb3J0c18yLkV2ZW50U291cmNlKCk7XG4gICAgICAgIHRoaXMucHJpdkR5bmFtaWNHcmFtbWFyID0gbmV3IEV4cG9ydHNfNC5EeW5hbWljR3JhbW1hckJ1aWxkZXIoKTtcbiAgICAgICAgdGhpcy5wcml2U3BlZWNoQ29udGV4dCA9IG5ldyBFeHBvcnRzXzQuU3BlZWNoQ29udGV4dCh0aGlzLnByaXZEeW5hbWljR3JhbW1hcik7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZXJ2aWNlUmVjb2duaXplckJhc2UucHJvdG90eXBlLCBcImF1ZGlvU291cmNlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Tb3VyY2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZXJ2aWNlUmVjb2duaXplckJhc2UucHJvdG90eXBlLCBcInNwZWVjaENvbnRleHRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hDb250ZXh0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2VydmljZVJlY29nbml6ZXJCYXNlLnByb3RvdHlwZSwgXCJkeW5hbWljR3JhbW1hclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkR5bmFtaWNHcmFtbWFyO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTZXJ2aWNlUmVjb2duaXplckJhc2UucHJvdG90eXBlLmlzRGlzcG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZJc0Rpc3Bvc2VkO1xuICAgIH07XG4gICAgU2VydmljZVJlY29nbml6ZXJCYXNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWd1cmF0aW9uUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ3VyYXRpb25Qcm9taXNlLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aChmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZGlzcG9zZShyZWFzb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZXJ2aWNlUmVjb2duaXplckJhc2UucHJvdG90eXBlLCBcImNvbm5lY3Rpb25FdmVudHNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uRXZlbnRzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2VydmljZVJlY29nbml6ZXJCYXNlLnByb3RvdHlwZSwgXCJyZWNvZ25pdGlvbk1vZGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZSZWNvZ25pemVyQ29uZmlnLnJlY29nbml0aW9uTW9kZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU2VydmljZVJlY29nbml6ZXJCYXNlLnByb3RvdHlwZS5yZWNvZ25pemUgPSBmdW5jdGlvbiAocmVjb01vZGUsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsQmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBDbGVhciB0aGUgZXhpc3RpbmcgY29uZmlndXJhdGlvbiBwcm9taXNlIHRvIGZvcmNlIGEgcmUtdHJhbnNtaXNzaW9uIG9mIGNvbmZpZyBhbmQgY29udGV4dC5cbiAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ3VyYXRpb25Qcm9taXNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5yZWNvZ25pdGlvbk1vZGUgPSByZWNvTW9kZTtcbiAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc3RhcnROZXdSZWNvZ25pdGlvbigpO1xuICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5saXN0ZW5Gb3JTZXJ2aWNlVGVsZW1ldHJ5KHRoaXMucHJpdkF1ZGlvU291cmNlLmV2ZW50cyk7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2aWNlLiBUaGUgcHJvbWlzZSB0aGlzIHdpbGwgY3JlYXRlIGlzIHN0b3JlZCBhbmQgd2lsbCBiZSB1c2VkIGJ5IGNvbmZpZ3VyZUNvbm5lY3Rpb24oKS5cbiAgICAgICAgdGhpcy5jb25uZWN0SW1wbCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5hdWRpb1NvdXJjZVxuICAgICAgICAgICAgLmF0dGFjaCh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5hdWRpb05vZGVJZClcbiAgICAgICAgICAgIC5jb250aW51ZVdpdGhQcm9taXNlKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHZhciBhdWRpb05vZGU7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jYW5jZWxSZWNvZ25pdGlvbkxvY2FsKEV4cG9ydHNfMy5DYW5jZWxsYXRpb25SZWFzb24uRXJyb3IsIEV4cG9ydHNfMy5DYW5jZWxsYXRpb25FcnJvckNvZGUuQ29ubmVjdGlvbkZhaWx1cmUsIHJlc3VsdC5lcnJvciwgc3VjY2Vzc0NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXhwb3J0c18yLlByb21pc2VIZWxwZXIuZnJvbUVycm9yKHJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdWRpb05vZGUgPSBuZXcgRXhwb3J0c18xLlJlcGxheWFibGVBdWRpb05vZGUocmVzdWx0LnJlc3VsdCwgX3RoaXMuYXVkaW9Tb3VyY2UuZm9ybWF0KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ub25BdWRpb1NvdXJjZUF0dGFjaENvbXBsZXRlZChhdWRpb05vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5hdWRpb1NvdXJjZS5kZXZpY2VJbmZvLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aFByb21pc2UoZnVuY3Rpb24gKGRldmljZUluZm8pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5TcGVlY2hTZXJ2aWNlQ29uZmlnLkNvbnRleHQuYXVkaW8gPSB7IHNvdXJjZTogZGV2aWNlSW5mbyB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jb25maWd1cmVDb25uZWN0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgLm9uKGZ1bmN0aW9uIChfKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXNzaW9uU3RhcnRFdmVudEFyZ3MgPSBuZXcgRXhwb3J0c18zLlNlc3Npb25FdmVudEFyZ3MoX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIV90aGlzLnByaXZSZWNvZ25pemVyLnNlc3Npb25TdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2UmVjb2duaXplci5zZXNzaW9uU3RhcnRlZChfdGhpcy5wcml2UmVjb2duaXplciwgc2Vzc2lvblN0YXJ0RXZlbnRBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVJldHJpZXZhbFByb21pc2UgPSBfdGhpcy5yZWNlaXZlTWVzc2FnZShzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbEJhY2spO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXVkaW9TZW5kUHJvbWlzZSA9IF90aGlzLnNlbmRBdWRpbyhhdWRpb05vZGUpO1xuICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgICAgICBhdWRpb1NlbmRQcm9taXNlLm9uKGZ1bmN0aW9uIChfKSB7IH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2FuY2VsUmVjb2duaXRpb25Mb2NhbChFeHBvcnRzXzMuQ2FuY2VsbGF0aW9uUmVhc29uLkVycm9yLCBFeHBvcnRzXzMuQ2FuY2VsbGF0aW9uRXJyb3JDb2RlLlJ1bnRpbWVFcnJvciwgZXJyb3IsIHN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29tcGxldGlvblByb21pc2UgPSBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci53aGVuQWxsKFttZXNzYWdlUmV0cmlldmFsUHJvbWlzZSwgYXVkaW9TZW5kUHJvbWlzZV0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcGxldGlvblByb21pc2Uub24oZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNhbmNlbFJlY29nbml0aW9uTG9jYWwoRXhwb3J0c18zLkNhbmNlbGxhdGlvblJlYXNvbi5FcnJvciwgRXhwb3J0c18zLkNhbmNlbGxhdGlvbkVycm9yQ29kZS5SdW50aW1lRXJyb3IsIGVycm9yLCBzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2FuY2VsUmVjb2duaXRpb25Mb2NhbChFeHBvcnRzXzMuQ2FuY2VsbGF0aW9uUmVhc29uLkVycm9yLCBFeHBvcnRzXzMuQ2FuY2VsbGF0aW9uRXJyb3JDb2RlLkNvbm5lY3Rpb25GYWlsdXJlLCBlcnJvciwgc3VjY2Vzc0NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9KS5jb250aW51ZVdpdGhQcm9taXNlKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRXhwb3J0c18yLlByb21pc2VIZWxwZXIuZnJvbUVycm9yKHJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRXhwb3J0c18yLlByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU2VydmljZVJlY29nbml6ZXJCYXNlLnByb3RvdHlwZS5zdG9wUmVjb2duaXppbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1JlY29nbml6aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vblN0b3BSZWNvZ25pemluZygpO1xuICAgICAgICAgICAgdGhpcy5zZW5kVGVsZW1ldHJ5RGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5hdWRpb1NvdXJjZS50dXJuT2ZmKCk7XG4gICAgICAgICAgICB0aGlzLnNlbmRGaW5hbEF1ZGlvKCk7XG4gICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlcnZpY2VSZWNvZ25pemVyQmFzZS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0SW1wbCgpLnJlc3VsdCgpO1xuICAgIH07XG4gICAgU2VydmljZVJlY29nbml6ZXJCYXNlLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNhbmNlbFJlY29nbml0aW9uTG9jYWwoRXhwb3J0c18zLkNhbmNlbGxhdGlvblJlYXNvbi5FcnJvciwgRXhwb3J0c18zLkNhbmNlbGxhdGlvbkVycm9yQ29kZS5Ob0Vycm9yLCBcIkRpc2Nvbm5lY3RpbmdcIiwgdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKHRoaXMucHJpdkNvbm5lY3Rpb25Qcm9taXNlLnJlc3VsdCgpLmlzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJpdkNvbm5lY3Rpb25Qcm9taXNlLnJlc3VsdCgpLmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uUHJvbWlzZS5yZXN1bHQoKS5yZXN1bHQuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Qcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Qcm9taXNlLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aChmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZGlzcG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIENhbmNlbHMgcmVjb2duaXRpb24uXG4gICAgU2VydmljZVJlY29nbml6ZXJCYXNlLnByb3RvdHlwZS5jYW5jZWxSZWNvZ25pdGlvbkxvY2FsID0gZnVuY3Rpb24gKGNhbmNlbGxhdGlvblJlYXNvbiwgZXJyb3JDb2RlLCBlcnJvciwgY2FuY2VsUmVjb0NhbGxiYWNrKSB7XG4gICAgICAgIGlmICghIXRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmlzUmVjb2duaXppbmcpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uU3RvcFJlY29nbml6aW5nKCk7XG4gICAgICAgICAgICB0aGlzLnNlbmRUZWxlbWV0cnlEYXRhKCk7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbFJlY29nbml0aW9uKHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBjYW5jZWxsYXRpb25SZWFzb24sIGVycm9yQ29kZSwgZXJyb3IsIGNhbmNlbFJlY29DYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEVzdGFibGlzaGVzIGEgd2Vic29ja2V0IGNvbm5lY3Rpb24gdG8gdGhlIGVuZCBwb2ludC5cbiAgICBTZXJ2aWNlUmVjb2duaXplckJhc2UucHJvdG90eXBlLmNvbm5lY3RJbXBsID0gZnVuY3Rpb24gKGlzVW5BdXRob3JpemVkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChpc1VuQXV0aG9yaXplZCA9PT0gdm9pZCAwKSB7IGlzVW5BdXRob3JpemVkID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKHRoaXMucHJpdkNvbm5lY3Rpb25Qcm9taXNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2Q29ubmVjdGlvblByb21pc2UucmVzdWx0KCkuaXNDb21wbGV0ZWQgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5wcml2Q29ubmVjdGlvblByb21pc2UucmVzdWx0KCkuaXNFcnJvclxuICAgICAgICAgICAgICAgICAgICB8fCB0aGlzLnByaXZDb25uZWN0aW9uUHJvbWlzZS5yZXN1bHQoKS5yZXN1bHQuc3RhdGUoKSA9PT0gRXhwb3J0c18yLkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbklkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZDb25uZWN0aW9uUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdEltcGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uUHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZBdXRoRmV0Y2hFdmVudElkID0gRXhwb3J0c18yLmNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbklkID0gRXhwb3J0c18yLmNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ub25QcmVDb25uZWN0aW9uU3RhcnQodGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCwgdGhpcy5wcml2Q29ubmVjdGlvbklkKTtcbiAgICAgICAgdmFyIGF1dGhQcm9taXNlID0gaXNVbkF1dGhvcml6ZWQgPyB0aGlzLnByaXZBdXRoZW50aWNhdGlvbi5mZXRjaE9uRXhwaXJ5KHRoaXMucHJpdkF1dGhGZXRjaEV2ZW50SWQpIDogdGhpcy5wcml2QXV0aGVudGljYXRpb24uZmV0Y2godGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCk7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Qcm9taXNlID0gYXV0aFByb21pc2VcbiAgICAgICAgICAgIC5jb250aW51ZVdpdGhQcm9taXNlKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuaXNFcnJvcikge1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vbkF1dGhDb21wbGV0ZWQodHJ1ZSwgcmVzdWx0LmVycm9yKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vbkF1dGhDb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBfdGhpcy5wcml2Q29ubmVjdGlvbkZhY3RvcnkuY3JlYXRlKF90aGlzLnByaXZSZWNvZ25pemVyQ29uZmlnLCByZXN1bHQucmVzdWx0LCBfdGhpcy5wcml2Q29ubmVjdGlvbklkKTtcbiAgICAgICAgICAgIF90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5saXN0ZW5Gb3JTZXJ2aWNlVGVsZW1ldHJ5KGNvbm5lY3Rpb24uZXZlbnRzKTtcbiAgICAgICAgICAgIC8vIEF0dGFjaCB0byB0aGUgdW5kZXJseWluZyBldmVudC4gTm8gbmVlZCB0byBob2xkIG9udG8gdGhlIGRldGFjaCBwb2ludGVycyBhcyBpbiB0aGUgZXZlbnQgdGhlIGNvbm5lY3Rpb24gZ29lcyBhd2F5LFxuICAgICAgICAgICAgLy8gaXQnbGwgc3RvcCBzZW5kaW5nIGV2ZW50cy5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24uZXZlbnRzLmF0dGFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb25uZWN0aW9uRXZlbnRzLm9uRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbi5vcGVuKCkub25TdWNjZXNzQ29udGludWVXaXRoUHJvbWlzZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vblByZUNvbm5lY3Rpb25TdGFydChfdGhpcy5wcml2QXV0aEZldGNoRXZlbnRJZCwgX3RoaXMucHJpdkNvbm5lY3Rpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vbkNvbm5lY3Rpb25Fc3RhYmxpc2hDb21wbGV0ZWQocmVzcG9uc2Uuc3RhdHVzQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MDMgJiYgIWlzVW5BdXRob3JpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jb25uZWN0SW1wbCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vbkNvbm5lY3Rpb25Fc3RhYmxpc2hDb21wbGV0ZWQocmVzcG9uc2Uuc3RhdHVzQ29kZSwgcmVzcG9uc2UucmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMi5Qcm9taXNlSGVscGVyLmZyb21FcnJvcihcIlVuYWJsZSB0byBjb250YWN0IHNlcnZlci4gU3RhdHVzQ29kZTogXCIgKyByZXNwb25zZS5zdGF0dXNDb2RlICsgXCIsIFwiICsgX3RoaXMucHJpdlJlY29nbml6ZXJDb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShFeHBvcnRzXzMuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludCkgKyBcIiBSZWFzb246IFwiICsgcmVzcG9uc2UucmVhc29uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZDb25uZWN0aW9uUHJvbWlzZTtcbiAgICB9O1xuICAgIC8vIFRha2VzIGFuIGVzdGFibGlzaGVkIHdlYnNvY2tldCBjb25uZWN0aW9uIHRvIHRoZSBlbmRwb2ludCBhbmQgc2VuZHMgc3BlZWNoIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uXG4gICAgU2VydmljZVJlY29nbml6ZXJCYXNlLnByb3RvdHlwZS5jb25maWd1cmVDb25uZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ3VyYXRpb25Qcm9taXNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ3VyYXRpb25Qcm9taXNlLnJlc3VsdCgpLmlzQ29tcGxldGVkICYmXG4gICAgICAgICAgICAgICAgKHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWd1cmF0aW9uUHJvbWlzZS5yZXN1bHQoKS5pc0Vycm9yXG4gICAgICAgICAgICAgICAgICAgIHx8IHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWd1cmF0aW9uUHJvbWlzZS5yZXN1bHQoKS5yZXN1bHQuc3RhdGUoKSA9PT0gRXhwb3J0c18yLkNvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ3VyYXRpb25Qcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWd1cmVDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2Q29ubmVjdGlvbkNvbmZpZ3VyYXRpb25Qcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWd1cmF0aW9uUHJvbWlzZSA9IHRoaXMuY29ubmVjdEltcGwoKS5vblN1Y2Nlc3NDb250aW51ZVdpdGhQcm9taXNlKGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuc2VuZFNwZWVjaFNlcnZpY2VDb25maWcoY29ubmVjdGlvbiwgX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLCBfdGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5TcGVlY2hTZXJ2aWNlQ29uZmlnLnNlcmlhbGl6ZSgpKVxuICAgICAgICAgICAgICAgIC5vblN1Y2Nlc3NDb250aW51ZVdpdGhQcm9taXNlKGZ1bmN0aW9uIChfKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNlbmRTcGVlY2hDb250ZXh0KGNvbm5lY3Rpb24pLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aChmdW5jdGlvbiAoXykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdkNvbm5lY3Rpb25Db25maWd1cmF0aW9uUHJvbWlzZTtcbiAgICB9O1xuICAgIFNlcnZpY2VSZWNvZ25pemVyQmFzZS5wcm90b3R5cGUuc2VuZEZpbmFsQXVkaW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBFeHBvcnRzXzIuRGVmZXJyZWQoKTtcbiAgICAgICAgdGhpcy5mZXRjaENvbm5lY3Rpb24oKS5vbihmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kKG5ldyBTcGVlY2hDb25uZWN0aW9uTWVzc2FnZV9JbnRlcm5hbF8xLlNwZWVjaENvbm5lY3Rpb25NZXNzYWdlKEV4cG9ydHNfMi5NZXNzYWdlVHlwZS5CaW5hcnksIFwiYXVkaW9cIiwgX3RoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgbnVsbCwgbnVsbCkpLm9uKGZ1bmN0aW9uIChfKSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICB9O1xuICAgIFNlcnZpY2VSZWNvZ25pemVyQmFzZS50ZWxlbWV0cnlEYXRhRW5hYmxlZCA9IHRydWU7XG4gICAgcmV0dXJuIFNlcnZpY2VSZWNvZ25pemVyQmFzZTtcbn0oKSk7XG5leHBvcnRzLlNlcnZpY2VSZWNvZ25pemVyQmFzZSA9IFNlcnZpY2VSZWNvZ25pemVyQmFzZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VydmljZVJlY29nbml6ZXJCYXNlLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0V4cG9ydHNcIik7XG52YXIgUmVjb2duaXRpb25FdmVudHNfMSA9IHJlcXVpcmUoXCIuL1JlY29nbml0aW9uRXZlbnRzXCIpO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgU2VydmljZVRlbGVtZXRyeUxpc3RlbmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lcihyZXF1ZXN0SWQsIGF1ZGlvU291cmNlSWQsIGF1ZGlvTm9kZUlkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucHJpdklzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcml2TGlzdGVuaW5nVHJpZ2dlck1ldHJpYyA9IG51bGw7XG4gICAgICAgIHRoaXMucHJpdk1pY01ldHJpYyA9IG51bGw7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25Fc3RhYmxpc2hNZXRyaWMgPSBudWxsO1xuICAgICAgICB0aGlzLm9uRXZlbnQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZJc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBSZWNvZ25pdGlvbkV2ZW50c18xLlJlY29nbml0aW9uVHJpZ2dlcmVkRXZlbnQgJiYgZS5yZXF1ZXN0SWQgPT09IF90aGlzLnByaXZSZXF1ZXN0SWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2TGlzdGVuaW5nVHJpZ2dlck1ldHJpYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgRW5kOiBlLmV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICAgICAgTmFtZTogXCJMaXN0ZW5pbmdUcmlnZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIFN0YXJ0OiBlLmV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFeHBvcnRzXzEuQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnQgJiYgZS5hdWRpb1NvdXJjZUlkID09PSBfdGhpcy5wcml2QXVkaW9Tb3VyY2VJZCAmJiBlLmF1ZGlvTm9kZUlkID09PSBfdGhpcy5wcml2QXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2TWljU3RhcnRUaW1lID0gZS5ldmVudFRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEV4cG9ydHNfMS5BdWRpb1N0cmVhbU5vZGVBdHRhY2hlZEV2ZW50ICYmIGUuYXVkaW9Tb3VyY2VJZCA9PT0gX3RoaXMucHJpdkF1ZGlvU291cmNlSWQgJiYgZS5hdWRpb05vZGVJZCA9PT0gX3RoaXMucHJpdkF1ZGlvTm9kZUlkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdk1pY1N0YXJ0VGltZSA9IGUuZXZlbnRUaW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFeHBvcnRzXzEuQXVkaW9Tb3VyY2VFcnJvckV2ZW50ICYmIGUuYXVkaW9Tb3VyY2VJZCA9PT0gX3RoaXMucHJpdkF1ZGlvU291cmNlSWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnByaXZNaWNNZXRyaWMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdk1pY01ldHJpYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEVuZDogZS5ldmVudFRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBFcnJvcjogZS5lcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIE5hbWU6IFwiTWljcm9waG9uZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnQ6IF90aGlzLnByaXZNaWNTdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFeHBvcnRzXzEuQXVkaW9TdHJlYW1Ob2RlRXJyb3JFdmVudCAmJiBlLmF1ZGlvU291cmNlSWQgPT09IF90aGlzLnByaXZBdWRpb1NvdXJjZUlkICYmIGUuYXVkaW9Ob2RlSWQgPT09IF90aGlzLnByaXZBdWRpb05vZGVJZCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMucHJpdk1pY01ldHJpYykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2TWljTWV0cmljID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgRW5kOiBlLmV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEVycm9yOiBlLmVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgTmFtZTogXCJNaWNyb3Bob25lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGFydDogX3RoaXMucHJpdk1pY1N0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEV4cG9ydHNfMS5BdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50ICYmIGUuYXVkaW9Tb3VyY2VJZCA9PT0gX3RoaXMucHJpdkF1ZGlvU291cmNlSWQgJiYgZS5hdWRpb05vZGVJZCA9PT0gX3RoaXMucHJpdkF1ZGlvTm9kZUlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5wcml2TWljTWV0cmljKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZNaWNNZXRyaWMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBFbmQ6IGUuZXZlbnRUaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgTmFtZTogXCJNaWNyb3Bob25lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGFydDogX3RoaXMucHJpdk1pY1N0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFJlY29nbml0aW9uRXZlbnRzXzEuQ29ubmVjdGluZ1RvU2VydmljZUV2ZW50ICYmIGUucmVxdWVzdElkID09PSBfdGhpcy5wcml2UmVxdWVzdElkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdkNvbm5lY3Rpb25JZCA9IGUuc2Vzc2lvbklkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFeHBvcnRzXzEuQ29ubmVjdGlvblN0YXJ0RXZlbnQgJiYgZS5jb25uZWN0aW9uSWQgPT09IF90aGlzLnByaXZDb25uZWN0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2Q29ubmVjdGlvblN0YXJ0VGltZSA9IGUuZXZlbnRUaW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFeHBvcnRzXzEuQ29ubmVjdGlvbkVzdGFibGlzaGVkRXZlbnQgJiYgZS5jb25uZWN0aW9uSWQgPT09IF90aGlzLnByaXZDb25uZWN0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoTWV0cmljKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoTWV0cmljID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgRW5kOiBlLmV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIElkOiBfdGhpcy5wcml2Q29ubmVjdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgTmFtZTogXCJDb25uZWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGFydDogX3RoaXMucHJpdkNvbm5lY3Rpb25TdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFeHBvcnRzXzEuQ29ubmVjdGlvbkVzdGFibGlzaEVycm9yRXZlbnQgJiYgZS5jb25uZWN0aW9uSWQgPT09IF90aGlzLnByaXZDb25uZWN0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoTWV0cmljKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoTWV0cmljID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgRW5kOiBlLmV2ZW50VGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEVycm9yOiBfdGhpcy5nZXRDb25uZWN0aW9uRXJyb3IoZS5zdGF0dXNDb2RlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIElkOiBfdGhpcy5wcml2Q29ubmVjdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgTmFtZTogXCJDb25uZWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGFydDogX3RoaXMucHJpdkNvbm5lY3Rpb25TdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFeHBvcnRzXzEuQ29ubmVjdGlvbk1lc3NhZ2VSZWNlaXZlZEV2ZW50ICYmIGUuY29ubmVjdGlvbklkID09PSBfdGhpcy5wcml2Q29ubmVjdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUubWVzc2FnZSAmJiBlLm1lc3NhZ2UuaGVhZGVycyAmJiBlLm1lc3NhZ2UuaGVhZGVycy5wYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMucHJpdlJlY2VpdmVkTWVzc2FnZXNbZS5tZXNzYWdlLmhlYWRlcnMucGF0aF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZWNlaXZlZE1lc3NhZ2VzW2UubWVzc2FnZS5oZWFkZXJzLnBhdGhdID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdlJlY2VpdmVkTWVzc2FnZXNbZS5tZXNzYWdlLmhlYWRlcnMucGF0aF0ucHVzaChlLm5ldHdvcmtSZWNlaXZlZFRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRUZWxlbWV0cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbWV0cmljcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZMaXN0ZW5pbmdUcmlnZ2VyTWV0cmljKSB7XG4gICAgICAgICAgICAgICAgbWV0cmljcy5wdXNoKF90aGlzLnByaXZMaXN0ZW5pbmdUcmlnZ2VyTWV0cmljKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5wcml2TWljTWV0cmljKSB7XG4gICAgICAgICAgICAgICAgbWV0cmljcy5wdXNoKF90aGlzLnByaXZNaWNNZXRyaWMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoTWV0cmljKSB7XG4gICAgICAgICAgICAgICAgbWV0cmljcy5wdXNoKF90aGlzLnByaXZDb25uZWN0aW9uRXN0YWJsaXNoTWV0cmljKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5wcml2UGhyYXNlTGF0ZW5jaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBtZXRyaWNzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBQaHJhc2VMYXRlbmN5TXM6IF90aGlzLnByaXZQaHJhc2VMYXRlbmNpZXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJpdkh5cG90aGVzaXNMYXRlbmNpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG1ldHJpY3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIEZpcnN0SHlwb3RoZXNpc0xhdGVuY3lNczogX3RoaXMucHJpdkh5cG90aGVzaXNMYXRlbmNpZXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGVsZW1ldHJ5ID0ge1xuICAgICAgICAgICAgICAgIE1ldHJpY3M6IG1ldHJpY3MsXG4gICAgICAgICAgICAgICAgUmVjZWl2ZWRNZXNzYWdlczogX3RoaXMucHJpdlJlY2VpdmVkTWVzc2FnZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnN0cmluZ2lmeSh0ZWxlbWV0cnkpO1xuICAgICAgICAgICAgLy8gV2UgZG9udCB3YW50IHRvIHNlbmQgdGhlIHNhbWUgdGVsZW1ldHJ5IGFnYWluLiBTbyBjbGVhbiB0aG9zZSBvdXQuXG4gICAgICAgICAgICBfdGhpcy5wcml2UmVjZWl2ZWRNZXNzYWdlcyA9IHt9O1xuICAgICAgICAgICAgX3RoaXMucHJpdkxpc3RlbmluZ1RyaWdnZXJNZXRyaWMgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMucHJpdk1pY01ldHJpYyA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaE1ldHJpYyA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5wcml2UGhyYXNlTGF0ZW5jaWVzID0gW107XG4gICAgICAgICAgICBfdGhpcy5wcml2SHlwb3RoZXNpc0xhdGVuY2llcyA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIGpzb247XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnByaXZJc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRDb25uZWN0aW9uRXJyb3IgPSBmdW5jdGlvbiAoc3RhdHVzQ29kZSkge1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIC0tIFdlYnNvY2tldCBzdGF0dXMgY29kZXMgLS1cbiAgICAgICAgICAgIE5vcm1hbENsb3N1cmUgPSAxMDAwLFxuICAgICAgICAgICAgRW5kcG9pbnRVbmF2YWlsYWJsZSA9IDEwMDEsXG4gICAgICAgICAgICBQcm90b2NvbEVycm9yID0gMTAwMixcbiAgICAgICAgICAgIEludmFsaWRNZXNzYWdlVHlwZSA9IDEwMDMsXG4gICAgICAgICAgICBFbXB0eSA9IDEwMDUsXG4gICAgICAgICAgICBJbnZhbGlkUGF5bG9hZERhdGEgPSAxMDA3LFxuICAgICAgICAgICAgUG9saWN5VmlvbGF0aW9uID0gMTAwOCxcbiAgICAgICAgICAgIE1lc3NhZ2VUb29CaWcgPSAxMDA5LFxuICAgICAgICAgICAgTWFuZGF0b3J5RXh0ZW5zaW9uID0gMTAxMCxcbiAgICAgICAgICAgIEludGVybmFsU2VydmVyRXJyb3IgPSAxMDExXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgc3dpdGNoIChzdGF0dXNDb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0MDA6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDAyOlxuICAgICAgICAgICAgICAgIGNhc2UgMTAwMzpcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDU6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDA3OlxuICAgICAgICAgICAgICAgIGNhc2UgMTAwODpcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDk6IHJldHVybiBcIkJhZFJlcXVlc3RcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDQwMTogcmV0dXJuIFwiVW5hdXRob3JpemVkXCI7XG4gICAgICAgICAgICAgICAgY2FzZSA0MDM6IHJldHVybiBcIkZvcmJpZGRlblwiO1xuICAgICAgICAgICAgICAgIGNhc2UgNTAzOlxuICAgICAgICAgICAgICAgIGNhc2UgMTAwMTogcmV0dXJuIFwiU2VydmVyVW5hdmFpbGFibGVcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDUwMDpcbiAgICAgICAgICAgICAgICBjYXNlIDEwMTE6IHJldHVybiBcIlNlcnZlckVycm9yXCI7XG4gICAgICAgICAgICAgICAgY2FzZSA0MDg6XG4gICAgICAgICAgICAgICAgY2FzZSA1MDQ6IHJldHVybiBcIlRpbWVvdXRcIjtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gXCJzdGF0dXNjb2RlOlwiICsgc3RhdHVzQ29kZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByaXZSZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvU291cmNlSWQgPSBhdWRpb1NvdXJjZUlkO1xuICAgICAgICB0aGlzLnByaXZBdWRpb05vZGVJZCA9IGF1ZGlvTm9kZUlkO1xuICAgICAgICB0aGlzLnByaXZSZWNlaXZlZE1lc3NhZ2VzID0ge307XG4gICAgICAgIHRoaXMucHJpdlBocmFzZUxhdGVuY2llcyA9IFtdO1xuICAgICAgICB0aGlzLnByaXZIeXBvdGhlc2lzTGF0ZW5jaWVzID0gW107XG4gICAgfVxuICAgIFNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lci5wcm90b3R5cGUucGhyYXNlUmVjZWl2ZWQgPSBmdW5jdGlvbiAoYXVkaW9SZWNlaXZlZFRpbWUpIHtcbiAgICAgICAgaWYgKGF1ZGlvUmVjZWl2ZWRUaW1lID4gMCkgeyAvLyAwIGluZGljYXRlcyB0aGUgdGltZSBpcyB1bmtub3duLiBEcm9wIGl0LlxuICAgICAgICAgICAgdGhpcy5wcml2UGhyYXNlTGF0ZW5jaWVzLnB1c2goRGF0ZS5ub3coKSAtIGF1ZGlvUmVjZWl2ZWRUaW1lKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VydmljZVRlbGVtZXRyeUxpc3RlbmVyLnByb3RvdHlwZS5oeXBvdGhlc2lzUmVjZWl2ZWQgPSBmdW5jdGlvbiAoYXVkaW9SZWNlaXZlZFRpbWUpIHtcbiAgICAgICAgaWYgKGF1ZGlvUmVjZWl2ZWRUaW1lID4gMCkgeyAvLyAwIGluZGljYXRlcyB0aGUgdGltZSBpcyB1bmtub3duLiBEcm9wIGl0LlxuICAgICAgICAgICAgdGhpcy5wcml2SHlwb3RoZXNpc0xhdGVuY2llcy5wdXNoKERhdGUubm93KCkgLSBhdWRpb1JlY2VpdmVkVGltZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIucHJvdG90eXBlLCBcImhhc1RlbGVtZXRyeVwiLCB7XG4gICAgICAgIC8vIERldGVybWluZXMgaWYgdGhlcmUgYXJlIGFueSB0ZWxlbWV0cnkgZXZlbnRzIHRvIHNlbmQgdG8gdGhlIHNlcnZpY2UuXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIChPYmplY3Qua2V5cyh0aGlzLnByaXZSZWNlaXZlZE1lc3NhZ2VzKS5sZW5ndGggIT09IDAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZMaXN0ZW5pbmdUcmlnZ2VyTWV0cmljICE9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2TWljTWV0cmljICE9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2Q29ubmVjdGlvbkVzdGFibGlzaE1ldHJpYyAhPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIHRoaXMucHJpdlBocmFzZUxhdGVuY2llcy5sZW5ndGggIT09IDAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZIeXBvdGhlc2lzTGF0ZW5jaWVzLmxlbmd0aCAhPT0gMCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXI7XG59KCkpO1xuZXhwb3J0cy5TZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXIgPSBTZXJ2aWNlVGVsZW1ldHJ5TGlzdGVuZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlcnZpY2VUZWxlbWV0cnlMaXN0ZW5lci5JbnRlcm5hbC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi5icm93c2VyL0V4cG9ydHNcIik7XG52YXIgRXhwb3J0c18yID0gcmVxdWlyZShcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiKTtcbnZhciBFeHBvcnRzXzMgPSByZXF1aXJlKFwiLi4vc2RrL0V4cG9ydHNcIik7XG52YXIgRXhwb3J0c180ID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbnZhciBRdWVyeVBhcmFtZXRlck5hbWVzXzEgPSByZXF1aXJlKFwiLi9RdWVyeVBhcmFtZXRlck5hbWVzXCIpO1xudmFyIFNwZWVjaENvbm5lY3Rpb25GYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNwZWVjaENvbm5lY3Rpb25GYWN0b3J5KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmludGVyYWN0aXZlUmVsYXRpdmVVcmkgPSBcIi9zcGVlY2gvcmVjb2duaXRpb24vaW50ZXJhY3RpdmUvY29nbml0aXZlc2VydmljZXMvdjFcIjtcbiAgICAgICAgdGhpcy5jb252ZXJzYXRpb25SZWxhdGl2ZVVyaSA9IFwiL3NwZWVjaC9yZWNvZ25pdGlvbi9jb252ZXJzYXRpb24vY29nbml0aXZlc2VydmljZXMvdjFcIjtcbiAgICAgICAgdGhpcy5kaWN0YXRpb25SZWxhdGl2ZVVyaSA9IFwiL3NwZWVjaC9yZWNvZ25pdGlvbi9kaWN0YXRpb24vY29nbml0aXZlc2VydmljZXMvdjFcIjtcbiAgICAgICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbiAoY29uZmlnLCBhdXRoSW5mbywgY29ubmVjdGlvbklkKSB7XG4gICAgICAgICAgICB2YXIgZW5kcG9pbnQgPSBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShFeHBvcnRzXzMuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHZhciBxdWVyeVBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgdmFyIGVuZHBvaW50SWQgPSBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShFeHBvcnRzXzMuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludElkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgdmFyIGxhbmd1YWdlID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoRXhwb3J0c18zLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgaWYgKGVuZHBvaW50SWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVuZHBvaW50IHx8IGVuZHBvaW50LnNlYXJjaChRdWVyeVBhcmFtZXRlck5hbWVzXzEuUXVlcnlQYXJhbWV0ZXJOYW1lcy5EZXBsb3ltZW50SWRQYXJhbU5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtc1tRdWVyeVBhcmFtZXRlck5hbWVzXzEuUXVlcnlQYXJhbWV0ZXJOYW1lcy5EZXBsb3ltZW50SWRQYXJhbU5hbWVdID0gZW5kcG9pbnRJZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSkge1xuICAgICAgICAgICAgICAgIGlmICghZW5kcG9pbnQgfHwgZW5kcG9pbnQuc2VhcmNoKFF1ZXJ5UGFyYW1ldGVyTmFtZXNfMS5RdWVyeVBhcmFtZXRlck5hbWVzLkxhbmd1YWdlUGFyYW1OYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbXNbUXVlcnlQYXJhbWV0ZXJOYW1lc18xLlF1ZXJ5UGFyYW1ldGVyTmFtZXMuTGFuZ3VhZ2VQYXJhbU5hbWVdID0gbGFuZ3VhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFlbmRwb2ludCB8fCBlbmRwb2ludC5zZWFyY2goUXVlcnlQYXJhbWV0ZXJOYW1lc18xLlF1ZXJ5UGFyYW1ldGVyTmFtZXMuRm9ybWF0UGFyYW1OYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtc1tRdWVyeVBhcmFtZXRlck5hbWVzXzEuUXVlcnlQYXJhbWV0ZXJOYW1lcy5Gb3JtYXRQYXJhbU5hbWVdID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLk91dHB1dEZvcm1hdFByb3BlcnR5TmFtZSwgRXhwb3J0c18zLk91dHB1dEZvcm1hdFtFeHBvcnRzXzMuT3V0cHV0Rm9ybWF0LlNpbXBsZV0pLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWVuZHBvaW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZ2lvbiA9IGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KEV4cG9ydHNfMy5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbiwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB2YXIgaG9zdCA9IFwid3NzOi8vXCIgKyByZWdpb24gKyBcIi5zdHQuc3BlZWNoLm1pY3Jvc29mdC5jb21cIjtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvbmZpZy5yZWNvZ25pdGlvbk1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFeHBvcnRzXzQuUmVjb2duaXRpb25Nb2RlLkNvbnZlcnNhdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50ID0gaG9zdCArIF90aGlzLmNvbnZlcnNhdGlvblJlbGF0aXZlVXJpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRXhwb3J0c180LlJlY29nbml0aW9uTW9kZS5EaWN0YXRpb246XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludCA9IGhvc3QgKyBfdGhpcy5kaWN0YXRpb25SZWxhdGl2ZVVyaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQgPSBob3N0ICsgX3RoaXMuaW50ZXJhY3RpdmVSZWxhdGl2ZVVyaTsgLy8gZGVmYXVsdCBpcyBpbnRlcmFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgIGhlYWRlcnNbYXV0aEluZm8uaGVhZGVyTmFtZV0gPSBhdXRoSW5mby50b2tlbjtcbiAgICAgICAgICAgIGhlYWRlcnNbUXVlcnlQYXJhbWV0ZXJOYW1lc18xLlF1ZXJ5UGFyYW1ldGVyTmFtZXMuQ29ubmVjdGlvbklkSGVhZGVyXSA9IGNvbm5lY3Rpb25JZDtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXhwb3J0c18xLldlYnNvY2tldENvbm5lY3Rpb24oZW5kcG9pbnQsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJzLCBuZXcgRXhwb3J0c180LldlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIoKSwgRXhwb3J0c18xLlByb3h5SW5mby5mcm9tUmVjb2duaXplckNvbmZpZyhjb25maWcpLCBjb25uZWN0aW9uSWQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gU3BlZWNoQ29ubmVjdGlvbkZhY3Rvcnk7XG59KCkpO1xuZXhwb3J0cy5TcGVlY2hDb25uZWN0aW9uRmFjdG9yeSA9IFNwZWVjaENvbm5lY3Rpb25GYWN0b3J5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGVlY2hDb25uZWN0aW9uRmFjdG9yeS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0V4cG9ydHNcIik7XG52YXIgUGF0aEhlYWRlck5hbWUgPSBcInBhdGhcIjtcbnZhciBDb250ZW50VHlwZUhlYWRlck5hbWUgPSBcImNvbnRlbnQtdHlwZVwiO1xudmFyIFJlcXVlc3RJZEhlYWRlck5hbWUgPSBcIngtcmVxdWVzdGlkXCI7XG52YXIgUmVxdWVzdFRpbWVzdGFtcEhlYWRlck5hbWUgPSBcIngtdGltZXN0YW1wXCI7XG52YXIgU3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlKG1lc3NhZ2VUeXBlLCBwYXRoLCByZXF1ZXN0SWQsIGNvbnRlbnRUeXBlLCBib2R5LCBhZGRpdGlvbmFsSGVhZGVycywgaWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCFwYXRoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhwb3J0c18xLkFyZ3VtZW50TnVsbEVycm9yKFwicGF0aFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlcXVlc3RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4cG9ydHNfMS5Bcmd1bWVudE51bGxFcnJvcihcInJlcXVlc3RJZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xuICAgICAgICBoZWFkZXJzW1BhdGhIZWFkZXJOYW1lXSA9IHBhdGg7XG4gICAgICAgIGhlYWRlcnNbUmVxdWVzdElkSGVhZGVyTmFtZV0gPSByZXF1ZXN0SWQ7XG4gICAgICAgIGhlYWRlcnNbUmVxdWVzdFRpbWVzdGFtcEhlYWRlck5hbWVdID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICBpZiAoY29udGVudFR5cGUpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbQ29udGVudFR5cGVIZWFkZXJOYW1lXSA9IGNvbnRlbnRUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhZGRpdGlvbmFsSGVhZGVycykge1xuICAgICAgICAgICAgZm9yICh2YXIgaGVhZGVyTmFtZSBpbiBhZGRpdGlvbmFsSGVhZGVycykge1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbaGVhZGVyTmFtZV0gPSBhZGRpdGlvbmFsSGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2VUeXBlLCBib2R5LCBoZWFkZXJzLCBpZCkgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZVR5cGUsIGJvZHksIGhlYWRlcnMpIHx8IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMucHJpdlBhdGggPSBwYXRoO1xuICAgICAgICBfdGhpcy5wcml2UmVxdWVzdElkID0gcmVxdWVzdElkO1xuICAgICAgICBfdGhpcy5wcml2Q29udGVudFR5cGUgPSBjb250ZW50VHlwZTtcbiAgICAgICAgX3RoaXMucHJpdkFkZGl0aW9uYWxIZWFkZXJzID0gYWRkaXRpb25hbEhlYWRlcnM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UGF0aDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlLnByb3RvdHlwZSwgXCJyZXF1ZXN0SWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZSZXF1ZXN0SWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGVlY2hDb25uZWN0aW9uTWVzc2FnZS5wcm90b3R5cGUsIFwiY29udGVudFR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZDb250ZW50VHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlLnByb3RvdHlwZSwgXCJhZGRpdGlvbmFsSGVhZGVyc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkFkZGl0aW9uYWxIZWFkZXJzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTcGVlY2hDb25uZWN0aW9uTWVzc2FnZS5mcm9tQ29ubmVjdGlvbk1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgcGF0aCA9IG51bGw7XG4gICAgICAgIHZhciByZXF1ZXN0SWQgPSBudWxsO1xuICAgICAgICB2YXIgY29udGVudFR5cGUgPSBudWxsO1xuICAgICAgICB2YXIgcmVxdWVzdFRpbWVzdGFtcCA9IG51bGw7XG4gICAgICAgIHZhciBhZGRpdGlvbmFsSGVhZGVycyA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZS5oZWFkZXJzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBoZWFkZXJOYW1lIGluIG1lc3NhZ2UuaGVhZGVycykge1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFBhdGhIZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBtZXNzYWdlLmhlYWRlcnNbaGVhZGVyTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpID09PSBSZXF1ZXN0SWRIZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZCA9IG1lc3NhZ2UuaGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFJlcXVlc3RUaW1lc3RhbXBIZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RUaW1lc3RhbXAgPSBtZXNzYWdlLmhlYWRlcnNbaGVhZGVyTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpID09PSBDb250ZW50VHlwZUhlYWRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGUgPSBtZXNzYWdlLmhlYWRlcnNbaGVhZGVyTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsSGVhZGVyc1toZWFkZXJOYW1lXSA9IG1lc3NhZ2UuaGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlKG1lc3NhZ2UubWVzc2FnZVR5cGUsIHBhdGgsIHJlcXVlc3RJZCwgY29udGVudFR5cGUsIG1lc3NhZ2UuYm9keSwgYWRkaXRpb25hbEhlYWRlcnMsIG1lc3NhZ2UuaWQpO1xuICAgIH07XG4gICAgcmV0dXJuIFNwZWVjaENvbm5lY3Rpb25NZXNzYWdlO1xufShFeHBvcnRzXzEuQ29ubmVjdGlvbk1lc3NhZ2UpKTtcbmV4cG9ydHMuU3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2UgPSBTcGVlY2hDb25uZWN0aW9uTWVzc2FnZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoQ29ubmVjdGlvbk1lc3NhZ2UuSW50ZXJuYWwuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBKU09OIHVzZWQgaW4gdGhlIHNwZWVjaC5jb250ZXh0IG1lc3NhZ2Ugc2VudCB0byB0aGUgc3BlZWNoIHNlcnZpY2UuXG4gKiBUaGUgZHluYW1pYyBncmFtbWFyIGlzIGFsd2F5cyByZWZyZXNoZWQgZnJvbSB0aGUgZW5jYXBzdWxhdGVkIGR5bmFtaWMgZ3JhbW1hciBvYmplY3QuXG4gKi9cbnZhciBTcGVlY2hDb250ZXh0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNwZWVjaENvbnRleHQoZHluYW1pY0dyYW1tYXIpIHtcbiAgICAgICAgdGhpcy5wcml2Q29udGV4dCA9IHt9O1xuICAgICAgICB0aGlzLnByaXZEeW5hbWljR3JhbW1hciA9IGR5bmFtaWNHcmFtbWFyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgc2VjdGlvbiB0byB0aGUgc3BlZWNoLmNvbnRleHQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBzZWN0aW9uTmFtZSBOYW1lIG9mIHRoZSBzZWN0aW9uIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgSlNPTiBzZXJpYWxpemVhYmxlIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHZhbHVlLlxuICAgICAqL1xuICAgIFNwZWVjaENvbnRleHQucHJvdG90eXBlLnNldFNlY3Rpb24gPSBmdW5jdGlvbiAoc2VjdGlvbk5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJpdkNvbnRleHRbc2VjdGlvbk5hbWVdID0gdmFsdWU7XG4gICAgfTtcbiAgICBTcGVlY2hDb250ZXh0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZ2kgPSB0aGlzLnByaXZEeW5hbWljR3JhbW1hci5nZW5lcmF0ZUdyYW1tYXJPYmplY3QoKTtcbiAgICAgICAgdGhpcy5zZXRTZWN0aW9uKFwiZGdpXCIsIGRnaSk7XG4gICAgICAgIHZhciByZXQgPSBKU09OLnN0cmluZ2lmeSh0aGlzLnByaXZDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIHJldHVybiBTcGVlY2hDb250ZXh0O1xufSgpKTtcbmV4cG9ydHMuU3BlZWNoQ29udGV4dCA9IFNwZWVjaENvbnRleHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwZWVjaENvbnRleHQuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uL3Nkay9FeHBvcnRzXCIpO1xudmFyIEV4cG9ydHNfMiA9IHJlcXVpcmUoXCIuL0V4cG9ydHNcIik7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBTcGVlY2hTZXJ2aWNlUmVjb2duaXplciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3BlZWNoU2VydmljZVJlY29nbml6ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3BlZWNoU2VydmljZVJlY29nbml6ZXIoYXV0aGVudGljYXRpb24sIGNvbm5lY3Rpb25GYWN0b3J5LCBhdWRpb1NvdXJjZSwgcmVjb2duaXplckNvbmZpZywgc3BlZWNoUmVjb2duaXplcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvU291cmNlLCByZWNvZ25pemVyQ29uZmlnLCBzcGVlY2hSZWNvZ25pemVyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcml2U3BlZWNoUmVjb2duaXplciA9IHNwZWVjaFJlY29nbml6ZXI7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3BlZWNoU2VydmljZVJlY29nbml6ZXIucHJvdG90eXBlLnByb2Nlc3NUeXBlU3BlY2lmaWNNZXNzYWdlcyA9IGZ1bmN0aW9uIChjb25uZWN0aW9uTWVzc2FnZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxCYWNrKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHZhciByZXN1bHRQcm9wcyA9IG5ldyBFeHBvcnRzXzEuUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgICAgIHJlc3VsdFByb3BzLnNldFByb3BlcnR5KEV4cG9ydHNfMS5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VSZXNwb25zZV9Kc29uUmVzdWx0LCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSk7XG4gICAgICAgIHN3aXRjaCAoY29ubmVjdGlvbk1lc3NhZ2UucGF0aC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBjYXNlIFwic3BlZWNoLmh5cG90aGVzaXNcIjpcbiAgICAgICAgICAgICAgICB2YXIgaHlwb3RoZXNpcyA9IEV4cG9ydHNfMi5TcGVlY2hIeXBvdGhlc2lzLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gaHlwb3RoZXNpcy5PZmZzZXQgKyB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0O1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBFeHBvcnRzXzEuU3BlZWNoUmVjb2duaXRpb25SZXN1bHQodGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCBFeHBvcnRzXzEuUmVzdWx0UmVhc29uLlJlY29nbml6aW5nU3BlZWNoLCBoeXBvdGhlc2lzLlRleHQsIGh5cG90aGVzaXMuRHVyYXRpb24sIG9mZnNldCwgdW5kZWZpbmVkLCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSwgcmVzdWx0UHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uSHlwb3RoZXNpcyhvZmZzZXQpO1xuICAgICAgICAgICAgICAgIHZhciBldiA9IG5ldyBFeHBvcnRzXzEuU3BlZWNoUmVjb2duaXRpb25FdmVudEFyZ3MocmVzdWx0LCBoeXBvdGhlc2lzLkR1cmF0aW9uLCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdlNwZWVjaFJlY29nbml6ZXIucmVjb2duaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlNwZWVjaFJlY29nbml6ZXIucmVjb2duaXppbmcodGhpcy5wcml2U3BlZWNoUmVjb2duaXplciwgZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBnb2luZyB0byBsZXQgZXJyb3JzIGluIHRoZSBldmVudCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzcGVlY2gucGhyYXNlXCI6XG4gICAgICAgICAgICAgICAgdmFyIHNpbXBsZSA9IEV4cG9ydHNfMi5TaW1wbGVTcGVlY2hQaHJhc2UuZnJvbUpTT04oY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHRSZWFzb24gPSBFeHBvcnRzXzIuRW51bVRyYW5zbGF0aW9uLmltcGxUcmFuc2xhdGVSZWNvZ25pdGlvblJlc3VsdChzaW1wbGUuUmVjb2duaXRpb25TdGF0dXMpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLm9uUGhyYXNlUmVjb2duaXplZCh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5jdXJyZW50VHVybkF1ZGlvT2Zmc2V0ICsgc2ltcGxlLk9mZnNldCArIHNpbXBsZS5EdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKEV4cG9ydHNfMS5SZXN1bHRSZWFzb24uQ2FuY2VsZWQgPT09IHJlc3VsdFJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FuY2VsUmVhc29uID0gRXhwb3J0c18yLkVudW1UcmFuc2xhdGlvbi5pbXBsVHJhbnNsYXRlQ2FuY2VsUmVzdWx0KHNpbXBsZS5SZWNvZ25pdGlvblN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBFeHBvcnRzXzEuU3BlZWNoUmVjb2duaXRpb25SZXN1bHQodGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCByZXN1bHRSZWFzb24sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHksIHJlc3VsdFByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2U3BlZWNoUmVjb2duaXplci5jYW5jZWxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhbmNlbEV2ZW50ID0gbmV3IEV4cG9ydHNfMS5TcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzKGNhbmNlbFJlYXNvbiwgdW5kZWZpbmVkLCBjYW5jZWxSZWFzb24gPT09IEV4cG9ydHNfMS5DYW5jZWxsYXRpb25SZWFzb24uRXJyb3IgPyBFeHBvcnRzXzEuQ2FuY2VsbGF0aW9uRXJyb3JDb2RlLlNlcnZpY2VFcnJvciA6IEV4cG9ydHNfMS5DYW5jZWxsYXRpb25FcnJvckNvZGUuTm9FcnJvciwgdW5kZWZpbmVkLCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZTcGVlY2hSZWNvZ25pemVyLmNhbmNlbGVkKHRoaXMucHJpdlNwZWVjaFJlY29nbml6ZXIsIGNhbmNlbEV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5wcml2UmVxdWVzdFNlc3Npb24uaXNTcGVlY2hFbmRlZCAmJiByZXN1bHRSZWFzb24gPT09IEV4cG9ydHNfMS5SZXN1bHRSZWFzb24uTm9NYXRjaCAmJiBzaW1wbGUuUmVjb2duaXRpb25TdGF0dXMgIT09IEV4cG9ydHNfMi5SZWNvZ25pdGlvblN0YXR1cy5Jbml0aWFsU2lsZW5jZVRpbWVvdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcml2UmVjb2duaXplckNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KEV4cG9ydHNfMi5PdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUpID09PSBFeHBvcnRzXzEuT3V0cHV0Rm9ybWF0W0V4cG9ydHNfMS5PdXRwdXRGb3JtYXQuU2ltcGxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBFeHBvcnRzXzEuU3BlZWNoUmVjb2duaXRpb25SZXN1bHQodGhpcy5wcml2UmVxdWVzdFNlc3Npb24ucmVxdWVzdElkLCByZXN1bHRSZWFzb24sIHNpbXBsZS5EaXNwbGF5VGV4dCwgc2ltcGxlLkR1cmF0aW9uLCBzaW1wbGUuT2Zmc2V0ICsgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uY3VycmVudFR1cm5BdWRpb09mZnNldCwgdW5kZWZpbmVkLCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSwgcmVzdWx0UHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRldGFpbGVkID0gRXhwb3J0c18yLkRldGFpbGVkU3BlZWNoUGhyYXNlLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgRXhwb3J0c18xLlNwZWVjaFJlY29nbml0aW9uUmVzdWx0KHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgcmVzdWx0UmVhc29uLCBkZXRhaWxlZC5SZWNvZ25pdGlvblN0YXR1cyA9PT0gRXhwb3J0c18yLlJlY29nbml0aW9uU3RhdHVzLlN1Y2Nlc3MgPyBkZXRhaWxlZC5OQmVzdFswXS5EaXNwbGF5IDogdW5kZWZpbmVkLCBkZXRhaWxlZC5EdXJhdGlvbiwgZGV0YWlsZWQuT2Zmc2V0ICsgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uY3VycmVudFR1cm5BdWRpb09mZnNldCwgdW5kZWZpbmVkLCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSwgcmVzdWx0UHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50XzEgPSBuZXcgRXhwb3J0c18xLlNwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzKHJlc3VsdCwgcmVzdWx0Lm9mZnNldCwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdlNwZWVjaFJlY29nbml6ZXIucmVjb2duaXplZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlNwZWVjaFJlY29nbml6ZXIucmVjb2duaXplZCh0aGlzLnByaXZTcGVlY2hSZWNvZ25pemVyLCBldmVudF8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBnb2luZyB0byBsZXQgZXJyb3JzIGluIHRoZSBldmVudCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaXAgdGhpbmdzIHVwLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyByZXBvcnQgcmVzdWx0IHRvIHByb21pc2UuXG4gICAgICAgICAgICAgICAgaWYgKCEhc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhZXJyb3JDYWxsQmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbEJhY2soZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSBpbnZva2UgdGhlIGNhbGwgYmFjayBvbmNlLlxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaWYgaXQncyBzdWNjZXNzZnVsIGRvbid0IGludm9rZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3IgYWZ0ZXIgdGhhdC5cbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxCYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIENhbmNlbHMgcmVjb2duaXRpb24uXG4gICAgU3BlZWNoU2VydmljZVJlY29nbml6ZXIucHJvdG90eXBlLmNhbmNlbFJlY29nbml0aW9uID0gZnVuY3Rpb24gKHNlc3Npb25JZCwgcmVxdWVzdElkLCBjYW5jZWxsYXRpb25SZWFzb24sIGVycm9yQ29kZSwgZXJyb3IsIGNhbmNlbFJlY29DYWxsYmFjaykge1xuICAgICAgICB2YXIgcHJvcGVydGllcyA9IG5ldyBFeHBvcnRzXzEuUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgICAgIHByb3BlcnRpZXMuc2V0UHJvcGVydHkoRXhwb3J0c18yLkNhbmNlbGxhdGlvbkVycm9yQ29kZVByb3BlcnR5TmFtZSwgRXhwb3J0c18xLkNhbmNlbGxhdGlvbkVycm9yQ29kZVtlcnJvckNvZGVdKTtcbiAgICAgICAgaWYgKCEhdGhpcy5wcml2U3BlZWNoUmVjb2duaXplci5jYW5jZWxlZCkge1xuICAgICAgICAgICAgdmFyIGNhbmNlbEV2ZW50ID0gbmV3IEV4cG9ydHNfMS5TcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzKGNhbmNlbGxhdGlvblJlYXNvbiwgZXJyb3IsIGVycm9yQ29kZSwgdW5kZWZpbmVkLCBzZXNzaW9uSWQpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZTcGVlY2hSZWNvZ25pemVyLmNhbmNlbGVkKHRoaXMucHJpdlNwZWVjaFJlY29nbml6ZXIsIGNhbmNlbEV2ZW50KTtcbiAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoISFjYW5jZWxSZWNvQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBuZXcgRXhwb3J0c18xLlNwZWVjaFJlY29nbml0aW9uUmVzdWx0KHJlcXVlc3RJZCwgRXhwb3J0c18xLlJlc3VsdFJlYXNvbi5DYW5jZWxlZCwgdW5kZWZpbmVkLCAvLyBUZXh0XG4gICAgICAgICAgICB1bmRlZmluZWQsIC8vIERydWF0aW9uXG4gICAgICAgICAgICB1bmRlZmluZWQsIC8vIE9mZnNldFxuICAgICAgICAgICAgZXJyb3IsIHVuZGVmaW5lZCwgLy8gSnNvblxuICAgICAgICAgICAgcHJvcGVydGllcyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhbmNlbFJlY29DYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2IpIHsgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3BlZWNoU2VydmljZVJlY29nbml6ZXI7XG59KEV4cG9ydHNfMi5TZXJ2aWNlUmVjb2duaXplckJhc2UpKTtcbmV4cG9ydHMuU3BlZWNoU2VydmljZVJlY29nbml6ZXIgPSBTcGVlY2hTZXJ2aWNlUmVjb2duaXplcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoU2VydmljZVJlY29nbml6ZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24uYnJvd3Nlci9FeHBvcnRzXCIpO1xudmFyIEV4cG9ydHNfMiA9IHJlcXVpcmUoXCIuLi9zZGsvRXhwb3J0c1wiKTtcbnZhciBFeHBvcnRzXzMgPSByZXF1aXJlKFwiLi9FeHBvcnRzXCIpO1xudmFyIFRlc3RIb29rc1BhcmFtTmFtZSA9IFwidGVzdGhvb2tzXCI7XG52YXIgQ29ubmVjdGlvbklkSGVhZGVyID0gXCJYLUNvbm5lY3Rpb25JZFwiO1xudmFyIFRyYW5zbGF0aW9uQ29ubmVjdGlvbkZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNsYXRpb25Db25uZWN0aW9uRmFjdG9yeSgpIHtcbiAgICAgICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbiAoY29uZmlnLCBhdXRoSW5mbywgY29ubmVjdGlvbklkKSB7XG4gICAgICAgICAgICB2YXIgZW5kcG9pbnQgPSBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGlmICghZW5kcG9pbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVnaW9uID0gY29uZmlnLnBhcmFtZXRlcnMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVnaW9uLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIGVuZHBvaW50ID0gXCJ3c3M6Ly9cIiArIHJlZ2lvbiArIFwiLnMycy5zcGVlY2gubWljcm9zb2Z0LmNvbS9zcGVlY2gvdHJhbnNsYXRpb24vY29nbml0aXZlc2VydmljZXMvdjFcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBmcm9tOiBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2UpLFxuICAgICAgICAgICAgICAgIHRvOiBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblRvTGFuZ3VhZ2VzKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgdm9pY2VOYW1lID0gXCJ2b2ljZVwiO1xuICAgICAgICAgICAgdmFyIGZlYXR1cmVOYW1lID0gXCJmZWF0dXJlc1wiO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5wYXJhbWV0ZXJzLmdldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVm9pY2UsIHVuZGVmaW5lZCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zW3ZvaWNlTmFtZV0gPSBjb25maWcucGFyYW1ldGVycy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblZvaWNlKTtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtc1tmZWF0dXJlTmFtZV0gPSBcInRleHR0b3NwZWVjaFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgIGhlYWRlcnNbYXV0aEluZm8uaGVhZGVyTmFtZV0gPSBhdXRoSW5mby50b2tlbjtcbiAgICAgICAgICAgIGhlYWRlcnNbQ29ubmVjdGlvbklkSGVhZGVyXSA9IGNvbm5lY3Rpb25JZDtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXhwb3J0c18xLldlYnNvY2tldENvbm5lY3Rpb24oZW5kcG9pbnQsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJzLCBuZXcgRXhwb3J0c18zLldlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIoKSwgRXhwb3J0c18xLlByb3h5SW5mby5mcm9tUmVjb2duaXplckNvbmZpZyhjb25maWcpLCBjb25uZWN0aW9uSWQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gVHJhbnNsYXRpb25Db25uZWN0aW9uRmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLlRyYW5zbGF0aW9uQ29ubmVjdGlvbkZhY3RvcnkgPSBUcmFuc2xhdGlvbkNvbm5lY3Rpb25GYWN0b3J5O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvbkNvbm5lY3Rpb25GYWN0b3J5LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRXhwb3J0c1wiKTtcbnZhciBFeHBvcnRzXzIgPSByZXF1aXJlKFwiLi4vc2RrL0V4cG9ydHNcIik7XG52YXIgRXhwb3J0c18zID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIFRyYW5zbGF0aW9uU2VydmljZVJlY29nbml6ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRyYW5zbGF0aW9uU2VydmljZVJlY29nbml6ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVHJhbnNsYXRpb25TZXJ2aWNlUmVjb2duaXplcihhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvU291cmNlLCByZWNvZ25pemVyQ29uZmlnLCB0cmFuc2xhdGlvblJlY29nbml6ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYXV0aGVudGljYXRpb24sIGNvbm5lY3Rpb25GYWN0b3J5LCBhdWRpb1NvdXJjZSwgcmVjb2duaXplckNvbmZpZywgdHJhbnNsYXRpb25SZWNvZ25pemVyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyID0gdHJhbnNsYXRpb25SZWNvZ25pemVyO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRyYW5zbGF0aW9uU2VydmljZVJlY29nbml6ZXIucHJvdG90eXBlLnByb2Nlc3NUeXBlU3BlY2lmaWNNZXNzYWdlcyA9IGZ1bmN0aW9uIChjb25uZWN0aW9uTWVzc2FnZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxCYWNrKSB7XG4gICAgICAgIHZhciByZXN1bHRQcm9wcyA9IG5ldyBFeHBvcnRzXzIuUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgICAgIGlmIChjb25uZWN0aW9uTWVzc2FnZS5tZXNzYWdlVHlwZSA9PT0gRXhwb3J0c18xLk1lc3NhZ2VUeXBlLlRleHQpIHtcbiAgICAgICAgICAgIHJlc3VsdFByb3BzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VSZXNwb25zZV9Kc29uUmVzdWx0LCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChjb25uZWN0aW9uTWVzc2FnZS5wYXRoLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0cmFuc2xhdGlvbi5oeXBvdGhlc2lzXCI6XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZmlyZUV2ZW50Rm9yUmVzdWx0KEV4cG9ydHNfMy5UcmFuc2xhdGlvbkh5cG90aGVzaXMuZnJvbUpTT04oY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpLCByZXN1bHRQcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24ub25IeXBvdGhlc2lzKHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmN1cnJlbnRUdXJuQXVkaW9PZmZzZXQgKyByZXN1bHQub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIucmVjb2duaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplci5yZWNvZ25pemluZyh0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90IGdvaW5nIHRvIGxldCBlcnJvcnMgaW4gdGhlIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaXAgdGhpbmdzIHVwLlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInRyYW5zbGF0aW9uLnBocmFzZVwiOlxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGVkUGhyYXNlID0gRXhwb3J0c18zLlRyYW5zbGF0aW9uUGhyYXNlLmZyb21KU09OKGNvbm5lY3Rpb25NZXNzYWdlLnRleHRCb2R5KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5vblBocmFzZVJlY29nbml6ZWQodGhpcy5wcml2UmVxdWVzdFNlc3Npb24uY3VycmVudFR1cm5BdWRpb09mZnNldCArIHRyYW5zbGF0ZWRQaHJhc2UuT2Zmc2V0ICsgdHJhbnNsYXRlZFBocmFzZS5EdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZWRQaHJhc2UuUmVjb2duaXRpb25TdGF0dXMgPT09IEV4cG9ydHNfMy5SZWNvZ25pdGlvblN0YXR1cy5TdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9LLCB0aGUgcmVjb2duaXRpb24gd2FzIHN1Y2Nlc3NmdWwuIEhvdydkIHRoZSB0cmFuc2xhdGlvbiBkbz9cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdF8xID0gdGhpcy5maXJlRXZlbnRGb3JSZXN1bHQodHJhbnNsYXRlZFBocmFzZSwgcmVzdWx0UHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIucmVjb2duaXplZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIucmVjb2duaXplZCh0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIsIHJlc3VsdF8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90IGdvaW5nIHRvIGxldCBlcnJvcnMgaW4gdGhlIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyByZXBvcnQgcmVzdWx0IHRvIHByb21pc2UuXG4gICAgICAgICAgICAgICAgICAgIGlmICghIXN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzdWx0XzEucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhZXJyb3JDYWxsQmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxCYWNrKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgaW52b2tlIHRoZSBjYWxsIGJhY2sgb25jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBpZiBpdCdzIHN1Y2Nlc3NmdWwgZG9uJ3QgaW52b2tlIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3IgYWZ0ZXIgdGhhdC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbEJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVhc29uID0gRXhwb3J0c18zLkVudW1UcmFuc2xhdGlvbi5pbXBsVHJhbnNsYXRlUmVjb2duaXRpb25SZXN1bHQodHJhbnNsYXRlZFBocmFzZS5SZWNvZ25pdGlvblN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRfMiA9IG5ldyBFeHBvcnRzXzIuVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdCh1bmRlZmluZWQsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgcmVhc29uLCB0cmFuc2xhdGVkUGhyYXNlLlRleHQsIHRyYW5zbGF0ZWRQaHJhc2UuRHVyYXRpb24sIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLmN1cnJlbnRUdXJuQXVkaW9PZmZzZXQgKyB0cmFuc2xhdGVkUGhyYXNlLk9mZnNldCwgdW5kZWZpbmVkLCBjb25uZWN0aW9uTWVzc2FnZS50ZXh0Qm9keSwgcmVzdWx0UHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVhc29uID09PSBFeHBvcnRzXzIuUmVzdWx0UmVhc29uLkNhbmNlbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FuY2VsUmVhc29uID0gRXhwb3J0c18zLkVudW1UcmFuc2xhdGlvbi5pbXBsVHJhbnNsYXRlQ2FuY2VsUmVzdWx0KHRyYW5zbGF0ZWRQaHJhc2UuUmVjb2duaXRpb25TdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ID0gbmV3IEV4cG9ydHNfMi5UcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3ModGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkLCBjYW5jZWxSZWFzb24sIG51bGwsIGNhbmNlbFJlYXNvbiA9PT0gRXhwb3J0c18yLkNhbmNlbGxhdGlvblJlYXNvbi5FcnJvciA/IEV4cG9ydHNfMi5DYW5jZWxsYXRpb25FcnJvckNvZGUuU2VydmljZUVycm9yIDogRXhwb3J0c18yLkNhbmNlbGxhdGlvbkVycm9yQ29kZS5Ob0Vycm9yLCByZXN1bHRfMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIuY2FuY2VsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIuY2FuY2VsZWQodGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLCBldik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgZ29pbmcgdG8gbGV0IGVycm9ycyBpbiB0aGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5pc1NwZWVjaEVuZGVkICYmIHJlYXNvbiA9PT0gRXhwb3J0c18yLlJlc3VsdFJlYXNvbi5Ob01hdGNoICYmIHRyYW5zbGF0ZWRQaHJhc2UuUmVjb2duaXRpb25TdGF0dXMgIT09IEV4cG9ydHNfMy5SZWNvZ25pdGlvblN0YXR1cy5Jbml0aWFsU2lsZW5jZVRpbWVvdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ID0gbmV3IEV4cG9ydHNfMi5UcmFuc2xhdGlvblJlY29nbml0aW9uRXZlbnRBcmdzKHJlc3VsdF8yLCByZXN1bHRfMi5vZmZzZXQsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLnJlY29nbml6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplci5yZWNvZ25pemVkKHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplciwgZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBnb2luZyB0byBsZXQgZXJyb3JzIGluIHRoZSBldmVudCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyByZXBvcnQgcmVzdWx0IHRvIHByb21pc2UuXG4gICAgICAgICAgICAgICAgICAgIGlmICghIXN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socmVzdWx0XzIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnJvckNhbGxCYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbEJhY2soZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBpbnZva2UgdGhlIGNhbGwgYmFjayBvbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGlmIGl0J3Mgc3VjY2Vzc2Z1bCBkb24ndCBpbnZva2UgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlcnJvciBhZnRlciB0aGF0LlxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsQmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ0cmFuc2xhdGlvbi5zeW50aGVzaXNcIjpcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRTeW50aGVzaXNBdWRpbyhjb25uZWN0aW9uTWVzc2FnZS5iaW5hcnlCb2R5LCB0aGlzLnByaXZSZXF1ZXN0U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInRyYW5zbGF0aW9uLnN5bnRoZXNpcy5lbmRcIjpcbiAgICAgICAgICAgICAgICB2YXIgc3ludGhFbmQgPSBFeHBvcnRzXzMuVHJhbnNsYXRpb25TeW50aGVzaXNFbmQuZnJvbUpTT04oY29ubmVjdGlvbk1lc3NhZ2UudGV4dEJvZHkpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoc3ludGhFbmQuU3ludGhlc2lzU3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRXhwb3J0c18zLlN5bnRoZXNpc1N0YXR1cy5FcnJvcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIXRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplci5zeW50aGVzaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0XzMgPSBuZXcgRXhwb3J0c18yLlRyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0KEV4cG9ydHNfMi5SZXN1bHRSZWFzb24uQ2FuY2VsZWQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldEV2ZW50ID0gbmV3IEV4cG9ydHNfMi5UcmFuc2xhdGlvblN5bnRoZXNpc0V2ZW50QXJncyhyZXN1bHRfMywgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIuc3ludGhlc2l6aW5nKHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplciwgcmV0RXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90IGdvaW5nIHRvIGxldCBlcnJvcnMgaW4gdGhlIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpcCB0aGluZ3MgdXAuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLmNhbmNlbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW5kIHJhaXNlIGEgY2FuY2VsZWQgZXZlbnQgdG8gc2VuZCB0aGUgcmljaChlcikgZXJyb3IgbWVzc2FnZSBiYWNrLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYW5jZWxlZFJlc3VsdCA9IG5ldyBFeHBvcnRzXzIuVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzKHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnNlc3Npb25JZCwgRXhwb3J0c18yLkNhbmNlbGxhdGlvblJlYXNvbi5FcnJvciwgc3ludGhFbmQuRmFpbHVyZVJlYXNvbiwgRXhwb3J0c18yLkNhbmNlbGxhdGlvbkVycm9yQ29kZS5TZXJ2aWNlRXJyb3IsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplci5jYW5jZWxlZCh0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIsIGNhbmNlbGVkUmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBnb2luZyB0byBsZXQgZXJyb3JzIGluIHRoZSBldmVudCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaXAgdGhpbmdzIHVwLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEV4cG9ydHNfMy5TeW50aGVzaXNTdGF0dXMuU3VjY2VzczpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFN5bnRoZXNpc0F1ZGlvKHVuZGVmaW5lZCwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQ2FuY2VscyByZWNvZ25pdGlvbi5cbiAgICBUcmFuc2xhdGlvblNlcnZpY2VSZWNvZ25pemVyLnByb3RvdHlwZS5jYW5jZWxSZWNvZ25pdGlvbiA9IGZ1bmN0aW9uIChzZXNzaW9uSWQsIHJlcXVlc3RJZCwgY2FuY2VsbGF0aW9uUmVhc29uLCBlcnJvckNvZGUsIGVycm9yLCBjYW5jZWxSZWNvQ2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCEhdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLmNhbmNlbGVkKSB7XG4gICAgICAgICAgICB2YXIgcHJvcGVydGllcyA9IG5ldyBFeHBvcnRzXzIuUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNldFByb3BlcnR5KEV4cG9ydHNfMy5DYW5jZWxsYXRpb25FcnJvckNvZGVQcm9wZXJ0eU5hbWUsIEV4cG9ydHNfMi5DYW5jZWxsYXRpb25FcnJvckNvZGVbZXJyb3JDb2RlXSk7XG4gICAgICAgICAgICB2YXIgY2FuY2VsRXZlbnQgPSBuZXcgRXhwb3J0c18yLlRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyhzZXNzaW9uSWQsIGNhbmNlbGxhdGlvblJlYXNvbiwgZXJyb3IsIGVycm9yQ29kZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLmNhbmNlbGVkKHRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplciwgY2FuY2VsRXZlbnQpO1xuICAgICAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxuICAgICAgICAgICAgaWYgKCEhY2FuY2VsUmVjb0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBFeHBvcnRzXzIuVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdCh1bmRlZmluZWQsIC8vIFRyYW5zbGF0aW9uc1xuICAgICAgICAgICAgICAgIHJlcXVlc3RJZCwgRXhwb3J0c18yLlJlc3VsdFJlYXNvbi5DYW5jZWxlZCwgdW5kZWZpbmVkLCAvLyBUZXh0XG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLCAvLyBEcnVhdGlvblxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCwgLy8gT2Zmc2V0XG4gICAgICAgICAgICAgICAgZXJyb3IsIHVuZGVmaW5lZCwgLy8gSnNvblxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbFJlY29DYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoX2IpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUcmFuc2xhdGlvblNlcnZpY2VSZWNvZ25pemVyLnByb3RvdHlwZS5maXJlRXZlbnRGb3JSZXN1bHQgPSBmdW5jdGlvbiAoc2VydmljZVJlc3VsdCwgcHJvcGVydGllcykge1xuICAgICAgICB2YXIgdHJhbnNsYXRpb25zO1xuICAgICAgICBpZiAodW5kZWZpbmVkICE9PSBzZXJ2aWNlUmVzdWx0LlRyYW5zbGF0aW9uLlRyYW5zbGF0aW9ucykge1xuICAgICAgICAgICAgdHJhbnNsYXRpb25zID0gbmV3IEV4cG9ydHNfMi5UcmFuc2xhdGlvbnMoKTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBzZXJ2aWNlUmVzdWx0LlRyYW5zbGF0aW9uLlRyYW5zbGF0aW9uczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb25zLnNldCh0cmFuc2xhdGlvbi5MYW5ndWFnZSwgdHJhbnNsYXRpb24uVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdFJlYXNvbjtcbiAgICAgICAgaWYgKHNlcnZpY2VSZXN1bHQgaW5zdGFuY2VvZiBFeHBvcnRzXzMuVHJhbnNsYXRpb25QaHJhc2UpIHtcbiAgICAgICAgICAgIGlmIChzZXJ2aWNlUmVzdWx0LlRyYW5zbGF0aW9uLlRyYW5zbGF0aW9uU3RhdHVzID09PSBFeHBvcnRzXzEuVHJhbnNsYXRpb25TdGF0dXMuU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHJlc3VsdFJlYXNvbiA9IEV4cG9ydHNfMi5SZXN1bHRSZWFzb24uVHJhbnNsYXRlZFNwZWVjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdFJlYXNvbiA9IEV4cG9ydHNfMi5SZXN1bHRSZWFzb24uUmVjb2duaXplZFNwZWVjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdFJlYXNvbiA9IEV4cG9ydHNfMi5SZXN1bHRSZWFzb24uVHJhbnNsYXRpbmdTcGVlY2g7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9mZnNldCA9IHNlcnZpY2VSZXN1bHQuT2Zmc2V0ICsgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uY3VycmVudFR1cm5BdWRpb09mZnNldDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBFeHBvcnRzXzIuVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdCh0cmFuc2xhdGlvbnMsIHRoaXMucHJpdlJlcXVlc3RTZXNzaW9uLnJlcXVlc3RJZCwgcmVzdWx0UmVhc29uLCBzZXJ2aWNlUmVzdWx0LlRleHQsIHNlcnZpY2VSZXN1bHQuRHVyYXRpb24sIG9mZnNldCwgc2VydmljZVJlc3VsdC5UcmFuc2xhdGlvbi5GYWlsdXJlUmVhc29uLCBKU09OLnN0cmluZ2lmeShzZXJ2aWNlUmVzdWx0KSwgcHJvcGVydGllcyk7XG4gICAgICAgIHZhciBldiA9IG5ldyBFeHBvcnRzXzIuVHJhbnNsYXRpb25SZWNvZ25pdGlvbkV2ZW50QXJncyhyZXN1bHQsIG9mZnNldCwgdGhpcy5wcml2UmVxdWVzdFNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgcmV0dXJuIGV2O1xuICAgIH07XG4gICAgVHJhbnNsYXRpb25TZXJ2aWNlUmVjb2duaXplci5wcm90b3R5cGUuc2VuZFN5bnRoZXNpc0F1ZGlvID0gZnVuY3Rpb24gKGF1ZGlvLCBzZXNzaW9uSWQpIHtcbiAgICAgICAgdmFyIHJlYXNvbiA9ICh1bmRlZmluZWQgPT09IGF1ZGlvKSA/IEV4cG9ydHNfMi5SZXN1bHRSZWFzb24uU3ludGhlc2l6aW5nQXVkaW9Db21wbGV0ZWQgOiBFeHBvcnRzXzIuUmVzdWx0UmVhc29uLlN5bnRoZXNpemluZ0F1ZGlvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IEV4cG9ydHNfMi5UcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdChyZWFzb24sIGF1ZGlvKTtcbiAgICAgICAgdmFyIHJldEV2ZW50ID0gbmV3IEV4cG9ydHNfMi5UcmFuc2xhdGlvblN5bnRoZXNpc0V2ZW50QXJncyhyZXN1bHQsIHNlc3Npb25JZCk7XG4gICAgICAgIGlmICghIXRoaXMucHJpdlRyYW5zbGF0aW9uUmVjb2duaXplci5zeW50aGVzaXppbmcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2VHJhbnNsYXRpb25SZWNvZ25pemVyLnN5bnRoZXNpemluZyh0aGlzLnByaXZUcmFuc2xhdGlvblJlY29nbml6ZXIsIHJldEV2ZW50KTtcbiAgICAgICAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gTm90IGdvaW5nIHRvIGxldCBlcnJvcnMgaW4gdGhlIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgICAgICAgICAvLyB0cmlwIHRoaW5ncyB1cC5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRyYW5zbGF0aW9uU2VydmljZVJlY29nbml6ZXI7XG59KEV4cG9ydHNfMy5TZXJ2aWNlUmVjb2duaXplckJhc2UpKTtcbmV4cG9ydHMuVHJhbnNsYXRpb25TZXJ2aWNlUmVjb2duaXplciA9IFRyYW5zbGF0aW9uU2VydmljZVJlY29nbml6ZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYW5zbGF0aW9uU2VydmljZVJlY29nbml6ZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBEZWZpbmVzIHRyYW5zbGF0aW9uIHN0YXR1cy5cbiAqIEBjbGFzcyBUcmFuc2xhdGlvblN0YXR1c1xuICovXG52YXIgVHJhbnNsYXRpb25TdGF0dXM7XG4oZnVuY3Rpb24gKFRyYW5zbGF0aW9uU3RhdHVzKSB7XG4gICAgLyoqXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvblN0YXR1cy5TdWNjZXNzXG4gICAgICovXG4gICAgVHJhbnNsYXRpb25TdGF0dXNbVHJhbnNsYXRpb25TdGF0dXNbXCJTdWNjZXNzXCJdID0gMF0gPSBcIlN1Y2Nlc3NcIjtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uU3RhdHVzLkVycm9yXG4gICAgICovXG4gICAgVHJhbnNsYXRpb25TdGF0dXNbVHJhbnNsYXRpb25TdGF0dXNbXCJFcnJvclwiXSA9IDFdID0gXCJFcnJvclwiO1xufSkoVHJhbnNsYXRpb25TdGF0dXMgPSBleHBvcnRzLlRyYW5zbGF0aW9uU3RhdHVzIHx8IChleHBvcnRzLlRyYW5zbGF0aW9uU3RhdHVzID0ge30pKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRpb25TdGF0dXMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRXhwb3J0c1wiKTtcbnZhciBDUkxGID0gXCJcXHJcXG5cIjtcbnZhciBXZWJzb2NrZXRNZXNzYWdlRm9ybWF0dGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMudG9Db25uZWN0aW9uTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICB2YXIgZGVmZXJyYWwgPSBuZXcgRXhwb3J0c18xLkRlZmVycmVkKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm1lc3NhZ2VUeXBlID09PSBFeHBvcnRzXzEuTWVzc2FnZVR5cGUuVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dE1lc3NhZ2UgPSBtZXNzYWdlLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0TWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlckJvZHlTcGxpdCA9IHRleHRNZXNzYWdlLnNwbGl0KFwiXFxyXFxuXFxyXFxuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlckJvZHlTcGxpdCAmJiBoZWFkZXJCb2R5U3BsaXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSBfdGhpcy5wYXJzZUhlYWRlcnMoaGVhZGVyQm9keVNwbGl0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyQm9keVNwbGl0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IGhlYWRlckJvZHlTcGxpdFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyYWwucmVzb2x2ZShuZXcgRXhwb3J0c18xLkNvbm5lY3Rpb25NZXNzYWdlKG1lc3NhZ2UubWVzc2FnZVR5cGUsIGJvZHksIGhlYWRlcnMsIG1lc3NhZ2UuaWQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWVzc2FnZS5tZXNzYWdlVHlwZSA9PT0gRXhwb3J0c18xLk1lc3NhZ2VUeXBlLkJpbmFyeSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmluYXJ5TWVzc2FnZSA9IG1lc3NhZ2UuYmluYXJ5Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWJpbmFyeU1lc3NhZ2UgfHwgYmluYXJ5TWVzc2FnZS5ieXRlTGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiaW5hcnkgbWVzc2FnZSBmb3JtYXQuIEhlYWRlciBsZW5ndGggbWlzc2luZy5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGJpbmFyeU1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVyTGVuZ3RoID0gZGF0YVZpZXcuZ2V0SW50MTYoMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiaW5hcnlNZXNzYWdlLmJ5dGVMZW5ndGggPCBoZWFkZXJMZW5ndGggKyAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJpbmFyeSBtZXNzYWdlIGZvcm1hdC4gSGVhZGVyIGNvbnRlbnQgbWlzc2luZy5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlcnNTdHJpbmcgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWRlckxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzU3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGRhdGFWaWV3KS5nZXRJbnQ4KGkgKyAyKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycyA9IF90aGlzLnBhcnNlSGVhZGVycyhoZWFkZXJzU3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmFyeU1lc3NhZ2UuYnl0ZUxlbmd0aCA+IGhlYWRlckxlbmd0aCArIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSBiaW5hcnlNZXNzYWdlLnNsaWNlKDIgKyBoZWFkZXJMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmFsLnJlc29sdmUobmV3IEV4cG9ydHNfMS5Db25uZWN0aW9uTWVzc2FnZShtZXNzYWdlLm1lc3NhZ2VUeXBlLCBib2R5LCBoZWFkZXJzLCBtZXNzYWdlLmlkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJhbC5yZWplY3QoXCJFcnJvciBmb3JtYXR0aW5nIHRoZSBtZXNzYWdlLiBFcnJvcjogXCIgKyBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZnJvbUNvbm5lY3Rpb25NZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHZhciBkZWZlcnJhbCA9IG5ldyBFeHBvcnRzXzEuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UubWVzc2FnZVR5cGUgPT09IEV4cG9ydHNfMS5NZXNzYWdlVHlwZS5UZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXlsb2FkID0gXCJcIiArIF90aGlzLm1ha2VIZWFkZXJzKG1lc3NhZ2UpICsgQ1JMRiArIChtZXNzYWdlLnRleHRCb2R5ID8gbWVzc2FnZS50ZXh0Qm9keSA6IFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJhbC5yZXNvbHZlKG5ldyBFeHBvcnRzXzEuUmF3V2Vic29ja2V0TWVzc2FnZShFeHBvcnRzXzEuTWVzc2FnZVR5cGUuVGV4dCwgcGF5bG9hZCwgbWVzc2FnZS5pZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtZXNzYWdlLm1lc3NhZ2VUeXBlID09PSBFeHBvcnRzXzEuTWVzc2FnZVR5cGUuQmluYXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJzU3RyaW5nID0gX3RoaXMubWFrZUhlYWRlcnMobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gbWVzc2FnZS5iaW5hcnlCb2R5O1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVySW50OEFycmF5ID0gbmV3IEludDhBcnJheShfdGhpcy5zdHJpbmdUb0FycmF5QnVmZmVyKGhlYWRlcnNTdHJpbmcpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBuZXcgQXJyYXlCdWZmZXIoMiArIGhlYWRlckludDhBcnJheS5ieXRlTGVuZ3RoICsgKGNvbnRlbnQgPyBjb250ZW50LmJ5dGVMZW5ndGggOiAwKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0SW50MTYoMCwgaGVhZGVySW50OEFycmF5Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZGVySW50OEFycmF5LmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0SW50OCgyICsgaSwgaGVhZGVySW50OEFycmF5W2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHlJbnQ4QXJyYXkgPSBuZXcgSW50OEFycmF5KGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2R5SW50OEFycmF5LmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEludDgoMiArIGhlYWRlckludDhBcnJheS5ieXRlTGVuZ3RoICsgaSwgYm9keUludDhBcnJheVtpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyYWwucmVzb2x2ZShuZXcgRXhwb3J0c18xLlJhd1dlYnNvY2tldE1lc3NhZ2UoRXhwb3J0c18xLk1lc3NhZ2VUeXBlLkJpbmFyeSwgcGF5bG9hZCwgbWVzc2FnZS5pZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyYWwucmVqZWN0KFwiRXJyb3IgZm9ybWF0dGluZyB0aGUgbWVzc2FnZS4gXCIgKyBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWFrZUhlYWRlcnMgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdmFyIGhlYWRlcnNTdHJpbmcgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaGVhZGVycykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGhlYWRlciBpbiBtZXNzYWdlLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1N0cmluZyArPSBoZWFkZXIgKyBcIjogXCIgKyBtZXNzYWdlLmhlYWRlcnNbaGVhZGVyXSArIENSTEY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaGVhZGVyc1N0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wYXJzZUhlYWRlcnMgPSBmdW5jdGlvbiAoaGVhZGVyc1N0cmluZykge1xuICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgIGlmIChoZWFkZXJzU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWRlck1hdGNoZXMgPSBoZWFkZXJzU3RyaW5nLm1hdGNoKC9bXlxcclxcbl0rL2cpO1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgaGVhZGVyTWF0Y2hlc18xID0gaGVhZGVyTWF0Y2hlczsgX2kgPCBoZWFkZXJNYXRjaGVzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVyID0gaGVhZGVyTWF0Y2hlc18xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9ySW5kZXggPSBoZWFkZXIuaW5kZXhPZihcIjpcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWRlck5hbWUgPSBzZXBhcmF0b3JJbmRleCA+IDAgPyBoZWFkZXIuc3Vic3RyKDAsIHNlcGFyYXRvckluZGV4KS50cmltKCkudG9Mb3dlckNhc2UoKSA6IGhlYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVyVmFsdWUgPSBzZXBhcmF0b3JJbmRleCA+IDAgJiYgaGVhZGVyLmxlbmd0aCA+IChzZXBhcmF0b3JJbmRleCArIDEpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyLnN1YnN0cihzZXBhcmF0b3JJbmRleCArIDEpLnRyaW0oKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1toZWFkZXJOYW1lXSA9IGhlYWRlclZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RyaW5nVG9BcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoc3RyLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KGksIHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBXZWJzb2NrZXRNZXNzYWdlRm9ybWF0dGVyO1xufSgpKTtcbmV4cG9ydHMuV2Vic29ja2V0TWVzc2FnZUZvcm1hdHRlciA9IFdlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdlYnNvY2tldE1lc3NhZ2VGb3JtYXR0ZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUGxhdGZvcm1FdmVudF8xID0gcmVxdWlyZShcIi4vUGxhdGZvcm1FdmVudFwiKTtcbnZhciBBdWRpb1NvdXJjZUV2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBdWRpb1NvdXJjZUV2ZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEF1ZGlvU291cmNlRXZlbnQoZXZlbnROYW1lLCBhdWRpb1NvdXJjZUlkLCBldmVudFR5cGUpIHtcbiAgICAgICAgaWYgKGV2ZW50VHlwZSA9PT0gdm9pZCAwKSB7IGV2ZW50VHlwZSA9IFBsYXRmb3JtRXZlbnRfMS5FdmVudFR5cGUuSW5mbzsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBldmVudE5hbWUsIGV2ZW50VHlwZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJpdkF1ZGlvU291cmNlSWQgPSBhdWRpb1NvdXJjZUlkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdWRpb1NvdXJjZUV2ZW50LnByb3RvdHlwZSwgXCJhdWRpb1NvdXJjZUlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW9Tb3VyY2VJZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEF1ZGlvU291cmNlRXZlbnQ7XG59KFBsYXRmb3JtRXZlbnRfMS5QbGF0Zm9ybUV2ZW50KSk7XG5leHBvcnRzLkF1ZGlvU291cmNlRXZlbnQgPSBBdWRpb1NvdXJjZUV2ZW50O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgQXVkaW9Tb3VyY2VJbml0aWFsaXppbmdFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXVkaW9Tb3VyY2VJbml0aWFsaXppbmdFdmVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBdWRpb1NvdXJjZUluaXRpYWxpemluZ0V2ZW50KGF1ZGlvU291cmNlSWQpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiQXVkaW9Tb3VyY2VJbml0aWFsaXppbmdFdmVudFwiLCBhdWRpb1NvdXJjZUlkKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gQXVkaW9Tb3VyY2VJbml0aWFsaXppbmdFdmVudDtcbn0oQXVkaW9Tb3VyY2VFdmVudCkpO1xuZXhwb3J0cy5BdWRpb1NvdXJjZUluaXRpYWxpemluZ0V2ZW50ID0gQXVkaW9Tb3VyY2VJbml0aWFsaXppbmdFdmVudDtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIEF1ZGlvU291cmNlUmVhZHlFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXVkaW9Tb3VyY2VSZWFkeUV2ZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEF1ZGlvU291cmNlUmVhZHlFdmVudChhdWRpb1NvdXJjZUlkKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIkF1ZGlvU291cmNlUmVhZHlFdmVudFwiLCBhdWRpb1NvdXJjZUlkKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gQXVkaW9Tb3VyY2VSZWFkeUV2ZW50O1xufShBdWRpb1NvdXJjZUV2ZW50KSk7XG5leHBvcnRzLkF1ZGlvU291cmNlUmVhZHlFdmVudCA9IEF1ZGlvU291cmNlUmVhZHlFdmVudDtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIEF1ZGlvU291cmNlT2ZmRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEF1ZGlvU291cmNlT2ZmRXZlbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXVkaW9Tb3VyY2VPZmZFdmVudChhdWRpb1NvdXJjZUlkKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIkF1ZGlvU291cmNlT2ZmRXZlbnRcIiwgYXVkaW9Tb3VyY2VJZCkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEF1ZGlvU291cmNlT2ZmRXZlbnQ7XG59KEF1ZGlvU291cmNlRXZlbnQpKTtcbmV4cG9ydHMuQXVkaW9Tb3VyY2VPZmZFdmVudCA9IEF1ZGlvU291cmNlT2ZmRXZlbnQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBBdWRpb1NvdXJjZUVycm9yRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEF1ZGlvU291cmNlRXJyb3JFdmVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBdWRpb1NvdXJjZUVycm9yRXZlbnQoYXVkaW9Tb3VyY2VJZCwgZXJyb3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJBdWRpb1NvdXJjZUVycm9yRXZlbnRcIiwgYXVkaW9Tb3VyY2VJZCwgUGxhdGZvcm1FdmVudF8xLkV2ZW50VHlwZS5FcnJvcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJpdkVycm9yID0gZXJyb3I7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1ZGlvU291cmNlRXJyb3JFdmVudC5wcm90b3R5cGUsIFwiZXJyb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZFcnJvcjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEF1ZGlvU291cmNlRXJyb3JFdmVudDtcbn0oQXVkaW9Tb3VyY2VFdmVudCkpO1xuZXhwb3J0cy5BdWRpb1NvdXJjZUVycm9yRXZlbnQgPSBBdWRpb1NvdXJjZUVycm9yRXZlbnQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBBdWRpb1N0cmVhbU5vZGVFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXVkaW9TdHJlYW1Ob2RlRXZlbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXVkaW9TdHJlYW1Ob2RlRXZlbnQoZXZlbnROYW1lLCBhdWRpb1NvdXJjZUlkLCBhdWRpb05vZGVJZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBldmVudE5hbWUsIGF1ZGlvU291cmNlSWQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZBdWRpb05vZGVJZCA9IGF1ZGlvTm9kZUlkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdWRpb1N0cmVhbU5vZGVFdmVudC5wcm90b3R5cGUsIFwiYXVkaW9Ob2RlSWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZBdWRpb05vZGVJZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEF1ZGlvU3RyZWFtTm9kZUV2ZW50O1xufShBdWRpb1NvdXJjZUV2ZW50KSk7XG5leHBvcnRzLkF1ZGlvU3RyZWFtTm9kZUV2ZW50ID0gQXVkaW9TdHJlYW1Ob2RlRXZlbnQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBBdWRpb1N0cmVhbU5vZGVBdHRhY2hpbmdFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnQoYXVkaW9Tb3VyY2VJZCwgYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnRcIiwgYXVkaW9Tb3VyY2VJZCwgYXVkaW9Ob2RlSWQpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBBdWRpb1N0cmVhbU5vZGVBdHRhY2hpbmdFdmVudDtcbn0oQXVkaW9TdHJlYW1Ob2RlRXZlbnQpKTtcbmV4cG9ydHMuQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnQgPSBBdWRpb1N0cmVhbU5vZGVBdHRhY2hpbmdFdmVudDtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIEF1ZGlvU3RyZWFtTm9kZUF0dGFjaGVkRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEF1ZGlvU3RyZWFtTm9kZUF0dGFjaGVkRXZlbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXVkaW9TdHJlYW1Ob2RlQXR0YWNoZWRFdmVudChhdWRpb1NvdXJjZUlkLCBhdWRpb05vZGVJZCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgXCJBdWRpb1N0cmVhbU5vZGVBdHRhY2hlZEV2ZW50XCIsIGF1ZGlvU291cmNlSWQsIGF1ZGlvTm9kZUlkKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gQXVkaW9TdHJlYW1Ob2RlQXR0YWNoZWRFdmVudDtcbn0oQXVkaW9TdHJlYW1Ob2RlRXZlbnQpKTtcbmV4cG9ydHMuQXVkaW9TdHJlYW1Ob2RlQXR0YWNoZWRFdmVudCA9IEF1ZGlvU3RyZWFtTm9kZUF0dGFjaGVkRXZlbnQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBBdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEF1ZGlvU3RyZWFtTm9kZURldGFjaGVkRXZlbnQoYXVkaW9Tb3VyY2VJZCwgYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiQXVkaW9TdHJlYW1Ob2RlRGV0YWNoZWRFdmVudFwiLCBhdWRpb1NvdXJjZUlkLCBhdWRpb05vZGVJZCkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEF1ZGlvU3RyZWFtTm9kZURldGFjaGVkRXZlbnQ7XG59KEF1ZGlvU3RyZWFtTm9kZUV2ZW50KSk7XG5leHBvcnRzLkF1ZGlvU3RyZWFtTm9kZURldGFjaGVkRXZlbnQgPSBBdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgQXVkaW9TdHJlYW1Ob2RlRXJyb3JFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXVkaW9TdHJlYW1Ob2RlRXJyb3JFdmVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBdWRpb1N0cmVhbU5vZGVFcnJvckV2ZW50KGF1ZGlvU291cmNlSWQsIGF1ZGlvTm9kZUlkLCBlcnJvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBcIkF1ZGlvU3RyZWFtTm9kZUVycm9yRXZlbnRcIiwgYXVkaW9Tb3VyY2VJZCwgYXVkaW9Ob2RlSWQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZFcnJvciA9IGVycm9yO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdWRpb1N0cmVhbU5vZGVFcnJvckV2ZW50LnByb3RvdHlwZSwgXCJlcnJvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQXVkaW9TdHJlYW1Ob2RlRXJyb3JFdmVudDtcbn0oQXVkaW9TdHJlYW1Ob2RlRXZlbnQpKTtcbmV4cG9ydHMuQXVkaW9TdHJlYW1Ob2RlRXJyb3JFdmVudCA9IEF1ZGlvU3RyZWFtTm9kZUVycm9yRXZlbnQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF1ZGlvU291cmNlRXZlbnRzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuL0V4cG9ydHNcIik7XG52YXIgQ2h1bmtlZEFycmF5QnVmZmVyU3RyZWFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDaHVua2VkQXJyYXlCdWZmZXJTdHJlYW0sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2h1bmtlZEFycmF5QnVmZmVyU3RyZWFtKHRhcmdldENodW5rU2l6ZSwgc3RyZWFtSWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc3RyZWFtSWQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZUYXJnZXRDaHVua1NpemUgPSB0YXJnZXRDaHVua1NpemU7XG4gICAgICAgIF90aGlzLnByaXZOZXh0QnVmZmVyUmVhZHlCeXRlcyA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ2h1bmtlZEFycmF5QnVmZmVyU3RyZWFtLnByb3RvdHlwZS53cml0ZVN0cmVhbUNodW5rID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIC8vIE5vIHBlbmRpbmcgd3JpdGUsIGFuZCB0aGUgYnVmZmVyIGlzIHRoZSByaWdodCBzaXplIHNvIHdyaXRlIGl0LlxuICAgICAgICBpZiAoY2h1bmsuaXNFbmQgfHxcbiAgICAgICAgICAgICgwID09PSB0aGlzLnByaXZOZXh0QnVmZmVyUmVhZHlCeXRlcyAmJiBjaHVuay5idWZmZXIuYnl0ZUxlbmd0aCA9PT0gdGhpcy5wcml2VGFyZ2V0Q2h1bmtTaXplKSkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS53cml0ZVN0cmVhbUNodW5rLmNhbGwodGhpcywgY2h1bmspO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBieXRlc0NvcGllZEZyb21CdWZmZXIgPSAwO1xuICAgICAgICB3aGlsZSAoYnl0ZXNDb3BpZWRGcm9tQnVmZmVyIDwgY2h1bmsuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIEZpbGwgdGhlIG5leHQgYnVmZmVyLlxuICAgICAgICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gdGhpcy5wcml2TmV4dEJ1ZmZlclRvV3JpdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZOZXh0QnVmZmVyVG9Xcml0ZSA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLnByaXZUYXJnZXRDaHVua1NpemUpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdk5leHRCdWZmZXJTdGFydFRpbWUgPSBjaHVuay50aW1lUmVjZWl2ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaW5kIG91dCBob3cgbWFueSBieXRlcyB3ZSBjYW4gY29weSBpbnRvIHRoZSByZWFkIGJ1ZmZlci5cbiAgICAgICAgICAgIHZhciBieXRlc1RvQ29weSA9IE1hdGgubWluKGNodW5rLmJ1ZmZlci5ieXRlTGVuZ3RoIC0gYnl0ZXNDb3BpZWRGcm9tQnVmZmVyLCB0aGlzLnByaXZUYXJnZXRDaHVua1NpemUgLSB0aGlzLnByaXZOZXh0QnVmZmVyUmVhZHlCeXRlcyk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0VmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMucHJpdk5leHRCdWZmZXJUb1dyaXRlKTtcbiAgICAgICAgICAgIHZhciBzb3VyY2VWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmsuYnVmZmVyLnNsaWNlKGJ5dGVzQ29waWVkRnJvbUJ1ZmZlciwgYnl0ZXNUb0NvcHkgKyBieXRlc0NvcGllZEZyb21CdWZmZXIpKTtcbiAgICAgICAgICAgIHRhcmdldFZpZXcuc2V0KHNvdXJjZVZpZXcsIHRoaXMucHJpdk5leHRCdWZmZXJSZWFkeUJ5dGVzKTtcbiAgICAgICAgICAgIHRoaXMucHJpdk5leHRCdWZmZXJSZWFkeUJ5dGVzICs9IGJ5dGVzVG9Db3B5O1xuICAgICAgICAgICAgYnl0ZXNDb3BpZWRGcm9tQnVmZmVyICs9IGJ5dGVzVG9Db3B5O1xuICAgICAgICAgICAgLy8gQXJlIHdlIHJlYWR5IHRvIHdyaXRlP1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpdk5leHRCdWZmZXJSZWFkeUJ5dGVzID09PSB0aGlzLnByaXZUYXJnZXRDaHVua1NpemUpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLndyaXRlU3RyZWFtQ2h1bmsuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogdGhpcy5wcml2TmV4dEJ1ZmZlclRvV3JpdGUsXG4gICAgICAgICAgICAgICAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdGltZVJlY2VpdmVkOiB0aGlzLnByaXZOZXh0QnVmZmVyU3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdk5leHRCdWZmZXJSZWFkeUJ5dGVzID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZOZXh0QnVmZmVyVG9Xcml0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2h1bmtlZEFycmF5QnVmZmVyU3RyZWFtLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gU2VuZCB3aGF0ZXZlciBpcyBwZW5kaW5nLCB0aGVuIGNsb3NlIHRoZSBiYXNlIGNsYXNzLlxuICAgICAgICBpZiAoMCAhPT0gdGhpcy5wcml2TmV4dEJ1ZmZlclJlYWR5Qnl0ZXMgJiYgIXRoaXMuaXNDbG9zZWQpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUud3JpdGVTdHJlYW1DaHVuay5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBidWZmZXI6IHRoaXMucHJpdk5leHRCdWZmZXJUb1dyaXRlLnNsaWNlKDAsIHRoaXMucHJpdk5leHRCdWZmZXJSZWFkeUJ5dGVzKSxcbiAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGltZVJlY2VpdmVkOiB0aGlzLnByaXZOZXh0QnVmZmVyU3RhcnRUaW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5jbG9zZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgcmV0dXJuIENodW5rZWRBcnJheUJ1ZmZlclN0cmVhbTtcbn0oRXhwb3J0c18xLlN0cmVhbSkpO1xuZXhwb3J0cy5DaHVua2VkQXJyYXlCdWZmZXJTdHJlYW0gPSBDaHVua2VkQXJyYXlCdWZmZXJTdHJlYW07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNodW5rZWRBcnJheUJ1ZmZlclN0cmVhbS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBQbGF0Zm9ybUV2ZW50XzEgPSByZXF1aXJlKFwiLi9QbGF0Zm9ybUV2ZW50XCIpO1xudmFyIENvbm5lY3Rpb25FdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGlvbkV2ZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb25FdmVudChldmVudE5hbWUsIGNvbm5lY3Rpb25JZCwgZXZlbnRUeXBlKSB7XG4gICAgICAgIGlmIChldmVudFR5cGUgPT09IHZvaWQgMCkgeyBldmVudFR5cGUgPSBQbGF0Zm9ybUV2ZW50XzEuRXZlbnRUeXBlLkluZm87IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXZlbnROYW1lLCBldmVudFR5cGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZDb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25FdmVudC5wcm90b3R5cGUsIFwiY29ubmVjdGlvbklkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2Q29ubmVjdGlvbklkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQ29ubmVjdGlvbkV2ZW50O1xufShQbGF0Zm9ybUV2ZW50XzEuUGxhdGZvcm1FdmVudCkpO1xuZXhwb3J0cy5Db25uZWN0aW9uRXZlbnQgPSBDb25uZWN0aW9uRXZlbnQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBDb25uZWN0aW9uU3RhcnRFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGlvblN0YXJ0RXZlbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGlvblN0YXJ0RXZlbnQoY29ubmVjdGlvbklkLCB1cmksIGhlYWRlcnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJDb25uZWN0aW9uU3RhcnRFdmVudFwiLCBjb25uZWN0aW9uSWQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZVcmkgPSB1cmk7XG4gICAgICAgIF90aGlzLnByaXZIZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29ubmVjdGlvblN0YXJ0RXZlbnQucHJvdG90eXBlLCBcInVyaVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlVyaTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25TdGFydEV2ZW50LnByb3RvdHlwZSwgXCJoZWFkZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SGVhZGVycztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIENvbm5lY3Rpb25TdGFydEV2ZW50O1xufShDb25uZWN0aW9uRXZlbnQpKTtcbmV4cG9ydHMuQ29ubmVjdGlvblN0YXJ0RXZlbnQgPSBDb25uZWN0aW9uU3RhcnRFdmVudDtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIENvbm5lY3Rpb25Fc3RhYmxpc2hlZEV2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb25uZWN0aW9uRXN0YWJsaXNoZWRFdmVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0aW9uRXN0YWJsaXNoZWRFdmVudChjb25uZWN0aW9uSWQsIG1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIkNvbm5lY3Rpb25Fc3RhYmxpc2hlZEV2ZW50XCIsIGNvbm5lY3Rpb25JZCkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIENvbm5lY3Rpb25Fc3RhYmxpc2hlZEV2ZW50O1xufShDb25uZWN0aW9uRXZlbnQpKTtcbmV4cG9ydHMuQ29ubmVjdGlvbkVzdGFibGlzaGVkRXZlbnQgPSBDb25uZWN0aW9uRXN0YWJsaXNoZWRFdmVudDtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIENvbm5lY3Rpb25DbG9zZWRFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGlvbkNsb3NlZEV2ZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb25DbG9zZWRFdmVudChjb25uZWN0aW9uSWQsIHN0YXR1c0NvZGUsIHJlYXNvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBcIkNvbm5lY3Rpb25DbG9zZWRFdmVudFwiLCBjb25uZWN0aW9uSWQsIFBsYXRmb3JtRXZlbnRfMS5FdmVudFR5cGUuRGVidWcpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZScmVhc29uID0gcmVhc29uO1xuICAgICAgICBfdGhpcy5wcml2U3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25DbG9zZWRFdmVudC5wcm90b3R5cGUsIFwicmVhc29uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UnJlYXNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25DbG9zZWRFdmVudC5wcm90b3R5cGUsIFwic3RhdHVzQ29kZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlN0YXR1c0NvZGU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBDb25uZWN0aW9uQ2xvc2VkRXZlbnQ7XG59KENvbm5lY3Rpb25FdmVudCkpO1xuZXhwb3J0cy5Db25uZWN0aW9uQ2xvc2VkRXZlbnQgPSBDb25uZWN0aW9uQ2xvc2VkRXZlbnQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBDb25uZWN0aW9uRXN0YWJsaXNoRXJyb3JFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGlvbkVzdGFibGlzaEVycm9yRXZlbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGlvbkVzdGFibGlzaEVycm9yRXZlbnQoY29ubmVjdGlvbklkLCBzdGF0dXNjb2RlLCByZWFzb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJDb25uZWN0aW9uRXN0YWJsaXNoRXJyb3JFdmVudFwiLCBjb25uZWN0aW9uSWQsIFBsYXRmb3JtRXZlbnRfMS5FdmVudFR5cGUuRXJyb3IpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZTdGF0dXNDb2RlID0gc3RhdHVzY29kZTtcbiAgICAgICAgX3RoaXMucHJpdlJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29ubmVjdGlvbkVzdGFibGlzaEVycm9yRXZlbnQucHJvdG90eXBlLCBcInJlYXNvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlYXNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25Fc3RhYmxpc2hFcnJvckV2ZW50LnByb3RvdHlwZSwgXCJzdGF0dXNDb2RlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U3RhdHVzQ29kZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIENvbm5lY3Rpb25Fc3RhYmxpc2hFcnJvckV2ZW50O1xufShDb25uZWN0aW9uRXZlbnQpKTtcbmV4cG9ydHMuQ29ubmVjdGlvbkVzdGFibGlzaEVycm9yRXZlbnQgPSBDb25uZWN0aW9uRXN0YWJsaXNoRXJyb3JFdmVudDtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIENvbm5lY3Rpb25NZXNzYWdlUmVjZWl2ZWRFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGlvbk1lc3NhZ2VSZWNlaXZlZEV2ZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb25NZXNzYWdlUmVjZWl2ZWRFdmVudChjb25uZWN0aW9uSWQsIG5ldHdvcmtSZWNlaXZlZFRpbWVJU08sIG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJDb25uZWN0aW9uTWVzc2FnZVJlY2VpdmVkRXZlbnRcIiwgY29ubmVjdGlvbklkKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcml2TmV0d29ya1JlY2VpdmVkVGltZSA9IG5ldHdvcmtSZWNlaXZlZFRpbWVJU087XG4gICAgICAgIF90aGlzLnByaXZNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29ubmVjdGlvbk1lc3NhZ2VSZWNlaXZlZEV2ZW50LnByb3RvdHlwZSwgXCJuZXR3b3JrUmVjZWl2ZWRUaW1lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2TmV0d29ya1JlY2VpdmVkVGltZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25NZXNzYWdlUmVjZWl2ZWRFdmVudC5wcm90b3R5cGUsIFwibWVzc2FnZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdk1lc3NhZ2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBDb25uZWN0aW9uTWVzc2FnZVJlY2VpdmVkRXZlbnQ7XG59KENvbm5lY3Rpb25FdmVudCkpO1xuZXhwb3J0cy5Db25uZWN0aW9uTWVzc2FnZVJlY2VpdmVkRXZlbnQgPSBDb25uZWN0aW9uTWVzc2FnZVJlY2VpdmVkRXZlbnQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBDb25uZWN0aW9uTWVzc2FnZVNlbnRFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGlvbk1lc3NhZ2VTZW50RXZlbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGlvbk1lc3NhZ2VTZW50RXZlbnQoY29ubmVjdGlvbklkLCBuZXR3b3JrU2VudFRpbWVJU08sIG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJDb25uZWN0aW9uTWVzc2FnZVNlbnRFdmVudFwiLCBjb25uZWN0aW9uSWQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZOZXR3b3JrU2VudFRpbWUgPSBuZXR3b3JrU2VudFRpbWVJU087XG4gICAgICAgIF90aGlzLnByaXZNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29ubmVjdGlvbk1lc3NhZ2VTZW50RXZlbnQucHJvdG90eXBlLCBcIm5ldHdvcmtTZW50VGltZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdk5ldHdvcmtTZW50VGltZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25NZXNzYWdlU2VudEV2ZW50LnByb3RvdHlwZSwgXCJtZXNzYWdlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2TWVzc2FnZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIENvbm5lY3Rpb25NZXNzYWdlU2VudEV2ZW50O1xufShDb25uZWN0aW9uRXZlbnQpKTtcbmV4cG9ydHMuQ29ubmVjdGlvbk1lc3NhZ2VTZW50RXZlbnQgPSBDb25uZWN0aW9uTWVzc2FnZVNlbnRFdmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29ubmVjdGlvbkV2ZW50cy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXJyb3JfMSA9IHJlcXVpcmUoXCIuL0Vycm9yXCIpO1xudmFyIEd1aWRfMSA9IHJlcXVpcmUoXCIuL0d1aWRcIik7XG52YXIgTWVzc2FnZVR5cGU7XG4oZnVuY3Rpb24gKE1lc3NhZ2VUeXBlKSB7XG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJUZXh0XCJdID0gMF0gPSBcIlRleHRcIjtcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIkJpbmFyeVwiXSA9IDFdID0gXCJCaW5hcnlcIjtcbn0pKE1lc3NhZ2VUeXBlID0gZXhwb3J0cy5NZXNzYWdlVHlwZSB8fCAoZXhwb3J0cy5NZXNzYWdlVHlwZSA9IHt9KSk7XG52YXIgQ29ubmVjdGlvbk1lc3NhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGlvbk1lc3NhZ2UobWVzc2FnZVR5cGUsIGJvZHksIGhlYWRlcnMsIGlkKSB7XG4gICAgICAgIHRoaXMucHJpdkJvZHkgPSBudWxsO1xuICAgICAgICBpZiAobWVzc2FnZVR5cGUgPT09IE1lc3NhZ2VUeXBlLlRleHQgJiYgYm9keSAmJiAhKHR5cGVvZiAoYm9keSkgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5JbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJQYXlsb2FkIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2VUeXBlID09PSBNZXNzYWdlVHlwZS5CaW5hcnkgJiYgYm9keSAmJiAhKGJvZHkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcl8xLkludmFsaWRPcGVyYXRpb25FcnJvcihcIlBheWxvYWQgbXVzdCBiZSBBcnJheUJ1ZmZlclwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZNZXNzYWdlVHlwZSA9IG1lc3NhZ2VUeXBlO1xuICAgICAgICB0aGlzLnByaXZCb2R5ID0gYm9keTtcbiAgICAgICAgdGhpcy5wcml2SGVhZGVycyA9IGhlYWRlcnMgPyBoZWFkZXJzIDoge307XG4gICAgICAgIHRoaXMucHJpdklkID0gaWQgPyBpZCA6IEd1aWRfMS5jcmVhdGVOb0Rhc2hHdWlkKCk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25uZWN0aW9uTWVzc2FnZS5wcm90b3R5cGUsIFwibWVzc2FnZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZNZXNzYWdlVHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25NZXNzYWdlLnByb3RvdHlwZSwgXCJoZWFkZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SGVhZGVycztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25NZXNzYWdlLnByb3RvdHlwZSwgXCJib2R5XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2Qm9keTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25NZXNzYWdlLnByb3RvdHlwZSwgXCJ0ZXh0Qm9keVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpdk1lc3NhZ2VUeXBlID09PSBNZXNzYWdlVHlwZS5CaW5hcnkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5JbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJOb3Qgc3VwcG9ydGVkIGZvciBiaW5hcnkgbWVzc2FnZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZCb2R5O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29ubmVjdGlvbk1lc3NhZ2UucHJvdG90eXBlLCBcImJpbmFyeUJvZHlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZNZXNzYWdlVHlwZSA9PT0gTWVzc2FnZVR5cGUuVGV4dCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcl8xLkludmFsaWRPcGVyYXRpb25FcnJvcihcIk5vdCBzdXBwb3J0ZWQgZm9yIHRleHQgbWVzc2FnZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZCb2R5O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29ubmVjdGlvbk1lc3NhZ2UucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBDb25uZWN0aW9uTWVzc2FnZTtcbn0oKSk7XG5leHBvcnRzLkNvbm5lY3Rpb25NZXNzYWdlID0gQ29ubmVjdGlvbk1lc3NhZ2U7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbm5lY3Rpb25NZXNzYWdlLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb25uZWN0aW9uT3BlblJlc3BvbnNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb25PcGVuUmVzcG9uc2Uoc3RhdHVzQ29kZSwgcmVhc29uKSB7XG4gICAgICAgIHRoaXMucHJpdlN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgICAgICB0aGlzLnByaXZSZWFzb24gPSByZWFzb247XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25uZWN0aW9uT3BlblJlc3BvbnNlLnByb3RvdHlwZSwgXCJzdGF0dXNDb2RlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U3RhdHVzQ29kZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb25PcGVuUmVzcG9uc2UucHJvdG90eXBlLCBcInJlYXNvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlYXNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIENvbm5lY3Rpb25PcGVuUmVzcG9uc2U7XG59KCkpO1xuZXhwb3J0cy5Db25uZWN0aW9uT3BlblJlc3BvbnNlID0gQ29ubmVjdGlvbk9wZW5SZXNwb25zZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29ubmVjdGlvbk9wZW5SZXNwb25zZS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogVGhlIGVycm9yIHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gYXJndW1lbnQgcGFzc2VkIGluIGlzIG51bGwuXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIEFyZ3VtZW50TnVsbEVycm9yXG4gKiBAZXh0ZW5kcyB7RXJyb3J9XG4gKi9cbnZhciBBcmd1bWVudE51bGxFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXJndW1lbnROdWxsRXJyb3IsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBBcmd1bWVudE51bGxFcnJvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhcmd1bWVudE5hbWUgLSBOYW1lIG9mIHRoZSBhcmd1bWVudCB0aGF0IGlzIG51bGxcbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBBcmd1bWVudE51bGxFcnJvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEFyZ3VtZW50TnVsbEVycm9yKGFyZ3VtZW50TmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBhcmd1bWVudE5hbWUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSBcIkFyZ3VtZW50TnVsbFwiO1xuICAgICAgICBfdGhpcy5tZXNzYWdlID0gYXJndW1lbnROYW1lO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBBcmd1bWVudE51bGxFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuQXJndW1lbnROdWxsRXJyb3IgPSBBcmd1bWVudE51bGxFcnJvcjtcbi8qKlxuICogVGhlIGVycm9yIHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gaW52YWxpZCBvcGVyYXRpb24gaXMgcGVyZm9ybWVkIGluIHRoZSBjb2RlLlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBJbnZhbGlkT3BlcmF0aW9uRXJyb3JcbiAqIEBleHRlbmRzIHtFcnJvcn1cbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgSW52YWxpZE9wZXJhdGlvbkVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbnZhbGlkT3BlcmF0aW9uRXJyb3IsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBJbnZhbGlkT3BlcmF0aW9uRXJyb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3IgLSBUaGUgZXJyb3JcbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBJbnZhbGlkT3BlcmF0aW9uRXJyb3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBJbnZhbGlkT3BlcmF0aW9uRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3IpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSBcIkludmFsaWRPcGVyYXRpb25cIjtcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IGVycm9yO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBJbnZhbGlkT3BlcmF0aW9uRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLkludmFsaWRPcGVyYXRpb25FcnJvciA9IEludmFsaWRPcGVyYXRpb25FcnJvcjtcbi8qKlxuICogVGhlIGVycm9yIHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb2JqZWN0IGlzIGRpc3Bvc2VkLlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBPYmplY3REaXNwb3NlZEVycm9yXG4gKiBAZXh0ZW5kcyB7RXJyb3J9XG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIE9iamVjdERpc3Bvc2VkRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9iamVjdERpc3Bvc2VkRXJyb3IsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBPYmplY3REaXNwb3NlZEVycm9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9iamVjdE5hbWUgLSBUaGUgb2JqZWN0IHRoYXQgaXMgZGlzcG9zZWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3IgLSBUaGUgZXJyb3JcbiAgICAgKlxuICAgICAqIEBtZW1iZXJPZiBPYmplY3REaXNwb3NlZEVycm9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gT2JqZWN0RGlzcG9zZWRFcnJvcihvYmplY3ROYW1lLCBlcnJvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBlcnJvcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubmFtZSA9IG9iamVjdE5hbWUgKyBcIk9iamVjdERpc3Bvc2VkXCI7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBlcnJvcjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0RGlzcG9zZWRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuT2JqZWN0RGlzcG9zZWRFcnJvciA9IE9iamVjdERpc3Bvc2VkRXJyb3I7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVycm9yLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFcnJvcl8xID0gcmVxdWlyZShcIi4vRXJyb3JcIik7XG52YXIgR3VpZF8xID0gcmVxdWlyZShcIi4vR3VpZFwiKTtcbnZhciBFdmVudFNvdXJjZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudFNvdXJjZShtZXRhZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByaXZFdmVudExpc3RlbmVycyA9IHt9O1xuICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25FdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IChuZXcgRXJyb3JfMS5PYmplY3REaXNwb3NlZEVycm9yKFwiRXZlbnRTb3VyY2VcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcGFyYW1OYW1lIGluIF90aGlzLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5tZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXZlbnQubWV0YWRhdGFbcGFyYW1OYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5tZXRhZGF0YVtwYXJhbU5hbWVdID0gX3RoaXMubWV0YWRhdGFbcGFyYW1OYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBldmVudElkIGluIF90aGlzLnByaXZFdmVudExpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIGlmIChldmVudElkICYmIF90aGlzLnByaXZFdmVudExpc3RlbmVyc1tldmVudElkXSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2RXZlbnRMaXN0ZW5lcnNbZXZlbnRJZF0oZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hdHRhY2ggPSBmdW5jdGlvbiAob25FdmVudENhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSBHdWlkXzEuY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgICAgICAgICAgX3RoaXMucHJpdkV2ZW50TGlzdGVuZXJzW2lkXSA9IG9uRXZlbnRDYWxsYmFjaztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGV0YWNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5wcml2RXZlbnRMaXN0ZW5lcnNbaWRdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmF0dGFjaExpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuYXR0YWNoKGxpc3RlbmVyLm9uRXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlzRGlzcG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdklzRGlzcG9zZWQ7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnByaXZFdmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5wcml2SXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdk1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudFNvdXJjZS5wcm90b3R5cGUsIFwibWV0YWRhdGFcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZNZXRhZGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEV2ZW50U291cmNlO1xufSgpKTtcbmV4cG9ydHMuRXZlbnRTb3VyY2UgPSBFdmVudFNvdXJjZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXZlbnRTb3VyY2UuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVycm9yXzEgPSByZXF1aXJlKFwiLi9FcnJvclwiKTtcbnZhciBFdmVudFNvdXJjZV8xID0gcmVxdWlyZShcIi4vRXZlbnRTb3VyY2VcIik7XG52YXIgRXZlbnRzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50cygpIHtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50cywgXCJpbnN0YW5jZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEV2ZW50cy5wcml2SW5zdGFuY2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEV2ZW50cy5wcml2SW5zdGFuY2UgPSBuZXcgRXZlbnRTb3VyY2VfMS5FdmVudFNvdXJjZSgpO1xuICAgIEV2ZW50cy5zZXRFdmVudFNvdXJjZSA9IGZ1bmN0aW9uIChldmVudFNvdXJjZSkge1xuICAgICAgICBpZiAoIWV2ZW50U291cmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5Bcmd1bWVudE51bGxFcnJvcihcImV2ZW50U291cmNlXCIpO1xuICAgICAgICB9XG4gICAgICAgIEV2ZW50cy5wcml2SW5zdGFuY2UgPSBldmVudFNvdXJjZTtcbiAgICB9O1xuICAgIHJldHVybiBFdmVudHM7XG59KCkpO1xuZXhwb3J0cy5FdmVudHMgPSBFdmVudHM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV2ZW50cy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vQXVkaW9Tb3VyY2VFdmVudHNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vQ29ubmVjdGlvbkV2ZW50c1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9Db25uZWN0aW9uTWVzc2FnZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9Db25uZWN0aW9uT3BlblJlc3BvbnNlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0Vycm9yXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0V2ZW50c1wiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9FdmVudFNvdXJjZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9HdWlkXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0lDb25uZWN0aW9uXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0xpc3RcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vUGxhdGZvcm1FdmVudFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9Qcm9taXNlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1F1ZXVlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1Jhd1dlYnNvY2tldE1lc3NhZ2VcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vUmlmZlBjbUVuY29kZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vU3RyZWFtXCIpKTtcbnZhciBUcmFuc2xhdGlvblN0YXR1c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi5zcGVlY2gvVHJhbnNsYXRpb25TdGF0dXNcIik7XG5leHBvcnRzLlRyYW5zbGF0aW9uU3RhdHVzID0gVHJhbnNsYXRpb25TdGF0dXNfMS5UcmFuc2xhdGlvblN0YXR1cztcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0NodW5rZWRBcnJheUJ1ZmZlclN0cmVhbVwiKSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4cG9ydHMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNyZWF0ZUd1aWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB2YXIgZ3VpZCA9IFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgciA9IChkICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMDtcbiAgICAgICAgZCA9IE1hdGguZmxvb3IoZCAvIDE2KTtcbiAgICAgICAgcmV0dXJuIChjID09PSBcInhcIiA/IHIgOiAociAmIDB4MyB8IDB4OCkpLnRvU3RyaW5nKDE2KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZ3VpZDtcbn07XG5leHBvcnRzLmNyZWF0ZUd1aWQgPSBjcmVhdGVHdWlkO1xudmFyIGNyZWF0ZU5vRGFzaEd1aWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUd1aWQoKS5yZXBsYWNlKG5ldyBSZWdFeHAoXCItXCIsIFwiZ1wiKSwgXCJcIikudG9VcHBlckNhc2UoKTtcbn07XG5leHBvcnRzLmNyZWF0ZU5vRGFzaEd1aWQgPSBjcmVhdGVOb0Rhc2hHdWlkO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1HdWlkLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb25uZWN0aW9uU3RhdGU7XG4oZnVuY3Rpb24gKENvbm5lY3Rpb25TdGF0ZSkge1xuICAgIENvbm5lY3Rpb25TdGF0ZVtDb25uZWN0aW9uU3RhdGVbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgICBDb25uZWN0aW9uU3RhdGVbQ29ubmVjdGlvblN0YXRlW1wiQ29ubmVjdGVkXCJdID0gMV0gPSBcIkNvbm5lY3RlZFwiO1xuICAgIENvbm5lY3Rpb25TdGF0ZVtDb25uZWN0aW9uU3RhdGVbXCJDb25uZWN0aW5nXCJdID0gMl0gPSBcIkNvbm5lY3RpbmdcIjtcbiAgICBDb25uZWN0aW9uU3RhdGVbQ29ubmVjdGlvblN0YXRlW1wiRGlzY29ubmVjdGVkXCJdID0gM10gPSBcIkRpc2Nvbm5lY3RlZFwiO1xufSkoQ29ubmVjdGlvblN0YXRlID0gZXhwb3J0cy5Db25uZWN0aW9uU3RhdGUgfHwgKGV4cG9ydHMuQ29ubmVjdGlvblN0YXRlID0ge30pKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUNvbm5lY3Rpb24uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVycm9yXzEgPSByZXF1aXJlKFwiLi9FcnJvclwiKTtcbnZhciBMaXN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExpc3QobGlzdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByaXZTdWJzY3JpcHRpb25JZENvdW50ZXIgPSAwO1xuICAgICAgICB0aGlzLnByaXZBZGRTdWJzY3JpcHRpb25zID0ge307XG4gICAgICAgIHRoaXMucHJpdlJlbW92ZVN1YnNjcmlwdGlvbnMgPSB7fTtcbiAgICAgICAgdGhpcy5wcml2RGlzcG9zZWRTdWJzY3JpcHRpb25zID0ge307XG4gICAgICAgIHRoaXMucHJpdkRpc3Bvc2VSZWFzb24gPSBudWxsO1xuICAgICAgICB0aGlzLmdldCA9IGZ1bmN0aW9uIChpdGVtSW5kZXgpIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZMaXN0W2l0ZW1JbmRleF07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0KDApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxhc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0KF90aGlzLmxlbmd0aCgpIC0gMSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWRkID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgX3RoaXMuaW5zZXJ0QXQoX3RoaXMucHJpdkxpc3QubGVuZ3RoLCBpdGVtKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbnNlcnRBdCA9IGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2TGlzdC51bnNoaWZ0KGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IF90aGlzLnByaXZMaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZMaXN0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2TGlzdC5zcGxpY2UoaW5kZXgsIDAsIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMudHJpZ2dlclN1YnNjcmlwdGlvbnMoX3RoaXMucHJpdkFkZFN1YnNjcmlwdGlvbnMpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlbW92ZUZpcnN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3ZlQXQoMCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVtb3ZlTGFzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbW92ZUF0KF90aGlzLmxlbmd0aCgpIC0gMSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVtb3ZlQXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbW92ZShpbmRleCwgMSlbMF07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24gKGluZGV4LCBjb3VudCkge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICB2YXIgcmVtb3ZlZEVsZW1lbnRzID0gX3RoaXMucHJpdkxpc3Quc3BsaWNlKGluZGV4LCBjb3VudCk7XG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyU3Vic2NyaXB0aW9ucyhfdGhpcy5wcml2UmVtb3ZlU3Vic2NyaXB0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gcmVtb3ZlZEVsZW1lbnRzO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICBfdGhpcy5yZW1vdmUoMCwgX3RoaXMubGVuZ3RoKCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZMaXN0Lmxlbmd0aDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkFkZGVkID0gZnVuY3Rpb24gKGFkZGVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbklkID0gX3RoaXMucHJpdlN1YnNjcmlwdGlvbklkQ291bnRlcisrO1xuICAgICAgICAgICAgX3RoaXMucHJpdkFkZFN1YnNjcmlwdGlvbnNbc3Vic2NyaXB0aW9uSWRdID0gYWRkZWRDYWxsYmFjaztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGV0YWNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5wcml2QWRkU3Vic2NyaXB0aW9uc1tzdWJzY3JpcHRpb25JZF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25SZW1vdmVkID0gZnVuY3Rpb24gKHJlbW92ZWRDYWxsYmFjaykge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uSWQgPSBfdGhpcy5wcml2U3Vic2NyaXB0aW9uSWRDb3VudGVyKys7XG4gICAgICAgICAgICBfdGhpcy5wcml2UmVtb3ZlU3Vic2NyaXB0aW9uc1tzdWJzY3JpcHRpb25JZF0gPSByZW1vdmVkQ2FsbGJhY2s7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRldGFjaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMucHJpdlJlbW92ZVN1YnNjcmlwdGlvbnNbc3Vic2NyaXB0aW9uSWRdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uRGlzcG9zZWQgPSBmdW5jdGlvbiAoZGlzcG9zZWRDYWxsYmFjaykge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uSWQgPSBfdGhpcy5wcml2U3Vic2NyaXB0aW9uSWRDb3VudGVyKys7XG4gICAgICAgICAgICBfdGhpcy5wcml2RGlzcG9zZWRTdWJzY3JpcHRpb25zW3N1YnNjcmlwdGlvbklkXSA9IGRpc3Bvc2VkQ2FsbGJhY2s7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRldGFjaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMucHJpdkRpc3Bvc2VkU3Vic2NyaXB0aW9uc1tzdWJzY3JpcHRpb25JZF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuam9pbiA9IGZ1bmN0aW9uIChzZXBlcmF0b3IpIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZMaXN0LmpvaW4oc2VwZXJhdG9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50b0FycmF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNsb25lQ29weSA9IEFycmF5KCk7XG4gICAgICAgICAgICBfdGhpcy5wcml2TGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICBjbG9uZUNvcHkucHVzaCh2YWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY2xvbmVDb3B5O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFueSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMud2hlcmUoY2FsbGJhY2spLmxlbmd0aCgpID4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5sZW5ndGgoKSA+IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWxsID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBfdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy53aGVyZShjYWxsYmFjaykubGVuZ3RoKCkgPT09IF90aGlzLmxlbmd0aCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpcy5sZW5ndGgoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soX3RoaXMucHJpdkxpc3RbaV0sIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlbGVjdCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICB2YXIgc2VsZWN0TGlzdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpcy5wcml2TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHNlbGVjdExpc3QucHVzaChjYWxsYmFjayhfdGhpcy5wcml2TGlzdFtpXSwgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaXN0KHNlbGVjdExpc3QpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLndoZXJlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBfdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJlZExpc3QgPSBuZXcgTGlzdCgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpcy5wcml2TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayhfdGhpcy5wcml2TGlzdFtpXSwgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRMaXN0LmFkZChfdGhpcy5wcml2TGlzdFtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkTGlzdDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vcmRlckJ5ID0gZnVuY3Rpb24gKGNvbXBhcmVGbikge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICB2YXIgY2xvbmVkQXJyYXkgPSBfdGhpcy50b0FycmF5KCk7XG4gICAgICAgICAgICB2YXIgb3JkZXJlZEFycmF5ID0gY2xvbmVkQXJyYXkuc29ydChjb21wYXJlRm4pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaXN0KG9yZGVyZWRBcnJheSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub3JkZXJCeURlc2MgPSBmdW5jdGlvbiAoY29tcGFyZUZuKSB7XG4gICAgICAgICAgICBfdGhpcy50aHJvd0lmRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5vcmRlckJ5KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBjb21wYXJlRm4oYiwgYSk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExpc3QoX3RoaXMudG9BcnJheSgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb25jYXQgPSBmdW5jdGlvbiAobGlzdCkge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExpc3QoX3RoaXMucHJpdkxpc3QuY29uY2F0KGxpc3QudG9BcnJheSgpKSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29uY2F0QXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaXN0KF90aGlzLnByaXZMaXN0LmNvbmNhdChhcnJheSkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlzRGlzcG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdkxpc3QgPT0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc0Rpc3Bvc2VkKCkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2RGlzcG9zZVJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2TGlzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdkFkZFN1YnNjcmlwdGlvbnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZW1vdmVTdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfdGhpcy50cmlnZ2VyU3Vic2NyaXB0aW9ucyhfdGhpcy5wcml2RGlzcG9zZWRTdWJzY3JpcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNEaXNwb3NlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXzEuT2JqZWN0RGlzcG9zZWRFcnJvcihcIkxpc3RcIiwgX3RoaXMucHJpdkRpc3Bvc2VSZWFzb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRyaWdnZXJTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc3Vic2NyaXB0aW9uSWQgaW4gc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnNbc3Vic2NyaXB0aW9uSWRdKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdkxpc3QgPSBbXTtcbiAgICAgICAgLy8gY29weSB0aGUgbGlzdCByYXRoZXIgdGhhbiB0YWtpbmcgYXMgaXMuXG4gICAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGxpc3RfMSA9IGxpc3Q7IF9pIDwgbGlzdF8xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gbGlzdF8xW19pXTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZMaXN0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIExpc3Q7XG59KCkpO1xuZXhwb3J0cy5MaXN0ID0gTGlzdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGlzdC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgR3VpZF8xID0gcmVxdWlyZShcIi4vR3VpZFwiKTtcbnZhciBFdmVudFR5cGU7XG4oZnVuY3Rpb24gKEV2ZW50VHlwZSkge1xuICAgIEV2ZW50VHlwZVtFdmVudFR5cGVbXCJEZWJ1Z1wiXSA9IDBdID0gXCJEZWJ1Z1wiO1xuICAgIEV2ZW50VHlwZVtFdmVudFR5cGVbXCJJbmZvXCJdID0gMV0gPSBcIkluZm9cIjtcbiAgICBFdmVudFR5cGVbRXZlbnRUeXBlW1wiV2FybmluZ1wiXSA9IDJdID0gXCJXYXJuaW5nXCI7XG4gICAgRXZlbnRUeXBlW0V2ZW50VHlwZVtcIkVycm9yXCJdID0gM10gPSBcIkVycm9yXCI7XG59KShFdmVudFR5cGUgPSBleHBvcnRzLkV2ZW50VHlwZSB8fCAoZXhwb3J0cy5FdmVudFR5cGUgPSB7fSkpO1xudmFyIFBsYXRmb3JtRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGxhdGZvcm1FdmVudChldmVudE5hbWUsIGV2ZW50VHlwZSkge1xuICAgICAgICB0aGlzLnByaXZOYW1lID0gZXZlbnROYW1lO1xuICAgICAgICB0aGlzLnByaXZFdmVudElkID0gR3VpZF8xLmNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgdGhpcy5wcml2RXZlbnRUaW1lID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICB0aGlzLnByaXZFdmVudFR5cGUgPSBldmVudFR5cGU7XG4gICAgICAgIHRoaXMucHJpdk1ldGFkYXRhID0ge307XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQbGF0Zm9ybUV2ZW50LnByb3RvdHlwZSwgXCJuYW1lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2TmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBsYXRmb3JtRXZlbnQucHJvdG90eXBlLCBcImV2ZW50SWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZFdmVudElkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUGxhdGZvcm1FdmVudC5wcm90b3R5cGUsIFwiZXZlbnRUaW1lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2RXZlbnRUaW1lO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUGxhdGZvcm1FdmVudC5wcm90b3R5cGUsIFwiZXZlbnRUeXBlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2RXZlbnRUeXBlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUGxhdGZvcm1FdmVudC5wcm90b3R5cGUsIFwibWV0YWRhdGFcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZNZXRhZGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFBsYXRmb3JtRXZlbnQ7XG59KCkpO1xuZXhwb3J0cy5QbGF0Zm9ybUV2ZW50ID0gUGxhdGZvcm1FdmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGxhdGZvcm1FdmVudC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXJyb3JfMSA9IHJlcXVpcmUoXCIuL0Vycm9yXCIpO1xudmFyIFByb21pc2VTdGF0ZTtcbihmdW5jdGlvbiAoUHJvbWlzZVN0YXRlKSB7XG4gICAgUHJvbWlzZVN0YXRlW1Byb21pc2VTdGF0ZVtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIFByb21pc2VTdGF0ZVtQcm9taXNlU3RhdGVbXCJSZXNvbHZlZFwiXSA9IDFdID0gXCJSZXNvbHZlZFwiO1xuICAgIFByb21pc2VTdGF0ZVtQcm9taXNlU3RhdGVbXCJSZWplY3RlZFwiXSA9IDJdID0gXCJSZWplY3RlZFwiO1xufSkoUHJvbWlzZVN0YXRlID0gZXhwb3J0cy5Qcm9taXNlU3RhdGUgfHwgKGV4cG9ydHMuUHJvbWlzZVN0YXRlID0ge30pKTtcbnZhciBQcm9taXNlUmVzdWx0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByb21pc2VSZXN1bHQocHJvbWlzZVJlc3VsdEV2ZW50U291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMudGhyb3dJZkVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBfdGhpcy5lcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcHJvbWlzZVJlc3VsdEV2ZW50U291cmNlLm9uKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMucHJpdklzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdklzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2SXNFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZSZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5wcml2SXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2SXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZJc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2RXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm9taXNlUmVzdWx0LnByb3RvdHlwZSwgXCJpc0NvbXBsZXRlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdklzQ29tcGxldGVkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJvbWlzZVJlc3VsdC5wcm90b3R5cGUsIFwiaXNFcnJvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdklzRXJyb3I7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm9taXNlUmVzdWx0LnByb3RvdHlwZSwgXCJlcnJvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJvbWlzZVJlc3VsdC5wcm90b3R5cGUsIFwicmVzdWx0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZVJlc3VsdDtcbn0oKSk7XG5leHBvcnRzLlByb21pc2VSZXN1bHQgPSBQcm9taXNlUmVzdWx0O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgUHJvbWlzZVJlc3VsdEV2ZW50U291cmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByb21pc2VSZXN1bHRFdmVudFNvdXJjZSgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zZXRSZXN1bHQgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBfdGhpcy5wcml2T25TZXRSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMucHJpdk9uU2V0RXJyb3IoZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uID0gZnVuY3Rpb24gKG9uU2V0UmVzdWx0LCBvblNldEVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5wcml2T25TZXRSZXN1bHQgPSBvblNldFJlc3VsdDtcbiAgICAgICAgICAgIF90aGlzLnByaXZPblNldEVycm9yID0gb25TZXRFcnJvcjtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2VSZXN1bHRFdmVudFNvdXJjZTtcbn0oKSk7XG5leHBvcnRzLlByb21pc2VSZXN1bHRFdmVudFNvdXJjZSA9IFByb21pc2VSZXN1bHRFdmVudFNvdXJjZTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIFByb21pc2VIZWxwZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJvbWlzZUhlbHBlcigpIHtcbiAgICB9XG4gICAgUHJvbWlzZUhlbHBlci53aGVuQWxsID0gZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgICAgIGlmICghcHJvbWlzZXMgfHwgcHJvbWlzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5Bcmd1bWVudE51bGxFcnJvcihcInByb21pc2VzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICAgIHZhciBjb21wbGV0ZWRQcm9taXNlcyA9IDA7XG4gICAgICAgIHZhciBjaGVja0ZvckNvbXBsZXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb21wbGV0ZWRQcm9taXNlcysrO1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRlZFByb21pc2VzID09PSBwcm9taXNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9ycy5qb2luKFwiLCBcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBwcm9taXNlc18xID0gcHJvbWlzZXM7IF9pIDwgcHJvbWlzZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBwcm9taXNlID0gcHJvbWlzZXNfMVtfaV07XG4gICAgICAgICAgICBwcm9taXNlLm9uKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tGb3JDb21wbGV0aW9uKCk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICAgICAgICAgIGNoZWNrRm9yQ29tcGxldGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICB9O1xuICAgIFByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICB9O1xuICAgIFByb21pc2VIZWxwZXIuZnJvbUVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIFByb21pc2VIZWxwZXI7XG59KCkpO1xuZXhwb3J0cy5Qcm9taXNlSGVscGVyID0gUHJvbWlzZUhlbHBlcjtcbi8vIFRPRE86IHJlcGxhY2Ugd2l0aCBFUzYgcHJvbWlzZXNcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIFByb21pc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJvbWlzZShzaW5rKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZTaW5rLnJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb250aW51ZVdpdGggPSBmdW5jdGlvbiAoY29udGludWF0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICghY29udGludWF0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5Bcmd1bWVudE51bGxFcnJvcihcImNvbnRpbnVhdGlvbkNhbGxiYWNrXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNvbnRpbnVhdGlvbkRlZmVycmFsID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgICAgICBfdGhpcy5wcml2U2luay5vbihmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250aW51YXRpb25SZXN1bHQgPSBjb250aW51YXRpb25DYWxsYmFjayhfdGhpcy5wcml2U2luay5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZXNvbHZlKGNvbnRpbnVhdGlvblJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVhdGlvbkRlZmVycmFsLnJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGludWF0aW9uUmVzdWx0ID0gY29udGludWF0aW9uQ2FsbGJhY2soX3RoaXMucHJpdlNpbmsucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVzb2x2ZShjb250aW51YXRpb25SZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZWplY3QoXCInRXJyb3IgaGFuZGxlciBmb3IgZXJyb3IgXCIgKyBlcnJvciArIFwiIHRocmV3IGVycm9yIFwiICsgZSArIFwiJ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb250aW51YXRpb25EZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25TdWNjZXNzQ29udGludWVXaXRoID0gZnVuY3Rpb24gKGNvbnRpbnVhdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoIWNvbnRpbnVhdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXzEuQXJndW1lbnROdWxsRXJyb3IoXCJjb250aW51YXRpb25DYWxsYmFja1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb250aW51YXRpb25EZWZlcnJhbCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICAgICAgX3RoaXMucHJpdlNpbmsub24oZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGludWF0aW9uUmVzdWx0ID0gY29udGludWF0aW9uQ2FsbGJhY2socik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVhdGlvbkRlZmVycmFsLnJlc29sdmUoY29udGludWF0aW9uUmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVhdGlvbkRlZmVycmFsLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb250aW51YXRpb25EZWZlcnJhbC5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29udGludWVXaXRoUHJvbWlzZSA9IGZ1bmN0aW9uIChjb250aW51YXRpb25DYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKCFjb250aW51YXRpb25DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcl8xLkFyZ3VtZW50TnVsbEVycm9yKFwiY29udGludWF0aW9uQ2FsbGJhY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29udGludWF0aW9uRGVmZXJyYWwgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIF90aGlzLnByaXZTaW5rLm9uKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRpbnVhdGlvblByb21pc2UgPSBjb250aW51YXRpb25DYWxsYmFjayhfdGhpcy5wcml2U2luay5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRpbnVhdGlvblByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIidDb250aW51YXRpb24gY2FsbGJhY2sgZGlkIG5vdCByZXR1cm4gcHJvbWlzZSdcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uUHJvbWlzZS5vbihmdW5jdGlvbiAoY29udGludWF0aW9uUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZXNvbHZlKGNvbnRpbnVhdGlvblJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRpbnVhdGlvblByb21pc2UgPSBjb250aW51YXRpb25DYWxsYmFjayhfdGhpcy5wcml2U2luay5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRpbnVhdGlvblByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnRpbnVhdGlvbiBjYWxsYmFjayBkaWQgbm90IHJldHVybiBwcm9taXNlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVhdGlvblByb21pc2Uub24oZnVuY3Rpb24gKGNvbnRpbnVhdGlvblJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVzb2x2ZShjb250aW51YXRpb25SZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVqZWN0KFwiJ0Vycm9yIGhhbmRsZXIgZm9yIGVycm9yIFwiICsgZXJyb3IgKyBcIiB0aHJldyBlcnJvciBcIiArIGUgKyBcIidcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGludWF0aW9uRGVmZXJyYWwucHJvbWlzZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uU3VjY2Vzc0NvbnRpbnVlV2l0aFByb21pc2UgPSBmdW5jdGlvbiAoY29udGludWF0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICghY29udGludWF0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5Bcmd1bWVudE51bGxFcnJvcihcImNvbnRpbnVhdGlvbkNhbGxiYWNrXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNvbnRpbnVhdGlvbkRlZmVycmFsID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgICAgICBfdGhpcy5wcml2U2luay5vbihmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250aW51YXRpb25Qcm9taXNlID0gY29udGludWF0aW9uQ2FsbGJhY2socik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29udGludWF0aW9uUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udGludWF0aW9uIGNhbGxiYWNrIGRpZCBub3QgcmV0dXJuIHByb21pc2VcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGludWF0aW9uUHJvbWlzZS5vbihmdW5jdGlvbiAoY29udGludWF0aW9uUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZXNvbHZlKGNvbnRpbnVhdGlvblJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51YXRpb25EZWZlcnJhbC5yZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29udGludWF0aW9uRGVmZXJyYWwucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkRlZmVycmFsLnByb21pc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbiA9IGZ1bmN0aW9uIChzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICghc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXzEuQXJndW1lbnROdWxsRXJyb3IoXCJzdWNjZXNzQ2FsbGJhY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5Bcmd1bWVudE51bGxFcnJvcihcImVycm9yQ2FsbGJhY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5wcml2U2luay5vbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZpbmFsbHkgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5Bcmd1bWVudE51bGxFcnJvcihcImNhbGxiYWNrXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrV3JhcHBlciA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMub24oY2FsbGJhY2tXcmFwcGVyLCBjYWxsYmFja1dyYXBwZXIpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByaXZTaW5rID0gc2luaztcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2U7XG59KCkpO1xuZXhwb3J0cy5Qcm9taXNlID0gUHJvbWlzZTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIERlZmVycmVkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlZmVycmVkKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZTaW5rLnN0YXRlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByb21pc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJpdlByb21pc2U7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVzb2x2ZSA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIF90aGlzLnByaXZTaW5rLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZWplY3QgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIF90aGlzLnByaXZTaW5rLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdlNpbmsgPSBuZXcgU2luaygpO1xuICAgICAgICB0aGlzLnByaXZQcm9taXNlID0gbmV3IFByb21pc2UodGhpcy5wcml2U2luayk7XG4gICAgfVxuICAgIHJldHVybiBEZWZlcnJlZDtcbn0oKSk7XG5leHBvcnRzLkRlZmVycmVkID0gRGVmZXJyZWQ7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBTaW5rID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNpbmsoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucHJpdlN0YXRlID0gUHJvbWlzZVN0YXRlLk5vbmU7XG4gICAgICAgIHRoaXMucHJpdlByb21pc2VSZXN1bHQgPSBudWxsO1xuICAgICAgICB0aGlzLnByaXZQcm9taXNlUmVzdWx0RXZlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcml2U3VjY2Vzc0hhbmRsZXJzID0gW107XG4gICAgICAgIHRoaXMucHJpdkVycm9ySGFuZGxlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZTdGF0ZSAhPT0gUHJvbWlzZVN0YXRlLk5vbmUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInQ2Fubm90IHJlc29sdmUgYSBjb21wbGV0ZWQgcHJvbWlzZSdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5wcml2U3RhdGUgPSBQcm9taXNlU3RhdGUuUmVzb2x2ZWQ7XG4gICAgICAgICAgICBfdGhpcy5wcml2UHJvbWlzZVJlc3VsdEV2ZW50cy5zZXRSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RoaXMucHJpdlN1Y2Nlc3NIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIF90aGlzLmV4ZWN1dGVTdWNjZXNzQ2FsbGJhY2socmVzdWx0LCBfdGhpcy5wcml2U3VjY2Vzc0hhbmRsZXJzW2ldLCBfdGhpcy5wcml2RXJyb3JIYW5kbGVyc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5kZXRhY2hIYW5kbGVycygpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlamVjdCA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZTdGF0ZSAhPT0gUHJvbWlzZVN0YXRlLk5vbmUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInQ2Fubm90IHJlamVjdCBhIGNvbXBsZXRlZCBwcm9taXNlJ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnByaXZTdGF0ZSA9IFByb21pc2VTdGF0ZS5SZWplY3RlZDtcbiAgICAgICAgICAgIF90aGlzLnByaXZQcm9taXNlUmVzdWx0RXZlbnRzLnNldEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBfdGhpcy5wcml2RXJyb3JIYW5kbGVyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JIYW5kbGVyID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIF90aGlzLmV4ZWN1dGVFcnJvckNhbGxiYWNrKGVycm9yLCBlcnJvckhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuZGV0YWNoSGFuZGxlcnMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbiA9IGZ1bmN0aW9uIChzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmIChzdWNjZXNzQ2FsbGJhY2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayA9IGZ1bmN0aW9uIChyKSB7IHJldHVybjsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5wcml2U3RhdGUgPT09IFByb21pc2VTdGF0ZS5Ob25lKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdlN1Y2Nlc3NIYW5kbGVycy5wdXNoKHN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdkVycm9ySGFuZGxlcnMucHVzaChlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcml2U3RhdGUgPT09IFByb21pc2VTdGF0ZS5SZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5leGVjdXRlU3VjY2Vzc0NhbGxiYWNrKF90aGlzLnByaXZQcm9taXNlUmVzdWx0LnJlc3VsdCwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMucHJpdlN0YXRlID09PSBQcm9taXNlU3RhdGUuUmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXhlY3V0ZUVycm9yQ2FsbGJhY2soX3RoaXMucHJpdlByb21pc2VSZXN1bHQuZXJyb3IsIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5kZXRhY2hIYW5kbGVycygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmV4ZWN1dGVTdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbiAocmVzdWx0LCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmV4ZWN1dGVFcnJvckNhbGxiYWNrKFwiJ1VuaGFuZGxlZCBjYWxsYmFjayBlcnJvcjogXCIgKyBlICsgXCInXCIsIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmV4ZWN1dGVFcnJvckNhbGxiYWNrID0gZnVuY3Rpb24gKGVycm9yLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInVW5oYW5kbGVkIGNhbGxiYWNrIGVycm9yOiBcIiArIGUgKyBcIi4gSW5uZXJFcnJvcjogXCIgKyBlcnJvciArIFwiJ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInVW5oYW5kbGVkIGVycm9yOiBcIiArIGVycm9yICsgXCInXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRldGFjaEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMucHJpdkVycm9ySGFuZGxlcnMgPSBbXTtcbiAgICAgICAgICAgIF90aGlzLnByaXZTdWNjZXNzSGFuZGxlcnMgPSBbXTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcml2UHJvbWlzZVJlc3VsdEV2ZW50cyA9IG5ldyBQcm9taXNlUmVzdWx0RXZlbnRTb3VyY2UoKTtcbiAgICAgICAgdGhpcy5wcml2UHJvbWlzZVJlc3VsdCA9IG5ldyBQcm9taXNlUmVzdWx0KHRoaXMucHJpdlByb21pc2VSZXN1bHRFdmVudHMpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2luay5wcm90b3R5cGUsIFwic3RhdGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTdGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNpbmsucHJvdG90eXBlLCBcInJlc3VsdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb21pc2VSZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBTaW5rO1xufSgpKTtcbmV4cG9ydHMuU2luayA9IFNpbms7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb21pc2UuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVycm9yXzEgPSByZXF1aXJlKFwiLi9FcnJvclwiKTtcbnZhciBMaXN0XzEgPSByZXF1aXJlKFwiLi9MaXN0XCIpO1xudmFyIFByb21pc2VfMSA9IHJlcXVpcmUoXCIuL1Byb21pc2VcIik7XG52YXIgU3Vic2NyaWJlclR5cGU7XG4oZnVuY3Rpb24gKFN1YnNjcmliZXJUeXBlKSB7XG4gICAgU3Vic2NyaWJlclR5cGVbU3Vic2NyaWJlclR5cGVbXCJEZXF1ZXVlXCJdID0gMF0gPSBcIkRlcXVldWVcIjtcbiAgICBTdWJzY3JpYmVyVHlwZVtTdWJzY3JpYmVyVHlwZVtcIlBlZWtcIl0gPSAxXSA9IFwiUGVla1wiO1xufSkoU3Vic2NyaWJlclR5cGUgfHwgKFN1YnNjcmliZXJUeXBlID0ge30pKTtcbnZhciBRdWV1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBRdWV1ZShsaXN0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucHJpdlByb21pc2VTdG9yZSA9IG5ldyBMaXN0XzEuTGlzdCgpO1xuICAgICAgICB0aGlzLnByaXZJc0RyYWluSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZJc0Rpc3Bvc2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByaXZEaXNwb3NlUmVhc29uID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbnF1ZXVlID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlKCk7XG4gICAgICAgICAgICBfdGhpcy5lbnF1ZXVlRnJvbVByb21pc2UoUHJvbWlzZV8xLlByb21pc2VIZWxwZXIuZnJvbVJlc3VsdChpdGVtKSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZW5xdWV1ZUZyb21Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgICAgIF90aGlzLnRocm93SWZEaXNwb3NlKCk7XG4gICAgICAgICAgICBfdGhpcy5wcml2UHJvbWlzZVN0b3JlLmFkZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKF90aGlzLnByaXZQcm9taXNlU3RvcmUubGVuZ3RoKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMucHJpdlByb21pc2VTdG9yZS5maXJzdCgpLnJlc3VsdCgpLmlzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gX3RoaXMucHJpdlByb21pc2VTdG9yZS5yZW1vdmVGaXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLnJlc3VsdCgpLmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2TGlzdC5hZGQocC5yZXN1bHQoKS5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogTG9nIGFzIHdhcm5pbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kZXF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZFN1YnNjcmliZXIgPSBuZXcgUHJvbWlzZV8xLkRlZmVycmVkKCk7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJpdlN1YnNjcmliZXJzKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdlN1YnNjcmliZXJzLmFkZCh7IGRlZmVycmFsOiBkZWZlcnJlZFN1YnNjcmliZXIsIHR5cGU6IFN1YnNjcmliZXJUeXBlLkRlcXVldWUgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZHJhaW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZFN1YnNjcmliZXIucHJvbWlzZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBlZWsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy50aHJvd0lmRGlzcG9zZSgpO1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkU3Vic2NyaWJlciA9IG5ldyBQcm9taXNlXzEuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHZhciBzdWJzID0gX3RoaXMucHJpdlN1YnNjcmliZXJzO1xuICAgICAgICAgICAgaWYgKHN1YnMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2U3Vic2NyaWJlcnMuYWRkKHsgZGVmZXJyYWw6IGRlZmVycmVkU3Vic2NyaWJlciwgdHlwZTogU3Vic2NyaWJlclR5cGUuUGVlayB9KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5kcmFpbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkU3Vic2NyaWJlci5wcm9taXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMudGhyb3dJZkRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5wcml2TGlzdC5sZW5ndGgoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZTdWJzY3JpYmVycyA9PSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRyYWluQW5kRGlzcG9zZSA9IGZ1bmN0aW9uIChwZW5kaW5nSXRlbVByb2Nlc3NvciwgcmVhc29uKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzRGlzcG9zZWQoKSAmJiAhX3RoaXMucHJpdklzRGlzcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdkRpc3Bvc2VSZWFzb24gPSByZWFzb247XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdklzRGlzcG9zaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgc3VicyA9IF90aGlzLnByaXZTdWJzY3JpYmVycztcbiAgICAgICAgICAgICAgICBpZiAoc3Vicykge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3Vicy5sZW5ndGgoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gc3Vicy5yZW1vdmVGaXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogdGhpcyBuZWVkcyB3b3JrIChSZXNvbHZlKG51bGwpIGluc3RlYWQ/KS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZGVmZXJyYWwucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3Vic2NyaWJlci5kZWZlcnJhbC5yZWplY3QoXCJEaXNwb3NlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBub3RlOiB0aGlzIGJsb2NrIGFzc3VtZXMgY29vcGVyYXRpdmUgbXVsdGl0YXNraW5nLCBpLmUuLFxuICAgICAgICAgICAgICAgICAgICAvLyBiZXR3ZWVuIHRoZSBpZi1zdGF0ZW1lbnQgYW5kIHRoZSBhc3NpZ25tZW50IHRoZXJlIGFyZSBub1xuICAgICAgICAgICAgICAgICAgICAvLyB0aHJlYWQgc3dpdGNoZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlYXNvbiBpcyB0aGF0IGJldHdlZW4gdGhlIGluaXRpYWwgY29uc3QgPSB0aGlzLjsgYW5kIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gcG9pbnQgdGhlcmUgaXMgdGhlIGRlcnJhbC5yZXNvbHZlKCkgb3BlcmF0aW9uIHRoYXQgbWlnaHQgaGF2ZVxuICAgICAgICAgICAgICAgICAgICAvLyBjYXVzZWQgcmVjdXJzaXZlIGNhbGxzIHRvIHRoZSBRdWV1ZSwgZXNwZWNpYWxseSwgY2FsbGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBEaXNwb3NlKCkgb24gdGhlIHF1ZXVlIGFscmVkeSAod2hpY2ggd291bGQgcmVzZXQgdGhlIHZhclxuICAgICAgICAgICAgICAgICAgICAvLyBoZXJlIHRvIG51bGwhKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhhdCBzaG91bGQgZ2VuZXJhbGx5IGhvbGQgdHJ1ZSBmb3IgamF2YXNjcmlwdC4uLlxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJpdlN1YnNjcmliZXJzID09PSBzdWJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2U3Vic2NyaWJlcnMgPSBzdWJzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBfdGhpcy5wcml2RGV0YWNoYWJsZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXRhY2hhYmxlID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgICAgICBkZXRhY2hhYmxlLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJpdlByb21pc2VTdG9yZS5sZW5ndGgoKSA+IDAgJiYgcGVuZGluZ0l0ZW1Qcm9jZXNzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2VfMS5Qcm9taXNlSGVscGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAud2hlbkFsbChfdGhpcy5wcml2UHJvbWlzZVN0b3JlLnRvQXJyYXkoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb250aW51ZVdpdGgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdlN1YnNjcmliZXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ0l0ZW1Qcm9jZXNzb3IoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZMaXN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZTdWJzY3JpYmVycyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZMaXN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZV8xLlByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgX3RoaXMuZHJhaW5BbmREaXNwb3NlKG51bGwsIHJlYXNvbik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnByaXZJc0RyYWluSW5Qcm9ncmVzcyAmJiAhX3RoaXMucHJpdklzRGlzcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdklzRHJhaW5JblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgc3VicyA9IF90aGlzLnByaXZTdWJzY3JpYmVycztcbiAgICAgICAgICAgICAgICB2YXIgbGlzdHMgPSBfdGhpcy5wcml2TGlzdDtcbiAgICAgICAgICAgICAgICBpZiAoc3VicyAmJiBsaXN0cykge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobGlzdHMubGVuZ3RoKCkgPiAwICYmIHN1YnMubGVuZ3RoKCkgPiAwICYmICFfdGhpcy5wcml2SXNEaXNwb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gc3Vicy5yZW1vdmVGaXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIudHlwZSA9PT0gU3Vic2NyaWJlclR5cGUuUGVlaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZGVmZXJyYWwucmVzb2x2ZShsaXN0cy5maXJzdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXF1ZXVlZEl0ZW0gPSBsaXN0cy5yZW1vdmVGaXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZGVmZXJyYWwucmVzb2x2ZShkZXF1ZXVlZEl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdGU6IHRoaXMgYmxvY2sgYXNzdW1lcyBjb29wZXJhdGl2ZSBtdWx0aXRhc2tpbmcsIGkuZS4sXG4gICAgICAgICAgICAgICAgICAgIC8vIGJldHdlZW4gdGhlIGlmLXN0YXRlbWVudCBhbmQgdGhlIGFzc2lnbm1lbnQgdGhlcmUgYXJlIG5vXG4gICAgICAgICAgICAgICAgICAgIC8vIHRocmVhZCBzd2l0Y2hlcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVhc29uIGlzIHRoYXQgYmV0d2VlbiB0aGUgaW5pdGlhbCBjb25zdCA9IHRoaXMuOyBhbmQgdGhpc1xuICAgICAgICAgICAgICAgICAgICAvLyBwb2ludCB0aGVyZSBpcyB0aGUgZGVycmFsLnJlc29sdmUoKSBvcGVyYXRpb24gdGhhdCBtaWdodCBoYXZlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhdXNlZCByZWN1cnNpdmUgY2FsbHMgdG8gdGhlIFF1ZXVlLCBlc3BlY2lhbGx5LCBjYWxsaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIERpc3Bvc2UoKSBvbiB0aGUgcXVldWUgYWxyZWR5ICh3aGljaCB3b3VsZCByZXNldCB0aGUgdmFyXG4gICAgICAgICAgICAgICAgICAgIC8vIGhlcmUgdG8gbnVsbCEpLlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGF0IHNob3VsZCBnZW5lcmFsbHkgaG9sZCB0cnVlIGZvciBqYXZhc2NyaXB0Li4uXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcml2U3Vic2NyaWJlcnMgPT09IHN1YnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZTdWJzY3JpYmVycyA9IHN1YnM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gbm90ZTogdGhpcyBibG9jayBhc3N1bWVzIGNvb3BlcmF0aXZlIG11bHRpdGFza2luZywgaS5lLixcbiAgICAgICAgICAgICAgICAgICAgLy8gYmV0d2VlbiB0aGUgaWYtc3RhdGVtZW50IGFuZCB0aGUgYXNzaWdubWVudCB0aGVyZSBhcmUgbm9cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhyZWFkIHN3aXRjaGVzLlxuICAgICAgICAgICAgICAgICAgICAvLyBSZWFzb24gaXMgdGhhdCBiZXR3ZWVuIHRoZSBpbml0aWFsIGNvbnN0ID0gdGhpcy47IGFuZCB0aGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHBvaW50IHRoZXJlIGlzIHRoZSBkZXJyYWwucmVzb2x2ZSgpIG9wZXJhdGlvbiB0aGF0IG1pZ2h0IGhhdmVcbiAgICAgICAgICAgICAgICAgICAgLy8gY2F1c2VkIHJlY3Vyc2l2ZSBjYWxscyB0byB0aGUgUXVldWUsIGVzcGVjaWFsbHksIGNhbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcG9zZSgpIG9uIHRoZSBxdWV1ZSBhbHJlZHkgKHdoaWNoIHdvdWxkIHJlc2V0IHRoZSB2YXJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGVyZSB0byBudWxsISkuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoYXQgc2hvdWxkIGdlbmVyYWxseSBob2xkIHRydWUgZm9yIGphdmFzY3JpcHQuLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnByaXZMaXN0ID09PSBsaXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJpdkxpc3QgPSBsaXN0cztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5wcml2SXNEcmFpbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50aHJvd0lmRGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc0Rpc3Bvc2VkKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJpdkRpc3Bvc2VSZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXzEuSW52YWxpZE9wZXJhdGlvbkVycm9yKF90aGlzLnByaXZEaXNwb3NlUmVhc29uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXzEuT2JqZWN0RGlzcG9zZWRFcnJvcihcIlF1ZXVlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMucHJpdklzRGlzcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXzEuSW52YWxpZE9wZXJhdGlvbkVycm9yKFwiUXVldWUgZGlzcG9zaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByaXZMaXN0ID0gbGlzdCA/IGxpc3QgOiBuZXcgTGlzdF8xLkxpc3QoKTtcbiAgICAgICAgdGhpcy5wcml2RGV0YWNoYWJsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5wcml2U3Vic2NyaWJlcnMgPSBuZXcgTGlzdF8xLkxpc3QoKTtcbiAgICAgICAgdGhpcy5wcml2RGV0YWNoYWJsZXMucHVzaCh0aGlzLnByaXZMaXN0Lm9uQWRkZWQodGhpcy5kcmFpbikpO1xuICAgIH1cbiAgICByZXR1cm4gUXVldWU7XG59KCkpO1xuZXhwb3J0cy5RdWV1ZSA9IFF1ZXVlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWV1ZS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29ubmVjdGlvbk1lc3NhZ2VfMSA9IHJlcXVpcmUoXCIuL0Nvbm5lY3Rpb25NZXNzYWdlXCIpO1xudmFyIEVycm9yXzEgPSByZXF1aXJlKFwiLi9FcnJvclwiKTtcbnZhciBHdWlkXzEgPSByZXF1aXJlKFwiLi9HdWlkXCIpO1xudmFyIFJhd1dlYnNvY2tldE1lc3NhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmF3V2Vic29ja2V0TWVzc2FnZShtZXNzYWdlVHlwZSwgcGF5bG9hZCwgaWQpIHtcbiAgICAgICAgdGhpcy5wcml2UGF5bG9hZCA9IG51bGw7XG4gICAgICAgIGlmICghcGF5bG9hZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXzEuQXJndW1lbnROdWxsRXJyb3IoXCJwYXlsb2FkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlVHlwZSA9PT0gQ29ubmVjdGlvbk1lc3NhZ2VfMS5NZXNzYWdlVHlwZS5CaW5hcnkgJiYgIShwYXlsb2FkIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5JbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJQYXlsb2FkIG11c3QgYmUgQXJyYXlCdWZmZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2VUeXBlID09PSBDb25uZWN0aW9uTWVzc2FnZV8xLk1lc3NhZ2VUeXBlLlRleHQgJiYgISh0eXBlb2YgKHBheWxvYWQpID09PSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXzEuSW52YWxpZE9wZXJhdGlvbkVycm9yKFwiUGF5bG9hZCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdk1lc3NhZ2VUeXBlID0gbWVzc2FnZVR5cGU7XG4gICAgICAgIHRoaXMucHJpdlBheWxvYWQgPSBwYXlsb2FkO1xuICAgICAgICB0aGlzLnByaXZJZCA9IGlkID8gaWQgOiBHdWlkXzEuY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmF3V2Vic29ja2V0TWVzc2FnZS5wcm90b3R5cGUsIFwibWVzc2FnZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZNZXNzYWdlVHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJhd1dlYnNvY2tldE1lc3NhZ2UucHJvdG90eXBlLCBcInBheWxvYWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZQYXlsb2FkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmF3V2Vic29ja2V0TWVzc2FnZS5wcm90b3R5cGUsIFwidGV4dENvbnRlbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZNZXNzYWdlVHlwZSA9PT0gQ29ubmVjdGlvbk1lc3NhZ2VfMS5NZXNzYWdlVHlwZS5CaW5hcnkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5JbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJOb3Qgc3VwcG9ydGVkIGZvciBiaW5hcnkgbWVzc2FnZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZQYXlsb2FkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmF3V2Vic29ja2V0TWVzc2FnZS5wcm90b3R5cGUsIFwiYmluYXJ5Q29udGVudFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpdk1lc3NhZ2VUeXBlID09PSBDb25uZWN0aW9uTWVzc2FnZV8xLk1lc3NhZ2VUeXBlLlRleHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5JbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJOb3Qgc3VwcG9ydGVkIGZvciB0ZXh0IG1lc3NhZ2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UGF5bG9hZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJhd1dlYnNvY2tldE1lc3NhZ2UucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBSYXdXZWJzb2NrZXRNZXNzYWdlO1xufSgpKTtcbmV4cG9ydHMuUmF3V2Vic29ja2V0TWVzc2FnZSA9IFJhd1dlYnNvY2tldE1lc3NhZ2U7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJhd1dlYnNvY2tldE1lc3NhZ2UuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJpZmZQY21FbmNvZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJpZmZQY21FbmNvZGVyKGFjdHVhbFNhbXBsZVJhdGUsIGRlc2lyZWRTYW1wbGVSYXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucHJpdkNoYW5uZWxDb3VudCA9IDE7XG4gICAgICAgIHRoaXMuZW5jb2RlID0gZnVuY3Rpb24gKG5lZWRIZWFkZXIsIGFjdHVhbEF1ZGlvRnJhbWUpIHtcbiAgICAgICAgICAgIHZhciBhdWRpb0ZyYW1lID0gX3RoaXMuZG93blNhbXBsZUF1ZGlvRnJhbWUoYWN0dWFsQXVkaW9GcmFtZSwgX3RoaXMucHJpdkFjdHVhbFNhbXBsZVJhdGUsIF90aGlzLnByaXZEZXNpcmVkU2FtcGxlUmF0ZSk7XG4gICAgICAgICAgICBpZiAoIWF1ZGlvRnJhbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhdWRpb0xlbmd0aCA9IGF1ZGlvRnJhbWUubGVuZ3RoICogMjtcbiAgICAgICAgICAgIGlmICghbmVlZEhlYWRlcikge1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXJfMSA9IG5ldyBBcnJheUJ1ZmZlcihhdWRpb0xlbmd0aCk7XG4gICAgICAgICAgICAgICAgdmFyIHZpZXdfMSA9IG5ldyBEYXRhVmlldyhidWZmZXJfMSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZmxvYXRUbzE2Qml0UENNKHZpZXdfMSwgMCwgYXVkaW9GcmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcl8xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig0NCArIGF1ZGlvTGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBiaXRzUGVyU2FtcGxlID0gMTY7XG4gICAgICAgICAgICB2YXIgYnl0ZXNQZXJTYW1wbGUgPSBiaXRzUGVyU2FtcGxlIC8gODtcbiAgICAgICAgICAgIC8vIFdlIGRvbnQga25vdyBhaGVhZCBvZiB0aW1lIGFib3V0IHRoZSBsZW5ndGggb2YgYXVkaW8gdG8gc3RyZWFtLiBTbyBzZXQgdG8gMC5cbiAgICAgICAgICAgIHZhciBmaWxlTGVuZ3RoID0gMDtcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGFWaWV3XG4gICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgICAgICAgICAgLyogUklGRiBpZGVudGlmaWVyICovXG4gICAgICAgICAgICBfdGhpcy5zZXRTdHJpbmcodmlldywgMCwgXCJSSUZGXCIpO1xuICAgICAgICAgICAgLyogZmlsZSBsZW5ndGggKi9cbiAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKDQsIGZpbGVMZW5ndGgsIHRydWUpO1xuICAgICAgICAgICAgLyogUklGRiB0eXBlICYgRm9ybWF0ICovXG4gICAgICAgICAgICBfdGhpcy5zZXRTdHJpbmcodmlldywgOCwgXCJXQVZFZm10IFwiKTtcbiAgICAgICAgICAgIC8qIGZvcm1hdCBjaHVuayBsZW5ndGggKi9cbiAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKDE2LCAxNiwgdHJ1ZSk7XG4gICAgICAgICAgICAvKiBzYW1wbGUgZm9ybWF0IChyYXcpICovXG4gICAgICAgICAgICB2aWV3LnNldFVpbnQxNigyMCwgMSwgdHJ1ZSk7XG4gICAgICAgICAgICAvKiBjaGFubmVsIGNvdW50ICovXG4gICAgICAgICAgICB2aWV3LnNldFVpbnQxNigyMiwgX3RoaXMucHJpdkNoYW5uZWxDb3VudCwgdHJ1ZSk7XG4gICAgICAgICAgICAvKiBzYW1wbGUgcmF0ZSAqL1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MzIoMjQsIF90aGlzLnByaXZEZXNpcmVkU2FtcGxlUmF0ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAvKiBieXRlIHJhdGUgKHNhbXBsZSByYXRlICogYmxvY2sgYWxpZ24pICovXG4gICAgICAgICAgICB2aWV3LnNldFVpbnQzMigyOCwgX3RoaXMucHJpdkRlc2lyZWRTYW1wbGVSYXRlICogX3RoaXMucHJpdkNoYW5uZWxDb3VudCAqIGJ5dGVzUGVyU2FtcGxlLCB0cnVlKTtcbiAgICAgICAgICAgIC8qIGJsb2NrIGFsaWduIChjaGFubmVsIGNvdW50ICogYnl0ZXMgcGVyIHNhbXBsZSkgKi9cbiAgICAgICAgICAgIHZpZXcuc2V0VWludDE2KDMyLCBfdGhpcy5wcml2Q2hhbm5lbENvdW50ICogYnl0ZXNQZXJTYW1wbGUsIHRydWUpO1xuICAgICAgICAgICAgLyogYml0cyBwZXIgc2FtcGxlICovXG4gICAgICAgICAgICB2aWV3LnNldFVpbnQxNigzNCwgYml0c1BlclNhbXBsZSwgdHJ1ZSk7XG4gICAgICAgICAgICAvKiBkYXRhIGNodW5rIGlkZW50aWZpZXIgKi9cbiAgICAgICAgICAgIF90aGlzLnNldFN0cmluZyh2aWV3LCAzNiwgXCJkYXRhXCIpO1xuICAgICAgICAgICAgLyogZGF0YSBjaHVuayBsZW5ndGggKi9cbiAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKDQwLCBmaWxlTGVuZ3RoLCB0cnVlKTtcbiAgICAgICAgICAgIF90aGlzLmZsb2F0VG8xNkJpdFBDTSh2aWV3LCA0NCwgYXVkaW9GcmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldFN0cmluZyA9IGZ1bmN0aW9uICh2aWV3LCBvZmZzZXQsIHN0cikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCArIGksIHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mbG9hdFRvMTZCaXRQQ00gPSBmdW5jdGlvbiAodmlldywgb2Zmc2V0LCBpbnB1dCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKywgb2Zmc2V0ICs9IDIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCBpbnB1dFtpXSkpO1xuICAgICAgICAgICAgICAgIHZpZXcuc2V0SW50MTYob2Zmc2V0LCBzIDwgMCA/IHMgKiAweDgwMDAgOiBzICogMHg3RkZGLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kb3duU2FtcGxlQXVkaW9GcmFtZSA9IGZ1bmN0aW9uIChzcmNGcmFtZSwgc3JjUmF0ZSwgZHN0UmF0ZSkge1xuICAgICAgICAgICAgaWYgKGRzdFJhdGUgPT09IHNyY1JhdGUgfHwgZHN0UmF0ZSA+IHNyY1JhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3JjRnJhbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmF0aW8gPSBzcmNSYXRlIC8gZHN0UmF0ZTtcbiAgICAgICAgICAgIHZhciBkc3RMZW5ndGggPSBNYXRoLnJvdW5kKHNyY0ZyYW1lLmxlbmd0aCAvIHJhdGlvKTtcbiAgICAgICAgICAgIHZhciBkc3RGcmFtZSA9IG5ldyBGbG9hdDMyQXJyYXkoZHN0TGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBzcmNPZmZzZXQgPSAwO1xuICAgICAgICAgICAgdmFyIGRzdE9mZnNldCA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoZHN0T2Zmc2V0IDwgZHN0TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRTcmNPZmZzZXQgPSBNYXRoLnJvdW5kKChkc3RPZmZzZXQgKyAxKSAqIHJhdGlvKTtcbiAgICAgICAgICAgICAgICB2YXIgYWNjdW0gPSAwO1xuICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHNyY09mZnNldCA8IG5leHRTcmNPZmZzZXQgJiYgc3JjT2Zmc2V0IDwgc3JjRnJhbWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtICs9IHNyY0ZyYW1lW3NyY09mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZHN0RnJhbWVbZHN0T2Zmc2V0KytdID0gYWNjdW0gLyBjb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkc3RGcmFtZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcml2QWN0dWFsU2FtcGxlUmF0ZSA9IGFjdHVhbFNhbXBsZVJhdGU7XG4gICAgICAgIHRoaXMucHJpdkRlc2lyZWRTYW1wbGVSYXRlID0gZGVzaXJlZFNhbXBsZVJhdGU7XG4gICAgfVxuICAgIHJldHVybiBSaWZmUGNtRW5jb2Rlcjtcbn0oKSk7XG5leHBvcnRzLlJpZmZQY21FbmNvZGVyID0gUmlmZlBjbUVuY29kZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJpZmZQY21FbmNvZGVyLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFcnJvcl8xID0gcmVxdWlyZShcIi4vRXJyb3JcIik7XG52YXIgR3VpZF8xID0gcmVxdWlyZShcIi4vR3VpZFwiKTtcbnZhciBRdWV1ZV8xID0gcmVxdWlyZShcIi4vUXVldWVcIik7XG52YXIgU3RyZWFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0cmVhbShzdHJlYW1JZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByaXZSZWFkZXJJZENvdW50ZXIgPSAxO1xuICAgICAgICB0aGlzLnByaXZJc0VuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZ2V0UmVhZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlYWRlcklkID0gX3RoaXMucHJpdlJlYWRlcklkQ291bnRlcjtcbiAgICAgICAgICAgIF90aGlzLnByaXZSZWFkZXJJZENvdW50ZXIrKztcbiAgICAgICAgICAgIHZhciByZWFkZXJRdWV1ZSA9IG5ldyBRdWV1ZV8xLlF1ZXVlKCk7XG4gICAgICAgICAgICB2YXIgY3VycmVudExlbmd0aCA9IF90aGlzLnByaXZTdHJlYW1idWZmZXIubGVuZ3RoO1xuICAgICAgICAgICAgX3RoaXMucHJpdlJlYWRlclF1ZXVlc1tyZWFkZXJJZF0gPSByZWFkZXJRdWV1ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyUXVldWUuZW5xdWV1ZShfdGhpcy5wcml2U3RyZWFtYnVmZmVyW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyZWFtUmVhZGVyKF90aGlzLnByaXZJZCwgcmVhZGVyUXVldWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMucHJpdlJlYWRlclF1ZXVlc1tyZWFkZXJJZF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50aHJvd0lmQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnByaXZJc0VuZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXzEuSW52YWxpZE9wZXJhdGlvbkVycm9yKFwiU3RyZWFtIGNsb3NlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcml2SWQgPSBzdHJlYW1JZCA/IHN0cmVhbUlkIDogR3VpZF8xLmNyZWF0ZU5vRGFzaEd1aWQoKTtcbiAgICAgICAgdGhpcy5wcml2U3RyZWFtYnVmZmVyID0gW107XG4gICAgICAgIHRoaXMucHJpdlJlYWRlclF1ZXVlcyA9IHt9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyZWFtLnByb3RvdHlwZSwgXCJpc0Nsb3NlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdklzRW5kZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJlYW0ucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFN0cmVhbS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5wcml2SXNFbmRlZCkge1xuICAgICAgICAgICAgdGhpcy53cml0ZVN0cmVhbUNodW5rKHtcbiAgICAgICAgICAgICAgICBidWZmZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgaXNFbmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZVJlY2VpdmVkOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnByaXZJc0VuZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3RyZWFtLnByb3RvdHlwZS53cml0ZVN0cmVhbUNodW5rID0gZnVuY3Rpb24gKHN0cmVhbUNodW5rKSB7XG4gICAgICAgIHRoaXMudGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICB0aGlzLnByaXZTdHJlYW1idWZmZXIucHVzaChzdHJlYW1DaHVuayk7XG4gICAgICAgIGZvciAodmFyIHJlYWRlcklkIGluIHRoaXMucHJpdlJlYWRlclF1ZXVlcykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByaXZSZWFkZXJRdWV1ZXNbcmVhZGVySWRdLmlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlYWRlclF1ZXVlc1tyZWFkZXJJZF0uZW5xdWV1ZShzdHJlYW1DaHVuayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdHJlYW07XG59KCkpO1xuZXhwb3J0cy5TdHJlYW0gPSBTdHJlYW07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBTdHJlYW1SZWFkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RyZWFtUmVhZGVyKHN0cmVhbUlkLCByZWFkZXJRdWV1ZSwgb25DbG9zZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByaXZJc0Nsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNDbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JfMS5JbnZhbGlkT3BlcmF0aW9uRXJyb3IoXCJTdHJlYW1SZWFkZXIgY2xvc2VkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZSZWFkZXJRdWV1ZVxuICAgICAgICAgICAgICAgIC5kZXF1ZXVlKClcbiAgICAgICAgICAgICAgICAub25TdWNjZXNzQ29udGludWVXaXRoKGZ1bmN0aW9uIChzdHJlYW1DaHVuaykge1xuICAgICAgICAgICAgICAgIGlmIChzdHJlYW1DaHVuay5pc0VuZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcml2UmVhZGVyUXVldWUuZGlzcG9zZShcIkVuZCBvZiBzdHJlYW0gcmVhY2hlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbUNodW5rO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnByaXZJc0Nsb3NlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZJc0Nsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJpdlJlYWRlclF1ZXVlLmRpc3Bvc2UoXCJTdHJlYW1SZWFkZXIgY2xvc2VkXCIpO1xuICAgICAgICAgICAgICAgIF90aGlzLnByaXZPbkNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJpdlJlYWRlclF1ZXVlID0gcmVhZGVyUXVldWU7XG4gICAgICAgIHRoaXMucHJpdk9uQ2xvc2UgPSBvbkNsb3NlO1xuICAgICAgICB0aGlzLnByaXZTdHJlYW1JZCA9IHN0cmVhbUlkO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyZWFtUmVhZGVyLnByb3RvdHlwZSwgXCJpc0Nsb3NlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdklzQ2xvc2VkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyZWFtUmVhZGVyLnByb3RvdHlwZSwgXCJzdHJlYW1JZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlN0cmVhbUlkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gU3RyZWFtUmVhZGVyO1xufSgpKTtcbmV4cG9ydHMuU3RyZWFtUmVhZGVyID0gU3RyZWFtUmVhZGVyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdHJlYW0uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi5icm93c2VyL0V4cG9ydHNcIik7XG52YXIgQ29udHJhY3RzXzEgPSByZXF1aXJlKFwiLi4vQ29udHJhY3RzXCIpO1xudmFyIEV4cG9ydHNfMiA9IHJlcXVpcmUoXCIuLi9FeHBvcnRzXCIpO1xudmFyIEF1ZGlvSW5wdXRTdHJlYW1fMSA9IHJlcXVpcmUoXCIuL0F1ZGlvSW5wdXRTdHJlYW1cIik7XG4vKipcbiAqIFJlcHJlc2VudHMgYXVkaW8gaW5wdXQgY29uZmlndXJhdGlvbiB1c2VkIGZvciBzcGVjaWZ5aW5nIHdoYXQgdHlwZSBvZiBpbnB1dCB0byB1c2UgKG1pY3JvcGhvbmUsIGZpbGUsIHN0cmVhbSkuXG4gKiBAY2xhc3MgQXVkaW9Db25maWdcbiAqL1xudmFyIEF1ZGlvQ29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF1ZGlvQ29uZmlnKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIEF1ZGlvQ29uZmlnIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGRlZmF1bHQgbWljcm9waG9uZSBvbiB0aGUgc3lzdGVtLlxuICAgICAqIEBtZW1iZXIgQXVkaW9Db25maWcuZnJvbURlZmF1bHRNaWNyb3Bob25lSW5wdXRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge0F1ZGlvQ29uZmlnfSBUaGUgYXVkaW8gaW5wdXQgY29uZmlndXJhdGlvbiBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIEF1ZGlvQ29uZmlnLmZyb21EZWZhdWx0TWljcm9waG9uZUlucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGNtUmVjb3JkZXIgPSBuZXcgRXhwb3J0c18xLlBjbVJlY29yZGVyKCk7XG4gICAgICAgIHJldHVybiBuZXcgQXVkaW9Db25maWdJbXBsKG5ldyBFeHBvcnRzXzEuTWljQXVkaW9Tb3VyY2UocGNtUmVjb3JkZXIsIEF1ZGlvSW5wdXRTdHJlYW1fMS5idWZmZXJTaXplKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIEF1ZGlvQ29uZmlnIG9iamVjdCByZXByZXNlbnRpbmcgYSBtaWNyb3Bob25lIHdpdGggdGhlIHNwZWNpZmllZCBkZXZpY2UgSUQuXG4gICAgICogQG1lbWJlciBBdWRpb0NvbmZpZy5mcm9tTWljcm9waG9uZUlucHV0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBkZXZpY2VJZCAtIFNwZWNpZmllcyB0aGUgZGV2aWNlIElEIG9mIHRoZSBtaWNyb3Bob25lIHRvIGJlIHVzZWQuXG4gICAgICogICAgICAgIERlZmF1bHQgbWljcm9waG9uZSBpcyB1c2VkIHRoZSB2YWx1ZSBpcyBvbWl0dGVkLlxuICAgICAqIEByZXR1cm5zIHtBdWRpb0NvbmZpZ30gVGhlIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb24gYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBBdWRpb0NvbmZpZy5mcm9tTWljcm9waG9uZUlucHV0ID0gZnVuY3Rpb24gKGRldmljZUlkKSB7XG4gICAgICAgIHZhciBwY21SZWNvcmRlciA9IG5ldyBFeHBvcnRzXzEuUGNtUmVjb3JkZXIoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBdWRpb0NvbmZpZ0ltcGwobmV3IEV4cG9ydHNfMS5NaWNBdWRpb1NvdXJjZShwY21SZWNvcmRlciwgQXVkaW9JbnB1dFN0cmVhbV8xLmJ1ZmZlclNpemUsIGRldmljZUlkKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIEF1ZGlvQ29uZmlnIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBmaWxlLlxuICAgICAqIEBtZW1iZXIgQXVkaW9Db25maWcuZnJvbVdhdkZpbGVJbnB1dFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGVOYW1lIC0gU3BlY2lmaWVzIHRoZSBhdWRpbyBpbnB1dCBmaWxlLiBDdXJyZW50bHksIG9ubHkgV0FWIC8gUENNIHdpdGggMTYtYml0XG4gICAgICogICAgICAgIHNhbXBsZXMsIDE2IGtIeiBzYW1wbGUgcmF0ZSwgYW5kIGEgc2luZ2xlIGNoYW5uZWwgKE1vbm8pIGlzIHN1cHBvcnRlZC5cbiAgICAgKiBAcmV0dXJucyB7QXVkaW9Db25maWd9IFRoZSBhdWRpbyBpbnB1dCBjb25maWd1cmF0aW9uIGJlaW5nIGNyZWF0ZWQuXG4gICAgICovXG4gICAgQXVkaW9Db25maWcuZnJvbVdhdkZpbGVJbnB1dCA9IGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXVkaW9Db25maWdJbXBsKG5ldyBFeHBvcnRzXzEuRmlsZUF1ZGlvU291cmNlKGZpbGUpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gQXVkaW9Db25maWcgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIHN0cmVhbS5cbiAgICAgKiBAbWVtYmVyIEF1ZGlvQ29uZmlnLmZyb21TdHJlYW1JbnB1dFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0F1ZGlvSW5wdXRTdHJlYW0gfCBQdWxsQXVkaW9JbnB1dFN0cmVhbUNhbGxiYWNrfSBhdWRpb1N0cmVhbSAtIFNwZWNpZmllcyB0aGUgY3VzdG9tIGF1ZGlvIGlucHV0XG4gICAgICogICAgICAgIHN0cmVhbS4gQ3VycmVudGx5LCBvbmx5IFdBViAvIFBDTSB3aXRoIDE2LWJpdCBzYW1wbGVzLCAxNiBrSHogc2FtcGxlIHJhdGUsIGFuZCBhIHNpbmdsZSBjaGFubmVsXG4gICAgICogICAgICAgIChNb25vKSBpcyBzdXBwb3J0ZWQuXG4gICAgICogQHJldHVybnMge0F1ZGlvQ29uZmlnfSBUaGUgYXVkaW8gaW5wdXQgY29uZmlndXJhdGlvbiBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIEF1ZGlvQ29uZmlnLmZyb21TdHJlYW1JbnB1dCA9IGZ1bmN0aW9uIChhdWRpb1N0cmVhbSkge1xuICAgICAgICBpZiAoYXVkaW9TdHJlYW0gaW5zdGFuY2VvZiBFeHBvcnRzXzIuUHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBdWRpb0NvbmZpZ0ltcGwobmV3IEF1ZGlvSW5wdXRTdHJlYW1fMS5QdWxsQXVkaW9JbnB1dFN0cmVhbUltcGwoYXVkaW9TdHJlYW0pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXVkaW9TdHJlYW0gaW5zdGFuY2VvZiBFeHBvcnRzXzIuQXVkaW9JbnB1dFN0cmVhbSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBdWRpb0NvbmZpZ0ltcGwoYXVkaW9TdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBTdXBwb3J0ZWQgVHlwZVwiKTtcbiAgICB9O1xuICAgIHJldHVybiBBdWRpb0NvbmZpZztcbn0oKSk7XG5leHBvcnRzLkF1ZGlvQ29uZmlnID0gQXVkaW9Db25maWc7XG4vKipcbiAqIFJlcHJlc2VudHMgYXVkaW8gaW5wdXQgc3RyZWFtIHVzZWQgZm9yIGN1c3RvbSBhdWRpbyBpbnB1dCBjb25maWd1cmF0aW9ucy5cbiAqIEBwcml2YXRlXG4gKiBAY2xhc3MgQXVkaW9Db25maWdJbXBsXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIEF1ZGlvQ29uZmlnSW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXVkaW9Db25maWdJbXBsLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtJQXVkaW9Tb3VyY2V9IHNvdXJjZSAtIEFuIGF1ZGlvIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBBdWRpb0NvbmZpZ0ltcGwoc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZTb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1ZGlvQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwiZm9ybWF0XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZvcm1hdCBpbmZvcm1hdGlvbiBmb3IgdGhlIGF1ZGlvXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTb3VyY2UuZm9ybWF0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIEF1ZGlvQ29uZmlnSW1wbC5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgQXVkaW9Db25maWdJbXBsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcml2U291cmNlLnR1cm5PZmYoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXIgQXVkaW9Db25maWdJbXBsLnByb3RvdHlwZS5pZFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBBdWRpb0NvbmZpZ0ltcGwucHJvdG90eXBlLmlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U291cmNlLmlkKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIEF1ZGlvQ29uZmlnSW1wbC5wcm90b3R5cGUudHVybk9uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBBIHByb21pc2UuXG4gICAgICovXG4gICAgQXVkaW9Db25maWdJbXBsLnByb3RvdHlwZS50dXJuT24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTb3VyY2UudHVybk9uKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIEF1ZGlvQ29uZmlnSW1wbC5wcm90b3R5cGUuYXR0YWNoXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdWRpb05vZGVJZCAtIFRoZSBhdWRpbyBub2RlIGlkLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPElBdWRpb1N0cmVhbU5vZGU+fSBBIHByb21pc2UuXG4gICAgICovXG4gICAgQXVkaW9Db25maWdJbXBsLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiAoYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNvdXJjZS5hdHRhY2goYXVkaW9Ob2RlSWQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQG1lbWJlciBBdWRpb0NvbmZpZ0ltcGwucHJvdG90eXBlLmRldGFjaFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXVkaW9Ob2RlSWQgLSBUaGUgYXVkaW8gbm9kZSBpZC5cbiAgICAgKi9cbiAgICBBdWRpb0NvbmZpZ0ltcGwucHJvdG90eXBlLmRldGFjaCA9IGZ1bmN0aW9uIChhdWRpb05vZGVJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZXRhY2goYXVkaW9Ob2RlSWQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQG1lbWJlciBBdWRpb0NvbmZpZ0ltcGwucHJvdG90eXBlLnR1cm5PZmZcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IEEgcHJvbWlzZS5cbiAgICAgKi9cbiAgICBBdWRpb0NvbmZpZ0ltcGwucHJvdG90eXBlLnR1cm5PZmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZTb3VyY2UudHVybk9mZigpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1ZGlvQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwiZXZlbnRzXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIgQXVkaW9Db25maWdJbXBsLnByb3RvdHlwZS5ldmVudHNcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge0V2ZW50U291cmNlPEF1ZGlvU291cmNlRXZlbnQ+fSBBbiBldmVudCBzb3VyY2UgZm9yIGF1ZGlvIGV2ZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNvdXJjZS5ldmVudHM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEF1ZGlvQ29uZmlnSW1wbC5wcm90b3R5cGUuc2V0UHJvcGVydHkgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsKHZhbHVlLCBcInZhbHVlXCIpO1xuICAgICAgICBpZiAodW5kZWZpbmVkICE9PSB0aGlzLnByaXZTb3VyY2Uuc2V0UHJvcGVydHkpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdlNvdXJjZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIEF1ZGlvQ29uZmlnIGluc3RhbmNlIGRvZXMgbm90IHN1cHBvcnQgc2V0dGluZyBwcm9wZXJ0aWVzLlwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXVkaW9Db25maWdJbXBsLnByb3RvdHlwZS5nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChuYW1lLCBkZWYpIHtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gdGhpcy5wcml2U291cmNlLmdldFByb3BlcnR5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U291cmNlLmdldFByb3BlcnR5KG5hbWUsIGRlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIEF1ZGlvQ29uZmlnIGluc3RhbmNlIGRvZXMgbm90IHN1cHBvcnQgZ2V0dGluZyBwcm9wZXJ0aWVzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1ZGlvQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwiZGV2aWNlSW5mb1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNvdXJjZS5kZXZpY2VJbmZvO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQXVkaW9Db25maWdJbXBsO1xufShBdWRpb0NvbmZpZykpO1xuZXhwb3J0cy5BdWRpb0NvbmZpZ0ltcGwgPSBBdWRpb0NvbmZpZ0ltcGw7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF1ZGlvQ29uZmlnLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEd1aWRfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9zcmMvY29tbW9uL0d1aWRcIik7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiKTtcbnZhciBFeHBvcnRzXzIgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL0V4cG9ydHNcIik7XG52YXIgRXhwb3J0c18zID0gcmVxdWlyZShcIi4uL0V4cG9ydHNcIik7XG52YXIgQXVkaW9TdHJlYW1Gb3JtYXRfMSA9IHJlcXVpcmUoXCIuL0F1ZGlvU3RyZWFtRm9ybWF0XCIpO1xuZXhwb3J0cy5idWZmZXJTaXplID0gNDA5Njtcbi8qKlxuICogUmVwcmVzZW50cyBhdWRpbyBpbnB1dCBzdHJlYW0gdXNlZCBmb3IgY3VzdG9tIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb25zLlxuICogQGNsYXNzIEF1ZGlvSW5wdXRTdHJlYW1cbiAqL1xudmFyIEF1ZGlvSW5wdXRTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2UuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gQXVkaW9JbnB1dFN0cmVhbSgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1lbW9yeSBiYWNrZWQgUHVzaEF1ZGlvSW5wdXRTdHJlYW0gd2l0aCB0aGUgc3BlY2lmaWVkIGF1ZGlvIGZvcm1hdC5cbiAgICAgKiBAbWVtYmVyIEF1ZGlvSW5wdXRTdHJlYW0uY3JlYXRlUHVzaFN0cmVhbVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0F1ZGlvU3RyZWFtRm9ybWF0fSBmb3JtYXQgLSBUaGUgYXVkaW8gZGF0YSBmb3JtYXQgaW4gd2hpY2ggYXVkaW8gd2lsbCBiZVxuICAgICAqICAgICAgICB3cml0dGVuIHRvIHRoZSBwdXNoIGF1ZGlvIHN0cmVhbSdzIHdyaXRlKCkgbWV0aG9kIChjdXJyZW50bHkgb25seSBzdXBwb3J0IDE2IGtIeiAxNmJpdCBtb25vIFBDTSkuXG4gICAgICogQHJldHVybnMge1B1c2hBdWRpb0lucHV0U3RyZWFtfSBUaGUgYXVkaW8gaW5wdXQgc3RyZWFtIGJlaW5nIGNyZWF0ZWQuXG4gICAgICovXG4gICAgQXVkaW9JbnB1dFN0cmVhbS5jcmVhdGVQdXNoU3RyZWFtID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gUHVzaEF1ZGlvSW5wdXRTdHJlYW0uY3JlYXRlKGZvcm1hdCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgUHVsbEF1ZGlvSW5wdXRTdHJlYW0gdGhhdCBkZWxlZ2F0ZXMgdG8gdGhlIHNwZWNpZmllZCBjYWxsYmFjayBpbnRlcmZhY2UgZm9yIHJlYWQoKVxuICAgICAqIGFuZCBjbG9zZSgpIG1ldGhvZHMuXG4gICAgICogQG1lbWJlciBBdWRpb0lucHV0U3RyZWFtLmNyZWF0ZVB1bGxTdHJlYW1cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtQdWxsQXVkaW9JbnB1dFN0cmVhbUNhbGxiYWNrfSBjYWxsYmFjayAtIFRoZSBjdXN0b20gYXVkaW8gaW5wdXQgb2JqZWN0LCBkZXJpdmVkIGZyb21cbiAgICAgKiAgICAgICAgUHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFja1xuICAgICAqIEBwYXJhbSB7QXVkaW9TdHJlYW1Gb3JtYXR9IGZvcm1hdCAtIFRoZSBhdWRpbyBkYXRhIGZvcm1hdCBpbiB3aGljaCBhdWRpbyB3aWxsIGJlIHJldHVybmVkIGZyb21cbiAgICAgKiAgICAgICAgdGhlIGNhbGxiYWNrJ3MgcmVhZCgpIG1ldGhvZCAoY3VycmVudGx5IG9ubHkgc3VwcG9ydCAxNiBrSHogMTZiaXQgbW9ubyBQQ00pLlxuICAgICAqIEByZXR1cm5zIHtQdWxsQXVkaW9JbnB1dFN0cmVhbX0gVGhlIGF1ZGlvIGlucHV0IHN0cmVhbSBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIEF1ZGlvSW5wdXRTdHJlYW0uY3JlYXRlUHVsbFN0cmVhbSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBQdWxsQXVkaW9JbnB1dFN0cmVhbS5jcmVhdGUoY2FsbGJhY2ssIGZvcm1hdCk7XG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk9vcHNcIik7XG4gICAgfTtcbiAgICByZXR1cm4gQXVkaW9JbnB1dFN0cmVhbTtcbn0oKSk7XG5leHBvcnRzLkF1ZGlvSW5wdXRTdHJlYW0gPSBBdWRpb0lucHV0U3RyZWFtO1xuLyoqXG4gKiBSZXByZXNlbnRzIG1lbW9yeSBiYWNrZWQgcHVzaCBhdWRpbyBpbnB1dCBzdHJlYW0gdXNlZCBmb3IgY3VzdG9tIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb25zLlxuICogQGNsYXNzIFB1c2hBdWRpb0lucHV0U3RyZWFtXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIFB1c2hBdWRpb0lucHV0U3RyZWFtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQdXNoQXVkaW9JbnB1dFN0cmVhbSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQdXNoQXVkaW9JbnB1dFN0cmVhbSgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWVtb3J5IGJhY2tlZCBQdXNoQXVkaW9JbnB1dFN0cmVhbSB3aXRoIHRoZSBzcGVjaWZpZWQgYXVkaW8gZm9ybWF0LlxuICAgICAqIEBtZW1iZXIgUHVzaEF1ZGlvSW5wdXRTdHJlYW0uY3JlYXRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7QXVkaW9TdHJlYW1Gb3JtYXR9IGZvcm1hdCAtIFRoZSBhdWRpbyBkYXRhIGZvcm1hdCBpbiB3aGljaCBhdWRpbyB3aWxsIGJlIHdyaXR0ZW4gdG8gdGhlXG4gICAgICogICAgICAgIHB1c2ggYXVkaW8gc3RyZWFtJ3Mgd3JpdGUoKSBtZXRob2QgKGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgMTYga0h6IDE2Yml0IG1vbm8gUENNKS5cbiAgICAgKiBAcmV0dXJucyB7UHVzaEF1ZGlvSW5wdXRTdHJlYW19IFRoZSBwdXNoIGF1ZGlvIGlucHV0IHN0cmVhbSBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIFB1c2hBdWRpb0lucHV0U3RyZWFtLmNyZWF0ZSA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQdXNoQXVkaW9JbnB1dFN0cmVhbUltcGwoZXhwb3J0cy5idWZmZXJTaXplLCBmb3JtYXQpO1xuICAgIH07XG4gICAgcmV0dXJuIFB1c2hBdWRpb0lucHV0U3RyZWFtO1xufShBdWRpb0lucHV0U3RyZWFtKSk7XG5leHBvcnRzLlB1c2hBdWRpb0lucHV0U3RyZWFtID0gUHVzaEF1ZGlvSW5wdXRTdHJlYW07XG4vKipcbiAqIFJlcHJlc2VudHMgbWVtb3J5IGJhY2tlZCBwdXNoIGF1ZGlvIGlucHV0IHN0cmVhbSB1c2VkIGZvciBjdXN0b20gYXVkaW8gaW5wdXQgY29uZmlndXJhdGlvbnMuXG4gKiBAcHJpdmF0ZVxuICogQGNsYXNzIFB1c2hBdWRpb0lucHV0U3RyZWFtSW1wbFxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBQdXNoQXVkaW9JbnB1dFN0cmVhbUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFB1c2hBdWRpb0lucHV0U3RyZWFtSW1wbCwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0YWxpemVzIGFuIGluc3RhbmNlIHdpdGggdGhlIGdpdmVuIHZhbHVlcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0F1ZGlvU3RyZWFtRm9ybWF0fSBmb3JtYXQgLSBUaGUgYXVkaW8gc3RyZWFtIGZvcm1hdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBQdXNoQXVkaW9JbnB1dFN0cmVhbUltcGwoY2h1bmtTaXplLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub25FdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgX3RoaXMucHJpdkV2ZW50cy5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIEV4cG9ydHNfMi5FdmVudHMuaW5zdGFuY2Uub25FdmVudChldmVudCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX3RoaXMucHJpdkZvcm1hdCA9IEF1ZGlvU3RyZWFtRm9ybWF0XzEuQXVkaW9TdHJlYW1Gb3JtYXRJbXBsLmdldERlZmF1bHRJbnB1dEZvcm1hdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMucHJpdkZvcm1hdCA9IGZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5wcml2RXZlbnRzID0gbmV3IEV4cG9ydHNfMi5FdmVudFNvdXJjZSgpO1xuICAgICAgICBfdGhpcy5wcml2SWQgPSBHdWlkXzEuY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgICAgICBfdGhpcy5wcml2U3RyZWFtID0gbmV3IEV4cG9ydHNfMi5DaHVua2VkQXJyYXlCdWZmZXJTdHJlYW0oY2h1bmtTaXplKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHVzaEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZSwgXCJmb3JtYXRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogRm9ybWF0IGluZm9ybWF0aW9uIGZvciB0aGUgYXVkaW9cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkZvcm1hdDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogV3JpdGVzIHRoZSBhdWRpbyBkYXRhIHNwZWNpZmllZCBieSBtYWtpbmcgYW4gaW50ZXJuYWwgY29weSBvZiB0aGUgZGF0YS5cbiAgICAgKiBAbWVtYmVyIFB1c2hBdWRpb0lucHV0U3RyZWFtSW1wbC5wcm90b3R5cGUud3JpdGVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gZGF0YUJ1ZmZlciAtIFRoZSBhdWRpbyBidWZmZXIgb2Ygd2hpY2ggdGhpcyBmdW5jdGlvbiB3aWxsIG1ha2UgYSBjb3B5LlxuICAgICAqL1xuICAgIFB1c2hBdWRpb0lucHV0U3RyZWFtSW1wbC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoZGF0YUJ1ZmZlcikge1xuICAgICAgICB0aGlzLnByaXZTdHJlYW0ud3JpdGVTdHJlYW1DaHVuayh7XG4gICAgICAgICAgICBidWZmZXI6IGRhdGFCdWZmZXIsXG4gICAgICAgICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAgICAgICB0aW1lUmVjZWl2ZWQ6IERhdGUubm93KClcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIHN0cmVhbS5cbiAgICAgKiBAbWVtYmVyIFB1c2hBdWRpb0lucHV0U3RyZWFtSW1wbC5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgUHVzaEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcml2U3RyZWFtLmNsb3NlKCk7XG4gICAgfTtcbiAgICBQdXNoQXVkaW9JbnB1dFN0cmVhbUltcGwucHJvdG90eXBlLmlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgfTtcbiAgICBQdXNoQXVkaW9JbnB1dFN0cmVhbUltcGwucHJvdG90eXBlLnR1cm5PbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9Tb3VyY2VJbml0aWFsaXppbmdFdmVudCh0aGlzLnByaXZJZCkpOyAvLyBubyBzdHJlYW0gaWRcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9Tb3VyY2VSZWFkeUV2ZW50KHRoaXMucHJpdklkKSk7XG4gICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgIH07XG4gICAgUHVzaEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiAoYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnQodGhpcy5wcml2SWQsIGF1ZGlvTm9kZUlkKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnR1cm5PbigpXG4gICAgICAgICAgICAub25TdWNjZXNzQ29udGludWVXaXRoKGZ1bmN0aW9uIChfKSB7XG4gICAgICAgICAgICAvLyBGb3Igbm93IHdlIHN1cHBvcnQgYSBzaW5nbGUgcGFyYWxsZWwgcmVhZGVyIG9mIHRoZSBwdXNoZWQgc3RyZWFtLlxuICAgICAgICAgICAgLy8gU28gd2UgY2FuIHNpbWlwbHkgaGFuZCB0aGUgc3RyZWFtIHRvIHRoZSByZWNvZ25pemVyIGFuZCBsZXQgaXQgcmVjb2duaXplLlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByaXZTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub25TdWNjZXNzQ29udGludWVXaXRoKGZ1bmN0aW9uIChzdHJlYW1SZWFkZXIpIHtcbiAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVBdHRhY2hlZEV2ZW50KF90aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGV0YWNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbVJlYWRlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9TdHJlYW1Ob2RlRGV0YWNoZWRFdmVudChfdGhpcy5wcml2SWQsIGF1ZGlvTm9kZUlkKSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnR1cm5PZmYoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhdWRpb05vZGVJZDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbVJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUHVzaEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZS5kZXRhY2ggPSBmdW5jdGlvbiAoYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9TdHJlYW1Ob2RlRGV0YWNoZWRFdmVudCh0aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICB9O1xuICAgIFB1c2hBdWRpb0lucHV0U3RyZWFtSW1wbC5wcm90b3R5cGUudHVybk9mZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEV4cG9ydHNfMi5Qcm9taXNlSGVscGVyLmZyb21SZXN1bHQoZmFsc2UpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFB1c2hBdWRpb0lucHV0U3RyZWFtSW1wbC5wcm90b3R5cGUsIFwiZXZlbnRzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2RXZlbnRzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHVzaEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZSwgXCJkZXZpY2VJbmZvXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gRXhwb3J0c18yLlByb21pc2VIZWxwZXIuZnJvbVJlc3VsdCh7XG4gICAgICAgICAgICAgICAgYml0c3BlcnNhbXBsZTogdGhpcy5wcml2Rm9ybWF0LmJpdHNQZXJTYW1wbGUsXG4gICAgICAgICAgICAgICAgY2hhbm5lbGNvdW50OiB0aGlzLnByaXZGb3JtYXQuY2hhbm5lbHMsXG4gICAgICAgICAgICAgICAgY29ubmVjdGl2aXR5OiBFeHBvcnRzXzEuY29ubmVjdGl2aXR5LlVua25vd24sXG4gICAgICAgICAgICAgICAgbWFudWZhY3R1cmVyOiBcIlNwZWVjaCBTREtcIixcbiAgICAgICAgICAgICAgICBtb2RlbDogXCJQdXNoU3RyZWFtXCIsXG4gICAgICAgICAgICAgICAgc2FtcGxlcmF0ZTogdGhpcy5wcml2Rm9ybWF0LnNhbXBsZXNQZXJTZWMsXG4gICAgICAgICAgICAgICAgdHlwZTogRXhwb3J0c18xLnR5cGUuU3RyZWFtLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBQdXNoQXVkaW9JbnB1dFN0cmVhbUltcGw7XG59KFB1c2hBdWRpb0lucHV0U3RyZWFtKSk7XG5leHBvcnRzLlB1c2hBdWRpb0lucHV0U3RyZWFtSW1wbCA9IFB1c2hBdWRpb0lucHV0U3RyZWFtSW1wbDtcbi8qXG4gKiBSZXByZXNlbnRzIGF1ZGlvIGlucHV0IHN0cmVhbSB1c2VkIGZvciBjdXN0b20gYXVkaW8gaW5wdXQgY29uZmlndXJhdGlvbnMuXG4gKiBAY2xhc3MgUHVsbEF1ZGlvSW5wdXRTdHJlYW1cbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgUHVsbEF1ZGlvSW5wdXRTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFB1bGxBdWRpb0lucHV0U3RyZWFtLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuZCBpbnN0YW5jZS5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBQdWxsQXVkaW9JbnB1dFN0cmVhbSgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBQdWxsQXVkaW9JbnB1dFN0cmVhbSB0aGF0IGRlbGVnYXRlcyB0byB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIGludGVyZmFjZSBmb3JcbiAgICAgKiByZWFkKCkgYW5kIGNsb3NlKCkgbWV0aG9kcywgdXNpbmcgdGhlIGRlZmF1bHQgZm9ybWF0ICgxNiBrSHogMTZiaXQgbW9ubyBQQ00pLlxuICAgICAqIEBtZW1iZXIgUHVsbEF1ZGlvSW5wdXRTdHJlYW0uY3JlYXRlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7UHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY3VzdG9tIGF1ZGlvIGlucHV0IG9iamVjdCxcbiAgICAgKiAgICAgICAgZGVyaXZlZCBmcm9tIFB1bGxBdWRpb0lucHV0U3RyZWFtQ3VzdG9tQ2FsbGJhY2tcbiAgICAgKiBAcGFyYW0ge0F1ZGlvU3RyZWFtRm9ybWF0fSBmb3JtYXQgLSBUaGUgYXVkaW8gZGF0YSBmb3JtYXQgaW4gd2hpY2ggYXVkaW8gd2lsbCBiZVxuICAgICAqICAgICAgICByZXR1cm5lZCBmcm9tIHRoZSBjYWxsYmFjaydzIHJlYWQoKSBtZXRob2QgKGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgMTYga0h6IDE2Yml0IG1vbm8gUENNKS5cbiAgICAgKiBAcmV0dXJucyB7UHVsbEF1ZGlvSW5wdXRTdHJlYW19IFRoZSBwdXNoIGF1ZGlvIGlucHV0IHN0cmVhbSBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIFB1bGxBdWRpb0lucHV0U3RyZWFtLmNyZWF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsKGNhbGxiYWNrLCBmb3JtYXQpO1xuICAgIH07XG4gICAgcmV0dXJuIFB1bGxBdWRpb0lucHV0U3RyZWFtO1xufShBdWRpb0lucHV0U3RyZWFtKSk7XG5leHBvcnRzLlB1bGxBdWRpb0lucHV0U3RyZWFtID0gUHVsbEF1ZGlvSW5wdXRTdHJlYW07XG4vKipcbiAqIFJlcHJlc2VudHMgYXVkaW8gaW5wdXQgc3RyZWFtIHVzZWQgZm9yIGN1c3RvbSBhdWRpbyBpbnB1dCBjb25maWd1cmF0aW9ucy5cbiAqIEBwcml2YXRlXG4gKiBAY2xhc3MgUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIFB1bGxBdWRpb0lucHV0U3RyZWFtSW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBQdWxsQXVkaW9JbnB1dFN0cmVhbSB0aGF0IGRlbGVnYXRlcyB0byB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIGludGVyZmFjZSBmb3JcbiAgICAgKiByZWFkKCkgYW5kIGNsb3NlKCkgbWV0aG9kcywgdXNpbmcgdGhlIGRlZmF1bHQgZm9ybWF0ICgxNiBrSHogMTZiaXQgbW9ubyBQQ00pLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7UHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY3VzdG9tIGF1ZGlvIGlucHV0IG9iamVjdCxcbiAgICAgKiAgICAgICAgZGVyaXZlZCBmcm9tIFB1bGxBdWRpb0lucHV0U3RyZWFtQ3VzdG9tQ2FsbGJhY2tcbiAgICAgKiBAcGFyYW0ge0F1ZGlvU3RyZWFtRm9ybWF0fSBmb3JtYXQgLSBUaGUgYXVkaW8gZGF0YSBmb3JtYXQgaW4gd2hpY2ggYXVkaW8gd2lsbCBiZVxuICAgICAqICAgICAgICByZXR1cm5lZCBmcm9tIHRoZSBjYWxsYmFjaydzIHJlYWQoKSBtZXRob2QgKGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgMTYga0h6IDE2Yml0IG1vbm8gUENNKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBQdWxsQXVkaW9JbnB1dFN0cmVhbUltcGwoY2FsbGJhY2ssIGZvcm1hdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpcy5wcml2RXZlbnRzLm9uRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgRXhwb3J0c18yLkV2ZW50cy5pbnN0YW5jZS5vbkV2ZW50KGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gZm9ybWF0KSB7XG4gICAgICAgICAgICBfdGhpcy5wcml2Rm9ybWF0ID0gRXhwb3J0c18zLkF1ZGlvU3RyZWFtRm9ybWF0LmdldERlZmF1bHRJbnB1dEZvcm1hdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMucHJpdkZvcm1hdCA9IGZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5wcml2RXZlbnRzID0gbmV3IEV4cG9ydHNfMi5FdmVudFNvdXJjZSgpO1xuICAgICAgICBfdGhpcy5wcml2SWQgPSBHdWlkXzEuY3JlYXRlTm9EYXNoR3VpZCgpO1xuICAgICAgICBfdGhpcy5wcml2Q2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgX3RoaXMucHJpdklzQ2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFB1bGxBdWRpb0lucHV0U3RyZWFtSW1wbC5wcm90b3R5cGUsIFwiZm9ybWF0XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZvcm1hdCBpbmZvcm1hdGlvbiBmb3IgdGhlIGF1ZGlvXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZGb3JtYXQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgc3RyZWFtLlxuICAgICAqIEBtZW1iZXIgUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZS5jbG9zZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBQdWxsQXVkaW9JbnB1dFN0cmVhbUltcGwucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByaXZJc0Nsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMucHJpdkNhbGxiYWNrLmNsb3NlKCk7XG4gICAgfTtcbiAgICBQdWxsQXVkaW9JbnB1dFN0cmVhbUltcGwucHJvdG90eXBlLmlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2SWQ7XG4gICAgfTtcbiAgICBQdWxsQXVkaW9JbnB1dFN0cmVhbUltcGwucHJvdG90eXBlLnR1cm5PbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9Tb3VyY2VJbml0aWFsaXppbmdFdmVudCh0aGlzLnByaXZJZCkpOyAvLyBubyBzdHJlYW0gaWRcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9Tb3VyY2VSZWFkeUV2ZW50KHRoaXMucHJpdklkKSk7XG4gICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHRydWUpO1xuICAgIH07XG4gICAgUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiAoYXVkaW9Ob2RlSWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9TdHJlYW1Ob2RlQXR0YWNoaW5nRXZlbnQodGhpcy5wcml2SWQsIGF1ZGlvTm9kZUlkKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnR1cm5PbigpXG4gICAgICAgICAgICAub25TdWNjZXNzQ29udGludWVXaXRoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIF90aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVBdHRhY2hlZEV2ZW50KF90aGlzLnByaXZJZCwgYXVkaW9Ob2RlSWQpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGV0YWNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnByaXZDYWxsYmFjay5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbkV2ZW50KG5ldyBFeHBvcnRzXzIuQXVkaW9TdHJlYW1Ob2RlRGV0YWNoZWRFdmVudChfdGhpcy5wcml2SWQsIGF1ZGlvTm9kZUlkKSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnR1cm5PZmYoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhdWRpb05vZGVJZDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsQnl0ZXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNtaXRCdWZmO1xuICAgICAgICAgICAgICAgICAgICAvLyBVbnRpbCB3ZSBoYXZlIHRoZSBtaW5pbXVtIG51bWJlciBvZiBieXRlcyB0byBzZW5kIGluIGEgdHJhbnNtaXNzaW9uLCBrZWVwIGFza2luZyBmb3IgbW9yZS5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRvdGFsQnl0ZXMgPCBleHBvcnRzLmJ1ZmZlclNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpemluZyB0aGUgcmVhZCBidWZmZXIgdG8gdGhlIGRlbHRhIGJldHdlZW4gdGhlIHBlcmZlY3Qgc2l6ZSBhbmQgd2hhdCdzIGxlZnQgbWVhbnMgd2Ugd29uJ3QgZXZlciBnZXQgdG9vIG11Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRhdGEgYmFjay5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWFkQnVmZiA9IG5ldyBBcnJheUJ1ZmZlcihleHBvcnRzLmJ1ZmZlclNpemUgLSB0b3RhbEJ5dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwdWxsZWRCeXRlcyA9IF90aGlzLnByaXZDYWxsYmFjay5yZWFkKHJlYWRCdWZmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIHJldHVybiBidWZmZXIgeWV0IGRlZmluZWQsIHNldCB0aGUgcmV0dXJuIGJ1ZmZlciB0byB0aGUgdGhhdCB3YXMganVzdCBwb3B1bGF0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHdhcywgaWYgd2UgaGF2ZSBlbm91Z2ggZGF0YSB0aGVyZSdzIG5vIGNvcHkgcGVuYWx0eSwgYnV0IGlmIHdlIGRvbid0IHdlIGhhdmUgYSBidWZmZXIgdGhhdCdzIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlZmVycmVkIHNpemUgYWxsb2NhdGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gdHJhbnNtaXRCdWZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNtaXRCdWZmID0gcmVhZEJ1ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgdGhlIGZpcnN0IGJpdGUgYXQgdGhlIGFwcGxlLCBzbyBmaWxsIHRoZSByZXR1cm4gYnVmZmVyIHdpdGggdGhlIGRhdGEgd2UgZ290IGJhY2suXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludFZpZXcgPSBuZXcgSW50OEFycmF5KHRyYW5zbWl0QnVmZik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50Vmlldy5zZXQobmV3IEludDhBcnJheShyZWFkQnVmZiksIHRvdGFsQnl0ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGJ5dGVzIHRvIHJlYWQsIGp1c3QgYnJlYWsgb3V0IGFuZCBiZSBkb25lLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHB1bGxlZEJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEJ5dGVzICs9IHB1bGxlZEJ5dGVzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogdHJhbnNtaXRCdWZmLnNsaWNlKDAsIHRvdGFsQnl0ZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNFbmQ6IF90aGlzLnByaXZJc0Nsb3NlZCB8fCB0b3RhbEJ5dGVzID09PSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZVJlY2VpdmVkOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQdWxsQXVkaW9JbnB1dFN0cmVhbUltcGwucHJvdG90eXBlLmRldGFjaCA9IGZ1bmN0aW9uIChhdWRpb05vZGVJZCkge1xuICAgICAgICB0aGlzLm9uRXZlbnQobmV3IEV4cG9ydHNfMi5BdWRpb1N0cmVhbU5vZGVEZXRhY2hlZEV2ZW50KHRoaXMucHJpdklkLCBhdWRpb05vZGVJZCkpO1xuICAgIH07XG4gICAgUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZS50dXJuT2ZmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRXhwb3J0c18yLlByb21pc2VIZWxwZXIuZnJvbVJlc3VsdChmYWxzZSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsLnByb3RvdHlwZSwgXCJldmVudHNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZFdmVudHM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQdWxsQXVkaW9JbnB1dFN0cmVhbUltcGwucHJvdG90eXBlLCBcImRldmljZUluZm9cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KHtcbiAgICAgICAgICAgICAgICBiaXRzcGVyc2FtcGxlOiB0aGlzLnByaXZGb3JtYXQuYml0c1BlclNhbXBsZSxcbiAgICAgICAgICAgICAgICBjaGFubmVsY291bnQ6IHRoaXMucHJpdkZvcm1hdC5jaGFubmVscyxcbiAgICAgICAgICAgICAgICBjb25uZWN0aXZpdHk6IEV4cG9ydHNfMS5jb25uZWN0aXZpdHkuVW5rbm93bixcbiAgICAgICAgICAgICAgICBtYW51ZmFjdHVyZXI6IFwiU3BlZWNoIFNES1wiLFxuICAgICAgICAgICAgICAgIG1vZGVsOiBcIlB1bGxTdHJlYW1cIixcbiAgICAgICAgICAgICAgICBzYW1wbGVyYXRlOiB0aGlzLnByaXZGb3JtYXQuc2FtcGxlc1BlclNlYyxcbiAgICAgICAgICAgICAgICB0eXBlOiBFeHBvcnRzXzEudHlwZS5TdHJlYW0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFB1bGxBdWRpb0lucHV0U3RyZWFtSW1wbDtcbn0oUHVsbEF1ZGlvSW5wdXRTdHJlYW0pKTtcbmV4cG9ydHMuUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsID0gUHVsbEF1ZGlvSW5wdXRTdHJlYW1JbXBsO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdWRpb0lucHV0U3RyZWFtLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBSZXByZXNlbnRzIGF1ZGlvIHN0cmVhbSBmb3JtYXQgdXNlZCBmb3IgY3VzdG9tIGF1ZGlvIGlucHV0IGNvbmZpZ3VyYXRpb25zLlxuICogQGNsYXNzIEF1ZGlvU3RyZWFtRm9ybWF0XG4gKi9cbnZhciBBdWRpb1N0cmVhbUZvcm1hdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdWRpb1N0cmVhbUZvcm1hdCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhdWRpbyBzdHJlYW0gZm9ybWF0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGRlZmF1bHQgYXVkaW8gc3RyZWFtXG4gICAgICogZm9ybWF0ICgxNktIeiAxNmJpdCBtb25vIFBDTSkuXG4gICAgICogQG1lbWJlciBBdWRpb1N0cmVhbUZvcm1hdC5nZXREZWZhdWx0SW5wdXRGb3JtYXRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJldHVybnMge0F1ZGlvU3RyZWFtRm9ybWF0fSBUaGUgYXVkaW8gc3RyZWFtIGZvcm1hdCBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIEF1ZGlvU3RyZWFtRm9ybWF0LmdldERlZmF1bHRJbnB1dEZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEF1ZGlvU3RyZWFtRm9ybWF0SW1wbC5nZXREZWZhdWx0SW5wdXRGb3JtYXQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXVkaW8gc3RyZWFtIGZvcm1hdCBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIHBjbSB3YXZlZm9ybWF0IGNoYXJhY3RlcmlzdGljcy5cbiAgICAgKiBAbWVtYmVyIEF1ZGlvU3RyZWFtRm9ybWF0LmdldFdhdmVGb3JtYXRQQ01cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNhbXBsZXNQZXJTZWNvbmQgLSBTYW1wbGUgcmF0ZSwgaW4gc2FtcGxlcyBwZXIgc2Vjb25kIChIZXJ0eikuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdHNQZXJTYW1wbGUgLSBCaXRzIHBlciBzYW1wbGUsIHR5cGljYWxseSAxNi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2hhbm5lbHMgLSBOdW1iZXIgb2YgY2hhbm5lbHMgaW4gdGhlIHdhdmVmb3JtLWF1ZGlvIGRhdGEuIE1vbmF1cmFsIGRhdGFcbiAgICAgKiAgICAgICAgdXNlcyBvbmUgY2hhbm5lbCBhbmQgc3RlcmVvIGRhdGEgdXNlcyB0d28gY2hhbm5lbHMuXG4gICAgICogQHJldHVybnMge0F1ZGlvU3RyZWFtRm9ybWF0fSBUaGUgYXVkaW8gc3RyZWFtIGZvcm1hdCBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIEF1ZGlvU3RyZWFtRm9ybWF0LmdldFdhdmVGb3JtYXRQQ00gPSBmdW5jdGlvbiAoc2FtcGxlc1BlclNlY29uZCwgYml0c1BlclNhbXBsZSwgY2hhbm5lbHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBdWRpb1N0cmVhbUZvcm1hdEltcGwoc2FtcGxlc1BlclNlY29uZCwgYml0c1BlclNhbXBsZSwgY2hhbm5lbHMpO1xuICAgIH07XG4gICAgcmV0dXJuIEF1ZGlvU3RyZWFtRm9ybWF0O1xufSgpKTtcbmV4cG9ydHMuQXVkaW9TdHJlYW1Gb3JtYXQgPSBBdWRpb1N0cmVhbUZvcm1hdDtcbi8qKlxuICogQHByaXZhdGVcbiAqIEBjbGFzcyBBdWRpb1N0cmVhbUZvcm1hdEltcGxcbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1jbGFzc2VzLXBlci1maWxlXG52YXIgQXVkaW9TdHJlYW1Gb3JtYXRJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBdWRpb1N0cmVhbUZvcm1hdEltcGwsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSB3aXRoIHRoZSBnaXZlbiB2YWx1ZXMuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNhbXBsZXNQZXJTZWMgLSBTYW1wbGVzIHBlciBzZWNvbmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdHNQZXJTYW1wbGUgLSBCaXRzIHBlciBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNoYW5uZWxzIC0gTnVtYmVyIG9mIGNoYW5uZWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEF1ZGlvU3RyZWFtRm9ybWF0SW1wbChzYW1wbGVzUGVyU2VjLCBiaXRzUGVyU2FtcGxlLCBjaGFubmVscykge1xuICAgICAgICBpZiAoc2FtcGxlc1BlclNlYyA9PT0gdm9pZCAwKSB7IHNhbXBsZXNQZXJTZWMgPSAxNjAwMDsgfVxuICAgICAgICBpZiAoYml0c1BlclNhbXBsZSA9PT0gdm9pZCAwKSB7IGJpdHNQZXJTYW1wbGUgPSAxNjsgfVxuICAgICAgICBpZiAoY2hhbm5lbHMgPT09IHZvaWQgMCkgeyBjaGFubmVscyA9IDE7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZm9ybWF0VGFnID0gMTtcbiAgICAgICAgX3RoaXMuYml0c1BlclNhbXBsZSA9IGJpdHNQZXJTYW1wbGU7XG4gICAgICAgIF90aGlzLnNhbXBsZXNQZXJTZWMgPSBzYW1wbGVzUGVyU2VjO1xuICAgICAgICBfdGhpcy5jaGFubmVscyA9IGNoYW5uZWxzO1xuICAgICAgICBfdGhpcy5hdmdCeXRlc1BlclNlYyA9IF90aGlzLnNhbXBsZXNQZXJTZWMgKiBfdGhpcy5jaGFubmVscyAqIChfdGhpcy5iaXRzUGVyU2FtcGxlIC8gOCk7XG4gICAgICAgIF90aGlzLmJsb2NrQWxpZ24gPSBfdGhpcy5jaGFubmVscyAqIE1hdGgubWF4KF90aGlzLmJpdHNQZXJTYW1wbGUsIDgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgZGVmYXVsdCBpbnB1dCBmb3JtYXQuXG4gICAgICogQG1lbWJlciBBdWRpb1N0cmVhbUZvcm1hdEltcGwuZ2V0RGVmYXVsdElucHV0Rm9ybWF0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtBdWRpb1N0cmVhbUZvcm1hdEltcGx9IFRoZSBkZWZhdWx0IGlucHV0IGZvcm1hdC5cbiAgICAgKi9cbiAgICBBdWRpb1N0cmVhbUZvcm1hdEltcGwuZ2V0RGVmYXVsdElucHV0Rm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEF1ZGlvU3RyZWFtRm9ybWF0SW1wbCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdC5cbiAgICAgKiBAbWVtYmVyIEF1ZGlvU3RyZWFtRm9ybWF0SW1wbC5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgQXVkaW9TdHJlYW1Gb3JtYXRJbXBsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIHJldHVybiBBdWRpb1N0cmVhbUZvcm1hdEltcGw7XG59KEF1ZGlvU3RyZWFtRm9ybWF0KSk7XG5leHBvcnRzLkF1ZGlvU3RyZWFtRm9ybWF0SW1wbCA9IEF1ZGlvU3RyZWFtRm9ybWF0SW1wbDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXVkaW9TdHJlYW1Gb3JtYXQuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBBbiBhYnN0cmFjdCBiYXNlIGNsYXNzIHRoYXQgZGVmaW5lcyBjYWxsYmFjayBtZXRob2RzIChyZWFkKCkgYW5kIGNsb3NlKCkpIGZvclxuICogY3VzdG9tIGF1ZGlvIGlucHV0IHN0cmVhbXMpLlxuICogQGNsYXNzIFB1bGxBdWRpb0lucHV0U3RyZWFtQ2FsbGJhY2tcbiAqL1xudmFyIFB1bGxBdWRpb0lucHV0U3RyZWFtQ2FsbGJhY2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFjaygpIHtcbiAgICB9XG4gICAgcmV0dXJuIFB1bGxBdWRpb0lucHV0U3RyZWFtQ2FsbGJhY2s7XG59KCkpO1xuZXhwb3J0cy5QdWxsQXVkaW9JbnB1dFN0cmVhbUNhbGxiYWNrID0gUHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFjaztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFjay5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiKTtcbnZhciBFeHBvcnRzXzIgPSByZXF1aXJlKFwiLi9FeHBvcnRzXCIpO1xuLyoqXG4gKiBDb250YWlucyBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB3aHkgYSByZXN1bHQgd2FzIGNhbmNlbGVkLlxuICogQGNsYXNzIENhbmNlbGxhdGlvbkRldGFpbHNcbiAqL1xudmFyIENhbmNlbGxhdGlvbkRldGFpbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0NhbmNlbGxhdGlvblJlYXNvbn0gcmVhc29uIC0gVGhlIGNhbmNlbGxhdGlvbiByZWFzb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yRGV0YWlscyAtIFRoZSBlcnJvciBkZXRhaWxzLCBpZiBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBDYW5jZWxsYXRpb25EZXRhaWxzKHJlYXNvbiwgZXJyb3JEZXRhaWxzLCBlcnJvckNvZGUpIHtcbiAgICAgICAgdGhpcy5wcml2UmVhc29uID0gcmVhc29uO1xuICAgICAgICB0aGlzLnByaXZFcnJvckRldGFpbHMgPSBlcnJvckRldGFpbHM7XG4gICAgICAgIHRoaXMucHJpdkVycm9yQ29kZSA9IGVycm9yQ29kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBDYW5jZWxsYXRpb25EZXRhaWxzIG9iamVjdCBmb3IgdGhlIGNhbmNlbGVkIFJlY29nbml0aW9uUmVzdWx0LlxuICAgICAqIEBtZW1iZXIgQ2FuY2VsbGF0aW9uRGV0YWlscy5mcm9tUmVzdWx0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7UmVjb2duaXRpb25SZXN1bHR9IHJlc3VsdCAtIFRoZSByZXN1bHQgdGhhdCB3YXMgY2FuY2VsZWQuXG4gICAgICogQHJldHVybnMge0NhbmNlbGxhdGlvbkRldGFpbHN9IFRoZSBjYW5jZWxsYXRpb24gZGV0YWlscyBvYmplY3QgYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBDYW5jZWxsYXRpb25EZXRhaWxzLmZyb21SZXN1bHQgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIHZhciByZWFzb24gPSBFeHBvcnRzXzIuQ2FuY2VsbGF0aW9uUmVhc29uLkVycm9yO1xuICAgICAgICB2YXIgZXJyb3JDb2RlID0gRXhwb3J0c18yLkNhbmNlbGxhdGlvbkVycm9yQ29kZS5Ob0Vycm9yO1xuICAgICAgICBpZiAoISFyZXN1bHQuanNvbikge1xuICAgICAgICAgICAgdmFyIHNpbXBsZVNwZWVjaCA9IEV4cG9ydHNfMS5TaW1wbGVTcGVlY2hQaHJhc2UuZnJvbUpTT04ocmVzdWx0Lmpzb24pO1xuICAgICAgICAgICAgcmVhc29uID0gRXhwb3J0c18xLkVudW1UcmFuc2xhdGlvbi5pbXBsVHJhbnNsYXRlQ2FuY2VsUmVzdWx0KHNpbXBsZVNwZWVjaC5SZWNvZ25pdGlvblN0YXR1cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEhcmVzdWx0LnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIGVycm9yQ29kZSA9IEV4cG9ydHNfMi5DYW5jZWxsYXRpb25FcnJvckNvZGVbcmVzdWx0LnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoRXhwb3J0c18xLkNhbmNlbGxhdGlvbkVycm9yQ29kZVByb3BlcnR5TmFtZSwgRXhwb3J0c18yLkNhbmNlbGxhdGlvbkVycm9yQ29kZVtFeHBvcnRzXzIuQ2FuY2VsbGF0aW9uRXJyb3JDb2RlLk5vRXJyb3JdKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDYW5jZWxsYXRpb25EZXRhaWxzKHJlYXNvbiwgcmVzdWx0LmVycm9yRGV0YWlscywgZXJyb3JDb2RlKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW5jZWxsYXRpb25EZXRhaWxzLnByb3RvdHlwZSwgXCJyZWFzb25cIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJlYXNvbiB0aGUgcmVjb2duaXRpb24gd2FzIGNhbmNlbGVkLlxuICAgICAgICAgKiBAbWVtYmVyIENhbmNlbGxhdGlvbkRldGFpbHMucHJvdG90eXBlLnJlYXNvblxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7Q2FuY2VsbGF0aW9uUmVhc29ufSBTcGVjaWZpZXMgdGhlIHJlYXNvbiBjYW5jZWxlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlYXNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbmNlbGxhdGlvbkRldGFpbHMucHJvdG90eXBlLCBcImVycm9yRGV0YWlsc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbiBjYXNlIG9mIGFuIHVuc3VjY2Vzc2Z1bCByZWNvZ25pdGlvbiwgcHJvdmlkZXMgZGV0YWlscyBvZiB0aGUgb2NjdXJyZWQgZXJyb3IuXG4gICAgICAgICAqIEBtZW1iZXIgQ2FuY2VsbGF0aW9uRGV0YWlscy5wcm90b3R5cGUuZXJyb3JEZXRhaWxzXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEEgU3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgZXJyb3IgZGV0YWlscy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yRGV0YWlscztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbmNlbGxhdGlvbkRldGFpbHMucHJvdG90eXBlLCBcIkVycm9yQ29kZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZXJyb3IgY29kZSBpbiBjYXNlIG9mIGFuIHVuc3VjY2Vzc2Z1bCByZWNvZ25pdGlvbi5cbiAgICAgICAgICogQWRkZWQgaW4gdmVyc2lvbiAxLjEuMC5cbiAgICAgICAgICogQHJldHVybiBBbiBlcnJvciBjb2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgZXJyb3IgcmVhc29uLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2RXJyb3JDb2RlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQ2FuY2VsbGF0aW9uRGV0YWlscztcbn0oKSk7XG5leHBvcnRzLkNhbmNlbGxhdGlvbkRldGFpbHMgPSBDYW5jZWxsYXRpb25EZXRhaWxzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYW5jZWxsYXRpb25EZXRhaWxzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogIERlZmluZXMgZXJyb3IgY29kZSBpbiBjYXNlIHRoYXQgQ2FuY2VsbGF0aW9uUmVhc29uIGlzIEVycm9yLlxuICogIEFkZGVkIGluIHZlcnNpb24gMS4xLjAuXG4gKi9cbnZhciBDYW5jZWxsYXRpb25FcnJvckNvZGU7XG4oZnVuY3Rpb24gKENhbmNlbGxhdGlvbkVycm9yQ29kZSkge1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IG5vIGVycm9yIG9jY3VycmVkIGR1cmluZyBzcGVlY2ggcmVjb2duaXRpb24uXG4gICAgICovXG4gICAgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW0NhbmNlbGxhdGlvbkVycm9yQ29kZVtcIk5vRXJyb3JcIl0gPSAwXSA9IFwiTm9FcnJvclwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBhbiBhdXRoZW50aWNhdGlvbiBlcnJvci5cbiAgICAgKi9cbiAgICBDYW5jZWxsYXRpb25FcnJvckNvZGVbQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW1wiQXV0aGVudGljYXRpb25GYWlsdXJlXCJdID0gMV0gPSBcIkF1dGhlbnRpY2F0aW9uRmFpbHVyZVwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IG9uZSBvciBtb3JlIHJlY29nbml0aW9uIHBhcmFtZXRlcnMgYXJlIGludmFsaWQuXG4gICAgICovXG4gICAgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW0NhbmNlbGxhdGlvbkVycm9yQ29kZVtcIkJhZFJlcXVlc3RQYXJhbWV0ZXJzXCJdID0gMl0gPSBcIkJhZFJlcXVlc3RQYXJhbWV0ZXJzXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIG51bWJlciBvZiBwYXJhbGxlbCByZXF1ZXN0cyBleGNlZWRlZCB0aGUgbnVtYmVyIG9mIGFsbG93ZWRcbiAgICAgKiBjb25jdXJyZW50IHRyYW5zY3JpcHRpb25zIGZvciB0aGUgc3Vic2NyaXB0aW9uLlxuICAgICAqL1xuICAgIENhbmNlbGxhdGlvbkVycm9yQ29kZVtDYW5jZWxsYXRpb25FcnJvckNvZGVbXCJUb29NYW55UmVxdWVzdHNcIl0gPSAzXSA9IFwiVG9vTWFueVJlcXVlc3RzXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGEgY29ubmVjdGlvbiBlcnJvci5cbiAgICAgKi9cbiAgICBDYW5jZWxsYXRpb25FcnJvckNvZGVbQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW1wiQ29ubmVjdGlvbkZhaWx1cmVcIl0gPSA0XSA9IFwiQ29ubmVjdGlvbkZhaWx1cmVcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgYSB0aW1lLW91dCBlcnJvciB3aGVuIHdhaXRpbmcgZm9yIHJlc3BvbnNlIGZyb20gc2VydmljZS5cbiAgICAgKi9cbiAgICBDYW5jZWxsYXRpb25FcnJvckNvZGVbQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW1wiU2VydmljZVRpbWVvdXRcIl0gPSA1XSA9IFwiU2VydmljZVRpbWVvdXRcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCBhbiBlcnJvciBpcyByZXR1cm5lZCBieSB0aGUgc2VydmljZS5cbiAgICAgKi9cbiAgICBDYW5jZWxsYXRpb25FcnJvckNvZGVbQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW1wiU2VydmljZUVycm9yXCJdID0gNl0gPSBcIlNlcnZpY2VFcnJvclwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBhbiB1bmV4cGVjdGVkIHJ1bnRpbWUgZXJyb3IuXG4gICAgICovXG4gICAgQ2FuY2VsbGF0aW9uRXJyb3JDb2RlW0NhbmNlbGxhdGlvbkVycm9yQ29kZVtcIlJ1bnRpbWVFcnJvclwiXSA9IDddID0gXCJSdW50aW1lRXJyb3JcIjtcbn0pKENhbmNlbGxhdGlvbkVycm9yQ29kZSA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uRXJyb3JDb2RlIHx8IChleHBvcnRzLkNhbmNlbGxhdGlvbkVycm9yQ29kZSA9IHt9KSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhbmNlbGxhdGlvbkVycm9yQ29kZXMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBEZWZpbmVzIHRoZSBwb3NzaWJsZSByZWFzb25zIGEgcmVjb2duaXRpb24gcmVzdWx0IG1pZ2h0IGJlIGNhbmNlbGVkLlxuICogQGNsYXNzIENhbmNlbGxhdGlvblJlYXNvblxuICovXG52YXIgQ2FuY2VsbGF0aW9uUmVhc29uO1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25SZWFzb24pIHtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgc3BlZWNoIHJlY29nbml0aW9uLlxuICAgICAqIEBtZW1iZXIgQ2FuY2VsbGF0aW9uUmVhc29uLkVycm9yXG4gICAgICovXG4gICAgQ2FuY2VsbGF0aW9uUmVhc29uW0NhbmNlbGxhdGlvblJlYXNvbltcIkVycm9yXCJdID0gMF0gPSBcIkVycm9yXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIGVuZCBvZiB0aGUgYXVkaW8gc3RyZWFtIHdhcyByZWFjaGVkLlxuICAgICAqIEBtZW1iZXIgQ2FuY2VsbGF0aW9uUmVhc29uLkVuZE9mU3RyZWFtXG4gICAgICovXG4gICAgQ2FuY2VsbGF0aW9uUmVhc29uW0NhbmNlbGxhdGlvblJlYXNvbltcIkVuZE9mU3RyZWFtXCJdID0gMV0gPSBcIkVuZE9mU3RyZWFtXCI7XG59KShDYW5jZWxsYXRpb25SZWFzb24gPSBleHBvcnRzLkNhbmNlbGxhdGlvblJlYXNvbiB8fCAoZXhwb3J0cy5DYW5jZWxsYXRpb25SZWFzb24gPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYW5jZWxsYXRpb25SZWFzb24uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290IGZvciBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4vL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuL0V4cG9ydHNcIik7XG4vKipcbiAqIENvbm5lY3Rpb24gaXMgYSBwcm94eSBjbGFzcyBmb3IgbWFuYWdpbmcgY29ubmVjdGlvbiB0byB0aGUgc3BlZWNoIHNlcnZpY2Ugb2YgdGhlIHNwZWNpZmllZCBSZWNvZ25pemVyLlxuICogQnkgZGVmYXVsdCwgYSBSZWNvZ25pemVyIGF1dG9ub21vdXNseSBtYW5hZ2VzIGNvbm5lY3Rpb24gdG8gc2VydmljZSB3aGVuIG5lZWRlZC5cbiAqIFRoZSBDb25uZWN0aW9uIGNsYXNzIHByb3ZpZGVzIGFkZGl0aW9uYWwgbWV0aG9kcyBmb3IgdXNlcnMgdG8gZXhwbGljaXRseSBvcGVuIG9yIGNsb3NlIGEgY29ubmVjdGlvbiBhbmRcbiAqIHRvIHN1YnNjcmliZSB0byBjb25uZWN0aW9uIHN0YXR1cyBjaGFuZ2VzLlxuICogVGhlIHVzZSBvZiBDb25uZWN0aW9uIGlzIG9wdGlvbmFsLCBhbmQgbWFpbmx5IGZvciBzY2VuYXJpb3Mgd2hlcmUgZmluZSB0dW5pbmcgb2YgYXBwbGljYXRpb25cbiAqIGJlaGF2aW9yIGJhc2VkIG9uIGNvbm5lY3Rpb24gc3RhdHVzIGlzIG5lZWRlZC4gVXNlcnMgY2FuIG9wdGlvbmFsbHkgY2FsbCBPcGVuKCkgdG8gbWFudWFsbHkgc2V0IHVwIGEgY29ubmVjdGlvblxuICogaW4gYWR2YW5jZSBiZWZvcmUgc3RhcnRpbmcgcmVjb2duaXRpb24gb24gdGhlIFJlY29nbml6ZXIgYXNzb2NpYXRlZCB3aXRoIHRoaXMgQ29ubmVjdGlvbi5cbiAqIElmIHRoZSBSZWNvZ25pemVyIG5lZWRzIHRvIGNvbm5lY3Qgb3IgZGlzY29ubmVjdCB0byBzZXJ2aWNlLCBpdCB3aWxsXG4gKiBzZXR1cCBvciBzaHV0ZG93biB0aGUgY29ubmVjdGlvbiBpbmRlcGVuZGVudGx5LiBJbiB0aGlzIGNhc2UgdGhlIENvbm5lY3Rpb24gd2lsbCBiZSBub3RpZmllZCBieSBjaGFuZ2Ugb2YgY29ubmVjdGlvblxuICogc3RhdHVzIHZpYSBDb25uZWN0ZWQvRGlzY29ubmVjdGVkIGV2ZW50cy5cbiAqIEFkZGVkIGluIHZlcnNpb24gMS4yLjAuXG4gKi9cbnZhciBDb25uZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb24oKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIENvbm5lY3Rpb24gaW5zdGFuY2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHJlY29nbml6ZXIgVGhlIHJlY29nbml6ZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb25uZWN0aW9uLlxuICAgICAqIEByZXR1cm4gVGhlIENvbm5lY3Rpb24gaW5zdGFuY2Ugb2YgdGhlIHJlY29nbml6ZXIuXG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5mcm9tUmVjb2duaXplciA9IGZ1bmN0aW9uIChyZWNvZ25pemVyKSB7XG4gICAgICAgIHZhciByZWNvQmFzZSA9IHJlY29nbml6ZXIuaW50ZXJuYWxEYXRhO1xuICAgICAgICB2YXIgcmV0ID0gbmV3IENvbm5lY3Rpb24oKTtcbiAgICAgICAgcmV0LnByaXZTZXJ2aWNlUmVjb2duaXplciA9IHJlY29CYXNlO1xuICAgICAgICByZXQucHJpdkV2ZW50TGlzdGVuZXIgPSByZXQucHJpdlNlcnZpY2VSZWNvZ25pemVyLmNvbm5lY3Rpb25FdmVudHMuYXR0YWNoKGZ1bmN0aW9uIChjb25uZWN0aW9uRXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uRXZlbnQubmFtZSA9PT0gXCJDb25uZWN0aW9uRXN0YWJsaXNoZWRFdmVudFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEhcmV0LmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXQuY29ubmVjdGVkKG5ldyBFeHBvcnRzXzEuQ29ubmVjdGlvbkV2ZW50QXJncyhjb25uZWN0aW9uRXZlbnQuY29ubmVjdGlvbklkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29ubmVjdGlvbkV2ZW50Lm5hbWUgPT09IFwiQ29ubmVjdGlvbkNsb3NlZEV2ZW50XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoISFyZXQuZGlzY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldC5kaXNjb25uZWN0ZWQobmV3IEV4cG9ydHNfMS5Db25uZWN0aW9uRXZlbnRBcmdzKGNvbm5lY3Rpb25FdmVudC5jb25uZWN0aW9uSWQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRvIHNldCB1cCBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2aWNlLlxuICAgICAqIFVzZXJzIGNhbiBvcHRpb25hbGx5IGNhbGwgb3BlbkNvbm5lY3Rpb24oKSB0byBtYW51YWxseSBzZXQgdXAgYSBjb25uZWN0aW9uIGluIGFkdmFuY2UgYmVmb3JlIHN0YXJ0aW5nIHJlY29nbml0aW9uIG9uIHRoZVxuICAgICAqIFJlY29nbml6ZXIgYXNzb2NpYXRlZCB3aXRoIHRoaXMgQ29ubmVjdGlvbi4gQWZ0ZXIgc3RhcnRpbmcgcmVjb2duaXRpb24sIGNhbGxpbmcgT3BlbigpIHdpbGwgaGF2ZSBubyBlZmZlY3RcbiAgICAgKlxuICAgICAqIE5vdGU6IE9uIHJldHVybiwgdGhlIGNvbm5lY3Rpb24gbWlnaHQgbm90IGJlIHJlYWR5IHlldC4gUGxlYXNlIHN1YnNjcmliZSB0byB0aGUgQ29ubmVjdGVkIGV2ZW50IHRvXG4gICAgICogYmUgbm90ZmllZCB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkLlxuICAgICAqL1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLm9wZW5Db25uZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByaXZTZXJ2aWNlUmVjb2duaXplci5jb25uZWN0KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24gdGhlIHNlcnZpY2UuXG4gICAgICogVXNlcnMgY2FuIG9wdGlvbmFsbHkgY2FsbCBjbG9zZUNvbm5lY3Rpb24oKSB0byBtYW51YWxseSBzaHV0ZG93biB0aGUgY29ubmVjdGlvbiBvZiB0aGUgYXNzb2NpYXRlZCBSZWNvZ25pemVyLlxuICAgICAqXG4gICAgICogSWYgY2xvc2VDb25uZWN0aW9uKCkgaXMgY2FsbGVkIGR1cmluZyByZWNvZ25pdGlvbiwgcmVjb2duaXRpb24gd2lsbCBmYWlsIGFuZCBjYW5jZWwgd3RpaCBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5jbG9zZUNvbm5lY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucHJpdlNlcnZpY2VSZWNvZ25pemVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERpc3Bvc2Ugb2YgYXNzb2NpYXRlZCByZXNvdXJjZXMuXG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5ICovXG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGlvbjtcbn0oKSk7XG5leHBvcnRzLkNvbm5lY3Rpb24gPSBDb25uZWN0aW9uO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25uZWN0aW9uLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vL1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uLlxuLy9cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuL0V4cG9ydHNcIik7XG4vKipcbiAqIERlZmluZXMgcGF5bG9hZCBmb3IgY29ubmVjdGlvbiBldmVudHMgbGlrZSBDb25uZWN0ZWQvRGlzY29ubmVjdGVkLlxuICogQWRkZWQgaW4gdmVyc2lvbiAxLjIuMFxuICovXG52YXIgQ29ubmVjdGlvbkV2ZW50QXJncyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGlvbkV2ZW50QXJncywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0aW9uRXZlbnRBcmdzKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBDb25uZWN0aW9uRXZlbnRBcmdzO1xufShFeHBvcnRzXzEuU2Vzc2lvbkV2ZW50QXJncykpO1xuZXhwb3J0cy5Db25uZWN0aW9uRXZlbnRBcmdzID0gQ29ubmVjdGlvbkV2ZW50QXJncztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29ubmVjdGlvbkV2ZW50QXJncy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBjbGFzcyBDb250cmFjdHNcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBDb250cmFjdHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29udHJhY3RzKCkge1xuICAgIH1cbiAgICBDb250cmFjdHMudGhyb3dJZk51bGxPclVuZGVmaW5lZCA9IGZ1bmN0aW9uIChwYXJhbSwgbmFtZSkge1xuICAgICAgICBpZiAocGFyYW0gPT09IHVuZGVmaW5lZCB8fCBwYXJhbSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidGhyb3dJZk51bGxPclVuZGVmaW5lZDpcIiArIG5hbWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250cmFjdHMudGhyb3dJZk51bGwgPSBmdW5jdGlvbiAocGFyYW0sIG5hbWUpIHtcbiAgICAgICAgaWYgKHBhcmFtID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0aHJvd0lmTnVsbDpcIiArIG5hbWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UgPSBmdW5jdGlvbiAocGFyYW0sIG5hbWUpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JVbmRlZmluZWQocGFyYW0sIG5hbWUpO1xuICAgICAgICBpZiAoKFwiXCIgKyBwYXJhbSkudHJpbSgpLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRocm93SWZOdWxsT3JXaGl0ZXNwYWNlOlwiICsgbmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQgPSBmdW5jdGlvbiAoaXNEaXNwb3NlZCkge1xuICAgICAgICBpZiAoaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidGhlIG9iamVjdCBpcyBhbHJlYWR5IGRpc3Bvc2VkXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250cmFjdHMudGhyb3dJZkFycmF5RW1wdHlPcldoaXRlc3BhY2UgPSBmdW5jdGlvbiAoYXJyYXksIG5hbWUpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JVbmRlZmluZWQoYXJyYXksIG5hbWUpO1xuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0aHJvd0lmQXJyYXlFbXB0eU9yV2hpdGVzcGFjZTpcIiArIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgYXJyYXlfMSA9IGFycmF5OyBfaSA8IGFycmF5XzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGFycmF5XzFbX2ldO1xuICAgICAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKGl0ZW0sIG5hbWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250cmFjdHMudGhyb3dJZkZpbGVEb2VzTm90RXhpc3QgPSBmdW5jdGlvbiAocGFyYW0sIG5hbWUpIHtcbiAgICAgICAgQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHBhcmFtLCBuYW1lKTtcbiAgICAgICAgLy8gVE9ETyBjaGVjayBmb3IgZmlsZSBleGlzdGVuY2UuXG4gICAgfTtcbiAgICByZXR1cm4gQ29udHJhY3RzO1xufSgpKTtcbmV4cG9ydHMuQ29udHJhY3RzID0gQ29udHJhY3RzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250cmFjdHMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEF1ZGlvQ29uZmlnXzEgPSByZXF1aXJlKFwiLi9BdWRpby9BdWRpb0NvbmZpZ1wiKTtcbmV4cG9ydHMuQXVkaW9Db25maWcgPSBBdWRpb0NvbmZpZ18xLkF1ZGlvQ29uZmlnO1xudmFyIEF1ZGlvU3RyZWFtRm9ybWF0XzEgPSByZXF1aXJlKFwiLi9BdWRpby9BdWRpb1N0cmVhbUZvcm1hdFwiKTtcbmV4cG9ydHMuQXVkaW9TdHJlYW1Gb3JtYXQgPSBBdWRpb1N0cmVhbUZvcm1hdF8xLkF1ZGlvU3RyZWFtRm9ybWF0O1xudmFyIEF1ZGlvSW5wdXRTdHJlYW1fMSA9IHJlcXVpcmUoXCIuL0F1ZGlvL0F1ZGlvSW5wdXRTdHJlYW1cIik7XG5leHBvcnRzLkF1ZGlvSW5wdXRTdHJlYW0gPSBBdWRpb0lucHV0U3RyZWFtXzEuQXVkaW9JbnB1dFN0cmVhbTtcbmV4cG9ydHMuUHVsbEF1ZGlvSW5wdXRTdHJlYW0gPSBBdWRpb0lucHV0U3RyZWFtXzEuUHVsbEF1ZGlvSW5wdXRTdHJlYW07XG5leHBvcnRzLlB1c2hBdWRpb0lucHV0U3RyZWFtID0gQXVkaW9JbnB1dFN0cmVhbV8xLlB1c2hBdWRpb0lucHV0U3RyZWFtO1xudmFyIENhbmNlbGxhdGlvblJlYXNvbl8xID0gcmVxdWlyZShcIi4vQ2FuY2VsbGF0aW9uUmVhc29uXCIpO1xuZXhwb3J0cy5DYW5jZWxsYXRpb25SZWFzb24gPSBDYW5jZWxsYXRpb25SZWFzb25fMS5DYW5jZWxsYXRpb25SZWFzb247XG52YXIgUHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFja18xID0gcmVxdWlyZShcIi4vQXVkaW8vUHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFja1wiKTtcbmV4cG9ydHMuUHVsbEF1ZGlvSW5wdXRTdHJlYW1DYWxsYmFjayA9IFB1bGxBdWRpb0lucHV0U3RyZWFtQ2FsbGJhY2tfMS5QdWxsQXVkaW9JbnB1dFN0cmVhbUNhbGxiYWNrO1xudmFyIEtleXdvcmRSZWNvZ25pdGlvbk1vZGVsXzEgPSByZXF1aXJlKFwiLi9LZXl3b3JkUmVjb2duaXRpb25Nb2RlbFwiKTtcbmV4cG9ydHMuS2V5d29yZFJlY29nbml0aW9uTW9kZWwgPSBLZXl3b3JkUmVjb2duaXRpb25Nb2RlbF8xLktleXdvcmRSZWNvZ25pdGlvbk1vZGVsO1xudmFyIFNlc3Npb25FdmVudEFyZ3NfMSA9IHJlcXVpcmUoXCIuL1Nlc3Npb25FdmVudEFyZ3NcIik7XG5leHBvcnRzLlNlc3Npb25FdmVudEFyZ3MgPSBTZXNzaW9uRXZlbnRBcmdzXzEuU2Vzc2lvbkV2ZW50QXJncztcbnZhciBSZWNvZ25pdGlvbkV2ZW50QXJnc18xID0gcmVxdWlyZShcIi4vUmVjb2duaXRpb25FdmVudEFyZ3NcIik7XG5leHBvcnRzLlJlY29nbml0aW9uRXZlbnRBcmdzID0gUmVjb2duaXRpb25FdmVudEFyZ3NfMS5SZWNvZ25pdGlvbkV2ZW50QXJncztcbnZhciBPdXRwdXRGb3JtYXRfMSA9IHJlcXVpcmUoXCIuL091dHB1dEZvcm1hdFwiKTtcbmV4cG9ydHMuT3V0cHV0Rm9ybWF0ID0gT3V0cHV0Rm9ybWF0XzEuT3V0cHV0Rm9ybWF0O1xudmFyIEludGVudFJlY29nbml0aW9uRXZlbnRBcmdzXzEgPSByZXF1aXJlKFwiLi9JbnRlbnRSZWNvZ25pdGlvbkV2ZW50QXJnc1wiKTtcbmV4cG9ydHMuSW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MgPSBJbnRlbnRSZWNvZ25pdGlvbkV2ZW50QXJnc18xLkludGVudFJlY29nbml0aW9uRXZlbnRBcmdzO1xudmFyIFJlY29nbml0aW9uUmVzdWx0XzEgPSByZXF1aXJlKFwiLi9SZWNvZ25pdGlvblJlc3VsdFwiKTtcbmV4cG9ydHMuUmVjb2duaXRpb25SZXN1bHQgPSBSZWNvZ25pdGlvblJlc3VsdF8xLlJlY29nbml0aW9uUmVzdWx0O1xudmFyIFNwZWVjaFJlY29nbml0aW9uUmVzdWx0XzEgPSByZXF1aXJlKFwiLi9TcGVlY2hSZWNvZ25pdGlvblJlc3VsdFwiKTtcbmV4cG9ydHMuU3BlZWNoUmVjb2duaXRpb25SZXN1bHQgPSBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdF8xLlNwZWVjaFJlY29nbml0aW9uUmVzdWx0O1xudmFyIEludGVudFJlY29nbml0aW9uUmVzdWx0XzEgPSByZXF1aXJlKFwiLi9JbnRlbnRSZWNvZ25pdGlvblJlc3VsdFwiKTtcbmV4cG9ydHMuSW50ZW50UmVjb2duaXRpb25SZXN1bHQgPSBJbnRlbnRSZWNvZ25pdGlvblJlc3VsdF8xLkludGVudFJlY29nbml0aW9uUmVzdWx0O1xudmFyIExhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsXzEgPSByZXF1aXJlKFwiLi9MYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbFwiKTtcbmV4cG9ydHMuTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWwgPSBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbF8xLkxhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsO1xudmFyIFNwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzXzEgPSByZXF1aXJlKFwiLi9TcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJnc1wiKTtcbmV4cG9ydHMuU3BlZWNoUmVjb2duaXRpb25FdmVudEFyZ3MgPSBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJnc18xLlNwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzO1xudmFyIFNwZWVjaFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3NfMSA9IHJlcXVpcmUoXCIuL1NwZWVjaFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3NcIik7XG5leHBvcnRzLlNwZWVjaFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MgPSBTcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzXzEuU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncztcbnZhciBUcmFuc2xhdGlvblJlY29nbml0aW9uRXZlbnRBcmdzXzEgPSByZXF1aXJlKFwiLi9UcmFuc2xhdGlvblJlY29nbml0aW9uRXZlbnRBcmdzXCIpO1xuZXhwb3J0cy5UcmFuc2xhdGlvblJlY29nbml0aW9uRXZlbnRBcmdzID0gVHJhbnNsYXRpb25SZWNvZ25pdGlvbkV2ZW50QXJnc18xLlRyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3M7XG52YXIgVHJhbnNsYXRpb25TeW50aGVzaXNFdmVudEFyZ3NfMSA9IHJlcXVpcmUoXCIuL1RyYW5zbGF0aW9uU3ludGhlc2lzRXZlbnRBcmdzXCIpO1xuZXhwb3J0cy5UcmFuc2xhdGlvblN5bnRoZXNpc0V2ZW50QXJncyA9IFRyYW5zbGF0aW9uU3ludGhlc2lzRXZlbnRBcmdzXzEuVHJhbnNsYXRpb25TeW50aGVzaXNFdmVudEFyZ3M7XG52YXIgVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdF8xID0gcmVxdWlyZShcIi4vVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdFwiKTtcbmV4cG9ydHMuVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdCA9IFRyYW5zbGF0aW9uUmVjb2duaXRpb25SZXN1bHRfMS5UcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0O1xudmFyIFRyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0XzEgPSByZXF1aXJlKFwiLi9UcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdFwiKTtcbmV4cG9ydHMuVHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHQgPSBUcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdF8xLlRyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0O1xudmFyIFJlc3VsdFJlYXNvbl8xID0gcmVxdWlyZShcIi4vUmVzdWx0UmVhc29uXCIpO1xuZXhwb3J0cy5SZXN1bHRSZWFzb24gPSBSZXN1bHRSZWFzb25fMS5SZXN1bHRSZWFzb247XG52YXIgU3BlZWNoQ29uZmlnXzEgPSByZXF1aXJlKFwiLi9TcGVlY2hDb25maWdcIik7XG5leHBvcnRzLlNwZWVjaENvbmZpZyA9IFNwZWVjaENvbmZpZ18xLlNwZWVjaENvbmZpZztcbnZhciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ18xID0gcmVxdWlyZShcIi4vU3BlZWNoVHJhbnNsYXRpb25Db25maWdcIik7XG5leHBvcnRzLlNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnID0gU3BlZWNoVHJhbnNsYXRpb25Db25maWdfMS5TcGVlY2hUcmFuc2xhdGlvbkNvbmZpZztcbnZhciBQcm9wZXJ0eUNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL1Byb3BlcnR5Q29sbGVjdGlvblwiKTtcbmV4cG9ydHMuUHJvcGVydHlDb2xsZWN0aW9uID0gUHJvcGVydHlDb2xsZWN0aW9uXzEuUHJvcGVydHlDb2xsZWN0aW9uO1xudmFyIFByb3BlcnR5SWRfMSA9IHJlcXVpcmUoXCIuL1Byb3BlcnR5SWRcIik7XG5leHBvcnRzLlByb3BlcnR5SWQgPSBQcm9wZXJ0eUlkXzEuUHJvcGVydHlJZDtcbnZhciBSZWNvZ25pemVyXzEgPSByZXF1aXJlKFwiLi9SZWNvZ25pemVyXCIpO1xuZXhwb3J0cy5SZWNvZ25pemVyID0gUmVjb2duaXplcl8xLlJlY29nbml6ZXI7XG52YXIgU3BlZWNoUmVjb2duaXplcl8xID0gcmVxdWlyZShcIi4vU3BlZWNoUmVjb2duaXplclwiKTtcbmV4cG9ydHMuU3BlZWNoUmVjb2duaXplciA9IFNwZWVjaFJlY29nbml6ZXJfMS5TcGVlY2hSZWNvZ25pemVyO1xudmFyIEludGVudFJlY29nbml6ZXJfMSA9IHJlcXVpcmUoXCIuL0ludGVudFJlY29nbml6ZXJcIik7XG5leHBvcnRzLkludGVudFJlY29nbml6ZXIgPSBJbnRlbnRSZWNvZ25pemVyXzEuSW50ZW50UmVjb2duaXplcjtcbnZhciBUcmFuc2xhdGlvblJlY29nbml6ZXJfMSA9IHJlcXVpcmUoXCIuL1RyYW5zbGF0aW9uUmVjb2duaXplclwiKTtcbmV4cG9ydHMuVHJhbnNsYXRpb25SZWNvZ25pemVyID0gVHJhbnNsYXRpb25SZWNvZ25pemVyXzEuVHJhbnNsYXRpb25SZWNvZ25pemVyO1xudmFyIFRyYW5zbGF0aW9uc18xID0gcmVxdWlyZShcIi4vVHJhbnNsYXRpb25zXCIpO1xuZXhwb3J0cy5UcmFuc2xhdGlvbnMgPSBUcmFuc2xhdGlvbnNfMS5UcmFuc2xhdGlvbnM7XG52YXIgTm9NYXRjaFJlYXNvbl8xID0gcmVxdWlyZShcIi4vTm9NYXRjaFJlYXNvblwiKTtcbmV4cG9ydHMuTm9NYXRjaFJlYXNvbiA9IE5vTWF0Y2hSZWFzb25fMS5Ob01hdGNoUmVhc29uO1xudmFyIE5vTWF0Y2hEZXRhaWxzXzEgPSByZXF1aXJlKFwiLi9Ob01hdGNoRGV0YWlsc1wiKTtcbmV4cG9ydHMuTm9NYXRjaERldGFpbHMgPSBOb01hdGNoRGV0YWlsc18xLk5vTWF0Y2hEZXRhaWxzO1xudmFyIFRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJnc18xID0gcmVxdWlyZShcIi4vVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzXCIpO1xuZXhwb3J0cy5UcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MgPSBUcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3NfMS5UcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3M7XG52YXIgSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJnc18xID0gcmVxdWlyZShcIi4vSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJnc1wiKTtcbmV4cG9ydHMuSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyA9IEludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3NfMS5JbnRlbnRSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzO1xudmFyIENhbmNlbGxhdGlvbkRldGFpbHNfMSA9IHJlcXVpcmUoXCIuL0NhbmNlbGxhdGlvbkRldGFpbHNcIik7XG5leHBvcnRzLkNhbmNlbGxhdGlvbkRldGFpbHMgPSBDYW5jZWxsYXRpb25EZXRhaWxzXzEuQ2FuY2VsbGF0aW9uRGV0YWlscztcbnZhciBDYW5jZWxsYXRpb25FcnJvckNvZGVzXzEgPSByZXF1aXJlKFwiLi9DYW5jZWxsYXRpb25FcnJvckNvZGVzXCIpO1xuZXhwb3J0cy5DYW5jZWxsYXRpb25FcnJvckNvZGUgPSBDYW5jZWxsYXRpb25FcnJvckNvZGVzXzEuQ2FuY2VsbGF0aW9uRXJyb3JDb2RlO1xudmFyIENvbm5lY3Rpb25FdmVudEFyZ3NfMSA9IHJlcXVpcmUoXCIuL0Nvbm5lY3Rpb25FdmVudEFyZ3NcIik7XG5leHBvcnRzLkNvbm5lY3Rpb25FdmVudEFyZ3MgPSBDb25uZWN0aW9uRXZlbnRBcmdzXzEuQ29ubmVjdGlvbkV2ZW50QXJncztcbnZhciBDb25uZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9Db25uZWN0aW9uXCIpO1xuZXhwb3J0cy5Db25uZWN0aW9uID0gQ29ubmVjdGlvbl8xLkNvbm5lY3Rpb247XG52YXIgUGhyYXNlTGlzdEdyYW1tYXJfMSA9IHJlcXVpcmUoXCIuL1BocmFzZUxpc3RHcmFtbWFyXCIpO1xuZXhwb3J0cy5QaHJhc2VMaXN0R3JhbW1hciA9IFBocmFzZUxpc3RHcmFtbWFyXzEuUGhyYXNlTGlzdEdyYW1tYXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4cG9ydHMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8qKlxuICogRGVmaW5lIHBheWxvYWQgb2YgaW50ZW50IHJlY29nbml0aW9uIGNhbmNlbGVkIHJlc3VsdCBldmVudHMuXG4gKiBAY2xhc3MgSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJnc1xuICovXG52YXIgSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncywgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Q2FuY2VsbGF0aW9uUmVhc29ufSByZXN1bHQgLSBUaGUgcmVzdWx0IG9mIHRoZSBpbnRlbnQgcmVjb2duaXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9mZnNldCAtIFRoZSBvZmZzZXQuXG4gICAgICogQHBhcmFtIHtJbnRlbnRSZWNvZ25pdGlvblJlc3VsdH0gc2Vzc2lvbklkIC0gVGhlIHNlc3Npb24gaWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyhyZWFzb24sIGVycm9yRGV0YWlscywgZXJyb3JDb2RlLCByZXN1bHQsIG9mZnNldCwgc2Vzc2lvbklkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHJlc3VsdCwgb2Zmc2V0LCBzZXNzaW9uSWQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZSZWFzb24gPSByZWFzb247XG4gICAgICAgIF90aGlzLnByaXZFcnJvckRldGFpbHMgPSBlcnJvckRldGFpbHM7XG4gICAgICAgIF90aGlzLnByaXZFcnJvckNvZGUgPSBlcnJvckNvZGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MucHJvdG90eXBlLCBcInJlYXNvblwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmVhc29uIHRoZSByZWNvZ25pdGlvbiB3YXMgY2FuY2VsZWQuXG4gICAgICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUucmVhc29uXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtDYW5jZWxsYXRpb25SZWFzb259IFNwZWNpZmllcyB0aGUgcmVhc29uIGNhbmNlbGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVhc29uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUsIFwiZXJyb3JDb2RlXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBlcnJvciBjb2RlIGluIGNhc2Ugb2YgYW4gdW5zdWNjZXNzZnVsIHJlY29nbml0aW9uLlxuICAgICAgICAgKiBBZGRlZCBpbiB2ZXJzaW9uIDEuMS4wLlxuICAgICAgICAgKiBAcmV0dXJuIEFuIGVycm9yIGNvZGUgdGhhdCByZXByZXNlbnRzIHRoZSBlcnJvciByZWFzb24uXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZFcnJvckNvZGU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlbnRSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLnByb3RvdHlwZSwgXCJlcnJvckRldGFpbHNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogSW4gY2FzZSBvZiBhbiB1bnN1Y2Nlc3NmdWwgcmVjb2duaXRpb24sIHByb3ZpZGVzIGRldGFpbHMgb2YgdGhlIG9jY3VycmVkIGVycm9yLlxuICAgICAgICAgKiBAbWVtYmVyIEludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MucHJvdG90eXBlLmVycm9yRGV0YWlsc1xuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGVycm9yIGRldGFpbHMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZFcnJvckRldGFpbHM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBJbnRlbnRSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzO1xufShFeHBvcnRzXzEuSW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MpKTtcbmV4cG9ydHMuSW50ZW50UmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyA9IEludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3M7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUludGVudFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8qKlxuICogSW50ZW50IHJlY29nbml0aW9uIHJlc3VsdCBldmVudCBhcmd1bWVudHMuXG4gKiBAY2xhc3NcbiAqL1xudmFyIEludGVudFJlY29nbml0aW9uRXZlbnRBcmdzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbnRlbnRSZWNvZ25pdGlvbkV2ZW50QXJncywgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBUaGUgcmVzdWx0IG9mIHRoZSBpbnRlbnQgcmVjb2duaXRpb24uXG4gICAgICogQHBhcmFtIG9mZnNldCAtIFRoZSBvZmZzZXQuXG4gICAgICogQHBhcmFtIHNlc3Npb25JZCAtIFRoZSBzZXNzaW9uIGlkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEludGVudFJlY29nbml0aW9uRXZlbnRBcmdzKHJlc3VsdCwgb2Zmc2V0LCBzZXNzaW9uSWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgb2Zmc2V0LCBzZXNzaW9uSWQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZSZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVudFJlY29nbml0aW9uRXZlbnRBcmdzLnByb3RvdHlwZSwgXCJyZXN1bHRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVwcmVzZW50cyB0aGUgaW50ZW50IHJlY29nbml0aW9uIHJlc3VsdC5cbiAgICAgICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pdGlvbkV2ZW50QXJncy5wcm90b3R5cGUucmVzdWx0XG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtJbnRlbnRSZWNvZ25pdGlvblJlc3VsdH0gUmVwcmVzZW50cyB0aGUgaW50ZW50IHJlY29nbml0aW9uIHJlc3VsdC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEludGVudFJlY29nbml0aW9uRXZlbnRBcmdzO1xufShFeHBvcnRzXzEuUmVjb2duaXRpb25FdmVudEFyZ3MpKTtcbmV4cG9ydHMuSW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MgPSBJbnRlbnRSZWNvZ25pdGlvbkV2ZW50QXJncztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW50ZW50UmVjb2duaXRpb25FdmVudEFyZ3MuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8qKlxuICogSW50ZW50IHJlY29nbml0aW9uIHJlc3VsdC5cbiAqIEBjbGFzc1xuICovXG52YXIgSW50ZW50UmVjb2duaXRpb25SZXN1bHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludGVudFJlY29nbml0aW9uUmVzdWx0LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIGludGVudElkIC0gVGhlIGludGVudCBpZC5cbiAgICAgKiBAcGFyYW0gcmVzdWx0SWQgLSBUaGUgcmVzdWx0IGlkLlxuICAgICAqIEBwYXJhbSByZWFzb24gLSBUaGUgcmVhc29uLlxuICAgICAqIEBwYXJhbSB0ZXh0IC0gVGhlIHJlY29nbml6ZWQgdGV4dC5cbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gLSBUaGUgZHVyYXRpb24uXG4gICAgICogQHBhcmFtIG9mZnNldCAtIFRoZSBvZmZzZXQgaW50byB0aGUgc3RyZWFtLlxuICAgICAqIEBwYXJhbSBlcnJvckRldGFpbHMgLSBFcnJvciBkZXRhaWxzLCBpZiBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ganNvbiAtIEFkZGl0aW9uYWwgSnNvbiwgaWYgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHByb3BlcnRpZXMgLSBBZGRpdGlvbmFsIHByb3BlcnRpZXMsIGlmIHByb3ZpZGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEludGVudFJlY29nbml0aW9uUmVzdWx0KGludGVudElkLCByZXN1bHRJZCwgcmVhc29uLCB0ZXh0LCBkdXJhdGlvbiwgb2Zmc2V0LCBlcnJvckRldGFpbHMsIGpzb24sIHByb3BlcnRpZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcmVzdWx0SWQsIHJlYXNvbiwgdGV4dCwgZHVyYXRpb24sIG9mZnNldCwgZXJyb3JEZXRhaWxzLCBqc29uLCBwcm9wZXJ0aWVzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcml2SW50ZW50SWQgPSBpbnRlbnRJZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZW50UmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLCBcImludGVudElkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgU3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgaW50ZW50IGlkZW50aWZpZXIgYmVpbmcgcmVjb2duaXplZC5cbiAgICAgICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pdGlvblJlc3VsdC5wcm90b3R5cGUuaW50ZW50SWRcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gQSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBpbnRlbnQgaWRlbnRpZmllciBiZWluZyByZWNvZ25pemVkLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2SW50ZW50SWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBJbnRlbnRSZWNvZ25pdGlvblJlc3VsdDtcbn0oRXhwb3J0c18xLlNwZWVjaFJlY29nbml0aW9uUmVzdWx0KSk7XG5leHBvcnRzLkludGVudFJlY29nbml0aW9uUmVzdWx0ID0gSW50ZW50UmVjb2duaXRpb25SZXN1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUludGVudFJlY29nbml0aW9uUmVzdWx0LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24uc3BlZWNoL0V4cG9ydHNcIik7XG52YXIgQ29udHJhY3RzXzEgPSByZXF1aXJlKFwiLi9Db250cmFjdHNcIik7XG52YXIgRXhwb3J0c18yID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8qKlxuICogSW50ZW50IHJlY29nbml6ZXIuXG4gKiBAY2xhc3NcbiAqL1xudmFyIEludGVudFJlY29nbml6ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludGVudFJlY29nbml6ZXIsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIEludGVudFJlY29nbml6ZXIuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtTcGVlY2hDb25maWd9IHNwZWVjaENvbmZpZyAtIFRoZSBzZXQgb2YgY29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSB7QXVkaW9Db25maWd9IGF1ZGlvQ29uZmlnIC0gQW4gb3B0aW9uYWwgYXVkaW8gaW5wdXQgY29uZmlnIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVjb2duaXplclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEludGVudFJlY29nbml6ZXIoc3BlZWNoQ29uZmlnLCBhdWRpb0NvbmZpZykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGxPclVuZGVmaW5lZChzcGVlY2hDb25maWcsIFwic3BlZWNoQ29uZmlnXCIpO1xuICAgICAgICB2YXIgY29uZmlnSW1wbCA9IHNwZWVjaENvbmZpZztcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JVbmRlZmluZWQoY29uZmlnSW1wbCwgXCJzcGVlY2hDb25maWdcIik7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYXVkaW9Db25maWcsIGNvbmZpZ0ltcGwucHJvcGVydGllcywgbmV3IEV4cG9ydHNfMS5JbnRlbnRDb25uZWN0aW9uRmFjdG9yeSgpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wcml2QWRkZWRJbnRlbnRzID0gW107XG4gICAgICAgIF90aGlzLnByaXZBZGRlZExtSW50ZW50cyA9IHt9O1xuICAgICAgICBfdGhpcy5wcml2RGlzcG9zZWRJbnRlbnRSZWNvZ25pemVyID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnByaXZQcm9wZXJ0aWVzID0gY29uZmlnSW1wbC5wcm9wZXJ0aWVzO1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UoX3RoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2UpLCBFeHBvcnRzXzIuUHJvcGVydHlJZFtFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2VdKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUsIFwic3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBzcG9rZW4gbGFuZ3VhZ2Ugb2YgcmVjb2duaXRpb24uXG4gICAgICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZVxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgc3Bva2VuIGxhbmd1YWdlIG9mIHJlY29nbml0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplcik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmdldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZSwgXCJhdXRob3JpemF0aW9uVG9rZW5cIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgYXV0aG9yaXphdGlvbiB0b2tlbiB1c2VkIHRvIGNvbW11bmljYXRlIHdpdGggdGhlIHNlcnZpY2UuXG4gICAgICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuYXV0aG9yaXphdGlvblRva2VuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVG9rZW4pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cy9TZXRzIHRoZSBhdXRob3JpemF0aW9uIHRva2VuIHVzZWQgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgc2VydmljZS5cbiAgICAgICAgICogTm90ZTogUGxlYXNlIHVzZSBhIHRva2VuIGRlcml2ZWQgZnJvbSB5b3VyIExhbmd1YWdlVW5kZXJzdGFuZGluZyBzdWJzY3JpcHRpb24ga2V5IGZvciB0aGUgSW50ZW50IHJlY29nbml6ZXIuXG4gICAgICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuYXV0aG9yaXphdGlvblRva2VuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIEF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuLCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZSwgXCJwcm9wZXJ0aWVzXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb2xsZWN0aW9uIG9mIHByb3BlcnRpZXMgYW5kIHRoZWlyIHZhbHVlcyBkZWZpbmVkIGZvciB0aGlzIEludGVudFJlY29nbml6ZXIuXG4gICAgICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUucHJvcGVydGllc1xuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7UHJvcGVydHlDb2xsZWN0aW9ufSBUaGUgY29sbGVjdGlvbiBvZiBwcm9wZXJ0aWVzIGFuZCB0aGVpclxuICAgICAgICAgKiAgICAgICAgICB2YWx1ZXMgZGVmaW5lZCBmb3IgdGhpcyBJbnRlbnRSZWNvZ25pemVyLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvcGVydGllcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogU3RhcnRzIGludGVudCByZWNvZ25pdGlvbiwgYW5kIHN0b3BzIGFmdGVyIHRoZSBmaXJzdCB1dHRlcmFuY2UgaXMgcmVjb2duaXplZC5cbiAgICAgKiBUaGUgdGFzayByZXR1cm5zIHRoZSByZWNvZ25pdGlvbiB0ZXh0IGFuZCBpbnRlbnQgYXMgcmVzdWx0LlxuICAgICAqIE5vdGU6IFJlY29nbml6ZU9uY2VBc3luYygpIHJldHVybnMgd2hlbiB0aGUgZmlyc3QgdXR0ZXJhbmNlIGhhcyBiZWVuIHJlY29nbml6ZWQsXG4gICAgICogICAgICAgc28gaXQgaXMgc3VpdGFibGUgb25seSBmb3Igc2luZ2xlIHNob3QgcmVjb2duaXRpb24gbGlrZSBjb21tYW5kIG9yIHF1ZXJ5LlxuICAgICAqICAgICAgIEZvciBsb25nLXJ1bm5pbmcgcmVjb2duaXRpb24sIHVzZSBTdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jKCkgaW5zdGVhZC5cbiAgICAgKiBAbWVtYmVyIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLnJlY29nbml6ZU9uY2VBc3luY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0gY2IgLSBDYWxsYmFjayB0aGF0IHJlY2VpdmVkIHRoZSByZWNvZ25pdGlvbiBoYXMgZmluaXNoZWQgd2l0aCBhbiBJbnRlbnRSZWNvZ25pdGlvblJlc3VsdC5cbiAgICAgKiBAcGFyYW0gZXJyIC0gQ2FsbGJhY2sgaW52b2tlZCBpbiBjYXNlIG9mIGFuIGVycm9yLlxuICAgICAqL1xuICAgIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLnJlY29nbml6ZU9uY2VBc3luYyA9IGZ1bmN0aW9uIChjYiwgZXJyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplcik7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMucHJpdkFkZGVkTG1JbnRlbnRzKS5sZW5ndGggIT09IDAgfHwgdW5kZWZpbmVkICE9PSB0aGlzLnByaXZVbWJyZWxsYUludGVudCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5idWlsZFNwZWVjaENvbnRleHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWNvLnNwZWVjaENvbnRleHQuc2V0U2VjdGlvbihcImludGVudFwiLCBjb250ZXh0LkludGVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVjby5keW5hbWljR3JhbW1hci5hZGRSZWZlcmVuY2VHcmFtbWFyKGNvbnRleHQuUmVmZXJlbmNlR3JhbW1hcnMpO1xuICAgICAgICAgICAgICAgIHZhciBpbnRlbnRSZWNvID0gdGhpcy5wcml2UmVjbztcbiAgICAgICAgICAgICAgICBpbnRlbnRSZWNvLnNldEludGVudHModGhpcy5wcml2QWRkZWRMbUludGVudHMsIHRoaXMucHJpdlVtYnJlbGxhSW50ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdGFydChFeHBvcnRzXzEuUmVjb2duaXRpb25Nb2RlLkludGVyYWN0aXZlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghIWNiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICAgICAgaWYgKCEhZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGVycih0eXBlZEVycm9yLm5hbWUgKyBcIjogXCIgKyB0eXBlZEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdGFydHMgc3BlZWNoIHJlY29nbml0aW9uLCB1bnRpbCBzdG9wQ29udGludW91c1JlY29nbml0aW9uQXN5bmMoKSBpcyBjYWxsZWQuXG4gICAgICogVXNlciBtdXN0IHN1YnNjcmliZSB0byBldmVudHMgdG8gcmVjZWl2ZSByZWNvZ25pdGlvbiByZXN1bHRzLlxuICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuc3RhcnRDb250aW51b3VzUmVjb2duaXRpb25Bc3luY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0gY2IgLSBDYWxsYmFjayBpbnZva2VkIG9uY2UgdGhlIHJlY29nbml0aW9uIGhhcyBzdGFydGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuc3RhcnRDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyA9IGZ1bmN0aW9uIChjYiwgZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplcik7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMucHJpdkFkZGVkTG1JbnRlbnRzKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuYnVpbGRTcGVlY2hDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcml2UmVjby5zcGVlY2hDb250ZXh0LnNldFNlY3Rpb24oXCJpbnRlbnRcIiwgY29udGV4dC5JbnRlbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlJlY28uZHluYW1pY0dyYW1tYXIuYWRkUmVmZXJlbmNlR3JhbW1hcihjb250ZXh0LlJlZmVyZW5jZUdyYW1tYXJzKTtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZW50UmVjbyA9IHRoaXMucHJpdlJlY287XG4gICAgICAgICAgICAgICAgaW50ZW50UmVjby5zZXRJbnRlbnRzKHRoaXMucHJpdkFkZGVkTG1JbnRlbnRzLCB0aGlzLnByaXZVbWJyZWxsYUludGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RhcnQoRXhwb3J0c18xLlJlY29nbml0aW9uTW9kZS5Db252ZXJzYXRpb24sIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIC8vIHJlcG9ydCByZXN1bHQgdG8gcHJvbWlzZS5cbiAgICAgICAgICAgIGlmICghIWNiKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZWRFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBlcnIodHlwZWRFcnJvci5uYW1lICsgXCI6IFwiICsgdHlwZWRFcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRGVzdHJveSB0aGUgcmVjb2duaXplci5cbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RvcHMgY29udGludW91cyBpbnRlbnQgcmVjb2duaXRpb24uXG4gICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5zdG9wQ29udGludW91c1JlY29nbml0aW9uQXN5bmNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIGNiIC0gQ2FsbGJhY2sgaW52b2tlZCBvbmNlIHRoZSByZWNvZ25pdGlvbiBoYXMgc3RvcHBlZC5cbiAgICAgKiBAcGFyYW0gZXJyIC0gQ2FsbGJhY2sgaW52b2tlZCBpbiBjYXNlIG9mIGFuIGVycm9yLlxuICAgICAqL1xuICAgIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLnN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyA9IGZ1bmN0aW9uIChjYiwgZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplcik7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGVycih0eXBlZEVycm9yLm5hbWUgKyBcIjogXCIgKyB0eXBlZEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdGFydHMgc3BlZWNoIHJlY29nbml0aW9uIHdpdGgga2V5d29yZCBzcG90dGluZywgdW50aWwgc3RvcEtleXdvcmRSZWNvZ25pdGlvbkFzeW5jKCkgaXMgY2FsbGVkLlxuICAgICAqIFVzZXIgbXVzdCBzdWJzY3JpYmUgdG8gZXZlbnRzIHRvIHJlY2VpdmUgcmVjb2duaXRpb24gcmVzdWx0cy5cbiAgICAgKiBOb3RlOiBLZXkgd29yZCBzcG90dGluZyBmdW5jdGlvbmFsaXR5IGlzIG9ubHkgYXZhaWxhYmxlIG9uIHRoZSBTcGVlY2ggRGV2aWNlcyBTREsuXG4gICAgICogICAgICAgVGhpcyBmdW5jdGlvbmFsaXR5IGlzIGN1cnJlbnRseSBub3QgaW5jbHVkZWQgaW4gdGhlIFNESyBpdHNlbGYuXG4gICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5zdGFydEtleXdvcmRSZWNvZ25pdGlvbkFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7S2V5d29yZFJlY29nbml0aW9uTW9kZWx9IG1vZGVsIC0gVGhlIGtleXdvcmQgcmVjb2duaXRpb24gbW9kZWwgdGhhdCBzcGVjaWZpZXMgdGhlIGtleXdvcmQgdG8gYmUgcmVjb2duaXplZC5cbiAgICAgKiBAcGFyYW0gY2IgLSBDYWxsYmFjayBpbnZva2VkIG9uY2UgdGhlIHJlY29nbml0aW9uIGhhcyBzdGFydGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuc3RhcnRLZXl3b3JkUmVjb2duaXRpb25Bc3luYyA9IGZ1bmN0aW9uIChtb2RlbCwgY2IsIGVycikge1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGwobW9kZWwsIFwibW9kZWxcIik7XG4gICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgZXJyKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0b3BzIGNvbnRpbnVvdXMgc3BlZWNoIHJlY29nbml0aW9uLlxuICAgICAqIE5vdGU6IEtleSB3b3JkIHNwb3R0aW5nIGZ1bmN0aW9uYWxpdHkgaXMgb25seSBhdmFpbGFibGUgb24gdGhlIFNwZWVjaCBEZXZpY2VzIFNESy5cbiAgICAgKiAgICAgICBUaGlzIGZ1bmN0aW9uYWxpdHkgaXMgY3VycmVudGx5IG5vdCBpbmNsdWRlZCBpbiB0aGUgU0RLIGl0c2VsZi5cbiAgICAgKiBAbWVtYmVyIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLnN0b3BLZXl3b3JkUmVjb2duaXRpb25Bc3luY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0gY2IgLSBDYWxsYmFjayBpbnZva2VkIG9uY2UgdGhlIHJlY29nbml0aW9uIGhhcyBzdG9wcGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuc3RvcEtleXdvcmRSZWNvZ25pdGlvbkFzeW5jID0gZnVuY3Rpb24gKGNiLCBlcnIpIHtcbiAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSBwaHJhc2UgdGhhdCBzaG91bGQgYmUgcmVjb2duaXplZCBhcyBpbnRlbnQuXG4gICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5hZGRJbnRlbnRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGludGVudElkIC0gQSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBpbnRlbnQgdG8gYmUgcmVjb2duaXplZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGhyYXNlIC0gQSBTdHJpbmcgdGhhdCBzcGVjaWZpZXMgdGhlIHBocmFzZSByZXByZXNlbnRpbmcgdGhlIGludGVudC5cbiAgICAgKi9cbiAgICBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5hZGRJbnRlbnQgPSBmdW5jdGlvbiAoc2ltcGxlUGhyYXNlLCBpbnRlbnRJZCkge1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkSW50ZW50UmVjb2duaXplcik7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShpbnRlbnRJZCwgXCJpbnRlbnRJZFwiKTtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHNpbXBsZVBocmFzZSwgXCJzaW1wbGVQaHJhc2VcIik7XG4gICAgICAgIHRoaXMucHJpdkFkZGVkSW50ZW50cy5wdXNoKFtpbnRlbnRJZCwgc2ltcGxlUGhyYXNlXSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGludGVudCBmcm9tIExhbmd1YWdlIFVuZGVyc3RhbmRpbmcgc2VydmljZSBmb3IgcmVjb2duaXRpb24uXG4gICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5hZGRJbnRlbnRXaXRoTGFuZ3VhZ2VNb2RlbFxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW50ZW50SWQgLSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGlkZW50aWZpZXIgb2YgdGhlIGludGVudFxuICAgICAqICAgICAgICB0byBiZSByZWNvZ25pemVkLiBJZ25vcmVkIGlmIGludGVudE5hbWUgaXMgZW1wdHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIC0gVGhlIGludGVudCBtb2RlbCBmcm9tIExhbmd1YWdlIFVuZGVyc3RhbmRpbmcgc2VydmljZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW50ZW50TmFtZSAtIFRoZSBpbnRlbnQgbmFtZSBkZWZpbmVkIGluIHRoZSBpbnRlbnQgbW9kZWwuIElmIGl0XG4gICAgICogICAgICAgIGlzIGVtcHR5LCBhbGwgaW50ZW50IG5hbWVzIGRlZmluZWQgaW4gdGhlIG1vZGVsIHdpbGwgYmUgYWRkZWQuXG4gICAgICovXG4gICAgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuYWRkSW50ZW50V2l0aExhbmd1YWdlTW9kZWwgPSBmdW5jdGlvbiAoaW50ZW50SWQsIG1vZGVsLCBpbnRlbnROYW1lKSB7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRJbnRlbnRSZWNvZ25pemVyKTtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKGludGVudElkLCBcImludGVudElkXCIpO1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGwobW9kZWwsIFwibW9kZWxcIik7XG4gICAgICAgIHZhciBtb2RlbEltcGwgPSBtb2RlbDtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKG1vZGVsSW1wbC5hcHBJZCwgXCJtb2RlbC5hcHBJZFwiKTtcbiAgICAgICAgdGhpcy5wcml2QWRkZWRMbUludGVudHNbaW50ZW50SWRdID0gbmV3IEV4cG9ydHNfMS5BZGRlZExtSW50ZW50KG1vZGVsSW1wbCwgaW50ZW50TmFtZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAc3VtbWFyeSBBZGRzIGFsbCBpbnRlbnRzIGZyb20gdGhlIHNwZWNpZmllZCBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIE1vZGVsLlxuICAgICAqIEBtZW1iZXIgSW50ZW50UmVjb2duaXplci5wcm90b3R5cGUuYWRkQWxsSW50ZW50c1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbH0gbW9kZWwgLSBUaGUgbGFuZ3VhZ2UgdW5kZXJzdGFuZGluZyBtb2RlbCBjb250YWluaW5nIHRoZSBpbnRlbnRzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnRlbnRJZCAtIEEgY3VzdG9tIGlkIFN0cmluZyB0byBiZSByZXR1cm5lZCBpbiB0aGUgSW50ZW50UmVjb2duaXRpb25SZXN1bHQncyBnZXRJbnRlbnRJZCgpIG1ldGhvZC5cbiAgICAgKi9cbiAgICBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5hZGRBbGxJbnRlbnRzID0gZnVuY3Rpb24gKG1vZGVsLCBpbnRlbnRJZCkge1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGwobW9kZWwsIFwibW9kZWxcIik7XG4gICAgICAgIHZhciBtb2RlbEltcGwgPSBtb2RlbDtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKG1vZGVsSW1wbC5hcHBJZCwgXCJtb2RlbC5hcHBJZFwiKTtcbiAgICAgICAgdGhpcy5wcml2VW1icmVsbGFJbnRlbnQgPSBuZXcgRXhwb3J0c18xLkFkZGVkTG1JbnRlbnQobW9kZWxJbXBsLCBpbnRlbnRJZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjbG9zZXMgYWxsIGV4dGVybmFsIHJlc291cmNlcyBoZWxkIGJ5IGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQG1lbWJlciBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5jbG9zZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZEaXNwb3NlZCh0aGlzLnByaXZEaXNwb3NlZEludGVudFJlY29nbml6ZXIpO1xuICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgfTtcbiAgICBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5jcmVhdGVSZWNvZ25pemVyQ29uZmlnID0gZnVuY3Rpb24gKHNwZWVjaENvbmZpZykge1xuICAgICAgICByZXR1cm4gbmV3IEV4cG9ydHNfMS5SZWNvZ25pemVyQ29uZmlnKHNwZWVjaENvbmZpZywgdGhpcy5wcm9wZXJ0aWVzKTtcbiAgICB9O1xuICAgIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLmNyZWF0ZVNlcnZpY2VSZWNvZ25pemVyID0gZnVuY3Rpb24gKGF1dGhlbnRpY2F0aW9uLCBjb25uZWN0aW9uRmFjdG9yeSwgYXVkaW9Db25maWcsIHJlY29nbml6ZXJDb25maWcpIHtcbiAgICAgICAgdmFyIGF1ZGlvSW1wbCA9IGF1ZGlvQ29uZmlnO1xuICAgICAgICByZXR1cm4gbmV3IEV4cG9ydHNfMS5JbnRlbnRTZXJ2aWNlUmVjb2duaXplcihhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvSW1wbCwgcmVjb2duaXplckNvbmZpZywgdGhpcyk7XG4gICAgfTtcbiAgICBJbnRlbnRSZWNvZ25pemVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKGRpc3Bvc2luZykge1xuICAgICAgICBpZiAodGhpcy5wcml2RGlzcG9zZWRJbnRlbnRSZWNvZ25pemVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc3Bvc2luZykge1xuICAgICAgICAgICAgdGhpcy5wcml2RGlzcG9zZWRJbnRlbnRSZWNvZ25pemVyID0gdHJ1ZTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMsIGRpc3Bvc2luZyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEludGVudFJlY29nbml6ZXIucHJvdG90eXBlLmJ1aWxkU3BlZWNoQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFwcElkO1xuICAgICAgICB2YXIgcmVnaW9uO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uS2V5O1xuICAgICAgICB2YXIgcmVmR3JhbW1lcnMgPSBbXTtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gdGhpcy5wcml2VW1icmVsbGFJbnRlbnQpIHtcbiAgICAgICAgICAgIGFwcElkID0gdGhpcy5wcml2VW1icmVsbGFJbnRlbnQubW9kZWxJbXBsLmFwcElkO1xuICAgICAgICAgICAgcmVnaW9uID0gdGhpcy5wcml2VW1icmVsbGFJbnRlbnQubW9kZWxJbXBsLnJlZ2lvbjtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbktleSA9IHRoaXMucHJpdlVtYnJlbGxhSW50ZW50Lm1vZGVsSW1wbC5zdWJzY3JpcHRpb25LZXk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQnVpbGQgdGhlIHJlZmVyZW5jZSBncmFtbWVyIGFycmF5LlxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXModGhpcy5wcml2QWRkZWRMbUludGVudHMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGludGVudElkID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIGFkZGVkTG1JbnRlbnQgPSB0aGlzLnByaXZBZGRlZExtSW50ZW50c1tpbnRlbnRJZF07XG4gICAgICAgICAgICAvLyB2YWxpZGF0ZSBhbGwgdGhlIHNhbWUgbW9kZWwsIHJlZ2lvbiwgYW5kIGtleS4uLlxuICAgICAgICAgICAgaWYgKGFwcElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBhcHBJZCA9IGFkZGVkTG1JbnRlbnQubW9kZWxJbXBsLmFwcElkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcElkICE9PSBhZGRlZExtSW50ZW50Lm1vZGVsSW1wbC5hcHBJZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnRlbnRzIG11c3QgYWxsIGJlIGZyb20gdGhlIHNhbWUgTFVJUyBtb2RlbFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVnaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZWdpb24gPSBhZGRlZExtSW50ZW50Lm1vZGVsSW1wbC5yZWdpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocmVnaW9uICE9PSBhZGRlZExtSW50ZW50Lm1vZGVsSW1wbC5yZWdpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50ZW50cyBtdXN0IGFsbCBiZSBmcm9tIHRoZSBzYW1lIExVSVMgbW9kZWwgaW4gYSBzaW5nbGUgcmVnaW9uXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25LZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbktleSA9IGFkZGVkTG1JbnRlbnQubW9kZWxJbXBsLnN1YnNjcmlwdGlvbktleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25LZXkgIT09IGFkZGVkTG1JbnRlbnQubW9kZWxJbXBsLnN1YnNjcmlwdGlvbktleSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnRlbnRzIG11c3QgYWxsIHVzZSB0aGUgc2FtZSBzdWJzY3JpcHRpb24ga2V5XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBncmFtbWVyID0gXCJsdWlzL1wiICsgYXBwSWQgKyBcIi1QUk9EVUNUSU9OI1wiICsgaW50ZW50SWQ7XG4gICAgICAgICAgICByZWZHcmFtbWVycy5wdXNoKGdyYW1tZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBJbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICBpZDogYXBwSWQsXG4gICAgICAgICAgICAgICAga2V5OiAoc3Vic2NyaXB0aW9uS2V5ID09PSB1bmRlZmluZWQpID8gdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZFtFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXldKSA6IHN1YnNjcmlwdGlvbktleSxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogXCJMVUlTXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVmZXJlbmNlR3JhbW1hcnM6ICh1bmRlZmluZWQgPT09IHRoaXMucHJpdlVtYnJlbGxhSW50ZW50KSA/IHJlZkdyYW1tZXJzIDogW1wibHVpcy9cIiArIGFwcElkICsgXCItUFJPRFVDVElPTlwiXSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBJbnRlbnRSZWNvZ25pemVyO1xufShFeHBvcnRzXzIuUmVjb2duaXplcikpO1xuZXhwb3J0cy5JbnRlbnRSZWNvZ25pemVyID0gSW50ZW50UmVjb2duaXplcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW50ZW50UmVjb2duaXplci5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29udHJhY3RzXzEgPSByZXF1aXJlKFwiLi9Db250cmFjdHNcIik7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBrZXl3b3JkIHJlY29nbml0aW9uIG1vZGVsIGZvciByZWNvZ25pemluZyB3aGVuXG4gKiB0aGUgdXNlciBzYXlzIGEga2V5d29yZCB0byBpbml0aWF0ZSBmdXJ0aGVyIHNwZWVjaCByZWNvZ25pdGlvbi5cbiAqIEBjbGFzcyBLZXl3b3JkUmVjb2duaXRpb25Nb2RlbFxuICovXG52YXIgS2V5d29yZFJlY29nbml0aW9uTW9kZWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCBpbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZS5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBLZXl3b3JkUmVjb2duaXRpb25Nb2RlbCgpIHtcbiAgICAgICAgdGhpcy5wcml2RGlzcG9zZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGtleXdvcmQgcmVjb2duaXRpb24gbW9kZWwgdXNpbmcgdGhlIHNwZWNpZmllZCBmaWxlbmFtZS5cbiAgICAgKiBAbWVtYmVyIEtleXdvcmRSZWNvZ25pdGlvbk1vZGVsLmZyb21GaWxlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlTmFtZSAtIEEgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyBmaWxlIG5hbWUgZm9yIHRoZSBrZXl3b3JkIHJlY29nbml0aW9uIG1vZGVsLlxuICAgICAqICAgICAgICBOb3RlLCB0aGUgZmlsZSBjYW4gcG9pbnQgdG8gYSB6aXAgZmlsZSBpbiB3aGljaCBjYXNlIHRoZSBtb2RlbFxuICAgICAqICAgICAgICB3aWxsIGJlIGV4dHJhY3RlZCBmcm9tIHRoZSB6aXAuXG4gICAgICogQHJldHVybnMge0tleXdvcmRSZWNvZ25pdGlvbk1vZGVsfSBUaGUga2V5d29yZCByZWNvZ25pdGlvbiBtb2RlbCBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIEtleXdvcmRSZWNvZ25pdGlvbk1vZGVsLmZyb21GaWxlID0gZnVuY3Rpb24gKGZpbGVOYW1lKSB7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmRmlsZURvZXNOb3RFeGlzdChmaWxlTmFtZSwgXCJmaWxlTmFtZVwiKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEga2V5d29yZCByZWNvZ25pdGlvbiBtb2RlbCB1c2luZyB0aGUgc3BlY2lmaWVkIGZpbGVuYW1lLlxuICAgICAqIEBtZW1iZXIgS2V5d29yZFJlY29nbml0aW9uTW9kZWwuZnJvbVN0cmVhbVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSAtIEEgRmlsZSB0aGF0IHJlcHJlc2VudHMgZmlsZSBmb3IgdGhlIGtleXdvcmQgcmVjb2duaXRpb24gbW9kZWwuXG4gICAgICogICAgICAgIE5vdGUsIHRoZSBmaWxlIGNhbiBwb2ludCB0byBhIHppcCBmaWxlIGluIHdoaWNoIGNhc2UgdGhlIG1vZGVsIHdpbGwgYmUgZXh0cmFjdGVkIGZyb20gdGhlIHppcC5cbiAgICAgKiBAcmV0dXJucyB7S2V5d29yZFJlY29nbml0aW9uTW9kZWx9IFRoZSBrZXl3b3JkIHJlY29nbml0aW9uIG1vZGVsIGJlaW5nIGNyZWF0ZWQuXG4gICAgICovXG4gICAgS2V5d29yZFJlY29nbml0aW9uTW9kZWwuZnJvbVN0cmVhbSA9IGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbChmaWxlLCBcImZpbGVcIik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGlzcG9zZSBvZiBhc3NvY2lhdGVkIHJlc291cmNlcy5cbiAgICAgKiBAbWVtYmVyIEtleXdvcmRSZWNvZ25pdGlvbk1vZGVsLnByb3RvdHlwZS5jbG9zZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBLZXl3b3JkUmVjb2duaXRpb25Nb2RlbC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZEaXNwb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdkRpc3Bvc2VkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBLZXl3b3JkUmVjb2duaXRpb25Nb2RlbDtcbn0oKSk7XG5leHBvcnRzLktleXdvcmRSZWNvZ25pdGlvbk1vZGVsID0gS2V5d29yZFJlY29nbml0aW9uTW9kZWw7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUtleXdvcmRSZWNvZ25pdGlvbk1vZGVsLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIENvbnRyYWN0c18xID0gcmVxdWlyZShcIi4vQ29udHJhY3RzXCIpO1xuLyoqXG4gKiBMYW5ndWFnZSB1bmRlcnN0YW5kaW5nIG1vZGVsXG4gKiBAY2xhc3MgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWxcbiAqL1xudmFyIExhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWwoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGFuZ3VhZ2UgdW5kZXJzdGFuZGluZyBtb2RlbCB1c2luZyB0aGUgc3BlY2lmaWVkIGVuZHBvaW50LlxuICAgICAqIEBtZW1iZXIgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWwuZnJvbUVuZHBvaW50XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7VVJMfSB1cmkgLSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGVuZHBvaW50IG9mIHRoZSBsYW5ndWFnZSB1bmRlcnN0YW5kaW5nIG1vZGVsLlxuICAgICAqIEByZXR1cm5zIHtMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbH0gVGhlIGxhbmd1YWdlIHVuZGVyc3RhbmRpbmcgbW9kZWwgYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbC5mcm9tRW5kcG9pbnQgPSBmdW5jdGlvbiAodXJpKSB7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbCh1cmksIFwidXJpXCIpO1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UodXJpLmhvc3RuYW1lLCBcInVyaVwiKTtcbiAgICAgICAgdmFyIGxhbmdNb2RlbEltcCA9IG5ldyBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbEltcGwoKTtcbiAgICAgICAgLy8gTmVlZCB0byBleHRyYWN0IHRoZSBhcHAgSUQgZnJvbSB0aGUgVVJMLlxuICAgICAgICAvLyBVUkwgaXMgaW4gdGhlIGZvcm1hdDogaHR0cHM6Ly88cmVnaW9uPi5hcGkuY29nbml0aXZlLm1pY3Jvc29mdC5jb20vbHVpcy92Mi4wL2FwcHMvPEd1aWQ+P3N1YnNjcmlwdGlvbi1rZXk9PGtleT4mdGltZXpvbmVPZmZzZXQ9LTM2MFxuICAgICAgICAvLyBTdGFydCB0ZWFyaW5nIHRoZSBzdHJpbmcgYXBhcnQuXG4gICAgICAgIC8vIHJlZ2lvbiBjYW4gYmUgZXh0cmFjdGVkIGZyb20gdGhlIGhvc3QgbmFtZS5cbiAgICAgICAgdmFyIGZpcnN0RG90ID0gdXJpLmhvc3QuaW5kZXhPZihcIi5cIik7XG4gICAgICAgIGlmICgtMSA9PT0gZmlyc3REb3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgcmVnaW9uIGZyb20gZW5kcG9pbnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGFuZ01vZGVsSW1wLnJlZ2lvbiA9IHVyaS5ob3N0LnN1YnN0cigwLCBmaXJzdERvdCk7XG4gICAgICAgIC8vIE5vdyB0aGUgYXBwIElELlxuICAgICAgICB2YXIgbGFzdFNlZ21lbnQgPSB1cmkucGF0aG5hbWUubGFzdEluZGV4T2YoXCIvXCIpICsgMTtcbiAgICAgICAgaWYgKC0xID09PSBsYXN0U2VnbWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGRldGVybWluZSBhcHBJZCBmcm9tIGVuZHBvaW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIGxhbmdNb2RlbEltcC5hcHBJZCA9IHVyaS5wYXRobmFtZS5zdWJzdHIobGFzdFNlZ21lbnQpO1xuICAgICAgICAvLyBBbmQgZmluYWxseSB0aGUga2V5LlxuICAgICAgICBsYW5nTW9kZWxJbXAuc3Vic2NyaXB0aW9uS2V5ID0gdXJpLnNlYXJjaFBhcmFtcy5nZXQoXCJzdWJzY3JpcHRpb24ta2V5XCIpO1xuICAgICAgICBpZiAodW5kZWZpbmVkID09PSBsYW5nTW9kZWxJbXAuc3Vic2NyaXB0aW9uS2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZGV0ZXJtaW5lIHN1YnNjcmlwdGlvbiBrZXkgZnJvbSBlbmRwb2ludFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFuZ01vZGVsSW1wO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsYW5ndWFnZSB1bmRlcnN0YW5kaW5nIG1vZGVsIHVzaW5nIHRoZSBhcHBsaWNhdGlvbiBpZCBvZiBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIHNlcnZpY2UuXG4gICAgICogQG1lbWJlciBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbC5mcm9tQXBwSWRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFwcElkIC0gQSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBhcHBsaWNhdGlvbiBpZCBvZiBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIHNlcnZpY2UuXG4gICAgICogQHJldHVybnMge0xhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsfSBUaGUgbGFuZ3VhZ2UgdW5kZXJzdGFuZGluZyBtb2RlbCBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIExhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsLmZyb21BcHBJZCA9IGZ1bmN0aW9uIChhcHBJZCkge1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UoYXBwSWQsIFwiYXBwSWRcIik7XG4gICAgICAgIHZhciBsYW5nTW9kZWxJbXAgPSBuZXcgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWxJbXBsKCk7XG4gICAgICAgIGxhbmdNb2RlbEltcC5hcHBJZCA9IGFwcElkO1xuICAgICAgICByZXR1cm4gbGFuZ01vZGVsSW1wO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhbmd1YWdlIHVuZGVyc3RhbmRpbmcgbW9kZWwgdXNpbmcgaG9zdG5hbWUsIHN1YnNjcmlwdGlvbiBrZXkgYW5kIGFwcGxpY2F0aW9uXG4gICAgICogaWQgb2YgTGFuZ3VhZ2UgVW5kZXJzdGFuZGluZyBzZXJ2aWNlLlxuICAgICAqIEBtZW1iZXIgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWwuZnJvbVN1YnNjcmlwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3Vic2NyaXB0aW9uS2V5IC0gQSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBzdWJzY3JpcHRpb24ga2V5IG9mXG4gICAgICogICAgICAgIExhbmd1YWdlIFVuZGVyc3RhbmRpbmcgc2VydmljZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXBwSWQgLSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGFwcGxpY2F0aW9uIGlkIG9mIExhbmd1YWdlXG4gICAgICogICAgICAgIFVuZGVyc3RhbmRpbmcgc2VydmljZS5cbiAgICAgKiBAcGFyYW0ge0xhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsfSByZWdpb24gLSBBIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIHJlZ2lvblxuICAgICAqICAgICAgICBvZiB0aGUgTGFuZ3VhZ2UgVW5kZXJzdGFuZGluZyBzZXJ2aWNlIChzZWUgdGhlIDxhIGhyZWY9XCJodHRwczovL2FrYS5tcy9jc3NwZWVjaC9yZWdpb25cIj5yZWdpb24gcGFnZTwvYT4pLlxuICAgICAqIEByZXR1cm5zIHtMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbH0gVGhlIGxhbmd1YWdlIHVuZGVyc3RhbmRpbmcgbW9kZWwgYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbC5mcm9tU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbktleSwgYXBwSWQsIHJlZ2lvbikge1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2Uoc3Vic2NyaXB0aW9uS2V5LCBcInN1YnNjcmlwdGlvbktleVwiKTtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKGFwcElkLCBcImFwcElkXCIpO1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UocmVnaW9uLCBcInJlZ2lvblwiKTtcbiAgICAgICAgdmFyIGxhbmdNb2RlbEltcCA9IG5ldyBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbEltcGwoKTtcbiAgICAgICAgbGFuZ01vZGVsSW1wLmFwcElkID0gYXBwSWQ7XG4gICAgICAgIGxhbmdNb2RlbEltcC5yZWdpb24gPSByZWdpb247XG4gICAgICAgIGxhbmdNb2RlbEltcC5zdWJzY3JpcHRpb25LZXkgPSBzdWJzY3JpcHRpb25LZXk7XG4gICAgICAgIHJldHVybiBsYW5nTW9kZWxJbXA7XG4gICAgfTtcbiAgICByZXR1cm4gTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWw7XG59KCkpO1xuZXhwb3J0cy5MYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbCA9IExhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICogQGNsYXNzIExhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsSW1wbFxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbEltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKExhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsSW1wbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBMYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbEltcGwoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIExhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsSW1wbDtcbn0oTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWwpKTtcbmV4cG9ydHMuTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWxJbXBsID0gTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nTW9kZWxJbXBsO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1MYW5ndWFnZVVuZGVyc3RhbmRpbmdNb2RlbC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uLy4uL3NyYy9jb21tb24uc3BlZWNoL0V4cG9ydHNcIik7XG52YXIgRXhwb3J0c18yID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8qKlxuICogQ29udGFpbnMgZGV0YWlsZWQgaW5mb3JtYXRpb24gZm9yIE5vTWF0Y2ggcmVjb2duaXRpb24gcmVzdWx0cy5cbiAqIEBjbGFzcyBOb01hdGNoRGV0YWlsc1xuICovXG52YXIgTm9NYXRjaERldGFpbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge05vTWF0Y2hSZWFzb259IHJlYXNvbiAtIFRoZSBuby1tYXRjaCByZWFzb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gTm9NYXRjaERldGFpbHMocmVhc29uKSB7XG4gICAgICAgIHRoaXMucHJpdlJlYXNvbiA9IHJlYXNvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBOb01hdGNoRGV0YWlscyBvYmplY3QgZm9yIHRoZSBOb01hdGNoIFNwZWVjaFJlY29nbml0aW9uUmVzdWx0cy5cbiAgICAgKiBAbWVtYmVyIE5vTWF0Y2hEZXRhaWxzLmZyb21SZXN1bHRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtTcGVlY2hSZWNvZ25pdGlvblJlc3VsdCB8IEludGVudFJlY29nbml0aW9uUmVzdWx0IHwgVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdH1cbiAgICAgKiAgICAgICAgcmVzdWx0IC0gVGhlIHJlY29nbml0aW9uIHJlc3VsdCB0aGF0IHdhcyBub3QgcmVjb2duaXplZC5cbiAgICAgKiBAcmV0dXJucyB7Tm9NYXRjaERldGFpbHN9IFRoZSBubyBtYXRjaCBkZXRhaWxzIG9iamVjdCBiZWluZyBjcmVhdGVkLlxuICAgICAqL1xuICAgIE5vTWF0Y2hEZXRhaWxzLmZyb21SZXN1bHQgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIHZhciBzaW1wbGVTcGVlY2ggPSBFeHBvcnRzXzEuU2ltcGxlU3BlZWNoUGhyYXNlLmZyb21KU09OKHJlc3VsdC5qc29uKTtcbiAgICAgICAgdmFyIHJlYXNvbiA9IEV4cG9ydHNfMi5Ob01hdGNoUmVhc29uLk5vdFJlY29nbml6ZWQ7XG4gICAgICAgIHN3aXRjaCAoc2ltcGxlU3BlZWNoLlJlY29nbml0aW9uU3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIEV4cG9ydHNfMS5SZWNvZ25pdGlvblN0YXR1cy5CYWJibGVUaW1lb3V0OlxuICAgICAgICAgICAgICAgIHJlYXNvbiA9IEV4cG9ydHNfMi5Ob01hdGNoUmVhc29uLkluaXRpYWxCYWJibGVUaW1lb3V0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFeHBvcnRzXzEuUmVjb2duaXRpb25TdGF0dXMuSW5pdGlhbFNpbGVuY2VUaW1lb3V0OlxuICAgICAgICAgICAgICAgIHJlYXNvbiA9IEV4cG9ydHNfMi5Ob01hdGNoUmVhc29uLkluaXRpYWxTaWxlbmNlVGltZW91dDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVhc29uID0gRXhwb3J0c18yLk5vTWF0Y2hSZWFzb24uTm90UmVjb2duaXplZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE5vTWF0Y2hEZXRhaWxzKHJlYXNvbik7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9NYXRjaERldGFpbHMucHJvdG90eXBlLCBcInJlYXNvblwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmVhc29uIHRoZSByZWNvZ25pdGlvbiB3YXMgY2FuY2VsZWQuXG4gICAgICAgICAqIEBtZW1iZXIgTm9NYXRjaERldGFpbHMucHJvdG90eXBlLnJlYXNvblxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7Tm9NYXRjaFJlYXNvbn0gU3BlY2lmaWVzIHRoZSByZWFzb24gY2FuY2VsZWQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZSZWFzb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBOb01hdGNoRGV0YWlscztcbn0oKSk7XG5leHBvcnRzLk5vTWF0Y2hEZXRhaWxzID0gTm9NYXRjaERldGFpbHM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vTWF0Y2hEZXRhaWxzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogRGVmaW5lcyB0aGUgcG9zc2libGUgcmVhc29ucyBhIHJlY29nbml0aW9uIHJlc3VsdCBtaWdodCBub3QgYmUgcmVjb2duaXplZC5cbiAqIEBjbGFzcyBOb01hdGNoUmVhc29uXG4gKi9cbnZhciBOb01hdGNoUmVhc29uO1xuKGZ1bmN0aW9uIChOb01hdGNoUmVhc29uKSB7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgc3BlZWNoIHdhcyBkZXRlY3RlZCwgYnV0IG5vdCByZWNvZ25pemVkLlxuICAgICAqIEBtZW1iZXIgTm9NYXRjaFJlYXNvbi5Ob3RSZWNvZ25pemVkXG4gICAgICovXG4gICAgTm9NYXRjaFJlYXNvbltOb01hdGNoUmVhc29uW1wiTm90UmVjb2duaXplZFwiXSA9IDBdID0gXCJOb3RSZWNvZ25pemVkXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHN0YXJ0IG9mIHRoZSBhdWRpbyBzdHJlYW0gY29udGFpbmVkIG9ubHkgc2lsZW5jZSxcbiAgICAgKiBhbmQgdGhlIHNlcnZpY2UgdGltZWQgb3V0IHdhaXRpbmcgZm9yIHNwZWVjaC5cbiAgICAgKiBAbWVtYmVyIE5vTWF0Y2hSZWFzb24uSW5pdGlhbFNpbGVuY2VUaW1lb3V0XG4gICAgICovXG4gICAgTm9NYXRjaFJlYXNvbltOb01hdGNoUmVhc29uW1wiSW5pdGlhbFNpbGVuY2VUaW1lb3V0XCJdID0gMV0gPSBcIkluaXRpYWxTaWxlbmNlVGltZW91dFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IHRoZSBzdGFydCBvZiB0aGUgYXVkaW8gc3RyZWFtIGNvbnRhaW5lZCBvbmx5IG5vaXNlLFxuICAgICAqIGFuZCB0aGUgc2VydmljZSB0aW1lZCBvdXQgd2FpdGluZyBmb3Igc3BlZWNoLlxuICAgICAqIEBtZW1iZXIgTm9NYXRjaFJlYXNvbi5Jbml0aWFsQmFiYmxlVGltZW91dFxuICAgICAqL1xuICAgIE5vTWF0Y2hSZWFzb25bTm9NYXRjaFJlYXNvbltcIkluaXRpYWxCYWJibGVUaW1lb3V0XCJdID0gMl0gPSBcIkluaXRpYWxCYWJibGVUaW1lb3V0XCI7XG59KShOb01hdGNoUmVhc29uID0gZXhwb3J0cy5Ob01hdGNoUmVhc29uIHx8IChleHBvcnRzLk5vTWF0Y2hSZWFzb24gPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob01hdGNoUmVhc29uLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogRGVmaW5lIFNwZWVjaCBSZWNvZ25pemVyIG91dHB1dCBmb3JtYXRzLlxuICogQGNsYXNzIE91dHB1dEZvcm1hdFxuICovXG52YXIgT3V0cHV0Rm9ybWF0O1xuKGZ1bmN0aW9uIChPdXRwdXRGb3JtYXQpIHtcbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIE91dHB1dEZvcm1hdC5TaW1wbGVcbiAgICAgKi9cbiAgICBPdXRwdXRGb3JtYXRbT3V0cHV0Rm9ybWF0W1wiU2ltcGxlXCJdID0gMF0gPSBcIlNpbXBsZVwiO1xuICAgIC8qKlxuICAgICAqIEBtZW1iZXIgT3V0cHV0Rm9ybWF0LkRldGFpbGVkXG4gICAgICovXG4gICAgT3V0cHV0Rm9ybWF0W091dHB1dEZvcm1hdFtcIkRldGFpbGVkXCJdID0gMV0gPSBcIkRldGFpbGVkXCI7XG59KShPdXRwdXRGb3JtYXQgPSBleHBvcnRzLk91dHB1dEZvcm1hdCB8fCAoZXhwb3J0cy5PdXRwdXRGb3JtYXQgPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1PdXRwdXRGb3JtYXQuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBBbGxvd3MgYWRkaXRpb25zIG9mIG5ldyBwaHJhc2VzIHRvIGltcHJvdmUgc3BlZWNoIHJlY29nbml0aW9uLlxuICpcbiAqIFBocmFzZXMgYWRkZWQgdG8gdGhlIHJlY29nbml6ZXIgYXJlIGVmZmVjdGl2ZSBhdCB0aGUgc3RhcnQgb2YgdGhlIG5leHQgcmVjb2duaXRpb24sIG9yIHRoZSBuZXh0IHRpbWUgdGhlIFNwZWVjaFNESyBtdXN0IHJlY29ubmVjdFxuICogdG8gdGhlIHNwZWVjaCBzZXJ2aWNlLlxuICovXG52YXIgUGhyYXNlTGlzdEdyYW1tYXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGhyYXNlTGlzdEdyYW1tYXIocmVjb2dCYXNlKSB7XG4gICAgICAgIHRoaXMucHJpdkdyYW1tZXJCdWlsZGVyID0gcmVjb2dCYXNlLmR5bmFtaWNHcmFtbWFyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgUGhyYXNlTGlzdEdyYW1tYXIgZnJvbSBhIGdpdmVuIHNwZWVjaCByZWNvZ25pemVyLiBXaWxsIGFjY2VwdCBhbnkgcmVjb2duaXplciB0aGF0IGRlcml2ZXMgZnJvbSBAY2xhc3MgUmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0gcmVjb2duaXplciBUaGUgcmVjb2duaXplciB0byBhZGQgcGhyYXNlIGxpc3RzIHRvLlxuICAgICAqL1xuICAgIFBocmFzZUxpc3RHcmFtbWFyLmZyb21SZWNvZ25pemVyID0gZnVuY3Rpb24gKHJlY29nbml6ZXIpIHtcbiAgICAgICAgdmFyIHJlY29CYXNlID0gcmVjb2duaXplci5pbnRlcm5hbERhdGE7XG4gICAgICAgIHJldHVybiBuZXcgUGhyYXNlTGlzdEdyYW1tYXIocmVjb0Jhc2UpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHNpbmdsZSBwaHJhc2UgdG8gdGhlIGN1cnJlbnQgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0gcGhyYXNlIFBocmFzZSB0byBhZGQuXG4gICAgICovXG4gICAgUGhyYXNlTGlzdEdyYW1tYXIucHJvdG90eXBlLmFkZFBocmFzZSA9IGZ1bmN0aW9uIChwaHJhc2UpIHtcbiAgICAgICAgdGhpcy5wcml2R3JhbW1lckJ1aWxkZXIuYWRkUGhyYXNlKHBocmFzZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIG11bHRpcGxlIHBocmFzZXMgdG8gdGhlIGN1cnJlbnQgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0gcGhyYXNlcyBBcnJheSBvZiBwaHJhc2VzIHRvIGFkZC5cbiAgICAgKi9cbiAgICBQaHJhc2VMaXN0R3JhbW1hci5wcm90b3R5cGUuYWRkUGhyYXNlcyA9IGZ1bmN0aW9uIChwaHJhc2VzKSB7XG4gICAgICAgIHRoaXMucHJpdkdyYW1tZXJCdWlsZGVyLmFkZFBocmFzZShwaHJhc2VzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgcGhyYXNlcyBhZGRlZCB0byB0aGUgY3VycmVudCByZWNvZ25pemVyLlxuICAgICAqL1xuICAgIFBocmFzZUxpc3RHcmFtbWFyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcml2R3JhbW1lckJ1aWxkZXIuY2xlYXJQaHJhc2VzKCk7XG4gICAgfTtcbiAgICByZXR1cm4gUGhyYXNlTGlzdEdyYW1tYXI7XG59KCkpO1xuZXhwb3J0cy5QaHJhc2VMaXN0R3JhbW1hciA9IFBocmFzZUxpc3RHcmFtbWFyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1QaHJhc2VMaXN0R3JhbW1hci5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8qKlxuICogUmVwcmVzZW50cyBjb2xsZWN0aW9uIG9mIHByb3BlcnRpZXMgYW5kIHRoZWlyIHZhbHVlcy5cbiAqIEBjbGFzcyBQcm9wZXJ0eUNvbGxlY3Rpb25cbiAqL1xudmFyIFByb3BlcnR5Q29sbGVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQcm9wZXJ0eUNvbGxlY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucHJpdktleXMgPSBbXTtcbiAgICAgICAgdGhpcy5wcml2VmFsdWVzID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIGluIHR5cGUgU3RyaW5nLiBUaGUgcGFyYW1ldGVyIG11c3QgaGF2ZSB0aGUgc2FtZSB0eXBlIGFzIFN0cmluZy5cbiAgICAgKiBDdXJyZW50bHkgb25seSBTdHJpbmcsIGludCBhbmQgYm9vbCBhcmUgYWxsb3dlZC5cbiAgICAgKiBJZiB0aGUgbmFtZSBpcyBub3QgYXZhaWxhYmxlLCB0aGUgc3BlY2lmaWVkIGRlZmF1bHRWYWx1ZSBpcyByZXR1cm5lZC5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5Q29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0UHJvcGVydHlcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBwYXJhbWV0ZXIgbmFtZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGVmIC0gVGhlIGRlZmF1bHQgdmFsdWUgd2hpY2ggaXMgcmV0dXJuZWQgaWYgdGhlIHBhcmFtZXRlclxuICAgICAqICAgICAgICBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgUHJvcGVydHlDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChrZXksIGRlZikge1xuICAgICAgICB2YXIga2V5VG9Vc2U7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBrZXlUb1VzZSA9IGtleTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGtleVRvVXNlID0gRXhwb3J0c18xLlByb3BlcnR5SWRba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHRoaXMucHJpdktleXMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZLZXlzW25dID09PSBrZXlUb1VzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZWYWx1ZXNbbl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIFN0cmluZyB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyIHNwZWNpZmllZCBieSBuYW1lLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlDb2xsZWN0aW9uLnByb3RvdHlwZS5zZXRQcm9wZXJ0eVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIHBhcmFtZXRlciBuYW1lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIFByb3BlcnR5Q29sbGVjdGlvbi5wcm90b3R5cGUuc2V0UHJvcGVydHkgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIga2V5VG9Vc2U7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBrZXlUb1VzZSA9IGtleTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGtleVRvVXNlID0gRXhwb3J0c18xLlByb3BlcnR5SWRba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHRoaXMucHJpdktleXMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZLZXlzW25dID09PSBrZXlUb1VzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpdlZhbHVlc1tuXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZLZXlzLnB1c2goa2V5VG9Vc2UpO1xuICAgICAgICB0aGlzLnByaXZWYWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbG9uZXMgdGhlIGNvbGxlY3Rpb24uXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUNvbGxlY3Rpb24ucHJvdG90eXBlLmNsb25lXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtQcm9wZXJ0eUNvbGxlY3Rpb259IEEgY29weSBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKi9cbiAgICBQcm9wZXJ0eUNvbGxlY3Rpb24ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2xvbmVkTWFwID0gbmV3IFByb3BlcnR5Q29sbGVjdGlvbigpO1xuICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHRoaXMucHJpdktleXMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICAgIGNsb25lZE1hcC5wcml2S2V5cy5wdXNoKHRoaXMucHJpdktleXNbbl0pO1xuICAgICAgICAgICAgY2xvbmVkTWFwLnByaXZWYWx1ZXMucHVzaCh0aGlzLnByaXZWYWx1ZXNbbl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZWRNYXA7XG4gICAgfTtcbiAgICByZXR1cm4gUHJvcGVydHlDb2xsZWN0aW9uO1xufSgpKTtcbmV4cG9ydHMuUHJvcGVydHlDb2xsZWN0aW9uID0gUHJvcGVydHlDb2xsZWN0aW9uO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qcm9wZXJ0eUNvbGxlY3Rpb24uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBEZWZpbmVzIHNwZWVjaCBwcm9wZXJ0eSBpZHMuXG4gKiBAY2xhc3MgUHJvcGVydHlJZFxuICovXG52YXIgUHJvcGVydHlJZDtcbihmdW5jdGlvbiAoUHJvcGVydHlJZCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2Ugc3Vic2NyaXB0aW9uIEtleS4gSWYgeW91IGFyZSB1c2luZyBhbiBpbnRlbnQgcmVjb2duaXplciwgeW91IG5lZWQgdG8gc3BlY2lmeVxuICAgICAqIHRvIHNwZWNpZnkgdGhlIExVSVMgZW5kcG9pbnQga2V5IGZvciB5b3VyIHBhcnRpY3VsYXIgTFVJUyBhcHAuIFVuZGVyIG5vcm1hbCBjaXJjdW1zdGFuY2VzLCB5b3Ugc2hvdWxkbid0XG4gICAgICogaGF2ZSB0byB1c2UgdGhpcyBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkLCB1c2UgW1tTcGVlY2hDb25maWcuZnJvbVN1YnNjcmlwdGlvbl1dLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXlcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXlcIl0gPSAwXSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fS2V5XCI7XG4gICAgLyoqXG4gICAgICogVGhlIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZSBlbmRwb2ludCAodXJsKS4gVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsIHlvdSBzaG91bGRuJ3RcbiAgICAgKiBoYXZlIHRvIHVzZSB0aGlzIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQsIHVzZSBbW1NwZWVjaENvbmZpZy5mcm9tRW5kcG9pbnRdXS5cbiAgICAgKiBOT1RFOiBUaGlzIGVuZHBvaW50IGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgZW5kcG9pbnQgdXNlZCB0byBvYnRhaW4gYW4gYWNjZXNzIHRva2VuLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50XCJdID0gMV0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50XCI7XG4gICAgLyoqXG4gICAgICogVGhlIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZSByZWdpb24uIFVuZGVyIG5vcm1hbCBjaXJjdW1zdGFuY2VzLCB5b3Ugc2hvdWxkbid0IGhhdmUgdG9cbiAgICAgKiB1c2UgdGhpcyBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkLCB1c2UgW1tTcGVlY2hDb25maWcuZnJvbVN1YnNjcmlwdGlvbl1dLCBbW1NwZWVjaENvbmZpZy5mcm9tRW5kcG9pbnRdXSwgW1tTcGVlY2hDb25maWcuZnJvbUF1dGhvcml6YXRpb25Ub2tlbl1dLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWdpb25cbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWdpb25cIl0gPSAyXSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVnaW9uXCI7XG4gICAgLyoqXG4gICAgICogVGhlIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZSBhdXRob3JpemF0aW9uIHRva2VuIChha2EgYWNjZXNzIHRva2VuKS4gVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsXG4gICAgICogeW91IHNob3VsZG4ndCBoYXZlIHRvIHVzZSB0aGlzIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQsIHVzZSBbW1NwZWVjaENvbmZpZy5mcm9tQXV0aG9yaXphdGlvblRva2VuXV0sXG4gICAgICogW1tTcGVlY2hSZWNvZ25pemVyLmF1dGhvcml6YXRpb25Ub2tlbl1dLCBbW0ludGVudFJlY29nbml6ZXIuYXV0aG9yaXphdGlvblRva2VuXV0sIFtbVHJhbnNsYXRpb25SZWNvZ25pemVyLmF1dGhvcml6YXRpb25Ub2tlbl1dLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlblxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuXCJdID0gM10gPSBcIlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuXCI7XG4gICAgLyoqXG4gICAgICogVGhlIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZSBhdXRob3JpemF0aW9uIHR5cGUuIEN1cnJlbnRseSB1bnVzZWQuXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1R5cGVcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9UeXBlXCJdID0gNF0gPSBcIlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1R5cGVcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgQ29nbml0aXZlIFNlcnZpY2VzIFNwZWVjaCBTZXJ2aWNlIGVuZHBvaW50IGlkLiBVbmRlciBub3JtYWwgY2lyY3Vtc3RhbmNlcywgeW91IHNob3VsZG4ndFxuICAgICAqIGhhdmUgdG8gdXNlIHRoaXMgcHJvcGVydHkgZGlyZWN0bHkuXG4gICAgICogSW5zdGVhZCwgdXNlIFtbU3BlZWNoQ29uZmlnLmVuZHBvaW50SWRdXS5cbiAgICAgKiBOT1RFOiBUaGUgZW5kcG9pbnQgaWQgaXMgYXZhaWxhYmxlIGluIHRoZSBTcGVlY2ggUG9ydGFsLCBsaXN0ZWQgdW5kZXIgRW5kcG9pbnQgRGV0YWlscy5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnRJZFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50SWRcIl0gPSA1XSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnRJZFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBsaXN0IG9mIGNvbW1hIHNlcGFyYXRlZCBsYW5ndWFnZXMgKEJDUC00NyBmb3JtYXQpIHVzZWQgYXMgdGFyZ2V0IHRyYW5zbGF0aW9uIGxhbmd1YWdlcy4gVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsXG4gICAgICogeW91IHNob3VsZG4ndCBoYXZlIHRvIHVzZSB0aGlzIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQgdXNlIFtbU3BlZWNoVHJhbnNsYXRpb25Db25maWcuYWRkVGFyZ2V0TGFuZ3VhZ2VdXSxcbiAgICAgKiBbW1NwZWVjaFRyYW5zbGF0aW9uQ29uZmlnLnRhcmdldExhbmd1YWdlc11dLCBbW1RyYW5zbGF0aW9uUmVjb2duaXplci50YXJnZXRMYW5ndWFnZXNdXS5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Ub0xhbmd1YWdlc1xuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVG9MYW5ndWFnZXNcIl0gPSA2XSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Ub0xhbmd1YWdlc1wiO1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBDb2duaXRpdmUgU2VydmljZSBUZXh0IHRvIFNwZWVjaCBTZXJ2aWNlIFZvaWNlLiBVbmRlciBub3JtYWwgY2lyY3Vtc3RhbmNlcywgeW91IHNob3VsZG4ndCBoYXZlIHRvIHVzZSB0aGlzXG4gICAgICogcHJvcGVydHkgZGlyZWN0bHkuXG4gICAgICogSW5zdGVhZCwgdXNlIFtbU3BlZWNoVHJhbnNsYXRpb25Db25maWcudm9pY2VOYW1lXV0uXG4gICAgICogTk9URTogVmFsaWQgdm9pY2UgbmFtZXMgY2FuIGJlIGZvdW5kIDxhIGhyZWY9XCJodHRwczovL2FrYS5tcy9jc3NwZWVjaC92b2ljZW5hbWVzXCI+aGVyZTwvYT4uXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVm9pY2VcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblZvaWNlXCJdID0gN10gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVm9pY2VcIjtcbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGlvbiBmZWF0dXJlcy5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25GZWF0dXJlc1xuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uRmVhdHVyZXNcIl0gPSA4XSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25GZWF0dXJlc1wiO1xuICAgIC8qKlxuICAgICAqIFRoZSBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIFNlcnZpY2UgUmVnaW9uLiBVbmRlciBub3JtYWwgY2lyY3Vtc3RhbmNlcywgeW91IHNob3VsZG4ndCBoYXZlIHRvIHVzZSB0aGlzIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQsIHVzZSBbW0xhbmd1YWdlVW5kZXJzdGFuZGluZ01vZGVsXV0uXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0ludGVudFJlZ2lvblxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0ludGVudFJlZ2lvblwiXSA9IDldID0gXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9JbnRlbnRSZWdpb25cIjtcbiAgICAvKipcbiAgICAgKiBUaGUgaG9zdCBuYW1lIG9mIHRoZSBwcm94eSBzZXJ2ZXIgdXNlZCB0byBjb25uZWN0IHRvIHRoZSBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UuIE9ubHkgcmVsZXZhbnQgaW4gTm9kZS5qcyBlbnZpcm9ubWVudHMuXG4gICAgICogWW91IHNob3VsZG4ndCBoYXZlIHRvIHVzZSB0aGlzIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQgdXNlIDxzZWUgY3JlZj1cIlNwZWVjaENvbmZpZy5TZXRQcm94eShzdHJpbmcsaW50LHN0cmluZyxzdHJpbmcpXCIvPi5cbiAgICAgKiBBZGRlZCBpbiB2ZXJzaW9uIDEuNC4wLlxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5SG9zdE5hbWVcIl0gPSAxMF0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5SG9zdE5hbWVcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgcG9ydCBvZiB0aGUgcHJveHkgc2VydmVyIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgQ29nbml0aXZlIFNlcnZpY2VzIFNwZWVjaCBTZXJ2aWNlLiBPbmx5IHJlbGV2YW50IGluIE5vZGUuanMgZW52aXJvbm1lbnRzLlxuICAgICAqIFlvdSBzaG91bGRuJ3QgaGF2ZSB0byB1c2UgdGhpcyBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkIHVzZSA8c2VlIGNyZWY9XCJTcGVlY2hDb25maWcuU2V0UHJveHkoc3RyaW5nLGludCxzdHJpbmcsc3RyaW5nKVwiLz4uXG4gICAgICogQWRkZWQgaW4gdmVyc2lvbiAxLjQuMC5cbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBvcnRcIl0gPSAxMV0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5UG9ydFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSB1c2VyIG5hbWUgb2YgdGhlIHByb3h5IHNlcnZlciB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZS4gT25seSByZWxldmFudCBpbiBOb2RlLmpzIGVudmlyb25tZW50cy5cbiAgICAgKiBZb3Ugc2hvdWxkbid0IGhhdmUgdG8gdXNlIHRoaXMgcHJvcGVydHkgZGlyZWN0bHkuXG4gICAgICogSW5zdGVhZCB1c2UgPHNlZSBjcmVmPVwiU3BlZWNoQ29uZmlnLlNldFByb3h5KHN0cmluZyxpbnQsc3RyaW5nLHN0cmluZylcIi8+LlxuICAgICAqIEFkZGVkIGluIHZlcnNpb24gMS40LjAuXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlVc2VyTmFtZVwiXSA9IDEyXSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlVc2VyTmFtZVwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBwYXNzd29yZCBvZiB0aGUgcHJveHkgc2VydmVyIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgQ29nbml0aXZlIFNlcnZpY2VzIFNwZWVjaCBTZXJ2aWNlLiBPbmx5IHJlbGV2YW50IGluIE5vZGUuanMgZW52aXJvbm1lbnRzLlxuICAgICAqIFlvdSBzaG91bGRuJ3QgaGF2ZSB0byB1c2UgdGhpcyBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKiBJbnN0ZWFkIHVzZSA8c2VlIGNyZWY9XCJTcGVlY2hDb25maWcuU2V0UHJveHkoc3RyaW5nLGludCxzdHJpbmcsc3RyaW5nKVwiLz4uXG4gICAgICogQWRkZWQgaW4gdmVyc2lvbiAxLjQuMC5cbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBhc3N3b3JkXCJdID0gMTNdID0gXCJTcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBhc3N3b3JkXCI7XG4gICAgLyoqXG4gICAgICogVGhlIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZSByZWNvZ25pdGlvbiBNb2RlLiBDYW4gYmUgXCJJTlRFUkFDVElWRVwiLCBcIkNPTlZFUlNBVElPTlwiLCBcIkRJQ1RBVElPTlwiLlxuICAgICAqIFRoaXMgcHJvcGVydHkgaXMgaW50ZW5kZWQgdG8gYmUgcmVhZC1vbmx5LiBUaGUgU0RLIGlzIHVzaW5nIGl0IGludGVybmFsbHkuXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29Nb2RlXG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb01vZGVcIl0gPSAxNF0gPSBcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29Nb2RlXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHNwb2tlbiBsYW5ndWFnZSB0byBiZSByZWNvZ25pemVkIChpbiBCQ1AtNDcgZm9ybWF0KS4gVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsIHlvdSBzaG91bGRuJ3QgaGF2ZSB0byB1c2UgdGhpcyBwcm9wZXJ0eVxuICAgICAqIGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQsIHVzZSBbW1NwZWVjaENvbmZpZy5zcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlXV0uXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZVxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZVwiXSA9IDE1XSA9IFwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHNlc3Npb24gaWQuIFRoaXMgaWQgaXMgYSB1bml2ZXJzYWxseSB1bmlxdWUgaWRlbnRpZmllciAoYWthIFVVSUQpIHJlcHJlc2VudGluZyBhIHNwZWNpZmljIGJpbmRpbmcgb2YgYW4gYXVkaW8gaW5wdXQgc3RyZWFtXG4gICAgICogYW5kIHRoZSB1bmRlcmx5aW5nIHNwZWVjaCByZWNvZ25pdGlvbiBpbnN0YW5jZSB0byB3aGljaCBpdCBpcyBib3VuZC4gVW5kZXIgbm9ybWFsIGNpcmN1bXN0YW5jZXMsIHlvdSBzaG91bGRuJ3QgaGF2ZSB0byB1c2UgdGhpc1xuICAgICAqIHByb3BlcnR5IGRpcmVjdGx5LlxuICAgICAqIEluc3RlYWQgdXNlIFtbU2Vzc2lvbkV2ZW50QXJncy5zZXNzaW9uSWRdXS5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoX1Nlc3Npb25JZFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaF9TZXNzaW9uSWRcIl0gPSAxNl0gPSBcIlNwZWVjaF9TZXNzaW9uSWRcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVxdWVzdGVkIENvZ25pdGl2ZSBTZXJ2aWNlcyBTcGVlY2ggU2VydmljZSByZXNwb25zZSBvdXRwdXQgZm9ybWF0IChzaW1wbGUgb3IgZGV0YWlsZWQpLiBVbmRlciBub3JtYWwgY2lyY3Vtc3RhbmNlcywgeW91IHNob3VsZG4ndCBoYXZlXG4gICAgICogdG8gdXNlIHRoaXMgcHJvcGVydHkgZGlyZWN0bHkuXG4gICAgICogSW5zdGVhZCB1c2UgW1tTcGVlY2hDb25maWcub3V0cHV0Rm9ybWF0XV0uXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VSZXNwb25zZV9SZXF1ZXN0RGV0YWlsZWRSZXN1bHRUcnVlRmFsc2VcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUmVxdWVzdERldGFpbGVkUmVzdWx0VHJ1ZUZhbHNlXCJdID0gMTddID0gXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUmVxdWVzdERldGFpbGVkUmVzdWx0VHJ1ZUZhbHNlXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHJlcXVlc3RlZCBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UgcmVzcG9uc2Ugb3V0cHV0IHByb2Zhbml0eSBsZXZlbC4gQ3VycmVudGx5IHVudXNlZC5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX1JlcXVlc3RQcm9mYW5pdHlGaWx0ZXJUcnVlRmFsc2VcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfUmVxdWVzdFByb2Zhbml0eUZpbHRlclRydWVGYWxzZVwiXSA9IDE4XSA9IFwiU3BlZWNoU2VydmljZVJlc3BvbnNlX1JlcXVlc3RQcm9mYW5pdHlGaWx0ZXJUcnVlRmFsc2VcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgQ29nbml0aXZlIFNlcnZpY2VzIFNwZWVjaCBTZXJ2aWNlIHJlc3BvbnNlIG91dHB1dCAoaW4gSlNPTiBmb3JtYXQpLiBUaGlzIHByb3BlcnR5IGlzIGF2YWlsYWJsZSBvbiByZWNvZ25pdGlvbiByZXN1bHQgb2JqZWN0cyBvbmx5LlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlUmVzcG9uc2VfSnNvblJlc3VsdFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIlNwZWVjaFNlcnZpY2VSZXNwb25zZV9Kc29uUmVzdWx0XCJdID0gMTldID0gXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfSnNvblJlc3VsdFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2UgZXJyb3IgZGV0YWlscyAoaW4gSlNPTiBmb3JtYXQpLiBVbmRlciBub3JtYWwgY2lyY3Vtc3RhbmNlcywgeW91IHNob3VsZG4ndCBoYXZlIHRvXG4gICAgICogdXNlIHRoaXMgcHJvcGVydHkgZGlyZWN0bHkuIEluc3RlYWQgdXNlIFtbQ2FuY2VsbGF0aW9uRGV0YWlscy5lcnJvckRldGFpbHNdXS5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX0pzb25FcnJvckRldGFpbHNcbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJTcGVlY2hTZXJ2aWNlUmVzcG9uc2VfSnNvbkVycm9yRGV0YWlsc1wiXSA9IDIwXSA9IFwiU3BlZWNoU2VydmljZVJlc3BvbnNlX0pzb25FcnJvckRldGFpbHNcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgY2FuY2VsbGF0aW9uIHJlYXNvbi4gQ3VycmVudGx5IHVudXNlZC5cbiAgICAgKiBAbWVtYmVyIFByb3BlcnR5SWQuQ2FuY2VsbGF0aW9uRGV0YWlsc19SZWFzb25cbiAgICAgKi9cbiAgICBQcm9wZXJ0eUlkW1Byb3BlcnR5SWRbXCJDYW5jZWxsYXRpb25EZXRhaWxzX1JlYXNvblwiXSA9IDIxXSA9IFwiQ2FuY2VsbGF0aW9uRGV0YWlsc19SZWFzb25cIjtcbiAgICAvKipcbiAgICAgKiBUaGUgY2FuY2VsbGF0aW9uIHRleHQuIEN1cnJlbnRseSB1bnVzZWQuXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLkNhbmNlbGxhdGlvbkRldGFpbHNfUmVhc29uVGV4dFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIkNhbmNlbGxhdGlvbkRldGFpbHNfUmVhc29uVGV4dFwiXSA9IDIyXSA9IFwiQ2FuY2VsbGF0aW9uRGV0YWlsc19SZWFzb25UZXh0XCI7XG4gICAgLyoqXG4gICAgICogVGhlIENhbmNlbGxhdGlvbiBkZXRhaWxlZCB0ZXh0LiBDdXJyZW50bHkgdW51c2VkLlxuICAgICAqIEBtZW1iZXIgUHJvcGVydHlJZC5DYW5jZWxsYXRpb25EZXRhaWxzX1JlYXNvbkRldGFpbGVkVGV4dFxuICAgICAqL1xuICAgIFByb3BlcnR5SWRbUHJvcGVydHlJZFtcIkNhbmNlbGxhdGlvbkRldGFpbHNfUmVhc29uRGV0YWlsZWRUZXh0XCJdID0gMjNdID0gXCJDYW5jZWxsYXRpb25EZXRhaWxzX1JlYXNvbkRldGFpbGVkVGV4dFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBMYW5ndWFnZSBVbmRlcnN0YW5kaW5nIFNlcnZpY2UgcmVzcG9uc2Ugb3V0cHV0IChpbiBKU09OIGZvcm1hdCkuIEF2YWlsYWJsZSB2aWEgW1tJbnRlbnRSZWNvZ25pdGlvblJlc3VsdF1dXG4gICAgICogQG1lbWJlciBQcm9wZXJ0eUlkLkxhbmd1YWdlVW5kZXJzdGFuZGluZ1NlcnZpY2VSZXNwb25zZV9Kc29uUmVzdWx0XG4gICAgICovXG4gICAgUHJvcGVydHlJZFtQcm9wZXJ0eUlkW1wiTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nU2VydmljZVJlc3BvbnNlX0pzb25SZXN1bHRcIl0gPSAyNF0gPSBcIkxhbmd1YWdlVW5kZXJzdGFuZGluZ1NlcnZpY2VSZXNwb25zZV9Kc29uUmVzdWx0XCI7XG59KShQcm9wZXJ0eUlkID0gZXhwb3J0cy5Qcm9wZXJ0eUlkIHx8IChleHBvcnRzLlByb3BlcnR5SWQgPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qcm9wZXJ0eUlkLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuL0V4cG9ydHNcIik7XG4vKipcbiAqIERlZmluZXMgcGF5bG9hZCBmb3Igc2Vzc2lvbiBldmVudHMgbGlrZSBTcGVlY2ggU3RhcnQvRW5kIERldGVjdGVkXG4gKiBAY2xhc3NcbiAqL1xudmFyIFJlY29nbml0aW9uRXZlbnRBcmdzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZWNvZ25pdGlvbkV2ZW50QXJncywgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZXNzaW9uSWQgLSBUaGUgc2Vzc2lvbiBpZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSZWNvZ25pdGlvbkV2ZW50QXJncyhvZmZzZXQsIHNlc3Npb25JZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzZXNzaW9uSWQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml0aW9uRXZlbnRBcmdzLnByb3RvdHlwZSwgXCJvZmZzZXRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVwcmVzZW50cyB0aGUgbWVzc2FnZSBvZmZzZXRcbiAgICAgICAgICogQG1lbWJlciBSZWNvZ25pdGlvbkV2ZW50QXJncy5wcm90b3R5cGUub2Zmc2V0XG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZPZmZzZXQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBSZWNvZ25pdGlvbkV2ZW50QXJncztcbn0oRXhwb3J0c18xLlNlc3Npb25FdmVudEFyZ3MpKTtcbmV4cG9ydHMuUmVjb2duaXRpb25FdmVudEFyZ3MgPSBSZWNvZ25pdGlvbkV2ZW50QXJncztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVjb2duaXRpb25FdmVudEFyZ3MuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBEZWZpbmVzIHJlc3VsdCBvZiBzcGVlY2ggcmVjb2duaXRpb24uXG4gKiBAY2xhc3MgUmVjb2duaXRpb25SZXN1bHRcbiAqL1xudmFyIFJlY29nbml0aW9uUmVzdWx0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlc3VsdElkIC0gVGhlIHJlc3VsdCBpZC5cbiAgICAgKiBAcGFyYW0ge1Jlc3VsdFJlYXNvbn0gcmVhc29uIC0gVGhlIHJlYXNvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSByZWNvZ25pemVkIHRleHQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGR1cmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IGludG8gdGhlIHN0cmVhbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JEZXRhaWxzIC0gRXJyb3IgZGV0YWlscywgaWYgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGpzb24gLSBBZGRpdGlvbmFsIEpzb24sIGlmIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlDb2xsZWN0aW9ufSBwcm9wZXJ0aWVzIC0gQWRkaXRpb25hbCBwcm9wZXJ0aWVzLCBpZiBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSZWNvZ25pdGlvblJlc3VsdChyZXN1bHRJZCwgcmVhc29uLCB0ZXh0LCBkdXJhdGlvbiwgb2Zmc2V0LCBlcnJvckRldGFpbHMsIGpzb24sIHByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhpcy5wcml2UmVzdWx0SWQgPSByZXN1bHRJZDtcbiAgICAgICAgdGhpcy5wcml2UmVhc29uID0gcmVhc29uO1xuICAgICAgICB0aGlzLnByaXZUZXh0ID0gdGV4dDtcbiAgICAgICAgdGhpcy5wcml2RHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5wcml2T2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLnByaXZFcnJvckRldGFpbHMgPSBlcnJvckRldGFpbHM7XG4gICAgICAgIHRoaXMucHJpdkpzb24gPSBqc29uO1xuICAgICAgICB0aGlzLnByaXZQcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml0aW9uUmVzdWx0LnByb3RvdHlwZSwgXCJyZXN1bHRJZFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpZXMgdGhlIHJlc3VsdCBpZGVudGlmaWVyLlxuICAgICAgICAgKiBAbWVtYmVyIFJlY29nbml0aW9uUmVzdWx0LnByb3RvdHlwZS5yZXN1bHRJZFxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBTcGVjaWZpZXMgdGhlIHJlc3VsdCBpZGVudGlmaWVyLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVzdWx0SWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvZ25pdGlvblJlc3VsdC5wcm90b3R5cGUsIFwicmVhc29uXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyBzdGF0dXMgb2YgdGhlIHJlc3VsdC5cbiAgICAgICAgICogQG1lbWJlciBSZWNvZ25pdGlvblJlc3VsdC5wcm90b3R5cGUucmVhc29uXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtSZXN1bHRSZWFzb259IFNwZWNpZmllcyBzdGF0dXMgb2YgdGhlIHJlc3VsdC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlYXNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml0aW9uUmVzdWx0LnByb3RvdHlwZSwgXCJ0ZXh0XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByZXNlbnRzIHRoZSByZWNvZ25pemVkIHRleHQgaW4gdGhlIHJlc3VsdC5cbiAgICAgICAgICogQG1lbWJlciBSZWNvZ25pdGlvblJlc3VsdC5wcm90b3R5cGUudGV4dFxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBQcmVzZW50cyB0aGUgcmVjb2duaXplZCB0ZXh0IGluIHRoZSByZXN1bHQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZUZXh0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLCBcImR1cmF0aW9uXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIER1cmF0aW9uIG9mIHJlY29nbml6ZWQgc3BlZWNoIGluIDEwMCBuYW5vIHNlY29uZCBpbmNlbWVudHMuXG4gICAgICAgICAqIEBtZW1iZXIgUmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLmR1cmF0aW9uXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IER1cmF0aW9uIG9mIHJlY29nbml6ZWQgc3BlZWNoIGluIDEwMCBuYW5vIHNlY29uZCBpbmNlbWVudHMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZEdXJhdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml0aW9uUmVzdWx0LnByb3RvdHlwZSwgXCJvZmZzZXRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogT2Zmc2V0IG9mIHJlY29nbml6ZWQgc3BlZWNoIGluIDEwMCBuYW5vIHNlY29uZCBpbmNlbWVudHMuXG4gICAgICAgICAqIEBtZW1iZXIgUmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLm9mZnNldFxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBPZmZzZXQgb2YgcmVjb2duaXplZCBzcGVlY2ggaW4gMTAwIG5hbm8gc2Vjb25kIGluY2VtZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdk9mZnNldDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml0aW9uUmVzdWx0LnByb3RvdHlwZSwgXCJlcnJvckRldGFpbHNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogSW4gY2FzZSBvZiBhbiB1bnN1Y2Nlc3NmdWwgcmVjb2duaXRpb24sIHByb3ZpZGVzIGRldGFpbHMgb2YgdGhlIG9jY3VycmVkIGVycm9yLlxuICAgICAgICAgKiBAbWVtYmVyIFJlY29nbml0aW9uUmVzdWx0LnByb3RvdHlwZS5lcnJvckRldGFpbHNcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gYSBicmllZiBkZXNjcmlwdGlvbiBvZiBhbiBlcnJvci5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yRGV0YWlscztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml0aW9uUmVzdWx0LnByb3RvdHlwZSwgXCJqc29uXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc3RyaW5nIGNvbnRhaW5pbmcgSnNvbiBzZXJpYWxpemVkIHJlY29nbml0aW9uIHJlc3VsdCBhcyBpdCB3YXMgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmljZS5cbiAgICAgICAgICogQG1lbWJlciBSZWNvZ25pdGlvblJlc3VsdC5wcm90b3R5cGUuanNvblxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gSnNvbiBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZXN1bHQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZKc29uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLCBcInByb3BlcnRpZXNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogIFRoZSBzZXQgb2YgcHJvcGVydGllcyBleHBvc2VkIGluIHRoZSByZXN1bHQuXG4gICAgICAgICAqIEBtZW1iZXIgUmVjb2duaXRpb25SZXN1bHQucHJvdG90eXBlLnByb3BlcnRpZXNcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge1Byb3BlcnR5Q29sbGVjdGlvbn0gVGhlIHNldCBvZiBwcm9wZXJ0aWVzIGV4cG9zZWQgaW4gdGhlIHJlc3VsdC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb3BlcnRpZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBSZWNvZ25pdGlvblJlc3VsdDtcbn0oKSk7XG5leHBvcnRzLlJlY29nbml0aW9uUmVzdWx0ID0gUmVjb2duaXRpb25SZXN1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlY29nbml0aW9uUmVzdWx0LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uLnNwZWVjaC9FeHBvcnRzXCIpO1xudmFyIEV4cG9ydHNfMiA9IHJlcXVpcmUoXCIuLi9jb21tb24vRXhwb3J0c1wiKTtcbnZhciBDb250cmFjdHNfMSA9IHJlcXVpcmUoXCIuL0NvbnRyYWN0c1wiKTtcbnZhciBFeHBvcnRzXzMgPSByZXF1aXJlKFwiLi9FeHBvcnRzXCIpO1xuLyoqXG4gKiBEZWZpbmVzIHRoZSBiYXNlIGNsYXNzIFJlY29nbml6ZXIgd2hpY2ggbWFpbmx5IGNvbnRhaW5zIGNvbW1vbiBldmVudCBoYW5kbGVycy5cbiAqIEBjbGFzcyBSZWNvZ25pemVyXG4gKi9cbnZhciBSZWNvZ25pemVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIGEgUmVjb2duaXplclxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXVkaW9Db25maWd9IGF1ZGlvSW5wdXQgLSBBbiBvcHRpb25hbCBhdWRpbyBpbnB1dCBzdHJlYW0gYXNzb2NpYXRlZCB3aXRoIHRoZSByZWNvZ25pemVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gUmVjb2duaXplcihhdWRpb0NvbmZpZywgcHJvcGVydGllcywgY29ubmVjdGlvbkZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5hdWRpb0NvbmZpZyA9IChhdWRpb0NvbmZpZyAhPT0gdW5kZWZpbmVkKSA/IGF1ZGlvQ29uZmlnIDogRXhwb3J0c18zLkF1ZGlvQ29uZmlnLmZyb21EZWZhdWx0TWljcm9waG9uZUlucHV0KCk7XG4gICAgICAgIHRoaXMucHJpdkRpc3Bvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJpdlByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmNsb25lKCk7XG4gICAgICAgIHRoaXMucHJpdkNvbm5lY3Rpb25GYWN0b3J5ID0gY29ubmVjdGlvbkZhY3Rvcnk7XG4gICAgICAgIHRoaXMuaW1wbENvbW1vblJlY29nbml6ZXJTZXR1cCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlIG9mIGFzc29jaWF0ZWQgcmVzb3VyY2VzLlxuICAgICAqIEBtZW1iZXIgUmVjb2duaXplci5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgUmVjb2duaXplci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWQpO1xuICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb2duaXplci5wcm90b3R5cGUsIFwiaW50ZXJuYWxEYXRhXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBJbnRlcm5hbFxuICAgICAgICAgKiBJbnRlcm5hbCBkYXRhIG1lbWJlciB0byBzdXBwb3J0IGZyb21SZWNvZ25pemVyKiBwYXR0ZXJuIG1ldGhvZHMgb24gb3RoZXIgY2xhc3Nlcy5cbiAgICAgICAgICogRG8gbm90IHVzZSBleHRlcm5hbGx5LCBvYmplY3QgcmV0dXJuZWQgd2lsbCBjaGFuZ2Ugd2l0aG91dCB3YXJuaW5nIG9yIG5vdGl2ZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlY287XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHBlcmZvcm1zIGNsZWFudXAgb2YgcmVzb3VyY2VzLlxuICAgICAqIFRoZSBCb29sZWFuIHBhcmFtZXRlciBkaXNwb3NpbmcgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIG1ldGhvZCBpcyBjYWxsZWRcbiAgICAgKiBmcm9tIERpc3Bvc2UgKGlmIGRpc3Bvc2luZyBpcyB0cnVlKSBvciBmcm9tIHRoZSBmaW5hbGl6ZXIgKGlmIGRpc3Bvc2luZyBpcyBmYWxzZSkuXG4gICAgICogRGVyaXZlZCBjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBkaXNwb3NlIHJlc291cmNlIGlmIG5lZWRlZC5cbiAgICAgKiBAbWVtYmVyIFJlY29nbml6ZXIucHJvdG90eXBlLmRpc3Bvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtib29sZWFufSBkaXNwb3NpbmcgLSBGbGFnIHRvIHJlcXVlc3QgZGlzcG9zYWwuXG4gICAgICovXG4gICAgUmVjb2duaXplci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIChkaXNwb3NpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMucHJpdkRpc3Bvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc3Bvc2luZykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpdlJlY28pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWNvLmF1ZGlvU291cmNlLnR1cm5PZmYoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZSZWNvLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZEaXNwb3NlZCA9IHRydWU7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb2duaXplciwgXCJ0ZWxlbWV0cnlFbmFibGVkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHRlbGVtZXRyeSBzZXR0aW5nLlxuICAgICAgICAgKiBAbWVtYmVyIFJlY29nbml6ZXIucHJvdG90eXBlLnRlbGVtZXRyeUVuYWJsZWRcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgdGVsZW1ldHJ5IGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMS5TZXJ2aWNlUmVjb2duaXplckJhc2UudGVsZW1ldHJ5RGF0YUVuYWJsZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGdsb2JhbGx5IGVuYWJsZXMgb3IgZGlzYWJsZXMgdGVsZW1ldHJ5LlxuICAgICAqIEBtZW1iZXIgUmVjb2duaXplci5wcm90b3R5cGUuZW5hYmxlVGVsZW1ldHJ5XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBlbmFibGVkIC0gR2xvYmFsIHNldHRpbmcgZm9yIHRlbGVtZXRyeSBjb2xsZWN0aW9uLlxuICAgICAqIElmIHNldCB0byB0cnVlLCB0ZWxlbWV0cnkgaW5mb3JtYXRpb24gbGlrZSBtaWNyb3Bob25lIGVycm9ycyxcbiAgICAgKiByZWNvZ25pdGlvbiBlcnJvcnMgYXJlIGNvbGxlY3RlZCBhbmQgc2VudCB0byBNaWNyb3NvZnQuXG4gICAgICogSWYgc2V0IHRvIGZhbHNlLCBubyB0ZWxlbWV0cnkgaXMgc2VudCB0byBNaWNyb3NvZnQuXG4gICAgICovXG4gICAgLyogdHNsaW50OmRpc2FibGU6bWVtYmVyLW9yZGVyaW5nICovXG4gICAgUmVjb2duaXplci5lbmFibGVUZWxlbWV0cnkgPSBmdW5jdGlvbiAoZW5hYmxlZCkge1xuICAgICAgICBFeHBvcnRzXzEuU2VydmljZVJlY29nbml6ZXJCYXNlLnRlbGVtZXRyeURhdGFFbmFibGVkID0gZW5hYmxlZDtcbiAgICB9O1xuICAgIC8vIERvZXMgdGhlIGdlbmVyaWMgcmVjb2duaXplciBzZXR1cCB0aGF0IGlzIGNvbW1vbiBhY2Nyb3NzIGFsbCByZWNvZ25pemVyIHR5cGVzLlxuICAgIFJlY29nbml6ZXIucHJvdG90eXBlLmltcGxDb21tb25SZWNvZ25pemVyU2V0dXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBvc1BsYXRmb3JtID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpID8gXCJCcm93c2VyXCIgOiBcIk5vZGVcIjtcbiAgICAgICAgdmFyIG9zTmFtZSA9IFwidW5rbm93blwiO1xuICAgICAgICB2YXIgb3NWZXJzaW9uID0gXCJ1bmtub3duXCI7XG4gICAgICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBvc1BsYXRmb3JtID0gb3NQbGF0Zm9ybSArIFwiL1wiICsgbmF2aWdhdG9yLnBsYXRmb3JtO1xuICAgICAgICAgICAgb3NOYW1lID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgICAgICAgIG9zVmVyc2lvbiA9IG5hdmlnYXRvci5hcHBWZXJzaW9uO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWNvZ25pemVyQ29uZmlnID0gdGhpcy5jcmVhdGVSZWNvZ25pemVyQ29uZmlnKG5ldyBFeHBvcnRzXzEuU3BlZWNoU2VydmljZUNvbmZpZyhuZXcgRXhwb3J0c18xLkNvbnRleHQobmV3IEV4cG9ydHNfMS5PUyhvc1BsYXRmb3JtLCBvc05hbWUsIG9zVmVyc2lvbikpKSk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25LZXkgPSB0aGlzLnByaXZQcm9wZXJ0aWVzLmdldFByb3BlcnR5KEV4cG9ydHNfMy5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0tleSwgdW5kZWZpbmVkKTtcbiAgICAgICAgdmFyIGF1dGhlbnRpY2F0aW9uID0gKHN1YnNjcmlwdGlvbktleSAmJiBzdWJzY3JpcHRpb25LZXkgIT09IFwiXCIpID9cbiAgICAgICAgICAgIG5ldyBFeHBvcnRzXzEuQ29nbml0aXZlU3Vic2NyaXB0aW9uS2V5QXV0aGVudGljYXRpb24oc3Vic2NyaXB0aW9uS2V5KSA6XG4gICAgICAgICAgICBuZXcgRXhwb3J0c18xLkNvZ25pdGl2ZVRva2VuQXV0aGVudGljYXRpb24oZnVuY3Rpb24gKGF1dGhGZXRjaEV2ZW50SWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXV0aG9yaXphdGlvblRva2VuID0gX3RoaXMucHJpdlByb3BlcnRpZXMuZ2V0UHJvcGVydHkoRXhwb3J0c18zLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVG9rZW4sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMi5Qcm9taXNlSGVscGVyLmZyb21SZXN1bHQoYXV0aG9yaXphdGlvblRva2VuKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChhdXRoRmV0Y2hFdmVudElkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF1dGhvcml6YXRpb25Ub2tlbiA9IF90aGlzLnByaXZQcm9wZXJ0aWVzLmdldFByb3BlcnR5KEV4cG9ydHNfMy5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuUHJvbWlzZUhlbHBlci5mcm9tUmVzdWx0KGF1dGhvcml6YXRpb25Ub2tlbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wcml2UmVjbyA9IHRoaXMuY3JlYXRlU2VydmljZVJlY29nbml6ZXIoYXV0aGVudGljYXRpb24sIHRoaXMucHJpdkNvbm5lY3Rpb25GYWN0b3J5LCB0aGlzLmF1ZGlvQ29uZmlnLCByZWNvZ25pemVyQ29uZmlnKTtcbiAgICB9O1xuICAgIC8vIFN0YXJ0IHRoZSByZWNvZ25pdGlvblxuICAgIFJlY29nbml6ZXIucHJvdG90eXBlLmltcGxSZWNvZ25pemVyU3RhcnQgPSBmdW5jdGlvbiAocmVjb2duaXRpb25Nb2RlLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5wcml2UmVjby5yZWNvZ25pemUocmVjb2duaXRpb25Nb2RlLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spLm9uKFxuICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuICAgICAgICBmdW5jdGlvbiAocmVzdWx0KSB7IH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCEhZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIC8vIEludGVybmFsIGVycm9yIHdpdGggc2VydmljZSBjb21tdW5pY2F0aW9uLlxuICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soXCJSdW50aW1lIGVycm9yOiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZWNvZ25pemVyLnByb3RvdHlwZS5pbXBsUmVjb2duaXplclN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZSZWNvKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZSZWNvLnN0b3BSZWNvZ25pemluZygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVjb2duaXplcjtcbn0oKSk7XG5leHBvcnRzLlJlY29nbml6ZXIgPSBSZWNvZ25pemVyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWNvZ25pemVyLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogRGVmaW5lcyB0aGUgcG9zc2libGUgcmVhc29ucyBhIHJlY29nbml0aW9uIHJlc3VsdCBtaWdodCBiZSBnZW5lcmF0ZWQuXG4gKiBAY2xhc3MgUmVzdWx0UmVhc29uXG4gKi9cbnZhciBSZXN1bHRSZWFzb247XG4oZnVuY3Rpb24gKFJlc3VsdFJlYXNvbikge1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBzcGVlY2ggY291bGQgbm90IGJlIHJlY29nbml6ZWQuIE1vcmUgZGV0YWlsc1xuICAgICAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTm9NYXRjaERldGFpbHMgb2JqZWN0LlxuICAgICAqIEBtZW1iZXIgUmVzdWx0UmVhc29uLk5vTWF0Y2hcbiAgICAgKi9cbiAgICBSZXN1bHRSZWFzb25bUmVzdWx0UmVhc29uW1wiTm9NYXRjaFwiXSA9IDBdID0gXCJOb01hdGNoXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHJlY29nbml0aW9uIHdhcyBjYW5jZWxlZC4gTW9yZSBkZXRhaWxzXG4gICAgICogY2FuIGJlIGZvdW5kIHVzaW5nIHRoZSBDYW5jZWxsYXRpb25EZXRhaWxzIG9iamVjdC5cbiAgICAgKiBAbWVtYmVyIFJlc3VsdFJlYXNvbi5DYW5jZWxlZFxuICAgICAqL1xuICAgIFJlc3VsdFJlYXNvbltSZXN1bHRSZWFzb25bXCJDYW5jZWxlZFwiXSA9IDFdID0gXCJDYW5jZWxlZFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGUgc3BlZWNoIHJlc3VsdCBjb250YWlucyBoeXBvdGhlc2lzIHRleHQuXG4gICAgICogQG1lbWJlciBSZXN1bHRSZWFzb24uUmVjb2duaXplZFNwZWVjaFxuICAgICAqL1xuICAgIFJlc3VsdFJlYXNvbltSZXN1bHRSZWFzb25bXCJSZWNvZ25pemluZ1NwZWVjaFwiXSA9IDJdID0gXCJSZWNvZ25pemluZ1NwZWVjaFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGUgc3BlZWNoIHJlc3VsdCBjb250YWlucyBmaW5hbCB0ZXh0IHRoYXQgaGFzIGJlZW4gcmVjb2duaXplZC5cbiAgICAgKiBTcGVlY2ggUmVjb2duaXRpb24gaXMgbm93IGNvbXBsZXRlIGZvciB0aGlzIHBocmFzZS5cbiAgICAgKiBAbWVtYmVyIFJlc3VsdFJlYXNvbi5SZWNvZ25pemVkU3BlZWNoXG4gICAgICovXG4gICAgUmVzdWx0UmVhc29uW1Jlc3VsdFJlYXNvbltcIlJlY29nbml6ZWRTcGVlY2hcIl0gPSAzXSA9IFwiUmVjb2duaXplZFNwZWVjaFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGUgaW50ZW50IHJlc3VsdCBjb250YWlucyBoeXBvdGhlc2lzIHRleHQgYW5kIGludGVudC5cbiAgICAgKiBAbWVtYmVyIFJlc3VsdFJlYXNvbi5SZWNvZ25pemluZ0ludGVudFxuICAgICAqL1xuICAgIFJlc3VsdFJlYXNvbltSZXN1bHRSZWFzb25bXCJSZWNvZ25pemluZ0ludGVudFwiXSA9IDRdID0gXCJSZWNvZ25pemluZ0ludGVudFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGUgaW50ZW50IHJlc3VsdCBjb250YWlucyBmaW5hbCB0ZXh0IGFuZCBpbnRlbnQuXG4gICAgICogU3BlZWNoIFJlY29nbml0aW9uIGFuZCBJbnRlbnQgZGV0ZXJtaW5hdGlvbiBhcmUgbm93IGNvbXBsZXRlIGZvciB0aGlzIHBocmFzZS5cbiAgICAgKiBAbWVtYmVyIFJlc3VsdFJlYXNvbi5SZWNvZ25pemVkSW50ZW50XG4gICAgICovXG4gICAgUmVzdWx0UmVhc29uW1Jlc3VsdFJlYXNvbltcIlJlY29nbml6ZWRJbnRlbnRcIl0gPSA1XSA9IFwiUmVjb2duaXplZEludGVudFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGUgdHJhbnNsYXRpb24gcmVzdWx0IGNvbnRhaW5zIGh5cG90aGVzaXMgdGV4dCBhbmQgaXRzIHRyYW5zbGF0aW9uKHMpLlxuICAgICAqIEBtZW1iZXIgUmVzdWx0UmVhc29uLlRyYW5zbGF0aW5nU3BlZWNoXG4gICAgICovXG4gICAgUmVzdWx0UmVhc29uW1Jlc3VsdFJlYXNvbltcIlRyYW5zbGF0aW5nU3BlZWNoXCJdID0gNl0gPSBcIlRyYW5zbGF0aW5nU3BlZWNoXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSB0cmFuc2xhdGlvbiByZXN1bHQgY29udGFpbnMgZmluYWwgdGV4dCBhbmQgY29ycmVzcG9uZGluZyB0cmFuc2xhdGlvbihzKS5cbiAgICAgKiBTcGVlY2ggUmVjb2duaXRpb24gYW5kIFRyYW5zbGF0aW9uIGFyZSBub3cgY29tcGxldGUgZm9yIHRoaXMgcGhyYXNlLlxuICAgICAqIEBtZW1iZXIgUmVzdWx0UmVhc29uLlRyYW5zbGF0ZWRTcGVlY2hcbiAgICAgKi9cbiAgICBSZXN1bHRSZWFzb25bUmVzdWx0UmVhc29uW1wiVHJhbnNsYXRlZFNwZWVjaFwiXSA9IDddID0gXCJUcmFuc2xhdGVkU3BlZWNoXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSBzeW50aGVzaXplZCBhdWRpbyByZXN1bHQgY29udGFpbnMgYSBub24temVybyBhbW91bnQgb2YgYXVkaW8gZGF0YVxuICAgICAqIEBtZW1iZXIgUmVzdWx0UmVhc29uLlN5bnRoZXNpemluZ0F1ZGlvXG4gICAgICovXG4gICAgUmVzdWx0UmVhc29uW1Jlc3VsdFJlYXNvbltcIlN5bnRoZXNpemluZ0F1ZGlvXCJdID0gOF0gPSBcIlN5bnRoZXNpemluZ0F1ZGlvXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSBzeW50aGVzaXplZCBhdWRpbyBpcyBub3cgY29tcGxldGUgZm9yIHRoaXMgcGhyYXNlLlxuICAgICAqIEBtZW1iZXIgUmVzdWx0UmVhc29uLlN5bnRoZXNpemluZ0F1ZGlvQ29tcGxldGVkXG4gICAgICovXG4gICAgUmVzdWx0UmVhc29uW1Jlc3VsdFJlYXNvbltcIlN5bnRoZXNpemluZ0F1ZGlvQ29tcGxldGVkXCJdID0gOV0gPSBcIlN5bnRoZXNpemluZ0F1ZGlvQ29tcGxldGVkXCI7XG59KShSZXN1bHRSZWFzb24gPSBleHBvcnRzLlJlc3VsdFJlYXNvbiB8fCAoZXhwb3J0cy5SZXN1bHRSZWFzb24gPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXN1bHRSZWFzb24uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBEZWZpbmVzIGNvbnRlbnQgZm9yIHNlc3Npb24gZXZlbnRzIGxpa2UgU2Vzc2lvblN0YXJ0ZWQvU3RvcHBlZCwgU291bmRTdGFydGVkL1N0b3BwZWQuXG4gKiBAY2xhc3MgU2Vzc2lvbkV2ZW50QXJnc1xuICovXG52YXIgU2Vzc2lvbkV2ZW50QXJncyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZXNzaW9uSWQgLSBUaGUgc2Vzc2lvbiBpZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXNzaW9uRXZlbnRBcmdzKHNlc3Npb25JZCkge1xuICAgICAgICB0aGlzLnByaXZTZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZXNzaW9uRXZlbnRBcmdzLnByb3RvdHlwZSwgXCJzZXNzaW9uSWRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVwcmVzZW50cyB0aGUgc2Vzc2lvbiBpZGVudGlmaWVyLlxuICAgICAgICAgKiBAbWVtYmVyIFNlc3Npb25FdmVudEFyZ3MucHJvdG90eXBlLnNlc3Npb25JZFxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXByZXNlbnRzIHRoZSBzZXNzaW9uIGlkZW50aWZpZXIuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTZXNzaW9uSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBTZXNzaW9uRXZlbnRBcmdzO1xufSgpKTtcbmV4cG9ydHMuU2Vzc2lvbkV2ZW50QXJncyA9IFNlc3Npb25FdmVudEFyZ3M7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlc3Npb25FdmVudEFyZ3MuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiKTtcbnZhciBDb250cmFjdHNfMSA9IHJlcXVpcmUoXCIuL0NvbnRyYWN0c1wiKTtcbnZhciBFeHBvcnRzXzIgPSByZXF1aXJlKFwiLi9FeHBvcnRzXCIpO1xuLyoqXG4gKiBTcGVlY2ggY29uZmlndXJhdGlvbi5cbiAqIEBjbGFzcyBTcGVlY2hDb25maWdcbiAqL1xudmFyIFNwZWVjaENvbmZpZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhbiBpbnN0YW5jZS5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTcGVlY2hDb25maWcoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBpbnN0YW5jZSBvZiBTcGVlY2hDb25maWcgcmV0dXJuZWQgYnkgcGFzc2luZyBzdWJzY3JpcHRpb25LZXkgYW5kIHNlcnZpY2UgcmVnaW9uLlxuICAgICAqIE5vdGU6IFBsZWFzZSB1c2UgeW91ciBMYW5ndWFnZVVuZGVyc3RhbmRpbmcgc3Vic2NyaXB0aW9uIGtleSBpbiBjYXNlIHlvdSB3YW50IHRvIHVzZSB0aGUgSW50ZW50IHJlY29nbml6ZXIuXG4gICAgICogQG1lbWJlciBTcGVlY2hDb25maWcuZnJvbVN1YnNjcmlwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3Vic2NyaXB0aW9uS2V5IC0gVGhlIHN1YnNjcmlwdGlvbiBrZXkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbiAtIFRoZSByZWdpb24gbmFtZSAoc2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9ha2EubXMvY3NzcGVlY2gvcmVnaW9uXCI+cmVnaW9uIHBhZ2U8L2E+KS5cbiAgICAgKiBAcmV0dXJucyB7U3BlZWNoQ29uZmlnfSBUaGUgc3BlZWNoIGZhY3RvcnlcbiAgICAgKi9cbiAgICBTcGVlY2hDb25maWcuZnJvbVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb25LZXksIHJlZ2lvbikge1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2Uoc3Vic2NyaXB0aW9uS2V5LCBcInN1YnNjcmlwdGlvbktleVwiKTtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHJlZ2lvbiwgXCJyZWdpb25cIik7XG4gICAgICAgIHZhciBzcGVlY2hJbXBsID0gbmV3IFNwZWVjaENvbmZpZ0ltcGwoKTtcbiAgICAgICAgc3BlZWNoSW1wbC5zZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWdpb24sIHJlZ2lvbik7XG4gICAgICAgIHNwZWVjaEltcGwuc2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fSW50ZW50UmVnaW9uLCByZWdpb24pO1xuICAgICAgICBzcGVlY2hJbXBsLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0tleSwgc3Vic2NyaXB0aW9uS2V5KTtcbiAgICAgICAgcmV0dXJuIHNwZWVjaEltcGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBzcGVlY2ggY29uZmlnIHdpdGggc3BlY2lmaWVkIGVuZHBvaW50IGFuZCBzdWJzY3JpcHRpb24ga2V5LlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIG9ubHkgZm9yIHVzZXJzIHdobyB1c2UgYSBub24tc3RhbmRhcmQgc2VydmljZSBlbmRwb2ludCBvciBwYXJhbWV0ZXJzLlxuICAgICAqIE5vdGU6IFBsZWFzZSB1c2UgeW91ciBMYW5ndWFnZVVuZGVyc3RhbmRpbmcgc3Vic2NyaXB0aW9uIGtleSBpbiBjYXNlIHlvdSB3YW50IHRvIHVzZSB0aGUgSW50ZW50IHJlY29nbml6ZXIuXG4gICAgICogTm90ZTogVGhlIHF1ZXJ5IHBhcmFtZXRlcnMgc3BlY2lmaWVkIGluIHRoZSBlbmRwb2ludCBVUkwgYXJlIG5vdCBjaGFuZ2VkLCBldmVuIGlmIHRoZXkgYXJlIHNldCBieSBhbnkgb3RoZXIgQVBJcy5cbiAgICAgKiBGb3IgZXhhbXBsZSwgaWYgbGFuZ3VhZ2UgaXMgZGVmaW5lZCBpbiB0aGUgdXJpIGFzIHF1ZXJ5IHBhcmFtZXRlciBcImxhbmd1YWdlPWRlLURFXCIsIGFuZCBhbHNvIHNldCBieVxuICAgICAqICAgICAgICAgICAgICBTcGVlY2hDb25maWcuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSA9IFwiZW4tVVNcIiwgdGhlIGxhbmd1YWdlIHNldHRpbmcgaW4gdXJpIHRha2VzIHByZWNlZGVuY2UsXG4gICAgICogICAgICAgICAgICAgIGFuZCB0aGUgZWZmZWN0aXZlIGxhbmd1YWdlIGlzIFwiZGUtREVcIi4gT25seSB0aGUgcGFyYW1ldGVycyB0aGF0IGFyZSBub3Qgc3BlY2lmaWVkIGluIHRoZVxuICAgICAqICAgICAgICAgICAgICBlbmRwb2ludCBVUkwgY2FuIGJlIHNldCBieSBvdGhlciBBUElzLlxuICAgICAqIE5vdGU6IFRvIHVzZSBhdXRob3JpemF0aW9uIHRva2VuIHdpdGggZnJvbUVuZHBvaW50LCBwYXNzIGFuIGVtcHR5IHN0cmluZyB0byB0aGUgc3Vic2NyaXB0aW9uS2V5IGluIHRoZVxuICAgICAqICAgICAgIGZyb21FbmRwb2ludCBtZXRob2QsIGFuZCB0aGVuIHNldCBhdXRob3JpemF0aW9uVG9rZW49XCJ0b2tlblwiIG9uIHRoZSBjcmVhdGVkIFNwZWVjaENvbmZpZyBpbnN0YW5jZSB0b1xuICAgICAqICAgICAgIHVzZSB0aGUgYXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaENvbmZpZy5mcm9tRW5kcG9pbnRcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtVUkx9IGVuZHBvaW50IC0gVGhlIHNlcnZpY2UgZW5kcG9pbnQgdG8gY29ubmVjdCB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3Vic2NyaXB0aW9uS2V5IC0gVGhlIHN1YnNjcmlwdGlvbiBrZXkuXG4gICAgICogQHJldHVybnMge1NwZWVjaENvbmZpZ30gQSBzcGVlY2ggZmFjdG9yeSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBTcGVlY2hDb25maWcuZnJvbUVuZHBvaW50ID0gZnVuY3Rpb24gKGVuZHBvaW50LCBzdWJzY3JpcHRpb25LZXkpIHtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsKGVuZHBvaW50LCBcImVuZHBvaW50XCIpO1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGwoc3Vic2NyaXB0aW9uS2V5LCBcInN1YnNjcmlwdGlvbktleVwiKTtcbiAgICAgICAgdmFyIHNwZWVjaEltcGwgPSBuZXcgU3BlZWNoQ29uZmlnSW1wbCgpO1xuICAgICAgICBzcGVlY2hJbXBsLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50LCBlbmRwb2ludC5ocmVmKTtcbiAgICAgICAgc3BlZWNoSW1wbC5zZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXksIHN1YnNjcmlwdGlvbktleSk7XG4gICAgICAgIHJldHVybiBzcGVlY2hJbXBsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgc3BlZWNoIGZhY3Rvcnkgd2l0aCBzcGVjaWZpZWQgaW5pdGlhbCBhdXRob3JpemF0aW9uIHRva2VuIGFuZCByZWdpb24uXG4gICAgICogTm90ZTogVGhlIGNhbGxlciBuZWVkcyB0byBlbnN1cmUgdGhhdCB0aGUgYXV0aG9yaXphdGlvbiB0b2tlbiBpcyB2YWxpZC4gQmVmb3JlIHRoZSBhdXRob3JpemF0aW9uIHRva2VuXG4gICAgICogICAgICAgZXhwaXJlcywgdGhlIGNhbGxlciBuZWVkcyB0byByZWZyZXNoIGl0IGJ5IGNhbGxpbmcgdGhpcyBzZXR0ZXIgd2l0aCBhIG5ldyB2YWxpZCB0b2tlbi5cbiAgICAgKiBOb3RlOiBQbGVhc2UgdXNlIGEgdG9rZW4gZGVyaXZlZCBmcm9tIHlvdXIgTGFuZ3VhZ2VVbmRlcnN0YW5kaW5nIHN1YnNjcmlwdGlvbiBrZXkgaW4gY2FzZSB5b3Ugd2FudFxuICAgICAqICAgICAgIHRvIHVzZSB0aGUgSW50ZW50IHJlY29nbml6ZXIuIEFzIGNvbmZpZ3VyYXRpb24gdmFsdWVzIGFyZSBjb3BpZWQgd2hlbiBjcmVhdGluZyBhIG5ldyByZWNvZ25pemVyLFxuICAgICAqICAgICAgIHRoZSBuZXcgdG9rZW4gdmFsdWUgd2lsbCBub3QgYXBwbHkgdG8gcmVjb2duaXplcnMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBjcmVhdGVkLiBGb3IgcmVjb2duaXplcnNcbiAgICAgKiAgICAgICB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkIGJlZm9yZSwgeW91IG5lZWQgdG8gc2V0IGF1dGhvcml6YXRpb24gdG9rZW4gb2YgdGhlIGNvcnJlc3BvbmRpbmcgcmVjb2duaXplclxuICAgICAqICAgICAgIHRvIHJlZnJlc2ggdGhlIHRva2VuLiBPdGhlcndpc2UsIHRoZSByZWNvZ25pemVycyB3aWxsIGVuY291bnRlciBlcnJvcnMgZHVyaW5nIHJlY29nbml0aW9uLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoQ29uZmlnLmZyb21BdXRob3JpemF0aW9uVG9rZW5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGF1dGhvcml6YXRpb25Ub2tlbiAtIFRoZSBpbml0aWFsIGF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbiAtIFRoZSByZWdpb24gbmFtZSAoc2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9ha2EubXMvY3NzcGVlY2gvcmVnaW9uXCI+cmVnaW9uIHBhZ2U8L2E+KS5cbiAgICAgKiBAcmV0dXJucyB7U3BlZWNoQ29uZmlnfSBBIHNwZWVjaCBmYWN0b3J5IGluc3RhbmNlLlxuICAgICAqL1xuICAgIFNwZWVjaENvbmZpZy5mcm9tQXV0aG9yaXphdGlvblRva2VuID0gZnVuY3Rpb24gKGF1dGhvcml6YXRpb25Ub2tlbiwgcmVnaW9uKSB7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbChhdXRob3JpemF0aW9uVG9rZW4sIFwiYXV0aG9yaXphdGlvblRva2VuXCIpO1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UocmVnaW9uLCBcInJlZ2lvblwiKTtcbiAgICAgICAgdmFyIHNwZWVjaEltcGwgPSBuZXcgU3BlZWNoQ29uZmlnSW1wbCgpO1xuICAgICAgICBzcGVlY2hJbXBsLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgc3BlZWNoSW1wbC5zZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9JbnRlbnRSZWdpb24sIHJlZ2lvbik7XG4gICAgICAgIHNwZWVjaEltcGwuYXV0aG9yaXphdGlvblRva2VuID0gYXV0aG9yaXphdGlvblRva2VuO1xuICAgICAgICByZXR1cm4gc3BlZWNoSW1wbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgY29uZmlndXJhdGlvbi5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaENvbmZpZy5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbiAgICBTcGVlY2hDb25maWcucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIHJldHVybiBTcGVlY2hDb25maWc7XG59KCkpO1xuZXhwb3J0cy5TcGVlY2hDb25maWcgPSBTcGVlY2hDb25maWc7XG4vKipcbiAqIEBwcml2YXRlXG4gKiBAY2xhc3MgU3BlZWNoQ29uZmlnSW1wbFxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWNsYXNzZXMtcGVyLWZpbGVcbnZhciBTcGVlY2hDb25maWdJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTcGVlY2hDb25maWdJbXBsLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNwZWVjaENvbmZpZ0ltcGwoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZQcm9wZXJ0aWVzID0gbmV3IEV4cG9ydHNfMi5Qcm9wZXJ0eUNvbGxlY3Rpb24oKTtcbiAgICAgICAgX3RoaXMuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSA9IFwiZW4tVVNcIjsgLy8gU2hvdWxkIHdlIGhhdmUgYSBkZWZhdWx0P1xuICAgICAgICBfdGhpcy5vdXRwdXRGb3JtYXQgPSBFeHBvcnRzXzIuT3V0cHV0Rm9ybWF0LlNpbXBsZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwicHJvcGVydGllc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb3BlcnRpZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGVlY2hDb25maWdJbXBsLnByb3RvdHlwZSwgXCJlbmRQb2ludFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVUkwodGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludCkpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwic3Vic2NyaXB0aW9uS2V5XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXkpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwicmVnaW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWdpb24pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwiYXV0aG9yaXphdGlvblRva2VuXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlbik7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZQcm9wZXJ0aWVzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuLCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGVlY2hDb25maWdJbXBsLnByb3RvdHlwZSwgXCJzcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2UpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcml2UHJvcGVydGllcy5zZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWNvTGFuZ3VhZ2UsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaENvbmZpZ0ltcGwucHJvdG90eXBlLCBcIm91dHB1dEZvcm1hdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEV4cG9ydHNfMi5PdXRwdXRGb3JtYXRbdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzEuT3V0cHV0Rm9ybWF0UHJvcGVydHlOYW1lLCB1bmRlZmluZWQpXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdlByb3BlcnRpZXMuc2V0UHJvcGVydHkoRXhwb3J0c18xLk91dHB1dEZvcm1hdFByb3BlcnR5TmFtZSwgRXhwb3J0c18yLk91dHB1dEZvcm1hdFt2YWx1ZV0pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwiZW5kcG9pbnRJZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb3BlcnRpZXMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnRJZCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZQcm9wZXJ0aWVzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50SWQsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU3BlZWNoQ29uZmlnSW1wbC5wcm90b3R5cGUuc2V0UHJvcGVydHkgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsKHZhbHVlLCBcInZhbHVlXCIpO1xuICAgICAgICB0aGlzLnByaXZQcm9wZXJ0aWVzLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIFNwZWVjaENvbmZpZ0ltcGwucHJvdG90eXBlLmdldFByb3BlcnR5ID0gZnVuY3Rpb24gKG5hbWUsIGRlZikge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2UHJvcGVydGllcy5nZXRQcm9wZXJ0eShuYW1lLCBkZWYpO1xuICAgIH07XG4gICAgU3BlZWNoQ29uZmlnSW1wbC5wcm90b3R5cGUuc2V0UHJveHkgPSBmdW5jdGlvbiAocHJveHlIb3N0TmFtZSwgcHJveHlQb3J0LCBwcm94eVVzZXJOYW1lLCBwcm94eVBhc3N3b3JkKSB7XG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWRbRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlIb3N0TmFtZV0sIHByb3h5SG9zdE5hbWUpO1xuICAgICAgICB0aGlzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkW0V4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5UG9ydF0sIHByb3h5UG9ydCk7XG4gICAgICAgIHRoaXMuc2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWRbRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUHJveHlVc2VyTmFtZV0sIHByb3h5VXNlck5hbWUpO1xuICAgICAgICB0aGlzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkW0V4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5UGFzc3dvcmRdLCBwcm94eVBhc3N3b3JkKTtcbiAgICB9O1xuICAgIFNwZWVjaENvbmZpZ0ltcGwucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmV0ID0gbmV3IFNwZWVjaENvbmZpZ0ltcGwoKTtcbiAgICAgICAgcmV0LnByaXZQcm9wZXJ0aWVzID0gdGhpcy5wcml2UHJvcGVydGllcy5jbG9uZSgpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gICAgcmV0dXJuIFNwZWVjaENvbmZpZ0ltcGw7XG59KFNwZWVjaENvbmZpZykpO1xuZXhwb3J0cy5TcGVlY2hDb25maWdJbXBsID0gU3BlZWNoQ29uZmlnSW1wbDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoQ29uZmlnLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuL0V4cG9ydHNcIik7XG4vKipcbiAqIERlZmluZXMgY29udGVudCBvZiBhIFJlY29nbml0aW9uRXJyb3JFdmVudC5cbiAqIEBjbGFzcyBTcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzXG4gKi9cbnZhciBTcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtDYW5jZWxsYXRpb25SZWFzb259IHJlYXNvbiAtIFRoZSBjYW5jZWxsYXRpb24gcmVhc29uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvckRldGFpbHMgLSBFcnJvciBkZXRhaWxzLCBpZiBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2Vzc2lvbklkIC0gVGhlIHNlc3Npb24gaWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyhyZWFzb24sIGVycm9yRGV0YWlscywgZXJyb3JDb2RlLCBvZmZzZXQsIHNlc3Npb25JZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvZmZzZXQsIHNlc3Npb25JZCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJpdlJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgX3RoaXMucHJpdkVycm9yRGV0YWlscyA9IGVycm9yRGV0YWlscztcbiAgICAgICAgX3RoaXMucHJpdkVycm9yQ29kZSA9IGVycm9yQ29kZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUsIFwicmVhc29uXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByZWFzb24gdGhlIHJlY29nbml0aW9uIHdhcyBjYW5jZWxlZC5cbiAgICAgICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLnByb3RvdHlwZS5yZWFzb25cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge0NhbmNlbGxhdGlvblJlYXNvbn0gU3BlY2lmaWVzIHRoZSByZWFzb24gY2FuY2VsZWQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZSZWFzb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLnByb3RvdHlwZSwgXCJlcnJvckNvZGVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGVycm9yIGNvZGUgaW4gY2FzZSBvZiBhbiB1bnN1Y2Nlc3NmdWwgcmVjb2duaXRpb24uXG4gICAgICAgICAqIEFkZGVkIGluIHZlcnNpb24gMS4xLjAuXG4gICAgICAgICAqIEByZXR1cm4gQW4gZXJyb3IgY29kZSB0aGF0IHJlcHJlc2VudHMgdGhlIGVycm9yIHJlYXNvbi5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yQ29kZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MucHJvdG90eXBlLCBcImVycm9yRGV0YWlsc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbiBjYXNlIG9mIGFuIHVuc3VjY2Vzc2Z1bCByZWNvZ25pdGlvbiwgcHJvdmlkZXMgZGV0YWlscyBvZiB0aGUgb2NjdXJyZWQgZXJyb3IuXG4gICAgICAgICAqIEBtZW1iZXIgU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUuZXJyb3JEZXRhaWxzXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEEgU3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgZXJyb3IgZGV0YWlscy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkVycm9yRGV0YWlscztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFNwZWVjaFJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3M7XG59KEV4cG9ydHNfMS5SZWNvZ25pdGlvbkV2ZW50QXJncykpO1xuZXhwb3J0cy5TcGVlY2hSZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzID0gU3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi9FeHBvcnRzXCIpO1xuLyoqXG4gKiBEZWZpbmVzIGNvbnRlbnRzIG9mIHNwZWVjaCByZWNvZ25pemluZy9yZWNvZ25pemVkIGV2ZW50LlxuICogQGNsYXNzIFNwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzXG4gKi9cbnZhciBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJncyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3BlZWNoUmVjb2duaXRpb25FdmVudEFyZ3MsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1NwZWVjaFJlY29nbml0aW9uUmVzdWx0fSByZXN1bHQgLSBUaGUgc3BlZWNoIHJlY29nbml0aW9uIHJlc3VsdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVGhlIG9mZnNldC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2Vzc2lvbklkIC0gVGhlIHNlc3Npb24gaWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3BlZWNoUmVjb2duaXRpb25FdmVudEFyZ3MocmVzdWx0LCBvZmZzZXQsIHNlc3Npb25JZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvZmZzZXQsIHNlc3Npb25JZCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJpdlJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoUmVjb2duaXRpb25FdmVudEFyZ3MucHJvdG90eXBlLCBcInJlc3VsdFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpZXMgdGhlIHJlY29nbml0aW9uIHJlc3VsdC5cbiAgICAgICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJncy5wcm90b3R5cGUucmVzdWx0XG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtTcGVlY2hSZWNvZ25pdGlvblJlc3VsdH0gdGhlIHJlY29nbml0aW9uIHJlc3VsdC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFNwZWVjaFJlY29nbml0aW9uRXZlbnRBcmdzO1xufShFeHBvcnRzXzEuUmVjb2duaXRpb25FdmVudEFyZ3MpKTtcbmV4cG9ydHMuU3BlZWNoUmVjb2duaXRpb25FdmVudEFyZ3MgPSBTcGVlY2hSZWNvZ25pdGlvbkV2ZW50QXJncztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoUmVjb2duaXRpb25FdmVudEFyZ3MuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8qKlxuICogRGVmaW5lcyByZXN1bHQgb2Ygc3BlZWNoIHJlY29nbml0aW9uLlxuICogQGNsYXNzIFNwZWVjaFJlY29nbml0aW9uUmVzdWx0XG4gKi9cbnZhciBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3BlZWNoUmVjb2duaXRpb25SZXN1bHQsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlc3VsdElkIC0gVGhlIHJlc3VsdCBpZC5cbiAgICAgKiBAcGFyYW0ge1Jlc3VsdFJlYXNvbn0gcmVhc29uIC0gVGhlIHJlYXNvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSByZWNvZ25pemVkIHRleHQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGR1cmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IGludG8gdGhlIHN0cmVhbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JEZXRhaWxzIC0gRXJyb3IgZGV0YWlscywgaWYgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGpzb24gLSBBZGRpdGlvbmFsIEpzb24sIGlmIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlDb2xsZWN0aW9ufSBwcm9wZXJ0aWVzIC0gQWRkaXRpb25hbCBwcm9wZXJ0aWVzLCBpZiBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdChyZXN1bHRJZCwgcmVhc29uLCB0ZXh0LCBkdXJhdGlvbiwgb2Zmc2V0LCBlcnJvckRldGFpbHMsIGpzb24sIHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIHJlc3VsdElkLCByZWFzb24sIHRleHQsIGR1cmF0aW9uLCBvZmZzZXQsIGVycm9yRGV0YWlscywganNvbiwgcHJvcGVydGllcykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNwZWVjaFJlY29nbml0aW9uUmVzdWx0O1xufShFeHBvcnRzXzEuUmVjb2duaXRpb25SZXN1bHQpKTtcbmV4cG9ydHMuU3BlZWNoUmVjb2duaXRpb25SZXN1bHQgPSBTcGVlY2hSZWNvZ25pdGlvblJlc3VsdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3BlZWNoUmVjb2duaXRpb25SZXN1bHQuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiKTtcbnZhciBTcGVlY2hDb25uZWN0aW9uRmFjdG9yeV8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi5zcGVlY2gvU3BlZWNoQ29ubmVjdGlvbkZhY3RvcnlcIik7XG52YXIgQ29udHJhY3RzXzEgPSByZXF1aXJlKFwiLi9Db250cmFjdHNcIik7XG52YXIgRXhwb3J0c18yID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8qKlxuICogUGVyZm9ybXMgc3BlZWNoIHJlY29nbml0aW9uIGZyb20gbWljcm9waG9uZSwgZmlsZSwgb3Igb3RoZXIgYXVkaW8gaW5wdXQgc3RyZWFtcywgYW5kIGdldHMgdHJhbnNjcmliZWQgdGV4dCBhcyByZXN1bHQuXG4gKiBAY2xhc3MgU3BlZWNoUmVjb2duaXplclxuICovXG52YXIgU3BlZWNoUmVjb2duaXplciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3BlZWNoUmVjb2duaXplciwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBTcGVlY2hSZWNvZ25pemVyIGNvbnN0cnVjdG9yLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7U3BlZWNoQ29uZmlnfSBzcGVlY2hDb25maWcgLSBBbiBzZXQgb2YgaW5pdGlhbCBwcm9wZXJ0aWVzIGZvciB0aGlzIHJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge0F1ZGlvQ29uZmlnfSBhdWRpb0NvbmZpZyAtIEFuIG9wdGlvbmFsIGF1ZGlvIGNvbmZpZ3VyYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSByZWNvZ25pemVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3BlZWNoUmVjb2duaXplcihzcGVlY2hDb25maWcsIGF1ZGlvQ29uZmlnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzcGVlY2hDb25maWdJbXBsID0gc3BlZWNoQ29uZmlnO1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGwoc3BlZWNoQ29uZmlnSW1wbCwgXCJzcGVlY2hDb25maWdcIik7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShzcGVlY2hDb25maWdJbXBsLnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlKSwgRXhwb3J0c18yLlByb3BlcnR5SWRbRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlXSk7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYXVkaW9Db25maWcsIHNwZWVjaENvbmZpZ0ltcGwucHJvcGVydGllcywgbmV3IFNwZWVjaENvbm5lY3Rpb25GYWN0b3J5XzEuU3BlZWNoQ29ubmVjdGlvbkZhY3RvcnkoKSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJpdkRpc3Bvc2VkU3BlZWNoUmVjb2duaXplciA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZSwgXCJlbmRwb2ludElkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIGVuZHBvaW50IGlkIG9mIGEgY3VzdG9taXplZCBzcGVlY2ggbW9kZWwgdGhhdCBpcyB1c2VkIGZvciBzcGVlY2ggcmVjb2duaXRpb24uXG4gICAgICAgICAqIEBtZW1iZXIgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUuZW5kcG9pbnRJZFxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgZW5kcG9pbnQgaWQgb2YgYSBjdXN0b21pemVkIHNwZWVjaCBtb2RlbCB0aGF0IGlzIHVzZWQgZm9yIHNwZWVjaCByZWNvZ25pdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZEaXNwb3NlZCh0aGlzLnByaXZEaXNwb3NlZFNwZWVjaFJlY29nbml6ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludElkLCBcIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLCBcImF1dGhvcml6YXRpb25Ub2tlblwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBhdXRob3JpemF0aW9uIHRva2VuIHVzZWQgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgc2VydmljZS5cbiAgICAgICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5hdXRob3JpemF0aW9uVG9rZW5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gQXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlbik7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzL1NldHMgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4gdXNlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgKiBAbWVtYmVyIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLmF1dGhvcml6YXRpb25Ub2tlblxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG9rZW4gLSBBdXRob3JpemF0aW9uIHRva2VuLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZSh0b2tlbiwgXCJ0b2tlblwiKTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5zZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlbiwgdG9rZW4pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUsIFwic3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBzcG9rZW4gbGFuZ3VhZ2Ugb2YgcmVjb2duaXRpb24uXG4gICAgICAgICAqIEBtZW1iZXIgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZVxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc3Bva2VuIGxhbmd1YWdlIG9mIHJlY29nbml0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkU3BlZWNoUmVjb2duaXplcik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmdldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZSwgXCJvdXRwdXRGb3JtYXRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgb3V0cHV0IGZvcm1hdCBvZiByZWNvZ25pdGlvbi5cbiAgICAgICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5vdXRwdXRGb3JtYXRcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge091dHB1dEZvcm1hdH0gVGhlIG91dHB1dCBmb3JtYXQgb2YgcmVjb2duaXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRTcGVlY2hSZWNvZ25pemVyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoRXhwb3J0c18xLk91dHB1dEZvcm1hdFByb3BlcnR5TmFtZSwgRXhwb3J0c18yLk91dHB1dEZvcm1hdFtFeHBvcnRzXzIuT3V0cHV0Rm9ybWF0LlNpbXBsZV0pID09PSBFeHBvcnRzXzIuT3V0cHV0Rm9ybWF0W0V4cG9ydHNfMi5PdXRwdXRGb3JtYXQuU2ltcGxlXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuT3V0cHV0Rm9ybWF0LlNpbXBsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBFeHBvcnRzXzIuT3V0cHV0Rm9ybWF0LkRldGFpbGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUsIFwicHJvcGVydGllc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY29sbGVjdGlvbiBvZiBwcm9wZXJ0aWVzIGFuZCB0aGVpciB2YWx1ZXMgZGVmaW5lZCBmb3IgdGhpcyBTcGVlY2hSZWNvZ25pemVyLlxuICAgICAgICAgKiBAbWVtYmVyIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLnByb3BlcnRpZXNcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge1Byb3BlcnR5Q29sbGVjdGlvbn0gVGhlIGNvbGxlY3Rpb24gb2YgcHJvcGVydGllcyBhbmQgdGhlaXIgdmFsdWVzIGRlZmluZWQgZm9yIHRoaXMgU3BlZWNoUmVjb2duaXplci5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlByb3BlcnRpZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBzcGVlY2ggcmVjb2duaXRpb24sIGFuZCBzdG9wcyBhZnRlciB0aGUgZmlyc3QgdXR0ZXJhbmNlIGlzIHJlY29nbml6ZWQuXG4gICAgICogVGhlIHRhc2sgcmV0dXJucyB0aGUgcmVjb2duaXRpb24gdGV4dCBhcyByZXN1bHQuXG4gICAgICogTm90ZTogUmVjb2duaXplT25jZUFzeW5jKCkgcmV0dXJucyB3aGVuIHRoZSBmaXJzdCB1dHRlcmFuY2UgaGFzIGJlZW4gcmVjb2duaXplZCxcbiAgICAgKiAgICAgICBzbyBpdCBpcyBzdWl0YWJsZSBvbmx5IGZvciBzaW5nbGUgc2hvdCByZWNvZ25pdGlvblxuICAgICAqICAgICAgIGxpa2UgY29tbWFuZCBvciBxdWVyeS4gRm9yIGxvbmctcnVubmluZyByZWNvZ25pdGlvbiwgdXNlIFN0YXJ0Q29udGludW91c1JlY29nbml0aW9uQXN5bmMoKSBpbnN0ZWFkLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUucmVjb2duaXplT25jZUFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIHRoYXQgcmVjZWl2ZWQgdGhlIFNwZWVjaFJlY29nbml0aW9uUmVzdWx0LlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUucmVjb2duaXplT25jZUFzeW5jID0gZnVuY3Rpb24gKGNiLCBlcnIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRTcGVlY2hSZWNvZ25pemVyKTtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RhcnQoRXhwb3J0c18xLlJlY29nbml0aW9uTW9kZS5JbnRlcmFjdGl2ZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pbXBsUmVjb2duaXplclN0b3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoISFjYikge1xuICAgICAgICAgICAgICAgICAgICBjYihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgICAgICBlcnIoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZWRFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBlcnIodHlwZWRFcnJvci5uYW1lICsgXCI6IFwiICsgdHlwZWRFcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRGVzdHJveSB0aGUgcmVjb2duaXplci5cbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHNwZWVjaCByZWNvZ25pdGlvbiwgdW50aWwgc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jKCkgaXMgY2FsbGVkLlxuICAgICAqIFVzZXIgbXVzdCBzdWJzY3JpYmUgdG8gZXZlbnRzIHRvIHJlY2VpdmUgcmVjb2duaXRpb24gcmVzdWx0cy5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLnN0YXJ0Q29udGludW91c1JlY29nbml0aW9uQXN5bmNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIGNiIC0gQ2FsbGJhY2sgaW52b2tlZCBvbmNlIHRoZSByZWNvZ25pdGlvbiBoYXMgc3RhcnRlZC5cbiAgICAgKiBAcGFyYW0gZXJyIC0gQ2FsbGJhY2sgaW52b2tlZCBpbiBjYXNlIG9mIGFuIGVycm9yLlxuICAgICAqL1xuICAgIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLnN0YXJ0Q29udGludW91c1JlY29nbml0aW9uQXN5bmMgPSBmdW5jdGlvbiAoY2IsIGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZEaXNwb3NlZCh0aGlzLnByaXZEaXNwb3NlZFNwZWVjaFJlY29nbml6ZXIpO1xuICAgICAgICAgICAgdGhpcy5pbXBsUmVjb2duaXplclN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdGFydChFeHBvcnRzXzEuUmVjb2duaXRpb25Nb2RlLkNvbnZlcnNhdGlvbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgLy8gcmVwb3J0IHJlc3VsdCB0byBwcm9taXNlLlxuICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGVycih0eXBlZEVycm9yLm5hbWUgKyBcIjogXCIgKyB0eXBlZEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdG9wcyBjb250aW51b3VzIHNwZWVjaCByZWNvZ25pdGlvbi5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLnN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0gY2IgLSBDYWxsYmFjayBpbnZva2VkIG9uY2UgdGhlIHJlY29nbml0aW9uIGhhcyBzdG9wcGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUuc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jID0gZnVuY3Rpb24gKGNiLCBlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRTcGVlY2hSZWNvZ25pemVyKTtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICBpZiAoISFjYikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyKGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCEhZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGVkRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgZXJyKHR5cGVkRXJyb3IubmFtZSArIFwiOiBcIiArIHR5cGVkRXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnIoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlc3Ryb3kgdGhlIHJlY29nbml6ZXIuXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBzcGVlY2ggcmVjb2duaXRpb24gd2l0aCBrZXl3b3JkIHNwb3R0aW5nLCB1bnRpbFxuICAgICAqIHN0b3BLZXl3b3JkUmVjb2duaXRpb25Bc3luYygpIGlzIGNhbGxlZC5cbiAgICAgKiBVc2VyIG11c3Qgc3Vic2NyaWJlIHRvIGV2ZW50cyB0byByZWNlaXZlIHJlY29nbml0aW9uIHJlc3VsdHMuXG4gICAgICogTm90ZTogS2V5IHdvcmQgc3BvdHRpbmcgZnVuY3Rpb25hbGl0eSBpcyBvbmx5IGF2YWlsYWJsZSBvbiB0aGVcbiAgICAgKiAgICAgIFNwZWVjaCBEZXZpY2VzIFNESy4gVGhpcyBmdW5jdGlvbmFsaXR5IGlzIGN1cnJlbnRseSBub3QgaW5jbHVkZWQgaW4gdGhlIFNESyBpdHNlbGYuXG4gICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5zdGFydEtleXdvcmRSZWNvZ25pdGlvbkFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7S2V5d29yZFJlY29nbml0aW9uTW9kZWx9IG1vZGVsIFRoZSBrZXl3b3JkIHJlY29nbml0aW9uIG1vZGVsIHRoYXRcbiAgICAgKiAgICAgICAgc3BlY2lmaWVzIHRoZSBrZXl3b3JkIHRvIGJlIHJlY29nbml6ZWQuXG4gICAgICogQHBhcmFtIGNiIC0gQ2FsbGJhY2sgaW52b2tlZCBvbmNlIHRoZSByZWNvZ25pdGlvbiBoYXMgc3RhcnRlZC5cbiAgICAgKiBAcGFyYW0gZXJyIC0gQ2FsbGJhY2sgaW52b2tlZCBpbiBjYXNlIG9mIGFuIGVycm9yLlxuICAgICAqL1xuICAgIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLnN0YXJ0S2V5d29yZFJlY29nbml0aW9uQXN5bmMgPSBmdW5jdGlvbiAobW9kZWwsIGNiLCBlcnIpIHtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsKG1vZGVsLCBcIm1vZGVsXCIpO1xuICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgIGVycihcIk5vdCB5ZXQgaW1wbGVtZW50ZWQuXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdG9wcyBjb250aW51b3VzIHNwZWVjaCByZWNvZ25pdGlvbi5cbiAgICAgKiBOb3RlOiBLZXkgd29yZCBzcG90dGluZyBmdW5jdGlvbmFsaXR5IGlzIG9ubHkgYXZhaWxhYmxlIG9uIHRoZVxuICAgICAqICAgICAgIFNwZWVjaCBEZXZpY2VzIFNESy4gVGhpcyBmdW5jdGlvbmFsaXR5IGlzIGN1cnJlbnRseSBub3QgaW5jbHVkZWQgaW4gdGhlIFNESyBpdHNlbGYuXG4gICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5zdG9wS2V5d29yZFJlY29nbml0aW9uQXN5bmNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIGNiIC0gQ2FsbGJhY2sgaW52b2tlZCBvbmNlIHRoZSByZWNvZ25pdGlvbiBoYXMgc3RvcHBlZC5cbiAgICAgKiBAcGFyYW0gZXJyIC0gQ2FsbGJhY2sgaW52b2tlZCBpbiBjYXNlIG9mIGFuIGVycm9yLlxuICAgICAqL1xuICAgIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLnN0b3BLZXl3b3JkUmVjb2duaXRpb25Bc3luYyA9IGZ1bmN0aW9uIChjYiwgZXJyKSB7XG4gICAgICAgIGlmICghIWNiKSB7XG4gICAgICAgICAgICBjYigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjbG9zZXMgYWxsIGV4dGVybmFsIHJlc291cmNlcyBoZWxkIGJ5IGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQG1lbWJlciBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5jbG9zZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZEaXNwb3NlZCh0aGlzLnByaXZEaXNwb3NlZFNwZWVjaFJlY29nbml6ZXIpO1xuICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEaXNwb3NlcyBhbnkgcmVzb3VyY2VzIGhlbGQgYnkgdGhlIG9iamVjdC5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLmRpc3Bvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtib29sZWFufSBkaXNwb3NpbmcgLSB0cnVlIGlmIGRpc3Bvc2luZyB0aGUgb2JqZWN0LlxuICAgICAqL1xuICAgIFNwZWVjaFJlY29nbml6ZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoZGlzcG9zaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZEaXNwb3NlZFNwZWVjaFJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzcG9zaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5wcml2RGlzcG9zZWRTcGVlY2hSZWNvZ25pemVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzLCBkaXNwb3NpbmcpO1xuICAgIH07XG4gICAgU3BlZWNoUmVjb2duaXplci5wcm90b3R5cGUuY3JlYXRlUmVjb2duaXplckNvbmZpZyA9IGZ1bmN0aW9uIChzcGVlY2hDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFeHBvcnRzXzEuUmVjb2duaXplckNvbmZpZyhzcGVlY2hDb25maWcsIHRoaXMucHJvcGVydGllcyk7XG4gICAgfTtcbiAgICBTcGVlY2hSZWNvZ25pemVyLnByb3RvdHlwZS5jcmVhdGVTZXJ2aWNlUmVjb2duaXplciA9IGZ1bmN0aW9uIChhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvQ29uZmlnLCByZWNvZ25pemVyQ29uZmlnKSB7XG4gICAgICAgIHZhciBjb25maWdJbXBsID0gYXVkaW9Db25maWc7XG4gICAgICAgIHJldHVybiBuZXcgRXhwb3J0c18xLlNwZWVjaFNlcnZpY2VSZWNvZ25pemVyKGF1dGhlbnRpY2F0aW9uLCBjb25uZWN0aW9uRmFjdG9yeSwgY29uZmlnSW1wbCwgcmVjb2duaXplckNvbmZpZywgdGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gU3BlZWNoUmVjb2duaXplcjtcbn0oRXhwb3J0c18yLlJlY29nbml6ZXIpKTtcbmV4cG9ydHMuU3BlZWNoUmVjb2duaXplciA9IFNwZWVjaFJlY29nbml6ZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwZWVjaFJlY29nbml6ZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi5zcGVlY2gvRXhwb3J0c1wiKTtcbnZhciBDb250cmFjdHNfMSA9IHJlcXVpcmUoXCIuL0NvbnRyYWN0c1wiKTtcbnZhciBFeHBvcnRzXzIgPSByZXF1aXJlKFwiLi9FeHBvcnRzXCIpO1xuLyoqXG4gKiBTcGVlY2ggdHJhbnNsYXRpb24gY29uZmlndXJhdGlvbi5cbiAqIEBjbGFzcyBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ1xuICovXG52YXIgU3BlZWNoVHJhbnNsYXRpb25Db25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgcmVjb2duaXplciBjb25maWcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3BlZWNoVHJhbnNsYXRpb25Db25maWcoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgaW5zdGFuY2Ugb2YgU3BlZWNoVHJhbnNsYXRpb25Db25maWcgcmV0dXJuZWQgYnkgcGFzc2luZyBhIHN1YnNjcmlwdGlvbiBrZXkgYW5kIHNlcnZpY2UgcmVnaW9uLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoVHJhbnNsYXRpb25Db25maWcuZnJvbVN1YnNjcmlwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3Vic2NyaXB0aW9uS2V5IC0gVGhlIHN1YnNjcmlwdGlvbiBrZXkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lvbiAtIFRoZSByZWdpb24gbmFtZSAoc2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9ha2EubXMvY3NzcGVlY2gvcmVnaW9uXCI+cmVnaW9uIHBhZ2U8L2E+KS5cbiAgICAgKiBAcmV0dXJucyB7U3BlZWNoVHJhbnNsYXRpb25Db25maWd9IFRoZSBzcGVlY2ggdHJhbnNsYXRpb24gY29uZmlnLlxuICAgICAqL1xuICAgIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnLmZyb21TdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uS2V5LCByZWdpb24pIHtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHN1YnNjcmlwdGlvbktleSwgXCJzdWJzY3JpcHRpb25LZXlcIik7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShyZWdpb24sIFwicmVnaW9uXCIpO1xuICAgICAgICB2YXIgcmV0ID0gbmV3IFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbCgpO1xuICAgICAgICByZXQucHJvcGVydGllcy5zZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXksIHN1YnNjcmlwdGlvbktleSk7XG4gICAgICAgIHJldC5wcm9wZXJ0aWVzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0YXRpYyBpbnN0YW5jZSBvZiBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZyByZXR1cm5lZCBieSBwYXNzaW5nIGF1dGhvcml6YXRpb24gdG9rZW4gYW5kIHNlcnZpY2UgcmVnaW9uLlxuICAgICAqIE5vdGU6IFRoZSBjYWxsZXIgbmVlZHMgdG8gZW5zdXJlIHRoYXQgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4gaXMgdmFsaWQuIEJlZm9yZSB0aGUgYXV0aG9yaXphdGlvbiB0b2tlblxuICAgICAqICAgICAgIGV4cGlyZXMsIHRoZSBjYWxsZXIgbmVlZHMgdG8gcmVmcmVzaCBpdCBieSBzZXR0aW5nIHRoZSBwcm9wZXJ0eSBhdXRob3JpemF0aW9uVG9rZW4gd2l0aCBhIG5ld1xuICAgICAqICAgICAgIHZhbGlkIHRva2VuLiBPdGhlcndpc2UsIGFsbCB0aGUgcmVjb2duaXplcnMgY3JlYXRlZCBieSB0aGlzIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnIGluc3RhbmNlXG4gICAgICogICAgICAgd2lsbCBlbmNvdW50ZXIgZXJyb3JzIGR1cmluZyByZWNvZ25pdGlvbi5cbiAgICAgKiBBcyBjb25maWd1cmF0aW9uIHZhbHVlcyBhcmUgY29waWVkIHdoZW4gY3JlYXRpbmcgYSBuZXcgcmVjb2duaXplciwgdGhlIG5ldyB0b2tlbiB2YWx1ZSB3aWxsIG5vdCBhcHBseVxuICAgICAqIHRvIHJlY29nbml6ZXJzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gY3JlYXRlZC5cbiAgICAgKiBGb3IgcmVjb2duaXplcnMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZCBiZWZvcmUsIHlvdSBuZWVkIHRvIHNldCBhdXRob3JpemF0aW9uIHRva2VuIG9mIHRoZSBjb3JyZXNwb25kaW5nIHJlY29nbml6ZXJcbiAgICAgKiB0byByZWZyZXNoIHRoZSB0b2tlbi4gT3RoZXJ3aXNlLCB0aGUgcmVjb2duaXplcnMgd2lsbCBlbmNvdW50ZXIgZXJyb3JzIGR1cmluZyByZWNvZ25pdGlvbi5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnLmZyb21BdXRob3JpemF0aW9uVG9rZW5cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGF1dGhvcml6YXRpb25Ub2tlbiAtIFRoZSBhdXRob3JpemF0aW9uIHRva2VuLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpb24gLSBUaGUgcmVnaW9uIG5hbWUgKHNlZSB0aGUgPGEgaHJlZj1cImh0dHBzOi8vYWthLm1zL2Nzc3BlZWNoL3JlZ2lvblwiPnJlZ2lvbiBwYWdlPC9hPikuXG4gICAgICogQHJldHVybnMge1NwZWVjaFRyYW5zbGF0aW9uQ29uZmlnfSBUaGUgc3BlZWNoIHRyYW5zbGF0aW9uIGNvbmZpZy5cbiAgICAgKi9cbiAgICBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZy5mcm9tQXV0aG9yaXphdGlvblRva2VuID0gZnVuY3Rpb24gKGF1dGhvcml6YXRpb25Ub2tlbiwgcmVnaW9uKSB7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShhdXRob3JpemF0aW9uVG9rZW4sIFwiYXV0aG9yaXphdGlvblRva2VuXCIpO1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UocmVnaW9uLCBcInJlZ2lvblwiKTtcbiAgICAgICAgdmFyIHJldCA9IG5ldyBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwoKTtcbiAgICAgICAgcmV0LnByb3BlcnRpZXMuc2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVG9rZW4sIGF1dGhvcml6YXRpb25Ub2tlbik7XG4gICAgICAgIHJldC5wcm9wZXJ0aWVzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlZ2lvbiwgcmVnaW9uKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIHNwZWVjaCB0cmFuc2xhdGlvbiBjb25maWcgd2l0aCBzcGVjaWZpZWQgZW5kcG9pbnQgYW5kIHN1YnNjcmlwdGlvbiBrZXkuXG4gICAgICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgb25seSBmb3IgdXNlcnMgd2hvIHVzZSBhIG5vbi1zdGFuZGFyZCBzZXJ2aWNlIGVuZHBvaW50IG9yIHBhcmFtdGVycy5cbiAgICAgKiBOb3RlOiBUaGUgcXVlcnkgcHJvcGVydGllcyBzcGVjaWZpZWQgaW4gdGhlIGVuZHBvaW50IFVSTCBhcmUgbm90IGNoYW5nZWQsIGV2ZW4gaWYgdGhleSBhcmVcbiAgICAgKiAgICAgICBzZXQgYnkgYW55IG90aGVyIEFQSXMuIEZvciBleGFtcGxlLCBpZiBsYW5ndWFnZSBpcyBkZWZpbmVkIGluIHRoZSB1cmkgYXMgcXVlcnkgcGFyYW1ldGVyXG4gICAgICogICAgICAgXCJsYW5ndWFnZT1kZS1ERVwiLCBhbmQgYWxzbyBzZXQgYnkgdGhlIHNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2UgcHJvcGVydHksIHRoZSBsYW5ndWFnZVxuICAgICAqICAgICAgIHNldHRpbmcgaW4gdXJpIHRha2VzIHByZWNlZGVuY2UsIGFuZCB0aGUgZWZmZWN0aXZlIGxhbmd1YWdlIGlzIFwiZGUtREVcIi5cbiAgICAgKiBPbmx5IHRoZSBwcm9wZXJ0aWVzIHRoYXQgYXJlIG5vdCBzcGVjaWZpZWQgaW4gdGhlIGVuZHBvaW50IFVSTCBjYW4gYmUgc2V0IGJ5IG90aGVyIEFQSXMuXG4gICAgICogTm90ZTogVG8gdXNlIGF1dGhvcml6YXRpb24gdG9rZW4gd2l0aCBmcm9tRW5kcG9pbnQsIHBhc3MgYW4gZW1wdHkgc3RyaW5nIHRvIHRoZSBzdWJzY3JpcHRpb25LZXkgaW4gdGhlXG4gICAgICogICAgICAgZnJvbUVuZHBvaW50IG1ldGhvZCwgYW5kIHRoZW4gc2V0IGF1dGhvcml6YXRpb25Ub2tlbj1cInRva2VuXCIgb24gdGhlIGNyZWF0ZWQgU3BlZWNoQ29uZmlnIGluc3RhbmNlIHRvXG4gICAgICogICAgICAgdXNlIHRoZSBhdXRob3JpemF0aW9uIHRva2VuLlxuICAgICAqIEBtZW1iZXIgU3BlZWNoVHJhbnNsYXRpb25Db25maWcuZnJvbUVuZHBvaW50XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7VVJMfSBlbmRwb2ludCAtIFRoZSBzZXJ2aWNlIGVuZHBvaW50IHRvIGNvbm5lY3QgdG8uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN1YnNjcmlwdGlvbktleSAtIFRoZSBzdWJzY3JpcHRpb24ga2V5LlxuICAgICAqIEByZXR1cm5zIHtTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ30gQSBzcGVlY2ggY29uZmlnIGluc3RhbmNlLlxuICAgICAqL1xuICAgIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnLmZyb21FbmRwb2ludCA9IGZ1bmN0aW9uIChlbmRwb2ludCwgc3Vic2NyaXB0aW9uS2V5KSB7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbChlbmRwb2ludCwgXCJlbmRwb2ludFwiKTtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsKHN1YnNjcmlwdGlvbktleSwgXCJzdWJzY3JpcHRpb25LZXlcIik7XG4gICAgICAgIHZhciByZXQgPSBuZXcgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsKCk7XG4gICAgICAgIHJldC5wcm9wZXJ0aWVzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuZHBvaW50LCBlbmRwb2ludC5ocmVmKTtcbiAgICAgICAgcmV0LnByb3BlcnRpZXMuc2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fS2V5LCBzdWJzY3JpcHRpb25LZXkpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gICAgcmV0dXJuIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnO1xufShFeHBvcnRzXzIuU3BlZWNoQ29uZmlnKSk7XG5leHBvcnRzLlNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnID0gU3BlZWNoVHJhbnNsYXRpb25Db25maWc7XG4vKipcbiAqIEBwcml2YXRlXG4gKiBAY2xhc3MgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxudmFyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMgPSBuZXcgRXhwb3J0c18yLlByb3BlcnR5Q29sbGVjdGlvbigpO1xuICAgICAgICBfdGhpcy5vdXRwdXRGb3JtYXQgPSBFeHBvcnRzXzIuT3V0cHV0Rm9ybWF0LlNpbXBsZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZSwgXCJhdXRob3JpemF0aW9uVG9rZW5cIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cy9TZXRzIHRoZSBhdXRob3JpemF0aW9uIHRva2VuLlxuICAgICAgICAgKiBJZiB0aGlzIGlzIHNldCwgc3Vic2NyaXB0aW9uIGtleSBpcyBpZ25vcmVkLlxuICAgICAgICAgKiBVc2VyIG5lZWRzIHRvIG1ha2Ugc3VyZSB0aGUgcHJvdmlkZWQgYXV0aG9yaXphdGlvbiB0b2tlbiBpcyB2YWxpZCBhbmQgbm90IGV4cGlyZWQuXG4gICAgICAgICAqIEBtZW1iZXIgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZS5hdXRob3JpemF0aW9uVG9rZW5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIGF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKHZhbHVlLCBcInZhbHVlXCIpO1xuICAgICAgICAgICAgdGhpcy5wcml2U3BlZWNoUHJvcGVydGllcy5zZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlbiwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZSwgXCJzcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMvU2V0cyB0aGUgc3BlZWNoIHJlY29nbml0aW9uIGxhbmd1YWdlLlxuICAgICAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZVxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgYXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGxPcldoaXRlc3BhY2UodmFsdWUsIFwidmFsdWVcIik7XG4gICAgICAgICAgICB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZSwgXCJzdWJzY3JpcHRpb25LZXlcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLnN1YnNjcmlwdGlvbktleVxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U3BlZWNoUHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZFtFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9LZXldKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwib3V0cHV0Rm9ybWF0XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIG91dHB1dCBmb3JtYXRcbiAgICAgICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLm91dHB1dEZvcm1hdFxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gRXhwb3J0c18yLk91dHB1dEZvcm1hdFt0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLmdldFByb3BlcnR5KEV4cG9ydHNfMS5PdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUsIHVuZGVmaW5lZCldO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cy9TZXRzIHRoZSBvdXRwdXQgZm9ybWF0XG4gICAgICAgICAqIEBtZW1iZXIgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZS5vdXRwdXRGb3JtYXRcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLnNldFByb3BlcnR5KEV4cG9ydHNfMS5PdXRwdXRGb3JtYXRQcm9wZXJ0eU5hbWUsIEV4cG9ydHNfMi5PdXRwdXRGb3JtYXRbdmFsdWVdKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwiZW5kcG9pbnRJZFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBlbmRwb2ludCBpZC5cbiAgICAgICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLmVuZHBvaW50SWRcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnRJZCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzL1NldHMgdGhlIGVuZHBvaW50IGlkLlxuICAgICAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUuZW5kcG9pbnRJZFxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuc2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnQsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQWRkIGEgKHRleHQpIHRhcmdldCBsYW5ndWFnZSB0byB0cmFuc2xhdGUgaW50by5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUuYWRkVGFyZ2V0TGFuZ3VhZ2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIGxhbmd1YWdlIHN1Y2ggYXMgZGUtREVcbiAgICAgKi9cbiAgICBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLmFkZFRhcmdldExhbmd1YWdlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZSh2YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgdmFyIGxhbmd1YWdlcyA9IHRoaXMudGFyZ2V0TGFuZ3VhZ2VzO1xuICAgICAgICBsYW5ndWFnZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuc2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Ub0xhbmd1YWdlcywgbGFuZ3VhZ2VzLmpvaW4oXCIsXCIpKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLCBcInRhcmdldExhbmd1YWdlc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSAodGV4dCkgdGFyZ2V0IGxhbmd1YWdlIHRvIHRyYW5zbGF0ZSBpbnRvLlxuICAgICAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUudGFyZ2V0TGFuZ3VhZ2VzXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBsYW5ndWFnZSBzdWNoIGFzIGRlLURFXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLmdldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVG9MYW5ndWFnZXMsIHVuZGVmaW5lZCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZTcGVlY2hQcm9wZXJ0aWVzLmdldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVG9MYW5ndWFnZXMpLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwidm9pY2VOYW1lXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHZvaWNlIG5hbWUuXG4gICAgICAgICAqIEBtZW1iZXIgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZS52b2ljZU5hbWVcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWRbRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Wb2ljZV0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cy9TZXRzIHRoZSB2b2ljZSBvZiB0aGUgdHJhbnNsYXRlZCBsYW5ndWFnZSwgZW5hYmxlIHZvaWNlIHN5bnRoZXNpcyBvdXRwdXQuXG4gICAgICAgICAqIEBtZW1iZXIgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZS52b2ljZU5hbWVcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIG5hbWUgb2YgdGhlIHZvaWNlLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZSh2YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgICAgIHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuc2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Wb2ljZSwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZSwgXCJyZWdpb25cIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvdmlkZXMgdGhlIHJlZ2lvbi5cbiAgICAgICAgICogQG1lbWJlciBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLnJlZ2lvblxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcmVnaW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U3BlZWNoUHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9SZWdpb24pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLnNldFByb3h5ID0gZnVuY3Rpb24gKHByb3h5SG9zdE5hbWUsIHByb3h5UG9ydCwgcHJveHlVc2VyTmFtZSwgcHJveHlQYXNzd29yZCkge1xuICAgICAgICB0aGlzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkW0V4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5SG9zdE5hbWVdLCBwcm94eUhvc3ROYW1lKTtcbiAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZFtFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBvcnRdLCBwcm94eVBvcnQpO1xuICAgICAgICB0aGlzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkW0V4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1Byb3h5VXNlck5hbWVdLCBwcm94eVVzZXJOYW1lKTtcbiAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZFtFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9Qcm94eVBhc3N3b3JkXSwgcHJveHlQYXNzd29yZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIGFyYml0cmFyeSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUuZ2V0UHJvcGVydHlcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRlZiAtIFRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBpbiBjYXNlIGl0IGlzIG5vdCBzZXQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLmdldFByb3BlcnR5ID0gZnVuY3Rpb24gKG5hbWUsIGRlZikge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2U3BlZWNoUHJvcGVydGllcy5nZXRQcm9wZXJ0eShuYW1lLCBkZWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIGFuIGFyYml0cmFyeSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUuc2V0UHJvcGVydHlcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBTcGVlY2hUcmFuc2xhdGlvbkNvbmZpZ0ltcGwucHJvdG90eXBlLnNldFByb3BlcnR5ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJpdlNwZWVjaFByb3BlcnRpZXMuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUsIFwicHJvcGVydGllc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm92aWRlcyBhY2Nlc3MgdG8gY3VzdG9tIHByb3BlcnRpZXMuXG4gICAgICAgICAqIEBtZW1iZXIgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZS5wcm9wZXJ0aWVzXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtQcm9wZXJ0eUNvbGxlY3Rpb259IFRoZSBwcm9wZXJ0aWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2U3BlZWNoUHJvcGVydGllcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogRGlzcG9zZSBvZiBhc3NvY2lhdGVkIHJlc291cmNlcy5cbiAgICAgKiBAbWVtYmVyIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbC5wcm90b3R5cGUuY2xvc2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH07XG4gICAgcmV0dXJuIFNwZWVjaFRyYW5zbGF0aW9uQ29uZmlnSW1wbDtcbn0oU3BlZWNoVHJhbnNsYXRpb25Db25maWcpKTtcbmV4cG9ydHMuU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsID0gU3BlZWNoVHJhbnNsYXRpb25Db25maWdJbXBsO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGVlY2hUcmFuc2xhdGlvbkNvbmZpZy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIERlZmluZSBwYXlsb2FkIG9mIHNwZWVjaCByZWNvZ25pdGlvbiBjYW5jZWxlZCByZXN1bHQgZXZlbnRzLlxuICogQGNsYXNzIFRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJnc1xuICovXG52YXIgVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlc3Npb25pZCAtIFRoZSBzZXNzaW9uIGlkLlxuICAgICAqIEBwYXJhbSB7Q2FuY2VsbGF0aW9uUmVhc29ufSBjYW5jZWxsYXRpb25SZWFzb24gLSBUaGUgY2FuY2VsbGF0aW9uIHJlYXNvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JEZXRhaWxzIC0gRXJyb3IgZGV0YWlscywgaWYgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtUcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0fSByZXN1bHQgLSBUaGUgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncyhzZXNzaW9uaWQsIGNhbmNlbGxhdGlvblJlYXNvbiwgZXJyb3JEZXRhaWxzLCBlcnJvckNvZGUsIHJlc3VsdCkge1xuICAgICAgICB0aGlzLnByaXZDYW5jZWxSZWFzb24gPSBjYW5jZWxsYXRpb25SZWFzb247XG4gICAgICAgIHRoaXMucHJpdkVycm9yRGV0YWlscyA9IGVycm9yRGV0YWlscztcbiAgICAgICAgdGhpcy5wcml2UmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICB0aGlzLnByaXZTZXNzaW9uSWQgPSBzZXNzaW9uaWQ7XG4gICAgICAgIHRoaXMucHJpdkVycm9yQ29kZSA9IGVycm9yQ29kZTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUsIFwicmVzdWx0XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGUgcmVjb2duaXRpb24gcmVzdWx0LlxuICAgICAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUucmVzdWx0XG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtUcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0fSB0aGUgcmVjb2duaXRpb24gcmVzdWx0LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2UmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLnByb3RvdHlwZSwgXCJzZXNzaW9uSWRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHRoZSBzZXNzaW9uIGlkZW50aWZpZXIuXG4gICAgICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLnByb3RvdHlwZS5zZXNzaW9uSWRcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHNlc3Npb24gaWRlbnRpZmllci5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlNlc3Npb25JZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUsIFwicmVhc29uXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByZWFzb24gdGhlIHJlY29nbml0aW9uIHdhcyBjYW5jZWxlZC5cbiAgICAgICAgICogQG1lbWJlciBUcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MucHJvdG90eXBlLnJlYXNvblxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7Q2FuY2VsbGF0aW9uUmVhc29ufSBTcGVjaWZpZXMgdGhlIHJlYXNvbiBjYW5jZWxlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdkNhbmNlbFJlYXNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zbGF0aW9uUmVjb2duaXRpb25DYW5jZWxlZEV2ZW50QXJncy5wcm90b3R5cGUsIFwiZXJyb3JDb2RlXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBlcnJvciBjb2RlIGluIGNhc2Ugb2YgYW4gdW5zdWNjZXNzZnVsIHJlY29nbml0aW9uLlxuICAgICAgICAgKiBBZGRlZCBpbiB2ZXJzaW9uIDEuMS4wLlxuICAgICAgICAgKiBAcmV0dXJuIEFuIGVycm9yIGNvZGUgdGhhdCByZXByZXNlbnRzIHRoZSBlcnJvciByZWFzb24uXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZFcnJvckNvZGU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MucHJvdG90eXBlLCBcImVycm9yRGV0YWlsc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbiBjYXNlIG9mIGFuIHVuc3VjY2Vzc2Z1bCByZWNvZ25pdGlvbiwgcHJvdmlkZXMgZGV0YWlscyBvZiB0aGUgb2NjdXJyZWQgZXJyb3IuXG4gICAgICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzLnByb3RvdHlwZS5lcnJvckRldGFpbHNcbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gQSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBlcnJvciBkZXRhaWxzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2RXJyb3JEZXRhaWxzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzO1xufSgpKTtcbmV4cG9ydHMuVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzID0gVHJhbnNsYXRpb25SZWNvZ25pdGlvbkNhbmNlbGVkRXZlbnRBcmdzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvblJlY29nbml0aW9uQ2FuY2VsZWRFdmVudEFyZ3MuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXhwb3J0c18xID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8qKlxuICogVHJhbnNsYXRpb24gdGV4dCByZXN1bHQgZXZlbnQgYXJndW1lbnRzLlxuICogQGNsYXNzIFRyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3NcbiAqL1xudmFyIFRyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3MsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1RyYW5zbGF0aW9uUmVjb2duaXRpb25SZXN1bHR9IHJlc3VsdCAtIFRoZSB0cmFuc2xhdGlvbiByZWNvZ25pdGlvbiByZXN1bHQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIFRoZSBvZmZzZXQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlc3Npb25JZCAtIFRoZSBzZXNzaW9uIGlkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFRyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3MocmVzdWx0LCBvZmZzZXQsIHNlc3Npb25JZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvZmZzZXQsIHNlc3Npb25JZCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJpdlJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25SZWNvZ25pdGlvbkV2ZW50QXJncy5wcm90b3R5cGUsIFwicmVzdWx0XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGUgcmVjb2duaXRpb24gcmVzdWx0LlxuICAgICAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3MucHJvdG90eXBlLnJlc3VsdFxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7VHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdH0gdGhlIHJlY29nbml0aW9uIHJlc3VsdC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFRyYW5zbGF0aW9uUmVjb2duaXRpb25FdmVudEFyZ3M7XG59KEV4cG9ydHNfMS5SZWNvZ25pdGlvbkV2ZW50QXJncykpO1xuZXhwb3J0cy5UcmFuc2xhdGlvblJlY29nbml0aW9uRXZlbnRBcmdzID0gVHJhbnNsYXRpb25SZWNvZ25pdGlvbkV2ZW50QXJncztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRpb25SZWNvZ25pdGlvbkV2ZW50QXJncy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi9FeHBvcnRzXCIpO1xuLyoqXG4gKiBUcmFuc2xhdGlvbiB0ZXh0IHJlc3VsdC5cbiAqIEBjbGFzcyBUcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0XG4gKi9cbnZhciBUcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtUcmFuc2xhdGlvbnN9IHRyYW5zbGF0aW9ucyAtIFRoZSB0cmFuc2xhdGlvbnMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlc3VsdElkIC0gVGhlIHJlc3VsdCBpZC5cbiAgICAgKiBAcGFyYW0ge1Jlc3VsdFJlYXNvbn0gcmVhc29uIC0gVGhlIHJlYXNvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSByZWNvZ25pemVkIHRleHQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGR1cmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IGludG8gdGhlIHN0cmVhbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JEZXRhaWxzIC0gRXJyb3IgZGV0YWlscywgaWYgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGpzb24gLSBBZGRpdGlvbmFsIEpzb24sIGlmIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlDb2xsZWN0aW9ufSBwcm9wZXJ0aWVzIC0gQWRkaXRpb25hbCBwcm9wZXJ0aWVzLCBpZiBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBUcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0KHRyYW5zbGF0aW9ucywgcmVzdWx0SWQsIHJlYXNvbiwgdGV4dCwgZHVyYXRpb24sIG9mZnNldCwgZXJyb3JEZXRhaWxzLCBqc29uLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHJlc3VsdElkLCByZWFzb24sIHRleHQsIGR1cmF0aW9uLCBvZmZzZXQsIGVycm9yRGV0YWlscywganNvbiwgcHJvcGVydGllcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJpdlRyYW5zbGF0aW9ucyA9IHRyYW5zbGF0aW9ucztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdC5wcm90b3R5cGUsIFwidHJhbnNsYXRpb25zXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByZXNlbnRzIHRoZSB0cmFuc2xhdGlvbiByZXN1bHRzLiBFYWNoIGl0ZW0gaW4gdGhlIGRpY3Rpb25hcnkgcmVwcmVzZW50c1xuICAgICAgICAgKiBhIHRyYW5zbGF0aW9uIHJlc3VsdCBpbiBvbmUgb2YgdGFyZ2V0IGxhbmd1YWdlcywgd2hlcmUgdGhlIGtleSBpcyB0aGUgbmFtZVxuICAgICAgICAgKiBvZiB0aGUgdGFyZ2V0IGxhbmd1YWdlLCBpbiBCQ1AtNDcgZm9ybWF0LCBhbmQgdGhlIHZhbHVlIGlzIHRoZSB0cmFuc2xhdGlvblxuICAgICAgICAgKiB0ZXh0IGluIHRoZSBzcGVjaWZpZWQgbGFuZ3VhZ2UuXG4gICAgICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdC5wcm90b3R5cGUudHJhbnNsYXRpb25zXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtUcmFuc2xhdGlvbnN9IHRoZSBjdXJyZW50IHRyYW5zbGF0aW9uIG1hcCB0aGF0IGhvbGRzIGFsbCB0cmFuc2xhdGlvbnMgcmVxdWVzdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2VHJhbnNsYXRpb25zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gVHJhbnNsYXRpb25SZWNvZ25pdGlvblJlc3VsdDtcbn0oRXhwb3J0c18xLlNwZWVjaFJlY29nbml0aW9uUmVzdWx0KSk7XG5leHBvcnRzLlRyYW5zbGF0aW9uUmVjb2duaXRpb25SZXN1bHQgPSBUcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvblJlY29nbml0aW9uUmVzdWx0LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24uc3BlZWNoL0V4cG9ydHNcIik7XG52YXIgQ29udHJhY3RzXzEgPSByZXF1aXJlKFwiLi9Db250cmFjdHNcIik7XG52YXIgRXhwb3J0c18yID0gcmVxdWlyZShcIi4vRXhwb3J0c1wiKTtcbi8qKlxuICogVHJhbnNsYXRpb24gcmVjb2duaXplclxuICogQGNsYXNzIFRyYW5zbGF0aW9uUmVjb2duaXplclxuICovXG52YXIgVHJhbnNsYXRpb25SZWNvZ25pemVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUcmFuc2xhdGlvblJlY29nbml6ZXIsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIFRyYW5zbGF0aW9uUmVjb2duaXplci5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1NwZWVjaFRyYW5zbGF0aW9uQ29uZmlnfSBzcGVlY2hDb25maWcgLSBTZXQgb2YgcHJvcGVydGllcyB0byBjb25maWd1cmUgdGhpcyByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7QXVkaW9Db25maWd9IGF1ZGlvQ29uZmlnIC0gQW4gb3B0aW9uYWwgYXVkaW8gY29uZmlnIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVjb2duaXplclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFRyYW5zbGF0aW9uUmVjb2duaXplcihzcGVlY2hDb25maWcsIGF1ZGlvQ29uZmlnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBjb25maWdJbXBsID0gc3BlZWNoQ29uZmlnO1xuICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZk51bGwoY29uZmlnSW1wbCwgXCJzcGVlY2hDb25maWdcIik7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYXVkaW9Db25maWcsIGNvbmZpZ0ltcGwucHJvcGVydGllcywgbmV3IEV4cG9ydHNfMS5UcmFuc2xhdGlvbkNvbm5lY3Rpb25GYWN0b3J5KCkpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByaXZEaXNwb3NlZFRyYW5zbGF0aW9uUmVjb2duaXplciA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5wcml2UHJvcGVydGllcyA9IGNvbmZpZ0ltcGwucHJvcGVydGllcy5jbG9uZSgpO1xuICAgICAgICBpZiAoX3RoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblZvaWNlLCB1bmRlZmluZWQpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmTnVsbE9yV2hpdGVzcGFjZShfdGhpcy5wcm9wZXJ0aWVzLmdldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVm9pY2UpLCBFeHBvcnRzXzIuUHJvcGVydHlJZFtFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblZvaWNlXSk7XG4gICAgICAgIH1cbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKF90aGlzLnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fVHJhbnNsYXRpb25Ub0xhbmd1YWdlcyksIEV4cG9ydHNfMi5Qcm9wZXJ0eUlkW0V4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1RyYW5zbGF0aW9uVG9MYW5ndWFnZXNdKTtcbiAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZOdWxsT3JXaGl0ZXNwYWNlKF90aGlzLnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlKSwgRXhwb3J0c18yLlByb3BlcnR5SWRbRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlXSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUsIFwic3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBsYW5ndWFnZSBuYW1lIHRoYXQgd2FzIHNldCB3aGVuIHRoZSByZWNvZ25pemVyIHdhcyBjcmVhdGVkLlxuICAgICAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZVxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBHZXRzIHRoZSBsYW5ndWFnZSBuYW1lIHRoYXQgd2FzIHNldCB3aGVuIHRoZSByZWNvZ25pemVyIHdhcyBjcmVhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBDb250cmFjdHNfMS5Db250cmFjdHMudGhyb3dJZkRpc3Bvc2VkKHRoaXMucHJpdkRpc3Bvc2VkVHJhbnNsYXRpb25SZWNvZ25pemVyKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMuZ2V0UHJvcGVydHkoRXhwb3J0c18yLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fUmVjb0xhbmd1YWdlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUsIFwidGFyZ2V0TGFuZ3VhZ2VzXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGFyZ2V0IGxhbmd1YWdlcyBmb3IgdHJhbnNsYXRpb24gdGhhdCB3ZXJlIHNldCB3aGVuIHRoZSByZWNvZ25pemVyIHdhcyBjcmVhdGVkLlxuICAgICAgICAgKiBUaGUgbGFuZ3VhZ2UgaXMgc3BlY2lmaWVkIGluIEJDUC00NyBmb3JtYXQuIFRoZSB0cmFuc2xhdGlvbiB3aWxsIHByb3ZpZGUgdHJhbnNsYXRlZCB0ZXh0IGZvciBlYWNoIG9mIGxhbmd1YWdlLlxuICAgICAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUudGFyZ2V0TGFuZ3VhZ2VzXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmdbXX0gR2V0cyB0YXJnZXQgbGFuZ3VhZ2VzIGZvciB0cmFuc2xhdGlvbiB0aGF0IHdlcmUgc2V0IHdoZW4gdGhlIHJlY29nbml6ZXIgd2FzIGNyZWF0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRUcmFuc2xhdGlvblJlY29nbml6ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblRvTGFuZ3VhZ2VzKS5zcGxpdChcIixcIik7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2xhdGlvblJlY29nbml6ZXIucHJvdG90eXBlLCBcInZvaWNlTmFtZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIG91dHB1dCB2b2ljZS5cbiAgICAgICAgICogQG1lbWJlciBUcmFuc2xhdGlvblJlY29nbml6ZXIucHJvdG90eXBlLnZvaWNlTmFtZVxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgbmFtZSBvZiBvdXRwdXQgdm9pY2UuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRUcmFuc2xhdGlvblJlY29nbml6ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9UcmFuc2xhdGlvblZvaWNlLCB1bmRlZmluZWQpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25SZWNvZ25pemVyLnByb3RvdHlwZSwgXCJhdXRob3JpemF0aW9uVG9rZW5cIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgYXV0aG9yaXphdGlvbiB0b2tlbiB1c2VkIHRvIGNvbW11bmljYXRlIHdpdGggdGhlIHNlcnZpY2UuXG4gICAgICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25SZWNvZ25pemVyLnByb3RvdHlwZS5hdXRob3JpemF0aW9uVG9rZW5cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gQXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5nZXRQcm9wZXJ0eShFeHBvcnRzXzIuUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlbik7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzL1NldHMgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4gdXNlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUuYXV0aG9yaXphdGlvblRva2VuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIEF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnNldFByb3BlcnR5KEV4cG9ydHNfMi5Qcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VBdXRob3JpemF0aW9uX1Rva2VuLCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2xhdGlvblJlY29nbml6ZXIucHJvdG90eXBlLCBcInByb3BlcnRpZXNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbGxlY3Rpb24gb2YgcHJvcGVydGllcyBhbmQgdGhlaXIgdmFsdWVzIGRlZmluZWQgZm9yIHRoaXMgVHJhbnNsYXRpb25SZWNvZ25pemVyLlxuICAgICAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUucHJvcGVydGllc1xuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7UHJvcGVydHlDb2xsZWN0aW9ufSBUaGUgY29sbGVjdGlvbiBvZiBwcm9wZXJ0aWVzIGFuZCB0aGVpciB2YWx1ZXMgZGVmaW5lZCBmb3IgdGhpcyBUcmFuc2xhdGlvblJlY29nbml6ZXIuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZQcm9wZXJ0aWVzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBTdGFydHMgcmVjb2duaXRpb24gYW5kIHRyYW5zbGF0aW9uLCBhbmQgc3RvcHMgYWZ0ZXIgdGhlIGZpcnN0IHV0dGVyYW5jZSBpcyByZWNvZ25pemVkLlxuICAgICAqIFRoZSB0YXNrIHJldHVybnMgdGhlIHRyYW5zbGF0aW9uIHRleHQgYXMgcmVzdWx0LlxuICAgICAqIE5vdGU6IHJlY29nbml6ZU9uY2VBc3luYyByZXR1cm5zIHdoZW4gdGhlIGZpcnN0IHV0dGVyYW5jZSBoYXMgYmVlbiByZWNvZ25pemVkLCBzbyBpdCBpcyBzdWl0YWJsZW9ubHlcbiAgICAgKiAgICAgICBmb3Igc2luZ2xlIHNob3QgcmVjb2duaXRpb24gbGlrZSBjb21tYW5kIG9yIHF1ZXJ5LiBGb3IgbG9uZy1ydW5uaW5nIHJlY29nbml0aW9uLFxuICAgICAqICAgICAgIHVzZSBzdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jKCkgaW5zdGVhZC5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUucmVjb2duaXplT25jZUFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIHRoYXQgcmVjZWl2ZWQgdGhlIHJlc3VsdCB3aGVuIHRoZSB0cmFuc2xhdGlvbiBoYXMgY29tcGxldGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgVHJhbnNsYXRpb25SZWNvZ25pemVyLnByb3RvdHlwZS5yZWNvZ25pemVPbmNlQXN5bmMgPSBmdW5jdGlvbiAoY2IsIGVycikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZEaXNwb3NlZCh0aGlzLnByaXZEaXNwb3NlZFRyYW5zbGF0aW9uUmVjb2duaXplcik7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5pbXBsUmVjb2duaXplclN0YXJ0KEV4cG9ydHNfMS5SZWNvZ25pdGlvbk1vZGUuQ29udmVyc2F0aW9uLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgICAgIGlmICghIWNiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICAgICAgaWYgKCEhZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGVycih0eXBlZEVycm9yLm5hbWUgKyBcIjogXCIgKyB0eXBlZEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdGFydHMgcmVjb2duaXRpb24gYW5kIHRyYW5zbGF0aW9uLCB1bnRpbCBzdG9wQ29udGludW91c1JlY29nbml0aW9uQXN5bmMoKSBpcyBjYWxsZWQuXG4gICAgICogVXNlciBtdXN0IHN1YnNjcmliZSB0byBldmVudHMgdG8gcmVjZWl2ZSB0cmFuc2xhdGlvbiByZXN1bHRzLlxuICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25SZWNvZ25pemVyLnByb3RvdHlwZS5zdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIHRoYXQgcmVjZWl2ZWQgdGhlIHRyYW5zbGF0aW9uIGhhcyBzdGFydGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgVHJhbnNsYXRpb25SZWNvZ25pemVyLnByb3RvdHlwZS5zdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jID0gZnVuY3Rpb24gKGNiLCBlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRUcmFuc2xhdGlvblJlY29nbml6ZXIpO1xuICAgICAgICAgICAgdGhpcy5pbXBsUmVjb2duaXplclN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdGFydChFeHBvcnRzXzEuUmVjb2duaXRpb25Nb2RlLkNvbnZlcnNhdGlvbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgLy8gcmVwb3J0IHJlc3VsdCB0byBwcm9taXNlLlxuICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGVycih0eXBlZEVycm9yLm5hbWUgKyBcIjogXCIgKyB0eXBlZEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdG9wcyBjb250aW51b3VzIHJlY29nbml0aW9uIGFuZCB0cmFuc2xhdGlvbi5cbiAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUuc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSBjYiAtIENhbGxiYWNrIHRoYXQgcmVjZWl2ZWQgdGhlIHRyYW5zbGF0aW9uIGhhcyBzdG9wcGVkLlxuICAgICAqIEBwYXJhbSBlcnIgLSBDYWxsYmFjayBpbnZva2VkIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gICAgICovXG4gICAgVHJhbnNsYXRpb25SZWNvZ25pemVyLnByb3RvdHlwZS5zdG9wQ29udGludW91c1JlY29nbml0aW9uQXN5bmMgPSBmdW5jdGlvbiAoY2IsIGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgQ29udHJhY3RzXzEuQ29udHJhY3RzLnRocm93SWZEaXNwb3NlZCh0aGlzLnByaXZEaXNwb3NlZFRyYW5zbGF0aW9uUmVjb2duaXplcik7XG4gICAgICAgICAgICB0aGlzLmltcGxSZWNvZ25pemVyU3RvcCgpO1xuICAgICAgICAgICAgaWYgKCEhY2IpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjYigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghIWVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGVycih0eXBlZEVycm9yLm5hbWUgKyBcIjogXCIgKyB0eXBlZEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBjbG9zZXMgYWxsIGV4dGVybmFsIHJlc291cmNlcyBoZWxkIGJ5IGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvblJlY29nbml6ZXIucHJvdG90eXBlLmNsb3NlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIFRyYW5zbGF0aW9uUmVjb2duaXplci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIENvbnRyYWN0c18xLkNvbnRyYWN0cy50aHJvd0lmRGlzcG9zZWQodGhpcy5wcml2RGlzcG9zZWRUcmFuc2xhdGlvblJlY29nbml6ZXIpO1xuICAgICAgICB0aGlzLmRpc3Bvc2UodHJ1ZSk7XG4gICAgfTtcbiAgICBUcmFuc2xhdGlvblJlY29nbml6ZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoZGlzcG9zaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLnByaXZEaXNwb3NlZFRyYW5zbGF0aW9uUmVjb2duaXplcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwb3NpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuaW1wbFJlY29nbml6ZXJTdG9wKCk7XG4gICAgICAgICAgICB0aGlzLnByaXZEaXNwb3NlZFRyYW5zbGF0aW9uUmVjb2duaXplciA9IHRydWU7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzLCBkaXNwb3NpbmcpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUcmFuc2xhdGlvblJlY29nbml6ZXIucHJvdG90eXBlLmNyZWF0ZVJlY29nbml6ZXJDb25maWcgPSBmdW5jdGlvbiAoc3BlZWNoQ29uZmlnKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXhwb3J0c18xLlJlY29nbml6ZXJDb25maWcoc3BlZWNoQ29uZmlnLCB0aGlzLnByb3BlcnRpZXMpO1xuICAgIH07XG4gICAgVHJhbnNsYXRpb25SZWNvZ25pemVyLnByb3RvdHlwZS5jcmVhdGVTZXJ2aWNlUmVjb2duaXplciA9IGZ1bmN0aW9uIChhdXRoZW50aWNhdGlvbiwgY29ubmVjdGlvbkZhY3RvcnksIGF1ZGlvQ29uZmlnLCByZWNvZ25pemVyQ29uZmlnKSB7XG4gICAgICAgIHZhciBjb25maWdJbXBsID0gYXVkaW9Db25maWc7XG4gICAgICAgIHJldHVybiBuZXcgRXhwb3J0c18xLlRyYW5zbGF0aW9uU2VydmljZVJlY29nbml6ZXIoYXV0aGVudGljYXRpb24sIGNvbm5lY3Rpb25GYWN0b3J5LCBjb25maWdJbXBsLCByZWNvZ25pemVyQ29uZmlnLCB0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBUcmFuc2xhdGlvblJlY29nbml6ZXI7XG59KEV4cG9ydHNfMi5SZWNvZ25pemVyKSk7XG5leHBvcnRzLlRyYW5zbGF0aW9uUmVjb2duaXplciA9IFRyYW5zbGF0aW9uUmVjb2duaXplcjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRpb25SZWNvZ25pemVyLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV4cG9ydHNfMSA9IHJlcXVpcmUoXCIuL0V4cG9ydHNcIik7XG4vKipcbiAqIFRyYW5zbGF0aW9uIFN5bnRoZXNpcyBldmVudCBhcmd1bWVudHNcbiAqIEBjbGFzcyBUcmFuc2xhdGlvblN5bnRoZXNpc0V2ZW50QXJnc1xuICovXG52YXIgVHJhbnNsYXRpb25TeW50aGVzaXNFdmVudEFyZ3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRyYW5zbGF0aW9uU3ludGhlc2lzRXZlbnRBcmdzLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtUcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdH0gcmVzdWx0IC0gVGhlIHRyYW5zbGF0aW9uIHN5bnRoZXNpcyByZXN1bHQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlc3Npb25JZCAtIFRoZSBzZXNzaW9uIGlkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFRyYW5zbGF0aW9uU3ludGhlc2lzRXZlbnRBcmdzKHJlc3VsdCwgc2Vzc2lvbklkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNlc3Npb25JZCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJpdlJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNsYXRpb25TeW50aGVzaXNFdmVudEFyZ3MucHJvdG90eXBlLCBcInJlc3VsdFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpZXMgdGhlIHRyYW5zbGF0aW9uIHN5bnRoZXNpcyByZXN1bHQuXG4gICAgICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25TeW50aGVzaXNFdmVudEFyZ3MucHJvdG90eXBlLnJlc3VsdFxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKiBAcmV0dXJucyB7VHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHR9IFNwZWNpZmllcyB0aGUgdHJhbnNsYXRpb24gc3ludGhlc2lzIHJlc3VsdC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdlJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFRyYW5zbGF0aW9uU3ludGhlc2lzRXZlbnRBcmdzO1xufShFeHBvcnRzXzEuU2Vzc2lvbkV2ZW50QXJncykpO1xuZXhwb3J0cy5UcmFuc2xhdGlvblN5bnRoZXNpc0V2ZW50QXJncyA9IFRyYW5zbGF0aW9uU3ludGhlc2lzRXZlbnRBcmdzO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvblN5bnRoZXNpc0V2ZW50QXJncy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIERlZmluZXMgdHJhbnNsYXRpb24gc3ludGhlc2lzIHJlc3VsdCwgaS5lLiB0aGUgdm9pY2Ugb3V0cHV0IG9mIHRoZSB0cmFuc2xhdGVkXG4gKiB0ZXh0IGluIHRoZSB0YXJnZXQgbGFuZ3VhZ2UuXG4gKiBAY2xhc3MgVHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHRcbiAqL1xudmFyIFRyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtSZXN1bHRSZWFzb259IHJlYXNvbiAtIFRoZSBzeW50aGVzaXMgcmVhc29uLlxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGF1ZGlvIC0gVGhlIGF1ZGlvIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gVHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHQocmVhc29uLCBhdWRpbykge1xuICAgICAgICB0aGlzLnByaXZSZWFzb24gPSByZWFzb247XG4gICAgICAgIHRoaXMucHJpdkF1ZGlvID0gYXVkaW87XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdC5wcm90b3R5cGUsIFwiYXVkaW9cIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVHJhbnNsYXRlZCB0ZXh0IGluIHRoZSB0YXJnZXQgbGFuZ3VhZ2UuXG4gICAgICAgICAqIEBtZW1iZXIgVHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHQucHJvdG90eXBlLmF1ZGlvXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gVHJhbnNsYXRlZCBhdWRpbyBpbiB0aGUgdGFyZ2V0IGxhbmd1YWdlLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2QXVkaW87XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdC5wcm90b3R5cGUsIFwicmVhc29uXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzeW50aGVzaXMgc3RhdHVzLlxuICAgICAgICAgKiBAbWVtYmVyIFRyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0LnByb3RvdHlwZS5yZWFzb25cbiAgICAgICAgICogQGZ1bmN0aW9uXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHJldHVybnMge1Jlc3VsdFJlYXNvbn0gVGhlIHN5bnRoZXNpcyBzdGF0dXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaXZSZWFzb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBUcmFuc2xhdGlvblN5bnRoZXNpc1Jlc3VsdDtcbn0oKSk7XG5leHBvcnRzLlRyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0ID0gVHJhbnNsYXRpb25TeW50aGVzaXNSZXN1bHQ7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYW5zbGF0aW9uU3ludGhlc2lzUmVzdWx0LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFeHBvcnRzXzEgPSByZXF1aXJlKFwiLi9FeHBvcnRzXCIpO1xuLyoqXG4gKiBSZXByZXNlbnRzIGNvbGxlY3Rpb24gb2YgcGFyYW1ldGVycyBhbmQgdGhlaXIgdmFsdWVzLlxuICogQGNsYXNzIFRyYW5zbGF0aW9uXG4gKi9cbnZhciBUcmFuc2xhdGlvbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNsYXRpb25zKCkge1xuICAgICAgICAvLyBVc2UgYW4gUHJvcGVydHlDb2xsZWN0aW9uIGludGVybmFsbHksIGp1c3Qgd3JhcHBpbmcgaXQgdG8gaGlkZSB0aGUgfCBlbnVtIHN5bnRheCBpdCBoYXMuXG4gICAgICAgIHRoaXMucHJpdk1hcCA9IG5ldyBFeHBvcnRzXzEuUHJvcGVydHlDb2xsZWN0aW9uKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhcmFtZXRlciB2YWx1ZSBpbiB0eXBlIFN0cmluZy4gVGhlIHBhcmFtZXRlciBtdXN0IGhhdmUgdGhlIHNhbWUgdHlwZSBhcyBTdHJpbmcuXG4gICAgICogQ3VycmVudGx5IG9ubHkgU3RyaW5nLCBpbnQgYW5kIGJvb2wgYXJlIGFsbG93ZWQuXG4gICAgICogSWYgdGhlIG5hbWUgaXMgbm90IGF2YWlsYWJsZSwgdGhlIHNwZWNpZmllZCBkZWZhdWx0VmFsdWUgaXMgcmV0dXJuZWQuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvbi5wcm90b3R5cGUuZ2V0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGRlZiAtIFRoZSBkZWZhdWx0IHZhbHVlIHdoaWNoIGlzIHJldHVybmVkIGlmIHRoZSBwYXJhbWV0ZXIgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIFRyYW5zbGF0aW9ucy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSwgZGVmKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZNYXAuZ2V0UHJvcGVydHkoa2V5LCBkZWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgU3RyaW5nIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIgc3BlY2lmaWVkIGJ5IG5hbWUuXG4gICAgICogQG1lbWJlciBUcmFuc2xhdGlvbi5wcm90b3R5cGUuc2V0XG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgcGFyYW1ldGVyIG5hbWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgVHJhbnNsYXRpb25zLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnByaXZNYXAuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gVHJhbnNsYXRpb25zO1xufSgpKTtcbmV4cG9ydHMuVHJhbnNsYXRpb25zID0gVHJhbnNsYXRpb25zO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc2xhdGlvbnMuanMubWFwXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKiAoaWdub3JlZCkgKi8iLCIvKiAoaWdub3JlZCkgKi8iLCIvKiAoaWdub3JlZCkgKi8iLCIvKiAoaWdub3JlZCkgKi8iLCIvKiAoaWdub3JlZCkgKi8iLCIvKiAoaWdub3JlZCkgKi8iXSwic291cmNlUm9vdCI6IiJ9